uint64_t WebCore::SVGFEDisplacementMapElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  if (*(_BYTE *)(a2 + 48) != 8)
  {
    __break(0xC471u);
    JUMPOUT(0x19661A144);
  }
  v4 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v4 == 816)
  {
    v13 = a1[32];
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 && *(_DWORD *)(v14 - 12))
    {
      v24 = *(unsigned int *)(v14 - 4);
      if ((_DWORD)v24)
      {
        v25 = 8 * v24;
        v26 = *(uint64_t **)(v13 + 24);
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          ++v26;
          v25 -= 8;
          if (!v25)
            goto LABEL_14;
        }
      }
      else
      {
        v26 = *(uint64_t **)(v13 + 24);
      }
      v31 = (uint64_t *)(v14 + 8 * v24);
      if (v26 != v31)
      {
        v32 = *v26;
LABEL_59:
        if (*(_QWORD *)(v32 + 8))
        {
          v15 = v13 + 48;
LABEL_15:
          v16 = *(float *)(*(_QWORD *)v15 + 28);
          if (*(float *)(a2 + 68) != v16)
          {
            *(float *)(a2 + 68) = v16;
            return 1;
          }
          return 0;
        }
        while (++v26 != v31)
        {
          v32 = *v26;
          if ((unint64_t)(*v26 + 1) > 1)
          {
            if (v26 != v31)
              goto LABEL_59;
            break;
          }
        }
      }
    }
LABEL_14:
    v15 = v13 + 40;
    goto LABEL_15;
  }
  if (v4 != 940)
  {
    if (v4 != 930)
      return 0;
    v5 = (_QWORD *)a1[30];
    v6 = v5[3];
    if (v6 && *(_DWORD *)(v6 - 12))
    {
      v21 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v21)
      {
        v22 = 8 * v21;
        v23 = (uint64_t *)v5[3];
        while ((unint64_t)(*v23 + 1) <= 1)
        {
          ++v23;
          v22 -= 8;
          if (!v22)
            goto LABEL_6;
        }
      }
      else
      {
        v23 = (uint64_t *)v5[3];
      }
      v29 = (uint64_t *)(v6 + 8 * v21);
      if (v23 != v29)
      {
        v30 = *v23;
LABEL_50:
        if (*(_QWORD *)(v30 + 8))
        {
          v7 = v5 + 6;
LABEL_7:
          v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7);
          if (*(unsigned __int8 *)(a2 + 64) != v8)
          {
            *(_BYTE *)(a2 + 64) = v8;
            return 1;
          }
          return 0;
        }
        while (++v23 != v29)
        {
          v30 = *v23;
          if ((unint64_t)(*v23 + 1) > 1)
          {
            if (v23 != v29)
              goto LABEL_50;
            break;
          }
        }
      }
    }
LABEL_6:
    v7 = v5 + 5;
    goto LABEL_7;
  }
  v9 = (_QWORD *)a1[31];
  v10 = v9[3];
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_10;
  v18 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = (uint64_t *)v9[3];
    while ((unint64_t)(*v20 + 1) <= 1)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
        goto LABEL_10;
    }
  }
  else
  {
    v20 = (uint64_t *)v9[3];
  }
  v27 = (uint64_t *)(v10 + 8 * v18);
  if (v20 == v27)
    goto LABEL_10;
  v28 = *v20;
LABEL_41:
  if (!*(_QWORD *)(v28 + 8))
  {
    while (++v20 != v27)
    {
      v28 = *v20;
      if ((unint64_t)(*v20 + 1) > 1)
      {
        if (v20 != v27)
          goto LABEL_41;
        break;
      }
    }
LABEL_10:
    v11 = v9 + 5;
    goto LABEL_11;
  }
  v11 = v9 + 6;
LABEL_11:
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
  if (*(unsigned __int8 *)(a2 + 65) != v12)
  {
    *(_BYTE *)(a2 + 65) = v12;
    return 1;
  }
  return 0;
}

void WebCore::SVGFEDisplacementMapElement::svgAttributeChanged(WebCore::SVGFEDisplacementMapElement *this, const WebCore::QualifiedName *a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v4 > 0x3A1)
  {
    if (v4 == 930 || v4 == 940)
      goto LABEL_23;
LABEL_21:
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
    return;
  }
  if (v4 - 517 < 2)
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v5 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = this;
      *(_BYTE *)(v5 + 32) = 0;
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v5;
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v36 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v36)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v36));
          v37 = *(WTF **)(v8 + 16);
          if (v37)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            WTF::fastFree(v37, v6);
          }
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v13, this);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v14);
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v11);
      v18 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
      v19 = *(WTF **)(v11 + 16);
      if (v19)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v19, v15);
      }
      v20 = (WTF *)v11;
LABEL_40:
      WTF::fastFree(v20, v15);
      return;
    }
    return;
  }
  if (v4 != 816)
    goto LABEL_21;
LABEL_23:
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 8) = this;
    *(_BYTE *)(v21 + 32) = 0;
    v23 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v23 & 0xFFFF000000000000 | v21;
    v24 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v34 = *(unsigned int *)(v24 + 28);
        if ((_DWORD)v34)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v34));
        v35 = *(WTF **)(v24 + 16);
        if (v35)
        {
          *(_QWORD *)(v24 + 16) = 0;
          *(_DWORD *)(v24 + 24) = 0;
          WTF::fastFree(v35, v22);
        }
        WTF::fastFree((WTF *)v24, v22);
      }
    }
  }
  v27 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v28 = __ldaxr((unsigned int *)v27);
  while (__stlxr(v28 + 1, (unsigned int *)v27));
  WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v27 + 8), v29);
  do
  {
    v30 = __ldaxr((unsigned int *)v27);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v27));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v27);
    v32 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v32)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v32));
    v33 = *(WTF **)(v27 + 16);
    if (v33)
    {
      *(_QWORD *)(v27 + 16) = 0;
      *(_DWORD *)(v27 + 24) = 0;
      WTF::fastFree(v33, v15);
    }
    v20 = (WTF *)v27;
    goto LABEL_40;
  }
}

void WebCore::SVGFEDisplacementMapElement::createFilterEffect(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char **v36;
  char *v37;

  v4 = (_QWORD *)a1[30];
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = (uint64_t *)v4[3];
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = (uint64_t *)v4[3];
  }
  v28 = (uint64_t *)(v5 + 8 * v19);
  if (v21 == v28)
    goto LABEL_2;
  v29 = *v21;
LABEL_34:
  if (!*(_QWORD *)(v29 + 8))
  {
    while (++v21 != v28)
    {
      v29 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v28)
          goto LABEL_34;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v8 = (_QWORD *)a1[31];
  v9 = v8[3];
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_4;
  v22 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = (uint64_t *)v8[3];
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_4;
    }
  }
  else
  {
    v24 = (uint64_t *)v8[3];
  }
  v30 = (uint64_t *)(v9 + 8 * v22);
  if (v24 == v30)
    goto LABEL_4;
  v31 = *v24;
LABEL_43:
  if (!*(_QWORD *)(v31 + 8))
  {
    while (++v24 != v30)
    {
      v31 = *v24;
      if ((unint64_t)(*v24 + 1) > 1)
      {
        if (v24 != v30)
          goto LABEL_43;
        break;
      }
    }
LABEL_4:
    v10 = v8 + 5;
    goto LABEL_5;
  }
  v10 = v8 + 6;
LABEL_5:
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10);
  v12 = a1[32];
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13 || !*(_DWORD *)(v13 - 12))
    goto LABEL_6;
  v25 = *(unsigned int *)(v13 - 4);
  if ((_DWORD)v25)
  {
    v26 = 8 * v25;
    v27 = *(uint64_t **)(v12 + 24);
    while ((unint64_t)(*v27 + 1) <= 1)
    {
      ++v27;
      v26 -= 8;
      if (!v26)
        goto LABEL_6;
    }
  }
  else
  {
    v27 = *(uint64_t **)(v12 + 24);
  }
  v32 = (uint64_t *)(v13 + 8 * v25);
  if (v27 == v32)
    goto LABEL_6;
  v33 = *v27;
LABEL_52:
  if (!*(_QWORD *)(v33 + 8))
  {
    while (++v27 != v32)
    {
      v33 = *v27;
      if ((unint64_t)(*v27 + 1) > 1)
      {
        if (v27 != v32)
          goto LABEL_52;
        break;
      }
    }
LABEL_6:
    v14 = v12 + 40;
    goto LABEL_7;
  }
  v14 = v12 + 48;
LABEL_7:
  v15 = *(float *)(*(_QWORD *)v14 + 28);
  v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v16 != -1)
  {
    v37 = &v35;
    v36 = &v37;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v17 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v34 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FEDisplacementMap::create(v7, v11, (const void **)&v34, (uint64_t *)&v37, v15);
    v18 = (uint64_t)v37;
    CFRelease(v17);
  }
  else
  {
    WebCore::FEDisplacementMap::create(v7, v11, (const void **)&v34, (uint64_t *)&v37, v15);
    v18 = (uint64_t)v37;
  }
  *a2 = v18;
}

_QWORD *WebCore::SVGFEDistantLightElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFELightElement::SVGFELightElement(v6, a1, a2);
  *result = off_1E345BE88;
  result[14] = &unk_1E345C3C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGFEDistantLightElement::lightSource@<X0>(WebCore::SVGFEDistantLightElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 22);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v12 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
        goto LABEL_2;
    }
  }
  else
  {
    v14 = *(uint64_t **)(v3 + 24);
  }
  v18 = (uint64_t *)(v4 + 8 * v12);
  if (v14 == v18)
    goto LABEL_2;
  v19 = *v14;
LABEL_21:
  if (!*(_QWORD *)(v19 + 8))
  {
    while (++v14 != v18)
    {
      v19 = *v14;
      if ((unint64_t)(*v14 + 1) > 1)
      {
        if (v14 != v18)
          goto LABEL_21;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 40;
    goto LABEL_3;
  }
  v5 = v3 + 48;
LABEL_3:
  v6 = *(_DWORD *)(*(_QWORD *)v5 + 28);
  v7 = *((_QWORD *)this + 23);
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 && *(_DWORD *)(v8 - 12))
  {
    v15 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = *(uint64_t **)(v7 + 24);
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        ++v17;
        v16 -= 8;
        if (!v16)
          goto LABEL_4;
      }
    }
    else
    {
      v17 = *(uint64_t **)(v7 + 24);
    }
    v20 = (uint64_t *)(v8 + 8 * v15);
    if (v17 != v20)
    {
      v21 = *v17;
LABEL_30:
      if (*(_QWORD *)(v21 + 8))
      {
        v9 = v7 + 48;
        goto LABEL_5;
      }
      while (++v17 != v20)
      {
        v21 = *v17;
        if ((unint64_t)(*v17 + 1) > 1)
        {
          if (v17 != v20)
            goto LABEL_30;
          break;
        }
      }
    }
  }
LABEL_4:
  v9 = v7 + 40;
LABEL_5:
  v10 = *(_DWORD *)(*(_QWORD *)v9 + 28);
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = off_1E3413C20;
  *(_DWORD *)(result + 16) = v6;
  *(_DWORD *)(result + 20) = v10;
  *a2 = result;
  return result;
}

void WebCore::SVGFEDropShadowElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char **v21;
  char *v22;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345C3F8;
  v6[14] = (uint64_t)&unk_1E345C958;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E345DF88;
  *((_QWORD *)v7 + 1) = v6;
  v22 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v22);
  v8 = (uint64_t)v22;
  v22 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345C3F8;
  v6[14] = (uint64_t)&unk_1E345C958;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 0x40000000;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 0x40000000;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0x40000000;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0x40000000;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = atomic_load(&WebCore::SVGFEDropShadowElement::SVGFEDropShadowElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v19 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WebCore::SVGFEDropShadowElement::SVGFEDropShadowElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDropShadowElement::SVGFEDropShadowElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEDropShadowElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x205)
  {
    if (v10 == 518)
    {
      v11 = a1[28];
      v24 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = v24 + 1;
      v26 = *(_QWORD *)(v11 + 40);
      v27 = *(_DWORD **)this;
      if (*(_QWORD *)this)
        *v27 += 2;
      v28 = *(WTF::StringImpl **)(v26 + 32);
      *(_QWORD *)(v26 + 32) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, a2);
          v24 = *(_DWORD *)(v11 + 8) - 1;
          if (*(_DWORD *)(v11 + 8) != 1)
            goto LABEL_16;
          goto LABEL_24;
        }
        *(_DWORD *)v28 -= 2;
      }
      if (v24)
        goto LABEL_16;
LABEL_24:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
    if (v10 == 851)
    {
      v12 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = WebCore::parseNumberOptionalNumber(v13, v14);
      if (v16)
      {
        v17 = v15;
        v18 = HIDWORD(v15);
        v19 = a1[31];
        v20 = *(_DWORD *)(v19 + 8);
        *(_DWORD *)(v19 + 8) = v20 + 1;
        *(_DWORD *)(*(_QWORD *)(v19 + 40) + 28) = v17;
        if (v20)
          *(_DWORD *)(v19 + 8) = v20;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v21 = a1[32];
        v22 = *(_DWORD *)(v21 + 8);
        *(_DWORD *)(v21 + 8) = v22 + 1;
        *(_DWORD *)(*(_QWORD *)(v21 + 40) + 28) = v18;
        if (v22)
          *(_DWORD *)(v21 + 8) = v22;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
    }
  }
  else
  {
    if (v10 == 446)
    {
      v11 = a1[29];
LABEL_15:
      ++*(_DWORD *)(v11 + 8);
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v23;
      v24 = *(_DWORD *)(v11 + 8) - 1;
      if (*(_DWORD *)(v11 + 8) != 1)
      {
LABEL_16:
        *(_DWORD *)(v11 + 8) = v24;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
      goto LABEL_24;
    }
    if (v10 == 447)
    {
      v11 = a1[30];
      goto LABEL_15;
    }
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

void WebCore::SVGFEDropShadowElement::svgAttributeChanged(WebCore::SVGFEDropShadowElement *this, const WebCore::QualifiedName *a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if ((v4 - 446) < 2)
    goto LABEL_36;
  if (v4 != 851)
  {
    if (v4 != 518)
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
      return;
    }
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v5 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = this;
      *(_BYTE *)(v5 + 32) = 0;
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v5;
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v56 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v56)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v56));
          v57 = *(WTF **)(v8 + 16);
          if (v57)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            WTF::fastFree(v57, v6);
          }
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v13, this);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v14);
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = --v16 == 0;
    }
    while (__stlxr(v16, (unsigned int *)v11));
    goto LABEL_29;
  }
  v18 = *((_QWORD *)this + 31);
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19 || !*(_DWORD *)(v19 - 12))
    goto LABEL_16;
  v46 = *(unsigned int *)(v19 - 4);
  if ((_DWORD)v46)
  {
    v47 = 8 * v46;
    v48 = *(uint64_t **)(v18 + 24);
    while ((unint64_t)(*v48 + 1) <= 1)
    {
      ++v48;
      v47 -= 8;
      if (!v47)
        goto LABEL_16;
    }
  }
  else
  {
    v48 = *(uint64_t **)(v18 + 24);
  }
  v60 = (uint64_t *)(v19 + 8 * v46);
  if (v48 == v60)
    goto LABEL_16;
  v61 = *v48;
LABEL_85:
  if (!*(_QWORD *)(v61 + 8))
  {
    while (++v48 != v60)
    {
      v61 = *v48;
      if ((unint64_t)(*v48 + 1) > 1)
      {
        if (v48 != v60)
          goto LABEL_85;
        break;
      }
    }
LABEL_16:
    v20 = v18 + 40;
    goto LABEL_17;
  }
  v20 = v18 + 48;
LABEL_17:
  if (*(float *)(*(_QWORD *)v20 + 28) < 0.0)
  {
LABEL_21:
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v24 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 8) = this;
      *(_BYTE *)(v24 + 32) = 0;
      v25 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v25 & 0xFFFF000000000000 | v24;
      v26 = v25 & 0xFFFFFFFFFFFFLL;
      if ((v25 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          v58 = *(unsigned int *)(v26 + 28);
          if ((_DWORD)v58)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v58));
          v59 = *(WTF **)(v26 + 16);
          if (v59)
          {
            *(_QWORD *)(v26 + 16) = 0;
            *(_DWORD *)(v26 + 24) = 0;
            WTF::fastFree(v59, a2);
          }
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v29 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v29 + 1, (unsigned int *)v11));
    WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, a2);
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v30);
    do
    {
      v31 = __ldaxr((unsigned int *)v11);
      v17 = --v31 == 0;
    }
    while (__stlxr(v31, (unsigned int *)v11));
LABEL_29:
    if (!v17)
      return;
    atomic_store(1u, (unsigned int *)v11);
    v32 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v32)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v32));
    v33 = *(WTF **)(v11 + 16);
    if (v33)
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v33, v15);
    }
    v34 = (WTF *)v11;
LABEL_66:
    WTF::fastFree(v34, v15);
    return;
  }
  v21 = *((_QWORD *)this + 32);
  v22 = *(_QWORD *)(v21 + 24);
  if (!v22 || !*(_DWORD *)(v22 - 12))
    goto LABEL_19;
  v49 = *(unsigned int *)(v22 - 4);
  if ((_DWORD)v49)
  {
    v50 = 8 * v49;
    v51 = *(uint64_t **)(v21 + 24);
    while ((unint64_t)(*v51 + 1) <= 1)
    {
      ++v51;
      v50 -= 8;
      if (!v50)
        goto LABEL_19;
    }
  }
  else
  {
    v51 = *(uint64_t **)(v21 + 24);
  }
  v62 = (uint64_t *)(v22 + 8 * v49);
  if (v51 == v62)
    goto LABEL_19;
  v63 = *v51;
LABEL_94:
  if (!*(_QWORD *)(v63 + 8))
  {
    while (++v51 != v62)
    {
      v63 = *v51;
      if ((unint64_t)(*v51 + 1) > 1)
      {
        if (v51 != v62)
          goto LABEL_94;
        break;
      }
    }
LABEL_19:
    v23 = v21 + 40;
    goto LABEL_20;
  }
  v23 = v21 + 48;
LABEL_20:
  if (*(float *)(*(_QWORD *)v23 + 28) < 0.0)
    goto LABEL_21;
LABEL_36:
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 8) = this;
    *(_BYTE *)(v35 + 32) = 0;
    v37 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v37 & 0xFFFF000000000000 | v35;
    v38 = v37 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v38);
        v54 = *(unsigned int *)(v38 + 28);
        if ((_DWORD)v54)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v38 + 16), (WTF::StringImpl *)(*(_QWORD *)(v38 + 16) + 32 * v54));
        v55 = *(WTF **)(v38 + 16);
        if (v55)
        {
          *(_QWORD *)(v38 + 16) = 0;
          *(_DWORD *)(v38 + 24) = 0;
          WTF::fastFree(v55, v36);
        }
        WTF::fastFree((WTF *)v38, v36);
      }
    }
  }
  v41 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v42 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v42 + 1, (unsigned int *)v41));
  WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v41 + 8), v43);
  do
  {
    v44 = __ldaxr((unsigned int *)v41);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, (unsigned int *)v41));
  if (!v45)
  {
    atomic_store(1u, (unsigned int *)v41);
    v52 = *(unsigned int *)(v41 + 28);
    if ((_DWORD)v52)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v41 + 16), (WTF::StringImpl *)(*(_QWORD *)(v41 + 16) + 32 * v52));
    v53 = *(WTF **)(v41 + 16);
    if (v53)
    {
      *(_QWORD *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 24) = 0;
      WTF::fastFree(v53, v15);
    }
    v34 = (WTF *)v41;
    goto LABEL_66;
  }
}

uint64_t WebCore::SVGFEDropShadowElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[4];
  _QWORD *v55;

  if (*(_BYTE *)(a2 + 48) != 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19661B5E0);
  }
  v4 = 0;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v5 <= 0x1D2)
  {
    if (v5 == 446)
    {
      v23 = a1[29];
      v24 = *(_QWORD **)(v23 + 24);
      if (!v24 || !*((_DWORD *)v24 - 3))
        goto LABEL_30;
      v32 = *((unsigned int *)v24 - 1);
      if ((_DWORD)v32)
      {
        v33 = 8 * v32;
        v34 = *(uint64_t **)(v23 + 24);
        while ((unint64_t)(*v34 + 1) <= 1)
        {
          ++v34;
          v33 -= 8;
          if (!v33)
            goto LABEL_30;
        }
LABEL_69:
        v44 = &v24[v32];
        if (v34 != v44)
        {
          v45 = *v34;
LABEL_71:
          if (*(_QWORD *)(v45 + 8))
          {
            v25 = v23 + 48;
LABEL_31:
            v26 = *(float *)(*(_QWORD *)v25 + 28);
            if (*(float *)(a2 + 72) != v26)
            {
              *(float *)(a2 + 72) = v26;
              return 1;
            }
            return 0;
          }
          while (++v34 != v44)
          {
            v45 = *v34;
            if ((unint64_t)(*v34 + 1) > 1)
            {
              if (v34 != v44)
                goto LABEL_71;
              break;
            }
          }
        }
LABEL_30:
        v25 = v23 + 40;
        goto LABEL_31;
      }
LABEL_68:
      v34 = v24;
      goto LABEL_69;
    }
    if (v5 != 447)
      return v4;
    v10 = a1[30];
    v11 = *(_QWORD *)(v10 + 24);
    if (v11 && *(_DWORD *)(v11 - 12))
    {
      v38 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v38)
      {
        v39 = 8 * v38;
        v40 = *(uint64_t **)(v10 + 24);
        while ((unint64_t)(*v40 + 1) <= 1)
        {
          ++v40;
          v39 -= 8;
          if (!v39)
            goto LABEL_13;
        }
      }
      else
      {
        v40 = *(uint64_t **)(v10 + 24);
      }
      v48 = (uint64_t *)(v11 + 8 * v38);
      if (v40 != v48)
      {
        v49 = *v40;
LABEL_89:
        if (*(_QWORD *)(v49 + 8))
        {
          v12 = v10 + 48;
LABEL_14:
          v13 = *(float *)(*(_QWORD *)v12 + 28);
          if (*(float *)(a2 + 76) != v13)
          {
            *(float *)(a2 + 76) = v13;
            return 1;
          }
          return 0;
        }
        while (++v40 != v48)
        {
          v49 = *v40;
          if ((unint64_t)(*v40 + 1) > 1)
          {
            if (v40 != v48)
              goto LABEL_89;
            break;
          }
        }
      }
    }
LABEL_13:
    v12 = v10 + 40;
    goto LABEL_14;
  }
  switch(v5)
  {
    case 0x1D3u:
      if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19661B600);
      }
      v14 = *(_QWORD *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x88) + 56);
      v53 = *(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x70) + 328;
      v54[0] = &v53;
      v54[1] = &v53;
      v54[2] = &v53;
      v54[3] = &v53;
      v15 = *(unsigned int *)(v14 + 16);
      if ((_DWORD)v15 != -1)
      {
        v55 = v54;
        ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v15])(&v52, &v55, v14 + 8);
        v16 = WebCore::FEDropShadow::setShadowColor((WebCore::FEDropShadow *)a2, (const WebCore::Color *)&v52);
        v4 = v16;
        if ((v52 & 0x8000000000000) != 0)
        {
          v18 = v16;
          v19 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
          do
          {
            v20 = __ldaxr(v19);
            v21 = --v20 == 0;
          }
          while (__stlxr(v20, v19));
          v4 = v18;
          if (v21)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, v17);
            return v18;
          }
        }
        return v4;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_68;
    case 0x1D4u:
      if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19661B620);
      }
      v22 = *(float *)(*(_QWORD *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x88) + 56) + 4);
      if (*(float *)(a2 + 88) != v22)
      {
        *(float *)(a2 + 88) = v22;
        return 1;
      }
      return 0;
    case 0x353u:
      v6 = a1[31];
      v7 = *(_QWORD *)(v6 + 24);
      if (v7 && *(_DWORD *)(v7 - 12))
      {
        v35 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v35)
        {
          v36 = 8 * v35;
          v37 = *(uint64_t **)(v6 + 24);
          while ((unint64_t)(*v37 + 1) <= 1)
          {
            ++v37;
            v36 -= 8;
            if (!v36)
              goto LABEL_7;
          }
        }
        else
        {
          v37 = *(uint64_t **)(v6 + 24);
        }
        v46 = (uint64_t *)(v7 + 8 * v35);
        if (v37 != v46)
        {
          v47 = *v37;
LABEL_80:
          if (*(_QWORD *)(v47 + 8))
          {
            v8 = v6 + 48;
LABEL_8:
            v9 = *(float *)(*(_QWORD *)v8 + 28);
            if (*(float *)(a2 + 64) != v9)
            {
              *(float *)(a2 + 64) = v9;
              return 1;
            }
            v27 = a1[32];
            v28 = *(_QWORD *)(v27 + 24);
            if (v28 && *(_DWORD *)(v28 - 12))
            {
              v41 = *(unsigned int *)(v28 - 4);
              if ((_DWORD)v41)
              {
                v42 = 8 * v41;
                v43 = *(uint64_t **)(v27 + 24);
                while ((unint64_t)(*v43 + 1) <= 1)
                {
                  ++v43;
                  v42 -= 8;
                  if (!v42)
                    goto LABEL_34;
                }
              }
              else
              {
                v43 = *(uint64_t **)(v27 + 24);
              }
              v50 = (uint64_t *)(v28 + 8 * v41);
              if (v43 != v50)
              {
                v51 = *v43;
LABEL_98:
                if (*(_QWORD *)(v51 + 8))
                {
                  v29 = v27 + 48;
LABEL_35:
                  v30 = *(float *)(*(_QWORD *)v29 + 28);
                  if (*(float *)(a2 + 68) != v30)
                  {
                    *(float *)(a2 + 68) = v30;
                    return 1;
                  }
                  return 0;
                }
                while (++v43 != v50)
                {
                  v51 = *v43;
                  if ((unint64_t)(*v43 + 1) > 1)
                  {
                    if (v43 != v50)
                      goto LABEL_98;
                    break;
                  }
                }
              }
            }
LABEL_34:
            v29 = v27 + 40;
            goto LABEL_35;
          }
          while (++v37 != v46)
          {
            v47 = *v37;
            if ((unint64_t)(*v37 + 1) > 1)
            {
              if (v37 != v46)
                goto LABEL_80;
              break;
            }
          }
        }
      }
LABEL_7:
      v8 = v6 + 40;
      goto LABEL_8;
  }
  return v4;
}

BOOL WebCore::SVGFEDropShadowElement::isIdentity(WebCore::SVGFEDropShadowElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v1 = *((_QWORD *)this + 31);
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2 || !*(_DWORD *)(v2 - 12))
    goto LABEL_2;
  v11 = *(unsigned int *)(v2 - 4);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    v13 = *(uint64_t **)(v1 + 24);
    while ((unint64_t)(*v13 + 1) <= 1)
    {
      ++v13;
      v12 -= 8;
      if (!v12)
        goto LABEL_2;
    }
  }
  else
  {
    v13 = *(uint64_t **)(v1 + 24);
  }
  v26 = (uint64_t *)(v2 + 8 * v11);
  if (v13 == v26)
    goto LABEL_2;
  v27 = *v13;
LABEL_41:
  if (!*(_QWORD *)(v27 + 8))
  {
    while (++v13 != v26)
    {
      v27 = *v13;
      if ((unint64_t)(*v13 + 1) > 1)
      {
        if (v13 != v26)
          goto LABEL_41;
        break;
      }
    }
LABEL_2:
    v3 = v1 + 40;
    goto LABEL_3;
  }
  v3 = v1 + 48;
LABEL_3:
  if (*(float *)(*(_QWORD *)v3 + 28) != 0.0)
    return 0;
  v4 = *((_QWORD *)this + 32);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_5;
  v14 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_5;
    }
  }
  else
  {
    v16 = *(uint64_t **)(v4 + 24);
  }
  v28 = (uint64_t *)(v5 + 8 * v14);
  if (v16 == v28)
    goto LABEL_5;
  v29 = *v16;
LABEL_50:
  if (!*(_QWORD *)(v29 + 8))
  {
    while (++v16 != v28)
    {
      v29 = *v16;
      if ((unint64_t)(*v16 + 1) > 1)
      {
        if (v16 != v28)
          goto LABEL_50;
        break;
      }
    }
LABEL_5:
    v6 = v4 + 40;
    goto LABEL_6;
  }
  v6 = v4 + 48;
LABEL_6:
  if (*(float *)(*(_QWORD *)v6 + 28) != 0.0)
    return 0;
  v7 = *((_QWORD *)this + 29);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_8;
  v20 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_8;
    }
  }
  else
  {
    v22 = *(uint64_t **)(v7 + 24);
  }
  v30 = (uint64_t *)(v8 + 8 * v20);
  if (v22 == v30)
    goto LABEL_8;
  v31 = *v22;
LABEL_59:
  if (!*(_QWORD *)(v31 + 8))
  {
    while (++v22 != v30)
    {
      v31 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v30)
          goto LABEL_59;
        break;
      }
    }
LABEL_8:
    v9 = v7 + 40;
    goto LABEL_9;
  }
  v9 = v7 + 48;
LABEL_9:
  if (*(float *)(*(_QWORD *)v9 + 28) != 0.0)
    return 0;
  v17 = *((_QWORD *)this + 30);
  v18 = *(_QWORD *)(v17 + 24);
  if (v18 && *(_DWORD *)(v18 - 12))
  {
    v23 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v23)
    {
      v24 = 8 * v23;
      v25 = *(uint64_t **)(v17 + 24);
      while ((unint64_t)(*v25 + 1) <= 1)
      {
        ++v25;
        v24 -= 8;
        if (!v24)
          goto LABEL_24;
      }
    }
    else
    {
      v25 = *(uint64_t **)(v17 + 24);
    }
    v32 = (uint64_t *)(v18 + 8 * v23);
    if (v25 != v32)
    {
      v33 = *v25;
LABEL_68:
      if (*(_QWORD *)(v33 + 8))
      {
        v19 = v17 + 48;
        return *(float *)(*(_QWORD *)v19 + 28) == 0.0;
      }
      while (++v25 != v32)
      {
        v33 = *v25;
        if ((unint64_t)(*v25 + 1) > 1)
        {
          if (v25 != v32)
            goto LABEL_68;
          break;
        }
      }
    }
  }
LABEL_24:
  v19 = v17 + 40;
  return *(float *)(*(_QWORD *)v19 + 28) == 0.0;
}

double WebCore::SVGFEDropShadowElement::outsets(_QWORD *a1, float32x2_t *a2, __int32 a3, int8x8_t a4, int8x8_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  int8x8_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  float32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  int8x16_t v33;
  double result;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;

  v8 = a1[29];
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_2;
  v35 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v35)
  {
    v36 = 8 * v35;
    v37 = *(uint64_t **)(v8 + 24);
    while ((unint64_t)(*v37 + 1) <= 1)
    {
      ++v37;
      v36 -= 8;
      if (!v36)
        goto LABEL_2;
    }
  }
  else
  {
    v37 = *(uint64_t **)(v8 + 24);
  }
  v47 = (uint64_t *)(v9 + 8 * v35);
  if (v37 == v47)
    goto LABEL_2;
  v48 = *v37;
LABEL_49:
  if (!*(_QWORD *)(v48 + 8))
  {
    while (++v37 != v47)
    {
      v48 = *v37;
      if ((unint64_t)(*v37 + 1) > 1)
      {
        if (v37 != v47)
          goto LABEL_49;
        break;
      }
    }
LABEL_2:
    v10 = v8 + 40;
    goto LABEL_3;
  }
  v10 = v8 + 48;
LABEL_3:
  a4.i32[0] = *(_DWORD *)(*(_QWORD *)v10 + 28);
  v11 = a1[30];
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12 || !*(_DWORD *)(v12 - 12))
    goto LABEL_4;
  v38 = *(unsigned int *)(v12 - 4);
  if ((_DWORD)v38)
  {
    v39 = 8 * v38;
    v40 = *(uint64_t **)(v11 + 24);
    while ((unint64_t)(*v40 + 1) <= 1)
    {
      ++v40;
      v39 -= 8;
      if (!v39)
        goto LABEL_4;
    }
  }
  else
  {
    v40 = *(uint64_t **)(v11 + 24);
  }
  v49 = (uint64_t *)(v12 + 8 * v38);
  if (v40 == v49)
    goto LABEL_4;
  v50 = *v40;
LABEL_58:
  if (!*(_QWORD *)(v50 + 8))
  {
    while (++v40 != v49)
    {
      v50 = *v40;
      if ((unint64_t)(*v40 + 1) > 1)
      {
        if (v40 != v49)
          goto LABEL_58;
        break;
      }
    }
LABEL_4:
    v13 = v11 + 40;
    goto LABEL_5;
  }
  v13 = v11 + 48;
LABEL_5:
  a5.i32[0] = *(_DWORD *)(*(_QWORD *)v13 + 28);
  v55 = __PAIR64__(a5.u32[0], a4.u32[0]);
  v14 = WebCore::SVGFilter::calculateResolvedSize((float32x2_t *)&v55, a2, a3, a4, a5);
  v16 = *(float *)v14.i32;
  v17 = *(float *)v15.i32;
  v18 = a1[31];
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19 || !*(_DWORD *)(v19 - 12))
    goto LABEL_6;
  v41 = *(unsigned int *)(v19 - 4);
  if ((_DWORD)v41)
  {
    v42 = 8 * v41;
    v43 = *(uint64_t **)(v18 + 24);
    while ((unint64_t)(*v43 + 1) <= 1)
    {
      ++v43;
      v42 -= 8;
      if (!v42)
        goto LABEL_6;
    }
  }
  else
  {
    v43 = *(uint64_t **)(v18 + 24);
  }
  v51 = (uint64_t *)(v19 + 8 * v41);
  if (v43 == v51)
    goto LABEL_6;
  v52 = *v43;
LABEL_67:
  if (!*(_QWORD *)(v52 + 8))
  {
    while (++v43 != v51)
    {
      v52 = *v43;
      if ((unint64_t)(*v43 + 1) > 1)
      {
        if (v43 != v51)
          goto LABEL_67;
        break;
      }
    }
LABEL_6:
    v20 = v18 + 40;
    goto LABEL_7;
  }
  v20 = v18 + 48;
LABEL_7:
  v14.i32[0] = *(_DWORD *)(*(_QWORD *)v20 + 28);
  v21 = a1[32];
  v22 = *(_QWORD *)(v21 + 24);
  if (!v22 || !*(_DWORD *)(v22 - 12))
    goto LABEL_8;
  v44 = *(unsigned int *)(v22 - 4);
  if ((_DWORD)v44)
  {
    v45 = 8 * v44;
    v46 = *(uint64_t **)(v21 + 24);
    while ((unint64_t)(*v46 + 1) <= 1)
    {
      ++v46;
      v45 -= 8;
      if (!v45)
        goto LABEL_8;
    }
  }
  else
  {
    v46 = *(uint64_t **)(v21 + 24);
  }
  v53 = (uint64_t *)(v22 + 8 * v44);
  if (v46 == v53)
    goto LABEL_8;
  v54 = *v46;
LABEL_76:
  if (!*(_QWORD *)(v54 + 8))
  {
    while (++v46 != v53)
    {
      v54 = *v46;
      if ((unint64_t)(*v46 + 1) > 1)
      {
        if (v46 != v53)
          goto LABEL_76;
        break;
      }
    }
LABEL_8:
    v23 = v21 + 40;
    goto LABEL_9;
  }
  v23 = v21 + 48;
LABEL_9:
  v15.i32[0] = *(_DWORD *)(*(_QWORD *)v23 + 28);
  v55 = __PAIR64__(v15.u32[0], v14.u32[0]);
  v24 = *(float *)WebCore::SVGFilter::calculateResolvedSize((float32x2_t *)&v55, a2, a3, v14, v15).i32;
  v26 = 0.0;
  v27 = 0.0;
  if (v24 != 0.0)
  {
    v28 = vcvtms_u32_f32((float)(v24 * 1.88) + 0.5);
    if (v28 <= 2)
      v28 = 2;
    if (v28 >= 0x1F4)
      v28 = 500;
    v27 = (float)((3 * v28) >> 1);
  }
  if (v25 != 0.0)
  {
    v29 = vcvtms_u32_f32((float)(v25 * 1.88) + 0.5);
    if (v29 <= 2)
      v29 = 2;
    if (v29 >= 0x1F4)
      v29 = 500;
    v26 = (float)((3 * v29) >> 1);
  }
  v30.f32[0] = v26 - v17;
  v31.f32[0] = v16 + v27;
  v30.f32[1] = v17 + v26;
  v32 = vmax_s32(vcvt_s32_f32(v30), 0);
  v31.f32[1] = v27 - v16;
  v33.i64[0] = v32.u32[0];
  v33.i64[1] = v32.u32[1];
  *(_QWORD *)&result = vorrq_s8((int8x16_t)vshll_n_s32(vmax_s32(vcvt_s32_f32(v31), 0), 0x20uLL), v33).u64[0];
  return result;
}

void WebCore::SVGFEDropShadowElement::createFilterEffect(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char **v73;
  char *v74;

  v3 = a1[8] & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19661C0FCLL);
    }
    v5 = *(_DWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x10) = v5;
    v6 = a1[31];
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 && *(_DWORD *)(v7 - 12))
    {
      v37 = *(unsigned int *)(v7 - 4);
      if ((_DWORD)v37)
      {
        v38 = 8 * v37;
        v39 = *(uint64_t **)(v6 + 24);
        while ((unint64_t)(*v39 + 1) <= 1)
        {
          ++v39;
          v38 -= 8;
          if (!v38)
            goto LABEL_4;
        }
      }
      else
      {
        v39 = *(uint64_t **)(v6 + 24);
      }
      v55 = (uint64_t *)(v7 + 8 * v37);
      if (v39 != v55)
      {
        v56 = *v39;
LABEL_68:
        if (*(_QWORD *)(v56 + 8))
        {
          v8 = v6 + 48;
LABEL_5:
          if (*(float *)(*(_QWORD *)v8 + 28) < 0.0)
            goto LABEL_9;
          v9 = a1[32];
          v10 = *(_QWORD *)(v9 + 24);
          if (v10 && *(_DWORD *)(v10 - 12))
          {
            v40 = *(unsigned int *)(v10 - 4);
            if ((_DWORD)v40)
            {
              v41 = 8 * v40;
              v42 = *(uint64_t **)(v9 + 24);
              while ((unint64_t)(*v42 + 1) <= 1)
              {
                ++v42;
                v41 -= 8;
                if (!v41)
                  goto LABEL_7;
              }
            }
            else
            {
              v42 = *(uint64_t **)(v9 + 24);
            }
            v57 = (uint64_t *)(v10 + 8 * v40);
            if (v42 != v57)
            {
              v58 = *v42;
LABEL_77:
              if (*(_QWORD *)(v58 + 8))
              {
                v11 = v9 + 48;
LABEL_8:
                if (*(float *)(*(_QWORD *)v11 + 28) < 0.0)
                {
LABEL_9:
                  *a2 = 0;
                  if (v5)
                  {
LABEL_10:
                    *(_DWORD *)(v3 + 16) = v5 - 1;
                    return;
                  }
LABEL_25:
                  __break(0xC471u);
                  JUMPOUT(0x19661BF84);
                }
                v12 = *(_QWORD *)(v3 + 136);
                WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)(v3 + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v12 + 56) + 8), (WebCore::Color *)&v71);
                v13 = (_QWORD *)a1[31];
                v14 = v13[3];
                if (v14 && *(_DWORD *)(v14 - 12))
                {
                  v43 = *(unsigned int *)(v14 - 4);
                  if ((_DWORD)v43)
                  {
                    v44 = 8 * v43;
                    v45 = (uint64_t *)v13[3];
                    while ((unint64_t)(*v45 + 1) <= 1)
                    {
                      ++v45;
                      v44 -= 8;
                      if (!v44)
                        goto LABEL_12;
                    }
                  }
                  else
                  {
                    v45 = (uint64_t *)v13[3];
                  }
                  v59 = (uint64_t *)(v14 + 8 * v43);
                  if (v45 != v59)
                  {
                    v60 = *v45;
LABEL_86:
                    if (*(_QWORD *)(v60 + 8))
                    {
                      v15 = v13 + 6;
LABEL_13:
                      v16 = (_QWORD *)a1[32];
                      v17 = v16[3];
                      if (v17 && *(_DWORD *)(v17 - 12))
                      {
                        v46 = *(unsigned int *)(v17 - 4);
                        if ((_DWORD)v46)
                        {
                          v47 = 8 * v46;
                          v48 = (uint64_t *)v16[3];
                          while ((unint64_t)(*v48 + 1) <= 1)
                          {
                            ++v48;
                            v47 -= 8;
                            if (!v47)
                              goto LABEL_14;
                          }
                        }
                        else
                        {
                          v48 = (uint64_t *)v16[3];
                        }
                        v61 = (uint64_t *)(v17 + 8 * v46);
                        if (v48 != v61)
                        {
                          v62 = *v48;
LABEL_95:
                          if (*(_QWORD *)(v62 + 8))
                          {
                            v18 = v16 + 6;
LABEL_15:
                            v19 = (_QWORD *)a1[29];
                            v20 = v19[3];
                            if (v20 && *(_DWORD *)(v20 - 12))
                            {
                              v49 = *(unsigned int *)(v20 - 4);
                              if ((_DWORD)v49)
                              {
                                v50 = 8 * v49;
                                v51 = (uint64_t *)v19[3];
                                while ((unint64_t)(*v51 + 1) <= 1)
                                {
                                  ++v51;
                                  v50 -= 8;
                                  if (!v50)
                                    goto LABEL_16;
                                }
                              }
                              else
                              {
                                v51 = (uint64_t *)v19[3];
                              }
                              v63 = (uint64_t *)(v20 + 8 * v49);
                              if (v51 != v63)
                              {
                                v64 = *v51;
LABEL_104:
                                if (*(_QWORD *)(v64 + 8))
                                {
                                  v21 = v19 + 6;
LABEL_17:
                                  v22 = *v15;
                                  v23 = *v18;
                                  v24 = *v21;
                                  v25 = a1[30];
                                  v26 = *(_QWORD *)(v25 + 24);
                                  if (v26 && *(_DWORD *)(v26 - 12))
                                  {
                                    v52 = *(unsigned int *)(v26 - 4);
                                    if ((_DWORD)v52)
                                    {
                                      v53 = 8 * v52;
                                      v54 = *(uint64_t **)(v25 + 24);
                                      while ((unint64_t)(*v54 + 1) <= 1)
                                      {
                                        ++v54;
                                        v53 -= 8;
                                        if (!v53)
                                          goto LABEL_18;
                                      }
                                    }
                                    else
                                    {
                                      v54 = *(uint64_t **)(v25 + 24);
                                    }
                                    v65 = (uint64_t *)(v26 + 8 * v52);
                                    if (v54 != v65)
                                    {
                                      v66 = *v54;
LABEL_113:
                                      if (*(_QWORD *)(v66 + 8))
                                      {
                                        v27 = v25 + 48;
LABEL_19:
                                        v28 = *(float *)(*(_QWORD *)(v12 + 56) + 4);
                                        v29 = *(float *)(v22 + 28);
                                        v30 = *(float *)(v23 + 28);
                                        v31 = *(float *)(v24 + 28);
                                        v32 = *(float *)(*(_QWORD *)v27 + 28);
                                        v33 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                                        if (v33 != -1)
                                        {
                                          v74 = &v72;
                                          v73 = &v74;
                                          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v73, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                                        }
                                        v34 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                                        v70 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                                        if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
                                        {
                                          CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
                                          WebCore::FEDropShadow::create(&v71, (const void **)&v70, (uint64_t *)&v74, v29, v30, v31, v32, v28);
                                          v35 = (uint64_t)v74;
                                          CFRelease(v34);
                                        }
                                        else
                                        {
                                          WebCore::FEDropShadow::create(&v71, (const void **)&v70, (uint64_t *)&v74, v29, v30, v31, v32, v28);
                                          v35 = (uint64_t)v74;
                                        }
                                        *a2 = v35;
                                        v70 = 0;
                                        if ((v71 & 0x8000000000000) != 0)
                                        {
                                          v67 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
                                          do
                                          {
                                            v68 = __ldaxr(v67);
                                            v69 = v68 - 1;
                                          }
                                          while (__stlxr(v69, v67));
                                          if (!v69)
                                          {
                                            atomic_store(1u, v67);
                                            WTF::fastFree((WTF *)v67, v36);
                                          }
                                        }
                                        v5 = *(_DWORD *)(v3 + 16);
                                        if (v5)
                                          goto LABEL_10;
                                        goto LABEL_25;
                                      }
                                      while (++v54 != v65)
                                      {
                                        v66 = *v54;
                                        if ((unint64_t)(*v54 + 1) > 1)
                                        {
                                          if (v54 != v65)
                                            goto LABEL_113;
                                          break;
                                        }
                                      }
                                    }
                                  }
LABEL_18:
                                  v27 = v25 + 40;
                                  goto LABEL_19;
                                }
                                while (++v51 != v63)
                                {
                                  v64 = *v51;
                                  if ((unint64_t)(*v51 + 1) > 1)
                                  {
                                    if (v51 != v63)
                                      goto LABEL_104;
                                    break;
                                  }
                                }
                              }
                            }
LABEL_16:
                            v21 = v19 + 5;
                            goto LABEL_17;
                          }
                          while (++v48 != v61)
                          {
                            v62 = *v48;
                            if ((unint64_t)(*v48 + 1) > 1)
                            {
                              if (v48 != v61)
                                goto LABEL_95;
                              break;
                            }
                          }
                        }
                      }
LABEL_14:
                      v18 = v16 + 5;
                      goto LABEL_15;
                    }
                    while (++v45 != v59)
                    {
                      v60 = *v45;
                      if ((unint64_t)(*v45 + 1) > 1)
                      {
                        if (v45 != v59)
                          goto LABEL_86;
                        break;
                      }
                    }
                  }
                }
LABEL_12:
                v15 = v13 + 5;
                goto LABEL_13;
              }
              while (++v42 != v57)
              {
                v58 = *v42;
                if ((unint64_t)(*v42 + 1) > 1)
                {
                  if (v42 != v57)
                    goto LABEL_77;
                  break;
                }
              }
            }
          }
LABEL_7:
          v11 = v9 + 40;
          goto LABEL_8;
        }
        while (++v39 != v55)
        {
          v56 = *v39;
          if ((unint64_t)(*v39 + 1) > 1)
          {
            if (v39 != v55)
              goto LABEL_68;
            break;
          }
        }
      }
    }
LABEL_4:
    v8 = v6 + 40;
    goto LABEL_5;
  }
  *a2 = 0;
}

uint64_t WebCore::SVGFEFloodElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345C990;
  v6[14] = (uint64_t)&unk_1E345CEF0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E345E130;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v6 = (uint64_t)off_1E345C990;
  v6[14] = (uint64_t)&unk_1E345CEF0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGFEFloodElement::setFilterEffectAttribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD *v19;

  v4 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19661C574);
    }
    ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  if (*(_BYTE *)(a2 + 48) != 10)
  {
    __break(0xC471u);
    JUMPOUT(0x19661C534);
  }
  if (*a3 == WebCore::SVGNames::flood_colorAttr)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 56);
    v17 = *(_QWORD *)(v4 + 112) + 328;
    v18[0] = &v17;
    v18[1] = &v17;
    v18[2] = &v17;
    v18[3] = &v17;
    v7 = *(unsigned int *)(v6 + 16);
    if ((_DWORD)v7 == -1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::SVGFEFloodElement::createFilterEffect(v15);
    }
    v19 = v18;
    ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v7])(&v16, &v19, v6 + 8);
    v5 = WebCore::FEFlood::setFloodColor((WebCore::FEFlood *)a2, (const WebCore::Color *)&v16);
    if ((v16 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
    }
  }
  else if (*a3 != WebCore::SVGNames::flood_opacityAttr
         || (v12 = *(float *)(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 56) + 4), *(float *)(a2 + 72) == v12))
  {
    v5 = 0;
  }
  else
  {
    *(float *)(a2 + 72) = v12;
    v5 = 1;
  }
  if (v4)
  {
    v13 = *(_DWORD *)(v4 + 16);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x19661C554);
    }
    *(_DWORD *)(v4 + 16) = v13 - 1;
  }
  return v5;
}

void WebCore::SVGFEFloodElement::createFilterEffect(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char **v17;
  char *v18;

  v3 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19661C6A8);
    }
    ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v4 = *(_QWORD *)(v3 + 136);
    WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)(v3 + 80), (const WebCore::StyleColor *)(*(_QWORD *)(v4 + 56) + 8), (WebCore::Color *)&v15);
    v5 = *(float *)(*(_QWORD *)(v4 + 56) + 4);
    v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v6 != -1)
    {
      v18 = &v16;
      v17 = &v18;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v7 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    v14 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    {
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      WebCore::FEFlood::create(&v15, (const void **)&v14, (uint64_t *)&v18, v5);
      v8 = (uint64_t)v18;
      CFRelease(v7);
    }
    else
    {
      WebCore::FEFlood::create(&v15, (const void **)&v14, (uint64_t *)&v18, v5);
      v8 = (uint64_t)v18;
    }
    *a2 = v8;
    v14 = 0;
    if ((v15 & 0x8000000000000) != 0)
    {
      v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
    v10 = *(_DWORD *)(v3 + 16);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19661C6C8);
    }
    *(_DWORD *)(v3 + 16) = v10 - 1;
  }
  else
  {
    *a2 = 0;
  }
}

_QWORD *WebCore::SVGFEFuncAElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(v6, a1, a2);
  *result = off_1E345E1A0;
  result[14] = &unk_1E345E6D8;
  *a3 = result;
  return result;
}

void WebCore::SVGFECompositeElement::~SVGFECompositeElement(WebCore::SVGFECompositeElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFECompositeElement::~SVGFECompositeElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

_QWORD *WebCore::SVGFECompositeElement::filterEffectInputsNames@<X0>(WebCore::SVGFECompositeElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *result;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v4 = *((_QWORD *)this + 28);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v4 + 24);
  }
  v25 = (uint64_t *)(v5 + 8 * v19);
  if (v21 == v25)
    goto LABEL_2;
  v26 = *v21;
LABEL_44:
  if (!*(_QWORD *)(v26 + 8))
  {
    while (++v21 != v25)
    {
      v26 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v25)
          goto LABEL_44;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    if ((*((_BYTE *)v7 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v9 = v7;
      v7 = v29;
      v29 = 0;
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 29);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(_DWORD *)(v11 - 12))
  {
    v22 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      v24 = *(uint64_t **)(v10 + 24);
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_7;
      }
    }
    else
    {
      v24 = *(uint64_t **)(v10 + 24);
    }
    v27 = (uint64_t *)(v11 + 8 * v22);
    if (v24 != v27)
    {
      v28 = *v24;
LABEL_53:
      if (*(_QWORD *)(v28 + 8))
      {
        v12 = v10 + 48;
        goto LABEL_8;
      }
      while (++v24 != v27)
      {
        v28 = *v24;
        if ((unint64_t)(*v24 + 1) > 1)
        {
          if (v24 != v27)
            goto LABEL_53;
          break;
        }
      }
    }
  }
LABEL_7:
  v12 = v10 + 40;
LABEL_8:
  v13 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 32);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v15 = v13;
      v13 = v29;
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)a2 = result;
  if (v7)
    *(_DWORD *)v7 += 2;
  *result = v7;
  if (v13)
  {
    v18 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    result[1] = v13;
    *(_DWORD *)(a2 + 12) = 2;
    if (v18)
      *(_DWORD *)v13 = v18;
    else
      result = (_QWORD *)WTF::StringImpl::destroy(v13, v17);
  }
  else
  {
    result[1] = 0;
    *(_DWORD *)(a2 + 12) = 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v7, v17);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFECompositeElement::~SVGFECompositeElement(WebCore::SVGFECompositeElement *this, void *a2)
{
  WebCore::SVGFECompositeElement::~SVGFECompositeElement((WebCore::SVGFECompositeElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFECompositeElement::~SVGFECompositeElement((WebCore::SVGFECompositeElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEConvolveMatrixElement::~SVGFEConvolveMatrixElement(WebCore::SVGFEConvolveMatrixElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEConvolveMatrixElement::~SVGFEConvolveMatrixElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v3 = (_DWORD *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

_QWORD *WebCore::SVGFEConvolveMatrixElement::filterEffectInputsNames@<X0>(WebCore::SVGFEConvolveMatrixElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEConvolveMatrixElement::~SVGFEConvolveMatrixElement(WebCore::SVGFEConvolveMatrixElement *this, void *a2)
{
  WebCore::SVGFEConvolveMatrixElement::~SVGFEConvolveMatrixElement((WebCore::SVGFEConvolveMatrixElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEConvolveMatrixElement::~SVGFEConvolveMatrixElement((WebCore::SVGFEConvolveMatrixElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement(WebCore::SVGFEDiffuseLightingElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

_QWORD *WebCore::SVGFEDiffuseLightingElement::filterEffectInputsNames@<X0>(WebCore::SVGFEDiffuseLightingElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement(WebCore::SVGFEDiffuseLightingElement *this, void *a2)
{
  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDiffuseLightingElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDiffuseLightingElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEDisplacementMapElement::~SVGFEDisplacementMapElement(WebCore::SVGFEDisplacementMapElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_QWORD *WebCore::SVGFEDisplacementMapElement::filterEffectInputsNames@<X0>(WebCore::SVGFEDisplacementMapElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *result;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v4 = *((_QWORD *)this + 28);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v4 + 24);
  }
  v25 = (uint64_t *)(v5 + 8 * v19);
  if (v21 == v25)
    goto LABEL_2;
  v26 = *v21;
LABEL_44:
  if (!*(_QWORD *)(v26 + 8))
  {
    while (++v21 != v25)
    {
      v26 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v25)
          goto LABEL_44;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    if ((*((_BYTE *)v7 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v9 = v7;
      v7 = v29;
      v29 = 0;
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 29);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(_DWORD *)(v11 - 12))
  {
    v22 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      v24 = *(uint64_t **)(v10 + 24);
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_7;
      }
    }
    else
    {
      v24 = *(uint64_t **)(v10 + 24);
    }
    v27 = (uint64_t *)(v11 + 8 * v22);
    if (v24 != v27)
    {
      v28 = *v24;
LABEL_53:
      if (*(_QWORD *)(v28 + 8))
      {
        v12 = v10 + 48;
        goto LABEL_8;
      }
      while (++v24 != v27)
      {
        v28 = *v24;
        if ((unint64_t)(*v24 + 1) > 1)
        {
          if (v24 != v27)
            goto LABEL_53;
          break;
        }
      }
    }
  }
LABEL_7:
  v12 = v10 + 40;
LABEL_8:
  v13 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 32);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v15 = v13;
      v13 = v29;
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)a2 = result;
  if (v7)
    *(_DWORD *)v7 += 2;
  *result = v7;
  if (v13)
  {
    v18 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    result[1] = v13;
    *(_DWORD *)(a2 + 12) = 2;
    if (v18)
      *(_DWORD *)v13 = v18;
    else
      result = (_QWORD *)WTF::StringImpl::destroy(v13, v17);
  }
  else
  {
    result[1] = 0;
    *(_DWORD *)(a2 + 12) = 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v7, v17);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEDisplacementMapElement::~SVGFEDisplacementMapElement(WebCore::SVGFEDisplacementMapElement *this, void *a2)
{
  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDisplacementMapElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDisplacementMapElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEDistantLightElement::~SVGFEDistantLightElement(WebCore::SVGFEDistantLightElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFELightElement::rendererIsNeeded(WebCore::SVGFELightElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGFEDistantLightElement::~SVGFEDistantLightElement(WebCore::SVGFEDistantLightElement *this, void *a2)
{
  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFEDistantLightElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFEDistantLightElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEDropShadowElement::~SVGFEDropShadowElement(WebCore::SVGFEDropShadowElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_QWORD *WebCore::SVGFEDropShadowElement::filterEffectInputsNames@<X0>(WebCore::SVGFEDropShadowElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEDropShadowElement::~SVGFEDropShadowElement(WebCore::SVGFEDropShadowElement *this, void *a2)
{
  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDropShadowElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFEDiffuseLightingElement::~SVGFEDiffuseLightingElement((WebCore::SVGFEDropShadowElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEFloodElement::~SVGFEFloodElement(WebCore::SVGFEFloodElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFilterPrimitiveStandardAttributes::filterEffectInputsNames(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `non-virtual thunk to'WebCore::SVGFEFloodElement::~SVGFEFloodElement(WebCore::SVGFEFloodElement *this, void *a2)
{
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEFloodElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEFloodElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85158 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)_MergedGlobals_271;
  if (!_MergedGlobals_271)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(_MergedGlobals_271 - 4);
  v4 = _MergedGlobals_271 + 16 * v3;
  if (!*(_DWORD *)(_MergedGlobals_271 - 12))
  {
    v13 = _MergedGlobals_271 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (_MergedGlobals_271)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_271 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (_MergedGlobals_271)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = _MergedGlobals_271 + v14;
    if (_MergedGlobals_271)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85158 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_271;
  if (!_MergedGlobals_271)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_271 - 4);
  v9 = _MergedGlobals_271 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_271 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (_MergedGlobals_271)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_271 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_271)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_271 + v18);
    if (_MergedGlobals_271)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85158 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_271;
  if (!_MergedGlobals_271)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_271 - 4);
  v9 = _MergedGlobals_271 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_271 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (_MergedGlobals_271)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_271 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_271)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_271 + v18);
    if (_MergedGlobals_271)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85158 & 1) != 0)
  {
    v6 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_271;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_271)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
LABEL_7:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85158 & 1) != 0)
  {
    v6 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_271;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_271)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
LABEL_7:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85158 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)_MergedGlobals_271;
  if (!_MergedGlobals_271)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(_MergedGlobals_271 - 4);
  v6 = _MergedGlobals_271 + 16 * v5;
  if (!*(_DWORD *)(_MergedGlobals_271 - 12))
  {
    v15 = _MergedGlobals_271 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)_MergedGlobals_271;
    if (_MergedGlobals_271)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_271 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (_MergedGlobals_271)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = _MergedGlobals_271 + v16;
    if (_MergedGlobals_271)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85158 & 1) != 0)
  {
    v3 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = _MergedGlobals_271;
    if (v4)
      goto LABEL_7;
    if (_MergedGlobals_271)
      v4 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
LABEL_7:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85168 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85160 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85160, v22, (uint64_t)v13);
    byte_1ECE85168 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
    goto LABEL_9;
  }
  v3 = _MergedGlobals_271;
  if (!_MergedGlobals_271)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = _MergedGlobals_271;
  if (!v4)
  {
    if (_MergedGlobals_271)
    {
      v4 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85160)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85160 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85160 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85160 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85158 & 1) != 0)
  {
    v14 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = _MergedGlobals_271;
    if (v15)
      goto LABEL_7;
    if (_MergedGlobals_271)
      v15 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
LABEL_7:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFECompositeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85158 & 1) != 0)
  {
    v6 = _MergedGlobals_271;
    if (!_MergedGlobals_271)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_271;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_271)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_271 + 16 * *(unsigned int *)(_MergedGlobals_271 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
LABEL_7:
  if ((byte_1ECE85158 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = _MergedGlobals_271;
  if (!_MergedGlobals_271)
    return 0;
  v3 = *(_DWORD *)(_MergedGlobals_271 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::CompositeOperationType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::CompositeOperationType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 5)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 6;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::CompositeOperationType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::CompositeOperationType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::CompositeOperationType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch(*(_BYTE *)(result + 12))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v2 += 2;
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::CompositeOperationType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E345CF98;
  *a2 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFECompositeElement::SVGFECompositeElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85170 & 1) == 0)
  {
    qword_1ECE852F8 = (uint64_t)off_1E345CFE8;
    unk_1ECE85300 = 224;
    byte_1ECE85170 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE852F8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE85178 & 1) == 0)
  {
    qword_1ECE85308 = (uint64_t)off_1E345CFE8;
    unk_1ECE85310 = 232;
    byte_1ECE85178 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85308;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, &WebCore::SVGNames::in2Attr, &v2);
  if ((byte_1ECE85180 & 1) == 0)
  {
    qword_1ECE85318 = (uint64_t)off_1E345D050;
    unk_1ECE85320 = 240;
    byte_1ECE85180 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85318;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::operatorAttr, &v2);
  if ((byte_1ECE85188 & 1) == 0)
  {
    qword_1ECE85328 = (uint64_t)off_1E345D1D8;
    unk_1ECE85330 = 248;
    byte_1ECE85188 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85328;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, &WebCore::SVGNames::k1Attr, &v2);
  if ((byte_1ECE85190 & 1) == 0)
  {
    qword_1ECE85338 = (uint64_t)off_1E345D1D8;
    unk_1ECE85340 = 256;
    byte_1ECE85190 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85338;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, &WebCore::SVGNames::k2Attr, &v2);
  if ((byte_1ECE85198 & 1) == 0)
  {
    qword_1ECE85348 = (uint64_t)off_1E345D1D8;
    unk_1ECE85350 = 264;
    byte_1ECE85198 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85348;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, &WebCore::SVGNames::k3Attr, &v2);
  if ((byte_1ECE851A0 & 1) == 0)
  {
    qword_1ECE85358 = (uint64_t)off_1E345D1D8;
    unk_1ECE85360 = 272;
    byte_1ECE851A0 = 1;
  }
  if ((byte_1ECE85158 & 1) == 0)
  {
    _MergedGlobals_271 = 0;
    byte_1ECE85158 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85358;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>((uint64_t)v1, &WebCore::SVGNames::k4Attr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = _MergedGlobals_271;
  if (_MergedGlobals_271
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = _MergedGlobals_271) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(_MergedGlobals_271 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (_MergedGlobals_271)
      v29 = *(_DWORD *)(_MergedGlobals_271 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(_MergedGlobals_271 - 12) = v29;
    v33 = _MergedGlobals_271;
    if (_MergedGlobals_271)
      v34 = *(_DWORD *)(_MergedGlobals_271 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(_MergedGlobals_271 - 16) + v34);
    v36 = *(unsigned int *)(_MergedGlobals_271 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = _MergedGlobals_271;
        if (_MergedGlobals_271)
          v36 = *(unsigned int *)(_MergedGlobals_271 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(_MergedGlobals_271 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (_MergedGlobals_271)
    v30 = *(unsigned int *)(_MergedGlobals_271 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = _MergedGlobals_271 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = _MergedGlobals_271;
  if (_MergedGlobals_271)
  {
    v5 = *(_DWORD *)(_MergedGlobals_271 - 4);
    v6 = *(_DWORD *)(_MergedGlobals_271 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  _MergedGlobals_271 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(_MergedGlobals_271 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[42];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFECompositeElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFECompositeElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFECompositeElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAttributeAnimator::isDiscrete(WebCore::SVGAttributeAnimator *this)
{
  return 0;
}

uint64_t WebCore::SVGAttributeAnimator::calculateDistance(WebCore::SVGAttributeAnimator *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  return 0;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFECompositeElement,WebCore::CompositeOperationType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345D188;
  *(_QWORD *)result = &off_1E345D0B8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFECompositeElement,WebCore::CompositeOperationType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::CompositeOperationType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E345D120;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::CompositeOperationType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345D120;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::isDiscrete()
{
  return 1;
}

char **WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::setFromAndToValues(uint64_t a1, uint64_t a2, char ***a3, char ***a4)
{
  char **v6;
  char v7;
  char **result;
  char v9;

  v6 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(*a3);
  if (v6)
    v7 = *(_BYTE *)v6;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 65) = v7;
  result = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(*a4);
  if (result)
    v9 = *(_BYTE *)result;
  else
    v9 = 0;
  *(_BYTE *)(a1 + 66) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::CompositeOperationType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::CompositeOperationType>::isDiscrete()
{
  return 1;
}

char **WebCore::SVGAnimationEnumerationFunction<WebCore::CompositeOperationType>::setFromAndToValues(uint64_t a1, uint64_t a2, char ***a3, char ***a4)
{
  char **v6;
  char v7;
  char **result;
  char v9;

  v6 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(*a3);
  if (v6)
    v7 = *(_BYTE *)v6;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 9) = v7;
  result = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(*a4);
  if (result)
    v9 = *(_BYTE *)result;
  else
    v9 = 0;
  *(_BYTE *)(a1 + 10) = v9;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFECompositeElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFECompositeElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFECompositeElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CompositeOperationType> [7]>::tryGet<WTF::String>(char **result)
{
  const char *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v7;
  BOOL v8;
  _BOOL4 v9;
  char **v10;
  uint16x8_t v11;
  uint16x8_t v12;
  BOOL v13;
  _BOOL4 v14;
  char v15;
  int v16;
  int v17;

  if (result)
  {
    v1 = result[1];
    v2 = *((_DWORD *)result + 1);
    v3 = ((unint64_t)*((unsigned int *)result + 4) >> 2) & 1;
    v4 = v3 << 32;
    if (v1 != "arithmetic" && v2 == 10)
    {
      if ((_DWORD)v3)
      {
        if (*v1 != 97 || *(_QWORD *)(v1 + 1) != 0x6974656D68746972 || *(_QWORD *)(v1 + 2) != 0x636974656D687469)
          return 0;
      }
      else
      {
        if (*(_WORD *)v1 != 97)
          return 0;
        v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 2), (int16x8_t)xmmword_1969FE990);
        v11.i16[0] = vminvq_u16(v11);
        if (!v11.i32[0])
          return 0;
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v1 + 4), (int16x8_t)xmmword_1969FE9A0);
        v12.i16[0] = vminvq_u16(v12);
        v7 = v12.i8[0];
        if (!v12.i32[0])
        {
          v9 = v1 == "atop";
          v8 = 1;
          goto LABEL_61;
        }
      }
    }
    else if (v1 != "arithmetic" || v2 != 10)
    {
      v7 = v2 == 4;
      v8 = v2 != 4;
      v9 = v1 == "atop";
      if (v1 != "atop" && v2 == 4)
      {
        if ((_DWORD)v3)
        {
          if (*v1 == 97 && *(_WORD *)(v1 + 1) == 28532 && *((_WORD *)v1 + 1) == 28783)
            goto LABEL_22;
          goto LABEL_33;
        }
        if (*(_WORD *)v1 != 97)
        {
LABEL_33:
          v8 = 0;
          v14 = 0;
          v13 = 1;
          v2 = 4;
          goto LABEL_34;
        }
        v8 = 0;
        v13 = 1;
        v2 = 4;
        if (*(_DWORD *)(v1 + 2) == 7274612)
        {
          v14 = 0;
          if (*((_DWORD *)v1 + 1) == 7340143)
          {
LABEL_22:
            v10 = &off_1E345D248;
            return v10 + 2;
          }
        }
        else
        {
          v14 = 0;
        }
LABEL_34:
        if (v1 == "over" || v8)
        {
          if (v1 != "over")
            v7 = 0;
          if (v7)
            goto LABEL_41;
        }
        else
        {
          if (!v2)
          {
LABEL_41:
            v10 = &off_1E345D2A8;
            return v10 + 2;
          }
          if ((v4 & 0x100000000) != 0)
          {
            if (*v1 == 111 && *(_WORD *)(v1 + 1) == 25974 && *((_WORD *)v1 + 1) == 29285)
              goto LABEL_41;
            v4 = 0x100000000;
          }
          else if (*(_WORD *)v1 == 111 && *(_DWORD *)(v1 + 2) == 6619254 && *((_DWORD *)v1 + 1) == 7471205)
          {
            goto LABEL_41;
          }
        }
        v15 = v1 == "xor" || v13;
        if ((v15 & 1) != 0)
        {
          if (v1 == "xor" && v14)
            goto LABEL_52;
        }
        else
        {
          if (!v2)
          {
LABEL_52:
            v10 = &off_1E345D2C0;
            return v10 + 2;
          }
          if ((v4 & 0x100000000) != 0)
          {
            if (*v1 != 120)
              return 0;
            v16 = *(unsigned __int16 *)(v1 + 1);
            v17 = 29295;
          }
          else
          {
            if (*(_WORD *)v1 != 120)
              return 0;
            v16 = *(_DWORD *)(v1 + 2);
            v17 = 7471215;
          }
          if (v16 == v17)
            goto LABEL_52;
        }
        return 0;
      }
LABEL_61:
      if (v9 && v7)
        goto LABEL_22;
      if (v1 != "in" && v2 == 2)
      {
        if (!(_DWORD)v3)
        {
          if (*(_WORD *)v1 != 105 || *((_WORD *)v1 + 1) != 110)
          {
            v14 = 0;
            v13 = 1;
            v2 = 2;
            goto LABEL_34;
          }
LABEL_68:
          v10 = &off_1E345D260;
          return v10 + 2;
        }
        if (*v1 == 105 && v1[1] == 110)
          goto LABEL_68;
        v14 = 0;
        v13 = 1;
        v2 = 2;
LABEL_70:
        v4 = 0x100000000;
        goto LABEL_34;
      }
      if (v1 == "in" && v2 == 2)
        goto LABEL_68;
      if (v1 == "lighter" || v2 != 7)
      {
        if (v1 != "lighter" || v2 != 7)
        {
          v14 = v2 == 3;
          v13 = v2 != 3;
          if (v1 == "out" || v2 != 3)
          {
            if (v1 != "out" || v2 != 3)
              goto LABEL_34;
          }
          else if ((_DWORD)v3)
          {
            if (*v1 != 111 || *(_WORD *)(v1 + 1) != 29813)
            {
              v13 = 0;
              v2 = 3;
              goto LABEL_70;
            }
          }
          else if (*(_WORD *)v1 != 111 || *(_DWORD *)(v1 + 2) != 7602293)
          {
            v13 = 0;
            v2 = 3;
            goto LABEL_34;
          }
          v10 = &off_1E345D290;
          return v10 + 2;
        }
      }
      else if ((_DWORD)v3)
      {
        if (*v1 != 108 || *(_DWORD *)(v1 + 1) != 1952999273 || *(_DWORD *)(v1 + 3) != 1919251560)
        {
          v14 = 0;
          v13 = 1;
          v2 = 7;
          goto LABEL_70;
        }
      }
      else
      {
        if (*(_WORD *)v1 != 108)
        {
          v14 = 0;
          v13 = 1;
          v2 = 7;
          goto LABEL_34;
        }
        v14 = 0;
        v13 = 1;
        v2 = 7;
        if (*(_QWORD *)(v1 + 2) != 0x74006800670069 || *(_QWORD *)(v1 + 6) != 0x72006500740068)
          goto LABEL_34;
      }
      v10 = &off_1E345D278;
      return v10 + 2;
    }
    v10 = &WebCore::SVGPropertyTraits<WebCore::CompositeOperationType>::fromString(WTF::String const&)::mappings;
    return v10 + 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::EdgeModeType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x40);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *a2;
  *(_QWORD *)result = off_1E345E770;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &off_1E34568A0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = result;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE851B0 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE851A8;
  if (!qword_1ECE851A8)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE851A8 - 4);
  v4 = qword_1ECE851A8 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE851A8 - 12))
  {
    v13 = qword_1ECE851A8 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (qword_1ECE851A8)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE851A8 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE851A8)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE851A8 + v14;
    if (qword_1ECE851A8)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE851B0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE851A8;
  if (!qword_1ECE851A8)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE851A8 - 4);
  v9 = qword_1ECE851A8 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE851A8 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (qword_1ECE851A8)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE851A8 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE851A8)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE851A8 + v18);
    if (qword_1ECE851A8)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE851B0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE851A8;
  if (!qword_1ECE851A8)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE851A8 - 4);
  v9 = qword_1ECE851A8 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE851A8 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (qword_1ECE851A8)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE851A8 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE851A8)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE851A8 + v18);
    if (qword_1ECE851A8)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE851B0 & 1) != 0)
  {
    v6 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE851A8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE851A8)
      v7 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
LABEL_7:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE851B0 & 1) != 0)
  {
    v6 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE851A8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE851A8)
      v7 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
LABEL_7:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE851B0 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE851A8;
  if (!qword_1ECE851A8)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE851A8 - 4);
  v6 = qword_1ECE851A8 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE851A8 - 12))
  {
    v15 = qword_1ECE851A8 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE851A8;
    if (qword_1ECE851A8)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE851A8 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE851A8)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE851A8 + v16;
    if (qword_1ECE851A8)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE851B0 & 1) != 0)
  {
    v3 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE851A8;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE851A8)
      v4 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
LABEL_7:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE851C0 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE851B8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE851B8, v22, (uint64_t)v13);
    byte_1ECE851C0 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE851A8;
  if (!qword_1ECE851A8)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE851A8;
  if (!v4)
  {
    if (qword_1ECE851A8)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE851B8)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE851B8 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE851B8 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE851B8 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE851B0 & 1) != 0)
  {
    v14 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE851A8;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE851A8)
      v15 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
LABEL_7:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE851B0 & 1) != 0)
  {
    v6 = qword_1ECE851A8;
    if (!qword_1ECE851A8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE851A8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE851A8)
      v7 = (WTF::StringImpl ***)(qword_1ECE851A8 + 16 * *(unsigned int *)(qword_1ECE851A8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
LABEL_7:
  if ((byte_1ECE851B0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE851A8;
  if (!qword_1ECE851A8)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE851A8 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

_QWORD *WebCore::SVGAnimatedPrimitiveProperty<int>::~SVGAnimatedPrimitiveProperty(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E345D358;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *a1 = off_1E347BE40;
  v5 = a1[3];
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<int>::~SVGAnimatedPrimitiveProperty(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E345D358;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E347BE40;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<int>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<int>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedPrimitiveProperty<int>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<int>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedPrimitiveProperty<int>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedPrimitiveProperty<int>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _BYTE v9[24];

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)(v5 + 28);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E345D3D8;
    *(_DWORD *)(v6 + 28) = *(_DWORD *)(v5 + 28);
    v7 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<int>::stopAnimation(_QWORD *a1, _QWORD *a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  result = (_DWORD *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(a1 + 3), a2);
  v4 = a1[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v5 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (uint64_t *)a1[3];
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_2;
    }
  }
  else
  {
    v7 = (uint64_t *)a1[3];
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (v7 == v8)
    goto LABEL_2;
  v9 = *v7;
LABEL_16:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (++v7 != v8)
    {
      v9 = *v7;
      if ((unint64_t)(*v7 + 1) > 1)
      {
        if (v7 != v8)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    return result;
  }
  v10 = a1[6];
  if (v10)
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(a1[5] + 28);
  return result;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<int>::instanceStartAnimation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a1[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = (uint64_t *)a1[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_2;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a3 + 48);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = (_DWORD *)a1[6];
    a1[6] = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<int>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::SVGSharedPrimitiveProperty<int>::valueAsString(uint64_t a1)
{
  return WTF::String::number((WTF::String *)*(unsigned int *)(a1 + 28));
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::EdgeModeType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::EdgeModeType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 2)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 3;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::EdgeModeType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::EdgeModeType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::EdgeModeType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch(*(_BYTE *)(result + 12))
  {
    case 1:
    case 2:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    case 3:
      v2 = (_DWORD *)WebCore::noneAtomData;
      if (WebCore::noneAtomData)
        goto LABEL_3;
      goto LABEL_4;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
LABEL_3:
        *v2 += 2;
LABEL_4:
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::EdgeModeType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E345E770;
  *a2 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedPrimitiveProperty<BOOL>::~SVGAnimatedPrimitiveProperty(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E345D410;
  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *a1 = off_1E347BE40;
  v5 = a1[3];
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<BOOL>::~SVGAnimatedPrimitiveProperty(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E345D410;
  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E347BE40;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(unsigned int **)(v5 + 8 * i);
        if (v9 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = i;
              v14 = v5;
              v12 = v7;
              WTF::fastFree((WTF *)v9, a2);
              v7 = v12;
              i = v13;
              v5 = v14;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<BOOL>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<BOOL>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedPrimitiveProperty<BOOL>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<BOOL>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedPrimitiveProperty<BOOL>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedPrimitiveProperty<BOOL>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _BYTE v9[24];

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    *(_BYTE *)(v4 + 26) = *(_BYTE *)(v5 + 26);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E345D490;
    *(_BYTE *)(v6 + 26) = *(_BYTE *)(v5 + 26);
    v7 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<BOOL>::stopAnimation(_QWORD *a1, _QWORD *a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  result = (_DWORD *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)(a1 + 3), a2);
  v4 = a1[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v5 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = (uint64_t *)a1[3];
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_2;
    }
  }
  else
  {
    v7 = (uint64_t *)a1[3];
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (v7 == v8)
    goto LABEL_2;
  v9 = *v7;
LABEL_16:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (++v7 != v8)
    {
      v9 = *v7;
      if ((unint64_t)(*v7 + 1) > 1)
      {
        if (v7 != v8)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    return result;
  }
  v10 = a1[6];
  if (v10)
    *(_BYTE *)(v10 + 26) = *(_BYTE *)(a1[5] + 26);
  return result;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<BOOL>::instanceStartAnimation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = a1[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v9 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a1[3];
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = (uint64_t *)a1[3];
  }
  v12 = (uint64_t *)(v5 + 8 * v9);
  if (v11 == v12)
    goto LABEL_2;
  v13 = *v11;
LABEL_18:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v11 != v12)
    {
      v13 = *v11;
      if ((unint64_t)(*v11 + 1) > 1)
      {
        if (v11 != v12)
          goto LABEL_18;
        break;
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a3 + 48);
    if (v6)
      ++*(_DWORD *)(v6 + 8);
    v7 = (_DWORD *)a1[6];
    a1[6] = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedPrimitiveProperty<BOOL>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::SVGSharedPrimitiveProperty<BOOL>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  _DWORD *v3;

  v2 = &WebCore::trueAtomData;
  if (!*(_BYTE *)(result + 26))
    v2 = &WebCore::falseAtomData;
  v3 = (_DWORD *)*v2;
  if (v3)
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEConvolveMatrixElement::SVGFEConvolveMatrixElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE851C8 & 1) == 0)
  {
    qword_1ECE85368 = (uint64_t)off_1E345D4C8;
    unk_1ECE85370 = 224;
    byte_1ECE851C8 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85368;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE851D0 & 1) == 0)
  {
    qword_1ECE854A8 = 232;
    qword_1ECE854A0 = (uint64_t)off_1E345D598;
    qword_1ECE854B8 = 240;
    qword_1ECE854B0 = (uint64_t)off_1E345D598;
    qword_1ECE85498 = (uint64_t)off_1E345D530;
    byte_1ECE851D0 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85498;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::orderAttr, &v2);
  if ((byte_1ECE851D8 & 1) == 0)
  {
    qword_1ECE85378 = (uint64_t)off_1E345D7A0;
    unk_1ECE85380 = 248;
    byte_1ECE851D8 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85378;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::kernelMatrixAttr, &v2);
  if ((byte_1ECE851E0 & 1) == 0)
  {
    qword_1ECE85388 = (uint64_t)off_1E345D808;
    unk_1ECE85390 = 256;
    byte_1ECE851E0 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85388;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, &WebCore::SVGNames::divisorAttr, &v2);
  if ((byte_1ECE851E8 & 1) == 0)
  {
    qword_1ECE85398 = (uint64_t)off_1E345D808;
    unk_1ECE853A0 = 264;
    byte_1ECE851E8 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85398;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, &WebCore::SVGNames::biasAttr, &v2);
  if ((byte_1ECE851F0 & 1) == 0)
  {
    qword_1ECE853A8 = (uint64_t)off_1E345D598;
    unk_1ECE853B0 = 272;
    byte_1ECE851F0 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853A8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::targetXAttr, &v2);
  if ((byte_1ECE851F8 & 1) == 0)
  {
    qword_1ECE853B8 = (uint64_t)off_1E345D598;
    unk_1ECE853C0 = 280;
    byte_1ECE851F8 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853B8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::targetYAttr, &v2);
  if ((byte_1ECE85200 & 1) == 0)
  {
    qword_1ECE853C8 = (uint64_t)off_1E345D870;
    unk_1ECE853D0 = 288;
    byte_1ECE85200 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853C8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::edgeModeAttr, &v2);
  if ((byte_1ECE85208 & 1) == 0)
  {
    qword_1ECE854D0 = 296;
    qword_1ECE854C8 = (uint64_t)off_1E345D808;
    qword_1ECE854E0 = 304;
    qword_1ECE854D8 = (uint64_t)off_1E345D808;
    qword_1ECE854C0 = (uint64_t)off_1E345D8D8;
    byte_1ECE85208 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE854C0;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::kernelUnitLengthAttr, &v2);
  if ((byte_1ECE85210 & 1) == 0)
  {
    qword_1ECE853D8 = (uint64_t)off_1E345D940;
    unk_1ECE853E0 = 312;
    byte_1ECE85210 = 1;
  }
  if ((byte_1ECE851B0 & 1) == 0)
  {
    qword_1ECE851A8 = 0;
    byte_1ECE851B0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853D8;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::preserveAlphaAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE851A8;
  if (qword_1ECE851A8
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE851A8) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE851A8 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE851A8)
      v29 = *(_DWORD *)(qword_1ECE851A8 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE851A8 - 12) = v29;
    v33 = qword_1ECE851A8;
    if (qword_1ECE851A8)
      v34 = *(_DWORD *)(qword_1ECE851A8 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE851A8 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE851A8 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE851A8;
        if (qword_1ECE851A8)
          v36 = *(unsigned int *)(qword_1ECE851A8 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE851A8 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE851A8)
    v30 = *(unsigned int *)(qword_1ECE851A8 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE851A8 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE851A8;
  if (qword_1ECE851A8)
  {
    v5 = *(_DWORD *)(qword_1ECE851A8 - 4);
    v6 = *(_DWORD *)(qword_1ECE851A8 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE851A8 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE851A8 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[53];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEConvolveMatrixElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedIntegerPairAccessor<WebCore::SVGFEConvolveMatrixElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedIntegerPairAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345D738;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E347BD48;
  *(_QWORD *)v16 = off_1E345D600;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E347BD48;
  *(_QWORD *)result = off_1E345D600;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345D6D0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedIntegerPairAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(result + 32);
  v6 = *(_QWORD *)(a2 + *(_QWORD *)(result + 16));
  v7 = *(_QWORD *)(a3 + 32);
  ++*(_DWORD *)(v6 + 8);
  v20 = v6;
  v8 = *(unsigned int *)(v7 + 52);
  if ((_DWORD)v8 == *(_DWORD *)(v7 + 48))
  {
    v9 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 40), v8 + 1, (unint64_t)&v20);
    v10 = *(unsigned int *)(v7 + 52);
    v11 = *(_QWORD *)(v7 + 40);
    v12 = *(_QWORD *)v9;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    result = v20;
    *(_DWORD *)(v7 + 52) = v10 + 1;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v8) = v6;
    *(_DWORD *)(v7 + 52) = v8 + 1;
  }
  v13 = *(_QWORD *)(a3 + 40);
  v14 = *(_QWORD *)(a2 + v5);
  ++*(_DWORD *)(v14 + 8);
  v20 = v14;
  v15 = *(unsigned int *)(v13 + 52);
  if ((_DWORD)v15 == *(_DWORD *)(v13 + 48))
  {
    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v13 + 40), v15 + 1, (unint64_t)&v20);
    v17 = *(unsigned int *)(v13 + 52);
    v18 = *(_QWORD *)(v13 + 40);
    v19 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v18 + 8 * v17) = v19;
    result = v20;
    *(_DWORD *)(v13 + 52) = v17 + 1;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8 * v15) = v14;
    *(_DWORD *)(v13 + 52) = v15 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E347BD48;
  *(_QWORD *)result = off_1E345D600;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedIntegerAnimator::~SVGAnimatedIntegerAnimator(WebCore::SVGAnimatedIntegerAnimator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345D668;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345D668;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::isDiscrete()
{
  return 0;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4);
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v9 = WTF::parseInteger<int,char16_t>(v7, v8, 10, 0);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::parseInteger<int,unsigned char>(v7, v8, 10, 0);
LABEL_6:
  if ((v9 & 0xFF00000000) != 0)
    v10 = v9;
  else
    v10 = 0;
  *(_DWORD *)(a1 + 68) = v10;
  v11 = *a4;
  if (*a4)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4);
    if ((*(_BYTE *)(v11 + 16) & 4) == 0)
    {
      result = WTF::parseInteger<int,char16_t>(v12, v13, 10, 0);
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  result = WTF::parseInteger<int,unsigned char>(v12, v13, 10, 0);
LABEL_14:
  if ((result & 0xFF00000000) != 0)
    v15 = result;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 72) = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::setFromAndByValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 56;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 24))(a1 + 56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::setToAtEndOfDurationValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      result = WTF::parseInteger<int,char16_t>(v4, v5, 10, 0);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::parseInteger<int,unsigned char>(v4, v5, 10, 0);
LABEL_6:
  if ((result & 0xFF00000000) != 0)
    v7 = result;
  else
    v7 = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedIntegerAnimator::animate(uint64_t this, WebCore::SVGElement *a2, float a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v4 = *(_QWORD **)(this + 32);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)v4[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = (uint64_t *)v4[3];
  }
  v16 = (uint64_t *)(v5 + 8 * v13);
  if (v15 == v16)
    goto LABEL_2;
  v17 = *v15;
LABEL_29:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (++v15 != v16)
    {
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_29;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  v7 = *v6;
  v8 = 76;
  if (!*(_BYTE *)(this + 80))
    v8 = 72;
  if (a3 >= 0.5)
    v9 = (float)*(int *)(this + 72);
  else
    v9 = (float)*(int *)(this + 68);
  v10 = (float)*(int *)(this + 68) + (float)((float)((float)*(int *)(this + 72) - (float)*(int *)(this + 68)) * a3);
  if (!*(_BYTE *)(this + 65))
    v10 = v9;
  if (*(_BYTE *)(this + 66))
    v11 = a4 == 0;
  else
    v11 = 1;
  if (!v11)
    v10 = v10 + (float)((float)*(int *)(this + v8) * (float)a4);
  if (*(_BYTE *)(this + 67))
  {
    v12 = (float)*(int *)(v7 + 28);
    if (*(_BYTE *)(this + 64) == 3)
      v12 = -0.0;
    v10 = v10 + v12;
  }
  *(_DWORD *)(v7 + 28) = llroundf(v10);
  return this;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::calculateDistance(uint64_t a1, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  return WebCore::SVGAnimationIntegerFunction::calculateDistance((WebCore::SVGAnimationIntegerFunction *)(a1 + 56), a2, a3, a4);
}

void WebCore::SVGAnimatedIntegerPairAnimator::~SVGAnimatedIntegerPairAnimator(WebCore::SVGAnimatedIntegerPairAnimator *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345D738;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345D738;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

unint64_t WebCore::SVGAnimatedIntegerPairAnimator::setFromAndToValues(WebCore::SVGAnimatedIntegerPairAnimator *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = WebCore::parseNumberOptionalNumber(v7, v8);
  if (v11)
  {
    v12 = HIDWORD(v9);
    LODWORD(v12) = llroundf(*(float *)&v9);
    LODWORD(v10) = llroundf(*((float *)&v9 + 1));
    v13 = v12 | (v10 << 32);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  result = WebCore::parseNumberOptionalNumber(v15, v16);
  if (v19)
  {
    v20 = HIDWORD(result);
    LODWORD(v20) = llroundf(*(float *)&result);
    LODWORD(v18) = llroundf(*((float *)&result + 1));
    v21 = v20 | (v18 << 32);
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)this + 4);
  v23 = *((_QWORD *)this + 5);
  *(_DWORD *)(v22 + 68) = v13;
  *(_DWORD *)(v22 + 72) = v21;
  *(_DWORD *)(v23 + 68) = HIDWORD(v13);
  *(_DWORD *)(v23 + 72) = HIDWORD(v21);
  return result;
}

unint64_t WebCore::SVGAnimatedIntegerPairAnimator::setFromAndByValues(WebCore::SVGAnimatedIntegerPairAnimator *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = WebCore::parseNumberOptionalNumber(v7, v8);
  if (v11)
  {
    v12 = HIDWORD(v9);
    LODWORD(v12) = llroundf(*(float *)&v9);
    LODWORD(v10) = llroundf(*((float *)&v9 + 1));
    v13 = v12 | (v10 << 32);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  result = WebCore::parseNumberOptionalNumber(v15, v16);
  if (v19)
  {
    v20 = HIDWORD(result);
    LODWORD(v20) = llroundf(*(float *)&result);
    LODWORD(v18) = llroundf(*((float *)&result + 1));
    v21 = v20 | (v18 << 32);
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)this + 4);
  v23 = *((_QWORD *)this + 5);
  *(_DWORD *)(v22 + 68) = v13;
  *(_DWORD *)(v22 + 72) = v21 + v13;
  *(_DWORD *)(v23 + 68) = HIDWORD(v13);
  *(_DWORD *)(v23 + 72) = HIDWORD(v21) + HIDWORD(v13);
  return result;
}

unint64_t WebCore::SVGAnimatedIntegerPairAnimator::setToAtEndOfDurationValue(WebCore::SVGAnimatedIntegerPairAnimator *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  result = WebCore::parseNumberOptionalNumber(v4, v5);
  if (v8)
  {
    v9 = HIDWORD(result);
    LODWORD(v9) = llroundf(*(float *)&result);
    LODWORD(v7) = llroundf(*((float *)&result + 1));
    v10 = v9 | (v7 << 32);
  }
  else
  {
    v10 = 0;
  }
  v11 = *((_QWORD *)this + 4);
  *(_DWORD *)(v11 + 76) = v10;
  *(_BYTE *)(v11 + 80) = 1;
  v12 = *((_QWORD *)this + 5);
  *(_DWORD *)(v12 + 76) = HIDWORD(v10);
  *(_BYTE *)(v12 + 80) = 1;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedIntegerAnimator,WebCore::SVGAnimatedIntegerAnimator>::start(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 32) + 80))(*(_QWORD *)(v2 + 32), v2);
  v3 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, v2, *(_QWORD *)(v2 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 32) + 80))(*(_QWORD *)(v7 + 32), v7);
  v9 = *(unsigned int *)(v7 + 52);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(v7 + 40);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 96))(v12, v7, *(_QWORD *)(v7 + 32));
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedIntegerAnimator,WebCore::SVGAnimatedIntegerAnimator>::animate(uint64_t a1, WebCore::SVGElement *a2, unsigned int a3, float a4)
{
  WebCore::SVGAnimatedIntegerAnimator::animate(*(_QWORD *)(a1 + 32), a2, a4, a3);
  return WebCore::SVGAnimatedIntegerAnimator::animate(*(_QWORD *)(a1 + 40), a2, a4, a3);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedIntegerAnimator,WebCore::SVGAnimatedIntegerAnimator>::stop(uint64_t a1, WebCore::SVGElement *a2)
{
  WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::stop(*(WebCore::SVGElement ***)(a1 + 32), a2);
  return WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<int>,WebCore::SVGAnimationIntegerFunction>::stop(*(WebCore::SVGElement ***)(a1 + 40), a2);
}

_QWORD *WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedIntegerAnimator,WebCore::SVGAnimatedIntegerAnimator>::~SVGAnimatedPropertyPairAnimator(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E345D738;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = a1[2];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)a1[2];
    a1[2] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    a1[2] = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedIntegerAnimator,WebCore::SVGAnimatedIntegerAnimator>::~SVGAnimatedPropertyPairAnimator(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345D738;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)v16 = off_1E3456A08;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = off_1E3456AC0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 0;
  *((_DWORD *)v18 + 2) = 1;
  *v18 = off_1E346F430;
  v18[5] = 0;
  v18[6] = &unk_1E346F4A8;
  *(_QWORD *)(v16 + 72) = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = 0;
  *((_DWORD *)v19 + 2) = 1;
  v19[5] = 0;
  v19[6] = &unk_1E346F4A8;
  *v19 = off_1E346F430;
  *(_QWORD *)(v16 + 80) = v19;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  *((_DWORD *)result + 2) = 1;
  result[5] = 0;
  result[6] = &unk_1E346F4A8;
  *result = off_1E346F430;
  *(_QWORD *)(v16 + 88) = result;
  *(_QWORD *)(v16 + 56) = &off_1E3456A70;
  *(_QWORD *)v16 = off_1E34569A0;
  *a8 = v16;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberListAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::EdgeModeType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345E960;
  *(_QWORD *)result = &off_1E345E890;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::EdgeModeType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::EdgeModeType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E345E8F8;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::EdgeModeType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345E8F8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  return WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>::setFromAndToValues(a1 + 56, a2, a3, a4);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::EdgeModeType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::EdgeModeType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::EdgeModeType>::setFromAndToValues(uint64_t a1, uint64_t a2, WTF **a3, WTF **a4)
{
  char v7;
  const WTF::StringImpl *v8;
  uint64_t result;
  char v10;
  const WTF::StringImpl *v11;

  if ((MEMORY[0x19AEA53F4](*a3, "duplicate", 9) & 1) != 0)
  {
    v7 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](*a3, "wrap", 4) & 1) != 0)
  {
    v7 = 2;
  }
  else if (WTF::equal(*a3, (const WTF::StringImpl *)WebCore::noneAtomData, v8))
  {
    v7 = 3;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 9) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "duplicate", 9);
  if ((result & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "wrap", 4);
    if ((result & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      result = WTF::equal(*a4, (const WTF::StringImpl *)WebCore::noneAtomData, v11);
      if ((_DWORD)result)
        v10 = 3;
      else
        v10 = 0;
    }
  }
  *(_BYTE *)(a1 + 10) = v10;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEConvolveMatrixElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEConvolveMatrixElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

void WebCore::SVGAnimatedNumberPairAnimator::~SVGAnimatedNumberPairAnimator(WebCore::SVGAnimatedNumberPairAnimator *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345E828;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345E828;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

unint64_t WebCore::SVGAnimatedNumberPairAnimator::setFromAndToValues(WebCore::SVGAnimatedNumberPairAnimator *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t result;
  char v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = WebCore::parseNumberOptionalNumber(v7, v8);
  v11 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  if (v10)
    v14 = *(float *)&v9;
  else
    v14 = 0.0;
  if (v10)
    v15 = *((float *)&v9 + 1);
  else
    v15 = 0.0;
  result = WebCore::parseNumberOptionalNumber(v12, v13);
  v18 = *(float *)&result;
  if (!v17)
    v18 = 0.0;
  v19 = *((_QWORD *)this + 4);
  v20 = *((_QWORD *)this + 5);
  *(float *)(v19 + 68) = v14;
  *(float *)(v19 + 72) = v18;
  if (v17)
    v21 = *((float *)&result + 1);
  else
    v21 = 0.0;
  *(float *)(v20 + 68) = v15;
  *(float *)(v20 + 72) = v21;
  return result;
}

float WebCore::SVGAnimatedNumberPairAnimator::setFromAndByValues(WebCore::SVGAnimatedNumberPairAnimator *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  float result;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = WebCore::parseNumberOptionalNumber(v7, v8);
  v11 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  if (v10)
    v14 = *(float *)&v9;
  else
    v14 = 0.0;
  if (v10)
    v15 = *((float *)&v9 + 1);
  else
    v15 = 0.0;
  v18 = WebCore::parseNumberOptionalNumber(v12, v13);
  v17 = *((float *)&v18 + 1);
  v16 = *(float *)&v18;
  if (!v19)
  {
    v17 = 0.0;
    v16 = 0.0;
  }
  v20 = *((_QWORD *)this + 4);
  v21 = *((_QWORD *)this + 5);
  *(float *)(v20 + 68) = v14;
  *(float *)(v20 + 72) = v14 + v16;
  result = v15 + v17;
  *(float *)(v21 + 68) = v15;
  *(float *)(v21 + 72) = v15 + v17;
  return result;
}

unint64_t WebCore::SVGAnimatedNumberPairAnimator::setToAtEndOfDurationValue(WebCore::SVGAnimatedNumberPairAnimator *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  char v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  result = WebCore::parseNumberOptionalNumber(v4, v5);
  v8 = *(float *)&result;
  if (!v7)
    v8 = 0.0;
  v9 = *((_QWORD *)this + 4);
  *(float *)(v9 + 76) = v8;
  *(_BYTE *)(v9 + 80) = 1;
  v10 = *((_QWORD *)this + 5);
  if (v7)
    v11 = *((float *)&result + 1);
  else
    v11 = 0.0;
  *(float *)(v10 + 76) = v11;
  *(_BYTE *)(v10 + 80) = 1;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::start(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 32) + 80))(*(_QWORD *)(v2 + 32), v2);
  v3 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, v2, *(_QWORD *)(v2 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 32) + 80))(*(_QWORD *)(v7 + 32), v7);
  v9 = *(unsigned int *)(v7 + 52);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(v7 + 40);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 96))(v12, v7, *(_QWORD *)(v7 + 32));
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

float WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::animate(uint64_t a1, WebCore::SVGElement *a2, unsigned int a3, float a4)
{
  WebCore::SVGAnimatedNumberAnimator::animate(*(WebCore::SVGAnimatedNumberAnimator **)(a1 + 32), a2, a4, a3);
  return WebCore::SVGAnimatedNumberAnimator::animate(*(WebCore::SVGAnimatedNumberAnimator **)(a1 + 40), a2, a4, a3);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::stop(uint64_t a1, WebCore::SVGElement *a2)
{
  WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::stop(*(WebCore::SVGElement ***)(a1 + 32), a2);
  return WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<float>,WebCore::SVGAnimationNumberFunction>::stop(*(WebCore::SVGElement ***)(a1 + 40), a2);
}

_QWORD *WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::~SVGAnimatedPropertyPairAnimator(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E345E828;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = a1[2];
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)a1[2];
    a1[2] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    a1[2] = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::~SVGAnimatedPropertyPairAnimator(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E345E828;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = result;
  v5 = *(_QWORD *)(result + 32);
  v6 = *a2;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(*a2 + 8) + 1;
  v19 = v6;
  v7 = *(unsigned int *)(v5 + 52);
  if ((_DWORD)v7 == *(_DWORD *)(v5 + 48))
  {
    v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 40), v7 + 1, (unint64_t)&v19);
    v9 = *(unsigned int *)(v5 + 52);
    v10 = *(_QWORD *)(v5 + 40);
    v11 = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    result = v19;
    *(_DWORD *)(v5 + 52) = v9 + 1;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v7) = v6;
    *(_DWORD *)(v5 + 52) = v7 + 1;
  }
  v12 = *(_QWORD *)(v4 + 40);
  v13 = *a3;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(*a3 + 8) + 1;
  v19 = v13;
  v14 = *(unsigned int *)(v12 + 52);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 48))
  {
    v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12 + 40), v14 + 1, (unint64_t)&v19);
    v16 = *(unsigned int *)(v12 + 52);
    v17 = *(_QWORD *)(v12 + 40);
    v18 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    result = v19;
    *(_DWORD *)(v12 + 52) = v16 + 1;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8 * v14) = v13;
    *(_DWORD *)(v12 + 52) = v14 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<BOOL>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<BOOL>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<BOOL>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEConvolveMatrixElement,WebCore::SVGAnimatedPrimitiveProperty<BOOL>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedBooleanAccessor<WebCore::SVGFEConvolveMatrixElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345DA78;
  *(_QWORD *)result = off_1E345D9A8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedBooleanAccessor<WebCore::SVGFEConvolveMatrixElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedBooleanAnimator::~SVGAnimatedBooleanAnimator(WebCore::SVGAnimatedBooleanAnimator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345DA10;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345DA10;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 65) = MEMORY[0x19AEA53F4](*a3, "true", 4);
  result = MEMORY[0x19AEA53F4](*a4, "true", 4);
  *(_BYTE *)(a1 + 66) = result;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedBooleanAnimator::animate(uint64_t this, WebCore::SVGElement *a2, float a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v3 = *(_QWORD **)(this + 32);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v12 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = (uint64_t *)v3[3];
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
        goto LABEL_2;
    }
  }
  else
  {
    v14 = (uint64_t *)v3[3];
  }
  v15 = (uint64_t *)(v4 + 8 * v12);
  if (v14 == v15)
    goto LABEL_2;
  v16 = *v14;
LABEL_25:
  if (!*(_QWORD *)(v16 + 8))
  {
    while (++v14 != v15)
    {
      v16 = *v14;
      if ((unint64_t)(*v14 + 1) > 1)
      {
        if (v14 != v15)
          goto LABEL_25;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = *v5;
  v7 = *(unsigned __int8 *)(this + 64);
  v10 = a3 > 0.5 && v7 == 1 || a3 == 1.0 || v7 == 3;
  v11 = (_BYTE *)(this + 65);
  if (v10)
    v11 = (_BYTE *)(this + 66);
  *(_BYTE *)(v6 + 26) = *v11;
  return this;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedPrimitiveProperty<BOOL>,WebCore::SVGAnimationBooleanFunction>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationBooleanFunction::~SVGAnimationBooleanFunction(WebCore::SVGAnimationBooleanFunction *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<BOOL>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationBooleanFunction::setFromAndToValues(WebCore::SVGAnimationBooleanFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t result;

  *((_BYTE *)this + 9) = MEMORY[0x19AEA53F4](*(_QWORD *)a3, "true", 4);
  result = MEMORY[0x19AEA53F4](*(_QWORD *)a4, "true", 4);
  *((_BYTE *)this + 10) = result;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85220 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85218;
  if (!qword_1ECE85218)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85218 - 4);
  v4 = qword_1ECE85218 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85218 - 12))
  {
    v13 = qword_1ECE85218 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85218;
    if (qword_1ECE85218)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85218 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85218)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85218 + v14;
    if (qword_1ECE85218)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85220 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85218;
  if (!qword_1ECE85218)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85218 - 4);
  v9 = qword_1ECE85218 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85218 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85218;
    if (qword_1ECE85218)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85218 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85218)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85218 + v18);
    if (qword_1ECE85218)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85220 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85218;
  if (!qword_1ECE85218)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85218 - 4);
  v9 = qword_1ECE85218 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85218 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85218;
    if (qword_1ECE85218)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85218 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85218)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85218 + v18);
    if (qword_1ECE85218)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85220 & 1) != 0)
  {
    v6 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85218;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85218)
      v7 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
LABEL_7:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85220 & 1) != 0)
  {
    v6 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85218;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85218)
      v7 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
LABEL_7:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85220 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85218;
  if (!qword_1ECE85218)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85218 - 4);
  v6 = qword_1ECE85218 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85218 - 12))
  {
    v15 = qword_1ECE85218 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85218;
    if (qword_1ECE85218)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85218 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85218)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85218 + v16;
    if (qword_1ECE85218)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85220 & 1) != 0)
  {
    v3 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85218;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85218)
      v4 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
LABEL_7:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85230 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85228 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85228, v22, (uint64_t)v13);
    byte_1ECE85230 = 1;
  }
  if ((byte_1ECE85220 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85218;
  if (!qword_1ECE85218)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85218;
  if (!v4)
  {
    if (qword_1ECE85218)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85228)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85228 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85228 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85228 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85220 & 1) != 0)
  {
    v14 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE85218;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE85218)
      v15 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
LABEL_7:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85220 & 1) != 0)
  {
    v6 = qword_1ECE85218;
    if (!qword_1ECE85218)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85218;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85218)
      v7 = (WTF::StringImpl ***)(qword_1ECE85218 + 16 * *(unsigned int *)(qword_1ECE85218 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
LABEL_7:
  if ((byte_1ECE85220 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85218;
  if (!qword_1ECE85218)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85218 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDiffuseLightingElement::SVGFEDiffuseLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85238 & 1) == 0)
  {
    qword_1ECE853E8 = (uint64_t)off_1E345DB38;
    unk_1ECE853F0 = 224;
    byte_1ECE85238 = 1;
  }
  if ((byte_1ECE85220 & 1) == 0)
  {
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853E8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE85240 & 1) == 0)
  {
    qword_1ECE853F8 = (uint64_t)off_1E345DBA0;
    unk_1ECE85400 = 232;
    byte_1ECE85240 = 1;
  }
  if ((byte_1ECE85220 & 1) == 0)
  {
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE853F8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::diffuseConstantAttr, &v2);
  if ((byte_1ECE85248 & 1) == 0)
  {
    qword_1ECE85408 = (uint64_t)off_1E345DBA0;
    unk_1ECE85410 = 240;
    byte_1ECE85248 = 1;
  }
  if ((byte_1ECE85220 & 1) == 0)
  {
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85408;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::surfaceScaleAttr, &v2);
  if ((byte_1ECE85250 & 1) == 0)
  {
    qword_1ECE854F8 = 248;
    qword_1ECE854F0 = (uint64_t)off_1E345DBA0;
    qword_1ECE85508 = 256;
    qword_1ECE85500 = (uint64_t)off_1E345DBA0;
    qword_1ECE854E8 = (uint64_t)off_1E345DC08;
    byte_1ECE85250 = 1;
  }
  if ((byte_1ECE85220 & 1) == 0)
  {
    qword_1ECE85218 = 0;
    byte_1ECE85220 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE854E8;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::kernelUnitLengthAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE85218;
  if (qword_1ECE85218
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE85218) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE85218 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE85218)
      v29 = *(_DWORD *)(qword_1ECE85218 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE85218 - 12) = v29;
    v33 = qword_1ECE85218;
    if (qword_1ECE85218)
      v34 = *(_DWORD *)(qword_1ECE85218 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE85218 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE85218 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE85218;
        if (qword_1ECE85218)
          v36 = *(unsigned int *)(qword_1ECE85218 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE85218 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE85218)
    v30 = *(unsigned int *)(qword_1ECE85218 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE85218 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85218;
  if (qword_1ECE85218)
  {
    v5 = *(_DWORD *)(qword_1ECE85218 - 4);
    v6 = *(_DWORD *)(qword_1ECE85218 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85218 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE85218 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[67];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDiffuseLightingElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDiffuseLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDiffuseLightingElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDiffuseLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDiffuseLightingElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDiffuseLightingElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDiffuseLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDiffuseLightingElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85260 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85258;
  if (!qword_1ECE85258)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85258 - 4);
  v4 = qword_1ECE85258 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85258 - 12))
  {
    v13 = qword_1ECE85258 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85258;
    if (qword_1ECE85258)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85258 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85258)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85258 + v14;
    if (qword_1ECE85258)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85260 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85258;
  if (!qword_1ECE85258)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85258 - 4);
  v9 = qword_1ECE85258 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85258 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85258;
    if (qword_1ECE85258)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85258 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85258)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85258 + v18);
    if (qword_1ECE85258)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85260 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85258;
  if (!qword_1ECE85258)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85258 - 4);
  v9 = qword_1ECE85258 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85258 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85258;
    if (qword_1ECE85258)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85258 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85258)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85258 + v18);
    if (qword_1ECE85258)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85260 & 1) != 0)
  {
    v6 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85258;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85258)
      v7 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
LABEL_7:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85260 & 1) != 0)
  {
    v6 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85258;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85258)
      v7 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
LABEL_7:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85260 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85258;
  if (!qword_1ECE85258)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85258 - 4);
  v6 = qword_1ECE85258 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85258 - 12))
  {
    v15 = qword_1ECE85258 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85258;
    if (qword_1ECE85258)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85258 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85258)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85258 + v16;
    if (qword_1ECE85258)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85260 & 1) != 0)
  {
    v3 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85258;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85258)
      v4 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
LABEL_7:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85270 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85268 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85268, v22, (uint64_t)v13);
    byte_1ECE85270 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85258;
  if (!qword_1ECE85258)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85258;
  if (!v4)
  {
    if (qword_1ECE85258)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85268)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85268 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85268 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85268 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85260 & 1) != 0)
  {
    v14 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE85258;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE85258)
      v15 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
LABEL_7:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDisplacementMapElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85260 & 1) != 0)
  {
    v6 = qword_1ECE85258;
    if (!qword_1ECE85258)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85258;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85258)
      v7 = (WTF::StringImpl ***)(qword_1ECE85258 + 16 * *(unsigned int *)(qword_1ECE85258 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
LABEL_7:
  if ((byte_1ECE85260 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85258;
  if (!qword_1ECE85258)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85258 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ChannelSelectorType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ChannelSelectorType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 3)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 4;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ChannelSelectorType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ChannelSelectorType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::ChannelSelectorType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  switch(*(_BYTE *)(result + 12))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      break;
    default:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v2 += 2;
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::ChannelSelectorType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E345DCE0;
  *a2 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDisplacementMapElement::SVGFEDisplacementMapElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85278 & 1) == 0)
  {
    qword_1ECE85418 = (uint64_t)off_1E345DD30;
    unk_1ECE85420 = 224;
    byte_1ECE85278 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85418;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE85280 & 1) == 0)
  {
    qword_1ECE85428 = (uint64_t)off_1E345DD30;
    unk_1ECE85430 = 232;
    byte_1ECE85280 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85428;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>((uint64_t)v1, &WebCore::SVGNames::in2Attr, &v2);
  if ((byte_1ECE85288 & 1) == 0)
  {
    qword_1ECE85438 = (uint64_t)off_1E345DD98;
    unk_1ECE85440 = 240;
    byte_1ECE85288 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85438;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::xChannelSelectorAttr, &v2);
  if ((byte_1ECE85290 & 1) == 0)
  {
    qword_1ECE85448 = (uint64_t)off_1E345DD98;
    unk_1ECE85450 = 248;
    byte_1ECE85290 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85448;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::yChannelSelectorAttr, &v2);
  if ((byte_1ECE85298 & 1) == 0)
  {
    qword_1ECE85458 = (uint64_t)off_1E345DF20;
    unk_1ECE85460 = 256;
    byte_1ECE85298 = 1;
  }
  if ((byte_1ECE85260 & 1) == 0)
  {
    qword_1ECE85258 = 0;
    byte_1ECE85260 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85458;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>((uint64_t)v1, &WebCore::SVGNames::scaleAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE85258;
  if (qword_1ECE85258
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE85258) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE85258 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE85258)
      v29 = *(_DWORD *)(qword_1ECE85258 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE85258 - 12) = v29;
    v33 = qword_1ECE85258;
    if (qword_1ECE85258)
      v34 = *(_DWORD *)(qword_1ECE85258 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE85258 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE85258 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE85258;
        if (qword_1ECE85258)
          v36 = *(unsigned int *)(qword_1ECE85258 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE85258 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE85258)
    v30 = *(unsigned int *)(qword_1ECE85258 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE85258 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85258;
  if (qword_1ECE85258)
  {
    v5 = *(_DWORD *)(qword_1ECE85258 - 4);
    v6 = *(_DWORD *)(qword_1ECE85258 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85258 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE85258 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[75];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDisplacementMapElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDisplacementMapElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDisplacementMapElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::ChannelSelectorType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345DED0;
  *(_QWORD *)result = &off_1E345DE00;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::ChannelSelectorType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ChannelSelectorType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E345DE68;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ChannelSelectorType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E345DE68;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  return WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>::setFromAndToValues(a1 + 56, a2, a3, a4);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::ChannelSelectorType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::ChannelSelectorType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::ChannelSelectorType>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  char v8;
  uint64_t result;

  v7 = 1;
  if ((MEMORY[0x19AEA53F4](*a3, "R", 1) & 1) == 0)
  {
    if ((MEMORY[0x19AEA53F4](*a3, "G", 1) & 1) != 0)
    {
      v7 = 2;
    }
    else if ((MEMORY[0x19AEA53F4](*a3, "B", 1) & 1) != 0)
    {
      v7 = 3;
    }
    else if (MEMORY[0x19AEA53F4](*a3, "A", 1))
    {
      v7 = 4;
    }
    else
    {
      v7 = 0;
    }
  }
  *(_BYTE *)(a1 + 9) = v7;
  v8 = 1;
  result = MEMORY[0x19AEA53F4](*a4, "R", 1);
  if ((result & 1) == 0)
  {
    result = MEMORY[0x19AEA53F4](*a4, "G", 1);
    if ((result & 1) != 0)
    {
      v8 = 2;
    }
    else
    {
      result = MEMORY[0x19AEA53F4](*a4, "B", 1);
      if ((result & 1) != 0)
      {
        v8 = 3;
      }
      else
      {
        result = MEMORY[0x19AEA53F4](*a4, "A", 1);
        if ((_DWORD)result)
          v8 = 4;
        else
          v8 = 0;
      }
    }
  }
  *(_BYTE *)(a1 + 10) = v8;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDisplacementMapElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDisplacementMapElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDisplacementMapElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE852A8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE852A0;
  if (!qword_1ECE852A0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE852A0 - 4);
  v4 = qword_1ECE852A0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE852A0 - 12))
  {
    v13 = qword_1ECE852A0 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (qword_1ECE852A0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE852A0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE852A0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE852A0 + v14;
    if (qword_1ECE852A0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE852A8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE852A0;
  if (!qword_1ECE852A0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE852A0 - 4);
  v9 = qword_1ECE852A0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE852A0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (qword_1ECE852A0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE852A0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE852A0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE852A0 + v18);
    if (qword_1ECE852A0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE852A8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE852A0;
  if (!qword_1ECE852A0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE852A0 - 4);
  v9 = qword_1ECE852A0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE852A0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (qword_1ECE852A0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE852A0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE852A0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE852A0 + v18);
    if (qword_1ECE852A0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE852A8 & 1) != 0)
  {
    v6 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE852A0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE852A0)
      v7 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
LABEL_7:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE852A8 & 1) != 0)
  {
    v6 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE852A0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE852A0)
      v7 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
LABEL_7:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE852A8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE852A0;
  if (!qword_1ECE852A0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE852A0 - 4);
  v6 = qword_1ECE852A0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE852A0 - 12))
  {
    v15 = qword_1ECE852A0 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE852A0;
    if (qword_1ECE852A0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE852A0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE852A0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE852A0 + v16;
    if (qword_1ECE852A0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE852A8 & 1) != 0)
  {
    v3 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE852A0;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE852A0)
      v4 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
LABEL_7:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE852B8 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE852B0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852B0, v22, (uint64_t)v13);
    byte_1ECE852B8 = 1;
  }
  if ((byte_1ECE852A8 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE852A0;
  if (!qword_1ECE852A0)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE852A0;
  if (!v4)
  {
    if (qword_1ECE852A0)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE852B0)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE852B0 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE852B0 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE852B0 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE852A8 & 1) != 0)
  {
    v14 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE852A0;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE852A0)
      v15 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
LABEL_7:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEDropShadowElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE852A8 & 1) != 0)
  {
    v6 = qword_1ECE852A0;
    if (!qword_1ECE852A0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE852A0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE852A0)
      v7 = (WTF::StringImpl ***)(qword_1ECE852A0 + 16 * *(unsigned int *)(qword_1ECE852A0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
LABEL_7:
  if ((byte_1ECE852A8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE852A0;
  if (!qword_1ECE852A0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE852A0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEDropShadowElement::SVGFEDropShadowElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE852C0 & 1) == 0)
  {
    qword_1ECE85468 = (uint64_t)off_1E345DFF8;
    unk_1ECE85470 = 224;
    byte_1ECE852C0 = 1;
  }
  if ((byte_1ECE852A8 & 1) == 0)
  {
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85468;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE852C8 & 1) == 0)
  {
    qword_1ECE85478 = (uint64_t)off_1E345E060;
    unk_1ECE85480 = 232;
    byte_1ECE852C8 = 1;
  }
  if ((byte_1ECE852A8 & 1) == 0)
  {
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85478;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::dxAttr, &v2);
  if ((byte_1ECE852D0 & 1) == 0)
  {
    qword_1ECE85488 = (uint64_t)off_1E345E060;
    unk_1ECE85490 = 240;
    byte_1ECE852D0 = 1;
  }
  if ((byte_1ECE852A8 & 1) == 0)
  {
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85488;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::dyAttr, &v2);
  if ((byte_1ECE852D8 & 1) == 0)
  {
    qword_1ECE85520 = 248;
    qword_1ECE85518 = (uint64_t)off_1E345E060;
    qword_1ECE85530 = 256;
    qword_1ECE85528 = (uint64_t)off_1E345E060;
    qword_1ECE85510 = (uint64_t)off_1E345E0C8;
    byte_1ECE852D8 = 1;
  }
  if ((byte_1ECE852A8 & 1) == 0)
  {
    qword_1ECE852A0 = 0;
    byte_1ECE852A8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85510;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::stdDeviationAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE852A0;
  if (qword_1ECE852A0
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE852A0) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE852A0 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE852A0)
      v29 = *(_DWORD *)(qword_1ECE852A0 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE852A0 - 12) = v29;
    v33 = qword_1ECE852A0;
    if (qword_1ECE852A0)
      v34 = *(_DWORD *)(qword_1ECE852A0 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE852A0 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE852A0 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE852A0;
        if (qword_1ECE852A0)
          v36 = *(unsigned int *)(qword_1ECE852A0 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE852A0 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE852A0)
    v30 = *(unsigned int *)(qword_1ECE852A0 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE852A0 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE852A0;
  if (qword_1ECE852A0)
  {
    v5 = *(_DWORD *)(qword_1ECE852A0 - 4);
    v6 = *(_DWORD *)(qword_1ECE852A0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE852A0 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE852A0 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[84];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEDropShadowElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDropShadowElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEDropShadowElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEDropShadowElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEDropShadowElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDropShadowElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDropShadowElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEDropShadowElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;

  v1 = result;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_24:
    v4 = &v2[2 * v3];
    if (!v2)
      goto LABEL_33;
LABEL_32:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_33;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_24;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_24;
  }
  if (!(_DWORD)v3)
  {
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_33;
    goto LABEL_32;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = v4;
        break;
      }
    }
    v13 = v2;
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v14)
                             + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v14);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
LABEL_33:
  while (v13 != v2)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v13[1] + 2))(v13[1], *(_QWORD *)(v1 + 8));
    v15 = v13 + 2;
    v13 = v4;
    if (v15 != v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_36:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == v4)
            goto LABEL_49;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_36;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v4)
          {
LABEL_49:
            v13 = v4;
            goto LABEL_51;
          }
        }
      }
      v13 = v15;
    }
LABEL_51:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_102;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_102:
    v24 = &v22[2 * v23];
    goto LABEL_75;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_102;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_75;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_80:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_93;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_80;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_93:
            v35 = v24;
            goto LABEL_95;
          }
        }
      }
      v35 = v36;
    }
LABEL_95:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  void *v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  {
    v7 = 0;
    v18 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_27:
    v9 = &v7[2 * v8];
    if (!v7)
      goto LABEL_36;
LABEL_35:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_36;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_27;
  }
  if (!(_DWORD)v8)
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_36;
    goto LABEL_35;
  }
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v11 = 16 * v8;
    while (1)
    {
      if (v10)
      {
        v12 = (*(_DWORD *)v10)++;
        v13 = *v7;
        if (v12)
        {
          *(_DWORD *)v10 = v12;
          v14 = (uint64_t)v10;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = *v7;
      }
      if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v10 = (WTF::StringImpl **)v14;
      v11 -= 16;
      if (!v11)
      {
        v7 = v9;
        break;
      }
    }
    v18 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
  else
  {
    v19 = 0;
    v20 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v19)
                             + 1) <= 1)
    {
      v19 += 16;
      if (v20 == v19)
      {
        v18 = v9;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v19);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
LABEL_36:
  while (v18 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1] + 5))(v18[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_101;
    v21 = v18 + 2;
    v18 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_40:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_53;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_40;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_53:
            v18 = v9;
            goto LABEL_55;
          }
        }
      }
      v18 = v21;
    }
LABEL_55:
    ;
  }
  {
    v28 = 0;
    v18 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v29 = 0;
LABEL_113:
    v30 = &v28[2 * v29];
    goto LABEL_78;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_113;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v18 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v18 = v30;
          goto LABEL_78;
        }
      }
      v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_78:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v18)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1]
                                    + 5))(v18[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v40 = v18 + 2;
      v18 = v30;
      if (v40 != v30)
      {
        v41 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_84:
          v42 = (*(_DWORD *)v41)++;
          v43 = *v40;
          if (v42)
          {
            *(_DWORD *)v41 = v42;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
          }
          while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
          {
            v40 += 2;
            if (v40 == v30)
              goto LABEL_97;
            v41 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_84;
            v43 = *v40;
          }
        }
        else
        {
          while ((unint64_t)*v40 + 1 <= 1)
          {
            v40 += 2;
            if (v40 == v30)
            {
LABEL_97:
              v18 = v30;
              goto LABEL_99;
            }
          }
        }
        v18 = v40;
      }
LABEL_99:
      if (v18 == v28)
        return result;
    }
LABEL_101:
    v47 = *v18;
    if (*v18)
      ++*(_DWORD *)v47;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v47;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v48, v49);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  void *v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  {
    v7 = 0;
    v18 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_27:
    v9 = &v7[2 * v8];
    if (!v7)
      goto LABEL_36;
LABEL_35:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_36;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_27;
  }
  if (!(_DWORD)v8)
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_36;
    goto LABEL_35;
  }
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v11 = 16 * v8;
    while (1)
    {
      if (v10)
      {
        v12 = (*(_DWORD *)v10)++;
        v13 = *v7;
        if (v12)
        {
          *(_DWORD *)v10 = v12;
          v14 = (uint64_t)v10;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = *v7;
      }
      if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v10 = (WTF::StringImpl **)v14;
      v11 -= 16;
      if (!v11)
      {
        v7 = v9;
        break;
      }
    }
    v18 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
  else
  {
    v19 = 0;
    v20 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v19)
                             + 1) <= 1)
    {
      v19 += 16;
      if (v20 == v19)
      {
        v18 = v9;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v19);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
LABEL_36:
  while (v18 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1] + 6))(v18[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_101;
    v21 = v18 + 2;
    v18 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_40:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_53;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_40;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_53:
            v18 = v9;
            goto LABEL_55;
          }
        }
      }
      v18 = v21;
    }
LABEL_55:
    ;
  }
  {
    v28 = 0;
    v18 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v29 = 0;
LABEL_113:
    v30 = &v28[2 * v29];
    goto LABEL_78;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_113;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v18 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v18 = v30;
          goto LABEL_78;
        }
      }
      v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_78:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v18)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1]
                                    + 6))(v18[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v40 = v18 + 2;
      v18 = v30;
      if (v40 != v30)
      {
        v41 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_84:
          v42 = (*(_DWORD *)v41)++;
          v43 = *v40;
          if (v42)
          {
            *(_DWORD *)v41 = v42;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
          }
          while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
          {
            v40 += 2;
            if (v40 == v30)
              goto LABEL_97;
            v41 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_84;
            v43 = *v40;
          }
        }
        else
        {
          while ((unint64_t)*v40 + 1 <= 1)
          {
            v40 += 2;
            if (v40 == v30)
            {
LABEL_97:
              v18 = v30;
              goto LABEL_99;
            }
          }
        }
        v18 = v40;
      }
LABEL_99:
      if (v18 == v28)
        return result;
    }
LABEL_101:
    v47 = *v18;
    if (*v18)
      ++*(_DWORD *)v47;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v47;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v48, v49);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  char *result;
  char *v7;
  uint64_t v8;
  char v9;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_20;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_13;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_20:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_13:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
    {
LABEL_6:
      result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD))(*(_QWORD *)result + 64))(&v8, result, *(_QWORD *)(a1 + 8));
      if (v9)
      {
        *(_QWORD *)a3 = v8;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  WTF::StringImpl ***v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  _BYTE v46[24];
  WTF::StringImpl *v47;
  char v48;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_24:
    v6 = &v4[2 * v5];
    if (!v4)
      goto LABEL_33;
LABEL_32:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_33;
  }
  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_24;
  }
  v5 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v5);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v5);
    goto LABEL_24;
  }
  if (!(_DWORD)v5)
  {
    v15 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = v6;
        break;
      }
    }
    v15 = v4;
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v16)
                             + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v16);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
LABEL_33:
  while (v15 != v4)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v15[1]
                                 + 8))(&v47, v15[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = v15 + 2;
    v15 = v6;
    if (v18 != v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_41:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == v6)
            goto LABEL_54;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_41;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == v6)
          {
LABEL_54:
            v15 = v6;
            goto LABEL_56;
          }
        }
      }
      v15 = v18;
    }
LABEL_56:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_115;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_115:
    v27 = &v25[2 * v26];
    goto LABEL_81;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_115;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_81;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_81:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v47, v37[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_91:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_104;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_91;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_104:
            v37 = v27;
            goto LABEL_106;
          }
        }
      }
      v37 = v39;
    }
LABEL_106:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;

  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_19;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_19:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute()
{
  _BYTE v1[24];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE852F0 & 1) == 0)
  {
    v2 = WebCore::SVGNames::cxAttr;
    v3 = WebCore::SVGNames::cyAttr;
    v4 = WebCore::SVGNames::rAttr;
    v5 = WebCore::SVGNames::rxAttr;
    v6 = WebCore::SVGNames::ryAttr;
    v7 = WebCore::SVGNames::heightAttr;
    v8 = WebCore::SVGNames::widthAttr;
    v9 = WebCore::SVGNames::xAttr;
    v10[0] = WebCore::SVGNames::yAttr;
    qword_1ECE852E8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v2, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v3, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v4, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v5, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v6, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v7, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v8, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, &v9, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE852E8, v10, (uint64_t)v1);
    byte_1ECE852F0 = 1;
  }
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  return 0;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *result;
  char *v15;
  uint64_t v16;

  *a7 = 0;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v15)
      v15 += 16 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
    {
LABEL_6:
      result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(&v16, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v16;
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEFloodElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  if ((byte_1ECE852E0 & 1) == 0)
    byte_1ECE852E0 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

void WebCore::SVGFEFuncAElement::~SVGFEFuncAElement(WebCore::SVGFEFuncAElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFEFuncAElement::channel(WebCore::SVGFEFuncAElement *this)
{
  return 3;
}

void `non-virtual thunk to'WebCore::SVGFEFuncAElement::~SVGFEFuncAElement(WebCore::SVGFEFuncAElement *this, void *a2)
{
  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncAElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncAElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement(WebCore::SVGComponentTransferFunctionElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  *(_QWORD *)this = off_1E3452EE0;
  *((_QWORD *)this + 14) = &unk_1E3453418;
  v3 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

void WebCore::SVGFELightElement::~SVGFELightElement(WebCore::SVGFELightElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;

  *(_QWORD *)this = off_1E3461670;
  *((_QWORD *)this + 14) = &unk_1E3461BA8;
  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

_QWORD *WebCore::SVGFEFuncBElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(v6, a1, a2);
  *result = off_1E34600A0;
  result[14] = &unk_1E34605D8;
  *a3 = result;
  return result;
}

_QWORD *WebCore::SVGFEFuncGElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(v6, a1, a2);
  *result = off_1E3460610;
  result[14] = &unk_1E3460B48;
  *a3 = result;
  return result;
}

_QWORD *WebCore::SVGFEFuncRElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGComponentTransferFunctionElement::SVGComponentTransferFunctionElement(v6, a1, a2);
  *result = off_1E3460B80;
  result[14] = &unk_1E34610B8;
  *a3 = result;
  return result;
}

uint64_t *WebCore::SVGFEGaussianBlurElement::create@<X0>(WebCore::SVGFEGaussianBlurElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v7;
  uint64_t *result;

  v7 = (uint64_t *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(v7, (_DWORD **)this, (uint64_t)a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGFEGaussianBlurElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  int v10;
  int v11;
  _DWORD *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  WebCore::Document *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::Document *v34;
  _DWORD *v35;
  unsigned __int8 v36;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 == 518)
  {
    v12 = (_DWORD *)a1[28];
    ++v12[2];
    WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setBaseValInternal((uint64_t)v12, a4);
LABEL_7:
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
    return (uint64_t)WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
  }
  if (v10 == 851)
  {
    v14 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
    {
      v15 = *((_QWORD *)v14 + 1);
      v16 = *((unsigned int *)v14 + 1) | ((unint64_t)((*((_DWORD *)v14 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v16 = 0x100000000;
    }
    v17 = WebCore::parseNumberOptionalNumber(v15, v16);
    if (v18)
    {
      v19 = v17;
      v20 = HIDWORD(v17);
      v21 = a1[29];
      v22 = *(_DWORD *)(v21 + 8);
      *(_DWORD *)(v21 + 8) = v22 + 1;
      *(_DWORD *)(*(_QWORD *)(v21 + 40) + 28) = v19;
      if (v22)
        *(_DWORD *)(v21 + 8) = v22;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v23 = a1[30];
      v24 = *(_DWORD *)(v23 + 8);
      *(_DWORD *)(v23 + 8) = v24 + 1;
      *(_DWORD *)(*(_QWORD *)(v23 + 40) + 28) = v20;
      if (v24)
        *(_DWORD *)(v23 + 8) = v24;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    return (uint64_t)WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
  }
  if (v10 != 448)
    return (uint64_t)WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
  v11 = WebCore::SVGPropertyTraits<WebCore::EdgeModeType>::fromString((WTF **)a4);
  v36 = v11;
  if (v11)
  {
    v12 = (_DWORD *)a1[31];
    ++v12[2];
    WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::ColorMatrixType>((uint64_t)v12, &v36);
    goto LABEL_7;
  }
  v25 = *(WebCore::Document **)(a1[5] + 8);
  *((_DWORD *)v25 + 6) += 2;
  v34 = v25;
  WebCore::Document::checkedSVGExtensions(v25, &v35);
  v26 = (uint64_t)v35;
  v27 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v27 += 2;
  v32 = v27;
  WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((int8x16_t *)"feGaussianBlur: problem parsing edgeMode=\"", 43, (uint64_t *)&v32, (int8x16_t *)"\". Filtered element will not be displayed.", 43, &v33);
  WebCore::SVGDocumentExtensions::reportWarning(v26, (const WTF::String *)&v33);
  v29 = v33;
  v33 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v32;
  v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v35;
  v35 = 0;
  if (!v31)
  {
LABEL_28:
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v34);
    return (uint64_t)WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
  }
  if (*v31)
  {
    --*v31;
    goto LABEL_28;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SVGPropertyTraits<WebCore::EdgeModeType>::fromString(WTF **a1)
{
  const WTF::StringImpl *v3;

  if ((MEMORY[0x19AEA53F4](*a1, "duplicate", 9) & 1) != 0)
    return 1;
  if ((MEMORY[0x19AEA53F4](*a1, "wrap", 4) & 1) != 0)
    return 2;
  if (WTF::equal(*a1, (const WTF::StringImpl *)WebCore::noneAtomData, v3))
    return 3;
  return 0;
}

void WebCore::SVGFEGaussianBlurElement::svgAttributeChanged(WebCore::SVGFEGaussianBlurElement *this, const WebCore::QualifiedName *a2)
{
  int v3;
  void *v5;
  WebCore::SVGElement *v6;
  unsigned int *v7;

  v3 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v3 == 518)
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v7, (uint64_t)this);
    WebCore::SVGElement::updateSVGRendererForElementChange(this);
  }
  else
  {
    if (v3 == 851)
    {
      if (WebCore::SVGGeometryElement::pathLength(*((WebCore::SVGGeometryElement **)this + 29)) < 0.0
        || *(float *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*((_QWORD *)this + 30)) < 0.0)
      {
        WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v7, (uint64_t)this);
        WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, v6);
        goto LABEL_9;
      }
    }
    else if (v3 != 448)
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
      return;
    }
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v7, (uint64_t)this);
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
  }
LABEL_9:
  WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v7, v5);
}

BOOL WebCore::SVGFEGaussianBlurElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  if (*(_BYTE *)(a2 + 48) != 11)
  {
    __break(0xC471u);
    JUMPOUT(0x196636434);
  }
  if (*a3 == WebCore::SVGNames::stdDeviationAttr)
  {
    v9 = a1[29];
    v10 = *(_QWORD *)(v9 + 24);
    if (v10 && *(_DWORD *)(v10 - 12))
    {
      v18 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v18)
      {
        v19 = 8 * v18;
        v20 = *(uint64_t **)(v9 + 24);
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          ++v20;
          v19 -= 8;
          if (!v19)
            goto LABEL_9;
        }
      }
      else
      {
        v20 = *(uint64_t **)(v9 + 24);
      }
      v30 = (uint64_t *)(v10 + 8 * v18);
      if (v20 != v30)
      {
        v31 = *v20;
LABEL_50:
        if (*(_QWORD *)(v31 + 8))
        {
          v11 = v9 + 48;
          goto LABEL_10;
        }
        while (++v20 != v30)
        {
          v31 = *v20;
          if ((unint64_t)(*v20 + 1) > 1)
          {
            if (v20 != v30)
              goto LABEL_50;
            break;
          }
        }
      }
    }
LABEL_9:
    v11 = v9 + 40;
LABEL_10:
    v12 = *(float *)(*(_QWORD *)v11 + 28);
    v13 = *(float *)(a2 + 64);
    if (v13 != v12)
      *(float *)(a2 + 64) = v12;
    v14 = a1[30];
    v15 = *(_QWORD *)(v14 + 24);
    if (v15 && *(_DWORD *)(v15 - 12))
    {
      v21 = *(unsigned int *)(v15 - 4);
      if ((_DWORD)v21)
      {
        v22 = 8 * v21;
        v23 = *(uint64_t **)(v14 + 24);
        while ((unint64_t)(*v23 + 1) <= 1)
        {
          ++v23;
          v22 -= 8;
          if (!v22)
            goto LABEL_13;
        }
      }
      else
      {
        v23 = *(uint64_t **)(v14 + 24);
      }
      v32 = (uint64_t *)(v15 + 8 * v21);
      if (v23 != v32)
      {
        v33 = *v23;
LABEL_59:
        if (*(_QWORD *)(v33 + 8))
        {
          v16 = v14 + 48;
LABEL_14:
          v17 = *(float *)(*(_QWORD *)v16 + 28);
          if (*(float *)(a2 + 68) == v17)
            return v13 != v12;
          *(float *)(a2 + 68) = v17;
          return 1;
        }
        while (++v23 != v32)
        {
          v33 = *v23;
          if ((unint64_t)(*v23 + 1) > 1)
          {
            if (v23 != v32)
              goto LABEL_59;
            break;
          }
        }
      }
    }
LABEL_13:
    v16 = v14 + 40;
    goto LABEL_14;
  }
  if (*a3 != WebCore::SVGNames::edgeModeAttr)
    return 0;
  v4 = a1[31];
  v5 = *(_QWORD **)(v4 + 24);
  if (v5 && *((_DWORD *)v5 - 3))
  {
    v24 = *((unsigned int *)v5 - 1);
    v25 = &v5[v24];
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        ++v5;
        v26 -= 8;
        if (!v26)
          goto LABEL_35;
      }
    }
    if (v5 != v25)
    {
      v29 = *v5;
LABEL_42:
      if (*(_QWORD *)(v29 + 8))
        goto LABEL_36;
      while (++v5 != v25)
      {
        v29 = *v5;
        if ((unint64_t)(*v5 + 1) > 1)
        {
          if (v5 != v25)
            goto LABEL_42;
          break;
        }
      }
    }
LABEL_35:
    v5 = v25;
LABEL_36:
    v27 = v5 == v25;
    v28 = 40;
    if (!v27)
      v28 = 48;
    v6 = (_QWORD *)(v4 + v28);
    goto LABEL_6;
  }
  v6 = (_QWORD *)(v4 + 40);
LABEL_6:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  if (*(unsigned __int8 *)(a2 + 72) == v7)
    return 0;
  *(_BYTE *)(a2 + 72) = v7;
  return 1;
}

BOOL WebCore::SVGFEGaussianBlurElement::isIdentity(WebCore::SVGFEGaussianBlurElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WebCore::SVGFEGaussianBlurElement *v6;
  uint64_t v7;
  uint64_t *v8[5];
  uint64_t *v9[5];

  v1 = *((_QWORD *)this + 29);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v6 = this,
        v7 = *((_QWORD *)this + 29),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v9),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v8),
        this = v6,
        v1 = v7,
        v9[1] != v8[1]))
  {
    v4 = v7 + 48;
  }
  else
  {
    v4 = v1 + 40;
  }
  return *(float *)(*(_QWORD *)v4 + 28) == 0.0
      && *(float *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*((_QWORD *)this + 30)) == 0.0;
}

unint64_t WebCore::SVGFEGaussianBlurElement::outsets(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 232);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v3 + 24);
  }
  v25 = (uint64_t *)(v4 + 8 * v19);
  if (v21 == v25)
    goto LABEL_2;
  v26 = *v21;
LABEL_40:
  if (!*(_QWORD *)(v26 + 8))
  {
    while (++v21 != v25)
    {
      v26 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v25)
          goto LABEL_40;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 40;
    goto LABEL_3;
  }
  v5 = v3 + 48;
LABEL_3:
  v6 = *(float *)(*(_QWORD *)v5 + 28);
  v7 = *(_QWORD *)(a1 + 240);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v22 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_4;
    }
  }
  else
  {
    v24 = *(uint64_t **)(v7 + 24);
  }
  v27 = (uint64_t *)(v8 + 8 * v22);
  if (v24 == v27)
    goto LABEL_4;
  v28 = *v24;
LABEL_49:
  if (!*(_QWORD *)(v28 + 8))
  {
    while (++v24 != v27)
    {
      v28 = *v24;
      if ((unint64_t)(*v24 + 1) > 1)
      {
        if (v24 != v27)
          goto LABEL_49;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 40;
    goto LABEL_5;
  }
  v9 = v7 + 48;
LABEL_5:
  v10 = *(float *)(a2 + 8);
  if (a3 != 2)
    v10 = 1.0;
  v11 = v6 * v10;
  if (a3 == 2)
    v12 = *(float *)(a2 + 12);
  else
    v12 = 1.0;
  v13 = *(float *)(*(_QWORD *)v9 + 28) * v12;
  if (v11 == 0.0)
  {
    v15 = 0;
  }
  else
  {
    v14 = vcvtms_u32_f32((float)(v11 * 1.88) + 0.5);
    if (v14 <= 2)
      v14 = 2;
    if (v14 >= 0x1F4)
      v14 = 500;
    v15 = (unint64_t)((3 * v14) >> 1) << 32;
  }
  if (v13 == 0.0)
  {
    v17 = 0;
  }
  else
  {
    v16 = vcvtms_u32_f32((float)(v13 * 1.88) + 0.5);
    if (v16 <= 2)
      v16 = 2;
    if (v16 >= 0x1F4)
      v16 = 500;
    v17 = (3 * v16) >> 1;
  }
  return v17 | v15;
}

void WebCore::SVGFEGaussianBlurElement::createFilterEffect(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  float v4;
  float v5;
  WebCore::SVGAnimatedProperty *v6;
  _BOOL4 isAnimating;
  uint64_t v8;
  WebCore::DestinationColorSpace *v9;
  char v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  CFTypeRef v14;
  CFTypeRef cf;
  uint64_t v16;

  if (WebCore::SVGGeometryElement::pathLength(*(WebCore::SVGGeometryElement **)(a1 + 232)) < 0.0
    || *(float *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*(_QWORD *)(a1 + 240)) < 0.0)
  {
    *a2 = 0;
  }
  else
  {
    v4 = WebCore::SVGGeometryElement::pathLength(*(WebCore::SVGGeometryElement **)(a1 + 232));
    v5 = *(float *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(*(_QWORD *)(a1 + 240));
    v6 = *(WebCore::SVGAnimatedProperty **)(a1 + 248);
    isAnimating = WebCore::SVGAnimatedProperty::isAnimating(v6);
    v8 = 40;
    if (isAnimating)
      v8 = 48;
    v9 = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)v6 + v8) + 32))(*(_QWORD *)((char *)v6 + v8));
    v10 = (char)v9;
    v11 = (const void *)*WebCore::DestinationColorSpace::SRGB(v9);
    cf = v11;
    if (v11)
      CFRetain(v11);
    WebCore::FEGaussianBlur::create(v10, &cf, &v16, v4, v5);
    v12 = v16;
    v16 = 0;
    *a2 = v12;
    WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v16, v13);
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
  }
}

void WebCore::SVGFEImageElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char **v16;
  char *v17;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345EF48;
  v6[14] = (uint64_t)&unk_1E345F4B0;
  v6[28] = (uint64_t)&unk_1E345F4E8;
  v6[30] = (uint64_t)&unk_1E345F528;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3461300;
  *((_QWORD *)v7 + 1) = v6;
  v17 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v17);
  v8 = (uint64_t)v17;
  v17 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E345EF48;
  v6[14] = (uint64_t)&unk_1E345F4B0;
  v6[30] = (uint64_t)&unk_1E345F528;
  v6[28] = (uint64_t)&off_1E3452C78;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[29] = v9;
  v11 = atomic_load(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag);
  if (v11 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::$_0 &&>>);
  }
  *v6 = (uint64_t)off_1E345EF48;
  v6[14] = (uint64_t)&unk_1E345F4B0;
  v6[28] = (uint64_t)&unk_1E345F4E8;
  v6[30] = (uint64_t)&unk_1E345F528;
  v6[31] = 0;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)v12 = off_1E3461BE0;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = v12;
  *(_DWORD *)(v13 + 24) = 17170432;
  *(_QWORD *)v13 = off_1E32EE030;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  v6[32] = v12;
  v6[33] = 0;
  v14 = atomic_load(&WebCore::SVGFEImageElement::SVGFEImageElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v14 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::SVGFEImageElement::SVGFEImageElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEImageElement::SVGFEImageElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

void WebCore::SVGFEImageElement::~SVGFEImageElement(WebCore::SVGFEImageElement *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CachedResource *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *v17;
  unsigned int *v18;
  _BYTE v19[24];
  unsigned int **v20;

  v2 = (uint64_t *)((char *)this + 264);
  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    v18 = (unsigned int *)v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v20 = &v18;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v20, (uint64_t)v19);
      }
    }
  }
  else
  {
    v18 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v2, 0);
  if (v18)
  {
    v8 = (WebCore::CachedResource *)*((_QWORD *)v18 + 1);
    if (v8)
      WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 30);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v18, v7);
  v10 = *((_QWORD *)this + 15);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        *(_DWORD *)(v12 + 24) += 2;
        WebCore::SVGElement::removeReferencingElement((WebCore::SVGElement *)v12, this);
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v2, v9);
  v14 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  *((_QWORD *)this + 30) = &off_1E33F87C8;
  v15 = *((_QWORD *)this + 31);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (WTF *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v13);
      else
        --*(_DWORD *)v16;
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = &off_1E3452C78;
  *((_QWORD *)this + 29) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, v13);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::SVGFEImageElement::~SVGFEImageElement(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::SVGFEImageElement::~SVGFEImageElement(WebCore::SVGFEImageElement *this)
{
  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 112));
}

{
  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 224));
}

{
  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 240));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 112));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 224));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::SVGFEImageElement::~SVGFEImageElement((WebCore::SVGFEImageElement *)((char *)this - 240));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::SVGFEImageElement::renderingTaintsOrigin(WebCore::SVGFEImageElement *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v10);
    v6 = (unsigned int *)v10;
    if (!v10)
      return 0;
    v3 = (_DWORD *)*((_QWORD *)v10 + 1);
    v10 = 0;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    if (!v3)
      return 0;
  }
  else
  {
    v3 = *(_DWORD **)(v2 + 688);
    if (!v3)
      v3 = (_DWORD *)WebCore::Image::nullImage(this);
  }
  ++v3[2];
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 120))(v3);
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  return v4;
}

void WebCore::SVGFEImageElement::buildPendingResource(WebCore::SVGFEImageElement *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CachedResource *v8;
  double v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const WebCore::TreeScope *v20;
  uint64_t v21;
  BOOL v22;
  void *v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  WebCore::Node *v26;
  void *v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  WebCore::Document *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;
  _DWORD *v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::Node *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  void *v63;
  WTF::StringImpl *v64;
  WebCore::Node *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  WebCore::TreeScope *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  WTF::StringImpl *v91;
  unsigned int *v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  WTF::StringImpl *v96;
  unsigned int **v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[5];
  uint64_t v101;
  WTF::StringImpl *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  WTF::StringImpl *v113[19];
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  _WORD v120[76];
  WebCore::Node *v121;
  __int128 v122;
  uint64_t v123;
  __int16 v124;
  unsigned int *v125[2];
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  char v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)((char *)this + 264);
  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    v125[0] = (unsigned int *)v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v97 = v125;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v97, (uint64_t)v113);
      }
    }
  }
  else
  {
    v125[0] = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v2, 0);
  if (v125[0])
  {
    v8 = (WebCore::CachedResource *)*((_QWORD *)v125[0] + 1);
    if (v8)
      WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 30);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v125, v7);
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        *(_DWORD *)(v14 + 24) += 2;
        WebCore::SVGElement::removeReferencingElement((WebCore::SVGElement *)v14, this);
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
      }
    }
  }
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v16 = *((_QWORD *)this + 29);
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 && *(_DWORD *)(v17 - 12))
    {
      v66 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v66)
      {
        v67 = 8 * v66;
        v68 = *(uint64_t **)(v16 + 24);
        while ((unint64_t)(*v68 + 1) <= 1)
        {
          ++v68;
          v67 -= 8;
          if (!v67)
            goto LABEL_17;
        }
      }
      else
      {
        v68 = *(uint64_t **)(v16 + 24);
      }
      v85 = (uint64_t *)(v17 + 8 * v66);
      if (v68 != v85)
      {
        v86 = *v68;
LABEL_157:
        if (*(_QWORD *)(v86 + 8))
        {
          v18 = v16 + 48;
LABEL_18:
          v19 = *(WTF::StringImpl **)(*(_QWORD *)v18 + 32);
          if (v19)
            *(_DWORD *)v19 += 2;
          v113[0] = v19;
          v20 = (const WebCore::TreeScope *)*((_QWORD *)this + 5);
          v21 = *(_QWORD *)v20;
          if (*(_QWORD *)v20)
            v22 = (*(_WORD *)(*(_QWORD *)v20 + 28) & 0x80) == 0;
          else
            v22 = 1;
          if (!v22 && !*(_BYTE *)(v21 + 193))
          {
            v74 = *(_QWORD *)(v21 + 200);
            if (v74)
            {
              v75 = *(_QWORD *)(v74 + 8);
              if (v75)
              {
                if (*(_WORD *)(*(_QWORD *)(v75 + 96) + 10) == 242)
                  v20 = (const WebCore::TreeScope *)*((_QWORD *)v20 + 2);
              }
            }
          }
          v89 = 0;
          WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)v113, v20, &v89, (uint64_t *)&v90, v9, v10, v11);
          v24 = v89;
          v89 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, v23);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          v25 = v113[0];
          v113[0] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v90;
          if (v90)
          {
            if ((*((_WORD *)v90 + 14) & 0x20) != 0)
            {
              *((_DWORD *)v90 + 6) += 2;
              WebCore::SVGElement::addReferencingElement(v26, this);
              if (*((_DWORD *)v26 + 6) == 2)
              {
                if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v26, v27);
              }
              else
              {
                *((_DWORD *)v26 + 6) -= 2;
              }
            }
LABEL_83:
            v62 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
            *(_DWORD *)(v62 + 24) += 2;
            WebCore::Document::updateSVGRenderer((WebCore::Document *)v62, this);
            if (*(_DWORD *)(v62 + 24) == 2)
            {
              if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v62, v63);
            }
            else
            {
              *(_DWORD *)(v62 + 24) -= 2;
            }
            v64 = v91;
            v91 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v63);
              else
                *(_DWORD *)v64 -= 2;
            }
            v65 = v90;
            v90 = 0;
            if (v65)
            {
              if (*((_DWORD *)v65 + 6) == 2)
              {
                if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v65, v63);
              }
              else
              {
                *((_DWORD *)v65 + 6) -= 2;
              }
            }
            return;
          }
          if (v91 && *((_DWORD *)v91 + 1))
          {
            v69 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
            v70 = *(_QWORD *)v69;
            if (*(_QWORD *)v69)
            {
              if ((*(_WORD *)(v70 + 28) & 0x80) != 0 && !*(_BYTE *)(v70 + 193))
              {
                v76 = *(_QWORD *)(v70 + 200);
                if (v76)
                {
                  v77 = *(_QWORD *)(v76 + 8);
                  if (v77)
                  {
                    if (*(_WORD *)(*(_QWORD *)(v77 + 96) + 10) == 242)
                      v69 = (WebCore::TreeScope *)*((_QWORD *)v69 + 2);
                  }
                }
              }
            }
            WebCore::TreeScope::addPendingSVGResource(v69, &v91, this);
            goto LABEL_83;
          }
          {
            WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
          }
          LODWORD(v125[0]) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
          *(_DWORD *)((char *)v125 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                                 + 3);
          v28 = (unsigned int *)qword_1ECE90818;
          if (qword_1ECE90818)
            *(_DWORD *)qword_1ECE90818 += 2;
          v126 = xmmword_1ECE90820;
          v127 = *(_OWORD *)algn_1ECE90830;
          v125[1] = v28;
          v128 = qword_1ECE90840;
          v129 = 0;
          v29 = dword_1ECE90854;
          v130 = 0;
          v131 = dword_1ECE90854;
          if (dword_1ECE90854)
          {
            if (dword_1ECE90854 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1966377F8);
            }
            v81 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
            v130 = v29;
            v129 = v81;
            if (dword_1ECE90854)
            {
              v82 = qword_1ECE90848;
              v83 = qword_1ECE90848 + 16 * dword_1ECE90854;
              do
              {
                v84 = *(_DWORD **)v82;
                if (*(_QWORD *)v82)
                  *v84 += 2;
                *(_QWORD *)v81 = v84;
                *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
                v82 += 16;
                v81 += 16;
              }
              while (v82 != v83);
            }
          }
          v132 = dword_1ECE90858;
          v133 = byte_1ECE9085C;
          LOBYTE(v134) = 0;
          v137 = 0;
          if (byte_1ECE90878)
          {
            v134 = word_1ECE90860;
            v30 = qword_1ECE90868;
            if (qword_1ECE90868)
              *(_DWORD *)qword_1ECE90868 += 2;
            v135 = v30;
            v31 = qword_1ECE90870;
            if (qword_1ECE90870)
              *(_DWORD *)qword_1ECE90870 += 2;
            v136 = v31;
            v137 = 1;
          }
          v138 = xmmword_1ECE90880;
          v32 = qword_1ECE90890;
          if (qword_1ECE90890)
            *(_DWORD *)qword_1ECE90890 += 2;
          v139 = v32;
          v33 = (uint64_t *)*((_QWORD *)this + 5);
          v34 = *v33;
          if (*v33 && (*(_WORD *)(v34 + 28) & 0x80) != 0)
          {
            v36 = *(_DWORD *)((char *)&v138 + 2);
            v35 = (*(_BYTE *)(v34 + 193) != 0) << 8;
          }
          else
          {
            v35 = 256;
            v36 = *(_DWORD *)((char *)&v138 + 2);
          }
          *(_DWORD *)((char *)&v138 + 2) = v35 | v36 & 0xFFFFFEFF;
          v37 = (WebCore::Document *)v33[1];
          v38 = *((_QWORD *)this + 29);
          v39 = *(_QWORD *)(v38 + 24);
          if (v39 && *(_DWORD *)(v39 - 12))
          {
            v71 = *(unsigned int *)(v39 - 4);
            if ((_DWORD)v71)
            {
              v72 = 8 * v71;
              v73 = *(uint64_t **)(v38 + 24);
              while ((unint64_t)(*v73 + 1) <= 1)
              {
                ++v73;
                v72 -= 8;
                if (!v72)
                  goto LABEL_53;
              }
            }
            else
            {
              v73 = *(uint64_t **)(v38 + 24);
            }
            v87 = (uint64_t *)(v39 + 8 * v71);
            if (v73 != v87)
            {
              v88 = *v73;
LABEL_166:
              if (*(_QWORD *)(v88 + 8))
              {
                v40 = v38 + 48;
                goto LABEL_54;
              }
              while (++v73 != v87)
              {
                v88 = *v73;
                if ((unint64_t)(*v73 + 1) > 1)
                {
                  if (v73 != v87)
                    goto LABEL_166;
                  break;
                }
              }
            }
          }
LABEL_53:
          v40 = v38 + 40;
LABEL_54:
          v41 = *(WTF::StringImpl **)(*(_QWORD *)v40 + 32);
          if (v41)
            *(_DWORD *)v41 += 2;
          v96 = v41;
          WebCore::Document::completeURL(v37, &v96, (uint64_t)v37 + 848, 0, (WTF::URL *)&v93);
          v42 = v93;
          if (v93)
            *(_DWORD *)v93 += 2;
          v97 = (unsigned int **)v42;
          v98 = v94;
          v99 = v95;
          v100[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v100);
          v101 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v102 = v113[0];
          v103 = 0u;
          v104 = 0u;
          v105 = 0u;
          v106 = 0x10000;
          v43 = v107 & 0x80 | 4;
          v107 = v43;
          *(_QWORD *)&v108 = 0;
          v44 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *v44 += 2;
            v43 = v107;
          }
          *((_QWORD *)&v108 + 1) = v44;
          v109 = 0;
          LOBYTE(v110) = 0;
          BYTE4(v110) = 0;
          v111 = v111 & 0xE0 | 5;
          v107 = v43 | 2;
          v112 = 0;
          WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v113, (uint64_t *)&v97);
          v45 = v108;
          v108 = 0u;
          v114 = v45;
          v115 = v109;
          v116 = v110;
          v117 = v111;
          v46 = v112;
          v109 = 0;
          v112 = 0;
          v118 = v46;
          v119 = 0;
          WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v120, (const WebCore::ResourceLoaderOptions *)v125);
          v120[72] = 0;
          v121 = 0;
          v122 = 0u;
          WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v113, &v123);
          v124 = 0;
          WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v97, v47);
          v49 = v93;
          v93 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v48);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = v96;
          v96 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v48);
            else
              *(_DWORD *)v50 -= 2;
          }
          *((_DWORD *)this + 6) += 2;
          v51 = v121;
          v121 = this;
          if (v51)
          {
            if (*((_DWORD *)v51 + 6) == 2)
            {
              if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v51, v48);
            }
            else
            {
              *((_DWORD *)v51 + 6) -= 2;
            }
          }
          v52 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 720);
          if (!v52)
            v52 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), v48);
          WebCore::CachedResourceLoader::requestImage((WebCore::ResourceRequest *)v113, v52, 0, (uint64_t)&v97);
          if ((_DWORD)v101 || (v78 = (uint64_t)v97) == 0)
          {
            v53 = 0;
            v92 = 0;
          }
          else
          {
            do
              v79 = __ldaxr((unsigned int *)v78);
            while (__stlxr(v79 + 1, (unsigned int *)v78));
            v92 = (unsigned int *)v78;
            v53 = *(_QWORD *)(v78 + 8);
            if (v53)
            {
              v96 = (WTF::StringImpl *)&v92;
              ++*(_DWORD *)(v53 + 548);
              v80 = *(_QWORD *)(v53 + 488);
              if (v80)
              {
                if (*(_QWORD *)(v80 + 8))
                {
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v53 + 464), (uint64_t *)&v96, (uint64_t)&v93);
                  if (v92)
                    v53 = *((_QWORD *)v92 + 1);
                  else
                    v53 = 0;
                }
              }
            }
          }
          WebCore::CachedResourceHandleBase::setResource(v2, (WebCore::CachedResource *)v53);
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v92, v54);
          if ((_DWORD)v101 != -1)
            (*(&off_1E34613C8 + v101))((int)&v93, (WebCore::CachedResourceHandleBase *)&v97);
          v56 = *v2;
          if (*v2)
          {
            do
              v57 = __ldaxr((unsigned int *)v56);
            while (__stlxr(v57 + 1, (unsigned int *)v56));
            v96 = (WTF::StringImpl *)v56;
            v58 = *(uint64_t **)(v56 + 8);
            if (v58)
            {
              v93 = (WTF::StringImpl *)&v96;
              ++*((_DWORD *)v58 + 137);
              v59 = v58[61];
              if (!v59
                || !*(_QWORD *)(v59 + 8)
                || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add(v58 + 58, (uint64_t *)&v93, (uint64_t)&v97), v96)&& (v58 = (uint64_t *)*((_QWORD *)v96 + 1)) != 0)
              {
                if (WebCore::CachedResource::addClientToSet((WebCore::CachedResource *)v58, (WebCore::SVGFEImageElement *)((char *)this + 240)))(*(void (**)(uint64_t *, char *))(*v58 + 88))(v58, (char *)this + 240);
              }
            }
          }
          else
          {
            v96 = 0;
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v96, v55);
          WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v113, v60);
          WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v125, v61);
          goto LABEL_83;
        }
        while (++v68 != v85)
        {
          v86 = *v68;
          if ((unint64_t)(*v68 + 1) > 1)
          {
            if (v68 != v85)
              goto LABEL_157;
            break;
          }
        }
      }
    }
LABEL_17:
    v18 = v16 + 40;
    goto LABEL_18;
  }
}

_QWORD *WebCore::SVGFEImageElement::attributeChanged(_QWORD *a1, const WebCore::QualifiedName *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5, __n128 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v18;
  _QWORD v19[2];

  if (*(_QWORD *)a2 == WebCore::SVGNames::preserveAspectRatioAttr)
  {
    v11 = a1[32];
    v12 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v13 = *(_QWORD *)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v18 = 262;
    v19[0] = v13;
    v19[1] = v14;
    WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)v19, (uint64_t)&v18);
    v15 = v18;
    *(_WORD *)(*(_QWORD *)(v11 + 40) + 26) = v18;
    v16 = *(_QWORD *)(v11 + 48);
    if (v16)
      *(_WORD *)(v16 + 26) = v15;
  }
  WebCore::SVGURIReference::parseAttribute((uint64_t)(a1 + 28), a2, a4, a4, a6);
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

void WebCore::SVGFEImageElement::svgAttributeChanged(WebCore::SVGFEImageElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl ***v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::SVGElement *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  if ((byte_1ECE85578 & 1) != 0)
  {
    v4 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE85570;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE85570)
      v5 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5 && v5[1])
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = this;
      *(_BYTE *)(v6 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v6;
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v34 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v34)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v34));
          v35 = *(WTF **)(v9 + 16);
          if (v35)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v35, v7);
          }
          WTF::fastFree((WTF *)v9, v7);
        }
      }
    }
    v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v14, this);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v15);
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (v18)
      return;
LABEL_44:
    atomic_store(1u, (unsigned int *)v12);
    v32 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v32)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v32));
    v33 = *(WTF **)(v12 + 16);
    if (v33)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      WTF::fastFree(v33, v16);
    }
    WTF::fastFree((WTF *)v12, v16);
    return;
  }
  {
    v19 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_56;
    v20 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v19 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v20)
      goto LABEL_29;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v20 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_56:
      v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_29:
  {
    if (v19)
      v19 += 2 * *((unsigned int *)v19 - 1);
  }
  else
  {
    v19 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v19 == v20 || !v20[1])
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
    return;
  }
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v21 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 8) = this;
    *(_BYTE *)(v21 + 32) = 0;
    v23 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v23 & 0xFFFF000000000000 | v21;
    v24 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v36 = *(unsigned int *)(v24 + 28);
        if ((_DWORD)v36)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v36));
        v37 = *(WTF **)(v24 + 16);
        if (v37)
        {
          *(_QWORD *)(v24 + 16) = 0;
          *(_DWORD *)(v24 + 24) = 0;
          WTF::fastFree(v37, v22);
        }
        WTF::fastFree((WTF *)v24, v22);
      }
    }
  }
  v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v27 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v27 + 1, (unsigned int *)v12));
  WebCore::SVGFEImageElement::buildPendingResource(this);
  WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(this, v28);
  WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v29);
  do
  {
    v30 = __ldaxr((unsigned int *)v12);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v12));
  if (!v31)
    goto LABEL_44;
}

uint64_t WebCore::SVGFEImageElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, WebCore::SVGElement *a3)
{
  char v3;

  v3 = a2;
  WebCore::SVGElement::insertedIntoAncestor(a1, a2, a3);
  return v3 & 1;
}

void WebCore::SVGFEImageElement::didFinishInsertingNode(WebCore::SVGFEImageElement *this)
{
  WebCore::SVGElement::buildPendingResourcesIfNeeded(this);
  WebCore::SVGFEImageElement::buildPendingResource(this);
}

void WebCore::SVGFEImageElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::CachedResource *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  _BYTE v18[24];
  unsigned int **v19;

  v5 = a2;
  WebCore::SVGElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 264);
    if (v7)
    {
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
      v17 = (unsigned int *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      if (v9)
      {
        v19 = &v17;
        ++*(_DWORD *)(v9 + 548);
        v10 = *(_QWORD *)(v9 + 488);
        if (v10)
        {
          if (*(_QWORD *)(v10 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v19, (uint64_t)v18);
        }
      }
    }
    else
    {
      v17 = 0;
    }
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 264), 0);
    if (v17)
    {
      v12 = (WebCore::CachedResource *)*((_QWORD *)v17 + 1);
      if (v12)
        WebCore::CachedResource::removeClient(v12, (unsigned int **)(a1 + 240));
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v17, v11);
    v13 = *(_QWORD *)(a1 + 120);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          *(_DWORD *)(v15 + 24) += 2;
          WebCore::SVGElement::removeReferencingElement((WebCore::SVGElement *)v15, (WebCore::SVGElement *)a1);
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
      }
    }
  }
}

void WebCore::SVGFEImageElement::notifyFinished(uint64_t a1, void *a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  _QWORD v11[2];

  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 28);
      if ((v3 & 8) != 0)
      {
        v4 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)(v2 + 24) = v4 + 2;
        if ((v3 & 0x20) == 0)
          goto LABEL_23;
        if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
          goto LABEL_23;
        v5 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
        if (!v5)
          goto LABEL_23;
        if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
        }
        else
        {
          v6 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
          *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v6;
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
          {
            v11[0] = 0;
            v11[1] = 0;
            WebCore::LegacyRenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(v5, (uint64_t *)1, (uint64_t)v11);
            v7 = v11[0];
            if (v11[0])
            {
              v8 = *(unsigned int *)(v11[0] - 4);
              if ((_DWORD)v8)
              {
                v9 = (WTF **)v11[0];
                do
                {
                  v10 = *v9;
                  if (*v9 != (WTF *)-1)
                  {
                    *v9 = 0;
                    if (v10)
                    {
                      if (*(_DWORD *)v10 == 1)
                        WTF::fastFree(v10, a2);
                      else
                        --*(_DWORD *)v10;
                    }
                  }
                  ++v9;
                  --v8;
                }
                while (v8);
              }
              WTF::fastFree((WTF *)(v7 - 16), a2);
            }
            v6 = *(_DWORD *)(v5 + 16);
          }
          if (v6)
          {
            *(_DWORD *)(v5 + 16) = v6 - 1;
            v4 = *(_DWORD *)(v2 + 24) - 2;
LABEL_23:
            if (v4)
            {
              *(_DWORD *)(v2 + 24) = v4;
            }
            else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
            }
            return;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x196637F7CLL);
      }
    }
  }
}

void `non-virtual thunk to'WebCore::SVGFEImageElement::notifyFinished(uint64_t a1, void *a2)
{
  WebCore::SVGFEImageElement::notifyFinished(a1 - 240, a2);
}

void WebCore::SVGFEImageElement::createFilterEffect(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::Node *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::CachedImage *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  float v16;
  float v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  double v33;
  double v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  const WebCore::TreeScope *v40;
  uint64_t v41;
  BOOL v42;
  void *v43;
  WebCore::Node *v44;
  WTF::StringImpl *v45;
  WebCore::Node *v46;
  long double v47;
  WebCore::Node *v48;
  WebCore::SVGRenderingContext *v49;
  long double v50;
  long double v51;
  double v52;
  float v54;
  float v55;
  double v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  WTF::StringImpl *v72;
  WebCore::Node *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  double v94;
  float32x4_t v95;
  float v96[2];
  long double v97;
  long double v98;
  double v99;
  double v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105[2];
  _WORD v106[2];
  int v107;
  __int128 v108;
  __int128 v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[32];
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v7 = *(WebCore::Node **)(a1 + 264);
  if (v7)
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
    v102 = v7;
    v9 = *((_QWORD *)v7 + 1);
    if (v9)
    {
      *(_QWORD *)v114 = &v102;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (!v10
        || !*(_QWORD *)(v10 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)v114, (uint64_t)v105), (v7 = v102) != 0))
      {
        v11 = (WebCore::CachedImage *)*((_QWORD *)v7 + 1);
        if (v11)
        {
          v12 = *(_QWORD *)(a1 + 64);
          if ((v12 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196638860);
          }
          v13 = WebCore::CachedImage::imageForRenderer(v11, (const WebCore::RenderObject *)(v12 & 0xFFFFFFFFFFFFLL));
          v15 = v13;
          if (!v13
            || (++*((_DWORD *)v13 + 2),
                (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v13 + 168))(v13, 0) <= 0.0)
            || v16 <= 0.0
            || ((*(void (**)(float32x4_t *__return_ptr, WTF *, _QWORD))(*(_QWORD *)v15 + 312))(&v95, v15, 0), !v95.i64[0]))
          {
            *a4 = 0;
LABEL_41:
            if (v15)
            {
              if (*((_DWORD *)v15 + 2) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
              else
                --*((_DWORD *)v15 + 2);
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v102, v14);
            return;
          }
          v17 = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v15 + 168))(v15, 0);
          *(_QWORD *)v114 = 0;
          *(float *)&v114[8] = v17;
          *(_DWORD *)&v114[12] = v18;
          v19 = v95.i64[0];
          v95.i64[0] = 0;
          v97 = *(double *)&v19;
          LODWORD(v98) = 0;
          LOBYTE(v105[0]) = 0;
          LODWORD(v105[1]) = -1;
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)&v104, v105, (uint64_t *)&v97);
          LODWORD(v105[1]) = 0;
          LOBYTE(v106[0]) = 0;
          BYTE8(v108) = 0;
          v20 = *(_QWORD **)(a1 + 256);
          v21 = v20[3];
          if (v21 && *(_DWORD *)(v21 - 12))
          {
            v82 = *(unsigned int *)(v21 - 4);
            if ((_DWORD)v82)
            {
              v83 = 8 * v82;
              v84 = (uint64_t *)v20[3];
              while ((unint64_t)(*v84 + 1) <= 1)
              {
                ++v84;
                v83 -= 8;
                if (!v83)
                  goto LABEL_14;
              }
            }
            else
            {
              v84 = (uint64_t *)v20[3];
            }
            v92 = (uint64_t *)(v21 + 8 * v82);
            if (v84 != v92)
            {
              v93 = *v84;
LABEL_163:
              if (*(_QWORD *)(v93 + 8))
              {
                v22 = v20 + 6;
LABEL_15:
                v23 = (_WORD *)(*v22 + 26);
                v24 = WTF::fastMalloc((WTF *)0x80);
                *a4 = WebCore::FEImage::FEImage(v24, (uint64_t)v105, v114, v23);
                if (BYTE8(v108))
                {
                  if ((_DWORD)v108 != -1)
                    ((void (*)(uint64_t *, _WORD *))off_1E34613D8[v108])(&v104, v106);
                  LODWORD(v108) = -1;
                }
                if (LODWORD(v105[1]) != -1)
                  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34613D8[LODWORD(v105[1])])(&v104, v105);
                LODWORD(v105[1]) = -1;
                if (LODWORD(v98) != -1)
                  ((void (*)(uint64_t *, long double *))off_1E34613D8[LODWORD(v98)])(&v104, &v97);
                v25 = v95.i64[0];
                v95.i64[0] = 0;
                if (!v25)
                  goto LABEL_41;
                v26 = *(_QWORD *)(v25 + 8);
                if (__ldaxr((unsigned __int8 *)v26))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v26))
                {
                  goto LABEL_29;
                }
                MEMORY[0x19AEA534C](v26);
LABEL_29:
                v28 = *(_QWORD *)(v26 + 8);
                v29 = v28 - 1;
                *(_QWORD *)(v26 + 8) = v28 - 1;
                if (v28 == 1)
                {
                  v87 = *(_QWORD *)(v26 + 16);
                  v30 = *(_QWORD *)(v26 + 24);
                  *(_QWORD *)(v26 + 24) = 0;
                  v31 = v87 != 0;
                }
                else
                {
                  v30 = 0;
                  v31 = 1;
                }
                v32 = __ldxr((unsigned __int8 *)v26);
                if (v32 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v26))
                  {
LABEL_36:
                    if (!v29)
                    {
                      if (v30)
                        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
                      if (!v31)
                        WTF::fastFree((WTF *)v26, v14);
                    }
                    goto LABEL_41;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v26);
                goto LABEL_36;
              }
              while (++v84 != v92)
              {
                v93 = *v84;
                if ((unint64_t)(*v84 + 1) > 1)
                {
                  if (v84 != v92)
                    goto LABEL_163;
                  break;
                }
              }
            }
          }
LABEL_14:
          v22 = v20 + 5;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v102 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v102, a2);
  v36 = *(_QWORD *)(a1 + 232);
  v37 = *(_QWORD *)(v36 + 24);
  if (!v37 || !*(_DWORD *)(v37 - 12))
    goto LABEL_48;
  v68 = *(unsigned int *)(v37 - 4);
  if ((_DWORD)v68)
  {
    v69 = 8 * v68;
    v70 = *(uint64_t **)(v36 + 24);
    while ((unint64_t)(*v70 + 1) <= 1)
    {
      ++v70;
      v69 -= 8;
      if (!v69)
        goto LABEL_48;
    }
  }
  else
  {
    v70 = *(uint64_t **)(v36 + 24);
  }
  v88 = (uint64_t *)(v37 + 8 * v68);
  if (v70 == v88)
    goto LABEL_48;
  v89 = *v70;
LABEL_145:
  if (!*(_QWORD *)(v89 + 8))
  {
    while (++v70 != v88)
    {
      v89 = *v70;
      if ((unint64_t)(*v70 + 1) > 1)
      {
        if (v70 != v88)
          goto LABEL_145;
        break;
      }
    }
LABEL_48:
    v38 = v36 + 40;
    goto LABEL_49;
  }
  v38 = v36 + 48;
LABEL_49:
  v39 = *(WTF::StringImpl **)(*(_QWORD *)v38 + 32);
  if (v39)
    *(_DWORD *)v39 += 2;
  v105[0] = v39;
  v40 = *(const WebCore::TreeScope **)(a1 + 40);
  v41 = *(_QWORD *)v40;
  if (*(_QWORD *)v40)
    v42 = (*(_WORD *)(*(_QWORD *)v40 + 28) & 0x80) == 0;
  else
    v42 = 1;
  if (!v42 && !*(_BYTE *)(v41 + 193))
  {
    v85 = *(_QWORD *)(v41 + 200);
    if (v85)
    {
      v86 = *(_QWORD *)(v85 + 8);
      if (v86)
      {
        if (*(_WORD *)(*(_QWORD *)(v86 + 96) + 10) == 242)
          v40 = (const WebCore::TreeScope *)*((_QWORD *)v40 + 2);
      }
    }
  }
  v101 = 0;
  WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)v105, v40, &v101, (uint64_t *)&v102, v33, v34, v35);
  v44 = v101;
  v101 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v43);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v45 = v105[0];
  v105[0] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v102;
  if (v102
    && (*((_WORD *)v102 + 14) & 0x20) != 0
    && !WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)a1, v102))
  {
    v48 = v102;
    if (v102)
      *((_DWORD *)v102 + 6) += 2;
    v49 = (WebCore::SVGRenderingContext *)(*((_QWORD *)v48 + 8) & 0xFFFFFFFFFFFFLL);
    if (v49)
    {
      if ((*(_BYTE *)((*((_QWORD *)v48 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196638894);
      }
      ++*(_DWORD *)((*((_QWORD *)v48 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(v49, v46, &v97);
      v51 = v99;
      v50 = v100;
      v52 = fabs(v97 * v100 - v98 * v99);
      if ((unint64_t)(*(_QWORD *)&v52 - 0x10000000000000) >> 53 >= 0x3FF
        && (unint64_t)(*(_QWORD *)&v52 - 1) >= 0xFFFFFFFFFFFFFLL)
      {
        goto LABEL_86;
      }
      v54 = hypot(v97, v98);
      v55 = hypot(v51, v50);
      v96[0] = v54;
      v96[1] = v55;
      *(float *)&v56 = (*(float (**)(WebCore::SVGRenderingContext *, _QWORD))(*(_QWORD *)v49 + 256))(v49, 0);
      v95.i64[0] = __PAIR64__(v57, LODWORD(v56));
      v95.i64[1] = __PAIR64__(v59, v58);
      v60 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v60 != -1)
      {
        v105[0] = (WTF::StringImpl *)&v104;
        *(_QWORD *)v114 = v105;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      WebCore::GraphicsContext::createScaledImageBuffer(&v95, a3, v96, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, (uint64_t *)&v94, v56);
      if (v94 == 0.0)
      {
LABEL_86:
        v47 = 0.0;
        memset(v114, 0, 24);
      }
      else
      {
        v61 = (*(uint64_t (**)(double))(**(_QWORD **)&v94 + 16))(COERCE_DOUBLE(*(_QWORD *)&v94));
        *(_OWORD *)v105 = xmmword_1969FCA90;
        v106[0] = 8;
        v107 = 2;
        v108 = 0u;
        v109 = 0u;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v113 = v61;
        {
          v62 = *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1);
          v63 = *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation;
          v65 = *(double *)&qword_1EE2F9610;
          v64 = unk_1EE2F9618;
          v66 = *((double *)&xmmword_1EE2F9620 + 1);
          v67 = *(double *)&xmmword_1EE2F9620;
        }
        else
        {
          WebCore::currentContentTransformation(void)::s_currentContentTransformation = constinit_10;
          *(_OWORD *)&qword_1EE2F9610 = unk_1969FE138;
          xmmword_1EE2F9620 = xmmword_1969FE148;
          v64 = 1.0;
          v66 = 0.0;
          v67 = 0.0;
          v65 = 0.0;
          v62 = 0.0;
          v63 = 1.0;
        }
        *(_OWORD *)v114 = WebCore::currentContentTransformation(void)::s_currentContentTransformation;
        *(_OWORD *)&v114[16] = *(_OWORD *)&qword_1EE2F9610;
        v115 = xmmword_1EE2F9620;
        *(double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation = v63 + v62 * 0.0;
        *((double *)&WebCore::currentContentTransformation(void)::s_currentContentTransformation + 1) = v62 + v63 * 0.0;
        *(double *)&qword_1EE2F9610 = v65 + v64 * 0.0;
        unk_1EE2F9618 = v64 + v65 * 0.0;
        *(double *)&xmmword_1EE2F9620 = v67 + v66 * 0.0 + 0.0;
        *((double *)&xmmword_1EE2F9620 + 1) = v66 + v67 * 0.0 + 0.0;
        v104 = 0;
        (*(void (**)(WebCore::SVGRenderingContext *, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v49 + 680))(v49, v105, &v104);
        WebCore::currentContentTransformation(void)::s_currentContentTransformation = *(_OWORD *)v114;
        *(_OWORD *)&qword_1EE2F9610 = *(_OWORD *)&v114[16];
        xmmword_1EE2F9620 = v115;
        v47 = v94;
        *(double *)v114 = v94;
        *(float32x4_t *)&v114[8] = v95;
      }
      v71 = *((_DWORD *)v49 + 4);
      if (!v71)
      {
        __break(0xC471u);
        JUMPOUT(0x1966388B4);
      }
      *((_DWORD *)v49 + 4) = v71 - 1;
    }
    else
    {
      v47 = 0.0;
      memset(v114, 0, 24);
    }
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48, v46);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  else
  {
    v47 = 0.0;
    memset(v114, 0, 24);
  }
  v72 = v103;
  v103 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v46);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = v102;
  v102 = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 6) == 2)
    {
      if ((*((_WORD *)v73 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v73, v46);
    }
    else
    {
      *((_DWORD *)v73 + 6) -= 2;
    }
  }
  if (v47 == 0.0)
  {
    *a4 = 0;
    return;
  }
  *(_QWORD *)v114 = 0;
  v97 = v47;
  LODWORD(v98) = 1;
  LOBYTE(v105[0]) = 0;
  LODWORD(v105[1]) = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)&v102, v105, (uint64_t *)&v97);
  LODWORD(v105[1]) = 1;
  LOBYTE(v106[0]) = 0;
  BYTE8(v108) = 0;
  v74 = *(_QWORD **)(a1 + 256);
  v75 = v74[3];
  if (v75 && *(_DWORD *)(v75 - 12))
  {
    v79 = *(unsigned int *)(v75 - 4);
    if ((_DWORD)v79)
    {
      v80 = 8 * v79;
      v81 = (uint64_t *)v74[3];
      while ((unint64_t)(*v81 + 1) <= 1)
      {
        ++v81;
        v80 -= 8;
        if (!v80)
          goto LABEL_99;
      }
    }
    else
    {
      v81 = (uint64_t *)v74[3];
    }
    v90 = (uint64_t *)(v75 + 8 * v79);
    if (v81 != v90)
    {
      v91 = *v81;
LABEL_154:
      if (*(_QWORD *)(v91 + 8))
      {
        v76 = v74 + 6;
        goto LABEL_100;
      }
      while (++v81 != v90)
      {
        v91 = *v81;
        if ((unint64_t)(*v81 + 1) > 1)
        {
          if (v81 != v90)
            goto LABEL_154;
          break;
        }
      }
    }
  }
LABEL_99:
  v76 = v74 + 5;
LABEL_100:
  v77 = (_WORD *)(*v76 + 26);
  v78 = WTF::fastMalloc((WTF *)0x80);
  *a4 = WebCore::FEImage::FEImage(v78, (uint64_t)v105, &v114[8], v77);
  if (BYTE8(v108))
  {
    if ((_DWORD)v108 != -1)
      ((void (*)(WebCore::Node **, _WORD *))off_1E34613D8[v108])(&v102, v106);
    LODWORD(v108) = -1;
  }
  if (LODWORD(v105[1]) != -1)
    ((void (*)(WebCore::Node **, WTF::StringImpl **))off_1E34613D8[LODWORD(v105[1])])(&v102, v105);
  LODWORD(v105[1]) = -1;
  if (LODWORD(v98) != -1)
    ((void (*)(WebCore::Node **, long double *))off_1E34613D8[LODWORD(v98)])(&v102, &v97);
}

WTF::StringImpl *WebCore::SVGFEImageElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  _BYTE v20[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = *(WebCore::Document **)(a1[5] + 8);
  v5 = a1[29];
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = *(uint64_t **)(v5 + 24);
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = *(uint64_t **)(v5 + 24);
  }
  v16 = (uint64_t *)(v6 + 8 * v13);
  if (v15 == v16)
    goto LABEL_2;
  v17 = *v15;
LABEL_25:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (++v15 != v16)
    {
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_25;
        break;
      }
    }
LABEL_2:
    v7 = v5 + 40;
    goto LABEL_3;
  }
  v7 = v5 + 48;
LABEL_3:
  v8 = *(WTF::StringImpl **)(*(_QWORD *)v7 + 32);
  if (v8)
    *(_DWORD *)v8 += 2;
  v18 = v8;
  WebCore::Document::completeURL(v4, &v18, (uint64_t)v4 + 848, 0, (WTF::URL *)v19);
  if (v19[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v19, v10, (uint64_t)v20);
    v11 = v19[0];
    v19[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v19[0] = 0;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::SVGFELightElement::SVGFELightElement(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v29;
  uint64_t *v30;
  char *v31;

  *a1 = off_1E3461670;
  a1[14] = &unk_1E3461BA8;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3461578;
  *((_QWORD *)v6 + 1) = a1;
  v31 = v6;
  WebCore::SVGElement::SVGElement((uint64_t)a1, a2, a3, (uint64_t *)&v31, 0);
  if (v31)
    (*(void (**)(char *))(*(_QWORD *)v31 + 8))(v31);
  *a1 = off_1E3461670;
  a1[14] = &unk_1E3461BA8;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)v7 = &off_1E34566C8;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_WORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = off_1E3456748;
  *(_DWORD *)(v8 + 28) = 0;
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = 0;
  a1[22] = v7;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)v9 = &off_1E34566C8;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = off_1E3456748;
  *(_DWORD *)(v10 + 28) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  a1[23] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  a1[24] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  a1[25] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  a1[26] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  a1[27] = v17;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)v19 = &off_1E34566C8;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E3456748;
  *(_DWORD *)(v20 + 28) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  a1[28] = v19;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)v21 = &off_1E34566C8;
  v22 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(_QWORD *)v22 = off_1E3456748;
  *(_DWORD *)(v22 + 28) = 0;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  a1[29] = v21;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)v23 = &off_1E34566C8;
  v24 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)(v24 + 16) = 0;
  *(_WORD *)(v24 + 24) = 0;
  *(_QWORD *)v24 = off_1E3456748;
  *(_DWORD *)(v24 + 28) = 1065353216;
  *(_QWORD *)(v23 + 40) = v24;
  *(_QWORD *)(v23 + 48) = 0;
  a1[30] = v23;
  v25 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)v25 = &off_1E34566C8;
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v26 + 8) = 1;
  *(_QWORD *)(v26 + 16) = 0;
  *(_WORD *)(v26 + 24) = 0;
  *(_QWORD *)v26 = off_1E3456748;
  *(_DWORD *)(v26 + 28) = 0;
  *(_QWORD *)(v25 + 40) = v26;
  *(_QWORD *)(v25 + 48) = 0;
  a1[31] = v25;
  v27 = atomic_load(&WebCore::SVGFELightElement::SVGFELightElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v27 != -1)
  {
    v31 = &v29;
    v30 = (uint64_t *)&v31;
    std::__call_once(&WebCore::SVGFELightElement::SVGFELightElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFELightElement::SVGFELightElement(WebCore::QualifiedName const&,WebCore::Document &)::$_0 &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedPrimitiveProperty<float>::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)v4 = &off_1E34566C8;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3456748;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(v4 + 40) = result;
  *(_QWORD *)(v4 + 48) = 0;
  *a2 = v4;
  return result;
}

_QWORD *WebCore::SVGFELightElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **this, int a5, __n128 a6)
{
  unsigned int v11;
  uint64_t v12;

  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 > 0x30A)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x3A0u)
    {
      if (v11 == 779)
      {
        v12 = a1[29];
      }
      else
      {
        if (v11 != 841)
          return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, this, a5, a6);
        v12 = a1[30];
      }
    }
    else
    {
      switch(v11)
      {
        case 0x3A1u:
          v12 = a1[24];
          break;
        case 0x3ABu:
          v12 = a1[25];
          break;
        case 0x3ADu:
          v12 = a1[26];
          break;
        default:
          return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, this, a5, a6);
      }
    }
  }
  else if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x224u)
  {
    if (v11 == 366)
    {
      v12 = a1[22];
    }
    else
    {
      if (v11 != 449)
        return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, this, a5, a6);
      v12 = a1[23];
    }
  }
  else
  {
    switch(v11)
    {
      case 0x225u:
        v12 = a1[31];
        break;
      case 0x309u:
        v12 = a1[27];
        break;
      case 0x30Au:
        v12 = a1[28];
        break;
      default:
        return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, this, a5, a6);
    }
  }
  ++*(_DWORD *)(v12 + 8);
  WTF::String::toFloat((WTF::String *)this, 0);
  *(_DWORD *)(*(_QWORD *)(v12 + 40) + 28) = a6.n128_u32[0];
  if (*(_DWORD *)(v12 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 8);
  return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, this, a5, a6);
}

unsigned int *WebCore::SVGFELightElement::svgAttributeChanged(WebCore::SVGFELightElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;

  if ((byte_1ECE855E0 & 1) != 0)
  {
    v4 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    result = (unsigned int *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE855D8;
    if (result)
      goto LABEL_7;
    if (qword_1ECE855D8)
      result = (unsigned int *)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      result = 0;
  }
  else
  {
    v4 = 0;
    result = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((unsigned int *)v4 == result || !*((_QWORD *)result + 1))
    return (unsigned int *)WebCore::SVGElement::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = *(_WORD *)(v6 + 28);
    if ((v7 & 8) != 0)
    {
      v8 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v8 + 2;
      v9 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v9)
      {
LABEL_67:
        if (v8)
        {
          *(_DWORD *)(v6 + 24) = v8;
        }
        else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        {
          return WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        }
        return result;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196639460);
      }
      v10 = *(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v10;
      v11 = *(unsigned __int8 *)(v9 + 46);
      if (v11 != 97 && v11 != 77)
      {
LABEL_65:
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x196639480);
        }
        *(_DWORD *)(v9 + 16) = v10 - 1;
        v8 = *(_DWORD *)(v6 + 24) - 2;
        goto LABEL_67;
      }
      if ((v7 & 0x20) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
        if (v12 == *(_QWORD *)(WebCore::SVGNames::feDiffuseLightingTag + 24))
        {
          if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
          {
            v13 = WTF::fastCompactMalloc((WTF *)0x28);
            *(_DWORD *)v13 = 1;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)(v13 + 24) = 0;
            *(_QWORD *)(v13 + 8) = this;
            *(_BYTE *)(v13 + 32) = 0;
            v14 = *((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v14 & 0xFFFF000000000000 | v13;
            v15 = v14 & 0xFFFFFFFFFFFFLL;
            if ((v14 & 0xFFFFFFFFFFFFLL) != 0)
            {
              do
              {
                v16 = __ldaxr((unsigned int *)v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, (unsigned int *)v15));
              if (!v17)
              {
                atomic_store(1u, (unsigned int *)v15);
                v38 = *(unsigned int *)(v15 + 28);
                if ((_DWORD)v38)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v38));
                v39 = *(WTF **)(v15 + 16);
                if (v39)
                {
                  *(_QWORD *)(v15 + 16) = 0;
                  *(_DWORD *)(v15 + 24) = 0;
                  WTF::fastFree(v39, a2);
                }
                WTF::fastFree((WTF *)v15, a2);
              }
            }
          }
          v18 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
          do
            v19 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v19 + 1, (unsigned int *)v18));
          v20 = *(_QWORD *)(v6 + 80);
          if (v20)
          {
            while ((*(_WORD *)(v20 + 28) & 0x20) == 0)
            {
              v20 = *(_QWORD *)(v20 + 56);
              if (!v20)
                goto LABEL_48;
            }
            v28 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
            v29 = *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24);
            if (v29 != v28)
            {
LABEL_43:
              if (v29 != *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
                && v29 != *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
              {
                while (1)
                {
                  v20 = *(_QWORD *)(v20 + 56);
                  if (!v20)
                    break;
                  if ((*(_WORD *)(v20 + 28) & 0x20) != 0)
                  {
                    v29 = *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24);
                    if (v29 != v28)
                      goto LABEL_43;
                    break;
                  }
                }
              }
            }
          }
LABEL_48:
          if ((WebCore::SVGFELightElement *)v20 == this)
            WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged((WebCore::SVGFilterPrimitiveStandardAttributes *)v6, (const WebCore::QualifiedName *)a2);
          result = (unsigned int *)WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v18 + 8), a2);
          do
          {
            v30 = __ldaxr((unsigned int *)v18);
            v31 = --v30 == 0;
          }
          while (__stlxr(v30, (unsigned int *)v18));
LABEL_63:
          if (v31)
          {
            atomic_store(1u, (unsigned int *)v18);
            v35 = (WTF::StringImpl **)(v18 + 16);
            v36 = *(unsigned int *)(v18 + 28);
            if ((_DWORD)v36)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*v35, (WTF::StringImpl *)((char *)*v35 + 32 * v36));
            v37 = *(WTF **)(v18 + 16);
            if (v37)
            {
              *v35 = 0;
              *(_DWORD *)(v18 + 24) = 0;
              WTF::fastFree(v37, a2);
            }
            result = (unsigned int *)WTF::fastFree((WTF *)v18, a2);
          }
          goto LABEL_64;
        }
        if (v12 == *(_QWORD *)(WebCore::SVGNames::feSpecularLightingTag + 24))
        {
          if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
          {
            v21 = WTF::fastCompactMalloc((WTF *)0x28);
            *(_DWORD *)v21 = 1;
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)(v21 + 24) = 0;
            *(_QWORD *)(v21 + 8) = this;
            *(_BYTE *)(v21 + 32) = 0;
            v22 = *((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v22 & 0xFFFF000000000000 | v21;
            v23 = v22 & 0xFFFFFFFFFFFFLL;
            if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
            {
              do
              {
                v24 = __ldaxr((unsigned int *)v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, (unsigned int *)v23));
              if (!v25)
              {
                atomic_store(1u, (unsigned int *)v23);
                v40 = *(unsigned int *)(v23 + 28);
                if ((_DWORD)v40)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v40));
                v41 = *(WTF **)(v23 + 16);
                if (v41)
                {
                  *(_QWORD *)(v23 + 16) = 0;
                  *(_DWORD *)(v23 + 24) = 0;
                  WTF::fastFree(v41, a2);
                }
                WTF::fastFree((WTF *)v23, a2);
              }
            }
          }
          v18 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
          do
            v26 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v26 + 1, (unsigned int *)v18));
          v27 = *(_QWORD *)(v6 + 80);
          if (v27)
          {
            while ((*(_WORD *)(v27 + 28) & 0x20) == 0)
            {
              v27 = *(_QWORD *)(v27 + 56);
              if (!v27)
                goto LABEL_59;
            }
            v32 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
            v33 = *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24);
            if (v33 != v32)
            {
LABEL_54:
              if (v33 != *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
                && v33 != *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
              {
                while (1)
                {
                  v27 = *(_QWORD *)(v27 + 56);
                  if (!v27)
                    break;
                  if ((*(_WORD *)(v27 + 28) & 0x20) != 0)
                  {
                    v33 = *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24);
                    if (v33 != v32)
                      goto LABEL_54;
                    break;
                  }
                }
              }
            }
          }
LABEL_59:
          if ((WebCore::SVGFELightElement *)v27 == this)
            WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged((WebCore::SVGFilterPrimitiveStandardAttributes *)v6, (const WebCore::QualifiedName *)a2);
          result = (unsigned int *)WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v18 + 8), a2);
          do
          {
            v34 = __ldaxr((unsigned int *)v18);
            v31 = --v34 == 0;
          }
          while (__stlxr(v34, (unsigned int *)v18));
          goto LABEL_63;
        }
      }
LABEL_64:
      v10 = *(_DWORD *)(v9 + 16);
      goto LABEL_65;
    }
  }
  return result;
}

void WebCore::SVGFELightElement::childrenChanged(WebCore::SVGFilterPrimitiveStandardAttributes *a1, unsigned __int8 *a2)
{
  void *v4;
  WebCore::SVGElement *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v6 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v6)
    goto LABEL_2;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *a2;
  if ((v8 - 2) < 3)
  {
    v9 = *(_QWORD **)(v6 + 224);
    if (!v9)
      goto LABEL_12;
    v10 = 14;
    goto LABEL_19;
  }
  if (v8 == 8 || v8 == 5)
  {
    v9 = *(_QWORD **)(v6 + 224);
    if (v9)
    {
      v10 = 13;
LABEL_19:
      v11 = v6;
      (*(void (**)(void))(*v9 + 8 * v10))();
      v6 = v11;
      v7 = *(_DWORD *)(v11 + 24) - 2;
    }
  }
LABEL_12:
  if (v7)
  {
    *(_DWORD *)(v6 + 24) = v7;
  }
  else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
  }
LABEL_2:
  if (a2[32])
  {
    WebCore::SVGElement::invalidateInstances(a1, v4);
    if (a2[32])
      WebCore::SVGFilterPrimitiveStandardAttributes::invalidateFilterPrimitiveParent(a1, v5);
  }
}

uint64_t WebCore::SVGFEMergeElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E345F5A0;
  v6[14] = (uint64_t)&unk_1E345FB00;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3461400;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v6 = (uint64_t)off_1E345F5A0;
  v6[14] = (uint64_t)&unk_1E345FB00;
  *a3 = v6;
  return result;
}

_QWORD *WebCore::SVGFEMergeElement::childrenChanged(WebCore::SVGElement *a1, unsigned __int8 *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  _QWORD *result;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;

  WebCore::SVGFilterPrimitiveStandardAttributes::childrenChanged(a1, a2);
  if ((*((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = a1;
    *(_BYTE *)(v4 + 32) = 0;
    v5 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v5 & 0xFFFF000000000000 | v4;
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v6);
        v18 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v18)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v18));
        v19 = *(WTF **)(v6 + 16);
        if (v19)
        {
          *(_QWORD *)(v6 + 16) = 0;
          *(_DWORD *)(v6 + 24) = 0;
          WTF::fastFree(v19, v3);
        }
        WTF::fastFree((WTF *)v6, v3);
      }
    }
  }
  v9 = *((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFLL;
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(a1, (WebCore::SVGElement *)v3);
  result = WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v9 + 8), v11);
  do
  {
    v14 = __ldaxr((unsigned int *)v9);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v9));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v9);
    v16 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v16)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v16));
    v17 = *(WTF **)(v9 + 16);
    if (v17)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v17, v13);
    }
    return (_QWORD *)WTF::fastFree((WTF *)v9, v13);
  }
  return result;
}

WTF::StringImpl *WebCore::SVGFEMergeElement::filterEffectInputsNames@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 0x20) == 0
         || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::feMergeNodeTag + 24))
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return this;
    }
    while (1)
    {
      v16 = *(_QWORD *)(v3 + 176);
      v17 = *(_QWORD *)(v16 + 24);
      if (v17 && *(_DWORD *)(v17 - 12))
      {
        v5 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v5)
        {
          v6 = 8 * v5;
          v7 = *(uint64_t **)(v16 + 24);
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            ++v7;
            v6 -= 8;
            if (!v6)
              goto LABEL_36;
          }
        }
        else
        {
          v7 = *(uint64_t **)(v16 + 24);
        }
        v13 = (uint64_t *)(v17 + 8 * v5);
        if (v7 != v13)
        {
          v14 = *v7;
LABEL_29:
          if (*(_QWORD *)(v14 + 8))
          {
            v15 = v16 + 48;
            goto LABEL_37;
          }
          while (++v7 != v13)
          {
            v14 = *v7;
            if ((unint64_t)(*v7 + 1) > 1)
            {
              if (v7 != v13)
                goto LABEL_29;
              break;
            }
          }
        }
      }
LABEL_36:
      v15 = v16 + 40;
LABEL_37:
      v10 = *(WTF::StringImpl **)(*(_QWORD *)v15 + 32);
      if (v10)
      {
        *(_DWORD *)v10 += 2;
        v20 = v10;
        v18 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v18 != *(_DWORD *)(a3 + 8))
        {
          v8 = *(_QWORD *)a3;
          v20 = 0;
          v21 = v10;
          if ((*((_BYTE *)v10 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v9 = v21;
            v10 = v22;
            v21 = 0;
            v22 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
              {
                v19 = v10;
                WTF::StringImpl::destroy(v9, a2);
                v10 = v19;
              }
              else
              {
                *(_DWORD *)v9 -= 2;
              }
            }
          }
          v11 = (WTF::StringImpl **)(v8 + 8 * v18);
          LODWORD(v12) = *(_DWORD *)(a3 + 12);
          goto LABEL_20;
        }
      }
      else
      {
        v20 = 0;
        v12 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v12 != *(_DWORD *)(a3 + 8))
        {
          v10 = 0;
          v11 = (WTF::StringImpl **)(*(_QWORD *)a3 + 8 * v12);
LABEL_20:
          *v11 = v10;
          *(_DWORD *)(a3 + 12) = v12 + 1;
          goto LABEL_40;
        }
      }
      WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a3, &v20);
LABEL_40:
      this = v20;
      v20 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return this;
      while ((*(_WORD *)(v3 + 28) & 0x20) == 0
           || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::feMergeNodeTag + 24))
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          return this;
      }
    }
  }
  return this;
}

void WebCore::SVGFEMergeElement::createFilterEffect(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3;
  unint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char **v9;
  char *v10;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v5 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v7 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FEMerge::create(v3, (const void **)&v7, (uint64_t *)&v10);
    v6 = (uint64_t)v10;
    CFRelease(v5);
  }
  else
  {
    WebCore::FEMerge::create(v3, (const void **)&v7, (uint64_t *)&v10);
    v6 = (uint64_t)v10;
  }
  *a2 = v6;
}

void WebCore::SVGFEMergeNodeElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  char *v13;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E345FB38;
  v6[14] = &unk_1E3460068;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3461470;
  *((_QWORD *)v7 + 1) = v6;
  v13 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v13, 0);
  if (v13)
    (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  *v6 = off_1E345FB38;
  v6[14] = &unk_1E3460068;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)v8 = &off_1E3452E28;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_WORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = &off_1E3452EA8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)v8 = off_1E347BDB8;
  v6[22] = v8;
  v10 = atomic_load(&WebCore::SVGFEMergeNodeElement::SVGFEMergeNodeElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v10 != -1)
  {
    v13 = &v11;
    v12 = (uint64_t *)&v13;
    std::__call_once(&WebCore::SVGFEMergeNodeElement::SVGFEMergeNodeElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEMergeNodeElement::SVGFEMergeNodeElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEMergeNodeElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (*(_QWORD *)a2 == WebCore::SVGNames::inAttr)
  {
    v11 = *(_QWORD *)(a1 + 176);
    v12 = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v11 + 8) = v12 + 1;
    v13 = *(_QWORD *)(v11 + 40);
    v14 = *a4;
    if (*a4)
      *(_DWORD *)v14 += 2;
    v15 = *(WTF::StringImpl **)(v13 + 32);
    *(_QWORD *)(v13 + 32) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, a2);
        v12 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) != 1)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (v12)
    {
LABEL_8:
      *(_DWORD *)(v11 + 8) = v12;
      return WebCore::SVGElement::attributeChanged(a1, a2, a3, a4, a5, a6);
    }
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return WebCore::SVGElement::attributeChanged(a1, a2, a3, a4, a5, a6);
}

WTF::StringImpl *WebCore::SVGFEMergeNodeElement::svgAttributeChanged(WebCore::SVGFEMergeNodeElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  WTF::StringImpl *result;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  if ((byte_1ECE855B8 & 1) != 0)
  {
    v4 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE855B0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v5 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
    return WebCore::SVGElement::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 8) = this;
    *(_BYTE *)(v6 + 32) = 0;
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v6;
    v8 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v20 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v20)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v20));
        v21 = *(WTF **)(v8 + 16);
        if (v21)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v21, a2);
        }
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  WebCore::SVGFilterPrimitiveStandardAttributes::invalidateFilterPrimitiveParent(this, (WebCore::SVGElement *)a2);
  result = (WTF::StringImpl *)WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v13);
  do
  {
    v16 = __ldaxr((unsigned int *)v11);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v11));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v11);
    v18 = *(unsigned int *)(v11 + 28);
    if ((_DWORD)v18)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
    v19 = *(WTF **)(v11 + 16);
    if (v19)
    {
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v19, v15);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v11, v15);
  }
  return result;
}

void WebCore::SVGFEGaussianBlurElement::~SVGFEGaussianBlurElement(WebCore::SVGFEGaussianBlurElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

_QWORD *WebCore::SVGFEGaussianBlurElement::filterEffectInputsNames@<X0>(WebCore::SVGFEGaussianBlurElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14[5];
  uint64_t *v15[5];

  v3 = *((_QWORD *)this + 28);
  v5 = (uint64_t *)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4
    && *(_DWORD *)(v4 - 12)
    && (v13 = *((_QWORD *)this + 28),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v5, v15),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v5, (uint64_t **)v14), v3 = v13, v15[1] != (uint64_t *)v14[1]))
  {
    v6 = v13 + 48;
  }
  else
  {
    v6 = v3 + 40;
  }
  v7 = *(uint64_t **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v14[0] = (WTF::StringImpl *)v7;
    if ((v7[2] & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v12 = v14[0];
      v7 = v15[0];
      v15[0] = 0;
      v14[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v7)
  {
    v10 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *result = v7;
    *(_DWORD *)(a2 + 12) = 1;
    if (v10)
      *(_DWORD *)v7 = v10;
    else
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEGaussianBlurElement::~SVGFEGaussianBlurElement(WebCore::SVGFEGaussianBlurElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEGaussianBlurElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEGaussianBlurElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

void WebCore::SVGFEMergeElement::~SVGFEMergeElement(WebCore::SVGFEMergeElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGFEMergeElement::~SVGFEMergeElement(WebCore::SVGFEMergeElement *this, void *a2)
{
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEMergeElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEMergeElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEMergeNodeElement::~SVGFEMergeNodeElement(WebCore::SVGFEMergeNodeElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGElement::~SVGElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::SVGFEMergeNodeElement::rendererIsNeeded(WebCore::SVGFEMergeNodeElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGFEMergeNodeElement::~SVGFEMergeNodeElement(WebCore::SVGFEMergeNodeElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGElement::~SVGElement((WebCore::SVGFEMergeNodeElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGElement::~SVGElement((WebCore::SVGFEMergeNodeElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::SVGFEFuncBElement::~SVGFEFuncBElement(WebCore::SVGFEFuncBElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFEFuncBElement::channel(WebCore::SVGFEFuncBElement *this)
{
  return 2;
}

void `non-virtual thunk to'WebCore::SVGFEFuncBElement::~SVGFEFuncBElement(WebCore::SVGFEFuncBElement *this, void *a2)
{
  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncBElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncBElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEFuncGElement::~SVGFEFuncGElement(WebCore::SVGFEFuncGElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFEFuncGElement::channel(WebCore::SVGFEFuncGElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::SVGFEFuncGElement::~SVGFEFuncGElement(WebCore::SVGFEFuncGElement *this, void *a2)
{
  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncGElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncGElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFEFuncRElement::~SVGFEFuncRElement(WebCore::SVGFEFuncRElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFEFuncRElement::channel(WebCore::SVGFEFuncRElement *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::SVGFEFuncRElement::~SVGFEFuncRElement(WebCore::SVGFEFuncRElement *this, void *a2)
{
  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncRElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGComponentTransferFunctionElement::~SVGComponentTransferFunctionElement((WebCore::SVGFEFuncRElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t *WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  *a1 = (uint64_t)off_1E345E9B0;
  a1[14] = (uint64_t)&unk_1E345EF10;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34610F0;
  *((_QWORD *)v6 + 1) = a1;
  v12 = v6;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(a1, a2, a3, (uint64_t *)&v12);
  v7 = (uint64_t)v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = (uint64_t)off_1E345E9B0;
  a1[14] = (uint64_t)&unk_1E345EF10;
  WebCore::SVGAnimatedString::create((WebCore::SVGAnimatedString *)a1, a1 + 28);
  WebCore::SVGAnimatedPrimitiveProperty<float>::create((uint64_t)a1, a1 + 29);
  WebCore::SVGAnimatedPrimitiveProperty<float>::create((uint64_t)a1, a1 + 30);
  LOBYTE(v12) = 3;
  WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::EdgeModeType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>((uint64_t)a1, &v12, a1 + 31);
  v8 = atomic_load(&WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v8 != -1)
  {
    v11 = &v12;
    v12 = &v10;
    std::__call_once(&WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85540 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)_MergedGlobals_272;
  if (!_MergedGlobals_272)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(_MergedGlobals_272 - 4);
  v4 = _MergedGlobals_272 + 16 * v3;
  if (!*(_DWORD *)(_MergedGlobals_272 - 12))
  {
    v13 = _MergedGlobals_272 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = _MergedGlobals_272;
    if (!_MergedGlobals_272)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (_MergedGlobals_272)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_272 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (_MergedGlobals_272)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = _MergedGlobals_272 + v14;
    if (_MergedGlobals_272)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85540 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_272;
  if (!_MergedGlobals_272)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(_MergedGlobals_272 - 4);
  v9 = _MergedGlobals_272 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_272 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_272 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (!_MergedGlobals_272)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (_MergedGlobals_272)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_272 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_272)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_272 + v18);
    if (_MergedGlobals_272)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85540 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_272;
  if (!_MergedGlobals_272)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(_MergedGlobals_272 - 4);
  v9 = _MergedGlobals_272 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_272 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_272 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (!_MergedGlobals_272)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (_MergedGlobals_272)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_272 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_272)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_272 + v18);
    if (_MergedGlobals_272)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4[2];

  *a3 = 0;
  a3[8] = 0;
  v4[0] = a1;
  v4[1] = (uint64_t)a3;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_24SVGFEGaussianBlurElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(a2, v4);
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85540 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)_MergedGlobals_272;
  if (!_MergedGlobals_272)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(_MergedGlobals_272 - 4);
  v6 = _MergedGlobals_272 + 16 * v5;
  if (!*(_DWORD *)(_MergedGlobals_272 - 12))
  {
    v15 = _MergedGlobals_272 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = _MergedGlobals_272;
    if (!_MergedGlobals_272)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)_MergedGlobals_272;
    if (_MergedGlobals_272)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_272 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (_MergedGlobals_272)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = _MergedGlobals_272 + v16;
    if (_MergedGlobals_272)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_16:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85550 & 1) == 0)
  {
    v12 = WebCore::SVGNames::cxAttr;
    v13 = WebCore::SVGNames::cyAttr;
    v14 = WebCore::SVGNames::rAttr;
    v15 = WebCore::SVGNames::rxAttr;
    v16 = WebCore::SVGNames::ryAttr;
    v17 = WebCore::SVGNames::heightAttr;
    v18 = WebCore::SVGNames::widthAttr;
    v19 = WebCore::SVGNames::xAttr;
    v20[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85548 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v12, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v13, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v14, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v15, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v16, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v17, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v18, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, &v19, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85548, v20, (uint64_t)v11);
    byte_1ECE85550 = 1;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 4))(result);
    if ((_DWORD)result)
    {
      if (qword_1ECE85548)
      {
        v4 = *(_DWORD *)(qword_1ECE85548 - 8);
        v5 = ~(*a2 << 32) + *a2;
        v6 = 9
           * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(_QWORD *)(qword_1ECE85548 + 8 * v8);
        if (v9 == *a2)
        {
          return (WTF::StringImpl **)1;
        }
        else
        {
          v10 = 1;
          do
          {
            result = (WTF::StringImpl **)(v9 != 0);
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(_QWORD *)(qword_1ECE85548 + 8 * v8);
            ++v10;
          }
          while (v9 != *a2);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *result;
  char *v15;
  uint64_t v16;

  *a7 = 0;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result
    || (result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2)) != 0)
  {
LABEL_3:
    result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(&v16, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
    *a7 = v16;
    return result;
  }
  {
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_16:
      result = 0;
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v15)
      v15 += 16 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      goto LABEL_3;
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  uint64_t v2;

  if ((byte_1ECE85540 & 1) == 0)
  {
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if ((byte_1ECE85540 & 1) != 0)
  {
    v2 = _MergedGlobals_272;
    if (_MergedGlobals_272)
      v2 = _MergedGlobals_272 + 16 * *(unsigned int *)(_MergedGlobals_272 - 4);
  }
  else
  {
    v2 = 0;
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
  }
  if ((WTF::StringImpl ***)v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  WTF::StringImpl ***result;

  if (!_MergedGlobals_272)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if (result)
    return result;
  if (!_MergedGlobals_272)
    return 0;
  return (WTF::StringImpl ***)(_MergedGlobals_272 + 16 * *(unsigned int *)(_MergedGlobals_272 - 4));
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  int v5;
  WTF::StringImpl **i;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  v1 = _MergedGlobals_272;
  if (_MergedGlobals_272)
  {
    v3 = *(_DWORD *)(_MergedGlobals_272 - 8);
    v4 = WebCore::SVGAttributeHashTranslator::hash(a1);
    v5 = 0;
    for (i = (WTF::StringImpl **)WebCore::nullName; ; i = (WTF::StringImpl **)v11)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (i)
      {
        v9 = (*(_DWORD *)i)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)i = v9;
          v11 = (uint64_t)i;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(i);
          WTF::fastFree(v15, v16);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == i)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *(WTF::StringImpl **)(v13 + 24) && v12[4] == *(WTF::StringImpl **)(v13 + 32))
        {
          return v8;
        }
      }
      v4 = ++v5 + v7;
    }
  }
  return 0;
}

WTF::StringImpl *_ZN7WebCore24SVGPropertyOwnerRegistryINS_24SVGFEGaussianBlurElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a1);
  if (Accessor)
    return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(a2, (uint64_t)Accessor);
  else
    return (WTF::StringImpl *)_ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE25lookupRecursivelyAndApplyIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS9_RKSA_(a1, a2);
}

WTF::Thread *WebCore::SVGFEGaussianBlurElement::SVGFEGaussianBlurElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEGaussianBlurElement::m_in1>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::stdDeviationAttr,&WebCore::SVGFEGaussianBlurElement::m_stdDeviationX,&WebCore::SVGFEGaussianBlurElement::m_stdDeviationY>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::edgeModeAttr,WebCore::EdgeModeType,&WebCore::SVGFEGaussianBlurElement::m_edgeMode>();
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEGaussianBlurElement::m_in1>()
{
  if ((byte_1ECE85558 & 1) == 0)
  {
    qword_1ECE85648 = (uint64_t)off_1E3461160;
    unk_1ECE85650 = 224;
    byte_1ECE85558 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::inAttr, (uint64_t)&qword_1ECE85648);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::stdDeviationAttr,&WebCore::SVGFEGaussianBlurElement::m_stdDeviationX,&WebCore::SVGFEGaussianBlurElement::m_stdDeviationY>()
{
  if ((byte_1ECE85560 & 1) == 0)
  {
    qword_1ECE85740 = (uint64_t)off_1E3461230;
    unk_1ECE85748 = 240;
    qword_1ECE85730 = (uint64_t)off_1E3461230;
    unk_1ECE85738 = 232;
    qword_1ECE85728 = (uint64_t)off_1E34611C8;
    byte_1ECE85560 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::stdDeviationAttr, (uint64_t)&qword_1ECE85728);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::edgeModeAttr,WebCore::EdgeModeType,&WebCore::SVGFEGaussianBlurElement::m_edgeMode>()
{
  if ((byte_1ECE85568 & 1) == 0)
  {
    qword_1ECE85658 = (uint64_t)off_1E3461298;
    unk_1ECE85660 = 248;
    byte_1ECE85568 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::edgeModeAttr, (uint64_t)&qword_1ECE85658);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEGaussianBlurElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE85540 & 1) == 0)
  {
    _MergedGlobals_272 = 0;
    byte_1ECE85540 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>((uint64_t)&v3, a1, &v4);
}

WTF::Thread *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::Thread *v9;
  WTF::Thread *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = _MergedGlobals_272;
  if (_MergedGlobals_272
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = _MergedGlobals_272) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (WTF::Thread *)(v6 + 16 * v8);
  result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == -1)
      {
        v18 = (uint64_t *)v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == *a2
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v21 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v21 + 32))
        {
          if (_MergedGlobals_272)
            v23 = *(unsigned int *)(_MergedGlobals_272 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = _MergedGlobals_272 + 16 * v23;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (WTF::Thread *)(v6 + 16 * v8);
      result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(_MergedGlobals_272 - 16);
      v9 = (WTF::Thread *)v18;
    }
  }
  result = (WTF::Thread *)WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  *((_QWORD *)v9 + 1) = *a3;
  if (_MergedGlobals_272)
    v11 = *(_DWORD *)(_MergedGlobals_272 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(_MergedGlobals_272 - 12) = v11;
  v12 = _MergedGlobals_272;
  if (_MergedGlobals_272)
    v13 = *(_DWORD *)(_MergedGlobals_272 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(_MergedGlobals_272 - 16) + v13);
  v15 = *(unsigned int *)(_MergedGlobals_272 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_11;
LABEL_27:
    result = (WTF::Thread *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = result;
    v12 = _MergedGlobals_272;
    if (_MergedGlobals_272)
      v15 = *(unsigned int *)(_MergedGlobals_272 - 4);
    else
      v15 = 0;
    goto LABEL_11;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_27;
LABEL_11:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_12:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (_MergedGlobals_272 && (v2 = *(_DWORD *)(_MergedGlobals_272 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(_MergedGlobals_272 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = _MergedGlobals_272;
  if (_MergedGlobals_272)
  {
    LODWORD(v5) = *(_DWORD *)(_MergedGlobals_272 - 4);
    v6 = *(_DWORD *)(_MergedGlobals_272 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  _MergedGlobals_272 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(_MergedGlobals_272 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>((WTF::Thread *)v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((uint64_t *)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v9;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl **v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  WTF *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v2 = *a1;
  v3 = _MergedGlobals_272;
  if (_MergedGlobals_272)
    v4 = *(_DWORD *)(_MergedGlobals_272 - 8);
  else
    v4 = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = *(_QWORD *)(v2 + 32);
    v25 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v26 = v25 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v27 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v26 + (v25 >> 11)) << 16) ^ (v26 + (v25 >> 11));
    v28 = (v23 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v23 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v23 + (v27 >> 11));
    v29 = (v23 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v23) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v23) + (v28 >> 11));
    v30 = (v24 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v24 + (v29 >> 11)) << 16) ^ (v29 + (unsigned __int16)v24 + (v29 >> 11));
    v31 = (v24 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v24) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v24) + (v30 >> 11));
    v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
    v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
    v34 = (v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10);
    if (v34)
      v5 = v34;
    else
      v5 = 0x800000;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 4);
    if (!v5)
    {
      v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v2);
      *(_DWORD *)(v2 + 4) = v5;
    }
  }
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    do
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v3 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v14, v15);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      v5 = ++v7 + v8;
      v13 = v11 == v6;
      v6 = (WTF::StringImpl **)v12;
    }
    while (!v13);
    v16 = *v9;
    *v9 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = v5 & v4;
      v5 = ++v17 + v18;
    }
    while (*(_QWORD *)(v3 + 16 * v18));
    v9 = (WTF::StringImpl ***)(v3 + 16 * v18);
    *v9 = 0;
  }
  v19 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v9 = v19;
  return v9;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEGaussianBlurElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEGaussianBlurElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEGaussianBlurElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEGaussianBlurElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEGaussianBlurElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEGaussianBlurElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEGaussianBlurElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::EdgeModeType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E345E960;
  *(_QWORD *)result = &off_1E345E890;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEGaussianBlurElement,WebCore::EdgeModeType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  int v18;
  WTF::StringImpl **v19;
  WTF *v21;
  void *v22;
  WTF::StringImpl ***v23;
  uint64_t v24;
  WTF::StringImpl ***v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF *v32;
  void *v33;
  WTF::StringImpl ***v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl **v38;
  int v39;
  WTF::StringImpl **v40;
  WTF *v42;
  void *v43;
  WTF::StringImpl ***v44;
  uint64_t v45;
  WTF::StringImpl ***v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl ***v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl ***v65;
  uint64_t v66;
  WTF::StringImpl ***v67;
  uint64_t v68;
  WTF::StringImpl ***v69;
  char *v70;

  v1 = result;
  if ((byte_1ECE85578 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
LABEL_21:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_32;
    goto LABEL_31;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85570;
  if (!qword_1ECE85570)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_21;
  }
  v3 = *(unsigned int *)(qword_1ECE85570 - 4);
  v4 = qword_1ECE85570 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85570 - 12))
  {
    v13 = qword_1ECE85570 + 16 * v3;
    goto LABEL_21;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_32;
LABEL_31:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_32;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 16 * v3;
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85570;
    if (qword_1ECE85570)
      goto LABEL_31;
  }
  else
  {
    v14 = 0;
    v15 = 16 * v3;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85570 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v15 == v14)
      {
        v13 = v4;
        if (qword_1ECE85570)
          goto LABEL_31;
        goto LABEL_32;
      }
    }
    v13 = qword_1ECE85570 + v14;
    if (qword_1ECE85570)
      goto LABEL_31;
  }
LABEL_32:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v16 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v16 != (WTF::StringImpl ***)v4)
    {
      v17 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_35:
        v18 = (*(_DWORD *)v17)++;
        v19 = *v16;
        if (v18)
        {
          *(_DWORD *)v17 = v18;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
          result = WTF::fastFree(v21, v22);
        }
        while (v19 == v17 || (WTF::StringImpl **)((char *)*v16 + 1) == 0)
        {
          v16 += 2;
          if (v16 == (WTF::StringImpl ***)v4)
            goto LABEL_48;
          v17 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_35;
          v19 = *v16;
        }
      }
      else
      {
        while ((unint64_t)*v16 + 1 <= 1)
        {
          v16 += 2;
          if (v16 == (WTF::StringImpl ***)v4)
          {
LABEL_48:
            v13 = v4;
            goto LABEL_50;
          }
        }
      }
      v13 = (uint64_t)v16;
    }
LABEL_50:
    ;
  }
  {
    v23 = 0;
    v34 = 0;
    v24 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_73:
    v25 = &v23[2 * v24];
    if (!v23)
      goto LABEL_82;
LABEL_81:
    v23 += 2 * *((unsigned int *)v23 - 1);
    goto LABEL_82;
  }
  v23 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v34 = 0;
    v24 = 0;
    goto LABEL_73;
  }
  v24 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v25 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v24);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v24);
    goto LABEL_73;
  }
  if (!(_DWORD)v24)
  {
    v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_82;
    goto LABEL_81;
  }
  v26 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v27 = 16 * v24;
    while (1)
    {
      if (v26)
      {
        v28 = (*(_DWORD *)v26)++;
        v29 = *v23;
        if (v28)
        {
          *(_DWORD *)v26 = v28;
          v30 = (uint64_t)v26;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v26);
          result = WTF::fastFree(v32, v33);
          v30 = WebCore::nullName;
        }
      }
      else
      {
        v30 = 0;
        v29 = *v23;
      }
      if (v29 != v26 && (WTF::StringImpl **)((char *)*v23 + 1) != 0)
        break;
      v23 += 2;
      v26 = (WTF::StringImpl **)v30;
      v27 -= 16;
      if (!v27)
      {
        v23 = v25;
        break;
      }
    }
    v34 = v23;
    v23 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_81;
  }
  else
  {
    v35 = 0;
    v36 = 16 * v24;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v35)
                             + 1) <= 1)
    {
      v35 += 16;
      if (v36 == v35)
      {
        v34 = v25;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_81;
        goto LABEL_82;
      }
    }
    v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v35);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_81;
  }
LABEL_82:
  while (v34 != v23)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v34[1] + 2))(v34[1], *(_QWORD *)(v1 + 8));
    v37 = v34 + 2;
    v34 = v25;
    if (v37 != v25)
    {
      v38 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_85:
        v39 = (*(_DWORD *)v38)++;
        v40 = *v37;
        if (v39)
        {
          *(_DWORD *)v38 = v39;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v38);
          result = WTF::fastFree(v42, v43);
        }
        while (v40 == v38 || (WTF::StringImpl **)((char *)*v37 + 1) == 0)
        {
          v37 += 2;
          if (v37 == v25)
            goto LABEL_98;
          v38 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_85;
          v40 = *v37;
        }
      }
      else
      {
        while ((unint64_t)*v37 + 1 <= 1)
        {
          v37 += 2;
          if (v37 == v25)
          {
LABEL_98:
            v34 = v25;
            goto LABEL_100;
          }
        }
      }
      v34 = v37;
    }
LABEL_100:
    ;
  }
  {
    v44 = 0;
    v57 = 0;
    v45 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_176;
  }
  v44 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v57 = 0;
    v45 = 0;
LABEL_176:
    v46 = &v44[2 * v45];
    goto LABEL_124;
  }
  v45 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v46 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v45);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v57 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v45);
    goto LABEL_176;
  }
  if ((_DWORD)v45)
  {
    v47 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v48 = 16 * v45;
      while (1)
      {
        if (v47)
        {
          v49 = (*(_DWORD *)v47)++;
          v50 = *v44;
          if (v49)
          {
            *(_DWORD *)v47 = v49;
            v51 = (uint64_t)v47;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v47);
            result = WTF::fastFree(v53, v54);
            v51 = WebCore::nullName;
          }
        }
        else
        {
          v51 = 0;
          v50 = *v44;
        }
        if (v50 != v47 && (WTF::StringImpl **)((char *)*v44 + 1) != 0)
          break;
        v44 += 2;
        v47 = (WTF::StringImpl **)v51;
        v48 -= 16;
        if (!v48)
        {
          v44 = v46;
          break;
        }
      }
      v57 = v44;
      v44 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v55 = 0;
      v56 = 16 * v45;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v55)
                               + 1) <= 1)
      {
        v55 += 16;
        if (v56 == v55)
        {
          v57 = v46;
          goto LABEL_124;
        }
      }
      v57 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v55);
    }
  }
  else
  {
    v57 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_124:
  if (v44)
    v44 += 2 * *((unsigned int *)v44 - 1);
  while (v57 != v44)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v57[1] + 2))(v57[1], *(_QWORD *)(v1 + 8));
    v58 = v57 + 2;
    v57 = v46;
    if (v58 != v46)
    {
      v59 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_129:
        v60 = (*(_DWORD *)v59)++;
        v61 = *v58;
        if (v60)
        {
          *(_DWORD *)v59 = v60;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
          result = WTF::fastFree(v63, v64);
        }
        while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
        {
          v58 += 2;
          if (v58 == v46)
            goto LABEL_142;
          v59 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_129;
          v61 = *v58;
        }
      }
      else
      {
        while ((unint64_t)*v58 + 1 <= 1)
        {
          v58 += 2;
          if (v58 == v46)
          {
LABEL_142:
            v57 = v46;
            goto LABEL_144;
          }
        }
      }
      v57 = v58;
    }
LABEL_144:
    ;
  }
  {
    v65 = 0;
    v69 = 0;
    v66 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_174;
  }
  v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v69 = 0;
    v66 = 0;
LABEL_174:
    v67 = &v65[2 * v66];
    goto LABEL_155;
  }
  v66 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v67 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v66);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v66);
    goto LABEL_174;
  }
  if ((_DWORD)v66)
  {
    v68 = 16 * v66;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v65);
      if ((result & 1) == 0 && *v65 != (WTF::StringImpl **)-1)
        break;
      v65 += 2;
      v68 -= 16;
      if (!v68)
      {
        v65 = v67;
        break;
      }
    }
    v69 = v65;
    v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_155:
  if (v65)
    v65 += 2 * *((unsigned int *)v65 - 1);
  while (v69 != v65)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v69[1] + 2))(v69[1], *(_QWORD *)(v1 + 8) + 224);
    v70 = (char *)(v69 + 2);
    v69 = v67;
    if (v70 != (char *)v67)
    {
      v69 = (WTF::StringImpl ***)v70;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v69);
        if ((result & 1) == 0 && *v69 != (WTF::StringImpl **)-1)
          break;
        v69 += 2;
        if (v69 == v67)
        {
          v69 = v67;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl ***v66;
  uint64_t v67;
  WTF::StringImpl ***v68;
  uint64_t v69;
  char *v70;
  WTF::StringImpl **v71;
  WTF *v72;
  void *v73;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE85578 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85570;
  if (!qword_1ECE85570)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85570 - 4);
  v9 = qword_1ECE85570 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85570 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85570;
    if (qword_1ECE85570)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85570 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85570)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85570 + v18);
    if (qword_1ECE85570)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_84;
LABEL_83:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_84;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_75;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_75;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  v31 = 16 * v28;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v38 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v31 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v27)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v39 = v17 + 2;
    v17 = v29;
    if (v39 != v29)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v29)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v29)
          {
LABEL_101:
            v17 = v29;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_188;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_188:
    v48 = &v46[2 * v47];
    goto LABEL_127;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_188;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v50 = 16 * v47;
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      v58 = 16 * v47;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v58 == v57)
        {
          v17 = v48;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v17 != v46)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v59 = v17 + 2;
    v17 = v48;
    if (v59 != v48)
    {
      v60 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_133:
        v61 = (*(_DWORD *)v60)++;
        v62 = *v59;
        if (v61)
        {
          *(_DWORD *)v60 = v61;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
          result = WTF::fastFree(v64, v65);
        }
        while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
        {
          v59 += 2;
          if (v59 == v48)
            goto LABEL_146;
          v60 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_133;
          v62 = *v59;
        }
      }
      else
      {
        while ((unint64_t)*v59 + 1 <= 1)
        {
          v59 += 2;
          if (v59 == v48)
          {
LABEL_146:
            v17 = v48;
            goto LABEL_148;
          }
        }
      }
      v17 = v59;
    }
LABEL_148:
    ;
  }
  {
    v66 = 0;
    v17 = 0;
    v67 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_186;
  }
  v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v67 = 0;
LABEL_186:
    v68 = &v66[2 * v67];
    goto LABEL_159;
  }
  v67 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v68 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v67);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v67);
    goto LABEL_186;
  }
  if ((_DWORD)v67)
  {
    v69 = 16 * v67;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v66);
      if ((result & 1) == 0 && *v66 != (WTF::StringImpl **)-1)
        break;
      v66 += 2;
      v69 -= 16;
      if (!v69)
      {
        v66 = v68;
        break;
      }
    }
    v17 = v66;
    v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_159:
  if (v66)
    v66 += 2 * *((unsigned int *)v66 - 1);
  if (v66 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 224, a2);
      if ((_DWORD)result)
        break;
      v70 = (char *)(v17 + 2);
      v17 = v68;
      if (v70 != (char *)v68)
      {
        v17 = (WTF::StringImpl ***)v70;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v68)
          {
            v17 = v68;
            break;
          }
        }
      }
      if (v17 == v66)
        return result;
    }
LABEL_171:
    v71 = *v17;
    if (*v17)
      ++*(_DWORD *)v71;
    result = *a3;
    *a3 = (uint64_t)v71;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v72, v73);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl ***v66;
  uint64_t v67;
  WTF::StringImpl ***v68;
  uint64_t v69;
  char *v70;
  WTF::StringImpl **v71;
  WTF *v72;
  void *v73;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE85578 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85570;
  if (!qword_1ECE85570)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85570 - 4);
  v9 = qword_1ECE85570 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85570 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85570;
    if (qword_1ECE85570)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85570 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85570)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85570 + v18);
    if (qword_1ECE85570)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_84;
LABEL_83:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_84;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_75;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_75;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  v31 = 16 * v28;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v38 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v31 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v27)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v39 = v17 + 2;
    v17 = v29;
    if (v39 != v29)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v29)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v29)
          {
LABEL_101:
            v17 = v29;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_188;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_188:
    v48 = &v46[2 * v47];
    goto LABEL_127;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_188;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v50 = 16 * v47;
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      v58 = 16 * v47;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v58 == v57)
        {
          v17 = v48;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v17 != v46)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_171;
    v59 = v17 + 2;
    v17 = v48;
    if (v59 != v48)
    {
      v60 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_133:
        v61 = (*(_DWORD *)v60)++;
        v62 = *v59;
        if (v61)
        {
          *(_DWORD *)v60 = v61;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
          result = WTF::fastFree(v64, v65);
        }
        while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
        {
          v59 += 2;
          if (v59 == v48)
            goto LABEL_146;
          v60 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_133;
          v62 = *v59;
        }
      }
      else
      {
        while ((unint64_t)*v59 + 1 <= 1)
        {
          v59 += 2;
          if (v59 == v48)
          {
LABEL_146:
            v17 = v48;
            goto LABEL_148;
          }
        }
      }
      v17 = v59;
    }
LABEL_148:
    ;
  }
  {
    v66 = 0;
    v17 = 0;
    v67 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_186;
  }
  v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v67 = 0;
LABEL_186:
    v68 = &v66[2 * v67];
    goto LABEL_159;
  }
  v67 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v68 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v67);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v67);
    goto LABEL_186;
  }
  if ((_DWORD)v67)
  {
    v69 = 16 * v67;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v66);
      if ((result & 1) == 0 && *v66 != (WTF::StringImpl **)-1)
        break;
      v66 += 2;
      v69 -= 16;
      if (!v69)
      {
        v66 = v68;
        break;
      }
    }
    v17 = v66;
    v66 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_159:
  if (v66)
    v66 += 2 * *((unsigned int *)v66 - 1);
  if (v66 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 224, a2);
      if ((_DWORD)result)
        break;
      v70 = (char *)(v17 + 2);
      v17 = v68;
      if (v70 != (char *)v68)
      {
        v17 = (WTF::StringImpl ***)v70;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v68)
          {
            v17 = v68;
            break;
          }
        }
      }
      if (v17 == v66)
        return result;
    }
LABEL_171:
    v71 = *v17;
    if (*v17)
      ++*(_DWORD *)v71;
    result = *a3;
    *a3 = (uint64_t)v71;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v72, v73);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl **v12;

  if ((byte_1ECE85578 & 1) != 0)
  {
    v6 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85570;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85570)
      v7 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_41;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_41:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_13:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_38;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_29;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_38:
      result = 0;
  }
  else
  {
    v12 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_29:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 224;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::synchronize@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE85578 & 1) != 0)
  {
    v4 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE85570;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE85570)
      v5 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a1);
  if (result)
    goto LABEL_13;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_41;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_41:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_13;
  }
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_38;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_29;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_38:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_29:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v10);
      if (v11)
      {
        *(_QWORD *)a2 = v10;
        a2[8] = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  WTF::StringImpl ***v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl ***v41;
  WTF::StringImpl **v42;
  int v43;
  WTF::StringImpl **v44;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***v48;
  uint64_t v49;
  WTF::StringImpl ***v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl ***v61;
  WTF::StringImpl *v62;
  WTF::StringImpl ***v63;
  WTF::StringImpl **v64;
  int v65;
  WTF::StringImpl **v66;
  WTF *v68;
  void *v69;
  WTF::StringImpl ***v70;
  uint64_t v71;
  WTF::StringImpl ***v72;
  uint64_t v73;
  WTF::StringImpl ***v74;
  WTF::StringImpl *v75;
  char *v76;
  _BYTE v77[24];
  WTF::StringImpl *v78;
  char v79;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85578 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
LABEL_21:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_32;
    goto LABEL_31;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85570;
  if (!qword_1ECE85570)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_21;
  }
  v5 = *(unsigned int *)(qword_1ECE85570 - 4);
  v6 = qword_1ECE85570 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85570 - 12))
  {
    v15 = qword_1ECE85570 + 16 * v5;
    goto LABEL_21;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_32;
LABEL_31:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v8 = 16 * v5;
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85570;
    if (qword_1ECE85570)
      goto LABEL_31;
  }
  else
  {
    v16 = 0;
    v17 = 16 * v5;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85570 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v17 == v16)
      {
        v15 = v6;
        if (qword_1ECE85570)
          goto LABEL_31;
        goto LABEL_32;
      }
    }
    v15 = qword_1ECE85570 + v16;
    if (qword_1ECE85570)
      goto LABEL_31;
  }
LABEL_32:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8)
                                                                                                + 64))(&v78, *(_QWORD *)(v15 + 8), *(_QWORD *)(v2 + 8));
    if (v79)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v78, (uint64_t)v77);
      if (v79)
      {
        result = (uint64_t)v78;
        v78 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v19 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v19 != (WTF::StringImpl ***)v6)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_40:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v6)
            goto LABEL_53;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_40;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v6)
          {
LABEL_53:
            v15 = v6;
            goto LABEL_55;
          }
        }
      }
      v15 = (uint64_t)v19;
    }
LABEL_55:
    ;
  }
  {
    v26 = 0;
    v37 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_80:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_89;
LABEL_88:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_89;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v27 = 0;
    goto LABEL_80;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_80;
  }
  if (!(_DWORD)v27)
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_89;
    goto LABEL_88;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v37 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_88;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v37 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_88;
        goto LABEL_89;
      }
    }
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_88;
  }
LABEL_89:
  while (v37 != v26)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1] + 8))(&v78, v37[1], *(_QWORD *)(v2 + 8));
    if (v79)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v78, (uint64_t)v77);
      if (v79)
      {
        result = (uint64_t)v78;
        v78 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v40);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v41 = v37 + 2;
    v37 = v28;
    if (v41 != v28)
    {
      v42 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_97:
        v43 = (*(_DWORD *)v42)++;
        v44 = *v41;
        if (v43)
        {
          *(_DWORD *)v42 = v43;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v42);
          result = WTF::fastFree(v46, v47);
        }
        while (v44 == v42 || (WTF::StringImpl **)((char *)*v41 + 1) == 0)
        {
          v41 += 2;
          if (v41 == v28)
            goto LABEL_110;
          v42 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_97;
          v44 = *v41;
        }
      }
      else
      {
        while ((unint64_t)*v41 + 1 <= 1)
        {
          v41 += 2;
          if (v41 == v28)
          {
LABEL_110:
            v37 = v28;
            goto LABEL_112;
          }
        }
      }
      v37 = v41;
    }
LABEL_112:
    ;
  }
  {
    v48 = 0;
    v61 = 0;
    v49 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_204;
  }
  v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v61 = 0;
    v49 = 0;
LABEL_204:
    v50 = &v48[2 * v49];
    goto LABEL_138;
  }
  v49 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v50 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v49);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v49);
    goto LABEL_204;
  }
  if ((_DWORD)v49)
  {
    v51 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v52 = 16 * v49;
      while (1)
      {
        if (v51)
        {
          v53 = (*(_DWORD *)v51)++;
          v54 = *v48;
          if (v53)
          {
            *(_DWORD *)v51 = v53;
            v55 = (uint64_t)v51;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v51);
            result = WTF::fastFree(v57, v58);
            v55 = WebCore::nullName;
          }
        }
        else
        {
          v55 = 0;
          v54 = *v48;
        }
        if (v54 != v51 && (WTF::StringImpl **)((char *)*v48 + 1) != 0)
          break;
        v48 += 2;
        v51 = (WTF::StringImpl **)v55;
        v52 -= 16;
        if (!v52)
        {
          v48 = v50;
          break;
        }
      }
      v61 = v48;
      v48 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v59 = 0;
      v60 = 16 * v49;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v59)
                               + 1) <= 1)
      {
        v59 += 16;
        if (v60 == v59)
        {
          v61 = v50;
          goto LABEL_138;
        }
      }
      v61 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v59);
    }
  }
  else
  {
    v61 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_138:
  if (v48)
    v48 += 2 * *((unsigned int *)v48 - 1);
  while (v61 != v48)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v61[1] + 8))(&v78, v61[1], *(_QWORD *)(v2 + 8));
    if (v79)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v61, (WTF::StringImpl ***)&v78, (uint64_t)v77);
      if (v79)
      {
        result = (uint64_t)v78;
        v78 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v62);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v63 = v61 + 2;
    v61 = v50;
    if (v63 != v50)
    {
      v64 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_148:
        v65 = (*(_DWORD *)v64)++;
        v66 = *v63;
        if (v65)
        {
          *(_DWORD *)v64 = v65;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v64);
          result = WTF::fastFree(v68, v69);
        }
        while (v66 == v64 || (WTF::StringImpl **)((char *)*v63 + 1) == 0)
        {
          v63 += 2;
          if (v63 == v50)
            goto LABEL_161;
          v64 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_148;
          v66 = *v63;
        }
      }
      else
      {
        while ((unint64_t)*v63 + 1 <= 1)
        {
          v63 += 2;
          if (v63 == v50)
          {
LABEL_161:
            v61 = v50;
            goto LABEL_163;
          }
        }
      }
      v61 = v63;
    }
LABEL_163:
    ;
  }
  {
    v70 = 0;
    v74 = 0;
    v71 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_202;
  }
  v70 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v74 = 0;
    v71 = 0;
LABEL_202:
    v72 = &v70[2 * v71];
    goto LABEL_176;
  }
  v71 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v72 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v71);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v74 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v71);
    goto LABEL_202;
  }
  if ((_DWORD)v71)
  {
    v73 = 16 * v71;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v70);
      if ((result & 1) == 0 && *v70 != (WTF::StringImpl **)-1)
        break;
      v70 += 2;
      v73 -= 16;
      if (!v73)
      {
        v70 = v72;
        break;
      }
    }
    v74 = v70;
    v70 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v74 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_176:
  if (v70)
    v70 += 2 * *((unsigned int *)v70 - 1);
  while (v74 != v70)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v74[1]
                       + 8))(&v78, v74[1], *(_QWORD *)(v2 + 8) + 224);
    if (v79)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v74, (WTF::StringImpl ***)&v78, (uint64_t)v77);
      if (v79)
      {
        result = (uint64_t)v78;
        v78 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v75);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v76 = (char *)(v74 + 2);
    v74 = v72;
    if (v76 != (char *)v72)
    {
      v74 = (WTF::StringImpl ***)v76;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v74);
        if ((result & 1) == 0 && *v74 != (WTF::StringImpl **)-1)
          break;
        v74 += 2;
        if (v74 == v72)
        {
          v74 = v72;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;

  if ((byte_1ECE85578 & 1) != 0)
  {
    v3 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85570;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85570)
      v4 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_40;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_40:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_37;
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v10)
      goto LABEL_28;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_37:
      v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_28:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    Accessor = v10[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85588 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85580 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85580, v22, (uint64_t)v13);
    byte_1ECE85588 = 1;
  }
  if ((byte_1ECE85578 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85570;
  if (!qword_1ECE85570)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85570;
  if (!v4)
  {
    if (qword_1ECE85570)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85580)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85580 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85580 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85580 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::createAnimator@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  uint64_t v10;

  *a2 = 0;
  if ((byte_1ECE85578 & 1) != 0)
  {
    v4 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = qword_1ECE85570;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE85570)
      v5 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a1);
  if (result)
    goto LABEL_13;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_40;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_40:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_13;
  }
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_37;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_29;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_37:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_29:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v10);
      *a2 = v10;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEImageElement,WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGURIReference>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl **v12;

  if ((byte_1ECE85578 & 1) != 0)
  {
    v6 = qword_1ECE85570;
    if (!qword_1ECE85570)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85570;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85570)
      v7 = (WTF::StringImpl ***)(qword_1ECE85570 + 16 * *(unsigned int *)(qword_1ECE85570 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
LABEL_7:
  if ((byte_1ECE85578 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_41;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_41:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_13:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_38;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v12 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_29;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_38:
      result = 0;
  }
  else
  {
    v12 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_29:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 224;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85570;
  if (!qword_1ECE85570)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85570 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

unsigned int *WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::commitPropertyChange(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *((_QWORD *)result + 6);
  if (v1)
    *(_WORD *)(v1 + 26) = *(_WORD *)(*((_QWORD *)result + 5) + 26);
  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    *(_DWORD *)(v2 + 24) += 2;
    result = (unsigned int *)WebCore::SVGElement::commitPropertyChange((WebCore::SVGElement *)v2, (WebCore::SVGAnimatedProperty *)result);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::baseValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::animValAsString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

BOOL WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::isDirty(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) == 1;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::setDirty(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 25) = 1;
  return result;
}

_BYTE *WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::synchronize@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  char v4;

  result = *(_BYTE **)(a1 + 40);
  v4 = result[25];
  if (v4)
  {
    result[25] = 0;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 32))(result);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[8] = v4;
  return result;
}

unsigned int *WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::startAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _BYTE v9[24];

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    *(_WORD *)(v4 + 26) = *(_WORD *)(v5 + 26);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = a1;
    *(_WORD *)(v6 + 24) = 1;
    *(_QWORD *)v6 = off_1E32EE068;
    *(_WORD *)(v6 + 26) = *(_WORD *)(v5 + 26);
    *(_QWORD *)v6 = off_1E32EE030;
    v7 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
  }
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(a1 + 24, a2, (uint64_t)v9);
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::stopAnimation(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(a1 + 24, a2);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    *(_WORD *)(v4 + 26) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 26);
  return result;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::instanceStartAnimation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a1[3];
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)a1[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = (uint64_t *)a1[3];
  }
  v16 = (uint64_t *)(v6 + 8 * v13);
  if (v15 == v16)
  {
LABEL_2:
    v7 = *(_QWORD *)(a3 + 48);
    if (!v7)
    {
      v8 = *(_QWORD *)(a3 + 40);
      v7 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v7 + 8) = 1;
      *(_QWORD *)(v7 + 16) = a3;
      *(_WORD *)(v7 + 24) = 1;
      *(_QWORD *)v7 = off_1E32EE068;
      *(_WORD *)(v7 + 26) = *(_WORD *)(v8 + 26);
      *(_QWORD *)v7 = off_1E32EE030;
      v9 = *(_DWORD **)(a3 + 48);
      *(_QWORD *)(a3 + 48) = v7;
      if (v9)
      {
        if (v9[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          v7 = *(_QWORD *)(a3 + 48);
          v10 = a1 + 6;
          if (!v7)
          {
LABEL_8:
            v11 = (_DWORD *)*v10;
            *v10 = v7;
            if (v11)
            {
              if (v11[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
              else
                --v11[2];
            }
            return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
          }
LABEL_7:
          ++*(_DWORD *)(v7 + 8);
          goto LABEL_8;
        }
        --v9[2];
      }
    }
    v10 = a1 + 6;
    goto LABEL_7;
  }
  v17 = *v15;
LABEL_24:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (1)
    {
      if (++v15 == v16)
        goto LABEL_2;
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_24;
        goto LABEL_2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, a2);
}

_DWORD *WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>::instanceStopAnimation(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v3 = a1[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_2;
  v4 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (uint64_t *)a1[3];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_2;
    }
  }
  else
  {
    v6 = (uint64_t *)a1[3];
  }
  v7 = (uint64_t *)(v3 + 8 * v4);
  if (v6 == v7)
    goto LABEL_2;
  v8 = *v6;
LABEL_16:
  if (!*(_QWORD *)(v8 + 8))
  {
    while (++v6 != v7)
    {
      v8 = *v6;
      if ((unint64_t)(*v6 + 1) > 1)
      {
        if (v6 != v7)
          goto LABEL_16;
        break;
      }
    }
LABEL_2:
    result = (_DWORD *)a1[6];
    a1[6] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEImageElement::SVGFEImageElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  uint64_t *v5;
  int i;
  int v7;
  uint64_t *v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if ((byte_1ECE85590 & 1) == 0)
  {
    qword_1ECE85668 = (uint64_t)off_1E3461370;
    unk_1ECE85670 = 256;
    byte_1ECE85590 = 1;
  }
  if ((byte_1ECE85578 & 1) != 0)
  {
    v0 = qword_1ECE85570;
    if (qword_1ECE85570)
    {
LABEL_6:
      v1 = *(_DWORD *)(v0 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    qword_1ECE85570 = 0;
    byte_1ECE85578 = 1;
  }
  WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0);
  v0 = qword_1ECE85570;
  if (qword_1ECE85570)
    goto LABEL_6;
  v1 = 0;
LABEL_7:
  v2 = WebCore::SVGNames::preserveAspectRatioAttr;
  if (*(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 16))
  {
    v27 = *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 24);
    v28 = *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 32);
    v29 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v30 = v29 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v31 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v30 + (v29 >> 11)) << 16) ^ (v30 + (v29 >> 11));
    v32 = (v27 >> 5) & 0x7FFF800 ^ ((v31 + (unsigned __int16)v27 + (v31 >> 11)) << 16) ^ (v31 + (unsigned __int16)v27 + (v31 >> 11));
    v33 = (v27 >> 37) & 0x7FFF800 ^ ((v32 + WORD2(v27) + (v32 >> 11)) << 16) ^ (v32 + WORD2(v27) + (v32 >> 11));
    v34 = (v28 >> 5) & 0x7FFF800 ^ ((v33 + (unsigned __int16)v28 + (v33 >> 11)) << 16) ^ (v33 + (unsigned __int16)v28 + (v33 >> 11));
    v35 = (v28 >> 37) & 0x7FFF800 ^ ((v34 + WORD2(v28) + (v34 >> 11)) << 16) ^ (v34 + WORD2(v28) + (v34 >> 11));
    v36 = (v35 + (v35 >> 11)) ^ (8 * (v35 + (v35 >> 11)));
    v37 = (v36 + (v36 >> 5)) ^ (4 * (v36 + (v36 >> 5)));
    v38 = (v37 + (v37 >> 15)) ^ ((v37 + (v37 >> 15)) << 10);
    if (v38)
      result = v38;
    else
      result = 0x800000;
  }
  else
  {
    result = *(unsigned int *)(WebCore::SVGNames::preserveAspectRatioAttr + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::preserveAspectRatioAttr);
      *(_DWORD *)(v2 + 4) = result;
    }
  }
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    for (i = 1; ; ++i)
    {
      v7 = result & v1;
      v8 = (uint64_t *)(v0 + 16 * (result & v1));
      if (v4)
      {
        v9 = (*(_DWORD *)v4)++;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        if (v9)
        {
          *(_DWORD *)v4 = v9;
          v11 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      }
      if (v10 == (WebCore::QualifiedName::QualifiedNameImpl *)v4)
        break;
      v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      if (*v8 != -1)
      {
        if (v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::preserveAspectRatioAttr)
          return result;
        if (*((_QWORD *)v12 + 3) == *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 24))
        {
          v8 = v5;
          if (*((_QWORD *)v12 + 4) == *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 32))
            return result;
        }
        else
        {
          v8 = v5;
        }
      }
      result = (i + v7);
      v4 = (WTF::StringImpl **)v11;
      v5 = v8;
    }
LABEL_35:
    if (v5)
    {
      v18 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v5 = v18;
      v5[1] = 0;
      --*(_DWORD *)(qword_1ECE85570 - 16);
      v8 = v5;
    }
  }
  else
  {
    v15 = result & v1;
    v8 = (uint64_t *)(v0 + 16 * (result & v1));
    v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
    if (*v8)
    {
      result = 0;
      v17 = 1;
      while (1)
      {
        v5 = v8;
        if (v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::preserveAspectRatioAttr)
            return result;
          if (*((_QWORD *)v16 + 3) == *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 24))
          {
            v5 = (uint64_t *)result;
            if (*((_QWORD *)v16 + 4) == *(_QWORD *)(WebCore::SVGNames::preserveAspectRatioAttr + 32))
              return result;
          }
          else
          {
            v5 = (uint64_t *)result;
          }
        }
        v15 = (v15 + v17) & v1;
        v8 = (uint64_t *)(v0 + 16 * v15);
        v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        ++v17;
        result = (uint64_t)v5;
        if (!*v8)
          goto LABEL_35;
      }
    }
  }
  v19 = WebCore::SVGNames::preserveAspectRatioAttr;
  if (WebCore::SVGNames::preserveAspectRatioAttr)
    ++*(_DWORD *)WebCore::SVGNames::preserveAspectRatioAttr;
  result = *v8;
  *v8 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v8[1] = (uint64_t)&qword_1ECE85668;
  if (qword_1ECE85570)
    v20 = *(_DWORD *)(qword_1ECE85570 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(qword_1ECE85570 - 12) = v20;
  if (qword_1ECE85570)
    v21 = *(_DWORD *)(qword_1ECE85570 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(qword_1ECE85570 - 16) + v21);
  v23 = *(unsigned int *)(qword_1ECE85570 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      return result;
    if (!(_DWORD)v23)
    {
      v24 = 8;
      return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
    }
LABEL_54:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(qword_1ECE85570 - 12) >= (2 * v23));
    return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
  }
  if (v23 <= 2 * v22)
    goto LABEL_54;
  return result;
}

_DWORD *WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl ***v50;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85570;
  if (qword_1ECE85570)
  {
    v5 = *(_DWORD *)(qword_1ECE85570 - 4);
    v6 = *(_DWORD *)(qword_1ECE85570 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = result + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85570 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE85570 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[174];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v50 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v50;
        v15 = v48;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v50;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v48;
    goto LABEL_40;
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEImageElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEImageElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEImageElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEImageElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEImageElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

double WebCore::SVGAnimatedPreserveAspectRatioAccessor<WebCore::SVGFEImageElement>::createAnimator@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  *(_DWORD *)(v10 + 8) = 1;
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 64) = a4;
  *(_QWORD *)&result = 17170694;
  *(_DWORD *)(v10 + 65) = 17170694;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = &off_1E3461D30;
  *(_QWORD *)v10 = off_1E3461C60;
  *a5 = v10;
  return result;
}

_QWORD *WebCore::SVGAnimatedPreserveAspectRatioAccessor<WebCore::SVGFEImageElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGAnimatedPreserveAspectRatioAnimator::~SVGAnimatedPreserveAspectRatioAnimator(WebCore::SVGAnimatedPreserveAspectRatioAnimator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3461CC8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3461CC8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::setFromAndToValues(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v13 = 262;
  v14 = v7;
  v15 = v8;
  WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)&v14, (uint64_t)&v13);
  *(_WORD *)(a1 + 65) = v13;
  v9 = *a4;
  if (*a4)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v13 = 262;
  v14 = v10;
  v15 = v11;
  result = WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)&v14, (uint64_t)&v13);
  *(_WORD *)(a1 + 67) = v13;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPreserveAspectRatioAnimator::animate(WebCore::SVGAnimatedPreserveAspectRatioAnimator *this, WebCore::SVGElement *a2, float a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  char *v13;

  v5 = *((_QWORD *)this + 4);
  result = *(_QWORD *)(v5 + 48);
  if (!result)
  {
    v7 = *(_QWORD *)(v5 + 40);
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = v5;
    *(_WORD *)(result + 24) = 1;
    *(_QWORD *)result = off_1E32EE068;
    *(_WORD *)(result + 26) = *(_WORD *)(v7 + 26);
    *(_QWORD *)result = off_1E32EE030;
    v8 = *(_DWORD **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = result;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        result = *(_QWORD *)(v5 + 48);
      }
      else
      {
        --v8[2];
      }
    }
  }
  v9 = *((unsigned __int8 *)this + 64);
  if (a3 > 0.5 && v9 == 1 || a3 == 1.0 || v9 == 3)
    v13 = (char *)this + 67;
  else
    v13 = (char *)this + 65;
  *(_WORD *)(result + 26) = *(_WORD *)v13;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>,WebCore::SVGAnimationPreserveAspectRatioFunction>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationPreserveAspectRatioFunction::~SVGAnimationPreserveAspectRatioFunction(WebCore::SVGAnimationPreserveAspectRatioFunction *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::SVGPreserveAspectRatioValue>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationPreserveAspectRatioFunction::setFromAndToValues(WebCore::SVGAnimationPreserveAspectRatioFunction *this, WebCore::SVGElement *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v13 = 262;
  v14 = v7;
  v15 = v8;
  WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)&v14, (uint64_t)&v13);
  *(_WORD *)((char *)this + 9) = v13;
  v9 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v13 = 262;
  v14 = v10;
  v15 = v11;
  result = WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)&v14, (uint64_t)&v13);
  *(_WORD *)((char *)this + 11) = v13;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;

  v1 = result;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_24:
    v4 = &v2[2 * v3];
    if (!v2)
      goto LABEL_33;
LABEL_32:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_33;
  }
  v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_24;
  }
  v3 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v4 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v3);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v3);
    goto LABEL_24;
  }
  if (!(_DWORD)v3)
  {
    v13 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_33;
    goto LABEL_32;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = v4;
        break;
      }
    }
    v13 = v2;
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v14)
                             + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v14);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
LABEL_33:
  while (v13 != v2)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v13[1] + 2))(v13[1], *(_QWORD *)(v1 + 8));
    v15 = v13 + 2;
    v13 = v4;
    if (v15 != v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_36:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == v4)
            goto LABEL_49;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_36;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v4)
          {
LABEL_49:
            v13 = v4;
            goto LABEL_51;
          }
        }
      }
      v13 = v15;
    }
LABEL_51:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_102;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_102:
    v24 = &v22[2 * v23];
    goto LABEL_75;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_102;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_75;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_80:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_93;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_80;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_93:
            v35 = v24;
            goto LABEL_95;
          }
        }
      }
      v35 = v36;
    }
LABEL_95:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  void *v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  {
    v7 = 0;
    v18 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_27:
    v9 = &v7[2 * v8];
    if (!v7)
      goto LABEL_36;
LABEL_35:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_36;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_27;
  }
  if (!(_DWORD)v8)
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_36;
    goto LABEL_35;
  }
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v11 = 16 * v8;
    while (1)
    {
      if (v10)
      {
        v12 = (*(_DWORD *)v10)++;
        v13 = *v7;
        if (v12)
        {
          *(_DWORD *)v10 = v12;
          v14 = (uint64_t)v10;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = *v7;
      }
      if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v10 = (WTF::StringImpl **)v14;
      v11 -= 16;
      if (!v11)
      {
        v7 = v9;
        break;
      }
    }
    v18 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
  else
  {
    v19 = 0;
    v20 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v19)
                             + 1) <= 1)
    {
      v19 += 16;
      if (v20 == v19)
      {
        v18 = v9;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v19);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
LABEL_36:
  while (v18 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1] + 5))(v18[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_101;
    v21 = v18 + 2;
    v18 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_40:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_53;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_40;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_53:
            v18 = v9;
            goto LABEL_55;
          }
        }
      }
      v18 = v21;
    }
LABEL_55:
    ;
  }
  {
    v28 = 0;
    v18 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v29 = 0;
LABEL_113:
    v30 = &v28[2 * v29];
    goto LABEL_78;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_113;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v18 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v18 = v30;
          goto LABEL_78;
        }
      }
      v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_78:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v18)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1]
                                    + 5))(v18[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v40 = v18 + 2;
      v18 = v30;
      if (v40 != v30)
      {
        v41 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_84:
          v42 = (*(_DWORD *)v41)++;
          v43 = *v40;
          if (v42)
          {
            *(_DWORD *)v41 = v42;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
          }
          while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
          {
            v40 += 2;
            if (v40 == v30)
              goto LABEL_97;
            v41 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_84;
            v43 = *v40;
          }
        }
        else
        {
          while ((unint64_t)*v40 + 1 <= 1)
          {
            v40 += 2;
            if (v40 == v30)
            {
LABEL_97:
              v18 = v30;
              goto LABEL_99;
            }
          }
        }
        v18 = v40;
      }
LABEL_99:
      if (v18 == v28)
        return result;
    }
LABEL_101:
    v47 = *v18;
    if (*v18)
      ++*(_DWORD *)v47;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v47;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v48, v49);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF::StringImpl ***v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  WTF *v26;
  void *v27;
  WTF::StringImpl ***v28;
  uint64_t v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl **v47;
  WTF *v48;
  void *v49;

  v4 = result;
  v6 = WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  {
    v7 = 0;
    v18 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_27:
    v9 = &v7[2 * v8];
    if (!v7)
      goto LABEL_36;
LABEL_35:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_36;
  }
  v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  v8 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v8);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v8);
    goto LABEL_27;
  }
  if (!(_DWORD)v8)
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_36;
    goto LABEL_35;
  }
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v11 = 16 * v8;
    while (1)
    {
      if (v10)
      {
        v12 = (*(_DWORD *)v10)++;
        v13 = *v7;
        if (v12)
        {
          *(_DWORD *)v10 = v12;
          v14 = (uint64_t)v10;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = (WTF::StringImpl **)WTF::fastFree(v16, v17);
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = *v7;
      }
      if (v13 != v10 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v10 = (WTF::StringImpl **)v14;
      v11 -= 16;
      if (!v11)
      {
        v7 = v9;
        break;
      }
    }
    v18 = v7;
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
  else
  {
    v19 = 0;
    v20 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v19)
                             + 1) <= 1)
    {
      v19 += 16;
      if (v20 == v19)
      {
        v18 = v9;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v19);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_35;
  }
LABEL_36:
  while (v18 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1] + 6))(v18[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_101;
    v21 = v18 + 2;
    v18 = v9;
    if (v21 != v9)
    {
      v22 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_40:
        v23 = (*(_DWORD *)v22)++;
        v24 = *v21;
        if (v23)
        {
          *(_DWORD *)v22 = v23;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          result = (WTF::StringImpl **)WTF::fastFree(v26, v27);
        }
        while (v24 == v22 || (WTF::StringImpl **)((char *)*v21 + 1) == 0)
        {
          v21 += 2;
          if (v21 == v9)
            goto LABEL_53;
          v22 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_40;
          v24 = *v21;
        }
      }
      else
      {
        while ((unint64_t)*v21 + 1 <= 1)
        {
          v21 += 2;
          if (v21 == v9)
          {
LABEL_53:
            v18 = v9;
            goto LABEL_55;
          }
        }
      }
      v18 = v21;
    }
LABEL_55:
    ;
  }
  {
    v28 = 0;
    v18 = 0;
    v29 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v18 = 0;
    v29 = 0;
LABEL_113:
    v30 = &v28[2 * v29];
    goto LABEL_78;
  }
  v29 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v30 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v29);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v29);
    goto LABEL_113;
  }
  if ((_DWORD)v29)
  {
    v31 = (WTF::StringImpl **)WebCore::nullName;
    v32 = 16 * v29;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v31)
        {
          v33 = (*(_DWORD *)v31)++;
          v34 = *v28;
          if (v33)
          {
            *(_DWORD *)v31 = v33;
            v35 = (uint64_t)v31;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
            result = (WTF::StringImpl **)WTF::fastFree(v37, v38);
            v35 = WebCore::nullName;
          }
        }
        else
        {
          v35 = 0;
          v34 = *v28;
        }
        if (v34 != v31 && (WTF::StringImpl **)((char *)*v28 + 1) != 0)
          break;
        v28 += 2;
        v31 = (WTF::StringImpl **)v35;
        v32 -= 16;
        if (!v32)
        {
          v28 = v30;
          break;
        }
      }
      v18 = v28;
      v28 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v39 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v39)
                               + 1) <= 1)
      {
        v39 += 16;
        if (v32 == v39)
        {
          v18 = v30;
          goto LABEL_78;
        }
      }
      v18 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v39);
    }
  }
  else
  {
    v18 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_78:
  if (v28)
    v28 += 2 * *((unsigned int *)v28 - 1);
  if (v28 != v18)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v18[1]
                                    + 6))(v18[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v40 = v18 + 2;
      v18 = v30;
      if (v40 != v30)
      {
        v41 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_84:
          v42 = (*(_DWORD *)v41)++;
          v43 = *v40;
          if (v42)
          {
            *(_DWORD *)v41 = v42;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
            result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
          }
          while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
          {
            v40 += 2;
            if (v40 == v30)
              goto LABEL_97;
            v41 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_84;
            v43 = *v40;
          }
        }
        else
        {
          while ((unint64_t)*v40 + 1 <= 1)
          {
            v40 += 2;
            if (v40 == v30)
            {
LABEL_97:
              v18 = v30;
              goto LABEL_99;
            }
          }
        }
        v18 = v40;
      }
LABEL_99:
      if (v18 == v28)
        return result;
    }
LABEL_101:
    v47 = *v18;
    if (*v18)
      ++*(_DWORD *)v47;
    result = (WTF::StringImpl **)*a3;
    *a3 = (uint64_t)v47;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v48, v49);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  char *result;
  char *v7;
  uint64_t v8;
  char v9;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_20;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_13;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_20:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_13:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
    {
LABEL_6:
      result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD))(*(_QWORD *)result + 64))(&v8, result, *(_QWORD *)(a1 + 8));
      if (v9)
      {
        *(_QWORD *)a3 = v8;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  WTF::StringImpl ***v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  _BYTE v46[24];
  WTF::StringImpl *v47;
  char v48;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_24:
    v6 = &v4[2 * v5];
    if (!v4)
      goto LABEL_33;
LABEL_32:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_33;
  }
  v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_24;
  }
  v5 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
       - 1);
  v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                           + 16 * v5);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v5);
    goto LABEL_24;
  }
  if (!(_DWORD)v5)
  {
    v15 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = v6;
        break;
      }
    }
    v15 = v4;
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v16)
                             + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v15 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v16);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_32;
  }
LABEL_33:
  while (v15 != v4)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v15[1]
                                 + 8))(&v47, v15[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = v15 + 2;
    v15 = v6;
    if (v18 != v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_41:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == v6)
            goto LABEL_54;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_41;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == v6)
          {
LABEL_54:
            v15 = v6;
            goto LABEL_56;
          }
        }
      }
      v15 = v18;
    }
LABEL_56:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_115;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_115:
    v27 = &v25[2 * v26];
    goto LABEL_81;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_115;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_81;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_81:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v47, v37[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_91:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_104;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_91;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_104:
            v37 = v27;
            goto LABEL_106;
          }
        }
      }
      v37 = v39;
    }
LABEL_106:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;

  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_19;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_19:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute()
{
  _BYTE v1[24];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE855A8 & 1) == 0)
  {
    v2 = WebCore::SVGNames::cxAttr;
    v3 = WebCore::SVGNames::cyAttr;
    v4 = WebCore::SVGNames::rAttr;
    v5 = WebCore::SVGNames::rxAttr;
    v6 = WebCore::SVGNames::ryAttr;
    v7 = WebCore::SVGNames::heightAttr;
    v8 = WebCore::SVGNames::widthAttr;
    v9 = WebCore::SVGNames::xAttr;
    v10[0] = WebCore::SVGNames::yAttr;
    qword_1ECE855A0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v2, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v3, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v4, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v5, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v6, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v7, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v8, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, &v9, (uint64_t)v1);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855A0, v10, (uint64_t)v1);
    byte_1ECE855A8 = 1;
  }
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  return 0;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *result;
  char *v15;
  uint64_t v16;

  *a7 = 0;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    goto LABEL_6;
  {
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v15)
      v15 += 16 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
    {
LABEL_6:
      result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(&v16, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v16;
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  if ((byte_1ECE85598 & 1) == 0)
    byte_1ECE85598 = 1;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_18;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_12;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_18:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_12:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;

  v1 = result;
  if ((byte_1ECE855B8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE855B0;
  if (!qword_1ECE855B0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE855B0 - 4);
  v4 = qword_1ECE855B0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE855B0 - 12))
  {
    v13 = qword_1ECE855B0 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (qword_1ECE855B0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855B0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE855B0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE855B0 + v14;
    if (qword_1ECE855B0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_100;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_100:
    v24 = &v22[2 * v23];
    goto LABEL_73;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_100;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_73;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_78:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_91;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_78;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_91:
            v35 = v24;
            goto LABEL_93;
          }
        }
      }
      v35 = v36;
    }
LABEL_93:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE855B8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE855B0;
  if (!qword_1ECE855B0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE855B0 - 4);
  v9 = qword_1ECE855B0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE855B0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (qword_1ECE855B0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855B0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE855B0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE855B0 + v18);
    if (qword_1ECE855B0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE855B8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE855B0;
  if (!qword_1ECE855B0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE855B0 - 4);
  v9 = qword_1ECE855B0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE855B0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (qword_1ECE855B0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855B0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE855B0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE855B0 + v18);
    if (qword_1ECE855B0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE855B8 & 1) != 0)
  {
    v6 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855B0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v7 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE855B8 & 1) != 0)
  {
    v6 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855B0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v7 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      goto LABEL_12;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_26:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD))(*result)[8])(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  _BYTE v46[24];
  WTF::StringImpl *v47;
  char v48;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE855B8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE855B0;
  if (!qword_1ECE855B0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE855B0 - 4);
  v6 = qword_1ECE855B0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE855B0 - 12))
  {
    v15 = qword_1ECE855B0 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE855B0;
    if (qword_1ECE855B0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855B0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE855B0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE855B0 + v16;
    if (qword_1ECE855B0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v47, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_113:
    v27 = &v25[2 * v26];
    goto LABEL_79;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_113;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_79;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v47, v37[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_102;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_102:
            v37 = v27;
            goto LABEL_104;
          }
        }
      }
      v37 = v39;
    }
LABEL_104:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE855B8 & 1) != 0)
  {
    v3 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE855B0;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v4 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    v5 = v4[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    v5 = v8[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE855C8 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE855C0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855C0, v22, (uint64_t)v13);
    byte_1ECE855C8 = 1;
  }
  if ((byte_1ECE855B8 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE855B0;
  if (!qword_1ECE855B0)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE855B0;
  if (!v4)
  {
    if (qword_1ECE855B0)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE855C0)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE855C0 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE855C0 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE855C0 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE855B8 & 1) != 0)
  {
    v14 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE855B0;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v15 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = (WTF::StringImpl ***)v15[1];
    if (result)
      goto LABEL_12;
  }
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))(*result)[9])(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMergeNodeElement,WebCore::SVGElement>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE855B8 & 1) != 0)
  {
    v6 = qword_1ECE855B0;
    if (!qword_1ECE855B0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855B0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855B0)
      v7 = (WTF::StringImpl ***)(qword_1ECE855B0 + 16 * *(unsigned int *)(qword_1ECE855B0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
LABEL_7:
  if ((byte_1ECE855B8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE855B0;
  if (!qword_1ECE855B0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE855B0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEMergeNodeElement::SVGFEMergeNodeElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  uint64_t *v5;
  int i;
  int v7;
  uint64_t *v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if ((byte_1ECE855D0 & 1) == 0)
  {
    qword_1ECE85678 = (uint64_t)off_1E34614E0;
    unk_1ECE85680 = 176;
    byte_1ECE855D0 = 1;
  }
  if ((byte_1ECE855B8 & 1) != 0)
  {
    v0 = qword_1ECE855B0;
    if (qword_1ECE855B0)
    {
LABEL_6:
      v1 = *(_DWORD *)(v0 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    qword_1ECE855B0 = 0;
    byte_1ECE855B8 = 1;
  }
  WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0);
  v0 = qword_1ECE855B0;
  if (qword_1ECE855B0)
    goto LABEL_6;
  v1 = 0;
LABEL_7:
  v2 = WebCore::SVGNames::inAttr;
  if (*(_QWORD *)(WebCore::SVGNames::inAttr + 16))
  {
    v27 = *(_QWORD *)(WebCore::SVGNames::inAttr + 24);
    v28 = *(_QWORD *)(WebCore::SVGNames::inAttr + 32);
    v29 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v30 = v29 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v31 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v30 + (v29 >> 11)) << 16) ^ (v30 + (v29 >> 11));
    v32 = (v27 >> 5) & 0x7FFF800 ^ ((v31 + (unsigned __int16)v27 + (v31 >> 11)) << 16) ^ (v31 + (unsigned __int16)v27 + (v31 >> 11));
    v33 = (v27 >> 37) & 0x7FFF800 ^ ((v32 + WORD2(v27) + (v32 >> 11)) << 16) ^ (v32 + WORD2(v27) + (v32 >> 11));
    v34 = (v28 >> 5) & 0x7FFF800 ^ ((v33 + (unsigned __int16)v28 + (v33 >> 11)) << 16) ^ (v33 + (unsigned __int16)v28 + (v33 >> 11));
    v35 = (v28 >> 37) & 0x7FFF800 ^ ((v34 + WORD2(v28) + (v34 >> 11)) << 16) ^ (v34 + WORD2(v28) + (v34 >> 11));
    v36 = (v35 + (v35 >> 11)) ^ (8 * (v35 + (v35 >> 11)));
    v37 = (v36 + (v36 >> 5)) ^ (4 * (v36 + (v36 >> 5)));
    v38 = (v37 + (v37 >> 15)) ^ ((v37 + (v37 >> 15)) << 10);
    if (v38)
      result = v38;
    else
      result = 0x800000;
  }
  else
  {
    result = *(unsigned int *)(WebCore::SVGNames::inAttr + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr);
      *(_DWORD *)(v2 + 4) = result;
    }
  }
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    for (i = 1; ; ++i)
    {
      v7 = result & v1;
      v8 = (uint64_t *)(v0 + 16 * (result & v1));
      if (v4)
      {
        v9 = (*(_DWORD *)v4)++;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        if (v9)
        {
          *(_DWORD *)v4 = v9;
          v11 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      }
      if (v10 == (WebCore::QualifiedName::QualifiedNameImpl *)v4)
        break;
      v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      if (*v8 != -1)
      {
        if (v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
          return result;
        if (*((_QWORD *)v12 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
        {
          v8 = v5;
          if (*((_QWORD *)v12 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
            return result;
        }
        else
        {
          v8 = v5;
        }
      }
      result = (i + v7);
      v4 = (WTF::StringImpl **)v11;
      v5 = v8;
    }
LABEL_35:
    if (v5)
    {
      v18 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v5 = v18;
      v5[1] = 0;
      --*(_DWORD *)(qword_1ECE855B0 - 16);
      v8 = v5;
    }
  }
  else
  {
    v15 = result & v1;
    v8 = (uint64_t *)(v0 + 16 * (result & v1));
    v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
    if (*v8)
    {
      result = 0;
      v17 = 1;
      while (1)
      {
        v5 = v8;
        if (v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
            return result;
          if (*((_QWORD *)v16 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
          {
            v5 = (uint64_t *)result;
            if (*((_QWORD *)v16 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
              return result;
          }
          else
          {
            v5 = (uint64_t *)result;
          }
        }
        v15 = (v15 + v17) & v1;
        v8 = (uint64_t *)(v0 + 16 * v15);
        v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        ++v17;
        result = (uint64_t)v5;
        if (!*v8)
          goto LABEL_35;
      }
    }
  }
  v19 = WebCore::SVGNames::inAttr;
  if (WebCore::SVGNames::inAttr)
    ++*(_DWORD *)WebCore::SVGNames::inAttr;
  result = *v8;
  *v8 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v8[1] = (uint64_t)&qword_1ECE85678;
  if (qword_1ECE855B0)
    v20 = *(_DWORD *)(qword_1ECE855B0 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(qword_1ECE855B0 - 12) = v20;
  if (qword_1ECE855B0)
    v21 = *(_DWORD *)(qword_1ECE855B0 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(qword_1ECE855B0 - 16) + v21);
  v23 = *(unsigned int *)(qword_1ECE855B0 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      return result;
    if (!(_DWORD)v23)
    {
      v24 = 8;
      return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
    }
LABEL_54:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(qword_1ECE855B0 - 12) >= (2 * v23));
    return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
  }
  if (v23 <= 2 * v22)
    goto LABEL_54;
  return result;
}

_DWORD *WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl ***v50;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE855B0;
  if (qword_1ECE855B0)
  {
    v5 = *(_DWORD *)(qword_1ECE855B0 - 4);
    v6 = *(_DWORD *)(qword_1ECE855B0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = result + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE855B0 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE855B0 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[182];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v50 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v50;
        v15 = v48;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v50;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v48;
    goto LABEL_40;
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMergeNodeElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMergeNodeElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMergeNodeElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMergeNodeElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMergeNodeElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEMergeNodeElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEMergeNodeElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;

  v1 = result;
  if ((byte_1ECE855E0 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE855D8;
  if (!qword_1ECE855D8)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE855D8 - 4);
  v4 = qword_1ECE855D8 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE855D8 - 12))
  {
    v13 = qword_1ECE855D8 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (qword_1ECE855D8)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855D8 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE855D8)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE855D8 + v14;
    if (qword_1ECE855D8)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_100;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_100:
    v24 = &v22[2 * v23];
    goto LABEL_73;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_100;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_73;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_78:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_91;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_78;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_91:
            v35 = v24;
            goto LABEL_93;
          }
        }
      }
      v35 = v36;
    }
LABEL_93:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE855E0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE855D8;
  if (!qword_1ECE855D8)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE855D8 - 4);
  v9 = qword_1ECE855D8 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE855D8 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (qword_1ECE855D8)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855D8 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE855D8)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE855D8 + v18);
    if (qword_1ECE855D8)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF *v46;
  void *v47;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE855E0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE855D8;
  if (!qword_1ECE855D8)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE855D8 - 4);
  v9 = qword_1ECE855D8 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE855D8 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (qword_1ECE855D8)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855D8 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE855D8)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE855D8 + v18);
    if (qword_1ECE855D8)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_98;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_110;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_110:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_110;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  if (v26 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v38 = v17 + 2;
      v17 = v28;
      if (v38 != v28)
      {
        v39 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_81:
          v40 = (*(_DWORD *)v39)++;
          v41 = *v38;
          if (v40)
          {
            *(_DWORD *)v39 = v40;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
            result = (WTF::StringImpl **)WTF::fastFree(v43, v44);
          }
          while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
          {
            v38 += 2;
            if (v38 == v28)
              goto LABEL_94;
            v39 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_81;
            v41 = *v38;
          }
        }
        else
        {
          while ((unint64_t)*v38 + 1 <= 1)
          {
            v38 += 2;
            if (v38 == v28)
            {
LABEL_94:
              v17 = v28;
              goto LABEL_96;
            }
          }
        }
        v17 = v38;
      }
LABEL_96:
      if (v17 == v26)
        return result;
    }
LABEL_98:
    v45 = *v17;
    if (*v17)
      ++*(_DWORD *)v45;
    result = *a3;
    *a3 = v45;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE855E0 & 1) != 0)
  {
    v6 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855D8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855D8)
      v7 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[7])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE855E0 & 1) != 0)
  {
    v6 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855D8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855D8)
      v7 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      goto LABEL_12;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_26:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD))(*result)[8])(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  _BYTE v46[24];
  WTF::StringImpl *v47;
  char v48;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE855E0 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE855D8;
  if (!qword_1ECE855D8)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE855D8 - 4);
  v6 = qword_1ECE855D8 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE855D8 - 12))
  {
    v15 = qword_1ECE855D8 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE855D8;
    if (qword_1ECE855D8)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE855D8 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE855D8)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE855D8 + v16;
    if (qword_1ECE855D8)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v47, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_113;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_113:
    v27 = &v25[2 * v26];
    goto LABEL_79;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_113;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_79;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1]
                                 + 8))(&v47, v37[1], *((_QWORD *)v2 + 1));
    if (v48)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v47, (uint64_t)v46);
      if (v48)
      {
        result = v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_102;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_102:
            v37 = v27;
            goto LABEL_104;
          }
        }
      }
      v37 = v39;
    }
LABEL_104:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE855E0 & 1) != 0)
  {
    v3 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE855D8;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE855D8)
      v4 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    v5 = v4[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_25;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_25:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    v5 = v8[1];
    if (v5)
      return (*((uint64_t (**)(WTF::StringImpl **))*v5 + 3))(v5);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE855F0 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE855E8 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE855E8, v22, (uint64_t)v13);
    byte_1ECE855F0 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE855D8;
  if (!qword_1ECE855D8)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE855D8;
  if (!v4)
  {
    if (qword_1ECE855D8)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE855E8)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE855E8 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE855E8 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE855E8 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE855E0 & 1) != 0)
  {
    v14 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE855D8;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE855D8)
      v15 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = (WTF::StringImpl ***)v15[1];
    if (result)
      goto LABEL_12;
  }
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
    {
LABEL_12:
      result = (WTF::StringImpl ***)((WTF::StringImpl ***(*)(uint64_t *__return_ptr, WTF::StringImpl ***, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))(*result)[9])(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFELightElement,WebCore::SVGElement>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v9;

  if ((byte_1ECE855E0 & 1) != 0)
  {
    v6 = qword_1ECE855D8;
    if (!qword_1ECE855D8)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE855D8;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE855D8)
      v7 = (WTF::StringImpl ***)(qword_1ECE855D8 + 16 * *(unsigned int *)(qword_1ECE855D8 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
LABEL_7:
  if ((byte_1ECE855E0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = (WTF::StringImpl ***)v7[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_24;
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                   + 16
                                   * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                     - 1));
    else
LABEL_24:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl ***)result[1];
    if (result)
      return (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, _QWORD, uint64_t))(*result)[10])(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE855D8;
  if (!qword_1ECE855D8)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE855D8 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFELightElement::SVGFELightElement(WebCore::QualifiedName const&,WebCore::Document &)::$_0 &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE855F8 & 1) == 0)
  {
    qword_1ECE85688 = (uint64_t)off_1E34615E8;
    unk_1ECE85690 = 176;
    byte_1ECE855F8 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85688;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, &WebCore::SVGNames::azimuthAttr, &v2);
  if ((byte_1ECE85600 & 1) == 0)
  {
    qword_1ECE85698 = (uint64_t)off_1E34615E8;
    unk_1ECE856A0 = 184;
    byte_1ECE85600 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85698;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, &WebCore::SVGNames::elevationAttr, &v2);
  if ((byte_1ECE85608 & 1) == 0)
  {
    qword_1ECE856A8 = (uint64_t)off_1E34615E8;
    unk_1ECE856B0 = 192;
    byte_1ECE85608 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856A8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::xAttr, &v2);
  if ((byte_1ECE85610 & 1) == 0)
  {
    qword_1ECE856B8 = (uint64_t)off_1E34615E8;
    unk_1ECE856C0 = 200;
    byte_1ECE85610 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856B8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::yAttr, &v2);
  if ((byte_1ECE85618 & 1) == 0)
  {
    qword_1ECE856C8 = (uint64_t)off_1E34615E8;
    unk_1ECE856D0 = 208;
    byte_1ECE85618 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856C8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, &WebCore::SVGNames::zAttr, &v2);
  if ((byte_1ECE85620 & 1) == 0)
  {
    qword_1ECE856D8 = (uint64_t)off_1E34615E8;
    unk_1ECE856E0 = 216;
    byte_1ECE85620 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856D8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::pointsAtXAttr, &v2);
  if ((byte_1ECE85628 & 1) == 0)
  {
    qword_1ECE856E8 = (uint64_t)off_1E34615E8;
    unk_1ECE856F0 = 224;
    byte_1ECE85628 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856E8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::pointsAtYAttr, &v2);
  if ((byte_1ECE85630 & 1) == 0)
  {
    qword_1ECE856F8 = (uint64_t)off_1E34615E8;
    unk_1ECE85700 = 232;
    byte_1ECE85630 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE856F8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::pointsAtZAttr, &v2);
  if ((byte_1ECE85638 & 1) == 0)
  {
    qword_1ECE85708 = (uint64_t)off_1E34615E8;
    unk_1ECE85710 = 240;
    byte_1ECE85638 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85708;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::specularExponentAttr, &v2);
  if ((byte_1ECE85640 & 1) == 0)
  {
    qword_1ECE85718 = (uint64_t)off_1E34615E8;
    unk_1ECE85720 = 248;
    byte_1ECE85640 = 1;
  }
  if ((byte_1ECE855E0 & 1) == 0)
  {
    qword_1ECE855D8 = 0;
    byte_1ECE855E0 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85718;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::limitingConeAngleAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE855D8;
  if (qword_1ECE855D8
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE855D8) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE855D8 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE855D8)
      v29 = *(_DWORD *)(qword_1ECE855D8 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE855D8 - 12) = v29;
    v33 = qword_1ECE855D8;
    if (qword_1ECE855D8)
      v34 = *(_DWORD *)(qword_1ECE855D8 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE855D8 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE855D8 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE855D8;
        if (qword_1ECE855D8)
          v36 = *(unsigned int *)(qword_1ECE855D8 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE855D8 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE855D8)
    v30 = *(unsigned int *)(qword_1ECE855D8 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE855D8 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFELightElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE855D8;
  if (qword_1ECE855D8)
  {
    v5 = *(_DWORD *)(qword_1ECE855D8 - 4);
    v6 = *(_DWORD *)(qword_1ECE855D8 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE855D8 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE855D8 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[187];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFELightElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFELightElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFELightElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFELightElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFELightElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFELightElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFELightElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFELightElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFELightElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

void WebCore::SVGFEMorphologyElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char **v19;
  char *v20;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E3461D80;
  v6[14] = (uint64_t)&unk_1E34622E0;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3464A00;
  *((_QWORD *)v7 + 1) = v6;
  v20 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v20);
  v8 = (uint64_t)v20;
  v20 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E3461D80;
  v6[14] = (uint64_t)&unk_1E34622E0;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x40);
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = 1;
  *(_QWORD *)v12 = off_1E3464A70;
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)v11 = &off_1E34568A0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  *(_BYTE *)(v11 + 56) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = atomic_load(&WebCore::SVGFEMorphologyElement::SVGFEMorphologyElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v17 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WebCore::SVGFEMorphologyElement::SVGFEMorphologyElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEMorphologyElement::SVGFEMorphologyElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFEMorphologyElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int v32;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v10)
  {
    case 518:
      v12 = a1[28];
      v13 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = v13 + 1;
      v14 = *(_QWORD *)(v12 + 40);
      v15 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
        *v15 += 2;
      v16 = *(WTF::StringImpl **)(v14 + 32);
      *(_QWORD *)(v14 + 32) = v15;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, a2);
          v13 = *(_DWORD *)(v12 + 8) - 1;
          if (*(_DWORD *)(v12 + 8) != 1)
            goto LABEL_12;
          goto LABEL_25;
        }
        *(_DWORD *)v16 -= 2;
      }
      if (v13)
      {
LABEL_12:
        *(_DWORD *)(v12 + 8) = v13;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
      }
LABEL_25:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
    case 791:
      v17 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
      {
        v18 = *((_QWORD *)v17 + 1);
        v19 = v17[1] | ((unint64_t)((v17[4] >> 2) & 1) << 32);
      }
      else
      {
        v18 = 0;
        v19 = 0x100000000;
      }
      v20 = WebCore::parseNumberOptionalNumber(v18, v19);
      if (v21)
      {
        v22 = v20;
        v23 = HIDWORD(v20);
        v24 = a1[30];
        v25 = *(_DWORD *)(v24 + 8);
        *(_DWORD *)(v24 + 8) = v25 + 1;
        *(_DWORD *)(*(_QWORD *)(v24 + 40) + 28) = v22;
        if (v25)
          *(_DWORD *)(v24 + 8) = v25;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v26 = a1[31];
        v27 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)(v26 + 8) = v27 + 1;
        *(_DWORD *)(*(_QWORD *)(v26 + 40) + 28) = v23;
        if (v27)
          *(_DWORD *)(v26 + 8) = v27;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      break;
    case 757:
      if ((MEMORY[0x19AEA53F4](*(_QWORD *)a4, "erode", 5) & 1) != 0)
      {
        v11 = 1;
      }
      else
      {
        if (!MEMORY[0x19AEA53F4](*(_QWORD *)a4, "dilate", 6))
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
        v11 = 2;
      }
      v12 = a1[29];
      ++*(_DWORD *)(v12 + 8);
      v28 = *(_QWORD *)(v12 + 40);
      v32 = v11;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v28 + 16))(v28, &v32);
      v29 = *(_QWORD *)(v12 + 48);
      if (v29)
      {
        v31 = v11;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v29 + 16))(v29, &v31);
      }
      v13 = *(_DWORD *)(v12 + 8) - 1;
      if (*(_DWORD *)(v12 + 8) == 1)
        goto LABEL_25;
      goto LABEL_12;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

BOOL WebCore::SVGFEMorphologyElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  if (*(_BYTE *)(a2 + 48) != 14)
  {
    __break(0xC471u);
    JUMPOUT(0x196649128);
  }
  if (*a3 == WebCore::SVGNames::operatorAttr)
  {
    v14 = (_QWORD *)a1[29];
    v15 = v14[3];
    if (v15 && *(_DWORD *)(v15 - 12))
    {
      v18 = *(unsigned int *)(v15 - 4);
      if ((_DWORD)v18)
      {
        v19 = 8 * v18;
        v20 = (uint64_t *)v14[3];
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          ++v20;
          v19 -= 8;
          if (!v19)
            goto LABEL_14;
        }
      }
      else
      {
        v20 = (uint64_t *)v14[3];
      }
      v27 = (uint64_t *)(v15 + 8 * v18);
      if (v20 != v27)
      {
        v28 = *v20;
LABEL_40:
        if (*(_QWORD *)(v28 + 8))
        {
          v16 = v14 + 6;
LABEL_15:
          v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 32))(*v16);
          if (*(unsigned __int8 *)(a2 + 64) != v17)
          {
            *(_BYTE *)(a2 + 64) = v17;
            return 1;
          }
          return 0;
        }
        while (++v20 != v27)
        {
          v28 = *v20;
          if ((unint64_t)(*v20 + 1) > 1)
          {
            if (v20 != v27)
              goto LABEL_40;
            break;
          }
        }
      }
    }
LABEL_14:
    v16 = v14 + 5;
    goto LABEL_15;
  }
  if (*a3 != WebCore::SVGNames::radiusAttr)
    return 0;
  v4 = a1[30];
  v5 = *(_QWORD *)(v4 + 24);
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    v21 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v21)
    {
      v22 = 8 * v21;
      v23 = *(uint64_t **)(v4 + 24);
      while ((unint64_t)(*v23 + 1) <= 1)
      {
        ++v23;
        v22 -= 8;
        if (!v22)
          goto LABEL_5;
      }
    }
    else
    {
      v23 = *(uint64_t **)(v4 + 24);
    }
    v29 = (uint64_t *)(v5 + 8 * v21);
    if (v23 != v29)
    {
      v30 = *v23;
LABEL_49:
      if (*(_QWORD *)(v30 + 8))
      {
        v6 = v4 + 48;
        goto LABEL_6;
      }
      while (++v23 != v29)
      {
        v30 = *v23;
        if ((unint64_t)(*v23 + 1) > 1)
        {
          if (v23 != v29)
            goto LABEL_49;
          break;
        }
      }
    }
  }
LABEL_5:
  v6 = v4 + 40;
LABEL_6:
  v7 = fmaxf(*(float *)(*(_QWORD *)v6 + 28), 0.0);
  v8 = *(float *)(a2 + 68);
  if (v8 != v7)
    *(float *)(a2 + 68) = v7;
  v9 = a1[31];
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_9;
  v24 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    v26 = *(uint64_t **)(v9 + 24);
    while ((unint64_t)(*v26 + 1) <= 1)
    {
      ++v26;
      v25 -= 8;
      if (!v25)
        goto LABEL_9;
    }
  }
  else
  {
    v26 = *(uint64_t **)(v9 + 24);
  }
  v31 = (uint64_t *)(v10 + 8 * v24);
  if (v26 == v31)
    goto LABEL_9;
  v32 = *v26;
LABEL_58:
  if (!*(_QWORD *)(v32 + 8))
  {
    while (++v26 != v31)
    {
      v32 = *v26;
      if ((unint64_t)(*v26 + 1) > 1)
      {
        if (v26 != v31)
          goto LABEL_58;
        break;
      }
    }
LABEL_9:
    v11 = v9 + 40;
    goto LABEL_10;
  }
  v11 = v9 + 48;
LABEL_10:
  v12 = fmaxf(*(float *)(*(_QWORD *)v11 + 28), 0.0);
  if (*(float *)(a2 + 72) == v12)
    return v8 != v7;
  *(float *)(a2 + 72) = v12;
  return 1;
}

void WebCore::SVGFEMorphologyElement::svgAttributeChanged(WebCore::SVGFEMorphologyElement *this, const WebCore::QualifiedName *a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v4 == 791 || v4 == 757)
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 8) = this;
      *(_BYTE *)(v21 + 32) = 0;
      v23 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v23 & 0xFFFF000000000000 | v21;
      v24 = v23 & 0xFFFFFFFFFFFFLL;
      if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)v24));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)v24);
          v34 = *(unsigned int *)(v24 + 28);
          if ((_DWORD)v34)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v34));
          v35 = *(WTF **)(v24 + 16);
          if (v35)
          {
            *(_QWORD *)(v24 + 16) = 0;
            *(_DWORD *)(v24 + 24) = 0;
            WTF::fastFree(v35, v22);
          }
          WTF::fastFree((WTF *)v24, v22);
        }
      }
    }
    v27 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v28 = __ldaxr((unsigned int *)v27);
    while (__stlxr(v28 + 1, (unsigned int *)v27));
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v27 + 8), v29);
    do
    {
      v30 = __ldaxr((unsigned int *)v27);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v27));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v27);
      v32 = *(unsigned int *)(v27 + 28);
      if ((_DWORD)v32)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v32));
      v33 = *(WTF **)(v27 + 16);
      if (v33)
      {
        *(_QWORD *)(v27 + 16) = 0;
        *(_DWORD *)(v27 + 24) = 0;
        WTF::fastFree(v33, v15);
      }
      v20 = (WTF *)v27;
      goto LABEL_38;
    }
  }
  else
  {
    if (v4 != 518)
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
      return;
    }
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v5 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = this;
      *(_BYTE *)(v5 + 32) = 0;
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v7 & 0xFFFF000000000000 | v5;
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v36 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v36)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v36));
          v37 = *(WTF **)(v8 + 16);
          if (v37)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            WTF::fastFree(v37, v6);
          }
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v13, this);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v11 + 8), v14);
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v11);
      v18 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v18));
      v19 = *(WTF **)(v11 + 16);
      if (v19)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v19, v15);
      }
      v20 = (WTF *)v11;
LABEL_38:
      WTF::fastFree(v20, v15);
    }
  }
}

BOOL WebCore::SVGFEMorphologyElement::isIdentity(WebCore::SVGFEMorphologyElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v1 = *((_QWORD *)this + 30);
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2 || !*(_DWORD *)(v2 - 12))
    goto LABEL_2;
  v8 = *(unsigned int *)(v2 - 4);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(uint64_t **)(v1 + 24);
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_2;
    }
  }
  else
  {
    v10 = *(uint64_t **)(v1 + 24);
  }
  v14 = (uint64_t *)(v2 + 8 * v8);
  if (v10 == v14)
    goto LABEL_2;
  v15 = *v10;
LABEL_23:
  if (!*(_QWORD *)(v15 + 8))
  {
    while (++v10 != v14)
    {
      v15 = *v10;
      if ((unint64_t)(*v10 + 1) > 1)
      {
        if (v10 != v14)
          goto LABEL_23;
        break;
      }
    }
LABEL_2:
    v3 = v1 + 40;
    goto LABEL_3;
  }
  v3 = v1 + 48;
LABEL_3:
  if (fmaxf(*(float *)(*(_QWORD *)v3 + 28), 0.0) != 0.0)
    return 0;
  v5 = *((_QWORD *)this + 31);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6 && *(_DWORD *)(v6 - 12))
  {
    v11 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      v13 = *(uint64_t **)(v5 + 24);
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        ++v13;
        v12 -= 8;
        if (!v12)
          goto LABEL_6;
      }
    }
    else
    {
      v13 = *(uint64_t **)(v5 + 24);
    }
    v16 = (uint64_t *)(v6 + 8 * v11);
    if (v13 != v16)
    {
      v17 = *v13;
LABEL_32:
      if (*(_QWORD *)(v17 + 8))
      {
        v7 = v5 + 48;
        return fmaxf(*(float *)(*(_QWORD *)v7 + 28), 0.0) == 0.0;
      }
      while (++v13 != v16)
      {
        v17 = *v13;
        if ((unint64_t)(*v13 + 1) > 1)
        {
          if (v13 != v16)
            goto LABEL_32;
          break;
        }
      }
    }
  }
LABEL_6:
  v7 = v5 + 40;
  return fmaxf(*(float *)(*(_QWORD *)v7 + 28), 0.0) == 0.0;
}

unint64_t WebCore::SVGFEMorphologyElement::outsets(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v13 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_2;
    }
  }
  else
  {
    v15 = *(uint64_t **)(v3 + 24);
  }
  v19 = (uint64_t *)(v4 + 8 * v13);
  if (v15 == v19)
    goto LABEL_2;
  v20 = *v15;
LABEL_23:
  if (!*(_QWORD *)(v20 + 8))
  {
    while (++v15 != v19)
    {
      v20 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v19)
          goto LABEL_23;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 40;
    goto LABEL_3;
  }
  v5 = v3 + 48;
LABEL_3:
  v6 = *(float *)(*(_QWORD *)v5 + 28);
  v7 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v16 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    v18 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v18 + 1) <= 1)
    {
      ++v18;
      v17 -= 8;
      if (!v17)
        goto LABEL_4;
    }
  }
  else
  {
    v18 = *(uint64_t **)(v7 + 24);
  }
  v21 = (uint64_t *)(v8 + 8 * v16);
  if (v18 == v21)
    goto LABEL_4;
  v22 = *v18;
LABEL_32:
  if (!*(_QWORD *)(v22 + 8))
  {
    while (++v18 != v21)
    {
      v22 = *v18;
      if ((unint64_t)(*v18 + 1) > 1)
      {
        if (v18 != v21)
          goto LABEL_32;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 40;
    goto LABEL_5;
  }
  v9 = v7 + 48;
LABEL_5:
  v10 = *(float *)(a2 + 8);
  v11 = *(float *)(a2 + 12);
  if (a3 != 2)
  {
    v10 = 1.0;
    v11 = 1.0;
  }
  return (int)(float)(*(float *)(*(_QWORD *)v9 + 28) * v11) | ((unint64_t)(int)(float)(v6 * v10) << 32);
}

void WebCore::SVGFEMorphologyElement::createFilterEffect(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char **v37;
  char *v38;

  v4 = (_QWORD *)a1[29];
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v20 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = (uint64_t *)v4[3];
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_2;
    }
  }
  else
  {
    v22 = (uint64_t *)v4[3];
  }
  v29 = (uint64_t *)(v5 + 8 * v20);
  if (v22 == v29)
    goto LABEL_2;
  v30 = *v22;
LABEL_34:
  if (!*(_QWORD *)(v30 + 8))
  {
    while (++v22 != v29)
    {
      v30 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v29)
          goto LABEL_34;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 5;
    goto LABEL_3;
  }
  v6 = v4 + 6;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v8 = (_QWORD *)a1[30];
  v9 = v8[3];
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_4;
  v23 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    v25 = (uint64_t *)v8[3];
    while ((unint64_t)(*v25 + 1) <= 1)
    {
      ++v25;
      v24 -= 8;
      if (!v24)
        goto LABEL_4;
    }
  }
  else
  {
    v25 = (uint64_t *)v8[3];
  }
  v31 = (uint64_t *)(v9 + 8 * v23);
  if (v25 == v31)
    goto LABEL_4;
  v32 = *v25;
LABEL_43:
  if (!*(_QWORD *)(v32 + 8))
  {
    while (++v25 != v31)
    {
      v32 = *v25;
      if ((unint64_t)(*v25 + 1) > 1)
      {
        if (v25 != v31)
          goto LABEL_43;
        break;
      }
    }
LABEL_4:
    v10 = v8 + 5;
    goto LABEL_5;
  }
  v10 = v8 + 6;
LABEL_5:
  v11 = *v10;
  v12 = a1[31];
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13 || !*(_DWORD *)(v13 - 12))
    goto LABEL_6;
  v26 = *(unsigned int *)(v13 - 4);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    v28 = *(uint64_t **)(v12 + 24);
    while ((unint64_t)(*v28 + 1) <= 1)
    {
      ++v28;
      v27 -= 8;
      if (!v27)
        goto LABEL_6;
    }
  }
  else
  {
    v28 = *(uint64_t **)(v12 + 24);
  }
  v33 = (uint64_t *)(v13 + 8 * v26);
  if (v28 == v33)
    goto LABEL_6;
  v34 = *v28;
LABEL_52:
  if (!*(_QWORD *)(v34 + 8))
  {
    while (++v28 != v33)
    {
      v34 = *v28;
      if ((unint64_t)(*v28 + 1) > 1)
      {
        if (v28 != v33)
          goto LABEL_52;
        break;
      }
    }
LABEL_6:
    v14 = v12 + 40;
    goto LABEL_7;
  }
  v14 = v12 + 48;
LABEL_7:
  v15 = *(float *)(v11 + 28);
  v16 = *(float *)(*(_QWORD *)v14 + 28);
  v17 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v17 != -1)
  {
    v38 = &v36;
    v37 = &v38;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v18 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v35 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FEMorphology::create(v7, (const void **)&v35, (uint64_t *)&v38, v15, v16);
    v19 = (uint64_t)v38;
    CFRelease(v18);
  }
  else
  {
    WebCore::FEMorphology::create(v7, (const void **)&v35, (uint64_t *)&v38, v15, v16);
    v19 = (uint64_t)v38;
  }
  *a2 = v19;
}

uint64_t *WebCore::SVGFEOffsetElement::create@<X0>(WebCore::SVGFEOffsetElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v7;
  uint64_t *result;

  v7 = (uint64_t *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFEOffsetElement::SVGFEOffsetElement(v7, (_DWORD **)this, (uint64_t)a2);
  *a3 = result;
  return result;
}

_QWORD *WebCore::SVGFEOffsetElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  int v10;
  uint64_t v11;
  int v12;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 == 447)
  {
    v11 = a1[30];
LABEL_6:
    ++*(_DWORD *)(v11 + 8);
    WTF::String::toFloat(this, 0);
    *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v12;
    goto LABEL_7;
  }
  if (v10 != 518)
  {
    if (v10 != 446)
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    v11 = a1[29];
    goto LABEL_6;
  }
  v11 = a1[28];
  ++*(_DWORD *)(v11 + 8);
  WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setBaseValInternal(v11, this);
LABEL_7:
  if (*(_DWORD *)(v11 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  else
    --*(_DWORD *)(v11 + 8);
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

void WebCore::SVGFEOffsetElement::svgAttributeChanged(WebCore::SVGFEOffsetElement *this, const WebCore::QualifiedName *a2)
{
  int v4;
  void *v5;
  unsigned int *v6;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if ((v4 - 446) < 2)
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v6, (uint64_t)this);
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, a2);
    goto LABEL_5;
  }
  if (v4 == 518)
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v6, (uint64_t)this);
    WebCore::SVGElement::updateSVGRendererForElementChange(this);
LABEL_5:
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v6, v5);
    return;
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, a2);
}

uint64_t WebCore::SVGFEOffsetElement::setFilterEffectAttribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (*(_BYTE *)(a2 + 48) != 15)
  {
    __break(0xC471u);
    JUMPOUT(0x196649D48);
  }
  if (*a3 != WebCore::SVGNames::dxAttr)
  {
    if (*a3 != WebCore::SVGNames::dyAttr)
      return 0;
    v3 = *(_QWORD *)(a1 + 240);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4 && *(_DWORD *)(v4 - 12))
    {
      v15 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v15)
      {
        v16 = 8 * v15;
        v17 = *(uint64_t **)(v3 + 24);
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          ++v17;
          v16 -= 8;
          if (!v16)
            goto LABEL_5;
        }
      }
      else
      {
        v17 = *(uint64_t **)(v3 + 24);
      }
      v20 = (uint64_t *)(v4 + 8 * v15);
      if (v17 != v20)
      {
        v21 = *v17;
LABEL_39:
        if (*(_QWORD *)(v21 + 8))
        {
          v5 = v3 + 48;
LABEL_6:
          v6 = *(float *)(*(_QWORD *)v5 + 28);
          if (*(float *)(a2 + 68) != v6)
          {
            *(float *)(a2 + 68) = v6;
            return 1;
          }
          return 0;
        }
        while (++v17 != v20)
        {
          v21 = *v17;
          if ((unint64_t)(*v17 + 1) > 1)
          {
            if (v17 != v20)
              goto LABEL_39;
            break;
          }
        }
      }
    }
LABEL_5:
    v5 = v3 + 40;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_9;
  v12 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
        goto LABEL_9;
    }
  }
  else
  {
    v14 = *(uint64_t **)(v7 + 24);
  }
  v18 = (uint64_t *)(v8 + 8 * v12);
  if (v14 == v18)
    goto LABEL_9;
  v19 = *v14;
LABEL_30:
  if (!*(_QWORD *)(v19 + 8))
  {
    while (++v14 != v18)
    {
      v19 = *v14;
      if ((unint64_t)(*v14 + 1) > 1)
      {
        if (v14 != v18)
          goto LABEL_30;
        break;
      }
    }
LABEL_9:
    v9 = v7 + 40;
    goto LABEL_10;
  }
  v9 = v7 + 48;
LABEL_10:
  v10 = *(float *)(*(_QWORD *)v9 + 28);
  if (*(float *)(a2 + 64) != v10)
  {
    *(float *)(a2 + 64) = v10;
    return 1;
  }
  return 0;
}

BOOL WebCore::SVGFEOffsetElement::isIdentity(WebCore::SVGFEOffsetElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::SVGFEOffsetElement *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v1 = *((_QWORD *)this + 29);
  v3 = (uint64_t *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2
    && *(_DWORD *)(v2 - 12)
    && (v10 = this,
        v11 = *((_QWORD *)this + 29),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, &v15), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, &v13), this = v10, v1 = v11, v16 != v14))
  {
    v4 = v11 + 48;
  }
  else
  {
    v4 = v1 + 40;
  }
  if (*(float *)(*(_QWORD *)v4 + 28) != 0.0)
    return 0;
  v5 = *((_QWORD *)this + 30);
  v7 = (uint64_t *)(v5 + 24);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6
    && *(_DWORD *)(v6 - 12)
    && (v12 = *((_QWORD *)this + 30),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v7, &v15), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v7, &v13), v5 = v12, v16 != v14))
  {
    v8 = v12 + 48;
  }
  else
  {
    v8 = v5 + 40;
  }
  return *(float *)(*(_QWORD *)v8 + 28) == 0.0;
}

unint64_t WebCore::SVGFEOffsetElement::outsets(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 232);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v20 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_2;
    }
  }
  else
  {
    v22 = *(uint64_t **)(v3 + 24);
  }
  v26 = (uint64_t *)(v4 + 8 * v20);
  if (v22 == v26)
    goto LABEL_2;
  v27 = *v22;
LABEL_39:
  if (!*(_QWORD *)(v27 + 8))
  {
    while (++v22 != v26)
    {
      v27 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v26)
          goto LABEL_39;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 40;
    goto LABEL_3;
  }
  v5 = v3 + 48;
LABEL_3:
  v6 = *(float *)(*(_QWORD *)v5 + 28);
  v7 = *(_QWORD *)(a1 + 240);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v23 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    v25 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v25 + 1) <= 1)
    {
      ++v25;
      v24 -= 8;
      if (!v24)
        goto LABEL_4;
    }
  }
  else
  {
    v25 = *(uint64_t **)(v7 + 24);
  }
  v28 = (uint64_t *)(v8 + 8 * v23);
  if (v25 == v28)
    goto LABEL_4;
  v29 = *v25;
LABEL_48:
  if (!*(_QWORD *)(v29 + 8))
  {
    while (++v25 != v28)
    {
      v29 = *v25;
      if ((unint64_t)(*v25 + 1) > 1)
      {
        if (v25 != v28)
          goto LABEL_48;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 40;
    goto LABEL_5;
  }
  v9 = v7 + 48;
LABEL_5:
  v10 = *(float *)(a2 + 8);
  if (a3 != 2)
    v10 = 1.0;
  v11 = v6 * v10;
  if (a3 == 2)
    v12 = *(float *)(a2 + 12);
  else
    v12 = 1.0;
  v13 = *(float *)(*(_QWORD *)v9 + 28) * v12;
  v14 = ceilf(v11);
  if (v14 > -2147500000.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147500000.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v17 = ceilf(v13);
  if (v17 >= 2147500000.0)
  {
    v18 = 0;
  }
  else if (v17 <= -2147500000.0)
  {
    v18 = 0x80000000;
  }
  else if ((int)v17 < 0)
  {
    v18 = -(int)v17;
  }
  else
  {
    v18 = 0;
  }
  return v18 | ((unint64_t)(v16 & ~(v16 >> 31)) << 32);
}

void WebCore::SVGFEOffsetElement::createFilterEffect(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  float v4;
  float v5;
  WebCore::DestinationColorSpace *v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  CFTypeRef v10;
  CFTypeRef cf;
  uint64_t v12;

  v4 = WebCore::SVGGeometryElement::pathLength(*(WebCore::SVGGeometryElement **)(a1 + 232));
  v5 = WebCore::SVGGeometryElement::pathLength(*(WebCore::SVGGeometryElement **)(a1 + 240));
  v7 = (const void *)*WebCore::DestinationColorSpace::SRGB(v6);
  cf = v7;
  if (v7)
    CFRetain(v7);
  WebCore::FEOffset::create(&cf, &v12, v4, v5);
  v8 = v12;
  v12 = 0;
  *a2 = v8;
  WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref(&v12, v9);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
}

_QWORD *WebCore::SVGFEPointLightElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFELightElement::SVGFELightElement(v6, a1, a2);
  *result = off_1E34628B0;
  result[14] = &unk_1E3462DE8;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGFEPointLightElement::lightSource@<X0>(WebCore::SVGFEPointLightElement *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v3 = (_QWORD *)*((_QWORD *)this + 24);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v17 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17;
    v19 = (uint64_t *)v3[3];
    while ((unint64_t)(*v19 + 1) <= 1)
    {
      ++v19;
      v18 -= 8;
      if (!v18)
        goto LABEL_2;
    }
  }
  else
  {
    v19 = (uint64_t *)v3[3];
  }
  v26 = (uint64_t *)(v4 + 8 * v17);
  if (v19 == v26)
    goto LABEL_2;
  v27 = *v19;
LABEL_29:
  if (!*(_QWORD *)(v27 + 8))
  {
    while (++v19 != v26)
    {
      v27 = *v19;
      if ((unint64_t)(*v19 + 1) > 1)
      {
        if (v19 != v26)
          goto LABEL_29;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = *v5;
  v7 = *((_QWORD *)this + 25);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v20 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_4;
    }
  }
  else
  {
    v22 = *(uint64_t **)(v7 + 24);
  }
  v28 = (uint64_t *)(v8 + 8 * v20);
  if (v22 == v28)
    goto LABEL_4;
  v29 = *v22;
LABEL_38:
  if (!*(_QWORD *)(v29 + 8))
  {
    while (++v22 != v28)
    {
      v29 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v28)
          goto LABEL_38;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 40;
    goto LABEL_5;
  }
  v9 = v7 + 48;
LABEL_5:
  v10 = *(_DWORD *)(v6 + 28);
  v11 = *(_DWORD *)(*(_QWORD *)v9 + 28);
  v12 = *((_QWORD *)this + 26);
  v13 = *(_QWORD *)(v12 + 24);
  if (v13 && *(_DWORD *)(v13 - 12))
  {
    v23 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v23)
    {
      v24 = 8 * v23;
      v25 = *(uint64_t **)(v12 + 24);
      while ((unint64_t)(*v25 + 1) <= 1)
      {
        ++v25;
        v24 -= 8;
        if (!v24)
          goto LABEL_6;
      }
    }
    else
    {
      v25 = *(uint64_t **)(v12 + 24);
    }
    v30 = (uint64_t *)(v13 + 8 * v23);
    if (v25 != v30)
    {
      v31 = *v25;
LABEL_47:
      if (*(_QWORD *)(v31 + 8))
      {
        v14 = v12 + 48;
        goto LABEL_7;
      }
      while (++v25 != v30)
      {
        v31 = *v25;
        if ((unint64_t)(*v25 + 1) > 1)
        {
          if (v25 != v30)
            goto LABEL_47;
          break;
        }
      }
    }
  }
LABEL_6:
  v14 = v12 + 40;
LABEL_7:
  v15 = *(_DWORD *)(*(_QWORD *)v14 + 28);
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)result = off_1E3416598;
  *(_DWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 20) = v11;
  *(_DWORD *)(result + 24) = v15;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 28) = 0;
  *a2 = result;
  return result;
}

void WebCore::SVGFESpecularLightingElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char **v23;
  char *v24;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E3462E20;
  v6[14] = (uint64_t)&unk_1E3463380;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3464EC0;
  *((_QWORD *)v7 + 1) = v6;
  v24 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v24);
  v8 = (uint64_t)v24;
  v24 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E3462E20;
  v6[14] = (uint64_t)&unk_1E3463380;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 1065353216;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E34566C8;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E3456748;
  *(_DWORD *)(v14 + 28) = 1065353216;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 1065353216;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)v17 = &off_1E34566C8;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E3456748;
  *(_DWORD *)(v18 + 28) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  v6[32] = v17;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)v19 = &off_1E34566C8;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_WORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E3456748;
  *(_DWORD *)(v20 + 28) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  v6[33] = v19;
  v21 = atomic_load(&WebCore::SVGFESpecularLightingElement::SVGFESpecularLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v21 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WebCore::SVGFESpecularLightingElement::SVGFESpecularLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFESpecularLightingElement::SVGFESpecularLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFESpecularLightingElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 <= 0x347)
  {
    if (v10 == 518)
    {
      v11 = a1[28];
      v24 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = v24 + 1;
      v26 = *(_QWORD *)(v11 + 40);
      v27 = *(_DWORD **)this;
      if (*(_QWORD *)this)
        *v27 += 2;
      v28 = *(WTF::StringImpl **)(v26 + 32);
      *(_QWORD *)(v26 + 32) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, a2);
          v24 = *(_DWORD *)(v11 + 8) - 1;
          if (*(_DWORD *)(v11 + 8) != 1)
            goto LABEL_18;
          goto LABEL_26;
        }
        *(_DWORD *)v28 -= 2;
      }
      if (v24)
        goto LABEL_18;
LABEL_26:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    }
    if (v10 == 535)
    {
      v12 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = WebCore::parseNumberOptionalNumber(v13, v14);
      if (v16)
      {
        v17 = v15;
        v18 = HIDWORD(v15);
        v19 = a1[32];
        v20 = *(_DWORD *)(v19 + 8);
        *(_DWORD *)(v19 + 8) = v20 + 1;
        *(_DWORD *)(*(_QWORD *)(v19 + 40) + 28) = v17;
        if (v20)
          *(_DWORD *)(v19 + 8) = v20;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v21 = a1[33];
        v22 = *(_DWORD *)(v21 + 8);
        *(_DWORD *)(v21 + 8) = v22 + 1;
        *(_DWORD *)(*(_QWORD *)(v21 + 40) + 28) = v18;
        if (v22)
          *(_DWORD *)(v21 + 8) = v22;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
  }
  switch(v10)
  {
    case 0x348u:
      v11 = a1[29];
      goto LABEL_17;
    case 0x349u:
      v11 = a1[30];
LABEL_17:
      ++*(_DWORD *)(v11 + 8);
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v11 + 40) + 28) = v23;
      v24 = *(_DWORD *)(v11 + 8) - 1;
      if (*(_DWORD *)(v11 + 8) != 1)
      {
LABEL_18:
        *(_DWORD *)(v11 + 8) = v24;
        return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
      }
      goto LABEL_26;
    case 0x366u:
      v11 = a1[31];
      goto LABEL_17;
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

uint64_t WebCore::SVGFESpecularLightingElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t n;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t k;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t m;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t kk;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t jj;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t mm;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  uint64_t ii;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;

  if (*(_BYTE *)(a2 + 48) != 16)
  {
    __break(0xC471u);
    JUMPOUT(0x19664B388);
  }
  v5 = 0;
  v6 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v6 > 0x30A)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) > 0x365u)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) <= 0x3AAu)
      {
        if (v6 != 870)
        {
          if (v6 != 929)
            return v5;
          v7 = *(_DWORD **)(a2 + 96);
          ++v7[2];
          v8 = (uint64_t)(a1 + 10);
          do
          {
            v9 = *(_QWORD *)v8;
            v10 = *(_WORD *)(*(_QWORD *)v8 + 28);
            v8 = *(_QWORD *)v8 + 56;
          }
          while ((v10 & 0x20) == 0);
          v11 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
          for (i = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24); i != v11; i = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24))
          {
            if (i == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
              || i == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
            {
              break;
            }
            do
              v9 = *(_QWORD *)(v9 + 56);
            while ((*(_WORD *)(v9 + 28) & 0x20) == 0);
          }
          v13 = *(_QWORD *)(v9 + 192);
          v14 = *(_QWORD *)(v13 + 24);
          if (v14 && *(_DWORD *)(v14 - 12))
          {
            v109 = *(unsigned int *)(v14 - 4);
            if ((_DWORD)v109)
            {
              v110 = 8 * v109;
              v111 = *(uint64_t **)(v13 + 24);
              while ((unint64_t)(*v111 + 1) <= 1)
              {
                ++v111;
                v110 -= 8;
                if (!v110)
                  goto LABEL_15;
              }
            }
            else
            {
              v111 = *(uint64_t **)(v13 + 24);
            }
            v142 = (uint64_t *)(v14 + 8 * v109);
            if (v111 != v142)
            {
              v143 = *v111;
LABEL_245:
              if (*(_QWORD *)(v143 + 8))
              {
                v15 = v13 + 48;
                goto LABEL_16;
              }
              while (++v111 != v142)
              {
                v143 = *v111;
                if ((unint64_t)(*v111 + 1) > 1)
                {
                  if (v111 != v142)
                    goto LABEL_245;
                  break;
                }
              }
            }
          }
LABEL_15:
          v15 = v13 + 40;
LABEL_16:
          a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v15 + 28);
          v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 64))(v7, a4);
          goto LABEL_137;
        }
        v43 = a1[31];
        v44 = *(_QWORD *)(v43 + 24);
        if (v44 && *(_DWORD *)(v44 - 12))
        {
          v100 = *(unsigned int *)(v44 - 4);
          if ((_DWORD)v100)
          {
            v101 = 8 * v100;
            v102 = *(uint64_t **)(v43 + 24);
            while ((unint64_t)(*v102 + 1) <= 1)
            {
              ++v102;
              v101 -= 8;
              if (!v101)
                goto LABEL_66;
            }
          }
          else
          {
            v102 = *(uint64_t **)(v43 + 24);
          }
          v136 = (uint64_t *)(v44 + 8 * v100);
          if (v102 != v136)
          {
            v137 = *v102;
LABEL_218:
            if (*(_QWORD *)(v137 + 8))
            {
              v45 = v43 + 48;
LABEL_67:
              v46 = *(float *)(*(_QWORD *)v45 + 28);
              if (*(float *)(a2 + 72) != v46)
              {
                *(float *)(a2 + 72) = v46;
                return 1;
              }
              return 0;
            }
            while (++v102 != v136)
            {
              v137 = *v102;
              if ((unint64_t)(*v102 + 1) > 1)
              {
                if (v102 != v136)
                  goto LABEL_218;
                break;
              }
            }
          }
        }
LABEL_66:
        v45 = v43 + 40;
        goto LABEL_67;
      }
      if (v6 != 939)
      {
        if (v6 != 941)
          return v5;
        v7 = *(_DWORD **)(a2 + 96);
        ++v7[2];
        v35 = (uint64_t)(a1 + 10);
        do
        {
          v36 = *(_QWORD *)v35;
          v37 = *(_WORD *)(*(_QWORD *)v35 + 28);
          v35 = *(_QWORD *)v35 + 56;
        }
        while ((v37 & 0x20) == 0);
        v38 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
        for (j = *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24); j != v38; j = *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24))
        {
          if (j == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
            || j == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
          {
            break;
          }
          do
            v36 = *(_QWORD *)(v36 + 56);
          while ((*(_WORD *)(v36 + 28) & 0x20) == 0);
        }
        v40 = *(_QWORD *)(v36 + 208);
        v41 = *(_QWORD *)(v40 + 24);
        if (v41 && *(_DWORD *)(v41 - 12))
        {
          v112 = *(unsigned int *)(v41 - 4);
          if ((_DWORD)v112)
          {
            v113 = 8 * v112;
            v114 = *(uint64_t **)(v40 + 24);
            while ((unint64_t)(*v114 + 1) <= 1)
            {
              ++v114;
              v113 -= 8;
              if (!v113)
                goto LABEL_63;
            }
          }
          else
          {
            v114 = *(uint64_t **)(v40 + 24);
          }
          v144 = (uint64_t *)(v41 + 8 * v112);
          if (v114 != v144)
          {
            v145 = *v114;
LABEL_254:
            if (*(_QWORD *)(v145 + 8))
            {
              v42 = v40 + 48;
              goto LABEL_64;
            }
            while (++v114 != v144)
            {
              v145 = *v114;
              if ((unint64_t)(*v114 + 1) > 1)
              {
                if (v114 != v144)
                  goto LABEL_254;
                break;
              }
            }
          }
        }
LABEL_63:
        v42 = v40 + 40;
LABEL_64:
        a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v42 + 28);
        v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 80))(v7, a4);
        goto LABEL_137;
      }
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v47 = (uint64_t)(a1 + 10);
      do
      {
        v48 = *(_QWORD *)v47;
        v49 = *(_WORD *)(*(_QWORD *)v47 + 28);
        v47 = *(_QWORD *)v47 + 56;
      }
      while ((v49 & 0x20) == 0);
      v50 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (k = *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24); k != v50; k = *(_QWORD *)(*(_QWORD *)(v48 + 96) + 24))
      {
        if (k == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || k == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v48 = *(_QWORD *)(v48 + 56);
        while ((*(_WORD *)(v48 + 28) & 0x20) == 0);
      }
      v52 = *(_QWORD *)(v48 + 200);
      v53 = *(_QWORD *)(v52 + 24);
      if (v53 && *(_DWORD *)(v53 - 12))
      {
        v103 = *(unsigned int *)(v53 - 4);
        if ((_DWORD)v103)
        {
          v104 = 8 * v103;
          v105 = *(uint64_t **)(v52 + 24);
          while ((unint64_t)(*v105 + 1) <= 1)
          {
            ++v105;
            v104 -= 8;
            if (!v104)
              goto LABEL_77;
          }
        }
        else
        {
          v105 = *(uint64_t **)(v52 + 24);
        }
        v138 = (uint64_t *)(v53 + 8 * v103);
        if (v105 != v138)
        {
          v139 = *v105;
LABEL_227:
          if (*(_QWORD *)(v139 + 8))
          {
            v54 = v52 + 48;
            goto LABEL_78;
          }
          while (++v105 != v138)
          {
            v139 = *v105;
            if ((unint64_t)(*v105 + 1) > 1)
            {
              if (v105 != v138)
                goto LABEL_227;
              break;
            }
          }
        }
      }
LABEL_77:
      v54 = v52 + 40;
LABEL_78:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v54 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 72))(v7, a4);
      goto LABEL_137;
    }
    if (v6 != 779)
    {
      if (v6 != 840)
      {
        if (v6 != 841)
          return v5;
        v21 = a1[30];
        v22 = *(_QWORD *)(v21 + 24);
        if (v22 && *(_DWORD *)(v22 - 12))
        {
          v130 = *(unsigned int *)(v22 - 4);
          if ((_DWORD)v130)
          {
            v131 = 8 * v130;
            v132 = *(uint64_t **)(v21 + 24);
            while ((unint64_t)(*v132 + 1) <= 1)
            {
              ++v132;
              v131 -= 8;
              if (!v131)
                goto LABEL_32;
            }
          }
          else
          {
            v132 = *(uint64_t **)(v21 + 24);
          }
          v156 = (uint64_t *)(v22 + 8 * v130);
          if (v132 != v156)
          {
            v157 = *v132;
LABEL_308:
            if (*(_QWORD *)(v157 + 8))
            {
              v23 = v21 + 48;
LABEL_33:
              v24 = *(float *)(*(_QWORD *)v23 + 28);
              v25 = 1.0;
              if (v24 > 1.0)
                v25 = *(float *)(*(_QWORD *)v23 + 28);
              if (v24 >= 128.0)
                v26 = 128.0;
              else
                v26 = v25;
              if (*(float *)(a2 + 84) != v26)
              {
                *(float *)(a2 + 84) = v26;
                return 1;
              }
              return 0;
            }
            while (++v132 != v156)
            {
              v157 = *v132;
              if ((unint64_t)(*v132 + 1) > 1)
              {
                if (v132 != v156)
                  goto LABEL_308;
                break;
              }
            }
          }
        }
LABEL_32:
        v23 = v21 + 40;
        goto LABEL_33;
      }
      v63 = a1[29];
      v64 = *(_QWORD *)(v63 + 24);
      if (v64 && *(_DWORD *)(v64 - 12))
      {
        v115 = *(unsigned int *)(v64 - 4);
        if ((_DWORD)v115)
        {
          v116 = 8 * v115;
          v117 = *(uint64_t **)(v63 + 24);
          while ((unint64_t)(*v117 + 1) <= 1)
          {
            ++v117;
            v116 -= 8;
            if (!v116)
              goto LABEL_90;
          }
        }
        else
        {
          v117 = *(uint64_t **)(v63 + 24);
        }
        v146 = (uint64_t *)(v64 + 8 * v115);
        if (v117 != v146)
        {
          v147 = *v117;
LABEL_263:
          if (*(_QWORD *)(v147 + 8))
          {
            v65 = v63 + 48;
LABEL_91:
            v66 = *(float *)(*(_QWORD *)v65 + 28);
            if (v66 < 0.0)
              v66 = 0.0;
            if (*(float *)(a2 + 80) != v66)
            {
              *(float *)(a2 + 80) = v66;
              return 1;
            }
            return 0;
          }
          while (++v117 != v146)
          {
            v147 = *v117;
            if ((unint64_t)(*v117 + 1) > 1)
            {
              if (v117 != v146)
                goto LABEL_263;
              break;
            }
          }
        }
      }
LABEL_90:
      v65 = v63 + 40;
      goto LABEL_91;
    }
    v7 = *(_DWORD **)(a2 + 96);
    ++v7[2];
    v55 = (uint64_t)(a1 + 10);
    do
    {
      v56 = *(_QWORD *)v55;
      v57 = *(_WORD *)(*(_QWORD *)v55 + 28);
      v55 = *(_QWORD *)v55 + 56;
    }
    while ((v57 & 0x20) == 0);
    v58 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
    for (m = *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24); m != v58; m = *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24))
    {
      if (m == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
        || m == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
      {
        break;
      }
      do
        v56 = *(_QWORD *)(v56 + 56);
      while ((*(_WORD *)(v56 + 28) & 0x20) == 0);
    }
    v60 = *(_QWORD *)(v56 + 232);
    v61 = *(_QWORD *)(v60 + 24);
    if (v61 && *(_DWORD *)(v61 - 12))
    {
      v106 = *(unsigned int *)(v61 - 4);
      if ((_DWORD)v106)
      {
        v107 = 8 * v106;
        v108 = *(uint64_t **)(v60 + 24);
        while ((unint64_t)(*v108 + 1) <= 1)
        {
          ++v108;
          v107 -= 8;
          if (!v107)
            goto LABEL_87;
        }
      }
      else
      {
        v108 = *(uint64_t **)(v60 + 24);
      }
      v140 = (uint64_t *)(v61 + 8 * v106);
      if (v108 != v140)
      {
        v141 = *v108;
LABEL_236:
        if (*(_QWORD *)(v141 + 8))
        {
          v62 = v60 + 48;
          goto LABEL_88;
        }
        while (++v108 != v140)
        {
          v141 = *v108;
          if ((unint64_t)(*v108 + 1) > 1)
          {
            if (v108 != v140)
              goto LABEL_236;
            break;
          }
        }
      }
    }
LABEL_87:
    v62 = v60 + 40;
LABEL_88:
    a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v62 + 28);
    v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 104))(v7, a4);
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a3 + 10) > 0x224u)
  {
    if (v6 != 549)
    {
      if (v6 != 777)
      {
        if (v6 != 778)
          return v5;
        v7 = *(_DWORD **)(a2 + 96);
        ++v7[2];
        v27 = (uint64_t)(a1 + 10);
        do
        {
          v28 = *(_QWORD *)v27;
          v29 = *(_WORD *)(*(_QWORD *)v27 + 28);
          v27 = *(_QWORD *)v27 + 56;
        }
        while ((v29 & 0x20) == 0);
        v30 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
        for (n = *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24); n != v30; n = *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24))
        {
          if (n == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
            || n == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
          {
            break;
          }
          do
            v28 = *(_QWORD *)(v28 + 56);
          while ((*(_WORD *)(v28 + 28) & 0x20) == 0);
        }
        v32 = *(_QWORD *)(v28 + 224);
        v33 = *(_QWORD *)(v32 + 24);
        if (v33 && *(_DWORD *)(v33 - 12))
        {
          v133 = *(unsigned int *)(v33 - 4);
          if ((_DWORD)v133)
          {
            v134 = 8 * v133;
            v135 = *(uint64_t **)(v32 + 24);
            while ((unint64_t)(*v135 + 1) <= 1)
            {
              ++v135;
              v134 -= 8;
              if (!v134)
                goto LABEL_51;
            }
          }
          else
          {
            v135 = *(uint64_t **)(v32 + 24);
          }
          v158 = (uint64_t *)(v33 + 8 * v133);
          if (v135 != v158)
          {
            v159 = *v135;
LABEL_317:
            if (*(_QWORD *)(v159 + 8))
            {
              v34 = v32 + 48;
              goto LABEL_52;
            }
            while (++v135 != v158)
            {
              v159 = *v135;
              if ((unint64_t)(*v135 + 1) > 1)
              {
                if (v135 != v158)
                  goto LABEL_317;
                break;
              }
            }
          }
        }
LABEL_51:
        v34 = v32 + 40;
LABEL_52:
        a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v34 + 28);
        v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 96))(v7, a4);
        goto LABEL_137;
      }
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v91 = (uint64_t)(a1 + 10);
      do
      {
        v92 = *(_QWORD *)v91;
        v93 = *(_WORD *)(*(_QWORD *)v91 + 28);
        v91 = *(_QWORD *)v91 + 56;
      }
      while ((v93 & 0x20) == 0);
      v94 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (ii = *(_QWORD *)(*(_QWORD *)(v92 + 96) + 24); ii != v94; ii = *(_QWORD *)(*(_QWORD *)(v92 + 96) + 24))
      {
        if (ii == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || ii == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v92 = *(_QWORD *)(v92 + 56);
        while ((*(_WORD *)(v92 + 28) & 0x20) == 0);
      }
      v96 = *(_QWORD *)(v92 + 216);
      v97 = *(_QWORD *)(v96 + 24);
      if (v97 && *(_DWORD *)(v97 - 12))
      {
        v127 = *(unsigned int *)(v97 - 4);
        if ((_DWORD)v127)
        {
          v128 = 8 * v127;
          v129 = *(uint64_t **)(v96 + 24);
          while ((unint64_t)(*v129 + 1) <= 1)
          {
            ++v129;
            v128 -= 8;
            if (!v128)
              goto LABEL_135;
          }
        }
        else
        {
          v129 = *(uint64_t **)(v96 + 24);
        }
        v154 = (uint64_t *)(v97 + 8 * v127);
        if (v129 != v154)
        {
          v155 = *v129;
LABEL_299:
          if (*(_QWORD *)(v155 + 8))
          {
            v98 = v96 + 48;
            goto LABEL_136;
          }
          while (++v129 != v154)
          {
            v155 = *v129;
            if ((unint64_t)(*v129 + 1) > 1)
            {
              if (v129 != v154)
                goto LABEL_299;
              break;
            }
          }
        }
      }
LABEL_135:
      v98 = v96 + 40;
LABEL_136:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v98 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 88))(v7, a4);
LABEL_137:
      v5 = v16;
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
      return v5;
    }
    v7 = *(_DWORD **)(a2 + 96);
    ++v7[2];
    v75 = (uint64_t)(a1 + 10);
    do
    {
      v76 = *(_QWORD *)v75;
      v77 = *(_WORD *)(*(_QWORD *)v75 + 28);
      v75 = *(_QWORD *)v75 + 56;
    }
    while ((v77 & 0x20) == 0);
    v78 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
    for (jj = *(_QWORD *)(*(_QWORD *)(v76 + 96) + 24); jj != v78; jj = *(_QWORD *)(*(_QWORD *)(v76 + 96) + 24))
    {
      if (jj == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
        || jj == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
      {
        break;
      }
      do
        v76 = *(_QWORD *)(v76 + 56);
      while ((*(_WORD *)(v76 + 28) & 0x20) == 0);
    }
    v80 = *(_QWORD *)(v76 + 248);
    v81 = *(_QWORD *)(v80 + 24);
    if (v81 && *(_DWORD *)(v81 - 12))
    {
      v121 = *(unsigned int *)(v81 - 4);
      if ((_DWORD)v121)
      {
        v122 = 8 * v121;
        v123 = *(uint64_t **)(v80 + 24);
        while ((unint64_t)(*v123 + 1) <= 1)
        {
          ++v123;
          v122 -= 8;
          if (!v122)
            goto LABEL_115;
        }
      }
      else
      {
        v123 = *(uint64_t **)(v80 + 24);
      }
      v150 = (uint64_t *)(v81 + 8 * v121);
      if (v123 != v150)
      {
        v151 = *v123;
LABEL_281:
        if (*(_QWORD *)(v151 + 8))
        {
          v82 = v80 + 48;
          goto LABEL_116;
        }
        while (++v123 != v150)
        {
          v151 = *v123;
          if ((unint64_t)(*v123 + 1) > 1)
          {
            if (v123 != v150)
              goto LABEL_281;
            break;
          }
        }
      }
    }
LABEL_115:
    v82 = v80 + 40;
LABEL_116:
    a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v82 + 28);
    v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 120))(v7, a4);
    goto LABEL_137;
  }
  switch(v6)
  {
    case 0x16Eu:
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v67 = (uint64_t)(a1 + 10);
      do
      {
        v68 = *(_QWORD *)v67;
        v69 = *(_WORD *)(*(_QWORD *)v67 + 28);
        v67 = *(_QWORD *)v67 + 56;
      }
      while ((v69 & 0x20) == 0);
      v70 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (kk = *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24); kk != v70; kk = *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24))
      {
        if (kk == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || kk == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v68 = *(_QWORD *)(v68 + 56);
        while ((*(_WORD *)(v68 + 28) & 0x20) == 0);
      }
      v72 = *(_QWORD *)(v68 + 176);
      v73 = *(_QWORD *)(v72 + 24);
      if (v73 && *(_DWORD *)(v73 - 12))
      {
        v118 = *(unsigned int *)(v73 - 4);
        if ((_DWORD)v118)
        {
          v119 = 8 * v118;
          v120 = *(uint64_t **)(v72 + 24);
          while ((unint64_t)(*v120 + 1) <= 1)
          {
            ++v120;
            v119 -= 8;
            if (!v119)
              goto LABEL_105;
          }
        }
        else
        {
          v120 = *(uint64_t **)(v72 + 24);
        }
        v148 = (uint64_t *)(v73 + 8 * v118);
        if (v120 != v148)
        {
          v149 = *v120;
LABEL_272:
          if (*(_QWORD *)(v149 + 8))
          {
            v74 = v72 + 48;
            goto LABEL_106;
          }
          while (++v120 != v148)
          {
            v149 = *v120;
            if ((unint64_t)(*v120 + 1) > 1)
            {
              if (v120 != v148)
                goto LABEL_272;
              break;
            }
          }
        }
      }
LABEL_105:
      v74 = v72 + 40;
LABEL_106:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v74 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 48))(v7, a4);
      goto LABEL_137;
    case 0x1C1u:
      v7 = *(_DWORD **)(a2 + 96);
      ++v7[2];
      v83 = (uint64_t)(a1 + 10);
      do
      {
        v84 = *(_QWORD *)v83;
        v85 = *(_WORD *)(*(_QWORD *)v83 + 28);
        v83 = *(_QWORD *)v83 + 56;
      }
      while ((v85 & 0x20) == 0);
      v86 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
      for (mm = *(_QWORD *)(*(_QWORD *)(v84 + 96) + 24); mm != v86; mm = *(_QWORD *)(*(_QWORD *)(v84 + 96) + 24))
      {
        if (mm == *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
          || mm == *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
        {
          break;
        }
        do
          v84 = *(_QWORD *)(v84 + 56);
        while ((*(_WORD *)(v84 + 28) & 0x20) == 0);
      }
      v88 = *(_QWORD *)(v84 + 184);
      v89 = *(_QWORD *)(v88 + 24);
      if (v89 && *(_DWORD *)(v89 - 12))
      {
        v124 = *(unsigned int *)(v89 - 4);
        if ((_DWORD)v124)
        {
          v125 = 8 * v124;
          v126 = *(uint64_t **)(v88 + 24);
          while ((unint64_t)(*v126 + 1) <= 1)
          {
            ++v126;
            v125 -= 8;
            if (!v125)
              goto LABEL_125;
          }
        }
        else
        {
          v126 = *(uint64_t **)(v88 + 24);
        }
        v152 = (uint64_t *)(v89 + 8 * v124);
        if (v126 != v152)
        {
          v153 = *v126;
LABEL_290:
          if (*(_QWORD *)(v153 + 8))
          {
            v90 = v88 + 48;
            goto LABEL_126;
          }
          while (++v126 != v152)
          {
            v153 = *v126;
            if ((unint64_t)(*v126 + 1) > 1)
            {
              if (v126 != v152)
                goto LABEL_290;
              break;
            }
          }
        }
      }
LABEL_125:
      v90 = v88 + 40;
LABEL_126:
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v90 + 28);
      v16 = (*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)v7 + 56))(v7, a4);
      goto LABEL_137;
    case 0x224u:
      if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19664B3A8);
      }
      WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)((a1[8] & 0xFFFFFFFFFFFFLL) + 80), (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x88) + 56) + 24), (WebCore::Color *)&v160);
      v5 = WebCore::FEFlood::setFloodColor((WebCore::FEFlood *)a2, (const WebCore::Color *)&v160);
      if ((v160 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v17);
        }
      }
      break;
  }
  return v5;
}

void WebCore::SVGFESpecularLightingElement::svgAttributeChanged(WebCore::SVGFESpecularLightingElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;

  if ((byte_1ECE857C8 & 1) != 0)
  {
    v4 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE857C0;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v5 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  }
  else
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = this;
      *(_BYTE *)(v6 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v6;
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v21 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v21)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v21));
          v22 = *(WTF **)(v9 + 16);
          if (v22)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v22, v7);
          }
          WTF::fastFree((WTF *)v9, v7);
        }
      }
    }
    v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    if (*a2 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v15, this);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    else
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, (const WebCore::QualifiedName *)a2);
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v14);
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v12);
      v19 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v19)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v19));
      v20 = *(WTF **)(v12 + 16);
      if (v20)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v20, v16);
      }
      WTF::fastFree((WTF *)v12, v16);
    }
  }
}

unsigned int *WebCore::SVGFESpecularLightingElement::createFilterEffect@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  _WORD *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  char v68;
  CFTypeRef *v69;
  char *v70;

  v4 = (_WORD *)*((_QWORD *)result + 10);
  if (!v4)
  {
LABEL_5:
    *a3 = 0;
    return result;
  }
  v5 = result;
  while ((v4[14] & 0x20) == 0)
  {
    v4 = (_WORD *)*((_QWORD *)v4 + 7);
    if (!v4)
      goto LABEL_5;
  }
  v6 = *(_QWORD *)(WebCore::SVGNames::feDistantLightTag + 24);
  v7 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
  if (v7 != v6)
  {
LABEL_8:
    if (v7 != *(_QWORD *)(WebCore::SVGNames::fePointLightTag + 24)
      && v7 != *(_QWORD *)(WebCore::SVGNames::feSpotLightTag + 24))
    {
      while (1)
      {
        v4 = (_WORD *)*((_QWORD *)v4 + 7);
        if (!v4)
          goto LABEL_5;
        if ((v4[14] & 0x20) != 0)
        {
          v7 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
          if (v7 != v6)
            goto LABEL_8;
          break;
        }
      }
    }
  }
  v8 = *((_DWORD *)v4 + 6);
  *((_DWORD *)v4 + 6) = v8 + 2;
  v9 = *((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19664BD94);
    }
    ++*(_DWORD *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    (*(void (**)(unsigned int **__return_ptr, _WORD *))(*(_QWORD *)v4 + 1312))(&v67, v4);
    WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)(v9 + 80), (const WebCore::StyleColor *)(*(_QWORD *)(*(_QWORD *)(v9 + 136) + 56) + 24), (WebCore::Color *)&v66);
    v10 = (_QWORD *)*((_QWORD *)v5 + 31);
    v11 = v10[3];
    if (v11 && *(_DWORD *)(v11 - 12))
    {
      v38 = *(unsigned int *)(v11 - 4);
      if ((_DWORD)v38)
      {
        v39 = 8 * v38;
        v40 = (uint64_t *)v10[3];
        while ((unint64_t)(*v40 + 1) <= 1)
        {
          ++v40;
          v39 -= 8;
          if (!v39)
            goto LABEL_16;
        }
      }
      else
      {
        v40 = (uint64_t *)v10[3];
      }
      v53 = (uint64_t *)(v11 + 8 * v38);
      if (v40 != v53)
      {
        v54 = *v40;
LABEL_76:
        if (*(_QWORD *)(v54 + 8))
        {
          v12 = v10 + 6;
LABEL_17:
          v13 = (_QWORD *)*((_QWORD *)v5 + 29);
          v14 = v13[3];
          if (v14 && *(_DWORD *)(v14 - 12))
          {
            v41 = *(unsigned int *)(v14 - 4);
            if ((_DWORD)v41)
            {
              v42 = 8 * v41;
              v43 = (uint64_t *)v13[3];
              while ((unint64_t)(*v43 + 1) <= 1)
              {
                ++v43;
                v42 -= 8;
                if (!v42)
                  goto LABEL_18;
              }
            }
            else
            {
              v43 = (uint64_t *)v13[3];
            }
            v55 = (uint64_t *)(v14 + 8 * v41);
            if (v43 != v55)
            {
              v56 = *v43;
LABEL_85:
              if (*(_QWORD *)(v56 + 8))
              {
                v15 = v13 + 6;
LABEL_19:
                v16 = (_QWORD *)*((_QWORD *)v5 + 30);
                v17 = v16[3];
                if (v17 && *(_DWORD *)(v17 - 12))
                {
                  v44 = *(unsigned int *)(v17 - 4);
                  if ((_DWORD)v44)
                  {
                    v45 = 8 * v44;
                    v46 = (uint64_t *)v16[3];
                    while ((unint64_t)(*v46 + 1) <= 1)
                    {
                      ++v46;
                      v45 -= 8;
                      if (!v45)
                        goto LABEL_20;
                    }
                  }
                  else
                  {
                    v46 = (uint64_t *)v16[3];
                  }
                  v57 = (uint64_t *)(v17 + 8 * v44);
                  if (v46 != v57)
                  {
                    v58 = *v46;
LABEL_94:
                    if (*(_QWORD *)(v58 + 8))
                    {
                      v18 = v16 + 6;
LABEL_21:
                      v19 = (_QWORD *)*((_QWORD *)v5 + 32);
                      v20 = v19[3];
                      if (v20 && *(_DWORD *)(v20 - 12))
                      {
                        v47 = *(unsigned int *)(v20 - 4);
                        if ((_DWORD)v47)
                        {
                          v48 = 8 * v47;
                          v49 = (uint64_t *)v19[3];
                          while ((unint64_t)(*v49 + 1) <= 1)
                          {
                            ++v49;
                            v48 -= 8;
                            if (!v48)
                              goto LABEL_22;
                          }
                        }
                        else
                        {
                          v49 = (uint64_t *)v19[3];
                        }
                        v59 = (uint64_t *)(v20 + 8 * v47);
                        if (v49 != v59)
                        {
                          v60 = *v49;
LABEL_103:
                          if (*(_QWORD *)(v60 + 8))
                          {
                            v21 = v19 + 6;
LABEL_23:
                            v22 = *v12;
                            v23 = *v15;
                            v24 = *v18;
                            v25 = *v21;
                            v26 = *((_QWORD *)v5 + 33);
                            v27 = *(_QWORD *)(v26 + 24);
                            if (v27 && *(_DWORD *)(v27 - 12))
                            {
                              v50 = *(unsigned int *)(v27 - 4);
                              if ((_DWORD)v50)
                              {
                                v51 = 8 * v50;
                                v52 = *(uint64_t **)(v26 + 24);
                                while ((unint64_t)(*v52 + 1) <= 1)
                                {
                                  ++v52;
                                  v51 -= 8;
                                  if (!v51)
                                    goto LABEL_24;
                                }
                              }
                              else
                              {
                                v52 = *(uint64_t **)(v26 + 24);
                              }
                              v61 = (uint64_t *)(v27 + 8 * v50);
                              if (v52 != v61)
                              {
                                v62 = *v52;
LABEL_112:
                                if (*(_QWORD *)(v62 + 8))
                                {
                                  v28 = v26 + 48;
LABEL_25:
                                  v29 = *(float *)(v22 + 28);
                                  v30 = *(float *)(v23 + 28);
                                  v31 = *(float *)(v24 + 28);
                                  v32 = *(float *)(v25 + 28);
                                  v33 = *(float *)(*(_QWORD *)v28 + 28);
                                  v34 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                                  if (v34 != -1)
                                  {
                                    v70 = &v68;
                                    v69 = (CFTypeRef *)&v70;
                                    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v69, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                                  }
                                  v35 = (char *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                                  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
                                  {
                                    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
                                    v36 = WTF::fastMalloc((WTF *)0x68);
                                    v70 = v35;
                                    CFRetain(v35);
                                    WebCore::FESpecularLighting::FESpecularLighting(v36, &v66, (uint64_t *)&v67, (CFTypeRef *)&v70, v29, v30, v31, v32, v33);
                                    CFRelease(v35);
                                    CFRelease(v35);
                                  }
                                  else
                                  {
                                    v36 = WTF::fastMalloc((WTF *)0x68);
                                    v70 = 0;
                                    WebCore::FESpecularLighting::FESpecularLighting(v36, &v66, (uint64_t *)&v67, (CFTypeRef *)&v70, v29, v30, v31, v32, v33);
                                  }
                                  *a3 = v36;
                                  if ((v66 & 0x8000000000000) != 0)
                                  {
                                    v63 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
                                    do
                                    {
                                      v64 = __ldaxr(v63);
                                      v65 = v64 - 1;
                                    }
                                    while (__stlxr(v65, v63));
                                    if (!v65)
                                    {
                                      atomic_store(1u, v63);
                                      WTF::fastFree((WTF *)v63, a2);
                                    }
                                  }
                                  result = v67;
                                  v67 = 0;
                                  if (result)
                                  {
                                    if (result[2] == 1)
                                      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                                    else
                                      --result[2];
                                  }
                                  v37 = *(_DWORD *)(v9 + 16);
                                  if (!v37)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19664BDB4);
                                  }
                                  *(_DWORD *)(v9 + 16) = v37 - 1;
                                  v8 = *((_DWORD *)v4 + 6) - 2;
                                  if (*((_DWORD *)v4 + 6) != 2)
                                    goto LABEL_35;
                                  goto LABEL_37;
                                }
                                while (++v52 != v61)
                                {
                                  v62 = *v52;
                                  if ((unint64_t)(*v52 + 1) > 1)
                                  {
                                    if (v52 != v61)
                                      goto LABEL_112;
                                    break;
                                  }
                                }
                              }
                            }
LABEL_24:
                            v28 = v26 + 40;
                            goto LABEL_25;
                          }
                          while (++v49 != v59)
                          {
                            v60 = *v49;
                            if ((unint64_t)(*v49 + 1) > 1)
                            {
                              if (v49 != v59)
                                goto LABEL_103;
                              break;
                            }
                          }
                        }
                      }
LABEL_22:
                      v21 = v19 + 5;
                      goto LABEL_23;
                    }
                    while (++v46 != v57)
                    {
                      v58 = *v46;
                      if ((unint64_t)(*v46 + 1) > 1)
                      {
                        if (v46 != v57)
                          goto LABEL_94;
                        break;
                      }
                    }
                  }
                }
LABEL_20:
                v18 = v16 + 5;
                goto LABEL_21;
              }
              while (++v43 != v55)
              {
                v56 = *v43;
                if ((unint64_t)(*v43 + 1) > 1)
                {
                  if (v43 != v55)
                    goto LABEL_85;
                  break;
                }
              }
            }
          }
LABEL_18:
          v15 = v13 + 5;
          goto LABEL_19;
        }
        while (++v40 != v53)
        {
          v54 = *v40;
          if ((unint64_t)(*v40 + 1) > 1)
          {
            if (v40 != v53)
              goto LABEL_76;
            break;
          }
        }
      }
    }
LABEL_16:
    v12 = v10 + 5;
    goto LABEL_17;
  }
  *a3 = 0;
  if (v8)
  {
LABEL_35:
    *((_DWORD *)v4 + 6) = v8;
    return result;
  }
LABEL_37:
  if ((v4[15] & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  return result;
}

_QWORD *WebCore::SVGFESpotLightElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFELightElement::SVGFELightElement(v6, a1, a2);
  *result = off_1E34633B8;
  result[14] = &unk_1E34638F0;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGFESpotLightElement::lightSource@<X0>(WebCore::SVGFESpotLightElement *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t result;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;

  v3 = (_QWORD *)*((_QWORD *)this + 24);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v43 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v43)
  {
    v44 = 8 * v43;
    v45 = (uint64_t *)v3[3];
    while ((unint64_t)(*v45 + 1) <= 1)
    {
      ++v45;
      v44 -= 8;
      if (!v44)
        goto LABEL_2;
    }
  }
  else
  {
    v45 = (uint64_t *)v3[3];
  }
  v67 = (uint64_t *)(v4 + 8 * v43);
  if (v45 == v67)
    goto LABEL_2;
  v68 = *v45;
LABEL_73:
  if (!*(_QWORD *)(v68 + 8))
  {
    while (++v45 != v67)
    {
      v68 = *v45;
      if ((unint64_t)(*v45 + 1) > 1)
      {
        if (v45 != v67)
          goto LABEL_73;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = (_QWORD *)*((_QWORD *)this + 25);
  v7 = v6[3];
  if (!v7 || !*(_DWORD *)(v7 - 12))
    goto LABEL_4;
  v46 = *(unsigned int *)(v7 - 4);
  if ((_DWORD)v46)
  {
    v47 = 8 * v46;
    v48 = (uint64_t *)v6[3];
    while ((unint64_t)(*v48 + 1) <= 1)
    {
      ++v48;
      v47 -= 8;
      if (!v47)
        goto LABEL_4;
    }
  }
  else
  {
    v48 = (uint64_t *)v6[3];
  }
  v69 = (uint64_t *)(v7 + 8 * v46);
  if (v48 == v69)
    goto LABEL_4;
  v70 = *v48;
LABEL_82:
  if (!*(_QWORD *)(v70 + 8))
  {
    while (++v48 != v69)
    {
      v70 = *v48;
      if ((unint64_t)(*v48 + 1) > 1)
      {
        if (v48 != v69)
          goto LABEL_82;
        break;
      }
    }
LABEL_4:
    v8 = v6 + 5;
    goto LABEL_5;
  }
  v8 = v6 + 6;
LABEL_5:
  v9 = (_QWORD *)*((_QWORD *)this + 26);
  v10 = v9[3];
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_6;
  v49 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v49)
  {
    v50 = 8 * v49;
    v51 = (uint64_t *)v9[3];
    while ((unint64_t)(*v51 + 1) <= 1)
    {
      ++v51;
      v50 -= 8;
      if (!v50)
        goto LABEL_6;
    }
  }
  else
  {
    v51 = (uint64_t *)v9[3];
  }
  v71 = (uint64_t *)(v10 + 8 * v49);
  if (v51 == v71)
    goto LABEL_6;
  v72 = *v51;
LABEL_91:
  if (!*(_QWORD *)(v72 + 8))
  {
    while (++v51 != v71)
    {
      v72 = *v51;
      if ((unint64_t)(*v51 + 1) > 1)
      {
        if (v51 != v71)
          goto LABEL_91;
        break;
      }
    }
LABEL_6:
    v11 = v9 + 5;
    goto LABEL_7;
  }
  v11 = v9 + 6;
LABEL_7:
  v12 = (_QWORD *)*((_QWORD *)this + 27);
  v13 = v12[3];
  if (!v13 || !*(_DWORD *)(v13 - 12))
    goto LABEL_8;
  v52 = *(unsigned int *)(v13 - 4);
  if ((_DWORD)v52)
  {
    v53 = 8 * v52;
    v54 = (uint64_t *)v12[3];
    while ((unint64_t)(*v54 + 1) <= 1)
    {
      ++v54;
      v53 -= 8;
      if (!v53)
        goto LABEL_8;
    }
  }
  else
  {
    v54 = (uint64_t *)v12[3];
  }
  v73 = (uint64_t *)(v13 + 8 * v52);
  if (v54 == v73)
    goto LABEL_8;
  v74 = *v54;
LABEL_100:
  if (!*(_QWORD *)(v74 + 8))
  {
    while (++v54 != v73)
    {
      v74 = *v54;
      if ((unint64_t)(*v54 + 1) > 1)
      {
        if (v54 != v73)
          goto LABEL_100;
        break;
      }
    }
LABEL_8:
    v14 = v12 + 5;
    goto LABEL_9;
  }
  v14 = v12 + 6;
LABEL_9:
  v15 = (_QWORD *)*((_QWORD *)this + 28);
  v16 = v15[3];
  if (!v16 || !*(_DWORD *)(v16 - 12))
    goto LABEL_10;
  v55 = *(unsigned int *)(v16 - 4);
  if ((_DWORD)v55)
  {
    v56 = 8 * v55;
    v57 = (uint64_t *)v15[3];
    while ((unint64_t)(*v57 + 1) <= 1)
    {
      ++v57;
      v56 -= 8;
      if (!v56)
        goto LABEL_10;
    }
  }
  else
  {
    v57 = (uint64_t *)v15[3];
  }
  v75 = (uint64_t *)(v16 + 8 * v55);
  if (v57 == v75)
    goto LABEL_10;
  v76 = *v57;
LABEL_109:
  if (!*(_QWORD *)(v76 + 8))
  {
    while (++v57 != v75)
    {
      v76 = *v57;
      if ((unint64_t)(*v57 + 1) > 1)
      {
        if (v57 != v75)
          goto LABEL_109;
        break;
      }
    }
LABEL_10:
    v17 = v15 + 5;
    goto LABEL_11;
  }
  v17 = v15 + 6;
LABEL_11:
  v18 = (_QWORD *)*((_QWORD *)this + 29);
  v19 = v18[3];
  if (!v19 || !*(_DWORD *)(v19 - 12))
    goto LABEL_12;
  v58 = *(unsigned int *)(v19 - 4);
  if ((_DWORD)v58)
  {
    v59 = 8 * v58;
    v60 = (uint64_t *)v18[3];
    while ((unint64_t)(*v60 + 1) <= 1)
    {
      ++v60;
      v59 -= 8;
      if (!v59)
        goto LABEL_12;
    }
  }
  else
  {
    v60 = (uint64_t *)v18[3];
  }
  v77 = (uint64_t *)(v19 + 8 * v58);
  if (v60 == v77)
    goto LABEL_12;
  v78 = *v60;
LABEL_118:
  if (!*(_QWORD *)(v78 + 8))
  {
    while (++v60 != v77)
    {
      v78 = *v60;
      if ((unint64_t)(*v60 + 1) > 1)
      {
        if (v60 != v77)
          goto LABEL_118;
        break;
      }
    }
LABEL_12:
    v20 = v18 + 5;
    goto LABEL_13;
  }
  v20 = v18 + 6;
LABEL_13:
  v21 = *v5;
  v22 = *v8;
  v23 = *v11;
  v24 = *v14;
  v25 = *v17;
  v26 = *v20;
  v27 = *((_QWORD *)this + 30);
  v28 = *(_QWORD *)(v27 + 24);
  if (!v28 || !*(_DWORD *)(v28 - 12))
    goto LABEL_14;
  v61 = *(unsigned int *)(v28 - 4);
  if ((_DWORD)v61)
  {
    v62 = 8 * v61;
    v63 = *(uint64_t **)(v27 + 24);
    while ((unint64_t)(*v63 + 1) <= 1)
    {
      ++v63;
      v62 -= 8;
      if (!v62)
        goto LABEL_14;
    }
  }
  else
  {
    v63 = *(uint64_t **)(v27 + 24);
  }
  v79 = (uint64_t *)(v28 + 8 * v61);
  if (v63 == v79)
    goto LABEL_14;
  v80 = *v63;
LABEL_127:
  if (!*(_QWORD *)(v80 + 8))
  {
    while (++v63 != v79)
    {
      v80 = *v63;
      if ((unint64_t)(*v63 + 1) > 1)
      {
        if (v63 != v79)
          goto LABEL_127;
        break;
      }
    }
LABEL_14:
    v29 = v27 + 40;
    goto LABEL_15;
  }
  v29 = v27 + 48;
LABEL_15:
  v30 = *(_DWORD *)(v21 + 28);
  v31 = *(_DWORD *)(v22 + 28);
  v32 = *(_DWORD *)(v23 + 28);
  v33 = *(_DWORD *)(v24 + 28);
  v34 = *(_DWORD *)(v25 + 28);
  v35 = *(_DWORD *)(v26 + 28);
  v36 = *(float *)(*(_QWORD *)v29 + 28);
  v37 = *((_QWORD *)this + 31);
  v38 = *(_QWORD *)(v37 + 24);
  if (!v38 || !*(_DWORD *)(v38 - 12))
    goto LABEL_16;
  v64 = *(unsigned int *)(v38 - 4);
  if ((_DWORD)v64)
  {
    v65 = 8 * v64;
    v66 = *(uint64_t **)(v37 + 24);
    while ((unint64_t)(*v66 + 1) <= 1)
    {
      ++v66;
      v65 -= 8;
      if (!v65)
        goto LABEL_16;
    }
  }
  else
  {
    v66 = *(uint64_t **)(v37 + 24);
  }
  v81 = (uint64_t *)(v38 + 8 * v64);
  if (v66 == v81)
    goto LABEL_16;
  v82 = *v66;
LABEL_136:
  if (!*(_QWORD *)(v82 + 8))
  {
    while (++v66 != v81)
    {
      v82 = *v66;
      if ((unint64_t)(*v66 + 1) > 1)
      {
        if (v66 != v81)
          goto LABEL_136;
        break;
      }
    }
LABEL_16:
    v39 = v37 + 40;
    goto LABEL_17;
  }
  v39 = v37 + 48;
LABEL_17:
  v40 = *(_DWORD *)(*(_QWORD *)v39 + 28);
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 2;
  *(_QWORD *)result = off_1E3416798;
  *(_DWORD *)(result + 16) = v30;
  *(_DWORD *)(result + 20) = v31;
  *(_DWORD *)(result + 24) = v32;
  *(_DWORD *)(result + 28) = v33;
  *(_DWORD *)(result + 32) = v34;
  *(_DWORD *)(result + 36) = v35;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  v42 = 1.0;
  if (v36 > 1.0)
    v42 = v36;
  if (v36 >= 128.0)
    v42 = 128.0;
  *(float *)(result + 52) = v42;
  *(_DWORD *)(result + 56) = v40;
  *a2 = result;
  return result;
}

void WebCore::SVGFETileElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char **v13;
  char *v14;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E3463928;
  v6[14] = (uint64_t)&unk_1E3463E88;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3465068;
  *((_QWORD *)v7 + 1) = v6;
  v14 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v14);
  v8 = (uint64_t)v14;
  v14 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E3463928;
  v6[14] = (uint64_t)&unk_1E3463E88;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[28] = v9;
  v11 = atomic_load(&WebCore::SVGFETileElement::SVGFETileElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v11 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::SVGFETileElement::SVGFETileElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFETileElement::SVGFETileElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFETileElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  if (*(_QWORD *)a2 == WebCore::SVGNames::inAttr)
  {
    v10 = a1[28];
    v11 = *(_DWORD *)(v10 + 8);
    *(_DWORD *)(v10 + 8) = v11 + 1;
    v12 = *(_QWORD *)(v10 + 40);
    v13 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v13 += 2;
    v14 = *(WTF::StringImpl **)(v12 + 32);
    *(_QWORD *)(v12 + 32) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, a2);
        v11 = *(_DWORD *)(v10 + 8) - 1;
        if (*(_DWORD *)(v10 + 8) != 1)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v11)
    {
LABEL_8:
      *(_DWORD *)(v10 + 8) = v11;
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
    }
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, a4, a5);
}

void WebCore::SVGFETileElement::svgAttributeChanged(WebCore::SVGFETileElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;

  if ((byte_1ECE85810 & 1) != 0)
  {
    v4 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE85808;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE85808)
      v5 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  }
  else
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = this;
      *(_BYTE *)(v6 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v6;
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v21 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v21)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v21));
          v22 = *(WTF **)(v9 + 16);
          if (v22)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v22, v7);
          }
          WTF::fastFree((WTF *)v9, v7);
        }
      }
    }
    v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::Document::updateSVGRenderer((WebCore::Document *)v14, this);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v15);
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v12);
      v19 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v19)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v19));
      v20 = *(WTF **)(v12 + 16);
      if (v20)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v20, v16);
      }
      WTF::fastFree((WTF *)v12, v16);
    }
  }
}

void WebCore::SVGFETileElement::createFilterEffect(uint64_t *a1@<X8>)
{
  unint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v3 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v5 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FETile::create((const void **)&v5, (uint64_t *)&v8);
    v4 = (uint64_t)v8;
    CFRelease(v3);
  }
  else
  {
    WebCore::FETile::create((const void **)&v5, (uint64_t *)&v8);
    v4 = (uint64_t)v8;
  }
  *a1 = v4;
}

void WebCore::SVGFETurbulenceElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char **v23;
  char *v24;

  v6 = (uint64_t *)bmalloc::api::isoAllocate();
  *v6 = (uint64_t)off_1E3463EC0;
  v6[14] = (uint64_t)&unk_1E3464420;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3465140;
  *((_QWORD *)v7 + 1) = v6;
  v24 = v7;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(v6, a1, a2, (uint64_t *)&v24);
  v8 = (uint64_t)v24;
  v24 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = (uint64_t)off_1E3463EC0;
  v6[14] = (uint64_t)&unk_1E3464420;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E34566C8;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = off_1E3456748;
  *(_DWORD *)(v10 + 28) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  v6[28] = v9;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)v11 = &off_1E34566C8;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3456748;
  *(_DWORD *)(v12 + 28) = 0;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0;
  v6[29] = v11;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)v13 = &off_1E345D358;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = off_1E345D3D8;
  *(_DWORD *)(v14 + 28) = 1;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = 0;
  v6[30] = v13;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v6;
  *(_QWORD *)v15 = &off_1E34566C8;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E3456748;
  *(_DWORD *)(v16 + 28) = 0;
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0;
  v6[31] = v15;
  v17 = WTF::fastMalloc((WTF *)0x40);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v18[1] = 0x200000001;
  *v18 = off_1E34651B0;
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)v17 = &off_1E34568A0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0;
  *(_BYTE *)(v17 + 56) = 0;
  v6[32] = v17;
  v19 = WTF::fastMalloc((WTF *)0x40);
  v20 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v20 + 8) = 1;
  *(_BYTE *)(v20 + 12) = 2;
  *(_QWORD *)v20 = off_1E3465200;
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)v19 = &off_1E34568A0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 0;
  *(_BYTE *)(v19 + 56) = 0;
  v6[33] = v19;
  v21 = atomic_load(&WebCore::SVGFETurbulenceElement::SVGFETurbulenceElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v21 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WebCore::SVGFETurbulenceElement::SVGFETurbulenceElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFETurbulenceElement::SVGFETurbulenceElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

_QWORD *WebCore::SVGFETurbulenceElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *this, int a5)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v33;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x335)
  {
    if (v10 == 822)
    {
      v12 = a1[31];
      ++*(_DWORD *)(v12 + 8);
      WTF::String::toFloat(this, 0);
      *(_DWORD *)(*(_QWORD *)(v12 + 40) + 28) = v18;
    }
    else
    {
      if (v10 == 853)
      {
        if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "stitch", 6) & 1) != 0)
        {
          v11 = 1;
        }
        else
        {
          if (!MEMORY[0x19AEA53F4](*(_QWORD *)this, "noStitch", 8))
            return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
          v11 = 2;
        }
        v12 = a1[32];
      }
      else
      {
        if (v10 != 952)
          return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
        if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "fractalNoise", 12) & 1) != 0)
        {
          v11 = 1;
        }
        else
        {
          if (!MEMORY[0x19AEA53F4](*(_QWORD *)this, "turbulence", 10))
            return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
          v11 = 2;
        }
        v12 = a1[33];
      }
      ++*(_DWORD *)(v12 + 8);
      v30 = *(_QWORD *)(v12 + 40);
      v33 = v11;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v30 + 16))(v30, &v33);
      v31 = *(_QWORD *)(v12 + 48);
      if (v31)
      {
        v33 = v11;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v31 + 16))(v31, &v33);
      }
    }
    goto LABEL_34;
  }
  if (v10 != 368)
  {
    if (v10 != 601)
      return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
    v12 = a1[30];
    ++*(_DWORD *)(v12 + 8);
    v13 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *(unsigned int *)(v13 + 4);
      if ((*(_BYTE *)(v13 + 16) & 4) == 0)
      {
        v16 = WTF::parseInteger<unsigned int,char16_t>(v14, v15, 10, 0);
        goto LABEL_12;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v16 = WTF::parseInteger<unsigned int,unsigned char>(v14, v15, 10, 0);
LABEL_12:
    if ((v16 & 0xFF00000000) != 0)
      v17 = v16;
    else
      v17 = 0;
    *(_DWORD *)(*(_QWORD *)(v12 + 40) + 28) = v17;
LABEL_34:
    if (*(_DWORD *)(v12 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 8);
    return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
  }
  v19 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v20 = 0;
    v21 = 0x100000000;
  }
  v22 = WebCore::parseNumberOptionalNumber(v20, v21);
  if (v23)
  {
    v24 = v22;
    v25 = HIDWORD(v22);
    v26 = a1[28];
    v27 = *(_DWORD *)(v26 + 8);
    *(_DWORD *)(v26 + 8) = v27 + 1;
    *(_DWORD *)(*(_QWORD *)(v26 + 40) + 28) = v24;
    if (v27)
      *(_DWORD *)(v26 + 8) = v27;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v28 = a1[29];
    v29 = *(_DWORD *)(v28 + 8);
    *(_DWORD *)(v28 + 8) = v29 + 1;
    *(_DWORD *)(*(_QWORD *)(v28 + 40) + 28) = v25;
    if (v29)
      *(_DWORD *)(v28 + 8) = v29;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  return WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(a1, a2, a3, this, a5);
}

BOOL WebCore::SVGFETurbulenceElement::setFilterEffectAttribute(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;

  if (*(_BYTE *)(a2 + 48) != 18)
  {
    __break(0xC471u);
    JUMPOUT(0x19664D2CCLL);
  }
  v4 = 0;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a3 + 10);
  if (v5 <= 0x335)
  {
    if (v5 != 368)
    {
      if (v5 != 601)
        return v4;
      v10 = a1[30];
      v11 = *(_QWORD *)(v10 + 24);
      if (v11 && *(_DWORD *)(v11 - 12))
      {
        v47 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v47)
        {
          v48 = 8 * v47;
          v49 = *(uint64_t **)(v10 + 24);
          while ((unint64_t)(*v49 + 1) <= 1)
          {
            ++v49;
            v48 -= 8;
            if (!v48)
              goto LABEL_13;
          }
        }
        else
        {
          v49 = *(uint64_t **)(v10 + 24);
        }
        v60 = (uint64_t *)(v11 + 8 * v47);
        if (v49 != v60)
        {
          v61 = *v49;
LABEL_121:
          if (*(_QWORD *)(v61 + 8))
          {
            v12 = v10 + 48;
LABEL_14:
            v13 = *(_DWORD *)(*(_QWORD *)v12 + 28);
            if (*(_DWORD *)(a2 + 76) != v13)
            {
              *(_DWORD *)(a2 + 76) = v13;
              return 1;
            }
            return 0;
          }
          while (++v49 != v60)
          {
            v61 = *v49;
            if ((unint64_t)(*v49 + 1) > 1)
            {
              if (v49 != v60)
                goto LABEL_121;
              break;
            }
          }
        }
      }
LABEL_13:
      v12 = v10 + 40;
      goto LABEL_14;
    }
    v22 = a1[28];
    v23 = *(_QWORD *)(v22 + 24);
    if (v23 && *(_DWORD *)(v23 - 12))
    {
      v38 = *(unsigned int *)(v23 - 4);
      if ((_DWORD)v38)
      {
        v39 = 8 * v38;
        v40 = *(uint64_t **)(v22 + 24);
        while ((unint64_t)(*v40 + 1) <= 1)
        {
          ++v40;
          v39 -= 8;
          if (!v39)
            goto LABEL_25;
        }
      }
      else
      {
        v40 = *(uint64_t **)(v22 + 24);
      }
      v54 = (uint64_t *)(v23 + 8 * v38);
      if (v40 != v54)
      {
        v55 = *v40;
LABEL_94:
        if (*(_QWORD *)(v55 + 8))
        {
          v24 = v22 + 48;
          goto LABEL_26;
        }
        while (++v40 != v54)
        {
          v55 = *v40;
          if ((unint64_t)(*v40 + 1) > 1)
          {
            if (v40 != v54)
              goto LABEL_94;
            break;
          }
        }
      }
    }
LABEL_25:
    v24 = v22 + 40;
LABEL_26:
    v25 = *(float *)(*(_QWORD *)v24 + 28);
    v26 = *(float *)(a2 + 68);
    if (v26 != v25)
      *(float *)(a2 + 68) = v25;
    v27 = a1[29];
    v28 = *(_QWORD *)(v27 + 24);
    if (v28 && *(_DWORD *)(v28 - 12))
    {
      v41 = *(unsigned int *)(v28 - 4);
      if ((_DWORD)v41)
      {
        v42 = 8 * v41;
        v43 = *(uint64_t **)(v27 + 24);
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          ++v43;
          v42 -= 8;
          if (!v42)
            goto LABEL_29;
        }
      }
      else
      {
        v43 = *(uint64_t **)(v27 + 24);
      }
      v56 = (uint64_t *)(v28 + 8 * v41);
      if (v43 != v56)
      {
        v57 = *v43;
LABEL_103:
        if (*(_QWORD *)(v57 + 8))
        {
          v29 = v27 + 48;
LABEL_30:
          v30 = *(float *)(*(_QWORD *)v29 + 28);
          if (*(float *)(a2 + 72) == v30)
            return v26 != v25;
          *(float *)(a2 + 72) = v30;
          return 1;
        }
        while (++v43 != v56)
        {
          v57 = *v43;
          if ((unint64_t)(*v43 + 1) > 1)
          {
            if (v43 != v56)
              goto LABEL_103;
            break;
          }
        }
      }
    }
LABEL_29:
    v29 = v27 + 40;
    goto LABEL_30;
  }
  switch(v5)
  {
    case 0x336u:
      v14 = a1[31];
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 && *(_DWORD *)(v15 - 12))
      {
        v32 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          v34 = *(uint64_t **)(v14 + 24);
          while ((unint64_t)(*v34 + 1) <= 1)
          {
            ++v34;
            v33 -= 8;
            if (!v33)
              goto LABEL_17;
          }
        }
        else
        {
          v34 = *(uint64_t **)(v14 + 24);
        }
        v50 = (uint64_t *)(v15 + 8 * v32);
        if (v34 != v50)
        {
          v51 = *v34;
LABEL_76:
          if (*(_QWORD *)(v51 + 8))
          {
            v16 = v14 + 48;
LABEL_18:
            v17 = *(float *)(*(_QWORD *)v16 + 28);
            if (*(float *)(a2 + 80) != v17)
            {
              *(float *)(a2 + 80) = v17;
              return 1;
            }
            return 0;
          }
          while (++v34 != v50)
          {
            v51 = *v34;
            if ((unint64_t)(*v34 + 1) > 1)
            {
              if (v34 != v50)
                goto LABEL_76;
              break;
            }
          }
        }
      }
LABEL_17:
      v16 = v14 + 40;
      goto LABEL_18;
    case 0x355u:
      v18 = (_QWORD *)a1[32];
      v19 = v18[3];
      if (v19 && *(_DWORD *)(v19 - 12))
      {
        v35 = *(unsigned int *)(v19 - 4);
        if ((_DWORD)v35)
        {
          v36 = 8 * v35;
          v37 = (uint64_t *)v18[3];
          while ((unint64_t)(*v37 + 1) <= 1)
          {
            ++v37;
            v36 -= 8;
            if (!v36)
              goto LABEL_21;
          }
        }
        else
        {
          v37 = (uint64_t *)v18[3];
        }
        v52 = (uint64_t *)(v19 + 8 * v35);
        if (v37 != v52)
        {
          v53 = *v37;
LABEL_85:
          if (*(_QWORD *)(v53 + 8))
          {
            v20 = v18 + 6;
LABEL_22:
            v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20) != 0;
            if (*(unsigned __int8 *)(a2 + 84) != v21)
            {
              *(_BYTE *)(a2 + 84) = v21;
              return 1;
            }
            return 0;
          }
          while (++v37 != v52)
          {
            v53 = *v37;
            if ((unint64_t)(*v37 + 1) > 1)
            {
              if (v37 != v52)
                goto LABEL_85;
              break;
            }
          }
        }
      }
LABEL_21:
      v20 = v18 + 5;
      goto LABEL_22;
    case 0x3B8u:
      v6 = (_QWORD *)a1[33];
      v7 = v6[3];
      if (v7 && *(_DWORD *)(v7 - 12))
      {
        v44 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v44)
        {
          v45 = 8 * v44;
          v46 = (uint64_t *)v6[3];
          while ((unint64_t)(*v46 + 1) <= 1)
          {
            ++v46;
            v45 -= 8;
            if (!v45)
              goto LABEL_7;
          }
        }
        else
        {
          v46 = (uint64_t *)v6[3];
        }
        v58 = (uint64_t *)(v7 + 8 * v44);
        if (v46 != v58)
        {
          v59 = *v46;
LABEL_112:
          if (*(_QWORD *)(v59 + 8))
          {
            v8 = v6 + 6;
LABEL_8:
            v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8);
            if (*(unsigned __int8 *)(a2 + 64) != v9)
            {
              *(_BYTE *)(a2 + 64) = v9;
              return 1;
            }
            return 0;
          }
          while (++v46 != v58)
          {
            v59 = *v46;
            if ((unint64_t)(*v46 + 1) > 1)
            {
              if (v46 != v58)
                goto LABEL_112;
              break;
            }
          }
        }
      }
LABEL_7:
      v8 = v6 + 5;
      goto LABEL_8;
  }
  return v4;
}

void WebCore::SVGFETurbulenceElement::svgAttributeChanged(WebCore::SVGFETurbulenceElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  if ((byte_1ECE85838 & 1) != 0)
  {
    v4 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v4 = qword_1ECE85830;
    if (v5)
      goto LABEL_7;
    if (qword_1ECE85830)
      v5 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v4 == v5 || !v5[1])
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(this, (const WebCore::QualifiedName *)a2);
  }
  else
  {
    if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = this;
      *(_BYTE *)(v6 + 32) = 0;
      v8 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v6;
      v9 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v20 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v20)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v20));
          v21 = *(WTF **)(v9 + 16);
          if (v21)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v21, v7);
          }
          WTF::fastFree((WTF *)v9, v7);
        }
      }
    }
    v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(this, (const WebCore::QualifiedName *)a2);
    WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v14);
    do
    {
      v16 = __ldaxr((unsigned int *)v12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v12);
      v18 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v18));
      v19 = *(WTF **)(v12 + 16);
      if (v19)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v19, v15);
      }
      WTF::fastFree((WTF *)v12, v15);
    }
  }
}

void WebCore::SVGFETurbulenceElement::createFilterEffect(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  float v34;
  float v35;
  float v36;
  int v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char **v83;
  char *v84;

  v4 = a1[28];
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v41 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v41)
  {
    v42 = 8 * v41;
    v43 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v43 + 1) <= 1)
    {
      ++v43;
      v42 -= 8;
      if (!v42)
        goto LABEL_2;
    }
  }
  else
  {
    v43 = *(uint64_t **)(v4 + 24);
  }
  v65 = (uint64_t *)(v5 + 8 * v41);
  if (v43 == v65)
    goto LABEL_2;
  v66 = *v43;
LABEL_77:
  if (!*(_QWORD *)(v66 + 8))
  {
    while (++v43 != v65)
    {
      v66 = *v43;
      if ((unint64_t)(*v43 + 1) > 1)
      {
        if (v43 != v65)
          goto LABEL_77;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  if (*(float *)(*(_QWORD *)v6 + 28) < 0.0)
  {
LABEL_7:
    *a2 = 0;
    return;
  }
  v7 = a1[29];
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_5;
  v44 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v44)
  {
    v45 = 8 * v44;
    v46 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v46 + 1) <= 1)
    {
      ++v46;
      v45 -= 8;
      if (!v45)
        goto LABEL_5;
    }
  }
  else
  {
    v46 = *(uint64_t **)(v7 + 24);
  }
  v67 = (uint64_t *)(v8 + 8 * v44);
  if (v46 == v67)
    goto LABEL_5;
  v68 = *v46;
LABEL_86:
  if (!*(_QWORD *)(v68 + 8))
  {
    while (++v46 != v67)
    {
      v68 = *v46;
      if ((unint64_t)(*v46 + 1) > 1)
      {
        if (v46 != v67)
          goto LABEL_86;
        break;
      }
    }
LABEL_5:
    v9 = v7 + 40;
    goto LABEL_6;
  }
  v9 = v7 + 48;
LABEL_6:
  if (*(float *)(*(_QWORD *)v9 + 28) < 0.0)
    goto LABEL_7;
  v10 = (_QWORD *)a1[33];
  v11 = v10[3];
  if (!v11 || !*(_DWORD *)(v11 - 12))
    goto LABEL_9;
  v47 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v47)
  {
    v48 = 8 * v47;
    v49 = (uint64_t *)v10[3];
    while ((unint64_t)(*v49 + 1) <= 1)
    {
      ++v49;
      v48 -= 8;
      if (!v48)
        goto LABEL_9;
    }
  }
  else
  {
    v49 = (uint64_t *)v10[3];
  }
  v69 = (uint64_t *)(v11 + 8 * v47);
  if (v49 == v69)
    goto LABEL_9;
  v70 = *v49;
LABEL_95:
  if (!*(_QWORD *)(v70 + 8))
  {
    while (++v49 != v69)
    {
      v70 = *v49;
      if ((unint64_t)(*v49 + 1) > 1)
      {
        if (v49 != v69)
          goto LABEL_95;
        break;
      }
    }
LABEL_9:
    v12 = v10 + 5;
    goto LABEL_10;
  }
  v12 = v10 + 6;
LABEL_10:
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12);
  v14 = (_QWORD *)a1[28];
  v15 = v14[3];
  if (!v15 || !*(_DWORD *)(v15 - 12))
    goto LABEL_11;
  v50 = *(unsigned int *)(v15 - 4);
  if ((_DWORD)v50)
  {
    v51 = 8 * v50;
    v52 = (uint64_t *)v14[3];
    while ((unint64_t)(*v52 + 1) <= 1)
    {
      ++v52;
      v51 -= 8;
      if (!v51)
        goto LABEL_11;
    }
  }
  else
  {
    v52 = (uint64_t *)v14[3];
  }
  v71 = (uint64_t *)(v15 + 8 * v50);
  if (v52 == v71)
    goto LABEL_11;
  v72 = *v52;
LABEL_104:
  if (!*(_QWORD *)(v72 + 8))
  {
    while (++v52 != v71)
    {
      v72 = *v52;
      if ((unint64_t)(*v52 + 1) > 1)
      {
        if (v52 != v71)
          goto LABEL_104;
        break;
      }
    }
LABEL_11:
    v16 = v14 + 5;
    goto LABEL_12;
  }
  v16 = v14 + 6;
LABEL_12:
  v17 = (_QWORD *)a1[29];
  v18 = v17[3];
  if (!v18 || !*(_DWORD *)(v18 - 12))
    goto LABEL_13;
  v53 = *(unsigned int *)(v18 - 4);
  if ((_DWORD)v53)
  {
    v54 = 8 * v53;
    v55 = (uint64_t *)v17[3];
    while ((unint64_t)(*v55 + 1) <= 1)
    {
      ++v55;
      v54 -= 8;
      if (!v54)
        goto LABEL_13;
    }
  }
  else
  {
    v55 = (uint64_t *)v17[3];
  }
  v73 = (uint64_t *)(v18 + 8 * v53);
  if (v55 == v73)
    goto LABEL_13;
  v74 = *v55;
LABEL_113:
  if (!*(_QWORD *)(v74 + 8))
  {
    while (++v55 != v73)
    {
      v74 = *v55;
      if ((unint64_t)(*v55 + 1) > 1)
      {
        if (v55 != v73)
          goto LABEL_113;
        break;
      }
    }
LABEL_13:
    v19 = v17 + 5;
    goto LABEL_14;
  }
  v19 = v17 + 6;
LABEL_14:
  v20 = (_QWORD *)a1[30];
  v21 = v20[3];
  if (!v21 || !*(_DWORD *)(v21 - 12))
    goto LABEL_15;
  v56 = *(unsigned int *)(v21 - 4);
  if ((_DWORD)v56)
  {
    v57 = 8 * v56;
    v58 = (uint64_t *)v20[3];
    while ((unint64_t)(*v58 + 1) <= 1)
    {
      ++v58;
      v57 -= 8;
      if (!v57)
        goto LABEL_15;
    }
  }
  else
  {
    v58 = (uint64_t *)v20[3];
  }
  v75 = (uint64_t *)(v21 + 8 * v56);
  if (v58 == v75)
    goto LABEL_15;
  v76 = *v58;
LABEL_122:
  if (!*(_QWORD *)(v76 + 8))
  {
    while (++v58 != v75)
    {
      v76 = *v58;
      if ((unint64_t)(*v58 + 1) > 1)
      {
        if (v58 != v75)
          goto LABEL_122;
        break;
      }
    }
LABEL_15:
    v22 = v20 + 5;
    goto LABEL_16;
  }
  v22 = v20 + 6;
LABEL_16:
  v23 = (_QWORD *)a1[31];
  v24 = v23[3];
  if (!v24 || !*(_DWORD *)(v24 - 12))
    goto LABEL_17;
  v59 = *(unsigned int *)(v24 - 4);
  if ((_DWORD)v59)
  {
    v60 = 8 * v59;
    v61 = (uint64_t *)v23[3];
    while ((unint64_t)(*v61 + 1) <= 1)
    {
      ++v61;
      v60 -= 8;
      if (!v60)
        goto LABEL_17;
    }
  }
  else
  {
    v61 = (uint64_t *)v23[3];
  }
  v77 = (uint64_t *)(v24 + 8 * v59);
  if (v61 == v77)
    goto LABEL_17;
  v78 = *v61;
LABEL_131:
  if (!*(_QWORD *)(v78 + 8))
  {
    while (++v61 != v77)
    {
      v78 = *v61;
      if ((unint64_t)(*v61 + 1) > 1)
      {
        if (v61 != v77)
          goto LABEL_131;
        break;
      }
    }
LABEL_17:
    v25 = v23 + 5;
    goto LABEL_18;
  }
  v25 = v23 + 6;
LABEL_18:
  v26 = *v22;
  v27 = *v16;
  v28 = *v19;
  v29 = *v25;
  v30 = (_QWORD *)a1[32];
  v31 = v30[3];
  if (v31 && *(_DWORD *)(v31 - 12))
  {
    v62 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v62)
    {
      v63 = 8 * v62;
      v64 = (uint64_t *)v30[3];
      while ((unint64_t)(*v64 + 1) <= 1)
      {
        ++v64;
        v63 -= 8;
        if (!v63)
          goto LABEL_19;
      }
    }
    else
    {
      v64 = (uint64_t *)v30[3];
    }
    v79 = (uint64_t *)(v31 + 8 * v62);
    if (v64 != v79)
    {
      v80 = *v64;
LABEL_140:
      if (*(_QWORD *)(v80 + 8))
      {
        v32 = v30 + 6;
        goto LABEL_20;
      }
      while (++v64 != v79)
      {
        v80 = *v64;
        if ((unint64_t)(*v64 + 1) > 1)
        {
          if (v64 != v79)
            goto LABEL_140;
          break;
        }
      }
    }
  }
LABEL_19:
  v32 = v30 + 5;
LABEL_20:
  v33 = *(_DWORD *)(v26 + 28);
  v34 = *(float *)(v27 + 28);
  v35 = *(float *)(v28 + 28);
  v36 = *(float *)(v29 + 28);
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v32 + 32))(*v32);
  v38 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v38 != -1)
  {
    v84 = &v82;
    v83 = &v84;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v39 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  v81 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
  {
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::FETurbulence::create(v13, v33, v37 == 1, (const void **)&v81, (uint64_t *)&v84, v34, v35, v36);
    v40 = (uint64_t)v84;
    CFRelease(v39);
  }
  else
  {
    WebCore::FETurbulence::create(v13, v33, v37 == 1, (const void **)&v81, (uint64_t *)&v84, v34, v35, v36);
    v40 = (uint64_t)v84;
  }
  *a2 = v40;
}

uint64_t *WebCore::SVGFilterElement::create@<X0>(WebCore::SVGFilterElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v7;
  uint64_t *result;

  v7 = (uint64_t *)bmalloc::api::isoAllocate();
  result = WebCore::SVGFilterElement::SVGFilterElement(v7, (_DWORD **)this, (uint64_t)a2);
  *a3 = result;
  return result;
}

_QWORD *WebCore::SVGFilterElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::String *v20;
  __n128 v21;
  __n128 v22;
  int v24;
  unsigned __int8 *v25;
  int v26;
  char v27;
  char v28;
  int v29;

  v29 = 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x399)
  {
    switch(v10)
    {
      case 0x39Au:
        v11 = a1[28];
        break;
      case 0x3A1u:
        v11 = a1[26];
        break;
      case 0x3ABu:
        v11 = a1[27];
        goto LABEL_9;
      default:
        goto LABEL_21;
    }
    ++*(_DWORD *)(v11 + 8);
    v16 = *a4;
    if (*a4)
    {
      v13 = (unsigned __int16 *)*((_QWORD *)v16 + 1);
      v14 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v15 = 0;
    goto LABEL_17;
  }
  switch(v10)
  {
    case 0x1D2u:
      v24 = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a4);
      v28 = v24;
      if (!v24)
        break;
      v11 = a1[24];
      ++*(_DWORD *)(v11 + 8);
      v25 = (unsigned __int8 *)&v28;
      goto LABEL_24;
    case 0x1F8u:
      v11 = a1[29];
LABEL_9:
      ++*(_DWORD *)(v11 + 8);
      v12 = *a4;
      if (*a4)
      {
        v13 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
        v14 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = 1;
LABEL_17:
      v17 = WebCore::SVGLengthValue::construct(v15, v13, v14, &v29, 0);
      v18 = *(_QWORD *)(v11 + 40);
      *(_DWORD *)(v18 + 28) = v17;
      *(_WORD *)(v18 + 32) = WORD2(v17);
      v19 = *(_QWORD *)(v11 + 48);
      if (v19)
      {
        *(_DWORD *)(v19 + 28) = v17;
        *(_WORD *)(v19 + 32) = WORD2(v17);
      }
      goto LABEL_19;
    case 0x314u:
      v26 = WebCore::SVGPropertyTraits<WebCore::SVGUnitTypes::SVGUnitType>::fromString(a4);
      v27 = v26;
      if (v26)
      {
        v11 = a1[25];
        ++*(_DWORD *)(v11 + 8);
        v25 = (unsigned __int8 *)&v27;
LABEL_24:
        WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::setBaseValInternal<WebCore::SVGUnitTypes::SVGUnitType>(v11, v25);
LABEL_19:
        if (*(_DWORD *)(v11 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        else
          --*(_DWORD *)(v11 + 8);
      }
      break;
  }
LABEL_21:
  WebCore::SVGElement::reportAttributeParsingError((uint64_t)a1, v29, a2, a4);
  WebCore::SVGURIReference::parseAttribute((uint64_t)(a1 + 22), a2, (const WTF::AtomString *)a4, v20, v21);
  return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, v22);
}

void WebCore::SVGFilterElement::svgAttributeChanged(WebCore::SVGFilterElement *this, const WebCore::QualifiedName *a2)
{
  WTF::StringImpl **Accessor;
  uint64_t v5;
  void *v6;
  const WebCore::QualifiedName *v7;
  unsigned int *v8;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor((uint64_t *)a2);
  if (Accessor && (*((unsigned int (**)(WTF::StringImpl **))*Accessor + 4))(Accessor))
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v8, (uint64_t)this);
    WebCore::SVGElement::setPresentationalHintStyleIsDirty(this, v5);
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v8, v6);
  }
  else if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor((uint64_t *)a2)
         || WebCore::SVGURIReference::isKnownAttribute((WebCore::QualifiedName::QualifiedNameImpl **)a2, v7))
  {
    WebCore::SVGElement::updateSVGRendererForElementChange(this);
  }
  else
  {
    WebCore::SVGElement::svgAttributeChanged(this, a2);
  }
}

void WebCore::SVGFilterElement::childrenChanged(WebCore::SVGElement *a1, unsigned __int8 *a2)
{
  WebCore::SVGElement *v4;
  WebCore::RenderSVGResourceContainer *v5;

  WebCore::SVGElement::childrenChanged(a1, a2);
  if (a2[32])
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
    {
      v5 = (WebCore::RenderSVGResourceContainer *)(*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL);
      if (v5)
      {
        if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
        }
        else if (*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 76)
        {
          WebCore::RenderSVGResourceContainer::repaintAllClients(v5, v4);
        }
      }
    }
    else
    {
      WebCore::SVGElement::updateSVGRendererForElementChange(a1);
    }
  }
}

void WebCore::SVGFilterElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v8 = WebCore::RenderSVGResourceFilter::operator new(240);
    v7 = WebCore::RenderSVGResourceFilter::RenderSVGResourceFilter(v8, a1, a2);
  }
  else
  {
    v6 = WebCore::LegacyRenderSVGResourceFilter::operator new(280);
    WebCore::LegacyRenderSVGResourceFilter::LegacyRenderSVGResourceFilter(v6, a1, a2);
  }
  *a3 = v7;
}

BOOL WebCore::SVGFilterElement::childShouldCreateRenderer(WebCore::SVGFilterElement *this, const WebCore::Node *a2)
{
  return (*((_WORD *)a2 + 14) & 0x20) != 0
      && *(unsigned __int16 *)(*((_QWORD *)a2 + 12) + 10) - 190 < 0x19;
}

void WebCore::SVGFEMorphologyElement::~SVGFEMorphologyElement(WebCore::SVGFEMorphologyElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

_QWORD *WebCore::SVGFEMorphologyElement::filterEffectInputsNames@<X0>(WebCore::SVGFEMorphologyElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEMorphologyElement::~SVGFEMorphologyElement(WebCore::SVGFEMorphologyElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEMorphologyElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEMorphologyElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

void WebCore::SVGFEOffsetElement::~SVGFEOffsetElement(WebCore::SVGFEOffsetElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

_QWORD *WebCore::SVGFEOffsetElement::filterEffectInputsNames@<X0>(WebCore::SVGFEOffsetElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14[5];
  uint64_t *v15[5];

  v3 = *((_QWORD *)this + 28);
  v5 = (uint64_t *)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4
    && *(_DWORD *)(v4 - 12)
    && (v13 = *((_QWORD *)this + 28),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v5, v15),
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v5, (uint64_t **)v14), v3 = v13, v15[1] != (uint64_t *)v14[1]))
  {
    v6 = v13 + 48;
  }
  else
  {
    v6 = v3 + 40;
  }
  v7 = *(uint64_t **)(*(_QWORD *)v6 + 32);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v14[0] = (WTF::StringImpl *)v7;
    if ((v7[2] & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v12 = v14[0];
      v7 = v15[0];
      v15[0] = 0;
      v14[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v7)
  {
    v10 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *result = v7;
    *(_DWORD *)(a2 + 12) = 1;
    if (v10)
      *(_DWORD *)v7 = v10;
    else
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFEOffsetElement::~SVGFEOffsetElement(WebCore::SVGFEOffsetElement *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEOffsetElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFEOffsetElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::SVGFEPointLightElement::~SVGFEPointLightElement(WebCore::SVGFEPointLightElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGFEPointLightElement::~SVGFEPointLightElement(WebCore::SVGFEPointLightElement *this, void *a2)
{
  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFEPointLightElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFEPointLightElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFESpecularLightingElement::~SVGFESpecularLightingElement(WebCore::SVGFESpecularLightingElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFESpecularLightingElement::~SVGFESpecularLightingElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

_QWORD *WebCore::SVGFESpecularLightingElement::filterEffectInputsNames@<X0>(WebCore::SVGFESpecularLightingElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFESpecularLightingElement::~SVGFESpecularLightingElement(WebCore::SVGFESpecularLightingElement *this, void *a2)
{
  WebCore::SVGFESpecularLightingElement::~SVGFESpecularLightingElement((WebCore::SVGFESpecularLightingElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFESpecularLightingElement::~SVGFESpecularLightingElement((WebCore::SVGFESpecularLightingElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFESpotLightElement::~SVGFESpotLightElement(WebCore::SVGFESpotLightElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGFESpotLightElement::~SVGFESpotLightElement(WebCore::SVGFESpotLightElement *this, void *a2)
{
  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFESpotLightElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFELightElement::~SVGFELightElement((WebCore::SVGFESpotLightElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFETileElement::~SVGFETileElement(WebCore::SVGFETileElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_QWORD *WebCore::SVGFETileElement::filterEffectInputsNames@<X0>(WebCore::SVGFETileElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *result;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((_QWORD *)this + 28);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *(uint64_t **)(v3 + 24);
    }
    v15 = (uint64_t *)(v4 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      if (*(_QWORD *)(v16 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v14 != v15)
      {
        v16 = *v14;
        if ((unint64_t)(*v14 + 1) > 1)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  v6 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 32);
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v8 = v6;
      v6 = v17;
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  *(_QWORD *)(a2 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a2 = result;
  if (v6)
  {
    v11 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *result = v6;
    *(_DWORD *)(a2 + 12) = 1;
    if (v11)
      *(_DWORD *)v6 = v11;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v6, v10);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a2 + 12) = 1;
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGFETileElement::~SVGFETileElement(WebCore::SVGFETileElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFETileElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes((WebCore::SVGFETileElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::SVGFETurbulenceElement::~SVGFETurbulenceElement(WebCore::SVGFETurbulenceElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFETurbulenceElement::~SVGFETurbulenceElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  WebCore::SVGFilterPrimitiveStandardAttributes::~SVGFilterPrimitiveStandardAttributes(this, a2);
}

void `non-virtual thunk to'WebCore::SVGFETurbulenceElement::~SVGFETurbulenceElement(WebCore::SVGFETurbulenceElement *this, void *a2)
{
  WebCore::SVGFETurbulenceElement::~SVGFETurbulenceElement((WebCore::SVGFETurbulenceElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFETurbulenceElement::~SVGFETurbulenceElement((WebCore::SVGFETurbulenceElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::SVGFilterElement::~SVGFilterElement(WebCore::SVGFilterElement *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterElement::~SVGFilterElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = &off_1E3452C78;
  *((_QWORD *)this + 23) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

uint64_t WebCore::SVGFilterElement::needsPendingResourceHandling(WebCore::SVGFilterElement *this)
{
  return 0;
}

uint64_t WebCore::SVGFilterElement::selfHasRelativeLengths(WebCore::SVGFilterElement *this)
{
  return 1;
}

void `non-virtual thunk to'WebCore::SVGFilterElement::~SVGFilterElement(WebCore::SVGFilterElement *this, void *a2)
{
  WebCore::SVGFilterElement::~SVGFilterElement((WebCore::SVGFilterElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterElement::~SVGFilterElement((WebCore::SVGFilterElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGFilterElement::~SVGFilterElement((WebCore::SVGFilterElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFilterElement::~SVGFilterElement((WebCore::SVGFilterElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85758 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)_MergedGlobals_273;
  if (!_MergedGlobals_273)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(_MergedGlobals_273 - 4);
  v4 = _MergedGlobals_273 + 16 * v3;
  if (!*(_DWORD *)(_MergedGlobals_273 - 12))
  {
    v13 = _MergedGlobals_273 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (_MergedGlobals_273)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_273 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (_MergedGlobals_273)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = _MergedGlobals_273 + v14;
    if (_MergedGlobals_273)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85758 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_273;
  if (!_MergedGlobals_273)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_273 - 4);
  v9 = _MergedGlobals_273 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_273 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (_MergedGlobals_273)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_273 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_273)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_273 + v18);
    if (_MergedGlobals_273)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85758 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_273;
  if (!_MergedGlobals_273)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_273 - 4);
  v9 = _MergedGlobals_273 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_273 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (_MergedGlobals_273)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_273 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_273)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_273 + v18);
    if (_MergedGlobals_273)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85758 & 1) != 0)
  {
    v6 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_273;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_273)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
LABEL_7:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85758 & 1) != 0)
  {
    v6 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_273;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_273)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
LABEL_7:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85758 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)_MergedGlobals_273;
  if (!_MergedGlobals_273)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(_MergedGlobals_273 - 4);
  v6 = _MergedGlobals_273 + 16 * v5;
  if (!*(_DWORD *)(_MergedGlobals_273 - 12))
  {
    v15 = _MergedGlobals_273 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)_MergedGlobals_273;
    if (_MergedGlobals_273)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_273 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (_MergedGlobals_273)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = _MergedGlobals_273 + v16;
    if (_MergedGlobals_273)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85758 & 1) != 0)
  {
    v3 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = _MergedGlobals_273;
    if (v4)
      goto LABEL_7;
    if (_MergedGlobals_273)
      v4 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
LABEL_7:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85768 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85760 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85760, v22, (uint64_t)v13);
    byte_1ECE85768 = 1;
  }
  if ((byte_1ECE85758 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
    goto LABEL_9;
  }
  v3 = _MergedGlobals_273;
  if (!_MergedGlobals_273)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = _MergedGlobals_273;
  if (!v4)
  {
    if (_MergedGlobals_273)
    {
      v4 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85760)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85760 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85760 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85760 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85758 & 1) != 0)
  {
    v14 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = _MergedGlobals_273;
    if (v15)
      goto LABEL_7;
    if (_MergedGlobals_273)
      v15 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
LABEL_7:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEMorphologyElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85758 & 1) != 0)
  {
    v6 = _MergedGlobals_273;
    if (!_MergedGlobals_273)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_273;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_273)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_273 + 16 * *(unsigned int *)(_MergedGlobals_273 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
LABEL_7:
  if ((byte_1ECE85758 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = _MergedGlobals_273;
  if (!_MergedGlobals_273)
    return 0;
  v3 = *(_DWORD *)(_MergedGlobals_273 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::MorphologyOperatorType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::MorphologyOperatorType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 1)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 2;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::MorphologyOperatorType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::MorphologyOperatorType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::MorphologyOperatorType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _DWORD *v3;

  v2 = *(unsigned __int8 *)(result + 12);
  if (v2 == 2 || v2 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::MorphologyOperatorType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E3464A70;
  *a2 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEMorphologyElement::SVGFEMorphologyElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85770 & 1) == 0)
  {
    qword_1ECE858C8 = (uint64_t)off_1E3464AC0;
    unk_1ECE858D0 = 224;
    byte_1ECE85770 = 1;
  }
  if ((byte_1ECE85758 & 1) == 0)
  {
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE858C8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE85778 & 1) == 0)
  {
    qword_1ECE858D8 = (uint64_t)off_1E3464B28;
    unk_1ECE858E0 = 232;
    byte_1ECE85778 = 1;
  }
  if ((byte_1ECE85758 & 1) == 0)
  {
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE858D8;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::operatorAttr, &v2);
  if ((byte_1ECE85780 & 1) == 0)
  {
    qword_1ECE85A18 = 240;
    qword_1ECE85A10 = (uint64_t)off_1E3464D18;
    qword_1ECE85A28 = 248;
    qword_1ECE85A20 = (uint64_t)off_1E3464D18;
    qword_1ECE85A08 = (uint64_t)off_1E3464CB0;
    byte_1ECE85780 = 1;
  }
  if ((byte_1ECE85758 & 1) == 0)
  {
    _MergedGlobals_273 = 0;
    byte_1ECE85758 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85A08;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::radiusAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = _MergedGlobals_273;
  if (_MergedGlobals_273
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = _MergedGlobals_273) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(_MergedGlobals_273 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (_MergedGlobals_273)
      v29 = *(_DWORD *)(_MergedGlobals_273 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(_MergedGlobals_273 - 12) = v29;
    v33 = _MergedGlobals_273;
    if (_MergedGlobals_273)
      v34 = *(_DWORD *)(_MergedGlobals_273 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(_MergedGlobals_273 - 16) + v34);
    v36 = *(unsigned int *)(_MergedGlobals_273 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = _MergedGlobals_273;
        if (_MergedGlobals_273)
          v36 = *(unsigned int *)(_MergedGlobals_273 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(_MergedGlobals_273 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (_MergedGlobals_273)
    v30 = *(unsigned int *)(_MergedGlobals_273 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = _MergedGlobals_273 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = _MergedGlobals_273;
  if (_MergedGlobals_273)
  {
    v5 = *(_DWORD *)(_MergedGlobals_273 - 4);
    v6 = *(_DWORD *)(_MergedGlobals_273 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  _MergedGlobals_273 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(_MergedGlobals_273 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[234];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEMorphologyElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEMorphologyElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEMorphologyElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEMorphologyElement,WebCore::MorphologyOperatorType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3464C60;
  *(_QWORD *)result = &off_1E3464B90;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFEMorphologyElement,WebCore::MorphologyOperatorType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::MorphologyOperatorType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E3464BF8;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::MorphologyOperatorType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3464BF8;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t result;
  char v9;

  if ((MEMORY[0x19AEA53F4](*a3, "erode", 5) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "dilate", 6))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 65) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "erode", 5);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "dilate", 6);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_BYTE *)(a1 + 66) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::MorphologyOperatorType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::MorphologyOperatorType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::MorphologyOperatorType>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t result;
  char v9;

  if ((MEMORY[0x19AEA53F4](*a3, "erode", 5) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "dilate", 6))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 9) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "erode", 5);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "dilate", 6);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_BYTE *)(a1 + 10) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEMorphologyElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEMorphologyElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFEMorphologyElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEMorphologyElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEMorphologyElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t *WebCore::SVGFEOffsetElement::SVGFEOffsetElement(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  *a1 = (uint64_t)off_1E3462318;
  a1[14] = (uint64_t)&unk_1E3462878;
  v6 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3464D80;
  *((_QWORD *)v6 + 1) = a1;
  v12 = v6;
  WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(a1, a2, a3, (uint64_t *)&v12);
  v7 = (uint64_t)v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = (uint64_t)off_1E3462318;
  a1[14] = (uint64_t)&unk_1E3462878;
  WebCore::SVGAnimatedString::create((WebCore::SVGAnimatedString *)a1, a1 + 28);
  WebCore::SVGAnimatedPrimitiveProperty<float>::create((uint64_t)a1, a1 + 29);
  WebCore::SVGAnimatedPrimitiveProperty<float>::create((uint64_t)a1, a1 + 30);
  v8 = atomic_load(&WebCore::SVGFEOffsetElement::SVGFEOffsetElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v8 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::SVGFEOffsetElement::SVGFEOffsetElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFEOffsetElement::SVGFEOffsetElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85790 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85788;
  if (!qword_1ECE85788)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85788 - 4);
  v4 = qword_1ECE85788 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85788 - 12))
  {
    v13 = qword_1ECE85788 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85788;
    if (!qword_1ECE85788)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85788;
    if (qword_1ECE85788)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85788 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85788)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85788 + v14;
    if (qword_1ECE85788)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85790 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85788;
  if (!qword_1ECE85788)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85788 - 4);
  v9 = qword_1ECE85788 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85788 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85788 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85788;
    if (!qword_1ECE85788)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85788;
    if (qword_1ECE85788)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85788 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85788)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85788 + v18);
    if (qword_1ECE85788)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl **v60;
  int v61;
  WTF::StringImpl **v62;
  WTF *v64;
  void *v65;
  WTF::StringImpl **v66;
  WTF *v67;
  void *v68;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85790 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
LABEL_23:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85788;
  if (!qword_1ECE85788)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_23;
  }
  v8 = *(unsigned int *)(qword_1ECE85788 - 4);
  v9 = qword_1ECE85788 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85788 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85788 + 16 * v8);
    goto LABEL_23;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85788;
    if (!qword_1ECE85788)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85788;
    if (qword_1ECE85788)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85788 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85788)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85788 + v18);
    if (qword_1ECE85788)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = (WTF::StringImpl **)WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_76:
    v29 = &v27[2 * v28];
    if (!v27)
      goto LABEL_85;
LABEL_84:
    v27 += 2 * *((unsigned int *)v27 - 1);
    goto LABEL_85;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_76;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_76;
  }
  if (!(_DWORD)v28)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_85;
    goto LABEL_84;
  }
  v30 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v31 = 16 * v28;
    while (1)
    {
      if (v30)
      {
        v32 = (*(_DWORD *)v30)++;
        v33 = *v27;
        if (v32)
        {
          *(_DWORD *)v30 = v32;
          v34 = (uint64_t)v30;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
          result = (WTF::StringImpl **)WTF::fastFree(v36, v37);
          v34 = WebCore::nullName;
        }
      }
      else
      {
        v34 = 0;
        v33 = *v27;
      }
      if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
        break;
      v27 += 2;
      v30 = (WTF::StringImpl **)v34;
      v31 -= 16;
      if (!v31)
      {
        v27 = v29;
        break;
      }
    }
    v17 = v27;
    v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
  else
  {
    v38 = 0;
    v39 = 16 * v28;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v38)
                             + 1) <= 1)
    {
      v38 += 16;
      if (v39 == v38)
      {
        v17 = v29;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_84;
        goto LABEL_85;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v38);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
  }
LABEL_85:
  while (v17 != v27)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_150;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = (WTF::StringImpl **)WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_102;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_102:
            v17 = v29;
            goto LABEL_104;
          }
        }
      }
      v17 = v40;
    }
LABEL_104:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_164;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_164:
    v49 = &v47[2 * v48];
    goto LABEL_127;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_164;
  }
  if ((_DWORD)v48)
  {
    v50 = (WTF::StringImpl **)WebCore::nullName;
    v51 = 16 * v48;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v50)
        {
          v52 = (*(_DWORD *)v50)++;
          v53 = *v47;
          if (v52)
          {
            *(_DWORD *)v50 = v52;
            v54 = (uint64_t)v50;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v50);
            result = (WTF::StringImpl **)WTF::fastFree(v56, v57);
            v54 = WebCore::nullName;
          }
        }
        else
        {
          v54 = 0;
          v53 = *v47;
        }
        if (v53 != v50 && (WTF::StringImpl **)((char *)*v47 + 1) != 0)
          break;
        v47 += 2;
        v50 = (WTF::StringImpl **)v54;
        v51 -= 16;
        if (!v51)
        {
          v47 = v49;
          break;
        }
      }
      v17 = v47;
      v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v58 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v58)
                               + 1) <= 1)
      {
        v58 += 16;
        if (v51 == v58)
        {
          v17 = v49;
          goto LABEL_127;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v58);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_127:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v59 = v17 + 2;
      v17 = v49;
      if (v59 != v49)
      {
        v60 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_133:
          v61 = (*(_DWORD *)v60)++;
          v62 = *v59;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v60);
            result = (WTF::StringImpl **)WTF::fastFree(v64, v65);
          }
          while (v62 == v60 || (WTF::StringImpl **)((char *)*v59 + 1) == 0)
          {
            v59 += 2;
            if (v59 == v49)
              goto LABEL_146;
            v60 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_133;
            v62 = *v59;
          }
        }
        else
        {
          while ((unint64_t)*v59 + 1 <= 1)
          {
            v59 += 2;
            if (v59 == v49)
            {
LABEL_146:
              v17 = v49;
              goto LABEL_148;
            }
          }
        }
        v17 = v59;
      }
LABEL_148:
      if (v17 == v47)
        return result;
    }
LABEL_150:
    v66 = *v17;
    if (*v17)
      ++*(_DWORD *)v66;
    result = *a3;
    *a3 = v66;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v67, v68);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4[2];

  *a3 = 0;
  a3[8] = 0;
  v4[0] = a1;
  v4[1] = (uint64_t)a3;
  return _ZN7WebCore24SVGPropertyOwnerRegistryINS_18SVGFEOffsetElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(a2, v4);
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85790 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85788;
  if (!qword_1ECE85788)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85788 - 4);
  v6 = qword_1ECE85788 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85788 - 12))
  {
    v15 = qword_1ECE85788 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85788;
    if (!qword_1ECE85788)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85788;
    if (qword_1ECE85788)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85788 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85788)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85788 + v16;
    if (qword_1ECE85788)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_16:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE857A0 & 1) == 0)
  {
    v12 = WebCore::SVGNames::cxAttr;
    v13 = WebCore::SVGNames::cyAttr;
    v14 = WebCore::SVGNames::rAttr;
    v15 = WebCore::SVGNames::rxAttr;
    v16 = WebCore::SVGNames::ryAttr;
    v17 = WebCore::SVGNames::heightAttr;
    v18 = WebCore::SVGNames::widthAttr;
    v19 = WebCore::SVGNames::xAttr;
    v20[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85798 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v12, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v13, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v14, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v15, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v16, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v17, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v18, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, &v19, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85798, v20, (uint64_t)v11);
    byte_1ECE857A0 = 1;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 4))(result);
    if ((_DWORD)result)
    {
      if (qword_1ECE85798)
      {
        v4 = *(_DWORD *)(qword_1ECE85798 - 8);
        v5 = ~(*a2 << 32) + *a2;
        v6 = 9
           * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(_QWORD *)(qword_1ECE85798 + 8 * v8);
        if (v9 == *a2)
        {
          return (WTF::StringImpl **)1;
        }
        else
        {
          v10 = 1;
          do
          {
            result = (WTF::StringImpl **)(v9 != 0);
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(_QWORD *)(qword_1ECE85798 + 8 * v8);
            ++v10;
          }
          while (v9 != *a2);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  char *result;
  char *v15;
  uint64_t v16;

  *a7 = 0;
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result
    || (result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2)) != 0)
  {
LABEL_3:
    result = (char *)(*(_QWORD *(**)(uint64_t *__return_ptr, char *, _QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(&v16, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
    *a7 = v16;
    return result;
  }
  {
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_16;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v15 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_10;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_16:
      result = 0;
  }
  else
  {
    v15 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_10:
  {
    if (v15)
      v15 += 16 * *((unsigned int *)v15 - 1);
  }
  else
  {
    v15 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v15 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      goto LABEL_3;
  }
  return result;
}

char *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor(a2);
  if (result)
    return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_15;
    result = (char *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
             + 16
             * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
               - 1);
    else
LABEL_15:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v7)
      v7 += 16 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (char *)*((_QWORD *)result + 1);
    if (result)
      return (char *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  uint64_t v2;

  if ((byte_1ECE85790 & 1) == 0)
  {
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if ((byte_1ECE85790 & 1) != 0)
  {
    v2 = qword_1ECE85788;
    if (qword_1ECE85788)
      v2 = qword_1ECE85788 + 16 * *(unsigned int *)(qword_1ECE85788 - 4);
  }
  else
  {
    v2 = 0;
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
  }
  if ((WTF::StringImpl ***)v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  WTF::StringImpl ***result;

  if (!qword_1ECE85788)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if (result)
    return result;
  if (!qword_1ECE85788)
    return 0;
  return (WTF::StringImpl ***)(qword_1ECE85788 + 16 * *(unsigned int *)(qword_1ECE85788 - 4));
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  int v5;
  WTF::StringImpl **i;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  v1 = qword_1ECE85788;
  if (qword_1ECE85788)
  {
    v3 = *(_DWORD *)(qword_1ECE85788 - 8);
    v4 = WebCore::SVGAttributeHashTranslator::hash(a1);
    v5 = 0;
    for (i = (WTF::StringImpl **)WebCore::nullName; ; i = (WTF::StringImpl **)v11)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (i)
      {
        v9 = (*(_DWORD *)i)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)i = v9;
          v11 = (uint64_t)i;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(i);
          WTF::fastFree(v15, v16);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == i)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *(WTF::StringImpl **)(v13 + 24) && v12[4] == *(WTF::StringImpl **)(v13 + 32))
        {
          return v8;
        }
      }
      v4 = ++v5 + v7;
    }
  }
  return 0;
}

WTF::StringImpl *_ZN7WebCore24SVGPropertyOwnerRegistryINS_18SVGFEOffsetElementEJNS_36SVGFilterPrimitiveStandardAttributesEEE25lookupRecursivelyAndApplyIZNKS3_11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS7_RKS8_(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::findAccessor(a1);
  if (Accessor)
    return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::synchronize(WebCore::QualifiedName const&)const::{lambda(WebCore::SVGElement &)#1}::operator()<WebCore::SVGMemberAccessor<WebCore::SVGElement> const>(a2, (uint64_t)Accessor);
  else
    return (WTF::StringImpl *)_ZN7WebCore24SVGPropertyOwnerRegistryINS_36SVGFilterPrimitiveStandardAttributesEJNS_10SVGElementEEE25lookupRecursivelyAndApplyIZNKS0_INS_23SVGFEColorMatrixElementEJS1_EE11synchronizeERKNS_13QualifiedNameEEUlRT_E_EEbS9_RKSA_(a1, a2);
}

WTF::Thread *WebCore::SVGFEOffsetElement::SVGFEOffsetElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEOffsetElement::m_in1>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::dxAttr,&WebCore::SVGFEOffsetElement::m_dx>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::dyAttr,&WebCore::SVGFEOffsetElement::m_dy>();
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::inAttr,&WebCore::SVGFEOffsetElement::m_in1>()
{
  if ((byte_1ECE857A8 & 1) == 0)
  {
    qword_1ECE858E8 = (uint64_t)off_1E3464DF0;
    unk_1ECE858F0 = 224;
    byte_1ECE857A8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::inAttr, (uint64_t)&qword_1ECE858E8);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::dxAttr,&WebCore::SVGFEOffsetElement::m_dx>()
{
  if ((byte_1ECE857B0 & 1) == 0)
  {
    qword_1ECE858F8 = (uint64_t)off_1E3464E58;
    unk_1ECE85900 = 232;
    byte_1ECE857B0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::dxAttr, (uint64_t)&qword_1ECE858F8);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty<WebCore::SVGNames::dyAttr,&WebCore::SVGFEOffsetElement::m_dy>()
{
  if ((byte_1ECE857B8 & 1) == 0)
  {
    qword_1ECE85908 = (uint64_t)off_1E3464E58;
    unk_1ECE85910 = 240;
    byte_1ECE857B8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(&WebCore::SVGNames::dyAttr, (uint64_t)&qword_1ECE85908);
}

WTF::Thread *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFEOffsetElement,WebCore::SVGFilterPrimitiveStandardAttributes>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE85790 & 1) == 0)
  {
    qword_1ECE85788 = 0;
    byte_1ECE85790 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>((uint64_t)&v3, a1, &v4);
}

WTF::Thread *WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::Thread *v9;
  WTF::Thread *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = qword_1ECE85788;
  if (qword_1ECE85788
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = qword_1ECE85788) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (WTF::Thread *)(v6 + 16 * v8);
  result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == -1)
      {
        v18 = (uint64_t *)v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == *a2
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v21 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v21 + 32))
        {
          if (qword_1ECE85788)
            v23 = *(unsigned int *)(qword_1ECE85788 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = qword_1ECE85788 + 16 * v23;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (WTF::Thread *)(v6 + 16 * v8);
      result = (WTF::Thread *)WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(qword_1ECE85788 - 16);
      v9 = (WTF::Thread *)v18;
    }
  }
  result = (WTF::Thread *)WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  *((_QWORD *)v9 + 1) = *a3;
  if (qword_1ECE85788)
    v11 = *(_DWORD *)(qword_1ECE85788 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(qword_1ECE85788 - 12) = v11;
  v12 = qword_1ECE85788;
  if (qword_1ECE85788)
    v13 = *(_DWORD *)(qword_1ECE85788 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(qword_1ECE85788 - 16) + v13);
  v15 = *(unsigned int *)(qword_1ECE85788 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_11;
LABEL_27:
    result = (WTF::Thread *)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = result;
    v12 = qword_1ECE85788;
    if (qword_1ECE85788)
      v15 = *(unsigned int *)(qword_1ECE85788 - 4);
    else
      v15 = 0;
    goto LABEL_11;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_27;
LABEL_11:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_12:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE85788 && (v2 = *(_DWORD *)(qword_1ECE85788 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE85788 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;

  v4 = qword_1ECE85788;
  if (qword_1ECE85788)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE85788 - 4);
    v6 = *(_DWORD *)(qword_1ECE85788 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE85788 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE85788 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v11 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v11 != (WTF::StringImpl **)-1)
      {
        if (WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>((WTF::Thread *)v11))
        {
          WebCore::QualifiedName::~QualifiedName(v11);
        }
        else
        {
          v12 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((uint64_t *)v11);
          WebCore::QualifiedName::~QualifiedName(v11);
          if (v11 == a2)
            v9 = v12;
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v9;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl **v6;
  int v7;
  int v8;
  WTF::StringImpl ***v9;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  BOOL v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl **v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  WTF *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v2 = *a1;
  v3 = qword_1ECE85788;
  if (qword_1ECE85788)
    v4 = *(_DWORD *)(qword_1ECE85788 - 8);
  else
    v4 = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = *(_QWORD *)(v2 + 32);
    v25 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v26 = v25 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v27 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v26 + (v25 >> 11)) << 16) ^ (v26 + (v25 >> 11));
    v28 = (v23 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)v23 + (v27 >> 11)) << 16) ^ (v27 + (unsigned __int16)v23 + (v27 >> 11));
    v29 = (v23 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v23) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v23) + (v28 >> 11));
    v30 = (v24 >> 5) & 0x7FFF800 ^ ((v29 + (unsigned __int16)v24 + (v29 >> 11)) << 16) ^ (v29 + (unsigned __int16)v24 + (v29 >> 11));
    v31 = (v24 >> 37) & 0x7FFF800 ^ ((v30 + WORD2(v24) + (v30 >> 11)) << 16) ^ (v30 + WORD2(v24) + (v30 >> 11));
    v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
    v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
    v34 = (v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10);
    if (v34)
      v5 = v34;
    else
      v5 = 0x800000;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 4);
    if (!v5)
    {
      v5 = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)v2);
      *(_DWORD *)(v2 + 4) = v5;
    }
  }
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v7 = 0;
    do
    {
      v8 = v5 & v4;
      v9 = (WTF::StringImpl ***)(v3 + 16 * (v5 & v4));
      if (v6)
      {
        v10 = (*(_DWORD *)v6)++;
        v11 = *v9;
        if (v10)
        {
          *(_DWORD *)v6 = v10;
          v12 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          WTF::fastFree(v14, v15);
          v12 = WebCore::nullName;
        }
      }
      else
      {
        v12 = 0;
        v11 = *v9;
      }
      v5 = ++v7 + v8;
      v13 = v11 == v6;
      v6 = (WTF::StringImpl **)v12;
    }
    while (!v13);
    v16 = *v9;
    *v9 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = v5 & v4;
      v5 = ++v17 + v18;
    }
    while (*(_QWORD *)(v3 + 16 * v18));
    v9 = (WTF::StringImpl ***)(v3 + 16 * v18);
    *v9 = 0;
  }
  v19 = *(_OWORD *)a1;
  *a1 = 0;
  *(_OWORD *)v9 = v19;
  return v9;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFEOffsetElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEOffsetElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFEOffsetElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFEOffsetElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEOffsetElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFEOffsetElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE857C8 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE857C0;
  if (!qword_1ECE857C0)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE857C0 - 4);
  v4 = qword_1ECE857C0 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE857C0 - 12))
  {
    v13 = qword_1ECE857C0 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (qword_1ECE857C0)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE857C0 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE857C0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE857C0 + v14;
    if (qword_1ECE857C0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE857C8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE857C0;
  if (!qword_1ECE857C0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE857C0 - 4);
  v9 = qword_1ECE857C0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE857C0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (qword_1ECE857C0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE857C0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE857C0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE857C0 + v18);
    if (qword_1ECE857C0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE857C8 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE857C0;
  if (!qword_1ECE857C0)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE857C0 - 4);
  v9 = qword_1ECE857C0 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE857C0 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (qword_1ECE857C0)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE857C0 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE857C0)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE857C0 + v18);
    if (qword_1ECE857C0)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE857C8 & 1) != 0)
  {
    v6 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE857C0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v7 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE857C8 & 1) != 0)
  {
    v6 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE857C0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v7 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE857C8 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE857C0;
  if (!qword_1ECE857C0)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE857C0 - 4);
  v6 = qword_1ECE857C0 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE857C0 - 12))
  {
    v15 = qword_1ECE857C0 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE857C0;
    if (qword_1ECE857C0)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE857C0 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE857C0)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE857C0 + v16;
    if (qword_1ECE857C0)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE857C8 & 1) != 0)
  {
    v3 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE857C0;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v4 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE857D8 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE857D0 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE857D0, v22, (uint64_t)v13);
    byte_1ECE857D8 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE857C0;
  if (!qword_1ECE857C0)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE857C0;
  if (!v4)
  {
    if (qword_1ECE857C0)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE857D0)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE857D0 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE857D0 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE857D0 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE857C8 & 1) != 0)
  {
    v14 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE857C0;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v15 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFESpecularLightingElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE857C8 & 1) != 0)
  {
    v6 = qword_1ECE857C0;
    if (!qword_1ECE857C0)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE857C0;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE857C0)
      v7 = (WTF::StringImpl ***)(qword_1ECE857C0 + 16 * *(unsigned int *)(qword_1ECE857C0 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
LABEL_7:
  if ((byte_1ECE857C8 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE857C0;
  if (!qword_1ECE857C0)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE857C0 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFESpecularLightingElement::SVGFESpecularLightingElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE857E0 & 1) == 0)
  {
    qword_1ECE85918 = (uint64_t)off_1E3464F30;
    unk_1ECE85920 = 224;
    byte_1ECE857E0 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85918;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::inAttr, &v2);
  if ((byte_1ECE857E8 & 1) == 0)
  {
    qword_1ECE85928 = (uint64_t)off_1E3464F98;
    unk_1ECE85930 = 232;
    byte_1ECE857E8 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85928;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::specularConstantAttr, &v2);
  if ((byte_1ECE857F0 & 1) == 0)
  {
    qword_1ECE85938 = (uint64_t)off_1E3464F98;
    unk_1ECE85940 = 240;
    byte_1ECE857F0 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85938;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::specularExponentAttr, &v2);
  if ((byte_1ECE857F8 & 1) == 0)
  {
    qword_1ECE85948 = (uint64_t)off_1E3464F98;
    unk_1ECE85950 = 248;
    byte_1ECE857F8 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85948;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::surfaceScaleAttr, &v2);
  if ((byte_1ECE85800 & 1) == 0)
  {
    qword_1ECE85A40 = 256;
    qword_1ECE85A38 = (uint64_t)off_1E3464F98;
    qword_1ECE85A50 = 264;
    qword_1ECE85A48 = (uint64_t)off_1E3464F98;
    qword_1ECE85A30 = (uint64_t)off_1E3465000;
    byte_1ECE85800 = 1;
  }
  if ((byte_1ECE857C8 & 1) == 0)
  {
    qword_1ECE857C0 = 0;
    byte_1ECE857C8 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85A30;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::kernelUnitLengthAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE857C0;
  if (qword_1ECE857C0
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE857C0) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE857C0 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE857C0)
      v29 = *(_DWORD *)(qword_1ECE857C0 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE857C0 - 12) = v29;
    v33 = qword_1ECE857C0;
    if (qword_1ECE857C0)
      v34 = *(_DWORD *)(qword_1ECE857C0 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE857C0 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE857C0 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE857C0;
        if (qword_1ECE857C0)
          v36 = *(unsigned int *)(qword_1ECE857C0 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE857C0 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE857C0)
    v30 = *(unsigned int *)(qword_1ECE857C0 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE857C0 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE857C0;
  if (qword_1ECE857C0)
  {
    v5 = *(_DWORD *)(qword_1ECE857C0 - 4);
    v6 = *(_DWORD *)(qword_1ECE857C0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE857C0 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE857C0 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[248];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFESpecularLightingElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFESpecularLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFESpecularLightingElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFESpecularLightingElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFESpecularLightingElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFESpecularLightingElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFESpecularLightingElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFESpecularLightingElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85810 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85808;
  if (!qword_1ECE85808)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85808 - 4);
  v4 = qword_1ECE85808 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85808 - 12))
  {
    v13 = qword_1ECE85808 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85808;
    if (qword_1ECE85808)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85808 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85808)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85808 + v14;
    if (qword_1ECE85808)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85810 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85808;
  if (!qword_1ECE85808)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85808 - 4);
  v9 = qword_1ECE85808 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85808 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85808;
    if (qword_1ECE85808)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85808 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85808)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85808 + v18);
    if (qword_1ECE85808)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85810 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85808;
  if (!qword_1ECE85808)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85808 - 4);
  v9 = qword_1ECE85808 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85808 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85808;
    if (qword_1ECE85808)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85808 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85808)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85808 + v18);
    if (qword_1ECE85808)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85810 & 1) != 0)
  {
    v6 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85808;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85808)
      v7 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85810 & 1) != 0)
  {
    v6 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85808;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85808)
      v7 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85810 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85808;
  if (!qword_1ECE85808)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85808 - 4);
  v6 = qword_1ECE85808 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85808 - 12))
  {
    v15 = qword_1ECE85808 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85808;
    if (qword_1ECE85808)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85808 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85808)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85808 + v16;
    if (qword_1ECE85808)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85810 & 1) != 0)
  {
    v3 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85808;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85808)
      v4 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85820 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85818 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85818, v22, (uint64_t)v13);
    byte_1ECE85820 = 1;
  }
  if ((byte_1ECE85810 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85808;
  if (!qword_1ECE85808)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85808;
  if (!v4)
  {
    if (qword_1ECE85808)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85818)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85818 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85818 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85818 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85810 & 1) != 0)
  {
    v14 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE85808;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE85808)
      v15 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETileElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85810 & 1) != 0)
  {
    v6 = qword_1ECE85808;
    if (!qword_1ECE85808)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85808;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85808)
      v7 = (WTF::StringImpl ***)(qword_1ECE85808 + 16 * *(unsigned int *)(qword_1ECE85808 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
LABEL_7:
  if ((byte_1ECE85810 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85808;
  if (!qword_1ECE85808)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85808 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFETileElement::SVGFETileElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  uint64_t *v5;
  int i;
  int v7;
  uint64_t *v8;
  int v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;
  uint64_t v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if ((byte_1ECE85828 & 1) == 0)
  {
    qword_1ECE85958 = (uint64_t)off_1E34650D8;
    unk_1ECE85960 = 224;
    byte_1ECE85828 = 1;
  }
  if ((byte_1ECE85810 & 1) != 0)
  {
    v0 = qword_1ECE85808;
    if (qword_1ECE85808)
    {
LABEL_6:
      v1 = *(_DWORD *)(v0 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    qword_1ECE85808 = 0;
    byte_1ECE85810 = 1;
  }
  WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0);
  v0 = qword_1ECE85808;
  if (qword_1ECE85808)
    goto LABEL_6;
  v1 = 0;
LABEL_7:
  v2 = WebCore::SVGNames::inAttr;
  if (*(_QWORD *)(WebCore::SVGNames::inAttr + 16))
  {
    v27 = *(_QWORD *)(WebCore::SVGNames::inAttr + 24);
    v28 = *(_QWORD *)(WebCore::SVGNames::inAttr + 32);
    v29 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v30 = v29 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v31 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v30 + (v29 >> 11)) << 16) ^ (v30 + (v29 >> 11));
    v32 = (v27 >> 5) & 0x7FFF800 ^ ((v31 + (unsigned __int16)v27 + (v31 >> 11)) << 16) ^ (v31 + (unsigned __int16)v27 + (v31 >> 11));
    v33 = (v27 >> 37) & 0x7FFF800 ^ ((v32 + WORD2(v27) + (v32 >> 11)) << 16) ^ (v32 + WORD2(v27) + (v32 >> 11));
    v34 = (v28 >> 5) & 0x7FFF800 ^ ((v33 + (unsigned __int16)v28 + (v33 >> 11)) << 16) ^ (v33 + (unsigned __int16)v28 + (v33 >> 11));
    v35 = (v28 >> 37) & 0x7FFF800 ^ ((v34 + WORD2(v28) + (v34 >> 11)) << 16) ^ (v34 + WORD2(v28) + (v34 >> 11));
    v36 = (v35 + (v35 >> 11)) ^ (8 * (v35 + (v35 >> 11)));
    v37 = (v36 + (v36 >> 5)) ^ (4 * (v36 + (v36 >> 5)));
    v38 = (v37 + (v37 >> 15)) ^ ((v37 + (v37 >> 15)) << 10);
    if (v38)
      result = v38;
    else
      result = 0x800000;
  }
  else
  {
    result = *(unsigned int *)(WebCore::SVGNames::inAttr + 4);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash((WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr);
      *(_DWORD *)(v2 + 4) = result;
    }
  }
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    for (i = 1; ; ++i)
    {
      v7 = result & v1;
      v8 = (uint64_t *)(v0 + 16 * (result & v1));
      if (v4)
      {
        v9 = (*(_DWORD *)v4)++;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        if (v9)
        {
          *(_DWORD *)v4 = v9;
          v11 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      }
      if (v10 == (WebCore::QualifiedName::QualifiedNameImpl *)v4)
        break;
      v12 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
      if (*v8 != -1)
      {
        if (v12 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
          return result;
        if (*((_QWORD *)v12 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
        {
          v8 = v5;
          if (*((_QWORD *)v12 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
            return result;
        }
        else
        {
          v8 = v5;
        }
      }
      result = (i + v7);
      v4 = (WTF::StringImpl **)v11;
      v5 = v8;
    }
LABEL_35:
    if (v5)
    {
      v18 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v5 = v18;
      v5[1] = 0;
      --*(_DWORD *)(qword_1ECE85808 - 16);
      v8 = v5;
    }
  }
  else
  {
    v15 = result & v1;
    v8 = (uint64_t *)(v0 + 16 * (result & v1));
    v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
    if (*v8)
    {
      result = 0;
      v17 = 1;
      while (1)
      {
        v5 = v8;
        if (v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::SVGNames::inAttr)
            return result;
          if (*((_QWORD *)v16 + 3) == *(_QWORD *)(WebCore::SVGNames::inAttr + 24))
          {
            v5 = (uint64_t *)result;
            if (*((_QWORD *)v16 + 4) == *(_QWORD *)(WebCore::SVGNames::inAttr + 32))
              return result;
          }
          else
          {
            v5 = (uint64_t *)result;
          }
        }
        v15 = (v15 + v17) & v1;
        v8 = (uint64_t *)(v0 + 16 * v15);
        v16 = (WebCore::QualifiedName::QualifiedNameImpl *)*v8;
        ++v17;
        result = (uint64_t)v5;
        if (!*v8)
          goto LABEL_35;
      }
    }
  }
  v19 = WebCore::SVGNames::inAttr;
  if (WebCore::SVGNames::inAttr)
    ++*(_DWORD *)WebCore::SVGNames::inAttr;
  result = *v8;
  *v8 = v19;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      result = WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v8[1] = (uint64_t)&qword_1ECE85958;
  if (qword_1ECE85808)
    v20 = *(_DWORD *)(qword_1ECE85808 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(qword_1ECE85808 - 12) = v20;
  if (qword_1ECE85808)
    v21 = *(_DWORD *)(qword_1ECE85808 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(qword_1ECE85808 - 16) + v21);
  v23 = *(unsigned int *)(qword_1ECE85808 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      return result;
    if (!(_DWORD)v23)
    {
      v24 = 8;
      return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
    }
LABEL_54:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(qword_1ECE85808 - 12) >= (2 * v23));
    return (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v24, (WebCore::QualifiedName::QualifiedNameImpl **)v8);
  }
  if (v23 <= 2 * v22)
    goto LABEL_54;
  return result;
}

_DWORD *WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETileElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl ***v50;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85808;
  if (qword_1ECE85808)
  {
    v5 = *(_DWORD *)(qword_1ECE85808 - 4);
    v6 = *(_DWORD *)(qword_1ECE85808 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = result + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85808 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE85808 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v48 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[257];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v50 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v50;
        v15 = v48;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v50;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v48;
    goto LABEL_40;
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETileElement,WebCore::SVGAnimatedString>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETileElement,WebCore::SVGAnimatedString>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETileElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETileElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETileElement,WebCore::SVGAnimatedString>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETileElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETileElement,WebCore::SVGAnimatedString>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedStringAccessor<WebCore::SVGFETileElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3452D88;
  *(_QWORD *)result = off_1E3452CB8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedStringAccessor<WebCore::SVGFETileElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;

  v1 = result;
  if ((byte_1ECE85838 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85830;
  if (!qword_1ECE85830)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(qword_1ECE85830 - 4);
  v4 = qword_1ECE85830 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85830 - 12))
  {
    v13 = qword_1ECE85830 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85830;
    if (qword_1ECE85830)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85830 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85830)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85830 + v14;
    if (qword_1ECE85830)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v33 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_71:
    v24 = &v22[2 * v23];
    if (!v22)
      goto LABEL_80;
LABEL_79:
    v22 += 2 * *((unsigned int *)v22 - 1);
    goto LABEL_80;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v33 = 0;
    v23 = 0;
    goto LABEL_71;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_71;
  }
  if (!(_DWORD)v23)
  {
    v33 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_80;
    goto LABEL_79;
  }
  v25 = (WTF::StringImpl **)WebCore::nullName;
  v26 = 16 * v23;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v25)
      {
        v27 = (*(_DWORD *)v25)++;
        v28 = *v22;
        if (v27)
        {
          *(_DWORD *)v25 = v27;
          v29 = (uint64_t)v25;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
          result = WTF::fastFree(v31, v32);
          v29 = WebCore::nullName;
        }
      }
      else
      {
        v29 = 0;
        v28 = *v22;
      }
      if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
        break;
      v22 += 2;
      v25 = (WTF::StringImpl **)v29;
      v26 -= 16;
      if (!v26)
      {
        v22 = v24;
        break;
      }
    }
    v33 = v22;
    v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
  else
  {
    v34 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v34)
                             + 1) <= 1)
    {
      v34 += 16;
      if (v26 == v34)
      {
        v33 = v24;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    v33 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v34);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_79;
  }
LABEL_80:
  while (v33 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v33[1] + 2))(v33[1], *(_QWORD *)(v1 + 8));
    v35 = v33 + 2;
    v33 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_96;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_96:
            v33 = v24;
            goto LABEL_98;
          }
        }
      }
      v33 = v35;
    }
LABEL_98:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_151;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_151:
    v44 = &v42[2 * v43];
    goto LABEL_122;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_151;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_122;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_122:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_140;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_140:
            v55 = v44;
            goto LABEL_142;
          }
        }
      }
      v55 = v56;
    }
LABEL_142:
    ;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::propertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85838 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85830;
  if (!qword_1ECE85830)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85830 - 4);
  v9 = qword_1ECE85830 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85830 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85830;
    if (qword_1ECE85830)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85830 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85830)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85830 + v18);
    if (qword_1ECE85830)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 5))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 5))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::animatedPropertyAttributeName@<X0>(WTF::StringImpl **result@<X0>, uint64_t a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl **v65;
  WTF *v66;
  void *v67;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = v6;
  if ((byte_1ECE85838 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85830;
  if (!qword_1ECE85830)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(qword_1ECE85830 - 4);
  v9 = qword_1ECE85830 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85830 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = (WTF::StringImpl **)WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85830;
    if (qword_1ECE85830)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85830 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85830)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85830 + v18);
    if (qword_1ECE85830)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = (WTF::StringImpl **)WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_75:
    v28 = &v26[2 * v27];
    if (!v26)
      goto LABEL_84;
LABEL_83:
    v26 += 2 * *((unsigned int *)v26 - 1);
    goto LABEL_84;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_75;
  }
  if (!(_DWORD)v27)
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_84;
    goto LABEL_83;
  }
  v29 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v30 = 16 * v27;
    while (1)
    {
      if (v29)
      {
        v31 = (*(_DWORD *)v29)++;
        v32 = *v26;
        if (v31)
        {
          *(_DWORD *)v29 = v31;
          v33 = (uint64_t)v29;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
          result = (WTF::StringImpl **)WTF::fastFree(v35, v36);
          v33 = WebCore::nullName;
        }
      }
      else
      {
        v33 = 0;
        v32 = *v26;
      }
      if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
        break;
      v26 += 2;
      v29 = (WTF::StringImpl **)v33;
      v30 -= 16;
      if (!v30)
      {
        v26 = v28;
        break;
      }
    }
    v17 = v26;
    v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
  else
  {
    v37 = 0;
    v38 = 16 * v27;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v38 == v37)
      {
        v17 = v28;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_83;
  }
LABEL_84:
  while (v17 != v26)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1] + 6))(v17[1], v4[1], a2);
    if ((_DWORD)result)
      goto LABEL_149;
    v39 = v17 + 2;
    v17 = v28;
    if (v39 != v28)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_88:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl **)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v28)
            goto LABEL_101;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_88;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v28)
          {
LABEL_101:
            v17 = v28;
            goto LABEL_103;
          }
        }
      }
      v17 = v39;
    }
LABEL_103:
    ;
  }
  {
    v46 = 0;
    v17 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_163;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v47 = 0;
LABEL_163:
    v48 = &v46[2 * v47];
    goto LABEL_126;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_163;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl **)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v17 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v17 = v48;
          goto LABEL_126;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_126:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  if (v46 != v17)
  {
    while (1)
    {
      result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl *, uint64_t))*v17[1]
                                    + 6))(v17[1], v4[1], a2);
      if ((_DWORD)result)
        break;
      v58 = v17 + 2;
      v17 = v48;
      if (v58 != v48)
      {
        v59 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
LABEL_132:
          v60 = (*(_DWORD *)v59)++;
          v61 = *v58;
          if (v60)
          {
            *(_DWORD *)v59 = v60;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
            result = (WTF::StringImpl **)WTF::fastFree(v63, v64);
          }
          while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
          {
            v58 += 2;
            if (v58 == v48)
              goto LABEL_145;
            v59 = (WTF::StringImpl **)WebCore::nullName;
            if (WebCore::nullName)
              goto LABEL_132;
            v61 = *v58;
          }
        }
        else
        {
          while ((unint64_t)*v58 + 1 <= 1)
          {
            v58 += 2;
            if (v58 == v48)
            {
LABEL_145:
              v17 = v48;
              goto LABEL_147;
            }
          }
        }
        v17 = v58;
      }
LABEL_147:
      if (v17 == v46)
        return result;
    }
LABEL_149:
    v65 = *v17;
    if (*v17)
      ++*(_DWORD *)v65;
    result = *a3;
    *a3 = v65;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v66, v67);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85838 & 1) != 0)
  {
    v6 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85830;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85830)
      v7 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 7))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronize@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  uint64_t v10;
  char v11;

  *a3 = 0;
  a3[8] = 0;
  if ((byte_1ECE85838 & 1) != 0)
  {
    v6 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85830;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85830)
      v7 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_29;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_29:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD))*result
                                    + 8))(&v10, result, *(_QWORD *)(a1 + 8));
      if (v11)
      {
        *(_QWORD *)a3 = v10;
        a3[8] = 1;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::synchronizeAllAttributes@<X0>(WTF::StringImpl *result@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  WTF::StringImpl ***v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl *v59;
  WTF::StringImpl ***v60;
  WTF::StringImpl **v61;
  int v62;
  WTF::StringImpl **v63;
  WTF *v65;
  void *v66;
  _BYTE v67[24];
  WTF::StringImpl *v68;
  char v69;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85838 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85830;
  if (!qword_1ECE85830)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(qword_1ECE85830 - 4);
  v6 = qword_1ECE85830 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85830 - 12))
  {
    v15 = qword_1ECE85830 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = (WTF::StringImpl *)WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85830;
    if (qword_1ECE85830)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85830 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85830)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85830 + v16;
    if (qword_1ECE85830)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8) + 64))(&v68, *(_QWORD *)(v15 + 8), *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = (WTF::StringImpl *)WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v36 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
LABEL_78:
    v27 = &v25[2 * v26];
    if (!v25)
      goto LABEL_87;
LABEL_86:
    v25 += 2 * *((unsigned int *)v25 - 1);
    goto LABEL_87;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v36 = 0;
    v26 = 0;
    goto LABEL_78;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_78;
  }
  if (!(_DWORD)v26)
  {
    v36 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_87;
    goto LABEL_86;
  }
  v28 = (WTF::StringImpl **)WebCore::nullName;
  v29 = 16 * v26;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v28)
      {
        v30 = (*(_DWORD *)v28)++;
        v31 = *v25;
        if (v30)
        {
          *(_DWORD *)v28 = v30;
          v32 = (uint64_t)v28;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
          result = (WTF::StringImpl *)WTF::fastFree(v34, v35);
          v32 = WebCore::nullName;
        }
      }
      else
      {
        v32 = 0;
        v31 = *v25;
      }
      if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
        break;
      v25 += 2;
      v28 = (WTF::StringImpl **)v32;
      v29 -= 16;
      if (!v29)
      {
        v25 = v27;
        break;
      }
    }
    v36 = v25;
    v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
  else
  {
    v37 = 0;
    while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                         + v37)
                             + 1) <= 1)
    {
      v37 += 16;
      if (v29 == v37)
      {
        v36 = v27;
        if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
          goto LABEL_86;
        goto LABEL_87;
      }
    }
    v36 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + v37);
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_86;
  }
LABEL_87:
  while (v36 != v25)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v36[1]
                                 + 8))(&v68, v36[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v36, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v36 + 2;
    v36 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_95:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = (WTF::StringImpl *)WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_108;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_95;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_108:
            v36 = v27;
            goto LABEL_110;
          }
        }
      }
      v36 = v39;
    }
LABEL_110:
    ;
  }
  {
    v46 = 0;
    v58 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_171;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v58 = 0;
    v47 = 0;
LABEL_171:
    v48 = &v46[2 * v47];
    goto LABEL_135;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_171;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    v50 = 16 * v47;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v58 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v50 == v57)
        {
          v58 = v48;
          goto LABEL_135;
        }
      }
      v58 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v58 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_135:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v58 != v46)
  {
    result = (WTF::StringImpl *)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v58[1]
                                 + 8))(&v68, v58[1], *((_QWORD *)v2 + 1));
    if (v69)
    {
      result = (WTF::StringImpl *)WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v58, (WTF::StringImpl ***)&v68, (uint64_t)v67);
      if (v69)
      {
        result = v68;
        v68 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v59);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v60 = v58 + 2;
    v58 = v48;
    if (v60 != v48)
    {
      v61 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_145:
        v62 = (*(_DWORD *)v61)++;
        v63 = *v60;
        if (v62)
        {
          *(_DWORD *)v61 = v62;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
          result = (WTF::StringImpl *)WTF::fastFree(v65, v66);
        }
        while (v63 == v61 || (WTF::StringImpl **)((char *)*v60 + 1) == 0)
        {
          v60 += 2;
          if (v60 == v48)
            goto LABEL_158;
          v61 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_145;
          v63 = *v60;
        }
      }
      else
      {
        while ((unint64_t)*v60 + 1 <= 1)
        {
          v60 += 2;
          if (v60 == v48)
          {
LABEL_158:
            v58 = v48;
            goto LABEL_160;
          }
        }
      }
      v58 = v60;
    }
LABEL_160:
    ;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedPropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  if ((byte_1ECE85838 & 1) != 0)
  {
    v3 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v3 = qword_1ECE85830;
    if (v4)
      goto LABEL_7;
    if (qword_1ECE85830)
      v4 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v3 != v4)
  {
    Accessor = v4[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::isAnimatedStylePropertyAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85848 & 1) == 0)
  {
    v14 = WebCore::SVGNames::cxAttr;
    v15 = WebCore::SVGNames::cyAttr;
    v16 = WebCore::SVGNames::rAttr;
    v17 = WebCore::SVGNames::rxAttr;
    v18 = WebCore::SVGNames::ryAttr;
    v19 = WebCore::SVGNames::heightAttr;
    v20 = WebCore::SVGNames::widthAttr;
    v21 = WebCore::SVGNames::xAttr;
    v22[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85840 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v14, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v15, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v16, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v17, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v18, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v19, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v20, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, &v21, (uint64_t)v13);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85840, v22, (uint64_t)v13);
    byte_1ECE85848 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    v3 = 0;
    v4 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
    goto LABEL_9;
  }
  v3 = qword_1ECE85830;
  if (!qword_1ECE85830)
    goto LABEL_8;
  v4 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
  v3 = qword_1ECE85830;
  if (!v4)
  {
    if (qword_1ECE85830)
    {
      v4 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  else
  {
    v3 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v3 == v4)
    return 0;
  result = (uint64_t)v4[1];
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (!(_DWORD)result)
    return result;
  if (!qword_1ECE85840)
    return 0;
  v6 = *(_DWORD *)(qword_1ECE85840 - 8);
  v7 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85840 + 8 * v10);
  if (v11 == *a2)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != 0;
    if (!v11)
      break;
    v10 = (v10 + v12) & v6;
    v11 = *(WebCore::QualifiedName::QualifiedNameImpl **)(qword_1ECE85840 + 8 * v10);
    ++v12;
  }
  while (v11 != *a2);
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::createAnimator@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **result;
  WTF::StringImpl **v17;
  uint64_t v18;

  *a7 = 0;
  if ((byte_1ECE85838 & 1) != 0)
  {
    v14 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v15 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v14 = qword_1ECE85830;
    if (v15)
      goto LABEL_7;
    if (qword_1ECE85830)
      v15 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v14)
      v14 += 16 * *(unsigned int *)(v14 - 4);
  }
  else
  {
    v14 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v14 != v15)
  {
    result = v15[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    goto LABEL_13;
  {
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v17 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v17 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v17)
      v17 += 2 * *((unsigned int *)v17 - 1);
  }
  else
  {
    v17 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v17 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF::StringImpl **, _QWORD, WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, uint64_t, uint64_t, uint64_t))*result
                                    + 9))(&v18, result, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
      *a7 = v18;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFETurbulenceElement,WebCore::SVGFilterPrimitiveStandardAttributes>::appendAnimatedInstance(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;

  if ((byte_1ECE85838 & 1) != 0)
  {
    v6 = qword_1ECE85830;
    if (!qword_1ECE85830)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = qword_1ECE85830;
    if (v7)
      goto LABEL_7;
    if (qword_1ECE85830)
      v7 = (WTF::StringImpl ***)(qword_1ECE85830 + 16 * *(unsigned int *)(qword_1ECE85830 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
LABEL_7:
  if ((byte_1ECE85838 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2);
  if (result)
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  {
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v9 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_19;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v9 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_19:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*result + 10))(result, *(_QWORD *)(a1 + 8), a3);
  }
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(WebCore::QualifiedName::QualifiedNameImpl **a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  WTF::StringImpl **v5;
  int v6;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WebCore::QualifiedName::QualifiedNameImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  int v19;

  v1 = qword_1ECE85830;
  if (!qword_1ECE85830)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE85830 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*a1);
  v5 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (v5)
      {
        v9 = (*(_DWORD *)v5)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)v5 = v9;
          v11 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == v5)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *((WTF::StringImpl **)v13 + 3) && v12[4] == *((WTF::StringImpl **)v13 + 4))
        {
          return v8;
        }
      }
      v4 = ++v6 + v7;
      v5 = (WTF::StringImpl **)v11;
    }
    return 0;
  }
  v16 = v4 & v3;
  v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
  v17 = *v8;
  if (!*v8)
    return 0;
  v18 = *a1;
  v19 = 1;
  while (v17 == (WTF::StringImpl **)-1
       || v17 != (WTF::StringImpl **)v18
       && (v17[3] != *((WTF::StringImpl **)v18 + 3) || v17[4] != *((WTF::StringImpl **)v18 + 4)))
  {
    v16 = (v16 + v19) & v3;
    v8 = (WTF::StringImpl ***)(v1 + 16 * v16);
    v17 = *v8;
    ++v19;
    if (!*v8)
      return 0;
  }
  return v8;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGStitchOptions>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGStitchOptions>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 1)
    *(_DWORD *)(a1 + 12) = *a2;
  return v2 < 2;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGStitchOptions>::valueInternal(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGStitchOptions>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::SVGStitchOptions>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _DWORD *v3;

  v2 = *(_DWORD *)(result + 12);
  if (v2 == 2 || v2 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::SVGStitchOptions>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = WTF::fastMalloc((WTF *)0x10);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v5;
  *(_QWORD *)result = off_1E34651B0;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::TurbulenceType>::setValueInternal(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 12) = *a2;
  return result;
}

BOOL WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::TurbulenceType>::setValue(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 <= 1)
    *(_BYTE *)(a1 + 12) = *a2;
  return v2 < 2;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::TurbulenceType>::valueInternal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::TurbulenceType>::value(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) <= 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t WebCore::SVGDecoratedPrimitive<unsigned int,WebCore::TurbulenceType>::valueAsString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  _DWORD *v3;

  v2 = *(unsigned __int8 *)(result + 12);
  if (v2 == 2 || v2 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebCore::SVGDecoratedEnumeration<unsigned int,WebCore::TurbulenceType>::clone@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *(_BYTE *)(a1 + 12);
  *(_QWORD *)result = off_1E3465200;
  *a2 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFETurbulenceElement::SVGFETurbulenceElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>()
{
  _BYTE v1[24];
  WebCore::QualifiedName::QualifiedNameImpl *v2;

  if ((byte_1ECE85850 & 1) == 0)
  {
    qword_1ECE85A68 = 224;
    qword_1ECE85A60 = (uint64_t)off_1E34652B8;
    qword_1ECE85A78 = 232;
    qword_1ECE85A70 = (uint64_t)off_1E34652B8;
    qword_1ECE85A58 = (uint64_t)off_1E3465250;
    byte_1ECE85850 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85A58;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::baseFrequencyAttr, &v2);
  if ((byte_1ECE85858 & 1) == 0)
  {
    qword_1ECE85968 = (uint64_t)off_1E3465320;
    unk_1ECE85970 = 240;
    byte_1ECE85858 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85968;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::numOctavesAttr, &v2);
  if ((byte_1ECE85860 & 1) == 0)
  {
    qword_1ECE85978 = (uint64_t)off_1E34652B8;
    unk_1ECE85980 = 248;
    byte_1ECE85860 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85978;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>((uint64_t)v1, &WebCore::SVGNames::seedAttr, &v2);
  if ((byte_1ECE85868 & 1) == 0)
  {
    qword_1ECE85988 = (uint64_t)off_1E3465388;
    unk_1ECE85990 = 256;
    byte_1ECE85868 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85988;
  WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::stitchTilesAttr, &v2);
  if ((byte_1ECE85870 & 1) == 0)
  {
    qword_1ECE85998 = (uint64_t)off_1E3465510;
    unk_1ECE859A0 = 264;
    byte_1ECE85870 = 1;
  }
  if ((byte_1ECE85838 & 1) == 0)
  {
    qword_1ECE85830 = 0;
    byte_1ECE85838 = 1;
  }
  v2 = (WebCore::QualifiedName::QualifiedNameImpl *)&qword_1ECE85998;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>((uint64_t)v1, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::SVGNames::typeAttr, &v2);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v5;
  int v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  uint64_t result;
  int *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int i;
  unsigned int v13;
  WebCore::QualifiedName::QualifiedNameImpl **v14;
  int v15;
  WebCore::QualifiedName::QualifiedNameImpl *v16;
  WTF::StringImpl **v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::QualifiedName::QualifiedNameImpl *v25;
  int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;

  v5 = qword_1ECE85830;
  if (qword_1ECE85830
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(8u, 0), (v5 = qword_1ECE85830) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    v40 = *((_QWORD *)v7 + 3);
    v41 = *((_QWORD *)v7 + 4);
    v42 = (*MEMORY[0x1E0CBF2F8] >> 5) & 0x7FFF800 ^ (((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527) << 16) ^ ((unsigned __int16)*MEMORY[0x1E0CBF2F8] - 1640531527);
    v43 = v42 + (unsigned __int16)WORD2(*MEMORY[0x1E0CBF2F8]);
    v44 = (*MEMORY[0x1E0CBF2F8] >> 37) & 0x7FFF800 ^ ((v43 + (v42 >> 11)) << 16) ^ (v43 + (v42 >> 11));
    v45 = (v40 >> 5) & 0x7FFF800 ^ ((v44 + (unsigned __int16)v40 + (v44 >> 11)) << 16) ^ (v44 + (unsigned __int16)v40 + (v44 >> 11));
    v46 = (v40 >> 37) & 0x7FFF800 ^ ((v45 + WORD2(v40) + (v45 >> 11)) << 16) ^ (v45 + WORD2(v40) + (v45 >> 11));
    v47 = (v41 >> 5) & 0x7FFF800 ^ ((v46 + (unsigned __int16)v41 + (v46 >> 11)) << 16) ^ (v46 + (unsigned __int16)v41 + (v46 >> 11));
    v48 = (v41 >> 37) & 0x7FFF800 ^ ((v47 + WORD2(v41) + (v47 >> 11)) << 16) ^ (v47 + WORD2(v41) + (v47 >> 11));
    v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
    v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
    v51 = (v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10);
    if (v51)
      result = v51;
    else
      result = 0x800000;
  }
  else
  {
    result = *((unsigned int *)v7 + 1);
    if (!(_DWORD)result)
    {
      result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      *((_DWORD *)v7 + 1) = result;
    }
  }
  v9 = &webThreadDelegateMessageScopeCount;
  v10 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a1;
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = result & v6;
      v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
      if (v10)
      {
        v15 = (*(_DWORD *)v10)++;
        v16 = *v14;
        if (v15)
        {
          *(_DWORD *)v10 = v15;
          v17 = v10;
        }
        else
        {
          v20 = v9;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
          result = WTF::fastFree(v21, v22);
          v9 = v20;
          v17 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v17 = 0;
        v16 = *v14;
      }
      if (v16 == (WebCore::QualifiedName::QualifiedNameImpl *)v10)
        break;
      v18 = *v14;
      if (*v14 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v13);
      }
      else
      {
        v19 = *a2;
        if (v18 == *a2 || *((_QWORD *)v18 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v18 + 4) == *((_QWORD *)v19 + 4))
          goto LABEL_42;
      }
      result = i + v13;
      v10 = v17;
    }
LABEL_31:
    a1 = v53;
    if (v11)
    {
      v27 = (WebCore::QualifiedName::QualifiedNameImpl *)*((_QWORD *)v9 + 254);
      if (v27)
        ++*(_DWORD *)v27;
      *v11 = v27;
      v11[1] = 0;
      --*(_DWORD *)(qword_1ECE85830 - 16);
      v14 = v11;
    }
LABEL_35:
    v28 = *a2;
    if (*a2)
      ++*(_DWORD *)v28;
    result = (uint64_t)*v14;
    *v14 = v28;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v14[1] = *a3;
    if (qword_1ECE85830)
      v29 = *(_DWORD *)(qword_1ECE85830 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(qword_1ECE85830 - 12) = v29;
    v33 = qword_1ECE85830;
    if (qword_1ECE85830)
      v34 = *(_DWORD *)(qword_1ECE85830 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(qword_1ECE85830 - 16) + v34);
    v36 = *(unsigned int *)(qword_1ECE85830 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_53;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_56:
        result = (uint64_t)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v37, v14);
        v14 = (WebCore::QualifiedName::QualifiedNameImpl **)result;
        v33 = qword_1ECE85830;
        if (qword_1ECE85830)
          v36 = *(unsigned int *)(qword_1ECE85830 - 4);
        else
          v36 = 0;
        goto LABEL_60;
      }
LABEL_53:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(qword_1ECE85830 - 12) >= (2 * v36));
      goto LABEL_56;
    }
LABEL_60:
    v32 = v33 + 16 * v36;
    v31 = 1;
    goto LABEL_61;
  }
  v23 = result & v6;
  v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * (result & v6));
  v24 = *v14;
  if (!*v14)
    goto LABEL_35;
  v53 = a1;
  v11 = 0;
  v25 = *a2;
  v26 = 1;
  while (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
  {
    v11 = v14;
LABEL_30:
    v23 = (v23 + v26) & v6;
    v14 = (WebCore::QualifiedName::QualifiedNameImpl **)(v5 + 16 * v23);
    v24 = *v14;
    ++v26;
    if (!*v14)
      goto LABEL_31;
  }
  if (v24 != v25 && (*((_QWORD *)v24 + 3) != *((_QWORD *)v25 + 3) || *((_QWORD *)v24 + 4) != *((_QWORD *)v25 + 4)))
    goto LABEL_30;
LABEL_42:
  if (qword_1ECE85830)
    v30 = *(unsigned int *)(qword_1ECE85830 - 4);
  else
    v30 = 0;
  a1 = v53;
  v31 = 0;
  v32 = qword_1ECE85830 + 16 * v30;
LABEL_61:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl ***v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  BOOL v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl **v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl ***result;
  uint64_t v49;
  WTF::StringImpl ***v51;

  v3 = &qword_1ECE85000;
  v4 = qword_1ECE85830;
  if (qword_1ECE85830)
  {
    v5 = *(_DWORD *)(qword_1ECE85830 - 4);
    v6 = *(_DWORD *)(qword_1ECE85830 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = &webThreadDelegateMessageScopeCount;
  if (a1)
  {
    v10 = a1;
    v11 = v7 + 6;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v11 - 1) = v12;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  qword_1ECE85830 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE85830 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v49 = v5;
    while (1)
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        break;
LABEL_45:
      if (++v13 == v15)
        goto LABEL_53;
    }
    v18 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v18)
    {
      v19 = (*(_DWORD *)v18)++;
      if (v19)
      {
        *(_DWORD *)v18 = v19;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
        WTF::fastFree(v40, v41);
      }
    }
    if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
    {
      v22 = (WTF::StringImpl **)*v16;
      *v16 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      goto LABEL_45;
    }
    v20 = v3[262];
    if (v20)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>::hash<WebCore::QualifiedName>(*v16);
    v24 = (WTF::StringImpl **)*((_QWORD *)v9 + 254);
    if (v24)
    {
      v51 = v14;
      v25 = v4;
      v26 = 0;
      do
      {
        v27 = v23 & v21;
        v28 = (WTF::StringImpl ***)(v20 + 16 * (v23 & v21));
        if (v24)
        {
          v29 = (*(_DWORD *)v24)++;
          v30 = *v28;
          if (v29)
          {
            *(_DWORD *)v24 = v29;
            v31 = (uint64_t)v24;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
            WTF::fastFree(v33, v34);
            v31 = WebCore::nullName;
          }
        }
        else
        {
          v31 = 0;
          v30 = *v28;
        }
        v23 = ++v26 + v27;
        v32 = v30 == v24;
        v24 = (WTF::StringImpl **)v31;
      }
      while (!v32);
      v35 = *v28;
      *v28 = 0;
      if (v35)
      {
        v4 = v25;
        v9 = &webThreadDelegateMessageScopeCount;
        v14 = v51;
        v15 = v49;
        if (*(_DWORD *)v35 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v35);
          WTF::fastFree(v44, v45);
        }
        else
        {
          --*(_DWORD *)v35;
        }
        v3 = &qword_1ECE85000;
LABEL_40:
        v38 = *(_OWORD *)v16;
        *v16 = 0;
        *(_OWORD *)v28 = v38;
        v39 = *v16;
        *v16 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v39);
            WTF::fastFree(v42, v43);
          }
          else
          {
            --*(_DWORD *)v39;
          }
        }
        if (v16 == a2)
          v14 = v28;
        goto LABEL_45;
      }
      v4 = v25;
      v3 = &qword_1ECE85000;
      v9 = &webThreadDelegateMessageScopeCount;
      v14 = v51;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = v23 & v21;
        v23 = ++v36 + v37;
      }
      while (*(_QWORD *)(v20 + 16 * v37));
      v28 = (WTF::StringImpl ***)(v20 + 16 * v37);
      *v28 = 0;
    }
    v15 = v49;
    goto LABEL_40;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v14;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 16)) + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 32)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyPairAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>,WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)) == a3 || *(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFETurbulenceElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFETurbulenceElement>::synchronize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v6;
  uint64_t result;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 56))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 32)));
  v8 = result;
  if ((v6 & 1) == 0 && (result & 1) == 0)
  {
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  if (v6)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16))
                                                                                + 72))(&v23);
    if (!v24)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v25 = v23;
    if (!v8)
    {
LABEL_7:
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32)) + 40))(&v22);
      v10 = v22;
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 16)) + 40))(&v25);
    if (!v8)
      goto LABEL_7;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 32))
                                                                              + 72))(&v23);
  if (!v24)
    goto LABEL_55;
  v10 = v23;
  v22 = v23;
LABEL_11:
  result = WTF::equal(v25, v10, v9);
  v12 = v25;
  if ((_DWORD)result)
  {
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)a3 = v12;
    a3[8] = 1;
    goto LABEL_39;
  }
  if (v25)
    *(_DWORD *)v25 += 2;
  v13 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v12)
  {
    v14 = *((_DWORD *)v12 + 1);
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v14 = 0;
    if (v13)
    {
LABEL_21:
      v15 = *((_DWORD *)v13 + 1);
      if ((v15 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v23 = 0;
      goto LABEL_57;
    }
  }
  v15 = 0;
LABEL_22:
  v16 = __OFADD__(v15, 2);
  v17 = v15 + 2;
  v18 = v16;
  if (v14 < 0)
    goto LABEL_56;
  if ((v18 & 1) != 0)
    goto LABEL_56;
  result = (v14 + v17);
  if (__OFADD__(v14, v17))
    goto LABEL_56;
  if (v12)
  {
    v19 = *((_DWORD *)v12 + 4);
    v20 = (v19 >> 2) & 1;
    if (v13 && (v19 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v13)
    {
LABEL_31:
      v20 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v20 = 1;
  }
LABEL_32:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (uint64_t)v12, (int8x16_t *)", ", 2u, (uint64_t)v13, &v23);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  v23 = 0;
  if (!v13)
    goto LABEL_36;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_36:
    if (v12)
      goto LABEL_37;
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_37:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_39:
  v21 = v22;
  v22 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFETurbulenceElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v14 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 32);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)v15 = &off_1E345E828;
  v16 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = *(_QWORD *)(a2 + v14);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 64) = a4;
  *(_BYTE *)(v16 + 65) = a5;
  *(_BYTE *)(v16 + 66) = a6;
  *(_BYTE *)(v16 + 67) = a7;
  *(_BYTE *)(v16 + 76) = 0;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = &off_1E3456850;
  *(_QWORD *)v16 = off_1E3456780;
  *(_QWORD *)(v15 + 32) = v16;
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v19 = *(_QWORD *)(a2 + v20);
  ++*(_DWORD *)(v19 + 8);
  *(_QWORD *)(result + 32) = v19;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *(_QWORD *)(v15 + 40) = result;
  *(_QWORD *)v15 = off_1E345E7C0;
  *a8 = v15;
  return result;
}

uint64_t WebCore::SVGAnimatedNumberPairAccessor<WebCore::SVGFETurbulenceElement>::appendAnimatedInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::SVGAnimatedPropertyPairAnimator<WebCore::SVGAnimatedNumberAnimator,WebCore::SVGAnimatedNumberAnimator>::appendAnimatedInstance(a3, (uint64_t *)(a2 + *(_QWORD *)(a1 + 16)), (uint64_t *)(a2 + *(_QWORD *)(a1 + 32)));
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<float>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456850;
  *(_QWORD *)result = off_1E3456780;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedNumberAccessor<WebCore::SVGFETurbulenceElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedPrimitiveProperty<int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFETurbulenceElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v17 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(result + 32) = v17;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_BYTE *)(result + 65) = a5;
  *(_BYTE *)(result + 66) = a6;
  *(_BYTE *)(result + 67) = a7;
  *(_BYTE *)(result + 76) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E347BD48;
  *(_QWORD *)result = off_1E345D600;
  *a8 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedIntegerAccessor<WebCore::SVGFETurbulenceElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGStitchOptions>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E34654C0;
  *(_QWORD *)result = &off_1E34653F0;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFETurbulenceElement,WebCore::SVGStitchOptions>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGStitchOptions>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E3465458;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGStitchOptions>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E3465458;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v7;
  uint64_t result;
  int v9;

  if ((MEMORY[0x19AEA53F4](*a3, "stitch", 6) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "noStitch", 8))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 68) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "stitch", 6);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "noStitch", 8);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_DWORD *)(a1 + 72) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::SVGStitchOptions>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  int *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (int *)(a1 + 68);
  if (v5)
    v6 = (int *)(a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::SVGStitchOptions>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::SVGStitchOptions>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v7;
  uint64_t result;
  int v9;

  if ((MEMORY[0x19AEA53F4](*a3, "stitch", 6) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "noStitch", 8))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 12) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "stitch", 6);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "noStitch", 8);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_DWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFETurbulenceElement,WebCore::TurbulenceType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3465648;
  *(_QWORD *)result = &off_1E3465578;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFETurbulenceElement,WebCore::TurbulenceType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::TurbulenceType>::~SVGAnimatedEnumerationAnimator(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)a1 = off_1E34655E0;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::TurbulenceType>::~SVGAnimatedEnumerationAnimator(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E34655E0;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t result;
  char v9;

  if ((MEMORY[0x19AEA53F4](*a3, "fractalNoise", 12) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "turbulence", 10))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 65) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "fractalNoise", 12);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "turbulence", 10);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_BYTE *)(a1 + 66) = v9;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::start(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), a1);
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v6, a1, *(_QWORD *)(a1 + 32));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::SVGAnimatedEnumerationAnimator<WebCore::TurbulenceType>::animate(uint64_t a1, float a2)
{
  int v2;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v5 = a2 > 0.5 && v2 == 1 || a2 == 1.0 || v2 == 3;
  v6 = (unsigned __int8 *)(a1 + 65);
  if (v5)
    v6 = (unsigned __int8 *)(a1 + 66);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v9 = *v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 16))(v7, &v9);
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::apply(uint64_t a1, WebCore::SVGElement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)a1);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ~(*v4 << 32) + *v4;
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != *v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == *v4)
        goto LABEL_8;
    }
LABEL_7:
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v4))return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
  }
LABEL_8:
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v16);
  WebCore::SVGAttributeAnimator::applyAnimatedStylePropertyChange(a1, a2, (const WTF::String *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange(a1, a2);
}

WebCore::SVGElement *WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::stop(WebCore::SVGElement **a1, WebCore::SVGElement *a2)
{
  WebCore::SVGElement *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SVGPropertyAnimatorFactory *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::SVGElement *v23;
  int v24;
  char v25;
  char v26;
  WebCore::SVGAttributeAnimator *v28;

  result = a1[4];
  v4 = *((_QWORD *)result + 3);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v28 = (WebCore::SVGAttributeAnimator *)a1;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = (uint64_t *)*((_QWORD *)result + 3); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v6 -= 8;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)result + 3);
    }
    v8 = (uint64_t *)(v4 + 8 * v5);
    if (i != v8)
    {
      v9 = *i;
LABEL_12:
      if (!*(_QWORD *)(v9 + 8))
      {
        while (1)
        {
          if (++i == v8)
            return result;
          v9 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v8)
              goto LABEL_12;
            return result;
          }
        }
      }
      (*(void (**)(WebCore::SVGElement *, WebCore::SVGAttributeAnimator *))(*(_QWORD *)result + 88))(result, v28);
      v10 = *((unsigned int *)v28 + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)v28 + 5);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::SVGAttributeAnimator *))(*(_QWORD *)v13 + 104))(v13, v28);
          v12 -= 8;
        }
        while (v12);
      }
      v14 = (WebCore::SVGPropertyAnimatorFactory *)WebCore::SVGAttributeAnimator::applyAnimatedPropertyChange((uint64_t)v28, a2);
      v15 = (_QWORD *)*((_QWORD *)v28 + 3);
      v16 = *WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v14);
      if (v16)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = ~(*v15 << 32) + *v15;
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v22 = *(_QWORD *)(v16 + 24 * v21);
        v23 = a2;
        result = v28;
        if (v22 == *v15)
          return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        v24 = 1;
        v23 = a2;
        result = v28;
        while (v22)
        {
          v21 = (v21 + v24) & v17;
          v22 = *(_QWORD *)(v16 + 24 * v21);
          ++v24;
          if (v22 == *v15)
            return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
        }
      }
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(**((_QWORD **)a2 + 20) + 72))(*((_QWORD **)a2 + 20), v15);
      v23 = a2;
      v26 = v25;
      result = v28;
      if ((v26 & 1) == 0)
        return result;
      return WebCore::SVGAttributeAnimator::removeAnimatedStyleProperty(result, v23);
    }
  }
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAnimator<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>,WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>>::calculateDistance()
{
  return 0;
}

void WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>::~SVGAnimationEnumerationFunction()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::SVGAnimationDiscreteFunction<WebCore::TurbulenceType>::isDiscrete()
{
  return 1;
}

uint64_t WebCore::SVGAnimationEnumerationFunction<WebCore::TurbulenceType>::setFromAndToValues(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t result;
  char v9;

  if ((MEMORY[0x19AEA53F4](*a3, "fractalNoise", 12) & 1) != 0)
  {
    v7 = 1;
  }
  else if (MEMORY[0x19AEA53F4](*a3, "turbulence", 10))
  {
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 9) = v7;
  result = MEMORY[0x19AEA53F4](*a4, "fractalNoise", 12);
  if ((result & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*a4, "turbulence", 10);
    if ((_DWORD)result)
      v9 = 2;
    else
      v9 = 0;
  }
  *(_BYTE *)(a1 + 10) = v9;
  return result;
}

uint64_t *WebCore::SVGFilterElement::SVGFilterElement(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  WebCore::SVGURIReference *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  const char *v16;
  uint64_t v17;
  const char **v18;

  *a1 = (uint64_t)off_1E3464458;
  a1[14] = (uint64_t)&unk_1E3464988;
  a1[22] = (uint64_t)&unk_1E34649C0;
  v6 = (WebCore::SVGURIReference *)(a1 + 22);
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3465698;
  *((_QWORD *)v7 + 1) = a1;
  v16 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)a1, a2, a3, (uint64_t *)&v16, 0);
  v8 = (uint64_t)v16;
  v16 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *a1 = (uint64_t)off_1E3464458;
  a1[14] = (uint64_t)&unk_1E3464988;
  a1[22] = (uint64_t)&unk_1E34649C0;
  WebCore::SVGURIReference::SVGURIReference(v6, (WebCore::SVGElement *)a1);
  *a1 = (uint64_t)off_1E3464458;
  a1[14] = (uint64_t)&unk_1E3464988;
  a1[22] = (uint64_t)&unk_1E34649C0;
  LOBYTE(v16) = 2;
  WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::SVGUnitTypes::SVGUnitType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>((uint64_t)a1, &v16, a1 + 24);
  LOBYTE(v16) = 1;
  WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::SVGUnitTypes::SVGUnitType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>((uint64_t)a1, &v16, a1 + 25);
  LOBYTE(v18) = 0;
  v16 = "-10%";
  v17 = 5;
  v9 = WTF::fastMalloc((WTF *)0x38);
  a1[26] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v9, (uint64_t)a1, (char *)&v18, (uint64_t)&v16);
  LOBYTE(v18) = 1;
  v16 = "-10%";
  v17 = 5;
  v10 = WTF::fastMalloc((WTF *)0x38);
  a1[27] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v10, (uint64_t)a1, (char *)&v18, (uint64_t)&v16);
  LOBYTE(v18) = 0;
  v16 = "120%";
  v17 = 5;
  v11 = WTF::fastMalloc((WTF *)0x38);
  a1[28] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v11, (uint64_t)a1, (char *)&v18, (uint64_t)&v16);
  LOBYTE(v18) = 1;
  v16 = "120%";
  v17 = 5;
  v12 = WTF::fastMalloc((WTF *)0x38);
  a1[29] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v12, (uint64_t)a1, (char *)&v18, (uint64_t)&v16);
  v13 = atomic_load(&WebCore::SVGFilterElement::SVGFilterElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v13 != -1)
  {
    v16 = &v15;
    v18 = &v16;
    std::__call_once(&WebCore::SVGFilterElement::SVGFilterElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFilterElement::SVGFilterElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>::create<WebCore::SVGUnitTypes::SVGUnitType,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x40);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = *a2;
  *(_QWORD *)result = off_1E3456558;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &off_1E34568A0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = result;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WTF *v41;
  void *v42;
  WTF::StringImpl ***v43;
  uint64_t v44;
  WTF::StringImpl ***v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  char *v48;

  v1 = result;
  if ((byte_1ECE85880 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
LABEL_27:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE85878;
  if (!qword_1ECE85878)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_27;
  }
  v3 = *(unsigned int *)(qword_1ECE85878 - 4);
  v4 = qword_1ECE85878 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE85878 - 12))
  {
    v13 = qword_1ECE85878 + 16 * v3;
    goto LABEL_27;
  }
  if (!(_DWORD)v3)
  {
    v13 = qword_1ECE85878;
    if (!qword_1ECE85878)
      goto LABEL_31;
    goto LABEL_30;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)qword_1ECE85878;
    if (qword_1ECE85878)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85878 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (qword_1ECE85878)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = qword_1ECE85878 + v14;
    if (qword_1ECE85878)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v35 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_123;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v35 = 0;
    v23 = 0;
LABEL_123:
    v24 = &v22[2 * v23];
    goto LABEL_73;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_123;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v26 = 16 * v23;
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v35 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      v34 = 16 * v23;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v34 == v33)
        {
          v35 = v24;
          goto LABEL_73;
        }
      }
      v35 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v35 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_73:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v35 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v35[1] + 2))(v35[1], *(_QWORD *)(v1 + 8));
    v36 = v35 + 2;
    v35 = v24;
    if (v36 != v24)
    {
      v37 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_78:
        v38 = (*(_DWORD *)v37)++;
        v39 = *v36;
        if (v38)
        {
          *(_DWORD *)v37 = v38;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
          result = WTF::fastFree(v41, v42);
        }
        while (v39 == v37 || (WTF::StringImpl **)((char *)*v36 + 1) == 0)
        {
          v36 += 2;
          if (v36 == v24)
            goto LABEL_91;
          v37 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_78;
          v39 = *v36;
        }
      }
      else
      {
        while ((unint64_t)*v36 + 1 <= 1)
        {
          v36 += 2;
          if (v36 == v24)
          {
LABEL_91:
            v35 = v24;
            goto LABEL_93;
          }
        }
      }
      v35 = v36;
    }
LABEL_93:
    ;
  }
  {
    v43 = 0;
    v47 = 0;
    v44 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_121;
  }
  v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v47 = 0;
    v44 = 0;
LABEL_121:
    v45 = &v43[2 * v44];
    goto LABEL_104;
  }
  v44 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v45 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v44);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v44);
    goto LABEL_121;
  }
  if ((_DWORD)v44)
  {
    v46 = 16 * v44;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v43);
      if ((result & 1) == 0 && *v43 != (WTF::StringImpl **)-1)
        break;
      v43 += 2;
      v46 -= 16;
      if (!v46)
      {
        v43 = v45;
        break;
      }
    }
    v47 = v43;
    v43 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_104:
  if (v43)
    v43 += 2 * *((unsigned int *)v43 - 1);
  while (v47 != v43)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v47[1] + 2))(v47[1], *(_QWORD *)(v1 + 8) + 176);
    v48 = (char *)(v47 + 2);
    v47 = v45;
    if (v48 != (char *)v45)
    {
      v47 = (WTF::StringImpl ***)v48;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v47);
        if ((result & 1) == 0 && *v47 != (WTF::StringImpl **)-1)
          break;
        v47 += 2;
        if (v47 == v45)
        {
          v47 = v45;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  uint64_t v50;
  char *v51;
  WTF::StringImpl **v52;
  WTF *v53;
  void *v54;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE85880 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
LABEL_30:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85878;
  if (!qword_1ECE85878)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_30;
  }
  v8 = *(unsigned int *)(qword_1ECE85878 - 4);
  v9 = qword_1ECE85878 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85878 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85878 + 16 * v8);
    goto LABEL_30;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85878;
    if (!qword_1ECE85878)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85878;
    if (qword_1ECE85878)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85878 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85878)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85878 + v18);
    if (qword_1ECE85878)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_121;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_136;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
LABEL_136:
    v29 = &v27[2 * v28];
    goto LABEL_77;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_136;
  }
  if ((_DWORD)v28)
  {
    v30 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v31 = 16 * v28;
      while (1)
      {
        if (v30)
        {
          v32 = (*(_DWORD *)v30)++;
          v33 = *v27;
          if (v32)
          {
            *(_DWORD *)v30 = v32;
            v34 = (uint64_t)v30;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
            result = WTF::fastFree(v36, v37);
            v34 = WebCore::nullName;
          }
        }
        else
        {
          v34 = 0;
          v33 = *v27;
        }
        if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
          break;
        v27 += 2;
        v30 = (WTF::StringImpl **)v34;
        v31 -= 16;
        if (!v31)
        {
          v27 = v29;
          break;
        }
      }
      v17 = v27;
      v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v38 = 0;
      v39 = 16 * v28;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v38)
                               + 1) <= 1)
      {
        v38 += 16;
        if (v39 == v38)
        {
          v17 = v29;
          goto LABEL_77;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v38);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_77:
  if (v27)
    v27 += 2 * *((unsigned int *)v27 - 1);
  while (v17 != v27)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_121;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_96;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_96:
            v17 = v29;
            goto LABEL_98;
          }
        }
      }
      v17 = v40;
    }
LABEL_98:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_134;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_134:
    v49 = &v47[2 * v48];
    goto LABEL_109;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_134;
  }
  if ((_DWORD)v48)
  {
    v50 = 16 * v48;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v47);
      if ((result & 1) == 0 && *v47 != (WTF::StringImpl **)-1)
        break;
      v47 += 2;
      v50 -= 16;
      if (!v50)
      {
        v47 = v49;
        break;
      }
    }
    v17 = v47;
    v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_109:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 176, a2);
      if ((_DWORD)result)
        break;
      v51 = (char *)(v17 + 2);
      v17 = v49;
      if (v51 != (char *)v49)
      {
        v17 = (WTF::StringImpl ***)v51;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v49)
          {
            v17 = v49;
            break;
          }
        }
      }
      if (v17 == v47)
        return result;
    }
LABEL_121:
    v52 = *v17;
    if (*v17)
      ++*(_DWORD *)v52;
    result = *a3;
    *a3 = (uint64_t)v52;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v53, v54);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl **v23;
  WTF *v25;
  void *v26;
  WTF::StringImpl ***v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  uint64_t v50;
  char *v51;
  WTF::StringImpl **v52;
  WTF *v53;
  void *v54;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE85880 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
LABEL_30:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_34;
LABEL_33:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_34;
  }
  v7 = (WTF::StringImpl ***)qword_1ECE85878;
  if (!qword_1ECE85878)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_30;
  }
  v8 = *(unsigned int *)(qword_1ECE85878 - 4);
  v9 = qword_1ECE85878 + 16 * v8;
  if (!*(_DWORD *)(qword_1ECE85878 - 12))
  {
    v17 = (WTF::StringImpl ***)(qword_1ECE85878 + 16 * v8);
    goto LABEL_30;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)qword_1ECE85878;
    if (!qword_1ECE85878)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v6)
  {
    v10 = 16 * v8;
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)qword_1ECE85878;
    if (qword_1ECE85878)
      goto LABEL_33;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v8;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85878 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v19 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (qword_1ECE85878)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v17 = (WTF::StringImpl ***)(qword_1ECE85878 + v18);
    if (qword_1ECE85878)
      goto LABEL_33;
  }
LABEL_34:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_121;
    v20 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v20 != (WTF::StringImpl ***)v9)
    {
      v21 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_38:
        v22 = (*(_DWORD *)v21)++;
        v23 = *v20;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v21);
          result = WTF::fastFree(v25, v26);
        }
        while (v23 == v21 || (WTF::StringImpl **)((char *)*v20 + 1) == 0)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
            goto LABEL_51;
          v21 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_38;
          v23 = *v20;
        }
      }
      else
      {
        while ((unint64_t)*v20 + 1 <= 1)
        {
          v20 += 2;
          if (v20 == (WTF::StringImpl ***)v9)
          {
LABEL_51:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_53;
          }
        }
      }
      v17 = v20;
    }
LABEL_53:
    ;
  }
  {
    v27 = 0;
    v17 = 0;
    v28 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_136;
  }
  v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v28 = 0;
LABEL_136:
    v29 = &v27[2 * v28];
    goto LABEL_77;
  }
  v28 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v29 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v28);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v28);
    goto LABEL_136;
  }
  if ((_DWORD)v28)
  {
    v30 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v31 = 16 * v28;
      while (1)
      {
        if (v30)
        {
          v32 = (*(_DWORD *)v30)++;
          v33 = *v27;
          if (v32)
          {
            *(_DWORD *)v30 = v32;
            v34 = (uint64_t)v30;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
            result = WTF::fastFree(v36, v37);
            v34 = WebCore::nullName;
          }
        }
        else
        {
          v34 = 0;
          v33 = *v27;
        }
        if (v33 != v30 && (WTF::StringImpl **)((char *)*v27 + 1) != 0)
          break;
        v27 += 2;
        v30 = (WTF::StringImpl **)v34;
        v31 -= 16;
        if (!v31)
        {
          v27 = v29;
          break;
        }
      }
      v17 = v27;
      v27 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v38 = 0;
      v39 = 16 * v28;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v38)
                               + 1) <= 1)
      {
        v38 += 16;
        if (v39 == v38)
        {
          v17 = v29;
          goto LABEL_77;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v38);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_77:
  if (v27)
    v27 += 2 * *((unsigned int *)v27 - 1);
  while (v17 != v27)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_121;
    v40 = v17 + 2;
    v17 = v29;
    if (v40 != v29)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_83:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v29)
            goto LABEL_96;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_83;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v29)
          {
LABEL_96:
            v17 = v29;
            goto LABEL_98;
          }
        }
      }
      v17 = v40;
    }
LABEL_98:
    ;
  }
  {
    v47 = 0;
    v17 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_134;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v48 = 0;
LABEL_134:
    v49 = &v47[2 * v48];
    goto LABEL_109;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_134;
  }
  if ((_DWORD)v48)
  {
    v50 = 16 * v48;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v47);
      if ((result & 1) == 0 && *v47 != (WTF::StringImpl **)-1)
        break;
      v47 += 2;
      v50 -= 16;
      if (!v50)
      {
        v47 = v49;
        break;
      }
    }
    v17 = v47;
    v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_109:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  if (v47 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 176, a2);
      if ((_DWORD)result)
        break;
      v51 = (char *)(v17 + 2);
      v17 = v49;
      if (v51 != (char *)v49)
      {
        v17 = (WTF::StringImpl ***)v51;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v49)
          {
            v17 = v49;
            break;
          }
        }
      }
      if (v17 == v47)
        return result;
    }
LABEL_121:
    v52 = *v17;
    if (*v17)
      ++*(_DWORD *)v52;
    result = *a3;
    *a3 = (uint64_t)v52;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v53, v54);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::setAnimatedPropertyDirty(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a2);
  if (result)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 8);
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
      goto LABEL_2;
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 176;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v7, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::synchronize@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  char v9;

  *a2 = 0;
  a2[8] = 0;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a1);
  if (result)
  {
LABEL_2:
    result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v8);
    if (v9)
    {
      *(_QWORD *)a2 = v8;
      a2[8] = 1;
    }
    return result;
  }
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_2;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      goto LABEL_2;
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl *v39;
  WTF::StringImpl ***v40;
  WTF::StringImpl **v41;
  int v42;
  WTF::StringImpl **v43;
  WTF *v45;
  void *v46;
  WTF::StringImpl ***v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  uint64_t v50;
  WTF::StringImpl ***v51;
  WTF::StringImpl *v52;
  char *v53;
  _BYTE v54[24];
  WTF::StringImpl *v55;
  char v56;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE85880 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
LABEL_27:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v4 = (WTF::StringImpl ***)qword_1ECE85878;
  if (!qword_1ECE85878)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_27;
  }
  v5 = *(unsigned int *)(qword_1ECE85878 - 4);
  v6 = qword_1ECE85878 + 16 * v5;
  if (!*(_DWORD *)(qword_1ECE85878 - 12))
  {
    v15 = qword_1ECE85878 + 16 * v5;
    goto LABEL_27;
  }
  if (!(_DWORD)v5)
  {
    v15 = qword_1ECE85878;
    if (!qword_1ECE85878)
      goto LABEL_31;
    goto LABEL_30;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)qword_1ECE85878;
    if (qword_1ECE85878)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(qword_1ECE85878 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (qword_1ECE85878)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = qword_1ECE85878 + v16;
    if (qword_1ECE85878)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8)
                                                                                                + 64))(&v55, *(_QWORD *)(v15 + 8), *(_QWORD *)(v2 + 8));
    if (v56)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v55, (uint64_t)v54);
      if (v56)
      {
        result = (uint64_t)v55;
        v55 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v38 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_144;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v38 = 0;
    v26 = 0;
LABEL_144:
    v27 = &v25[2 * v26];
    goto LABEL_80;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_144;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v29 = 16 * v26;
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v38 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      v37 = 16 * v26;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v37 == v36)
        {
          v38 = v27;
          goto LABEL_80;
        }
      }
      v38 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v38 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_80:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v38 != v25)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v38[1] + 8))(&v55, v38[1], *(_QWORD *)(v2 + 8));
    if (v56)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v38, (WTF::StringImpl ***)&v55, (uint64_t)v54);
      if (v56)
      {
        result = (uint64_t)v55;
        v55 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v39);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v40 = v38 + 2;
    v38 = v27;
    if (v40 != v27)
    {
      v41 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_90:
        v42 = (*(_DWORD *)v41)++;
        v43 = *v40;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v41);
          result = WTF::fastFree(v45, v46);
        }
        while (v43 == v41 || (WTF::StringImpl **)((char *)*v40 + 1) == 0)
        {
          v40 += 2;
          if (v40 == v27)
            goto LABEL_103;
          v41 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_90;
          v43 = *v40;
        }
      }
      else
      {
        while ((unint64_t)*v40 + 1 <= 1)
        {
          v40 += 2;
          if (v40 == v27)
          {
LABEL_103:
            v38 = v27;
            goto LABEL_105;
          }
        }
      }
      v38 = v40;
    }
LABEL_105:
    ;
  }
  {
    v47 = 0;
    v51 = 0;
    v48 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_142;
  }
  v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v51 = 0;
    v48 = 0;
LABEL_142:
    v49 = &v47[2 * v48];
    goto LABEL_118;
  }
  v48 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v49 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v48);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v51 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v48);
    goto LABEL_142;
  }
  if ((_DWORD)v48)
  {
    v50 = 16 * v48;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v47);
      if ((result & 1) == 0 && *v47 != (WTF::StringImpl **)-1)
        break;
      v47 += 2;
      v50 -= 16;
      if (!v50)
      {
        v47 = v49;
        break;
      }
    }
    v51 = v47;
    v47 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v51 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_118:
  if (v47)
    v47 += 2 * *((unsigned int *)v47 - 1);
  while (v51 != v47)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v51[1]
                       + 8))(&v55, v51[1], *(_QWORD *)(v2 + 8) + 176);
    if (v56)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v51, (WTF::StringImpl ***)&v55, (uint64_t)v54);
      if (v56)
      {
        result = (uint64_t)v55;
        v55 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v52);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v53 = (char *)(v51 + 2);
    v51 = v49;
    if (v53 != (char *)v49)
    {
      v51 = (WTF::StringImpl ***)v53;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v51);
        if ((result & 1) == 0 && *v51 != (WTF::StringImpl **)-1)
          break;
        v51 += 2;
        if (v51 == v49)
        {
          v51 = v49;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::isAnimatedPropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **Accessor;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;

  Accessor = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a2);
  if (Accessor)
    return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_8;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_8:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    Accessor = v6[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_17;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_26:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_17:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    Accessor = v8[1];
    if (Accessor)
      return (*((uint64_t (**)(WTF::StringImpl **))*Accessor + 3))(Accessor);
  }
  return 0;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::isAnimatedStylePropertyAttribute(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE85890 & 1) == 0)
  {
    v12 = WebCore::SVGNames::cxAttr;
    v13 = WebCore::SVGNames::cyAttr;
    v14 = WebCore::SVGNames::rAttr;
    v15 = WebCore::SVGNames::rxAttr;
    v16 = WebCore::SVGNames::ryAttr;
    v17 = WebCore::SVGNames::heightAttr;
    v18 = WebCore::SVGNames::widthAttr;
    v19 = WebCore::SVGNames::xAttr;
    v20[0] = WebCore::SVGNames::yAttr;
    qword_1ECE85888 = 0;
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v12, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v13, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v14, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v15, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v16, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v17, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v18, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, &v19, (uint64_t)v11);
    WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl *,WebCore::QualifiedName::QualifiedNameImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl *>>::add(&qword_1ECE85888, v20, (uint64_t)v11);
    byte_1ECE85890 = 1;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a2);
  if (result)
  {
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 4))(result);
    if ((_DWORD)result)
    {
      if (qword_1ECE85888)
      {
        v4 = *(_DWORD *)(qword_1ECE85888 - 8);
        v5 = ~(*a2 << 32) + *a2;
        v6 = 9
           * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        v9 = *(_QWORD *)(qword_1ECE85888 + 8 * v8);
        if (v9 == *a2)
        {
          return (WTF::StringImpl **)1;
        }
        else
        {
          v10 = 1;
          do
          {
            result = (WTF::StringImpl **)(v9 != 0);
            if (!v9)
              break;
            v8 = (v8 + v10) & v4;
            v9 = *(_QWORD *)(qword_1ECE85888 + 8 * v8);
            ++v10;
          }
          while (v9 != *a2);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::createAnimator@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl ***v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t v8;

  *a2 = 0;
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a1);
  if (result)
  {
LABEL_2:
    result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 9))(&v8);
    *a2 = v8;
    return result;
  }
  {
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    v6 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v5 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v6)
      goto LABEL_8;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v6 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_27:
      v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_8:
  {
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
  }
  else
  {
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v5 != v6)
  {
    result = v6[1];
    if (result)
      goto LABEL_2;
  }
  {
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_26;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a1);
    v7 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_17;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_26:
      result = 0;
  }
  else
  {
    v7 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_17:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
      goto LABEL_2;
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::appendAnimatedInstance(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl **result;
  uint64_t v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;

  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(a2);
  if (result)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 8);
    return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
  }
  {
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_28;
    v9 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v8 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v9)
      goto LABEL_9;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v9 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_28:
      v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_9:
  {
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
  }
  else
  {
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v8 != v9)
  {
    result = v9[1];
    if (result)
      goto LABEL_2;
  }
  {
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_27;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (WebCore::QualifiedName::QualifiedNameImpl **)a2);
    v10 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_18;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_27:
      result = 0;
  }
  else
  {
    v10 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_18:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v7 = *(_QWORD *)(a1 + 8) + 176;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 10))(result, v7, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::findAccessor(uint64_t *a1)
{
  WTF::StringImpl ***v1;
  uint64_t v2;

  if ((byte_1ECE85880 & 1) == 0)
  {
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
  }
  v1 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if ((byte_1ECE85880 & 1) != 0)
  {
    v2 = qword_1ECE85878;
    if (qword_1ECE85878)
      v2 = qword_1ECE85878 + 16 * *(unsigned int *)(qword_1ECE85878 - 4);
  }
  else
  {
    v2 = 0;
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
  }
  if ((WTF::StringImpl ***)v2 == v1)
    return 0;
  else
    return v1[1];
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  WTF::StringImpl ***result;

  if (!qword_1ECE85878)
    return 0;
  result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  if (result)
    return result;
  if (qword_1ECE85878)
    return (WTF::StringImpl ***)(qword_1ECE85878 + 16 * *(unsigned int *)(qword_1ECE85878 - 4));
  else
    return 0;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  int v5;
  WTF::StringImpl **i;
  int v7;
  WTF::StringImpl ***v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v14;
  void *v15;

  v1 = qword_1ECE85878;
  if (qword_1ECE85878)
  {
    v3 = *(_DWORD *)(qword_1ECE85878 - 8);
    v4 = WebCore::SVGAttributeHashTranslator::hash(a1);
    v5 = 0;
    for (i = (WTF::StringImpl **)WebCore::nullName; ; i = (WTF::StringImpl **)v11)
    {
      v7 = v4 & v3;
      v8 = (WTF::StringImpl ***)(v1 + 16 * (v4 & v3));
      if (i)
      {
        v9 = (*(_DWORD *)i)++;
        v10 = *v8;
        if (v9)
        {
          *(_DWORD *)i = v9;
          v11 = (uint64_t)i;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(i);
          WTF::fastFree(v14, v15);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v8;
      }
      if (v10 == i)
        break;
      v12 = *v8;
      if (*v8 != (WTF::StringImpl **)-1)
      {
        v13 = *a1;
        if (v12 == (WTF::StringImpl **)*a1
          || v12[3] == *(WTF::StringImpl **)(v13 + 24) && v12[4] == *(WTF::StringImpl **)(v13 + 32))
        {
          return v8;
        }
      }
      v4 = ++v5 + v7;
    }
  }
  return 0;
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = off_1E3456B10;
  v5 = *a3;
  v6 = *(_QWORD *)(a4 + 8);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v12;
    }
    v11 = v7;
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v12, v5, (uint64_t *)&v11);
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_WORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = off_1E32EE180;
  *(_QWORD *)(v8 + 28) = v12;
  *(_QWORD *)v8 = off_1E32EE148;
  *(_QWORD *)(a1 + 40) = v8;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v9);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t WebCore::SVGFilterElement::SVGFilterElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1}::operator()()
{
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::filterUnitsAttr,WebCore::SVGUnitTypes::SVGUnitType,&WebCore::SVGFilterElement::m_filterUnits>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::primitiveUnitsAttr,WebCore::SVGUnitTypes::SVGUnitType,&WebCore::SVGFilterElement::m_primitiveUnits>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::xAttr,&WebCore::SVGFilterElement::m_x>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::yAttr,&WebCore::SVGFilterElement::m_y>();
  WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::widthAttr,&WebCore::SVGFilterElement::m_width>();
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::heightAttr,&WebCore::SVGFilterElement::m_height>();
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::filterUnitsAttr,WebCore::SVGUnitTypes::SVGUnitType,&WebCore::SVGFilterElement::m_filterUnits>()
{
  if ((byte_1ECE85898 & 1) == 0)
  {
    qword_1ECE859A8 = (uint64_t)off_1E3465708;
    unk_1ECE859B0 = 192;
    byte_1ECE85898 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::filterUnitsAttr, (uint64_t)&qword_1ECE859A8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::primitiveUnitsAttr,WebCore::SVGUnitTypes::SVGUnitType,&WebCore::SVGFilterElement::m_primitiveUnits>()
{
  if ((byte_1ECE858A0 & 1) == 0)
  {
    qword_1ECE859B8 = (uint64_t)off_1E3465708;
    unk_1ECE859C0 = 200;
    byte_1ECE858A0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::primitiveUnitsAttr, (uint64_t)&qword_1ECE859B8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::xAttr,&WebCore::SVGFilterElement::m_x>()
{
  if ((byte_1ECE858A8 & 1) == 0)
  {
    qword_1ECE859C8 = (uint64_t)off_1E3465770;
    unk_1ECE859D0 = 208;
    byte_1ECE858A8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::xAttr, (uint64_t)&qword_1ECE859C8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::yAttr,&WebCore::SVGFilterElement::m_y>()
{
  if ((byte_1ECE858B0 & 1) == 0)
  {
    qword_1ECE859D8 = (uint64_t)off_1E3465770;
    unk_1ECE859E0 = 216;
    byte_1ECE858B0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::yAttr, (uint64_t)&qword_1ECE859D8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::widthAttr,&WebCore::SVGFilterElement::m_width>()
{
  if ((byte_1ECE858B8 & 1) == 0)
  {
    qword_1ECE859E8 = (uint64_t)off_1E3465770;
    unk_1ECE859F0 = 224;
    byte_1ECE858B8 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::widthAttr, (uint64_t)&qword_1ECE859E8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty<WebCore::SVGNames::heightAttr,&WebCore::SVGFilterElement::m_height>()
{
  if ((byte_1ECE858C0 & 1) == 0)
  {
    qword_1ECE859F8 = (uint64_t)off_1E3465770;
    unk_1ECE85A00 = 232;
    byte_1ECE858C0 = 1;
  }
  return WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(&WebCore::SVGNames::heightAttr, (uint64_t)&qword_1ECE859F8);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterElement,WebCore::SVGElement,WebCore::SVGURIReference>::registerProperty(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((byte_1ECE85880 & 1) == 0)
  {
    qword_1ECE85878 = 0;
    byte_1ECE85880 = 1;
  }
  v4 = a2;
  return WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>((uint64_t)&v3, a1, &v4);
}

uint64_t WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::add<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::Thread *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = qword_1ECE85878;
  if (qword_1ECE85878
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(0),
        (v6 = qword_1ECE85878) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebCore::SVGAttributeHashTranslator::hash(a2) & v7;
  v9 = (WTF::Thread *)(v6 + 16 * v8);
  result = WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
  if ((result & 1) == 0)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == -1)
      {
        v18 = (uint64_t *)v9;
      }
      else
      {
        v21 = *a2;
        if (v20 == *a2
          || *(_QWORD *)(v20 + 24) == *(_QWORD *)(v21 + 24) && *(_QWORD *)(v20 + 32) == *(_QWORD *)(v21 + 32))
        {
          if (qword_1ECE85878)
            v23 = *(unsigned int *)(qword_1ECE85878 - 4);
          else
            v23 = 0;
          v17 = 0;
          v16 = qword_1ECE85878 + 16 * v23;
          goto LABEL_11;
        }
      }
      v8 = (v8 + v19) & v7;
      v9 = (WTF::Thread *)(v6 + 16 * v8);
      result = WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>(v9);
      ++v19;
    }
    while (!(_DWORD)result);
    if (v18)
    {
      v22 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v18 = v22;
      v18[1] = 0;
      --*(_DWORD *)(qword_1ECE85878 - 16);
      v9 = (WTF::Thread *)v18;
    }
  }
  result = (uint64_t)WTF::GenericHashTraits<WebCore::QualifiedName>::assignToEmpty<WebCore::QualifiedName,WebCore::QualifiedName const&>((WTF::StringImpl ***)v9, (WTF::StringImpl ***)a2);
  *((_QWORD *)v9 + 1) = *a3;
  if (qword_1ECE85878)
    v11 = *(_DWORD *)(qword_1ECE85878 - 12) + 1;
  else
    v11 = 1;
  *(_DWORD *)(qword_1ECE85878 - 12) = v11;
  v12 = qword_1ECE85878;
  if (qword_1ECE85878)
    v13 = *(_DWORD *)(qword_1ECE85878 - 12);
  else
    v13 = 0;
  v14 = (*(_DWORD *)(qword_1ECE85878 - 16) + v13);
  v15 = *(unsigned int *)(qword_1ECE85878 - 4);
  if (v15 > 0x400)
  {
    if (v15 > 2 * v14)
      goto LABEL_10;
LABEL_26:
    result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand((WTF::StringImpl ***)v9);
    v9 = (WTF::Thread *)result;
    v12 = qword_1ECE85878;
    if (qword_1ECE85878)
      v15 = *(unsigned int *)(qword_1ECE85878 - 4);
    else
      v15 = 0;
    goto LABEL_10;
  }
  if (3 * v15 <= 4 * v14)
    goto LABEL_26;
LABEL_10:
  v16 = v12 + 16 * v15;
  v17 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::expand(WTF::StringImpl ***a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE85878 && (v2 = *(_DWORD *)(qword_1ECE85878 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE85878 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v3, a1);
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(unsigned int a1, WTF::StringImpl ***a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t Table;
  void *v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = qword_1ECE85878;
  if (qword_1ECE85878)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1ECE85878 - 4);
    v6 = *(_DWORD *)(qword_1ECE85878 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::allocateTable(a1);
  qword_1ECE85878 = Table;
  *(_DWORD *)(Table - 8) = a1 - 1;
  *(_DWORD *)(Table - 4) = a1;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(qword_1ECE85878 - 12) = v6;
  v9 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v10 = (WTF::StringImpl ***)v4;
    do
    {
      if (*v10 != (WTF::StringImpl **)-1)
      {
        if (WTF::isHashTraitsEmptyValue<WTF::HashTraits<WebCore::QualifiedName>,WebCore::QualifiedName>((WTF::Thread *)v10))
        {
          WebCore::QualifiedName::~QualifiedName(v10);
        }
        else
        {
          WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert((uint64_t *)v10);
          v12 = v11;
          WebCore::QualifiedName::~QualifiedName(v10);
          if (v10 == a2)
            v9 = v12;
        }
      }
      v10 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v9;
}

__n128 WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1)
{
  WTF::StringImpl ***v2;
  __n128 result;
  __n128 *v4;

  v2 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
  WebCore::QualifiedName::~QualifiedName(v2);
  result = *(__n128 *)a1;
  *a1 = 0;
  *v4 = result;
  return result;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGFilterElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  WTF::StringImpl **v4;
  int v5;
  int v6;
  WTF::StringImpl ***v7;
  int v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  BOOL v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;

  v1 = qword_1ECE85878;
  if (qword_1ECE85878)
    v2 = *(_DWORD *)(qword_1ECE85878 - 8);
  else
    v2 = 0;
  v3 = WebCore::SVGAttributeHashTranslator::hash(a1);
  v4 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v5 = 0;
    do
    {
      v6 = v3 & v2;
      v7 = (WTF::StringImpl ***)(v1 + 16 * (v3 & v2));
      if (v4)
      {
        v8 = (*(_DWORD *)v4)++;
        v9 = *v7;
        if (v8)
        {
          *(_DWORD *)v4 = v8;
          v10 = (uint64_t)v4;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
          WTF::fastFree(v12, v13);
          v10 = WebCore::nullName;
        }
      }
      else
      {
        v10 = 0;
        v9 = *v7;
      }
      v3 = ++v5 + v6;
      v11 = v9 == v4;
      v4 = (WTF::StringImpl **)v10;
    }
    while (!v11);
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = v3 & v2;
      v3 = ++v14 + v15;
    }
    while (*(_QWORD *)(v1 + 16 * v15));
    return (WTF::StringImpl ***)(v1 + 16 * v15);
  }
  return v7;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFilterElement>::isAnimatedLength()
{
  return 0;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFilterElement>::matches()
{
  return 0;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGMemberAccessor<WebCore::SVGFilterElement>::setDirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFilterElement,WebCore::SVGUnitTypes::SVGUnitType>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 8);
  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  v11 = *(_QWORD *)(a2 + v9);
  ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &off_1E3456678;
  *(_QWORD *)result = &off_1E34565A8;
  *a5 = result;
  return result;
}

_QWORD *WebCore::SVGAnimatedEnumerationAccessor<WebCore::SVGFilterElement,WebCore::SVGUnitTypes::SVGUnitType>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::isAnimatedProperty()
{
  return 1;
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGFilterElement>::isAnimatedLength()
{
  return 1;
}

BOOL WebCore::SVGAnimatedPropertyAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::matches(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)) == a3;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFilterElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::synchronize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + *(_QWORD *)(a1 + 8)) + 72))(*(_QWORD *)(a2 + *(_QWORD *)(a1 + 8)));
}

uint64_t WebCore::SVGAnimatedLengthAccessor<WebCore::SVGFilterElement>::createAnimator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + v15) + 40) + 33);
  v17 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)v17 = off_1E3456BF8;
  v18 = *(_QWORD *)(a2 + v15);
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 64) = a4;
  *(_BYTE *)(v17 + 65) = a5;
  *(_BYTE *)(v17 + 66) = a6;
  *(_BYTE *)(v17 + 67) = a7;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = off_1E3456CB0;
  v20 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v17 + 68, 2, &v20);
  v20 = 0;
  result = WebCore::SVGLengthValue::SVGLengthValue(v17 + 76, 2, &v20);
  *(_BYTE *)(v17 + 84) = 0;
  *(_BYTE *)(v17 + 92) = 0;
  *(_QWORD *)(v17 + 56) = &off_1E3456C60;
  *(_BYTE *)(v17 + 96) = v16;
  *(_QWORD *)v17 = off_1E3456B90;
  *a8 = v17;
  return result;
}

_QWORD *WebCore::SVGAnimatedLengthAccessor<WebCore::SVGFilterElement>::appendAnimatedInstance(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(a2 + result[1]);
  ++*(_DWORD *)(v4 + 8);
  v10 = (_QWORD *)v4;
  v5 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 48))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 40), v5 + 1, (unint64_t)&v10);
    v7 = *(unsigned int *)(a3 + 52);
    v8 = *(_QWORD *)(a3 + 40);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v8 + 8 * v7) = v9;
    result = v10;
    *(_DWORD *)(a3 + 52) = v7 + 1;
    v10 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v4;
    *(_DWORD *)(a3 + 52) = v5 + 1;
  }
  return result;
}

uint64_t *WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(uint64_t *a1, _DWORD **a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  uint64_t v12;
  char v13;

  v5 = (_QWORD *)WebCore::SVGElement::SVGElement((uint64_t)a1, a2, a3, a4, 0);
  *v5 = off_1E3467D10;
  v5[14] = &unk_1E3468270;
  v5[22] = 0;
  v13 = 0;
  v11 = "0%";
  v12 = 3;
  v6 = WTF::fastMalloc((WTF *)0x38);
  a1[23] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v6, (uint64_t)a1, &v13, (uint64_t)&v11);
  v13 = 1;
  v11 = "0%";
  v12 = 3;
  v7 = WTF::fastMalloc((WTF *)0x38);
  a1[24] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v7, (uint64_t)a1, &v13, (uint64_t)&v11);
  v13 = 0;
  v11 = "100%";
  v12 = 5;
  v8 = WTF::fastMalloc((WTF *)0x38);
  a1[25] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v8, (uint64_t)a1, &v13, (uint64_t)&v11);
  v13 = 1;
  v11 = "100%";
  v12 = 5;
  v9 = WTF::fastMalloc((WTF *)0x38);
  a1[26] = WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::SVGAnimatedValueProperty<WebCore::SVGLengthMode,WTF::ASCIILiteral>(v9, (uint64_t)a1, &v13, (uint64_t)&v11);
  WebCore::SVGAnimatedString::create((WebCore::SVGAnimatedString *)a1, a1 + 27);
  std::call_once[abi:sn180100]<WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&)::$_0>((uint64_t)&v11);
  return a1;
}

void std::call_once[abi:sn180100]<WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFilterPrimitiveStandardAttributes::SVGFilterPrimitiveStandardAttributes(WebCore::QualifiedName const&,WebCore::Document &,WTF::UniqueRef<WebCore::SVGPropertyRegistry> &&)::$_0 &&>>);
  }
}

_QWORD *WebCore::SVGFilterPrimitiveStandardAttributes::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int v22;

  v22 = 0;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x399)
  {
    switch(v10)
    {
      case 0x39Au:
        v11 = a1[25];
        break;
      case 0x3ABu:
        v11 = a1[24];
LABEL_15:
        ++*(_DWORD *)(v11 + 8);
        v16 = *(_QWORD *)a4;
        if (*(_QWORD *)a4)
        {
          v13 = *(unsigned __int16 **)(v16 + 8);
          v14 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v13 = 0;
          v14 = 0x100000000;
        }
        v15 = 1;
LABEL_18:
        v17 = WebCore::SVGLengthValue::construct(v15, v13, v14, &v22, 0);
        v18 = *(_QWORD *)(v11 + 40);
        *(_DWORD *)(v18 + 28) = v17;
        *(_WORD *)(v18 + 32) = WORD2(v17);
        v19 = *(_QWORD *)(v11 + 48);
        if (v19)
        {
          *(_DWORD *)(v19 + 28) = v17;
          *(_WORD *)(v19 + 32) = WORD2(v17);
        }
        goto LABEL_20;
      case 0x3A1u:
        v11 = a1[23];
        break;
      default:
        goto LABEL_22;
    }
    ++*(_DWORD *)(v11 + 8);
    v12 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v13 = *(unsigned __int16 **)(v12 + 8);
      v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v15 = 0;
    goto LABEL_18;
  }
  if (v10 != 803)
  {
    if (v10 != 504)
      goto LABEL_22;
    v11 = a1[26];
    goto LABEL_15;
  }
  v11 = a1[27];
  ++*(_DWORD *)(v11 + 8);
  WebCore::SVGAnimatedPrimitiveProperty<WTF::String>::setBaseValInternal(v11, a4);
LABEL_20:
  if (*(_DWORD *)(v11 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  else
    --*(_DWORD *)(v11 + 8);
LABEL_22:
  WebCore::SVGElement::reportAttributeParsingError((uint64_t)a1, v22, a2, (WTF::StringImpl **)a4);
  return WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, (WTF::StringImpl **)a4, a5, v20);
}

uint64_t WebCore::SVGFilterPrimitiveStandardAttributes::effectGeometryFlags(WebCore::SVGFilterPrimitiveStandardAttributes *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  unsigned int hasAttribute;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;

  hasAttribute = WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::xAttr, a4, a5, a2);
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::yAttr, v7, v8, v9))
    hasAttribute |= 2u;
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::widthAttr, v10, v11, v12))
  {
    hasAttribute |= 4u;
  }
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::heightAttr, v13, v14, v15))
  {
    return hasAttribute | 8;
  }
  else
  {
    return hasAttribute;
  }
}

unsigned __int8 **WebCore::SVGFilterPrimitiveStandardAttributes::filterEffect@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 **result;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[22];
  if (v3)
    goto LABEL_7;
  result = (unsigned __int8 **)(*(_QWORD *(**)(uint64_t *__return_ptr))(*a1 + 1352))(&v10);
  v3 = v10;
  v10 = 0;
  v7 = a1[22];
  a1[22] = v3;
  if (v7)
  {
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v7 + 8), v6);
    v9 = v10;
    v10 = 0;
    if (v9)
      result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v9 + 8), v8);
    v3 = a1[22];
  }
  if (v3)
LABEL_7:
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 8));
  *a2 = v3;
  return result;
}

void WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged(WebCore::SVGFilterPrimitiveStandardAttributes *this, const WebCore::QualifiedName *a2)
{
  uint64_t v3;
  void *v5;

  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 8));
    if ((*(unsigned int (**)(WebCore::SVGFilterPrimitiveStandardAttributes *, uint64_t, const WebCore::QualifiedName *))(*(_QWORD *)this + 1336))(this, v3, a2))
    {
      WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRepaint(this);
    }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v3 + 8), v5);
  }
  else
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRepaint(this);
  }
}

void WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRepaint(WebCore::SVGFilterPrimitiveStandardAttributes *this)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_11;
    v2 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v2;
    v3 = *(unsigned __int8 *)(v1 + 46);
    if (v3 == 97)
    {
      WebCore::LegacyRenderSVGResourceFilterPrimitive::markFilterEffectForRepaint(v1, *((WebCore::FilterEffect **)this + 22));
    }
    else
    {
      if (v3 != 77)
        goto LABEL_8;
      WebCore::RenderSVGResourceFilterPrimitive::markFilterEffectForRepaint((WebCore::RenderSVGResourceFilterPrimitive *)v1, *((WebCore::FilterEffect **)this + 22));
    }
    v2 = *(_DWORD *)(v1 + 16);
LABEL_8:
    if (v2)
    {
      *(_DWORD *)(v1 + 16) = v2 - 1;
      return;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x196664AD0);
  }
}

void WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeOnChildChanged(WebCore::SVGFilterPrimitiveStandardAttributes *this, const WebCore::Element *a2, const WebCore::QualifiedName *a3)
{
  uint64_t v4;
  uint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  v4 = *((_QWORD *)this + 22);
  if (!v4)
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRepaint(this);
    return;
  }
  v7 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_6:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if ((*(unsigned int (**)(WebCore::SVGFilterPrimitiveStandardAttributes *, uint64_t, const WebCore::Element *, const WebCore::QualifiedName *))(*(_QWORD *)this + 1344))(this, v4, a2, a3))
  {
    WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRepaint(this);
  }
  v11 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_17:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v18 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v18 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_24;
  if (v14)
    return;
LABEL_25:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v10);
}

void WebCore::SVGFilterPrimitiveStandardAttributes::markFilterEffectForRebuild(WebCore::SVGFilterPrimitiveStandardAttributes *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_29;
    ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    v3 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (!v3)
    {
LABEL_20:
      v11 = *(unsigned __int8 *)(v2 + 46);
      if (v11 == 97)
      {
        WebCore::LegacyRenderSVGResourceFilterPrimitive::markFilterEffectForRebuild(v2);
      }
      else if (v11 == 77)
      {
        WebCore::RenderSVGResourceFilterPrimitive::markFilterEffectForRebuild((WebCore::RenderSVGResourceFilterPrimitive *)v2, a2);
      }
      v12 = *(_DWORD *)(v2 + 16);
      if (v12)
      {
        *(_DWORD *)(v2 + 16) = v12 - 1;
        return;
      }
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x196664DB0);
    }
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v7)
          goto LABEL_20;
LABEL_16:
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        if (!v9)
          WTF::fastFree((WTF *)v4, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_20;
    goto LABEL_16;
  }
}

void WebCore::SVGFilterPrimitiveStandardAttributes::svgAttributeChanged(WebCore::SVGFilterPrimitiveStandardAttributes *this, const WebCore::QualifiedName *a2)
{
  void *v4;
  unsigned int *v5;

  if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFilterPrimitiveStandardAttributes,WebCore::SVGElement>::findAccessor((uint64_t *)a2))
  {
    WTF::WeakRef<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData>::WeakRef<void>(&v5, (uint64_t)this);
    WebCore::SVGElement::updateSVGRendererForElementChange(this);
    WebCore::SVGElement::InstanceInvalidationGuard::~InstanceInvalidationGuard((WebCore::SVGElement::InstanceInvalidationGuard *)&v5, v4);
  }
  else
  {
    WebCore::SVGElement::svgAttributeChanged(this, a2);
  }
}

void WebCore::SVGFilterPrimitiveStandardAttributes::childrenChanged(WebCore::SVGElement *a1, unsigned __int8 *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v7 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v7)
    goto LABEL_2;
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v9 = *a2;
  if ((v9 - 2) < 3)
  {
    v10 = *(_QWORD **)(v7 + 224);
    if (!v10)
      goto LABEL_13;
    v11 = 14;
    goto LABEL_22;
  }
  if (v9 == 8 || v9 == 5)
  {
    v10 = *(_QWORD **)(v7 + 224);
    if (v10)
    {
      v11 = 13;
LABEL_22:
      v12 = v7;
      (*(void (**)(void))(*v10 + 8 * v11))();
      v7 = v12;
      v8 = *(_DWORD *)(v12 + 24) - 2;
    }
  }
LABEL_13:
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v4);
  }
LABEL_2:
  if (a2[32])
  {
    WebCore::SVGElement::invalidateInstances(a1, v4);
    if (a2[32])
    {
      v5 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::Document::updateSVGRenderer((WebCore::Document *)v5, a1);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
}

void WebCore::SVGFilterPrimitiveStandardAttributes::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v8 = WebCore::RenderSVGResourceFilterPrimitive::operator new(224);
    WebCore::RenderSVGResourceFilterPrimitive::RenderSVGResourceFilterPrimitive(v8, a1, a2);
  }
  else
  {
    v6 = WebCore::LegacyRenderSVGResourceFilterPrimitive::operator new(216);
    WebCore::LegacyRenderSVGResourceFilterPrimitive::LegacyRenderSVGResourceFilterPrimitive(v6, a1, a2);
  }
  *a3 = v7;
}

BOOL WebCore::SVGFilterPrimitiveStandardAttributes::rendererIsNeeded(WebCore::SVGFilterPrimitiveStandardAttributes *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  return v2
      && (*(_WORD *)(v2 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::filterTag + 24)
      && WebCore::SVGElement::rendererIsNeeded(this, a2);
}

void WebCore::SVGFilterPrimitiveStandardAttributes::invalidateFilterPrimitiveParent(WebCore::SVGFilterPrimitiveStandardAttributes *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (this)
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v3 + 2;
      v4 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v4)
      {
LABEL_13:
        if (v3)
        {
          *(_DWORD *)(v2 + 24) = v3;
        }
        else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
        }
        return;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      {
        v5 = *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v5;
        v6 = *(unsigned __int8 *)(v4 + 46);
        if (v6 != 97 && v6 != 77)
        {
LABEL_11:
          if (!v5)
          {
            __break(0xC471u);
            JUMPOUT(0x196665160);
          }
          *(_DWORD *)(v4 + 16) = v5 - 1;
          v3 = *(_DWORD *)(v2 + 24) - 2;
          goto LABEL_13;
        }
        if ((*(_WORD *)(v2 + 28) & 0x20) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
          *(_DWORD *)(v7 + 24) += 2;
          WebCore::Document::updateSVGRenderer((WebCore::Document *)v7, (WebCore::SVGElement *)v2);
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
          v5 = *(_DWORD *)(v4 + 16);
          goto LABEL_11;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x196665140);
    }
  }
}

uint64_t WebCore::SVGFitToViewBox::SVGFitToViewBox(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)v6 = off_1E3467A40;
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = a3;
  *(_BYTE *)(v7 + 25) = 0;
  *(_QWORD *)(v7 + 36) = 0;
  *(_QWORD *)(v7 + 28) = 0;
  *(_QWORD *)v7 = off_1E32EE110;
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)a1 = v6;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)v8 = off_1E3461BE0;
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 24) = a3;
  *(_BYTE *)(v9 + 25) = 0;
  *(_WORD *)(v9 + 26) = 262;
  *(_QWORD *)v9 = off_1E32EE030;
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = 0;
  v10 = atomic_load(&WebCore::SVGFitToViewBox::SVGFitToViewBox(WebCore::SVGElement *,WebCore::SVGPropertyAccess)::onceFlag);
  if (v10 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::SVGFitToViewBox::SVGFitToViewBox(WebCore::SVGElement *,WebCore::SVGPropertyAccess)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGFitToViewBox::SVGFitToViewBox(WebCore::SVGElement *,WebCore::SVGPropertyAccess)::$_0 &&>>);
  }
  return a1;
}

uint64_t WebCore::SVGFitToViewBox::setViewBox(WebCore::SVGFitToViewBox *this, const WebCore::FloatRect *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)this;
  ++*(_DWORD *)(result + 8);
  *(_OWORD *)(*(_QWORD *)(result + 40) + 28) = *(_OWORD *)a2;
  v4 = *(_QWORD *)(result + 48);
  if (v4)
    *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  if (*(_DWORD *)(result + 8) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  else
    --*(_DWORD *)(result + 8);
  *((_BYTE *)this + 16) = 1;
  return result;
}

uint64_t WebCore::SVGFitToViewBox::parseAttribute(WebCore::SVGFitToViewBox *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  unsigned __int16 *v20;
  uint64_t v21;

  if (*(_QWORD *)a2 != WebCore::SVGNames::viewBoxAttr)
  {
    if (*(_QWORD *)a2 != WebCore::SVGNames::preserveAspectRatioAttr)
      return 0;
    v9 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v10 = 0;
      v11 = 0x100000000;
    }
    LOWORD(v20) = 262;
    *(_QWORD *)&v18 = v10;
    *((_QWORD *)&v18 + 1) = v11;
    WTF::readCharactersForParsing<WTF::StringView &,WebCore::SVGPreserveAspectRatioValue::parse(WTF::StringView)::$_0>((uint64_t)&v18, (uint64_t)&v20);
    v12 = *((_QWORD *)this + 1);
    v13 = (__int16)v20;
    *(_WORD *)(*(_QWORD *)(v12 + 40) + 26) = (_WORD)v20;
    v14 = *(_QWORD *)(v12 + 48);
    if (v14)
      *(_WORD *)(v14 + 26) = v13;
    return 1;
  }
  v5 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_20;
  v6 = *(unsigned int *)(v5 + 4);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    v20 = *(unsigned __int16 **)(v5 + 8);
    v21 = v6;
    WebCore::SVGFitToViewBox::parseViewBoxGeneric<unsigned char>((uint64_t)this, (uint64_t *)&v20, 1, (uint64_t)&v18);
  }
  else
  {
    v20 = *(unsigned __int16 **)(v5 + 8);
    v21 = v6;
    WebCore::SVGFitToViewBox::parseViewBoxGeneric<char16_t>((uint64_t)this, &v20, 1, (uint64_t)&v18);
  }
  if (!v19)
  {
LABEL_20:
    v15 = *(_QWORD *)this;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(*(_QWORD *)this + 8) + 1;
    v16 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v16 + 36) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    v17 = *(_QWORD *)(v15 + 48);
    if (v17)
    {
      *(_QWORD *)(v17 + 36) = 0;
      *(_QWORD *)(v17 + 28) = 0;
    }
    if (*(_DWORD *)(v15 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 8);
    *((_BYTE *)this + 16) = 0;
    return 1;
  }
  v7 = *(_QWORD *)this;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(*(_QWORD *)this + 8) + 1;
  *(_OWORD *)(*(_QWORD *)(v7 + 40) + 28) = v18;
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
    *(_OWORD *)(v8 + 28) = v18;
  if (*(_DWORD *)(v7 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 8);
  result = 1;
  *((_BYTE *)this + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::SVGFitToViewBox::parseViewBoxGeneric<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  int v23;
  float v24;
  WTF::StringImpl *result;
  int v26;
  float v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  _BYTE *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _BYTE *__src;
  _DWORD *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;

  v7 = *a2;
  v8 = a2[1];
  if (v8)
  {
    v9 = v7 + 1;
    v10 = v8 - 1;
    v11 = (unsigned __int8 *)*a2;
    do
    {
      v12 = *v11;
      v13 = v12 > 0x20;
      v14 = (1 << v12) & 0x100003600;
      if (v13 || v14 == 0)
        break;
      ++v11;
      *a2 = v9;
      a2[1] = v10;
      ++v9;
      --v10;
    }
    while (v10 != -1);
  }
  __src = (_BYTE *)v7;
  v16 = WebCore::parseNumber(a2, 1);
  v17 = *(float *)&v16;
  v18 = BYTE4(v16);
  v19 = WebCore::parseNumber(a2, 1);
  v20 = *(float *)&v19;
  v21 = BYTE4(v19);
  v22 = WebCore::parseNumber(a2, 1);
  v23 = BYTE4(v22);
  v24 = *(float *)&v22;
  result = (WTF::StringImpl *)WebCore::parseNumber(a2, 0);
  v26 = BYTE4(result);
  v27 = *(float *)&result;
  if (!a3)
    goto LABEL_25;
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40) + 8);
  v29 = *(_DWORD *)(v28 + 24);
  *(_DWORD *)(v28 + 24) = v29 + 2;
  if (!v18 || !v21 || !v23 || !BYTE4(result))
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v58);
    v46 = v58;
    WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>("Problem parsing viewBox=\"", 26, __src, v8 | 0x100000000, "\"", 2, &v57);
    WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v46, (const WTF::String *)&v57);
    result = v57;
    v57 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
      else
        *(_DWORD *)result -= 2;
    }
    if (v46)
    {
      if (!*v46)
      {
        __break(0xC471u);
        JUMPOUT(0x1966659B8);
      }
      --*v46;
    }
    goto LABEL_63;
  }
  if (v24 < 0.0)
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v57);
    v48 = v57;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = (WTF::StringImpl *)v58;
    v56 = v58;
    result = (WTF::StringImpl *)WebCore::SVGDocumentExtensions::reportError((uint64_t)v48, (const WTF::String *)&v56);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v49, v50);
      else
        *(_DWORD *)v49 -= 2;
    }
    if (!v48)
      goto LABEL_63;
    v51 = *(_DWORD *)v48;
    if (!*(_DWORD *)v48)
    {
      __break(0xC471u);
      goto LABEL_84;
    }
    goto LABEL_76;
  }
  if (*(float *)&result < 0.0)
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v57);
    v48 = v57;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v52 = (WTF::StringImpl *)v58;
    v56 = v58;
    result = (WTF::StringImpl *)WebCore::SVGDocumentExtensions::reportError((uint64_t)v48, (const WTF::String *)&v56);
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v52, v53);
      else
        *(_DWORD *)v52 -= 2;
    }
    if (!v48)
      goto LABEL_63;
    v51 = *(_DWORD *)v48;
    if (!*(_DWORD *)v48)
    {
      __break(0xC471u);
      JUMPOUT(0x1966659D8);
    }
LABEL_76:
    *(_DWORD *)v48 = v51 - 1;
LABEL_63:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_50;
  }
  v30 = a2[1];
  if (!v30)
  {
LABEL_23:
    if (v29)
    {
      *(_DWORD *)(v28 + 24) = v29;
    }
    else if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
    {
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    goto LABEL_25;
  }
  v31 = (unsigned __int8 *)*a2;
  v32 = *a2 + 1;
  v33 = v30 - 1;
  do
  {
    v34 = *v31;
    v13 = v34 > 0x20;
    v35 = (1 << v34) & 0x100003600;
    if (v13 || v35 == 0)
    {
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v57);
      if ((v8 & 0x80000000) == 0 && !__OFADD__((_DWORD)v8, 1))
      {
        v41 = (v8 + 26);
        if (!__OFADD__(v8 + 1, 25))
        {
          v42 = v57;
          WTF::tryFastCompactMalloc((WTF *)(v41 + 20));
          v43 = v58;
          if (v58)
          {
            *v58 = 2;
            v43[1] = v41;
            *((_QWORD *)v43 + 1) = v43 + 5;
            v43[4] = 4;
            qmemcpy(v43 + 5, "Problem parsing viewBox=\"", 25);
            v44 = (char *)v43 + 45;
            if ((_DWORD)v8)
            {
              if ((_DWORD)v8 == 1)
                *v44 = *__src;
              else
                memcpy((char *)v43 + 45, __src, v8);
            }
            v44[v8] = 34;
            v58 = v43;
            result = (WTF::StringImpl *)WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v42, (const WTF::String *)&v58);
            if (*v43 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v43, v45);
            else
              *v43 -= 2;
            if (v42)
            {
              if (!*(_DWORD *)v42)
              {
                __break(0xC471u);
                JUMPOUT(0x196665978);
              }
              --*(_DWORD *)v42;
            }
            *(_BYTE *)a4 = 0;
            *(_BYTE *)(a4 + 16) = 0;
            if (!v28)
              return result;
LABEL_50:
            if (*(_DWORD *)(v28 + 24) == 2)
            {
              if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v28);
            }
            else
            {
              *(_DWORD *)(v28 + 24) -= 2;
            }
            return result;
          }
        }
      }
      __break(0xC471u);
LABEL_84:
      JUMPOUT(0x1966658F4);
    }
    ++v31;
    *a2 = v32;
    a2[1] = v33;
    ++v32;
    --v33;
  }
  while (v33 != -1);
  if (v28)
    goto LABEL_23;
LABEL_25:
  v37 = v17;
  v38 = v20;
  if (!v18)
    v37 = 0.0;
  if (!v21)
    v38 = 0.0;
  if (v23)
    v39 = v24;
  else
    v39 = 0.0;
  *(float *)a4 = v37;
  *(float *)(a4 + 4) = v38;
  if (v26)
    v40 = v27;
  else
    v40 = 0.0;
  *(float *)(a4 + 8) = v39;
  *(float *)(a4 + 12) = v40;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::SVGFitToViewBox::parseViewBoxGeneric<char16_t>@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t v21;
  int v22;
  float v23;
  WTF::StringImpl *result;
  int v25;
  int v26;
  float v27;
  uint64_t v28;
  int v29;
  int *v30;
  WTF::StringImpl *v31;
  int v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  float v44;
  float v45;
  float v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  float v50;
  WTF::StringImpl *v52;
  _DWORD *v53;

  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = v6 + 1;
    v9 = (unsigned __int16 *)((char *)v7 - 1);
    v10 = *a2;
    do
    {
      v11 = *v10;
      v12 = v11 > 0x20;
      v13 = (1 << v11) & 0x100003600;
      if (v12 || v13 == 0)
        break;
      ++v10;
      *a2 = v8;
      a2[1] = v9;
      ++v8;
      v9 = (unsigned __int16 *)((char *)v9 - 1);
    }
    while (v9 != (unsigned __int16 *)-1);
  }
  v15 = WebCore::genericParseNumber<char16_t,float>(a2, 1);
  v16 = *(float *)&v15;
  v17 = BYTE4(v15);
  v18 = WebCore::genericParseNumber<char16_t,float>(a2, 1);
  v19 = *(float *)&v18;
  v20 = BYTE4(v18);
  v21 = WebCore::genericParseNumber<char16_t,float>(a2, 1);
  v22 = BYTE4(v21);
  v23 = *(float *)&v21;
  result = (WTF::StringImpl *)WebCore::genericParseNumber<char16_t,float>(a2, 0);
  v25 = v17;
  v26 = BYTE4(result);
  v27 = *(float *)&result;
  if (!a3)
    goto LABEL_50;
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40) + 8);
  v29 = *(_DWORD *)(v28 + 24);
  *(_DWORD *)(v28 + 24) = v29 + 2;
  if (!v25 || !v20 || !v22 || !BYTE4(result))
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v53);
    if ((v7 & 0x80000000) != 0 || __OFADD__((_DWORD)v7, 1) || __OFADD__((_DWORD)v7 + 1, 25))
    {
      v52 = 0;
    }
    else
    {
      v33 = v53;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(((_DWORD)v7 + 26), 0, "Problem parsing viewBox=\"", 0x19u, v6, v7, "\"", 1u, &v52);
      if (v52)
      {
        WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v33, (const WTF::String *)&v52);
        result = v52;
        v52 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
            if (!v33)
              goto LABEL_37;
            goto LABEL_28;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v33)
          goto LABEL_37;
LABEL_28:
        if (!*v33)
        {
          __break(0xC471u);
          JUMPOUT(0x196665E70);
        }
        --*v33;
        goto LABEL_37;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x196665EE4);
  }
  if (v23 < 0.0)
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v53);
    v30 = v53;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::SVGDocumentExtensions::reportError((uint64_t)v30, (const WTF::String *)&v52);
    result = v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
        if (!v30)
          goto LABEL_37;
        goto LABEL_18;
      }
      *(_DWORD *)result -= 2;
    }
    if (v30)
    {
LABEL_18:
      v32 = *v30;
      if (!*v30)
        goto LABEL_91;
      goto LABEL_36;
    }
LABEL_37:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
LABEL_38:
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
    return result;
  }
  if (*(float *)&result < 0.0)
  {
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v53);
    v30 = v53;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::SVGDocumentExtensions::reportError((uint64_t)v30, (const WTF::String *)&v52);
    result = v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
        if (!v30)
          goto LABEL_37;
        goto LABEL_35;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v30)
      goto LABEL_37;
LABEL_35:
    v32 = *v30;
    if (!*v30)
    {
      __break(0xC471u);
      JUMPOUT(0x196665E90);
    }
LABEL_36:
    *v30 = v32 - 1;
    goto LABEL_37;
  }
  v36 = a2[1];
  if (!v36)
  {
LABEL_48:
    v43 = v25;
    v50 = *(float *)&result;
    if (v29)
    {
      *(_DWORD *)(v28 + 24) = v29;
      v27 = *(float *)&result;
    }
    else
    {
      v27 = *(float *)&result;
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      {
        result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v28);
        v25 = v43;
        v27 = v50;
      }
    }
    goto LABEL_50;
  }
  v37 = *a2;
  v38 = (uint64_t)(*a2 + 1);
  v39 = (unsigned __int16 *)((char *)v36 - 1);
  do
  {
    v40 = *v37;
    v12 = v40 > 0x20;
    v41 = (1 << v40) & 0x100003600;
    if (v12 || v41 == 0)
    {
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v28, &v53);
      if ((v7 & 0x80000000) != 0 || __OFADD__((_DWORD)v7, 1) || __OFADD__((_DWORD)v7 + 1, 25))
      {
        v52 = 0;
      }
      else
      {
        v47 = v53;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(((_DWORD)v7 + 26), 0, "Problem parsing viewBox=\"", 0x19u, v6, v7, "\"", 1u, &v52);
        if (v52)
        {
          WebCore::SVGDocumentExtensions::reportWarning((uint64_t)v47, (const WTF::String *)&v52);
          result = v52;
          v52 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v48);
              if (!v47)
                goto LABEL_71;
              goto LABEL_69;
            }
            *(_DWORD *)result -= 2;
          }
          if (!v47)
            goto LABEL_71;
LABEL_69:
          if (!*v47)
          {
            __break(0xC471u);
            JUMPOUT(0x196665EB0);
          }
          --*v47;
LABEL_71:
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 16) = 0;
          if (!v28)
            return result;
          goto LABEL_38;
        }
      }
LABEL_91:
      __break(0xC471u);
      JUMPOUT(0x196665B70);
    }
    ++v37;
    *a2 = (unsigned __int16 *)v38;
    a2[1] = v39;
    v38 += 2;
    v39 = (unsigned __int16 *)((char *)v39 - 1);
  }
  while (v39 != (unsigned __int16 *)-1);
  if (v28)
    goto LABEL_48;
LABEL_50:
  v44 = v16;
  v45 = v19;
  if (!v25)
    v44 = 0.0;
  if (!v20)
    v45 = 0.0;
  if (v22)
    v46 = v23;
  else
    v46 = 0.0;
  *(float *)a4 = v44;
  *(float *)(a4 + 4) = v45;
  if (!v26)
    v27 = 0.0;
  *(float *)(a4 + 8) = v46;
  *(float *)(a4 + 12) = v27;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

double WebCore::SVGFitToViewBox::viewBoxToViewTransform@<D0>(WebCore::SVGFitToViewBox *this@<X0>, const WebCore::FloatRect *a2@<X1>, double a3@<D0>, float a4@<S1>, _OWORD *a5@<X8>)
{
  float v6;
  double result;
  float v8;
  float v9;

  v6 = *((float *)this + 2);
  if (v6 == 0.0 || a4 == 0.0 || (v8 = *(float *)&a3, *(float *)&a3 == 0.0) || (v9 = *((float *)this + 3), v9 == 0.0))
  {
    *a5 = constinit_15;
    a5[1] = unk_1969FE9D0;
    result = 0.0;
    a5[2] = xmmword_1969FE9E0;
  }
  else
  {
    LODWORD(a3) = *(_DWORD *)this;
    return WebCore::SVGPreserveAspectRatioValue::getCTM(a2, a3, *((float *)this + 1), v6, v9, v8, a4, (uint64_t)a5);
  }
  return result;
}

uint64_t WebCore::SVGFontElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3466E20;
  v6[14] = &unk_1E3467350;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3467388;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3466E20;
  v6[14] = &unk_1E3467350;
  *a3 = v6;
  return result;
}

void WebCore::SVGFontFaceElement::~SVGFontFaceElement(WebCore::SVGFontFaceElement *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    if (*v6 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v6, (WTF::StringImpl *)a2);
    else
      --*v6;
  }
  WebCore::SVGElement::~SVGElement(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFontFaceElement::~SVGFontFaceElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SVGFontFaceElement::~SVGFontFaceElement(WebCore::SVGFontFaceElement *this, void *a2)
{
  WebCore::SVGFontFaceElement::~SVGFontFaceElement((WebCore::SVGFontFaceElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFontFaceElement::~SVGFontFaceElement((WebCore::SVGFontFaceElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::SVGFontFaceElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3465838;
  v6[14] = &unk_1E3465D68;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v10 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v10, 0);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  *v6 = off_1E3465838;
  v6[14] = &unk_1E3465D68;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  *v8 = 0x800000001;
  v8[1] = 0;
  v8[2] = v8 + 4;
  v8[3] = 4;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 5;
  *(_QWORD *)(result + 8) = v8;
  v6[22] = result;
  v6[23] = 0;
  *a3 = v6;
  return result;
}

void WebCore::SVGFontFaceElement::attributeChanged(WebCore::SVGFontFaceElement *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5)
{
  uint64_t v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WebCore::StyleRuleKeyframe *v13;
  WebCore::MutableStyleProperties *v14;
  void *v15;
  WTF::StringBuilder *v16;
  WTF::String *v17;
  __n128 v18;
  unint64_t v19;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v28;

  v10 = WebCore::SVGElement::cssPropertyIdForSVGAttributeName((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 680));
  if ((_DWORD)v10)
  {
    v12 = (WTF::StringImpl *)v10;
    v13 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)a1 + 22);
    ++*(_DWORD *)v13;
    v14 = WebCore::StyleRuleKeyframe::mutableProperties(v13);
    ++*(_DWORD *)v14;
    if (WebCore::MutableStyleProperties::setProperty((uint64_t)v14, (uint64_t)v12, (uint64_t)a4, 0, 0))
    {
      v19 = WebCore::StyleProperties::propertyAsValueID((uint64_t)v14, v12);
      if ((v19 & 0xFF0000) != 0 && (unsigned __int16)v19 - 1 <= 4)
        WebCore::MutableStyleProperties::removeProperty((uint64_t)v14, v12, 0, v17, v18);
    }
    WebCore::SVGFontFaceElement::rebuildFontFace(a1, v15, v16, v17, v18);
    if (*(_DWORD *)v14 == 1)
    {
      v22 = *((unsigned int *)v14 + 7);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        v24 = (_DWORD **)(*((_QWORD *)v14 + 2) + 8);
        do
        {
          v25 = *v24;
          *v24 = 0;
          if (v25)
          {
            if (*v25 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v21);
            else
              *v25 -= 2;
          }
          v24 += 2;
          v23 -= 16;
        }
        while (v23);
      }
      v26 = (WTF *)*((_QWORD *)v14 + 2);
      if ((WebCore::MutableStyleProperties *)((char *)v14 + 32) != v26 && v26 != 0)
      {
        *((_QWORD *)v14 + 2) = 0;
        *((_DWORD *)v14 + 6) = 0;
        WTF::fastFree(v26, v21);
      }
      v28 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      WTF::fastFree(v14, v21);
    }
    else
    {
      --*(_DWORD *)v14;
    }
    if (*(_DWORD *)v13 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v13, v21);
    else
      --*(_DWORD *)v13;
  }
  else
  {
    WebCore::SVGElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, v11);
  }
}

void WebCore::SVGFontFaceElement::rebuildFontFace(WebCore::SVGFontFaceElement *this, void *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF::String *v37;
  __n128 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::String *v41;
  WTF::StringImpl *v42;
  __n128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  __int128 v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  _DWORD **v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  WTF::StringImpl *v82;
  uint64_t *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  _DWORD *v87;
  WTF *v88;
  WTF::StringImpl *v90;
  uint64_t v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  WebCore::StyleRuleKeyframe *v95;
  WebCore::MutableStyleProperties *v96;
  const WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  _DWORD **v105;
  _DWORD *v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  int v117;
  int v118;
  WTF::StringImpl *__src;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  _BYTE v123[32];
  WTF *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  _BYTE v127[48];
  WTF::StringImpl *v128[2];
  __int128 v129;
  __int128 v130;

  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    v6 = *((_QWORD *)this + 10);
    if (v6)
    {
      while ((*(_WORD *)(v6 + 28) & 0x20) == 0
           || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::font_face_srcTag + 24))
      {
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          goto LABEL_6;
      }
      v7 = 0;
      *(_DWORD *)(v6 + 24) += 2;
    }
    else
    {
LABEL_6:
      v7 = 1;
    }
    v8 = *((_QWORD *)this + 4);
    if ((*(_WORD *)(v8 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::fontTag + 24))
    {
      v9 = WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v8);
      if (v9)
      {
        do
          v10 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v10 + 1, (unsigned int *)v9));
      }
    }
    else
    {
      v9 = 0;
    }
    v11 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v115 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v115)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v115));
        v116 = *(WTF **)(v11 + 16);
        if (v116)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          WTF::fastFree(v116, a2);
        }
        WTF::fastFree((WTF *)v11, a2);
      }
      v9 = *((_QWORD *)this + 23);
    }
    if (v9 && *(_QWORD *)(v9 + 8))
    {
      v14 = *((_QWORD *)this + 22);
      ++*(_DWORD *)v14;
      WebCore::StyleProperties::serializeLonghandValue(*(_QWORD *)(v14 + 8), 8, a3, a4, (WebCore *)&v121, a5);
      if (*(_DWORD *)v14 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v14, v15);
      else
        --*(_DWORD *)v14;
      v16 = v121;
      v121 = 0;
      if (v16)
      {
        *(_QWORD *)v127 = v16;
        if ((*((_BYTE *)v16 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v18 = *(WTF::StringImpl **)v127;
          v16 = v128[0];
          v128[0] = 0;
          *(_QWORD *)v127 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v17);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
      }
      v19 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v19 = 2;
      v20 = (*(_BYTE *)(v19 + 6) >> 2 << 18) | 0x10000;
      *(_WORD *)(v19 + 4) = 0;
      *(_BYTE *)(v19 + 6) = BYTE2(v20);
      *(_QWORD *)(v19 + 8) = v16;
      *(_QWORD *)(v19 + 16) = 0;
      v21 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v21 = 2;
      v22 = (*(unsigned __int8 *)(v21 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v21 + 8) = 1;
      *(_WORD *)(v21 + 4) = -9728;
      *(_BYTE *)(v21 + 6) = (v22 | 0x10000u) >> 16;
      *(_QWORD *)(v21 + 16) = v19;
      v23 = v121;
      v121 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = 0;
      goto LABEL_206;
    }
    if (!v6)
      goto LABEL_250;
    v25 = *(_QWORD *)(v6 + 80);
    v121 = (WTF::StringImpl *)v123;
    v122 = 4;
    if (!v25)
    {
LABEL_33:
      v26 = 0;
      v128[0] = (WTF::StringImpl *)&v129;
      v128[1] = (WTF::StringImpl *)4;
      goto LABEL_179;
    }
    while ((*(_WORD *)(v25 + 28) & 0x20) == 0)
    {
      v25 = *(_QWORD *)(v25 + 56);
      if (!v25)
        goto LABEL_33;
    }
LABEL_34:
    v27 = *(_QWORD *)(*(_QWORD *)(v25 + 96) + 24);
    v28 = *(_QWORD *)(WebCore::SVGNames::font_face_uriTag + 24);
    if (v27 == v28)
      v29 = v25;
    else
      v29 = 0;
    if (v29)
      *(_DWORD *)(v29 + 24) += 2;
    if (v27 != v28)
    {
      v30 = *(_QWORD *)(WebCore::SVGNames::font_face_nameTag + 24);
      if (v27 == v30)
        v31 = v25;
      else
        v31 = 0;
      if (v31)
        *(_DWORD *)(v31 + 24) += 2;
      if (v27 != v30)
        goto LABEL_129;
      v32 = *(_QWORD *)(v25 + 104);
      if (!v32)
        goto LABEL_124;
      v33 = *(unsigned int *)(v32 + 4);
      if ((v33 & 1) != 0)
      {
        v34 = *(_QWORD *)(v32 + 40);
        v35 = *(unsigned int *)(v32 + 52);
        if (!v35)
        {
LABEL_124:
          v73 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_125:
          v75 = *v73;
          if (*v73)
            *v75 += 2;
          v76 = WTF::fastCompactMalloc((WTF *)0x18);
          v77 = v76;
          *(_DWORD *)v76 = 2;
          v78 = (*(_BYTE *)(v76 + 6) >> 2 << 18) | 0x10000;
          *(_WORD *)(v76 + 4) = 0;
          *(_BYTE *)(v76 + 6) = BYTE2(v78);
          *(_QWORD *)(v76 + 8) = v75;
          *(_QWORD *)(v76 + 16) = 0;
          if (v75 && v75[1])
          {
            v79 = HIDWORD(v122);
            if (HIDWORD(v122) == (_DWORD)v122)
            {
              v80 = HIDWORD(v122) + ((unint64_t)HIDWORD(v122) >> 2);
              if (v80 >= 0x10)
                v81 = v80 + 1;
              else
                v81 = 16;
              if (v81 <= (unint64_t)HIDWORD(v122) + 1)
                v81 = HIDWORD(v122) + 1;
              __src = v121;
              if (v81 < 5)
              {
                v121 = (WTF::StringImpl *)v123;
                LODWORD(v122) = 4;
                v82 = (WTF::StringImpl *)v123;
              }
              else
              {
                if (v81 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196667158);
                }
                v118 = v81;
                v82 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v81));
                LODWORD(v122) = v118;
                v121 = v82;
              }
              memcpy(v82, __src, 8 * v79);
              if (v123 != (_BYTE *)__src && __src)
              {
                if (v121 == __src)
                {
                  v121 = 0;
                  LODWORD(v122) = 0;
                }
                WTF::fastFree(__src, a2);
              }
              LODWORD(v79) = HIDWORD(v122);
              v83 = (uint64_t *)((char *)v121 + 8 * HIDWORD(v122));
            }
            else
            {
              v83 = (uint64_t *)((char *)v121 + 8 * HIDWORD(v122));
            }
            *v83 = v77;
            HIDWORD(v122) = v79 + 1;
          }
          else
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v76, (WTF::StringImpl *)a2);
          }
LABEL_129:
          if (v31)
          {
            if (*(_DWORD *)(v31 + 24) == 2)
            {
              if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v31, a2);
            }
            else
            {
              *(_DWORD *)(v31 + 24) -= 2;
            }
          }
          goto LABEL_132;
        }
      }
      else
      {
        v34 = v32 + 32;
        v35 = v33 >> 5;
        if (!(v33 >> 5))
          goto LABEL_124;
      }
      v73 = (_DWORD **)(v34 + 8);
      while (1)
      {
        v74 = (uint64_t)*(v73 - 1);
        if (v74 == WebCore::SVGNames::nameAttr
          || *(_QWORD *)(v74 + 24) == *(_QWORD *)(WebCore::SVGNames::nameAttr + 24)
          && *(_QWORD *)(v74 + 32) == *(_QWORD *)(WebCore::SVGNames::nameAttr + 32))
        {
          goto LABEL_125;
        }
        v73 += 2;
        if (!--v35)
          goto LABEL_124;
      }
    }
    v128[0] = 0;
    v128[1] = 0;
    WTF::URL::invalidate((WTF::URL *)&v128[1]);
    v42 = *(WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)v25, (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr, v36, v37, v38);
    if (v42
      || (v42 = *(WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)v25, (const WebCore::QualifiedName *)&WebCore::XLinkNames::hrefAttr, v40, v41, v43)) != 0)
    {
      *(_DWORD *)v42 += 2;
    }
    v44 = v128[0];
    v128[0] = v42;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
      v42 = v128[0];
    }
    if (v42)
    {
      WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v25 + 40) + 8), v128, *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8) + 848, 0, (WTF::URL *)v127);
      v46 = *(WTF::StringImpl **)v127;
      *(_QWORD *)v127 = 0;
      v47 = v128[1];
      v128[1] = v46;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::destroy(v47, v45);
          v48 = *(WTF::StringImpl **)v127;
        }
        else
        {
          v48 = 0;
          *(_DWORD *)v47 -= 2;
        }
      }
      else
      {
        v48 = 0;
      }
      v49 = *(_OWORD *)&v127[8];
      *(_DWORD *)&v127[8] &= ~1u;
      v129 = v49;
      v130 = *(_OWORD *)&v127[24];
      *(_QWORD *)v127 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v45);
        else
          *(_DWORD *)v48 -= 2;
      }
    }
    v50 = *(_QWORD *)(v25 + 104);
    if (!v50)
      goto LABEL_76;
    v51 = *(unsigned int *)(v50 + 4);
    if ((v51 & 1) != 0)
    {
      v52 = *(_QWORD *)(v50 + 40);
      v53 = *(unsigned int *)(v50 + 52);
      if (!v53)
      {
LABEL_76:
        v54 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_77:
        v56 = *(_OWORD *)v128;
        v128[0] = 0;
        v128[1] = 0;
        *(_OWORD *)v127 = v56;
        *(_OWORD *)&v127[16] = v129;
        *(_OWORD *)&v127[32] = v130;
        LODWORD(v129) = v129 & 0xFFFFFFFE;
        v57 = *v54;
        if (v57 && *((_DWORD *)v57 + 1))
        {
          *(_DWORD *)v57 += 2;
          v126 = v57;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
        v124 = (WTF *)WTF::fastMalloc((WTF *)1);
        *(_BYTE *)v124 = 4;
        v125 = 0x100000001;
        WebCore::CSSFontFaceSrcResourceValue::create((uint64_t *)v127, (uint64_t *)&v126, (uint64_t *)&v124, 0, &v120);
        v58 = v124;
        if (v124)
        {
          v124 = 0;
          LODWORD(v125) = 0;
          WTF::fastFree(v58, a2);
        }
        v59 = v126;
        v126 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v59 -= 2;
        }
        v60 = *(WTF::StringImpl **)&v127[8];
        *(_QWORD *)&v127[8] = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = *(WTF::StringImpl **)v127;
        *(_QWORD *)v127 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = v128[1];
        v128[1] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v62 -= 2;
        }
        v63 = v128[0];
        v128[0] = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v63 -= 2;
        }
        v64 = (_DWORD *)v120;
        v65 = *(_QWORD *)(v120 + 8);
        if (v65 && *(_DWORD *)(v65 + 4))
        {
          v66 = HIDWORD(v122);
          if (HIDWORD(v122) == (_DWORD)v122)
          {
            v67 = HIDWORD(v122) + ((unint64_t)HIDWORD(v122) >> 2);
            if (v67 >= 0x10)
              v68 = v67 + 1;
            else
              v68 = 16;
            if (v68 <= (unint64_t)HIDWORD(v122) + 1)
              v69 = HIDWORD(v122) + 1;
            else
              v69 = v68;
            v70 = v121;
            if (v69 < 5)
            {
              v121 = (WTF::StringImpl *)v123;
              LODWORD(v122) = 4;
              v71 = (WTF::StringImpl *)v123;
            }
            else
            {
              if (v69 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x196667150);
              }
              v71 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v69));
              LODWORD(v122) = v69;
              v121 = v71;
            }
            memcpy(v71, v70, 8 * v66);
            if (v123 != (_BYTE *)v70 && v70)
            {
              if (v121 == v70)
              {
                v121 = 0;
                LODWORD(v122) = 0;
              }
              WTF::fastFree(v70, a2);
            }
            LODWORD(v66) = HIDWORD(v122);
            v72 = v120;
            v120 = 0;
            *((_QWORD *)v121 + HIDWORD(v122)) = v72;
          }
          else
          {
            v120 = 0;
            *((_QWORD *)v121 + HIDWORD(v122)) = v64;
          }
          HIDWORD(v122) = v66 + 1;
          v64 = (_DWORD *)v120;
          v120 = 0;
          if (!v64)
            goto LABEL_132;
        }
        else
        {
          v120 = 0;
        }
        if (*v64 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)a2);
        else
          *v64 -= 2;
LABEL_132:
        if (v29)
        {
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        while (1)
        {
          v25 = *(_QWORD *)(v25 + 56);
          if (!v25)
            break;
          if ((*(_WORD *)(v25 + 28) & 0x20) != 0)
            goto LABEL_34;
        }
        v84 = v121;
        v128[0] = (WTF::StringImpl *)&v129;
        v128[1] = (WTF::StringImpl *)4;
        v26 = HIDWORD(v122);
        if (v121 != (WTF::StringImpl *)v123)
        {
          v121 = (WTF::StringImpl *)v123;
          v128[0] = v84;
          v117 = v122;
          LODWORD(v122) = 4;
          LODWORD(v128[1]) = v117;
          goto LABEL_180;
        }
LABEL_179:
        memcpy(&v129, v123, 8 * v26);
LABEL_180:
        HIDWORD(v122) = 0;
        HIDWORD(v128[1]) = v26;
        WebCore::CSSValueList::createCommaSeparated((uint64_t)v128, (uint64_t *)v127);
        if (HIDWORD(v128[1]))
        {
          v85 = v128[0];
          v86 = 8 * HIDWORD(v128[1]);
          do
          {
            v87 = *(_DWORD **)v85;
            *(_QWORD *)v85 = 0;
            if (v87)
            {
              if (*v87 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v87, (WTF::StringImpl *)a2);
              else
                *v87 -= 2;
            }
            v85 = (WTF::StringImpl *)((char *)v85 + 8);
            v86 -= 8;
          }
          while (v86);
        }
        v88 = v128[0];
        if (&v129 != (__int128 *)v128[0] && v128[0] != 0)
        {
          v128[0] = 0;
          LODWORD(v128[1]) = 0;
          WTF::fastFree(v88, a2);
        }
        if (HIDWORD(v122))
        {
          v90 = v121;
          v91 = 8 * HIDWORD(v122);
          do
          {
            v92 = *(_DWORD **)v90;
            *(_QWORD *)v90 = 0;
            if (v92)
            {
              if (*v92 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v92, (WTF::StringImpl *)a2);
              else
                *v92 -= 2;
            }
            v90 = (WTF::StringImpl *)((char *)v90 + 8);
            v91 -= 8;
          }
          while (v91);
        }
        v93 = v121;
        if (v123 != (_BYTE *)v121 && v121 != 0)
        {
          v121 = 0;
          LODWORD(v122) = 0;
          WTF::fastFree(v93, a2);
        }
        v21 = *(_QWORD *)v127;
        if (!*(_QWORD *)v127)
          goto LABEL_250;
        v24 = 1;
LABEL_206:
        if (!*(_DWORD *)(v21 + 8))
        {
LABEL_248:
          if (*(_DWORD *)v21 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v21, (WTF::StringImpl *)a2);
            if ((v7 & 1) != 0)
              return;
            goto LABEL_251;
          }
          *(_DWORD *)v21 -= 2;
LABEL_250:
          if ((v7 & 1) != 0)
            return;
LABEL_251:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          return;
        }
        v95 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)this + 22);
        ++*(_DWORD *)v95;
        v96 = WebCore::StyleRuleKeyframe::mutableProperties(v95);
        *(_DWORD *)v21 += 2;
        LOWORD(v128[0]) = 231;
        v128[1] = (WTF::StringImpl *)v21;
        WebCore::MutableStyleProperties::addParsedProperty(v96, (unint64_t)v128, v97);
        v99 = v128[1];
        v128[1] = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99, v98);
          else
            *(_DWORD *)v99 -= 2;
        }
        if (*(_DWORD *)v95 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v95, v98);
          if ((v24 & 1) == 0)
          {
LABEL_213:
            WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(*((_QWORD *)this + 22) + 8), 231, v128);
            v100 = v128[0];
            if (v128[0])
            {
              if (((*((unsigned __int16 *)v128[0] + 2) | (*((unsigned __int8 *)v128[0] + 6) << 16)) & 0x3F800) != 0x1D800)
              {
                __break(0xC471u);
                JUMPOUT(0x1966670F8);
              }
              v101 = *(_DWORD *)v128[0];
              *(_DWORD *)v128[0] += 2;
              if (v101)
                *(_DWORD *)v100 = v101;
              else
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v100, v98);
              v102 = *((_DWORD *)v100 + 2);
              if (v102)
              {
                v103 = 0;
                v104 = 0;
                do
                {
                  if (v103 > 3)
                  {
                    if (*((_DWORD *)v100 + 2) <= v103)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196667148);
                    }
                    v105 = (_DWORD **)(*((_QWORD *)v100 + 6) + 8 * (v104 - 4));
                  }
                  else
                  {
                    v105 = (_DWORD **)((char *)v100 + 8 * v104 + 16);
                  }
                  v106 = *v105;
                  *v106 = **v105 + 2;
                  if (((*((unsigned __int16 *)v106 + 2) | (*((unsigned __int8 *)v106 + 6) << 16)) & 0x3F800) != 0x10000)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196667098);
                  }
                  v107 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
                  if (v107)
                  {
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 + 1, v107));
                  }
                  v109 = *((_QWORD *)v106 + 2);
                  *((_QWORD *)v106 + 2) = v107;
                  if (v109)
                  {
                    do
                    {
                      v110 = __ldaxr((unsigned int *)v109);
                      v111 = v110 - 1;
                    }
                    while (__stlxr(v111, (unsigned int *)v109));
                    if (!v111)
                    {
                      atomic_store(1u, (unsigned int *)v109);
                      v112 = *(unsigned int *)(v109 + 28);
                      if ((_DWORD)v112)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v109 + 16), (WTF::StringImpl *)(*(_QWORD *)(v109 + 16) + 32 * v112));
                      v113 = *(WTF **)(v109 + 16);
                      if (v113)
                      {
                        *(_QWORD *)(v109 + 16) = 0;
                        *(_DWORD *)(v109 + 24) = 0;
                        WTF::fastFree(v113, v98);
                      }
                      WTF::fastFree((WTF *)v109, v98);
                    }
                  }
                  if (*v106 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v106, v98);
                  else
                    *v106 -= 2;
                  v103 = v104 + 1;
                  v104 = (v104 + 1);
                }
                while (v102 != v103);
              }
              if (*(_DWORD *)v100 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v100, v98);
              else
                *(_DWORD *)v100 -= 2;
            }
          }
        }
        else
        {
          --*(_DWORD *)v95;
          if ((v24 & 1) == 0)
            goto LABEL_213;
        }
        v114 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
        *(_DWORD *)(v114 + 24) += 2;
        WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(v114 + 1328), v98);
        if (*(_DWORD *)(v114 + 24) == 2)
        {
          if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v114, a2);
        }
        else
        {
          *(_DWORD *)(v114 + 24) -= 2;
        }
        goto LABEL_248;
      }
    }
    else
    {
      v52 = v50 + 32;
      v53 = v51 >> 5;
      if (!(v51 >> 5))
        goto LABEL_76;
    }
    v54 = (WTF::StringImpl **)(v52 + 8);
    while (1)
    {
      v55 = (uint64_t)*(v54 - 1);
      if (v55 == WebCore::SVGNames::formatAttr
        || *(_QWORD *)(v55 + 24) == *(_QWORD *)(WebCore::SVGNames::formatAttr + 24)
        && *(_QWORD *)(v55 + 32) == *(_QWORD *)(WebCore::SVGNames::formatAttr + 32))
      {
        goto LABEL_77;
      }
      v54 += 2;
      if (!--v53)
        goto LABEL_76;
    }
  }
}

float WebCore::SVGFontFaceElement::horizontalOriginX(WebCore::SVGFontFaceElement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  float v10;

  v1 = *((_QWORD *)this + 23);
  v2 = 0.0;
  if (!v1)
    return v2;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return v2;
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (WTF::String *)(v6 + 8);
        while (1)
        {
          v9 = *((_QWORD *)v8 - 1);
          if (v9 == WebCore::SVGNames::horiz_origin_xAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::SVGNames::horiz_origin_xAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::SVGNames::horiz_origin_xAttr + 32))
          {
            goto LABEL_15;
          }
          v8 = (WTF::String *)((char *)v8 + 16);
          if (!--v7)
          {
            v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  WTF::String::toFloat(v8, 0);
  v2 = v10;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v2;
}

float WebCore::SVGFontFaceElement::horizontalOriginY(WebCore::SVGFontFaceElement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  float v10;

  v1 = *((_QWORD *)this + 23);
  v2 = 0.0;
  if (!v1)
    return v2;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return v2;
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (WTF::String *)(v6 + 8);
        while (1)
        {
          v9 = *((_QWORD *)v8 - 1);
          if (v9 == WebCore::SVGNames::horiz_origin_yAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::SVGNames::horiz_origin_yAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::SVGNames::horiz_origin_yAttr + 32))
          {
            goto LABEL_15;
          }
          v8 = (WTF::String *)((char *)v8 + 16);
          if (!--v7)
          {
            v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  WTF::String::toFloat(v8, 0);
  v2 = v10;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v2;
}

float WebCore::SVGFontFaceElement::horizontalAdvanceX(WebCore::SVGFontFaceElement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  float v10;

  v1 = *((_QWORD *)this + 23);
  v2 = 0.0;
  if (!v1)
    return v2;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return v2;
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (WTF::String *)(v6 + 8);
        while (1)
        {
          v9 = *((_QWORD *)v8 - 1);
          if (v9 == WebCore::SVGNames::horiz_adv_xAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::SVGNames::horiz_adv_xAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::SVGNames::horiz_adv_xAttr + 32))
          {
            goto LABEL_15;
          }
          v8 = (WTF::String *)((char *)v8 + 16);
          if (!--v7)
          {
            v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  WTF::String::toFloat(v8, 0);
  v2 = v10;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v2;
}

WebCore::SVGFontFaceElement *WebCore::SVGFontFaceElement::ascent(WebCore::SVGFontFaceElement *this)
{
  WebCore::SVGFontFaceElement *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::String *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::String *v26;
  uint64_t v27;
  float v29;
  unsigned int v30;
  int v31;
  float v32;
  float v33;
  unsigned int v34;

  v1 = this;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if (v3 >> 5)
      goto LABEL_4;
LABEL_12:
    v6 = (WTF::String *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (WTF::String *)(v4 + 8);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 1);
    if (v7 == WebCore::SVGNames::ascentAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::SVGNames::ascentAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::SVGNames::ascentAttr + 32))
    {
      break;
    }
    v6 = (WTF::String *)((char *)v6 + 16);
    if (!--v5)
    {
      v6 = (WTF::String *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (*(_QWORD *)v6 && *(_DWORD *)(*(_QWORD *)v6 + 4))
  {
    WTF::String::toFloat(v6, 0);
LABEL_58:
    LODWORD(v1) = vcvtps_s32_f32(v17);
    return v1;
  }
  v8 = *((_QWORD *)v1 + 23);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
LABEL_33:
    if (v2)
    {
      v18 = *(_DWORD *)(v2 + 4);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v2 + 40);
        LODWORD(v20) = *(_DWORD *)(v2 + 52);
        if ((_DWORD)v20)
        {
LABEL_36:
          v20 = v20;
          v21 = (WTF::String *)(v19 + 8);
          while (1)
          {
            v22 = *((_QWORD *)v21 - 1);
            if (v22 == WebCore::SVGNames::units_per_emAttr
              || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 24)
              && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 32))
            {
              goto LABEL_56;
            }
            v21 = (WTF::String *)((char *)v21 + 16);
            if (!--v20)
            {
              v21 = (WTF::String *)MEMORY[0x1E0CBF2F8];
              goto LABEL_56;
            }
          }
        }
      }
      else
      {
        v19 = v2 + 32;
        LODWORD(v20) = v18 >> 5;
        if ((_DWORD)v20)
          goto LABEL_36;
      }
    }
    v21 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_56:
    if (*(_QWORD *)v21 && *(_DWORD *)(*(_QWORD *)v21 + 4))
    {
      WTF::String::toFloat(v21, 0);
      v30 = vcvtps_u32_f32(v29);
      if (!v30)
        v30 = 1000;
      v17 = (float)v30 * 0.8;
    }
    else
    {
      v17 = 800.0;
    }
    goto LABEL_58;
  }
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 2;
  v11 = *(_QWORD *)(v9 + 104);
  if (!v11)
    goto LABEL_29;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v11 + 32;
    LODWORD(v14) = v12 >> 5;
    if ((_DWORD)v14)
      goto LABEL_19;
LABEL_29:
    v15 = (WTF::String *)MEMORY[0x1E0CBF2F8];
    goto LABEL_30;
  }
  v13 = *(_QWORD *)(v11 + 40);
  LODWORD(v14) = *(_DWORD *)(v11 + 52);
  if (!(_DWORD)v14)
    goto LABEL_29;
LABEL_19:
  v14 = v14;
  v15 = (WTF::String *)(v13 + 8);
  while (1)
  {
    v16 = *((_QWORD *)v15 - 1);
    if (v16 == WebCore::SVGNames::vert_origin_yAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::SVGNames::vert_origin_yAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::SVGNames::vert_origin_yAttr + 32))
    {
      break;
    }
    v15 = (WTF::String *)((char *)v15 + 16);
    if (!--v14)
    {
      v15 = (WTF::String *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_30:
  if (!*(_QWORD *)v15 || !*(_DWORD *)(*(_QWORD *)v15 + 4))
  {
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
      v2 = *((_QWORD *)v1 + 13);
    }
    goto LABEL_33;
  }
  if (v2)
  {
    v23 = *(_DWORD *)(v2 + 4);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(v2 + 40);
      LODWORD(v25) = *(_DWORD *)(v2 + 52);
      if ((_DWORD)v25)
      {
LABEL_47:
        v25 = v25;
        v26 = (WTF::String *)(v24 + 8);
        while (1)
        {
          v27 = *((_QWORD *)v26 - 1);
          if (v27 == WebCore::SVGNames::units_per_emAttr
            || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 24)
            && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 32))
          {
            goto LABEL_66;
          }
          v26 = (WTF::String *)((char *)v26 + 16);
          if (!--v25)
          {
            v26 = (WTF::String *)MEMORY[0x1E0CBF2F8];
            goto LABEL_66;
          }
        }
      }
    }
    else
    {
      v24 = v2 + 32;
      LODWORD(v25) = v23 >> 5;
      if ((_DWORD)v25)
        goto LABEL_47;
    }
  }
  v26 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_66:
  if (*(_QWORD *)v26)
  {
    v31 = 1000;
    if (*(_DWORD *)(*(_QWORD *)v26 + 4))
    {
      WTF::String::toFloat(v26, 0);
      v34 = vcvtps_u32_f32(v33);
      if (v34)
        v31 = v34;
      else
        v31 = 1000;
    }
  }
  else
  {
    v31 = 1000;
  }
  WTF::String::toFloat(v15, 0);
  v1 = (WebCore::SVGFontFaceElement *)(v31 - vcvtps_s32_f32(v32));
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  return v1;
}

float WebCore::SVGFontFaceElement::verticalAdvanceY(WebCore::SVGFontFaceElement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::String *v9;
  uint64_t v10;
  float v12;

  v1 = *((_QWORD *)this + 23);
  v2 = 0.0;
  if (!v1)
    return v2;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return v2;
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  v5 = *(_QWORD *)(v3 + 104);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_6:
        v8 = v8;
        v9 = (WTF::String *)(v7 + 8);
        while (1)
        {
          v10 = *((_QWORD *)v9 - 1);
          if (v10 == WebCore::SVGNames::vert_adv_yAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::SVGNames::vert_adv_yAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::SVGNames::vert_adv_yAttr + 32))
          {
            goto LABEL_15;
          }
          v9 = (WTF::String *)((char *)v9 + 16);
          if (!--v8)
          {
            v9 = (WTF::String *)MEMORY[0x1E0CBF2F8];
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_6;
    }
  }
  v9 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_15:
  v2 = 1.0;
  if (*(_QWORD *)v9 && *(_DWORD *)(*(_QWORD *)v9 + 4))
  {
    WTF::String::toFloat(v9, 0);
    v2 = v12;
    v4 = *(_DWORD *)(v3 + 24) - 2;
  }
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return v2;
}

WebCore::SVGFontFaceElement *WebCore::SVGFontFaceElement::descent(WebCore::SVGFontFaceElement *this)
{
  WebCore::SVGFontFaceElement *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  uint64_t v16;
  float v17;
  int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::String *v23;
  uint64_t v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;

  v1 = this;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if (v3 >> 5)
      goto LABEL_4;
LABEL_12:
    v6 = (WTF::String *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (WTF::String *)(v4 + 8);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 1);
    if (v7 == WebCore::SVGNames::descentAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::SVGNames::descentAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::SVGNames::descentAttr + 32))
    {
      break;
    }
    v6 = (WTF::String *)((char *)v6 + 16);
    if (!--v5)
    {
      v6 = (WTF::String *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (!*(_QWORD *)v6 || !*(_DWORD *)(*(_QWORD *)v6 + 4))
  {
    v8 = *((_QWORD *)v1 + 23);
    if (!v8)
      goto LABEL_35;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_35;
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    v11 = *(_QWORD *)(v9 + 104);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 4);
      if ((v12 & 1) != 0)
      {
        v13 = *(_QWORD *)(v11 + 40);
        LODWORD(v14) = *(_DWORD *)(v11 + 52);
        if ((_DWORD)v14)
        {
LABEL_19:
          v14 = v14;
          v15 = (WTF::String *)(v13 + 8);
          while (1)
          {
            v16 = *((_QWORD *)v15 - 1);
            if (v16 == WebCore::SVGNames::vert_origin_yAttr
              || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::SVGNames::vert_origin_yAttr + 24)
              && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::SVGNames::vert_origin_yAttr + 32))
            {
              goto LABEL_32;
            }
            v15 = (WTF::String *)((char *)v15 + 16);
            if (!--v14)
            {
              v15 = (WTF::String *)MEMORY[0x1E0CBF2F8];
              goto LABEL_32;
            }
          }
        }
      }
      else
      {
        v13 = v11 + 32;
        LODWORD(v14) = v12 >> 5;
        if ((_DWORD)v14)
          goto LABEL_19;
      }
    }
    v15 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_32:
    if (*(_QWORD *)v15 && *(_DWORD *)(*(_QWORD *)v15 + 4))
    {
      WTF::String::toFloat(v15, 0);
      LODWORD(v1) = vcvtps_s32_f32(v28);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      return v1;
    }
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
      v2 = *((_QWORD *)v1 + 13);
    }
LABEL_35:
    if (v2)
    {
      v20 = *(_DWORD *)(v2 + 4);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(v2 + 40);
        LODWORD(v22) = *(_DWORD *)(v2 + 52);
        if ((_DWORD)v22)
        {
LABEL_38:
          v22 = v22;
          v23 = (WTF::String *)(v21 + 8);
          while (1)
          {
            v24 = *((_QWORD *)v23 - 1);
            if (v24 == WebCore::SVGNames::units_per_emAttr
              || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 24)
              && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::SVGNames::units_per_emAttr + 32))
            {
              goto LABEL_47;
            }
            v23 = (WTF::String *)((char *)v23 + 16);
            if (!--v22)
            {
              v23 = (WTF::String *)MEMORY[0x1E0CBF2F8];
              goto LABEL_47;
            }
          }
        }
      }
      else
      {
        v21 = v2 + 32;
        LODWORD(v22) = v20 >> 5;
        if ((_DWORD)v22)
          goto LABEL_38;
      }
    }
    v23 = (WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_47:
    if (*(_QWORD *)v23 && *(_DWORD *)(*(_QWORD *)v23 + 4))
    {
      WTF::String::toFloat(v23, 0);
      v27 = vcvtps_u32_f32(v26);
      if (!v27)
        v27 = 1000;
      v25 = (float)v27 * 0.2;
    }
    else
    {
      v25 = 200.0;
    }
    LODWORD(v1) = vcvtps_s32_f32(v25);
    return v1;
  }
  WTF::String::toFloat(v6, 0);
  v18 = vcvtps_s32_f32(v17);
  if (v18 >= 0)
    return (WebCore::SVGFontFaceElement *)v18;
  else
    return (WebCore::SVGFontFaceElement *)-v18;
}

uint64_t WebCore::SVGFontFaceElement::insertedIntoAncestor(WebCore::SVGFontFaceElement *a1, unsigned __int16 a2, WebCore::SVGElement *a3)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  char v14[24];

  v3 = a2;
  v5 = WebCore::SVGElement::insertedIntoAncestor((uint64_t)a1, a2, a3);
  if ((v3 & 1) == 0)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = WebCore::Document::svgExtensions((WebCore::Document *)v7);
  WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v8 + 32, (uint64_t)a1, (uint64_t)v14);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  WebCore::SVGFontFaceElement::rebuildFontFace(a1, v9, v10, v11, v12);
  return v6;
}

void WebCore::SVGFontFaceElement::removedFromAncestor(_QWORD *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::StyleRuleKeyframe *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WebCore::StyleRuleKeyframe *v28;
  int v29;
  const WebCore::CSSFontFace *v30;
  WebCore::MutableStyleProperties *v31;
  void *v32;
  WebCore::Style::Scope *v33;
  void *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  char v44;

  v5 = a2;
  WebCore::SVGElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
  {
    v8 = a1[23];
    a1[23] = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v41 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v41)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v41));
        v42 = *(WTF **)(v8 + 16);
        if (v42)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v42, v7);
        }
        WTF::fastFree((WTF *)v8, v7);
      }
    }
    v11 = *(_QWORD *)(a1[5] + 8);
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::checkedSVGExtensions((WebCore::Document *)v11, &v43);
    v12 = v43;
    v13 = (uint64_t *)(v43 + 32);
    v14 = *(_DWORD *)(v43 + 44);
    v15 = *(_DWORD *)(v43 + 40) + 1;
    *(_DWORD *)(v43 + 40) = v15;
    if (v15 > v14)
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(v13, &v44);
      v16 = 0;
      *(_DWORD *)(v12 + 40) = 0;
      v17 = *(_QWORD *)(v12 + 32);
      if (v17)
      {
        v16 = *(_DWORD *)(v17 - 12);
        if (v16 > 0x7FFFFFFE)
          v16 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v12 + 44) = 2 * v16;
    }
    v18 = (WTF *)(a1[2] & 0xFFFFFFFFFFFFLL);
    if (v18 && *(_QWORD *)((a1[2] & 0xFFFFFFFFFFFFLL) + 8))
      WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(v13, v18);
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x196667F34);
    }
    --*(_DWORD *)v12;
    v19 = *(_QWORD *)(v11 + 2648);
    if (!v19)
      v19 = WebCore::Document::ensureFontSelector((WebCore::Document *)v11);
    v20 = *(_QWORD *)(v19 + 96);
    ++*(_DWORD *)(v20 + 16);
    v21 = (WebCore::StyleRuleKeyframe *)a1[22];
    ++*(_DWORD *)v21;
    v22 = *(_QWORD *)(v20 + 64);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v24 = ((unint64_t)v21 + ~((_QWORD)v21 << 32)) ^ (((unint64_t)v21 + ~((_QWORD)v21 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(WebCore::StyleRuleKeyframe **)(v22 + 16 * v27);
      if (v28 == v21)
      {
LABEL_19:
        v30 = *(const WebCore::CSSFontFace **)(v22 + 16 * v27 + 8);
        if (v30)
        {
          ++*((_DWORD *)v30 + 2);
          WebCore::CSSFontFaceSet::remove((WebCore::CSSFontFaceSet *)v20, v30);
          if (*((_DWORD *)v30 + 2) == 1)
          {
            WebCore::CSSFontFace::~CSSFontFace(v30);
            WTF::fastFree(v39, v40);
          }
          else
          {
            --*((_DWORD *)v30 + 2);
          }
        }
      }
      else
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(WebCore::StyleRuleKeyframe **)(v22 + 16 * v27);
          ++v29;
          if (v28 == v21)
            goto LABEL_19;
        }
      }
    }
    v31 = WebCore::StyleRuleKeyframe::mutableProperties(v21);
    WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)v31 + 16), v32);
    v33 = *(WebCore::Style::Scope **)(v11 + 1328);
    ++*((_DWORD *)v33 + 2);
    WebCore::Style::Scope::didChangeStyleSheetEnvironment(v33, v34);
    v36 = *((_DWORD *)v33 + 2);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x196667F78);
    }
    *((_DWORD *)v33 + 2) = v36 - 1;
    if (*(_DWORD *)v21 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v35);
    else
      --*(_DWORD *)v21;
    if (*(_DWORD *)(v20 + 16) == 1)
    {
      WebCore::CSSFontFaceSet::~CSSFontFaceSet((WebCore::CSSFontFaceSet *)v20, v35);
      WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)(v20 + 16);
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v35);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
}

void WebCore::SVGFontFaceElement::childrenChanged(WebCore::SVGFontFaceElement *a1, unsigned __int8 *a2)
{
  void *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v8 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v8)
    goto LABEL_2;
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  v10 = *a2;
  if ((v10 - 2) < 3)
  {
    v11 = *(_QWORD **)(v8 + 224);
    if (!v11)
      goto LABEL_11;
    v12 = 14;
    goto LABEL_18;
  }
  if (v10 == 8 || v10 == 5)
  {
    v11 = *(_QWORD **)(v8 + 224);
    if (v11)
    {
      v12 = 13;
LABEL_18:
      v13 = v8;
      (*(void (**)(void))(*v11 + 8 * v12))();
      v8 = v13;
      v9 = *(_DWORD *)(v13 + 24) - 2;
    }
  }
LABEL_11:
  if (v9)
  {
    *(_DWORD *)(v8 + 24) = v9;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
  }
LABEL_2:
  if (a2[32])
    WebCore::SVGElement::invalidateInstances(a1, v4);
  WebCore::SVGFontFaceElement::rebuildFontFace(a1, v4, v5, v6, v7);
}

uint64_t WebCore::SVGFontFaceFormatElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3465DA0;
  v6[14] = &unk_1E34662D0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3465DA0;
  v6[14] = &unk_1E34662D0;
  *a3 = v6;
  return result;
}

void WebCore::SVGFontFaceFormatElement::childrenChanged(_QWORD *a1, unsigned __int8 *a2)
{
  void *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((a1[9] & 0xFFFFFFFFFFFFLL) != 0)
  {
    v12 = *(_QWORD *)((a1[9] & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 24) = v13 + 2;
      v14 = *a2;
      if ((v14 - 2) < 3)
      {
        v15 = *(_QWORD **)(v12 + 224);
        if (!v15)
          goto LABEL_29;
        v16 = 14;
      }
      else
      {
        if (v14 != 8 && v14 != 5 || (v15 = *(_QWORD **)(v12 + 224)) == 0)
        {
LABEL_29:
          if (v13)
          {
            *(_DWORD *)(v12 + 24) = v13;
          }
          else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v4);
          }
          goto LABEL_2;
        }
        v16 = 13;
      }
      v18 = v12;
      (*(void (**)(void))(*v15 + 8 * v16))();
      v12 = v18;
      v13 = *(_DWORD *)(v18 + 24) - 2;
      goto LABEL_29;
    }
  }
LABEL_2:
  if (a2[32])
    WebCore::SVGElement::invalidateInstances(a1, v4);
  v8 = a1[4];
  if (v8)
  {
    if ((*(_WORD *)(v8 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::font_face_uriTag + 24))
    {
      v9 = *(_QWORD *)(v8 + 32);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 24);
        *(_DWORD *)(v9 + 24) = v10 + 2;
        if ((*(_WORD *)(v9 + 28) & 0x20) == 0
          || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::font_face_srcTag + 24))
        {
          v11 = v9;
          goto LABEL_25;
        }
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          *(_DWORD *)(v11 + 24) += 2;
          v10 = *(_DWORD *)(v9 + 24) - 2;
        }
        if (v10)
        {
          *(_DWORD *)(v9 + 24) = v10;
        }
        else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
        }
        if (v11)
        {
          v17 = *(_DWORD *)(v11 + 24);
          *(_DWORD *)(v11 + 24) = v17 + 2;
          if ((*(_WORD *)(v11 + 28) & 0x20) != 0
            && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::font_faceTag + 24))
          {
            WebCore::SVGFontFaceElement::rebuildFontFace((WebCore::SVGFontFaceElement *)v11, v4, v5, v6, v7);
            v17 = *(_DWORD *)(v11 + 24) - 2;
            if (*(_DWORD *)(v11 + 24) != 2)
              goto LABEL_24;
          }
          else if (v17)
          {
LABEL_24:
            *(_DWORD *)(v11 + 24) = v17;
LABEL_25:
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11, v4);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            return;
          }
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, v4);
          goto LABEL_25;
        }
      }
    }
  }
}

uint64_t WebCore::SVGFontFaceNameElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E34673F8;
  v6[14] = &unk_1E3467928;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E34673F8;
  v6[14] = &unk_1E3467928;
  *a3 = v6;
  return result;
}

uint64_t WebCore::SVGFontFaceSrcElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3466308;
  v6[14] = &unk_1E3466838;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3466308;
  v6[14] = &unk_1E3466838;
  *a3 = v6;
  return result;
}

void WebCore::SVGFontFaceSrcElement::childrenChanged(_QWORD *a1, unsigned __int8 *a2)
{
  void *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((a1[9] & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v10 = *(_QWORD *)((a1[9] & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v10)
    goto LABEL_2;
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  v12 = *a2;
  if ((v12 - 2) < 3)
  {
    v13 = *(_QWORD **)(v10 + 224);
    if (!v13)
      goto LABEL_16;
    v14 = 14;
    goto LABEL_25;
  }
  if (v12 == 8 || v12 == 5)
  {
    v13 = *(_QWORD **)(v10 + 224);
    if (v13)
    {
      v14 = 13;
LABEL_25:
      v15 = v10;
      (*(void (**)(void))(*v13 + 8 * v14))();
      v10 = v15;
      v11 = *(_DWORD *)(v15 + 24) - 2;
    }
  }
LABEL_16:
  if (v11)
  {
    *(_DWORD *)(v10 + 24) = v11;
  }
  else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v10, v4);
  }
LABEL_2:
  if (a2[32])
    WebCore::SVGElement::invalidateInstances(a1, v4);
  v8 = a1[4];
  if (v8
    && (*(_WORD *)(v8 + 28) & 0x20) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::font_faceTag + 24))
  {
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::SVGFontFaceElement::rebuildFontFace((WebCore::SVGFontFaceElement *)v8, v4, v5, v6, v7);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

uint64_t WebCore::SVGFontFaceUriElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3466870;
  v6[14] = &unk_1E3466DA0;
  v6[22] = &unk_1E3466DD8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3466870;
  v6[14] = &unk_1E3466DA0;
  v6[23] = 0;
  v6[24] = 0;
  v6[22] = &unk_1E3466DD8;
  *a3 = v6;
  return result;
}

void WebCore::SVGFontFaceUriElement::~SVGFontFaceUriElement(WebCore::SVGFontFaceUriElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;
  _BYTE v14[24];
  unsigned int **v15;

  v4 = (unsigned int **)((char *)this + 192);
  v3 = (unsigned int *)*((_QWORD *)this + 24);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v13 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (v6)
    {
      v15 = &v13;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v15, (uint64_t)v14), (v3 = v13) != 0))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v3 + 1);
        if (v8)
          WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 22);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v9);
  *((_QWORD *)this + 22) = &off_1E33F87C8;
  v11 = *((_QWORD *)this + 23);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (WTF *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
  }
  else
  {
    *((_QWORD *)this + 23) = 0;
  }
  WebCore::SVGElement::~SVGElement(this, v10);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGFontFaceUriElement::~SVGFontFaceUriElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

