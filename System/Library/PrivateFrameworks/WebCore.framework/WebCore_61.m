WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS(a1, a2);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HWBFunction>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LabFunction>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLabFunction>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::OKLCHFunction>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::serializationForCSS(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::CSSUnresolvedRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(WebCore::Document ***a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Style::colorFromValueID(**a1, (*a1)[1], *a2, *(_BYTE *)(*a1)[2], a3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = bswap32(*a1) | 0x1104000000000000;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t (**v4)();
  uint64_t (**v5)();
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  int64x2_t v30;
  uint64_t v31;
  int v32;
  int64x2_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;

  v8 = **a1;
  v9 = (*a1)[1];
  v10 = *(_BYTE *)(*a1)[2];
  v26 = *(_QWORD *)a2;
  v27 = *(_BYTE *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  LOBYTE(v37) = v10;
  v34 = (uint64_t **)v8;
  v35 = v9;
  v36 = &v37;
  v12 = *(unsigned int *)(v11 + 88);
  if ((_DWORD)v12 == -1)
    goto LABEL_19;
  v3 = &v28;
  v38 = (uint64_t *)&v34;
  v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix;
  ((void (*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v28, &v38);
  v4 = off_1E339AFE0;
  if (!*(_BYTE *)(a2 + 40))
  {
    v17 = 0uLL;
    goto LABEL_7;
  }
  v37 = 0;
  v38 = &v37;
  v13 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v13 == -1)
    goto LABEL_19;
  v34 = &v38;
  ((void (*)(uint64_t ***, uint64_t))off_1E339AFE0[v13])(&v34, a2 + 24);
  v16 = v37;
  if (v37)
    goto LABEL_20;
  while (1)
  {
    v17 = vdupq_n_s64(1uLL);
    v17.i64[0] = v15;
LABEL_7:
    v30 = v17;
    v18 = *(_QWORD *)(a2 + 48);
    LOBYTE(v37) = v10;
    v34 = (uint64_t **)v8;
    v35 = v9;
    v36 = &v37;
    v19 = *(unsigned int *)(v18 + 88);
    if ((_DWORD)v19 != -1)
    {
      v8 = &v31;
      v38 = (uint64_t *)&v34;
      ((void (*)(uint64_t *__return_ptr, uint64_t **))v5[v19])(&v31, &v38);
      if (!*(_BYTE *)(a2 + 72))
      {
        v23 = 0uLL;
        goto LABEL_14;
      }
      v37 = 0;
      v38 = &v37;
      v20 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v20 != -1)
        break;
    }
LABEL_19:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    v24 = v15;
    WTF::fastFree((WTF *)(v16 - 16), v14);
    v15 = v24;
  }
  v34 = &v38;
  ((void (*)(uint64_t ***, uint64_t))v4[v20])(&v34, a2 + 56);
  if (v37)
  {
    v25 = v22;
    WTF::fastFree((WTF *)(v37 - 16), v21);
    v22 = v25;
  }
  v23 = vdupq_n_s64(1uLL);
  v23.i64[0] = v22;
LABEL_14:
  v33 = v23;
  WebCore::StyleColor::resolveAbsoluteComponents<WebCore::StyleColorMix>(&v26, a3);
  if (v32 != -1)
    ((void (*)(uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v32])(&v34, &v31);
  v32 = -1;
  if (v29 != -1)
    ((void (*)(uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v29])(&v34, v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(WebCore::Document ***a1, uint64_t *a2)
{
  WebCore::Document *v3;
  const WebCore::RenderStyle *v4;
  char v5;
  _BOOL4 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _QWORD *v14;

  v3 = **a1;
  v4 = (*a1)[1];
  v5 = *(_BYTE *)(*a1)[2];
  v6 = WebCore::Document::useDarkAppearance(v3, v4);
  v7 = a2 + 1;
  if (!v6)
    v7 = a2;
  v8 = *v7;
  v12 = v5;
  v13[0] = v3;
  v13[1] = v4;
  v13[2] = &v12;
  v9 = *(unsigned int *)(v8 + 88);
  if ((_DWORD)v9 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v11);
  }
  else
  {
    v14 = v13;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v14);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::RGBFunctionModernRelative>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 3;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A6B0[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 4);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 6);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 8);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::HSLFunctionModern>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>,WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 4;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A2B0[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A6B0[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 4);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 6);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 8);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::HWBFunction>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>,WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 5;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A2B0[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::LabFunction>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 6;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[16];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A6B0[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 8);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::LCHFunction>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::LCHFunction>,WebCore::StyleRelativeColor<WebCore::LCHFunction>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 7;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A2B0[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::OKLabFunction>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 8;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[16];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A6B0[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 8);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::OKLCHFunction>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::LCHFunction>,WebCore::StyleRelativeColor<WebCore::LCHFunction>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 9;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A2B0[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 10;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 11;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 12;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 13;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 14;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 15;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    result = (uint64_t)WebCore::resolveAbsoluteComponents<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v13 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v13 = 16;
    }
    *(_DWORD *)(a3 + 8) = v13;
    if (v25)
    {
      if (v24 != -1)
        result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      return ((uint64_t (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createStyleColor(WebCore::Document const&,WebCore::RenderStyle &,WebCore::Style::ForVisitedLink)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(__int128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char *v28;
  __int128 *v29;

  v5 = **a1;
  v6 = *a2;
  v26 = **((_BYTE **)*a1 + 2);
  v27 = v5;
  v28 = &v26;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v13, v14);
  }
  else
  {
    v29 = &v27;
    ((void (*)(uint64_t *__return_ptr, __int128 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor16createStyleColorERKNS8_8DocumentERNS8_11RenderStyleENS8_5Style14ForVisitedLinkEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSQ_INS8_17HSLFunctionModernEEENSQ_INS8_11HWBFunctionEEENSQ_INS8_11LabFunctionEEENSQ_INS8_11LCHFunctionEEENSQ_INS8_13OKLabFunctionEEENSQ_INS8_13OKLCHFunctionEEENSQ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSQ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEENSQ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEENSQ_INS15_INS8_21ExtendedLinearEncodedIfS1N_EEEEEENSQ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSQ_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v15, &v29);
    v17[0] = 0;
    v18 = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v8])(&v27, v17, a2 + 1);
      v18 = v8;
    }
    v19[0] = 0;
    v20 = -1;
    v9 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v9])(&v27, v19, a2 + 3);
      v20 = v9;
    }
    v21[0] = 0;
    v22 = -1;
    v10 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v27, v21, a2 + 5);
      v22 = v10;
    }
    v23[0] = 0;
    v25 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v24 = -1;
      v11 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v27, v23, a2 + 7);
        v24 = v11;
      }
      v25 = 1;
    }
    WebCore::resolveAbsoluteComponents<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((unsigned int *)&v15, &v27);
    if (BYTE8(v27))
    {
      v12 = 0;
      *(_QWORD *)a3 = v27;
    }
    else
    {
      WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v15, (uint64_t *)a3);
      v12 = 17;
    }
    *(_DWORD *)(a3 + 8) = v12;
    if (v25)
    {
      if (v24 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E339A280[v24])(&v27, v23);
      v24 = -1;
    }
    if (v22 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E339A280[v22])(&v27, v21);
    v22 = -1;
    if (v20 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E339A280[v20])(&v27, v19);
    v20 = -1;
    if (v18 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E339A280[v18])(&v27, v17);
    v18 = -1;
    if (v16 != -1)
      ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v27, &v15);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  *a2 = *a1;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  __int128 v96;
  __int128 v97;

  v4 = **a1;
  result = (unsigned __int16)*a2;
  switch(*a2)
  {
    case 0xE3:
      if (*(_BYTE *)(v4 + 88))
      {
        v6 = *(_QWORD *)(v4 + 80);
        *a3 = v6;
        if ((v6 & 0x8000000000000) != 0)
        {
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
        }
        return result;
      }
      result = *(_QWORD *)v4;
      if (!*(_QWORD *)v4)
        goto LABEL_107;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      if (*(_BYTE *)(v4 + 88))
      {
        v43 = *(_QWORD *)(v4 + 80);
        v44 = *a3;
        if ((v43 & 0x8000000000000) != 0)
        {
          if ((v44 & 0x8000000000000) != 0)
          {
            v97 = *(_OWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
            v96 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
            result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
            v43 = *(_QWORD *)(v4 + 80);
            if ((_DWORD)result)
            {
              if (HIBYTE(v43) == HIBYTE(*a3) && BYTE6(v43) == BYTE6(*a3))
                return result;
            }
          }
        }
        else if (v43 == v44 && (v44 & 0x8000000000000) == 0)
        {
          return result;
        }
        if ((v43 & 0x8000000000000) != 0)
        {
          result = v43 & 0xFFFFFFFFFFFFLL;
          do
          {
            v90 = __ldaxr((unsigned int *)result);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, (unsigned int *)result));
          if (!v91)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v42);
          }
        }
        v46 = *a3;
        *(_QWORD *)(v4 + 80) = *a3;
        if ((v46 & 0x8000000000000) != 0)
        {
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 + 1, v47));
        }
      }
      else
      {
        v69 = *a3;
        *(_QWORD *)(v4 + 80) = *a3;
        if ((v69 & 0x8000000000000) != 0)
        {
          v78 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 + 1, v78));
        }
        *(_BYTE *)(v4 + 88) = 1;
      }
      break;
    case 0xE4:
      if (*(_BYTE *)(v4 + 8))
      {
        if (*(_BYTE *)(v4 + 72))
        {
          v18 = *(_QWORD *)(v4 + 64);
          *a3 = v18;
          if ((v18 & 0x8000000000000) != 0)
          {
            v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 + 1, v19));
          }
        }
        else
        {
          result = *(_QWORD *)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_107;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
          if (*(_BYTE *)(v4 + 72))
          {
            v53 = *(_QWORD *)(v4 + 64);
            v54 = *a3;
            if ((v53 & 0x8000000000000) != 0)
            {
              if ((v54 & 0x8000000000000) != 0)
              {
                v97 = *(_OWORD *)((v53 & 0xFFFFFFFFFFFFLL) + 4);
                v96 = *(_OWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
                result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
                v53 = *(_QWORD *)(v4 + 64);
                if ((_DWORD)result)
                {
                  if (HIBYTE(v53) == HIBYTE(*a3) && BYTE6(v53) == BYTE6(*a3))
                    return result;
                }
              }
            }
            else if (v53 == v54 && (v54 & 0x8000000000000) == 0)
            {
              return result;
            }
            if ((v53 & 0x8000000000000) != 0)
            {
              result = v53 & 0xFFFFFFFFFFFFLL;
              do
              {
                v92 = __ldaxr((unsigned int *)result);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, (unsigned int *)result));
              if (!v93)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v52);
              }
            }
            v56 = *a3;
            *(_QWORD *)(v4 + 64) = *a3;
            if ((v56 & 0x8000000000000) != 0)
            {
              v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 + 1, v57));
            }
          }
          else
          {
            v70 = *a3;
            *(_QWORD *)(v4 + 64) = *a3;
            if ((v70 & 0x8000000000000) != 0)
            {
              v80 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 + 1, v80));
            }
            *(_BYTE *)(v4 + 72) = 1;
          }
        }
      }
      else if (*(_BYTE *)(v4 + 56))
      {
        v49 = *(_QWORD *)(v4 + 48);
        *a3 = v49;
        if ((v49 & 0x8000000000000) != 0)
        {
          v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 + 1, v50));
        }
      }
      else
      {
        result = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_107;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
        if (*(_BYTE *)(v4 + 56))
        {
          v60 = *(_QWORD *)(v4 + 48);
          v61 = *a3;
          if ((v60 & 0x8000000000000) != 0)
          {
            if ((v61 & 0x8000000000000) != 0)
            {
              v97 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
              v96 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
              v60 = *(_QWORD *)(v4 + 48);
              if ((_DWORD)result)
              {
                if (HIBYTE(v60) == HIBYTE(*a3) && BYTE6(v60) == BYTE6(*a3))
                  return result;
              }
            }
          }
          else if (v60 == v61 && (v61 & 0x8000000000000) == 0)
          {
            return result;
          }
          if ((v60 & 0x8000000000000) != 0)
          {
            result = v60 & 0xFFFFFFFFFFFFLL;
            do
            {
              v94 = __ldaxr((unsigned int *)result);
              v95 = v94 - 1;
            }
            while (__stlxr(v95, (unsigned int *)result));
            if (!v95)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v59);
            }
          }
          v63 = *a3;
          *(_QWORD *)(v4 + 48) = *a3;
          if ((v63 & 0x8000000000000) != 0)
          {
            v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFLL);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 + 1, v64));
          }
        }
        else
        {
          v71 = *a3;
          *(_QWORD *)(v4 + 48) = *a3;
          if ((v71 & 0x8000000000000) != 0)
          {
            v82 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 + 1, v82));
          }
          *(_BYTE *)(v4 + 56) = 1;
        }
      }
      break;
    case 0xE5:
      if (*(_BYTE *)(v4 + 104))
      {
        v12 = *(_QWORD *)(v4 + 96);
        *a3 = v12;
        if ((v12 & 0x8000000000000) != 0)
        {
          v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
      }
      else
      {
        result = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_107;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
        if (*(_BYTE *)(v4 + 104))
        {
          v29 = *(_QWORD *)(v4 + 96);
          v30 = *a3;
          if ((v29 & 0x8000000000000) != 0)
          {
            if ((v30 & 0x8000000000000) != 0)
            {
              v97 = *(_OWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 4);
              v96 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
              v29 = *(_QWORD *)(v4 + 96);
              if ((_DWORD)result)
              {
                if (HIBYTE(v29) == HIBYTE(*a3) && BYTE6(v29) == BYTE6(*a3))
                  return result;
              }
            }
          }
          else if (v29 == v30 && (v30 & 0x8000000000000) == 0)
          {
            return result;
          }
          if ((v29 & 0x8000000000000) != 0)
          {
            result = v29 & 0xFFFFFFFFFFFFLL;
            do
            {
              v86 = __ldaxr((unsigned int *)result);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, (unsigned int *)result));
            if (!v87)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v28);
            }
          }
          v32 = *a3;
          *(_QWORD *)(v4 + 96) = *a3;
          if ((v32 & 0x8000000000000) != 0)
          {
            v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 + 1, v33));
          }
        }
        else
        {
          v67 = *a3;
          *(_QWORD *)(v4 + 96) = *a3;
          if ((v67 & 0x8000000000000) != 0)
          {
            v74 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 + 1, v74));
          }
          *(_BYTE *)(v4 + 104) = 1;
        }
      }
      break;
    case 0xE6:
      if (*(_BYTE *)(v4 + 40))
      {
        v15 = *(_QWORD *)(v4 + 32);
        *a3 = v15;
        if ((v15 & 0x8000000000000) != 0)
        {
          v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
      }
      else
      {
        result = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_107;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        if (*(_BYTE *)(v4 + 40))
        {
          v36 = *(_QWORD *)(v4 + 32);
          v37 = *a3;
          if ((v36 & 0x8000000000000) != 0)
          {
            if ((v37 & 0x8000000000000) != 0)
            {
              v97 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
              v96 = *(_OWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
              v36 = *(_QWORD *)(v4 + 32);
              if ((_DWORD)result)
              {
                if (HIBYTE(v36) == HIBYTE(*a3) && BYTE6(v36) == BYTE6(*a3))
                  return result;
              }
            }
          }
          else if (v36 == v37 && (v37 & 0x8000000000000) == 0)
          {
            return result;
          }
          if ((v36 & 0x8000000000000) != 0)
          {
            result = v36 & 0xFFFFFFFFFFFFLL;
            do
            {
              v88 = __ldaxr((unsigned int *)result);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, (unsigned int *)result));
            if (!v89)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v35);
            }
          }
          v39 = *a3;
          *(_QWORD *)(v4 + 32) = *a3;
          if ((v39 & 0x8000000000000) != 0)
          {
            v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 + 1, v40));
          }
        }
        else
        {
          v68 = *a3;
          *(_QWORD *)(v4 + 32) = *a3;
          if ((v68 & 0x8000000000000) != 0)
          {
            v76 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 + 1, v76));
          }
          *(_BYTE *)(v4 + 40) = 1;
        }
      }
      break;
    default:
      if ((_DWORD)result != 124)
        return WebCore::StyleColor::colorFromKeyword(result, *(_BYTE *)(v4 + 9), a3);
      if (*(_BYTE *)(v4 + 24))
      {
        v9 = *(_QWORD *)(v4 + 16);
        *a3 = v9;
        if ((v9 & 0x8000000000000) != 0)
        {
          v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        result = *(_QWORD *)v4;
        if (!*(_QWORD *)v4)
        {
LABEL_107:
          *a3 = 0;
          return result;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if (*(_BYTE *)(v4 + 24))
        {
          v22 = *(_QWORD *)(v4 + 16);
          v23 = *a3;
          if ((v22 & 0x8000000000000) != 0)
          {
            if ((v23 & 0x8000000000000) != 0)
            {
              v97 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
              v96 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v97, (float *)&v96);
              v22 = *(_QWORD *)(v4 + 16);
              if ((_DWORD)result)
              {
                if (HIBYTE(v22) == HIBYTE(*a3) && BYTE6(v22) == BYTE6(*a3))
                  return result;
              }
            }
          }
          else if (v22 == v23 && (v23 & 0x8000000000000) == 0)
          {
            return result;
          }
          if ((v22 & 0x8000000000000) != 0)
          {
            result = v22 & 0xFFFFFFFFFFFFLL;
            do
            {
              v84 = __ldaxr((unsigned int *)result);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, (unsigned int *)result));
            if (!v85)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v21);
            }
          }
          v25 = *a3;
          *(_QWORD *)(v4 + 16) = *a3;
          if ((v25 & 0x8000000000000) != 0)
          {
            v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 + 1, v26));
          }
        }
        else
        {
          v66 = *a3;
          *(_QWORD *)(v4 + 16) = *a3;
          if ((v66 & 0x8000000000000) != 0)
          {
            v72 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 + 1, v72));
          }
          *(_BYTE *)(v4 + 24) = 1;
        }
      }
      break;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(unsigned int *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = bswap32(*a1) | 0x1104000000000000;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(uint64_t (****a1)()@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64x2_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t (**v45)();

  v5 = **a1;
  v6 = *(_QWORD *)(a2 + 16);
  v45 = v5;
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  v35 = &v45;
  ((void (*)(uint64_t *__return_ptr, uint64_t (****)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v42, &v35);
  v9 = v42;
  if ((v42 & 0x4000000000000) != 0)
  {
    v10 = *(_QWORD *)(a2 + 48);
    v45 = v5;
    v11 = *(unsigned int *)(v10 + 88);
    if ((_DWORD)v11 == -1)
      goto LABEL_29;
    v35 = &v45;
    ((void (*)(uint64_t *__return_ptr, uint64_t (****)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v41, &v35);
    v12 = v41;
    if ((v41 & 0x4000000000000) != 0)
    {
      v35 = *(uint64_t (****)())a2;
      v36 = *(_BYTE *)(a2 + 8);
      v37 = 0;
      if (v42)
      {
        v37 = v42;
        v42 = 0;
      }
      v5 = off_1E339AFE0;
      if (!*(_BYTE *)(a2 + 40))
      {
        v38 = 0;
        v39 = 0uLL;
        goto LABEL_15;
      }
      v43 = 0;
      v44 = &v43;
      v13 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v13 == -1)
        goto LABEL_29;
      v45 = (uint64_t (**)())&v44;
      ((void (*)(uint64_t (***)(), uint64_t))off_1E339AFE0[v13])(&v45, a2 + 24);
      v16 = v43;
      if (v43)
        goto LABEL_30;
      while (1)
      {
        v12 = v41;
        v38 = v15;
        v39 = xmmword_19689B170;
        if (v41)
        {
LABEL_15:
          *((_QWORD *)&v39 + 1) = v12;
          v41 = 0;
        }
        if (!*(_BYTE *)(a2 + 72))
        {
          v20 = 0uLL;
          goto LABEL_22;
        }
        v43 = 0;
        v44 = &v43;
        v17 = *(unsigned int *)(a2 + 64);
        if ((_DWORD)v17 != -1)
          break;
LABEL_29:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
        v33 = v15;
        WTF::fastFree((WTF *)(v16 - 16), v14);
        v15 = v33;
      }
      v45 = (uint64_t (**)())&v44;
      ((void (*)(uint64_t (***)(), uint64_t))v5[v17])(&v45, a2 + 56);
      if (v43)
      {
        v34 = v19;
        WTF::fastFree((WTF *)(v43 - 16), v18);
        v19 = v34;
      }
      v20 = vdupq_n_s64(1uLL);
      v20.i64[0] = v19;
LABEL_22:
      v40 = v20;
      WebCore::mix((uint64_t)&v35, a3);
      if ((*((_QWORD *)&v39 + 1) & 0x8000000000000) != 0)
      {
        v27 = (unsigned int *)(*((_QWORD *)&v39 + 1) & 0xFFFFFFFFFFFFLL);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v8);
        }
      }
      if ((v37 & 0x8000000000000) != 0)
      {
        v30 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v8);
        }
      }
      v12 = v41;
    }
    else
    {
      *a3 = 0;
    }
    if ((v12 & 0x8000000000000) != 0)
    {
      v24 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v8);
      }
    }
    v9 = v42;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v8);
    }
  }
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v3 = **result;
  if (*(_BYTE *)(v3 + 11))
  {
    if (*(_BYTE *)(v3 + 10))
      v4 = a2[1];
    else
      v4 = *a2;
    v7 = **result;
    v5 = *(unsigned int *)(v4 + 88);
    if ((_DWORD)v5 == -1)
    {
      v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t **)std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>(v6);
    }
    else
    {
      v8 = &v7;
      return (uint64_t **)((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::RGBFunctionModernRelative>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A6B0[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 4);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 6);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 8);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::HSLFunctionModern>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A2B0[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A6B0[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 4);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 6);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 8);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::HWBFunction>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A2B0[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::LabFunction>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  _BYTE v23[16];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A6B0[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 8);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::LCHFunction>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A2B0[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::OKLabFunction>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  _BYTE v23[16];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A6B0[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 80))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 8);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::OKLCHFunction>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A2B0[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<19ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnresolvedColor::createColor(WebCore::CSSUnresolvedColorResolutionContext const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSUnresolvedAbsoluteColor,WebCore::CSSUnresolvedColorKeyword,WebCore::CSSUnresolvedColorHex,WebCore::CSSUnresolvedColorMix,WebCore::CSSUnresolvedLightDark,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::CSSUnresolvedLightDark<WebCore::HSLFunctionModern>,WebCore::CSSUnresolvedLightDark<WebCore::HWBFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::LCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLabFunction>,WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction>,WebCore::CSSUnresolvedLightDark<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::DisplayP3Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::ProPhotoRGBDescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::SRGBADescriptor>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>>,WebCore::CSSUnresolvedLightDark<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ExtendedLinearEncoded<float,WebCore::CSSUnresolvedLightDark<WebCore::CSSUnresolvedLightDark<WebCore::OKLCHFunction><WebCore::ColorRGBFunction<float,WebCore::Rec2020Descriptor>>>>>><WebCore::ColorXYZFunction<float,(WebCore::XYZA)1>>>> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19[8];
  int v20;
  char v21[8];
  int v22;
  char v23[8];
  int v24;
  char v25[8];
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v29 = **a1;
  v6 = *(unsigned int *)(v5 + 88);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v18 = (unint64_t)&v29;
  result = (unsigned int *)((unsigned int *(*)(unint64_t *__return_ptr, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v28, &v18);
  v9 = v28;
  if ((v28 & 0x4000000000000) != 0)
  {
    v18 = v28;
    v28 = 0;
    v19[0] = 0;
    v20 = -1;
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v10])(&v29, v19, a2 + 1);
      v20 = v10;
    }
    v21[0] = 0;
    v22 = -1;
    v11 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v11])(&v29, v21, a2 + 3);
      v22 = v11;
    }
    v23[0] = 0;
    v24 = -1;
    v12 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v12])(&v29, v23, a2 + 5);
      v24 = v12;
    }
    v25[0] = 0;
    v27 = 0;
    if (*((_BYTE *)a2 + 72))
    {
      v26 = -1;
      v13 = *((unsigned int *)a2 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, char *, uint64_t *))off_1E339A650[v13])(&v29, v25, a2 + 7);
        v26 = v13;
      }
      v27 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((uint64_t)&v18, a3);
    if (v27)
    {
      if (v26 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v26])(&v29, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v24])(&v29, v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v22])(&v29, v21);
    v22 = -1;
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(uint64_t *, char *))off_1E339A280[v20])(&v29, v19);
    v20 = -1;
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v16 = __ldaxr(result);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, result));
      if (!v17)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
    v9 = v28;
  }
  else
  {
    *a3 = 0;
  }
  if ((v9 & 0x8000000000000) != 0)
    goto LABEL_29;
  return result;
}

uint64_t WebCore::resolve<WebCore::RGBFunctionModernRelative>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t result;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v49[8];
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  double v60;
  uint64_t *v61;
  double v62;
  __int16 v63;
  unsigned __int8 v64;
  double v65;
  __int16 v66;
  unsigned __int8 v67;
  double v68;
  __int16 v69;
  unsigned __int8 v70;
  double v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v44 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    v57 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v61 = &v59;
    v62 = COERCE_DOUBLE(&v57);
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v61);
    v9 = v46;
  }
  else
  {
    v5 = bswap32(v4);
    v6 = (float)v5 / 255.0;
    v7 = (float)BYTE1(v5) / 255.0;
    v8 = (float)BYTE2(v5) / 255.0;
    v9 = (float)HIBYTE(v5) / 255.0;
  }
  LOWORD(v61) = 831;
  BYTE2(v61) = 1;
  v62 = v6 * 255.0;
  v63 = 832;
  v64 = 1;
  v65 = v7 * 255.0;
  v66 = 833;
  v67 = 1;
  v68 = v8 * 255.0;
  v69 = 126;
  v70 = 1;
  v71 = v9;
  v55 = 0;
  v59 = 1;
  v60 = v62;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v55, &v61, (uint64_t)&v59, (uint64_t)&v57);
  v59 = v64;
  v60 = v65;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v55, &v63, (uint64_t)&v59, (uint64_t)&v57);
  v59 = v67;
  v60 = v68;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v55, &v66, (uint64_t)&v59, (uint64_t)&v57);
  v59 = v70;
  v60 = v71;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v55, &v69, (uint64_t)&v59, (uint64_t)&v57);
  *(_QWORD *)&v57 = &v55;
  v10 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v57;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v10])(&v59, &v61, a1 + 1);
  *(_QWORD *)&v57 = &v55;
  v11 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v57;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v11])(&v53, &v61, a1 + 3);
  *(_QWORD *)&v57 = &v55;
  v12 = *((unsigned int *)a1 + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v57;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v12])(&v51, &v61, a1 + 5);
  if (*((_BYTE *)a1 + 72))
  {
    v56 = &v55;
    v13 = *((unsigned int *)a1 + 16);
    if ((_DWORD)v13 == -1)
      goto LABEL_54;
    *(_QWORD *)&v57 = &v56;
    ((void (*)(uint64_t **__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v13])(&v61, &v57, a1 + 7);
    LOBYTE(v57) = 0;
    DWORD2(v57) = -1;
    v14 = LODWORD(v62);
    if (LODWORD(v62) == -1)
    {
      v58 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int128 *, uint64_t **))off_1E339A948[LODWORD(v62)])(&v56, &v57, &v61);
      DWORD2(v57) = v14;
      v58 = 1;
      if (LODWORD(v62) != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[LODWORD(v62)])(&v56, &v61);
    }
  }
  else
  {
    LOBYTE(v57) = 0;
    v58 = 0;
  }
  LOBYTE(v61) = 0;
  LODWORD(v62) = -1;
  v15 = LODWORD(v60);
  if (LODWORD(v60) != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t *))off_1E339A948[LODWORD(v60)])(&v56, &v61, &v59);
    LODWORD(v62) = v15;
  }
  LOBYTE(v63) = 0;
  LODWORD(v65) = -1;
  v16 = v54;
  if (v54 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v54])(&v56, &v63, &v53);
    LODWORD(v65) = v16;
  }
  LOBYTE(v66) = 0;
  LODWORD(v68) = -1;
  v17 = v52;
  if (v52 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v52])(&v56, &v66, &v51);
    LODWORD(v68) = v17;
  }
  LOBYTE(v69) = 0;
  v72 = 0;
  if (v58)
  {
    LODWORD(v71) = -1;
    v18 = DWORD2(v57);
    if (DWORD2(v57) == -1)
    {
      v72 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339A948[DWORD2(v57)])(&v56, &v69, &v57);
      LODWORD(v71) = v18;
      v72 = 1;
      if (v58 && DWORD2(v57) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v57)])(&v56, &v57);
    }
  }
  if (v52 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v52])(&v57, &v51);
  if (v54 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v54])(&v57, &v53);
  if (LODWORD(v60) != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[LODWORD(v60)])(&v57, &v59);
  v59 = (uint64_t)&v55;
  if (LODWORD(v62) == -1)
    goto LABEL_54;
  *(_QWORD *)&v57 = &v59;
  v19 = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A970[LODWORD(v62)])(&v57, &v61);
  v59 = (uint64_t)&v55;
  if (LODWORD(v65) == -1
    || (v21 = v19,
        v22 = v20,
        v23 = a2,
        v24 = v4,
        *(_QWORD *)&v57 = &v59,
        v25 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v65)])(&v57, &v63),
        v59 = (uint64_t)&v55,
        LODWORD(v68) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v27 = v25;
  v28 = v26;
  *(_QWORD *)&v57 = &v59;
  v30 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v68)])(&v57, &v66);
  v31 = v29;
  v32 = v72;
  if (v72)
  {
    v59 = (uint64_t)&v55;
    if (LODWORD(v71) != -1)
    {
      *(_QWORD *)&v57 = &v59;
      v33 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v71)])(&v57, &v69);
      v32 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v33 = 0;
LABEL_38:
  v49[0] = v21;
  v49[1] = v22;
  v49[2] = v27;
  v49[3] = v28;
  v49[4] = v30;
  v49[5] = v31;
  v49[6] = v33;
  v49[7] = v29;
  v50 = v32;
  WebCore::convertToTypedColor<WebCore::RGBFunctionModernRelative>((uint64_t)v49);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v35;
  *(_DWORD *)(result + 8) = v37;
  *(_DWORD *)(result + 12) = v39;
  *(_DWORD *)(result + 16) = v41;
  *v23 = result | 0x70E000000000000;
  if (v72)
  {
    if (LODWORD(v71) != -1)
      result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v71)])(&v57, &v69);
    LODWORD(v71) = -1;
  }
  if (LODWORD(v68) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v68)])(&v57, &v66);
  LODWORD(v68) = -1;
  if (LODWORD(v65) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v65)])(&v57, &v63);
  LODWORD(v65) = -1;
  if (LODWORD(v62) != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A920[LODWORD(v62)])(&v57, &v61);
  if (v55)
  {
    result = WTF::fastFree((WTF *)(v55 - 16), v43);
    if ((v24 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v24 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v24 & 0xFFFFFFFFFFFFLL;
  do
  {
    v47 = __ldaxr((unsigned int *)result);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, (unsigned int *)result));
  if (!v48)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v43);
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::RGBFunctionModernRelative>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339A998[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339A9B0[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339A9C8[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339A9E0[v5])(&v8, a1 + 48);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  int8x8_t *v18;
  __int32 v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int8x8_t *v27;
  __int32 v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int32 v49;
  float *v50;
  float v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  int32x2_t v98;
  __int128 v99;
  __int128 v100;
  int8x16_t v101;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v93 = v10.f32[0];
      v96 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v93, 2.1992);
      v11.f32[1] = v96;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v101.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v101.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v101);
      return;
    case 1:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v101);
      return;
    case 2:
      v18 = *(int8x8_t **)(a2 + 8);
      v19 = v18[1].i32[1];
      v20 = *(float *)v18[1].i32;
      v21 = powf(fabsf(v20), 2.1992);
      if (v20 >= 0.0)
        v22 = v21;
      else
        v22 = -v21;
      v23 = (float32x2_t)vand_s8(*v18, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v18), (int8x8_t)vcgez_f32((float32x2_t)*v18)));
      v24 = (int8x8_t)vcltz_s32((int32x2_t)v23);
      v25 = vabs_f32(v23);
      v94 = v25.f32[0];
      v97 = powf(v25.f32[1], 2.1992);
      v26.f32[0] = powf(v94, 2.1992);
      v26.f32[1] = v97;
      *(int8x8_t *)v101.i8 = vbsl_s8(v24, (int8x8_t)vneg_f32(v26), (int8x8_t)v26);
      v101.i64[1] = __PAIR64__(v19, LODWORD(v22));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v101);
      return;
    case 3:
      v27 = *(int8x8_t **)(a2 + 8);
      v28 = v27[1].i32[1];
      v29 = *(float *)v27[1].i32;
      v98 = (int32x2_t)vand_s8(*v27, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v27), (int8x8_t)vcgez_f32((float32x2_t)*v27)));
      v30 = fabsf(*(float *)v98.i32);
      if (v30 <= 0.04045)
        v95 = v30 / 12.92;
      else
        v95 = powf((float)(v30 + 0.055) / 1.055, 2.4);
      v77 = fabsf(*(float *)&v98.i32[1]);
      if (v77 <= 0.04045)
        v78 = v77 / 12.92;
      else
        v78 = powf((float)(v77 + 0.055) / 1.055, 2.4);
      v85 = fabsf(v29);
      if (v85 <= 0.04045)
      {
        v86 = v85 / 12.92;
      }
      else
      {
        v92 = v78;
        v86 = powf((float)(v85 + 0.055) / 1.055, 2.4);
        v78 = v92;
      }
      *(int8x8_t *)v101.i8 = vbsl_s8((int8x8_t)vcltz_s32(v98), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v78), LODWORD(v95))), (int8x8_t)__PAIR64__(LODWORD(v78), LODWORD(v95)));
      if (v29 < 0.0)
        v86 = -v86;
      v101.i64[1] = __PAIR64__(v28, LODWORD(v86));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v101);
      return;
    case 4:
      v31 = *(float **)(a2 + 8);
      v32 = v31[1];
      v33 = v31[2];
      v34 = fabsf(*v31);
      if (v34 >= 0.0031308)
        powf(v34, 0.41667);
      v79 = fabsf(v32);
      if (v79 >= 0.0031308)
        powf(v79, 0.41667);
      v87 = fabsf(v33);
      if (v87 >= 0.0031308)
        powf(v87, 0.41667);
      return;
    case 5:
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(float *)v35;
      v37 = *(_DWORD *)(v35 + 12);
      v38 = *(float *)(v35 + 4);
      v39 = *(float *)(v35 + 8);
      if (fabsf(*(float *)v35) <= 0.03125)
      {
        v42 = v36 * 0.0625;
      }
      else
      {
        v40 = *(float *)v35;
        v41 = powf(v36, 1.8);
        if (v40 >= 0.0)
          v42 = v41;
        else
          v42 = -v41;
      }
      if (fabsf(v38) <= 0.03125)
      {
        v81 = v38 * 0.0625;
      }
      else
      {
        v80 = powf(v38, 1.8);
        if (v38 >= 0.0)
          v81 = v80;
        else
          v81 = -v80;
      }
      if (fabsf(v39) <= 0.03125)
      {
        v88 = v39 * 0.0625;
      }
      else
      {
        v88 = powf(v39, 1.8);
        if (v39 < 0.0)
          v88 = -v88;
      }
      goto LABEL_107;
    case 6:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v101);
      return;
    case 8:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v101.i32);
      return;
    case 9:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v101);
      return;
    case 10:
      v99 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v99);
      *(_QWORD *)&v100 = __PAIR64__(v44, v43);
      *((_QWORD *)&v100 + 1) = __PAIR64__(v46, v45);
      goto LABEL_29;
    case 11:
      v100 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_29:
      v101.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v100);
      *(uint64_t *)((char *)v101.i64 + 4) = __PAIR64__(v48, v47);
      v101.i32[3] = v49;
      goto LABEL_45;
    case 12:
      v50 = *(float **)(a2 + 8);
      v51 = v50[1];
      v52 = v50[2];
      if (*v50 >= 0.0031308)
        powf(*v50, 0.41667);
      if (v51 >= 0.0031308)
        powf(v51, 0.41667);
      if (v52 >= 0.0031308)
        powf(v52, 0.41667);
      return;
    case 13:
      v100 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v100);
      v101.i64[0] = __PAIR64__(v54, v53);
      v101.i64[1] = __PAIR64__(v56, v55);
      goto LABEL_34;
    case 14:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_34:
      v57 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v101.i32);
      v60 = (float)((float)((float)(v57 * -0.96924) + 0.0) + (float)(v58 * 1.876)) + (float)(v59 * 0.041555);
      v61 = (float)((float)((float)(v57 * 0.05563) + 0.0) + (float)(v58 * -0.20398)) + (float)(v59 * 1.057);
      v62 = fabsf((float)((float)((float)(v57 * 3.241) + 0.0) + (float)(v58 * -1.5374)) + (float)(v59 * -0.49861));
      if (v62 >= 0.0031308)
        powf(v62, 0.41667);
      v75 = fabsf(v60);
      if (v75 >= 0.0031308)
        powf(v75, 0.41667);
      v76 = fabsf(v61);
      if (v76 >= 0.0031308)
        powf(v76, 0.41667);
      break;
    case 15:
      v63 = *(_QWORD *)(a2 + 8);
      v64 = *(float *)v63;
      v37 = *(_DWORD *)(v63 + 12);
      v65 = *(float *)(v63 + 4);
      v66 = *(float *)(v63 + 8);
      if (*(float *)v63 <= 0.03125)
      {
        v42 = v64 * 0.0625;
      }
      else
      {
        v67 = powf(v64, 1.8);
        if (v67 > 0.0)
          v68 = v67;
        else
          v68 = 0.0;
        if (v67 >= 1.0)
          v42 = 1.0;
        else
          v42 = v68;
      }
      if (v65 <= 0.03125)
      {
        v81 = v65 * 0.0625;
      }
      else
      {
        v82 = powf(v65, 1.8);
        v83 = 0.0;
        if (v82 > 0.0)
          v83 = v82;
        if (v82 >= 1.0)
          v81 = 1.0;
        else
          v81 = v83;
      }
      if (v66 <= 0.03125)
      {
        v88 = v66 * 0.0625;
      }
      else
      {
        v89 = powf(v66, 1.8);
        v90 = 0.0;
        if (v89 > 0.0)
          v90 = v89;
        if (v89 >= 1.0)
          v88 = 1.0;
        else
          v88 = v90;
      }
LABEL_107:
      v101.i64[0] = __PAIR64__(LODWORD(v81), LODWORD(v42));
      v101.i64[1] = __PAIR64__(v37, LODWORD(v88));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v101);
      break;
    case 16:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v101);
      break;
    case 18:
      v101 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_45:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v101);
      break;
    case 19:
      v69 = *(float **)(a2 + 8);
      v70 = v69[1];
      v71 = v69[2];
      v72 = (float)((float)((float)(*v69 * -0.96924) + 0.0) + (float)(v70 * 1.876)) + (float)(v71 * 0.041555);
      v73 = (float)((float)((float)(*v69 * 0.05563) + 0.0) + (float)(v70 * -0.20398)) + (float)(v71 * 1.057);
      v74 = fabsf((float)((float)((float)(*v69 * 3.241) + 0.0) + (float)(v70 * -1.5374)) + (float)(v71 * -0.49861));
      if (v74 >= 0.0031308)
        powf(v74, 0.41667);
      v84 = fabsf(v72);
      if (v84 >= 0.0031308)
        powf(v84, 0.41667);
      v91 = fabsf(v73);
      if (v91 >= 0.0031308)
        powf(v91, 0.41667);
      break;
    default:
      return;
  }
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(WTF::StringImpl *a1@<X1>, uint64_t a2@<X8>)
{
  int *result;
  int v3;

  result = *(int **)a1;
  v3 = **(_DWORD **)a1;
  *result = v3 + 4;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 1;
  if (v3 == -2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a1);
  *result = v3 + 2;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(WTF::StringImpl *a1@<X1>, uint64_t a2@<X8>)
{
  int *result;
  int v3;

  result = *(int **)a1;
  v3 = **(_DWORD **)a1;
  *result = v3 + 4;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 3;
  if (v3 == -2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a1);
  *result = v3 + 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(uint64_t ***a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WebCore::replaceSymbol(*a2, **a1);
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return *(_QWORD *)&v5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;
  _DWORD *v6;
  _DWORD *v8;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v8 = v3;
  v5 = WebCore::evaluateCalc((uint64_t *)&v8, *v2);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v4);
    else
      *v6 -= 2;
  }
  return *(_QWORD *)&v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.00392156863;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.00392156863;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.00392156863;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernRelativeELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::HSLFunctionModern>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t result;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  double v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  double v64;
  int v65;
  double v66;
  int v67;
  double v68;
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    v60 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v62 = &v51;
    *((_QWORD *)&v62 + 1) = &v60;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v4), (uint64_t)&v62);
  }
  else
  {
    v5 = bswap32(v4);
    *(float *)&v62 = (float)v5 / 255.0;
    *(float32x2_t *)((char *)&v62 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v62 + 3) = (float)HIBYTE(v5) / 255.0;
    v6 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v62);
  }
  LOWORD(v62) = 834;
  BYTE2(v62) = 1;
  *((double *)&v62 + 1) = v6;
  LOWORD(v63) = 835;
  BYTE2(v63) = 1;
  v64 = v7;
  LOWORD(v65) = 836;
  BYTE2(v65) = 1;
  v66 = v8;
  LOWORD(v67) = 126;
  BYTE2(v67) = 1;
  v68 = v9;
  v58 = 0;
  v51 = 1;
  v52 = v6;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v62, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v63);
  v52 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v63, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v65);
  v52 = v66;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v65, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v67);
  v52 = v68;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v67, (uint64_t)&v51, (uint64_t)&v60);
  v51 = (uint64_t)&v58;
  v10 = *((unsigned int *)a1 + 6);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(__int128 *__return_ptr, __int128 *, unint64_t *))off_1E339A9F8[v10])(&v60, &v62, a1 + 1);
  v51 = (uint64_t)&v58;
  v11 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(uint64_t **__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v11])(&v56, &v62, a1 + 4);
  v51 = (uint64_t)&v58;
  v12 = *((unsigned int *)a1 + 14);
  if ((_DWORD)v12 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(uint64_t *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v12])(&v54, &v62, a1 + 6);
  if (*((_BYTE *)a1 + 80))
  {
    v59 = &v58;
    v13 = *((unsigned int *)a1 + 18);
    if ((_DWORD)v13 == -1)
      goto LABEL_54;
    v51 = (uint64_t)&v59;
    ((void (*)(__int128 *__return_ptr, uint64_t *, unint64_t *))off_1E339A8F0[v13])(&v62, &v51, a1 + 8);
    LOBYTE(v51) = 0;
    LODWORD(v52) = -1;
    v14 = DWORD2(v62);
    if (DWORD2(v62) == -1)
    {
      v53 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t *, __int128 *))off_1E339A948[DWORD2(v62)])(&v59, &v51, &v62);
      LODWORD(v52) = v14;
      v53 = 1;
      if (DWORD2(v62) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v62)])(&v59, &v62);
    }
  }
  else
  {
    LOBYTE(v51) = 0;
    v53 = 0;
  }
  LOBYTE(v62) = 0;
  v63 = -1;
  v15 = v61;
  if ((_DWORD)v61 != -1)
  {
    ((void (*)(uint64_t **, __int128 *, __int128 *))off_1E339AA50[v61])(&v59, &v62, &v60);
    v63 = v15;
  }
  LOBYTE(v64) = 0;
  v65 = -1;
  v16 = v57;
  if (v57 != -1)
  {
    ((void (*)(uint64_t **, double *, uint64_t **))off_1E339A948[v57])(&v59, &v64, &v56);
    v65 = v16;
  }
  LOBYTE(v66) = 0;
  v67 = -1;
  v17 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[v55])(&v59, &v66, &v54);
    v67 = v17;
  }
  LOBYTE(v68) = 0;
  v70 = 0;
  if (v53)
  {
    v69 = -1;
    v18 = LODWORD(v52);
    if (LODWORD(v52) == -1)
    {
      v70 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[LODWORD(v52)])(&v59, &v68, &v51);
      v69 = v18;
      v70 = 1;
      if (v53 && LODWORD(v52) != -1)
        ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v52)])(&v59, &v51);
    }
  }
  if (v55 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E339A920[v55])(&v51, &v54);
  if (v57 != -1)
    ((void (*)(uint64_t *, uint64_t **))off_1E339A920[v57])(&v51, &v56);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E339AA28[v61])(&v51, &v60);
  v56 = &v58;
  if (v63 == -1
    || (v51 = (uint64_t)&v56,
        ((void (*)(__int128 *__return_ptr, uint64_t *, __int128 *))off_1E339AA78[v63])(&v60, &v51, &v62),
        v56 = &v58,
        v65 == -1)
    || (v51 = (uint64_t)&v56,
        v19 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v65])(&v51, &v64),
        v56 = &v58,
        v67 == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v21 = v19;
  v22 = v20;
  v51 = (uint64_t)&v56;
  v24 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v67])(&v51, &v66);
  v25 = v23;
  v26 = v70;
  if (v70)
  {
    v56 = &v58;
    if (v69 != -1)
    {
      v51 = (uint64_t)&v56;
      v27 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v69])(&v51, &v68);
      v26 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v27 = 0;
LABEL_38:
  v42 = v60;
  v43 = v61;
  v44 = v21;
  v45 = v22;
  v46 = v24;
  v47 = v25;
  v48 = v27;
  v49 = v23;
  v50 = v26;
  v28 = WebCore::convertToTypedColor<WebCore::HSLFunctionModern>((uint64_t)&v42);
  v29 = LODWORD(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v29;
  *(_DWORD *)(result + 8) = v31;
  *(_DWORD *)(result + 12) = v33;
  *(_DWORD *)(result + 16) = v35;
  *a2 = result | 0x80E000000000000;
  if (v70)
  {
    if (v69 != -1)
      result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v69])(&v60, &v68);
    v69 = -1;
  }
  if (v67 != -1)
    result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v67])(&v60, &v66);
  v67 = -1;
  if (v65 != -1)
    result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v65])(&v60, &v64);
  v65 = -1;
  if (v63 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_1E339AA28[v63])(&v60, &v62);
  if (v58)
  {
    result = WTF::fastFree((WTF *)(v58 - 16), v37);
    if ((v4 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v4 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v4 & 0xFFFFFFFFFFFFLL;
  do
  {
    v40 = __ldaxr((unsigned int *)result);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, (unsigned int *)result));
  if (!v41)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v37);
  }
  return result;
}

double WebCore::convertToTypedColor<WebCore::HSLFunctionModern>(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  __n128 *v9;
  __n128 *v10;
  char v11;
  char *v12;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 != -1)
  {
    v12 = &v11;
    ((void (*)(char **, uint64_t))off_1E339AAA0[v1])(&v12, a1);
    v4 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v4 != -1)
    {
      v5 = v3;
      v12 = &v11;
      ((void (*)(char **, uint64_t))off_1E339AAB8[v4])(&v12, a1 + 24);
      v6 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v6 != -1)
      {
        v12 = &v11;
        ((void (*)(char **, uint64_t))off_1E339AAD0[v6])(&v12, a1 + 40);
        if (!*(_BYTE *)(a1 + 72))
        {
LABEL_7:
          LODWORD(result) = v5;
          return result;
        }
        v8 = *(unsigned int *)(a1 + 64);
        if ((_DWORD)v8 != -1)
        {
          v12 = &v11;
          ((void (*)(char **, uint64_t))off_1E339AAE8[v8])(&v12, a1 + 56);
          goto LABEL_7;
        }
      }
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  *(_QWORD *)&result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_(v9, v10).n128_u64[0];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(WTF::StringImpl *a1@<X1>, uint64_t a2@<X8>)
{
  int *result;
  int v3;

  result = *(int **)a1;
  v3 = **(_DWORD **)a1;
  *result = v3 + 4;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 1;
  if (v3 == -2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a1);
  *result = v3 + 2;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(WTF::StringImpl *a1@<X1>, uint64_t a2@<X8>)
{
  int *result;
  int v3;

  result = *(int **)a1;
  v3 = **(_DWORD **)a1;
  *result = v3 + 4;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 3;
  if (v3 == -2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a1);
  *result = v3 + 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13replaceSymbolIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawENSA_9SymbolRawEEEENSA_19TypesMinusSymbolRawIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSN_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_SI_EEEEEEDcSY_DpT0_@<X0>(uint64_t ***a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WebCore::replaceSymbol(*a2, **a1);
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 16) = 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  double v9;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = *v4;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 1) + 72))(*((_QWORD *)v5 + 1));
  v9 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, v6);
  *(_QWORD *)a3 = v7;
  *(double *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v8);
  else
    *v5 -= 2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *result;
  _DWORD *v8;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v8 = v5;
  *(double *)a3 = WebCore::evaluateCalc((uint64_t *)&v8, *v4);
  *(_DWORD *)(a3 + 16) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EENSA_7NoneRawEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSM_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_SH_EEEEEEDcSX_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  long double v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = fmod(v3, 360.0);
  return fmod(v4 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, long double *a2)
{
  long double v2;

  v2 = fmod(*a2, 360.0);
  return fmod(v2 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if (*a2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if (*a2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionModernELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::HWBFunction>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t result;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  double v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  double v64;
  int v65;
  double v66;
  int v67;
  double v68;
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    v60 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v62 = &v51;
    *((_QWORD *)&v62 + 1) = &v60;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v4), (uint64_t)&v62);
  }
  else
  {
    v5 = bswap32(v4);
    *(float *)&v62 = (float)v5 / 255.0;
    *(float32x2_t *)((char *)&v62 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v62 + 3) = (float)HIBYTE(v5) / 255.0;
    v6 = WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v62);
  }
  LOWORD(v62) = 834;
  BYTE2(v62) = 1;
  *((double *)&v62 + 1) = v6;
  LOWORD(v63) = 837;
  BYTE2(v63) = 1;
  v64 = v7;
  LOWORD(v65) = 833;
  BYTE2(v65) = 1;
  v66 = v8;
  LOWORD(v67) = 126;
  BYTE2(v67) = 1;
  v68 = v9;
  v58 = 0;
  v51 = 1;
  v52 = v6;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v62, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v63);
  v52 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v63, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v65);
  v52 = v66;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v65, (uint64_t)&v51, (uint64_t)&v60);
  v51 = BYTE2(v67);
  v52 = v68;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v58, &v67, (uint64_t)&v51, (uint64_t)&v60);
  v51 = (uint64_t)&v58;
  v10 = *((unsigned int *)a1 + 6);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(__int128 *__return_ptr, __int128 *, unint64_t *))off_1E339A9F8[v10])(&v60, &v62, a1 + 1);
  v51 = (uint64_t)&v58;
  v11 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(uint64_t **__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v11])(&v56, &v62, a1 + 4);
  v51 = (uint64_t)&v58;
  v12 = *((unsigned int *)a1 + 14);
  if ((_DWORD)v12 == -1)
    goto LABEL_54;
  *(_QWORD *)&v62 = &v51;
  ((void (*)(uint64_t *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v12])(&v54, &v62, a1 + 6);
  if (*((_BYTE *)a1 + 80))
  {
    v59 = &v58;
    v13 = *((unsigned int *)a1 + 18);
    if ((_DWORD)v13 == -1)
      goto LABEL_54;
    v51 = (uint64_t)&v59;
    ((void (*)(__int128 *__return_ptr, uint64_t *, unint64_t *))off_1E339A8F0[v13])(&v62, &v51, a1 + 8);
    LOBYTE(v51) = 0;
    LODWORD(v52) = -1;
    v14 = DWORD2(v62);
    if (DWORD2(v62) == -1)
    {
      v53 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t *, __int128 *))off_1E339A948[DWORD2(v62)])(&v59, &v51, &v62);
      LODWORD(v52) = v14;
      v53 = 1;
      if (DWORD2(v62) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v62)])(&v59, &v62);
    }
  }
  else
  {
    LOBYTE(v51) = 0;
    v53 = 0;
  }
  LOBYTE(v62) = 0;
  v63 = -1;
  v15 = v61;
  if ((_DWORD)v61 != -1)
  {
    ((void (*)(uint64_t **, __int128 *, __int128 *))off_1E339AA50[v61])(&v59, &v62, &v60);
    v63 = v15;
  }
  LOBYTE(v64) = 0;
  v65 = -1;
  v16 = v57;
  if (v57 != -1)
  {
    ((void (*)(uint64_t **, double *, uint64_t **))off_1E339A948[v57])(&v59, &v64, &v56);
    v65 = v16;
  }
  LOBYTE(v66) = 0;
  v67 = -1;
  v17 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[v55])(&v59, &v66, &v54);
    v67 = v17;
  }
  LOBYTE(v68) = 0;
  v70 = 0;
  if (v53)
  {
    v69 = -1;
    v18 = LODWORD(v52);
    if (LODWORD(v52) == -1)
    {
      v70 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[LODWORD(v52)])(&v59, &v68, &v51);
      v69 = v18;
      v70 = 1;
      if (v53 && LODWORD(v52) != -1)
        ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v52)])(&v59, &v51);
    }
  }
  if (v55 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E339A920[v55])(&v51, &v54);
  if (v57 != -1)
    ((void (*)(uint64_t *, uint64_t **))off_1E339A920[v57])(&v51, &v56);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E339AA28[v61])(&v51, &v60);
  v56 = &v58;
  if (v63 == -1
    || (v51 = (uint64_t)&v56,
        ((void (*)(__int128 *__return_ptr, uint64_t *, __int128 *))off_1E339AA78[v63])(&v60, &v51, &v62),
        v56 = &v58,
        v65 == -1)
    || (v51 = (uint64_t)&v56,
        v19 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v65])(&v51, &v64),
        v56 = &v58,
        v67 == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v21 = v19;
  v22 = v20;
  v51 = (uint64_t)&v56;
  v24 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v67])(&v51, &v66);
  v25 = v23;
  v26 = v70;
  if (v70)
  {
    v56 = &v58;
    if (v69 != -1)
    {
      v51 = (uint64_t)&v56;
      v27 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v69])(&v51, &v68);
      v26 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v27 = 0;
LABEL_38:
  v42 = v60;
  v43 = v61;
  v44 = v21;
  v45 = v22;
  v46 = v24;
  v47 = v25;
  v48 = v27;
  v49 = v23;
  v50 = v26;
  WebCore::convertToTypedColor<WebCore::HWBFunction>((uint64_t)&v42);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v29;
  *(_DWORD *)(result + 8) = v31;
  *(_DWORD *)(result + 12) = v33;
  *(_DWORD *)(result + 16) = v35;
  *a2 = result | 0x90E000000000000;
  if (v70)
  {
    if (v69 != -1)
      result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v69])(&v60, &v68);
    v69 = -1;
  }
  if (v67 != -1)
    result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v67])(&v60, &v66);
  v67 = -1;
  if (v65 != -1)
    result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v65])(&v60, &v64);
  v65 = -1;
  if (v63 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_1E339AA28[v63])(&v60, &v62);
  if (v58)
  {
    result = WTF::fastFree((WTF *)(v58 - 16), v37);
    if ((v4 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v4 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v4 & 0xFFFFFFFFFFFFLL;
  do
  {
    v40 = __ldaxr((unsigned int *)result);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, (unsigned int *)result));
  if (!v41)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v37);
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::HWBFunction>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB00[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB18[v3])(&v8, a1 + 24);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB30[v4])(&v8, a1 + 40);
  if (!*(_BYTE *)(a1 + 72))
    return;
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB48[v5])(&v8, a1 + 56);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HWBAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  float v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  int8x8_t *v23;
  __int32 v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t *v32;
  __int32 v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  unsigned int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  float v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  int8x8_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  int32x2_t v111;
  int32x2_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int8x16_t v116;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v105 = v10.f32[0];
      v109 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v105, 2.1992);
      v11.f32[1] = v109;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v116.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 1:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 2:
      v23 = *(int8x8_t **)(a2 + 8);
      v24 = v23[1].i32[1];
      v25 = *(float *)v23[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 >= 0.0)
        v27 = v26;
      else
        v27 = -v26;
      v28 = (float32x2_t)vand_s8(*v23, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v23), (int8x8_t)vcgez_f32((float32x2_t)*v23)));
      v29 = (int8x8_t)vcltz_s32((int32x2_t)v28);
      v30 = vabs_f32(v28);
      v106 = v30.f32[0];
      v110 = powf(v30.f32[1], 2.1992);
      v31.f32[0] = powf(v106, 2.1992);
      v31.f32[1] = v110;
      *(int8x8_t *)v116.i8 = vbsl_s8(v29, (int8x8_t)vneg_f32(v31), (int8x8_t)v31);
      v116.i64[1] = __PAIR64__(v24, LODWORD(v27));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 3:
      v32 = *(int8x8_t **)(a2 + 8);
      v33 = v32[1].i32[1];
      v34 = *(float *)v32[1].i32;
      v111 = (int32x2_t)vand_s8(*v32, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v32), (int8x8_t)vcgez_f32((float32x2_t)*v32)));
      v35 = fabsf(*(float *)v111.i32);
      if (v35 <= 0.04045)
        v107 = v35 / 12.92;
      else
        v107 = powf((float)(v35 + 0.055) / 1.055, 2.4);
      v79 = fabsf(*(float *)&v111.i32[1]);
      if (v79 <= 0.04045)
        v80 = v79 / 12.92;
      else
        v80 = powf((float)(v79 + 0.055) / 1.055, 2.4);
      v91 = fabsf(v34);
      if (v91 <= 0.04045)
      {
        v92 = v91 / 12.92;
      }
      else
      {
        v103 = v80;
        v92 = powf((float)(v91 + 0.055) / 1.055, 2.4);
        v80 = v103;
      }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcltz_s32(v111), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v80), LODWORD(v107))), (int8x8_t)__PAIR64__(LODWORD(v80), LODWORD(v107)));
      if (v34 < 0.0)
        v92 = -v92;
      v116.i64[1] = __PAIR64__(v33, LODWORD(v92));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 4:
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(_DWORD *)(v36 + 12);
      v38 = *(float *)(v36 + 8);
      v112 = (int32x2_t)vand_s8(*(int8x8_t *)v36, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v36), (int8x8_t)vcgez_f32(*(float32x2_t *)v36)));
      v39 = fabsf(*(float *)v112.i32);
      if (v39 >= 0.0031308)
        v40 = (float)(powf(v39, 0.41667) * 1.055) + -0.055;
      else
        v40 = v39 * 12.92;
      v108 = v40;
      v81 = fabsf(*(float *)&v112.i32[1]);
      if (v81 >= 0.0031308)
        v82 = (float)(powf(v81, 0.41667) * 1.055) + -0.055;
      else
        v82 = v81 * 12.92;
      v93 = fabsf(v38);
      if (v93 < 0.0031308)
        goto LABEL_111;
      goto LABEL_128;
    case 5:
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(float *)v41;
      v43 = *(_DWORD *)(v41 + 12);
      v44 = *(float *)(v41 + 4);
      v45 = *(float *)(v41 + 8);
      if (fabsf(*(float *)v41) <= 0.03125)
      {
        v48 = v42 * 0.0625;
      }
      else
      {
        v46 = *(float *)v41;
        v47 = powf(v42, 1.8);
        if (v46 >= 0.0)
          v48 = v47;
        else
          v48 = -v47;
      }
      if (fabsf(v44) <= 0.03125)
      {
        v84 = v44 * 0.0625;
      }
      else
      {
        v83 = powf(v44, 1.8);
        if (v44 >= 0.0)
          v84 = v83;
        else
          v84 = -v83;
      }
      if (fabsf(v45) <= 0.03125)
      {
        v94 = v45 * 0.0625;
      }
      else
      {
        v94 = powf(v45, 1.8);
        if (v45 < 0.0)
          v94 = -v94;
      }
      goto LABEL_125;
    case 6:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 7:
      v22 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_27;
    case 8:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v18 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v115);
      goto LABEL_126;
    case 9:
      return;
    case 10:
      v113 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v113);
      *(_QWORD *)&v114 = __PAIR64__(v50, v49);
      *((_QWORD *)&v114 + 1) = __PAIR64__(v52, v51);
      goto LABEL_31;
    case 11:
      v114 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_31:
      LODWORD(v115) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v114);
      *(_QWORD *)((char *)&v115 + 4) = __PAIR64__(v54, v53);
      HIDWORD(v115) = v55;
      goto LABEL_48;
    case 12:
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(float *)v56;
      v58 = *(_DWORD *)(v56 + 12);
      v59 = 0.0;
      v60 = *(float *)(v56 + 4);
      v61 = *(float *)(v56 + 8);
      if (*(float *)v56 >= 0.0031308)
      {
        v85 = (float)(powf(v57, 0.41667) * 1.055) + -0.055;
        if (v85 > 0.0)
          v86 = v85;
        else
          v86 = 0.0;
        if (v85 >= 1.0)
          v59 = 1.0;
        else
          v59 = v86;
      }
      else
      {
        v62 = v57 * 12.92;
        if (v62 >= 0.0)
          v59 = v62;
      }
      if (v60 >= 0.0031308)
      {
        v95 = (float)(powf(v60, 0.41667) * 1.055) + -0.055;
        v96 = 0.0;
        if (v95 > 0.0)
          v96 = v95;
        if (v95 >= 1.0)
          v87 = 1.0;
        else
          v87 = v96;
      }
      else if ((float)(v60 * 12.92) >= 0.0)
      {
        v87 = v60 * 12.92;
      }
      else
      {
        v87 = 0.0;
      }
      if (v61 >= 0.0031308)
      {
        v101 = (float)(powf(v61, 0.41667) * 1.055) + -0.055;
        v102 = 0.0;
        if (v101 > 0.0)
          v102 = v101;
        if (v101 >= 1.0)
          v97 = 1.0;
        else
          v97 = v102;
      }
      else
      {
        v97 = v61 * 12.92;
        if ((float)(v61 * 12.92) < 0.0)
          v97 = 0.0;
      }
      v116.i64[0] = __PAIR64__(LODWORD(v87), LODWORD(v59));
      v116.i64[1] = __PAIR64__(v58, LODWORD(v97));
      break;
    case 13:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v115);
      v116.i64[0] = __PAIR64__(v64, v63);
      v116.i64[1] = __PAIR64__(v66, v65);
      goto LABEL_38;
    case 14:
      v116 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_38:
      WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::OKLab<float>,void>::convert((float *)v116.i32);
      return;
    case 15:
      v67 = *(_QWORD *)(a2 + 8);
      v68 = *(float *)v67;
      v43 = *(_DWORD *)(v67 + 12);
      v69 = *(float *)(v67 + 4);
      v70 = *(float *)(v67 + 8);
      if (*(float *)v67 <= 0.03125)
      {
        v48 = v68 * 0.0625;
      }
      else
      {
        v71 = powf(v68, 1.8);
        if (v71 > 0.0)
          v72 = v71;
        else
          v72 = 0.0;
        if (v71 >= 1.0)
          v48 = 1.0;
        else
          v48 = v72;
      }
      if (v69 <= 0.03125)
      {
        v84 = v69 * 0.0625;
      }
      else
      {
        v88 = powf(v69, 1.8);
        v89 = 0.0;
        if (v88 > 0.0)
          v89 = v88;
        if (v88 >= 1.0)
          v84 = 1.0;
        else
          v84 = v89;
      }
      if (v70 <= 0.03125)
      {
        v94 = v70 * 0.0625;
      }
      else
      {
        v98 = powf(v70, 1.8);
        v99 = 0.0;
        if (v98 > 0.0)
          v99 = v98;
        if (v98 >= 1.0)
          v94 = 1.0;
        else
          v94 = v99;
      }
LABEL_125:
      v116.i64[0] = __PAIR64__(LODWORD(v84), LODWORD(v48));
      v116.i64[1] = __PAIR64__(v43, LODWORD(v94));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v116);
      goto LABEL_126;
    case 16:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 18:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_48:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v115);
LABEL_126:
      v116.i64[0] = __PAIR64__(v19, LODWORD(v18));
      v116.i64[1] = __PAIR64__(v21, v20);
      break;
    case 19:
      v73 = *(_QWORD *)(a2 + 8);
      v74 = *(float *)(v73 + 4);
      v75 = *(float *)(v73 + 8);
      v37 = *(_DWORD *)(v73 + 12);
      v76 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, *(float *)v73), (float32x2_t)0x3FF01FB4BFC4C8F9, v74), (float32x2_t)0x3D2A35A3BEFF49E9, v75);
      v38 = (float)((float)((float)(*(float *)v73 * 0.05563) + 0.0) + (float)(v74 * -0.20398)) + (float)(v75 * 1.057);
      v112 = (int32x2_t)vand_s8(v76, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v76), (int8x8_t)vcgez_f32((float32x2_t)v76)));
      v77 = fabsf(*(float *)v112.i32);
      if (v77 >= 0.0031308)
        v78 = (float)(powf(v77, 0.41667) * 1.055) + -0.055;
      else
        v78 = v77 * 12.92;
      v108 = v78;
      v90 = fabsf(*(float *)&v112.i32[1]);
      if (v90 >= 0.0031308)
        v82 = (float)(powf(v90, 0.41667) * 1.055) + -0.055;
      else
        v82 = v90 * 12.92;
      v93 = fabsf(v38);
      if (v93 >= 0.0031308)
      {
LABEL_128:
        v104 = v82;
        v100 = (float)(powf(v93, 0.41667) * 1.055) + -0.055;
        v82 = v104;
      }
      else
      {
LABEL_111:
        v100 = v93 * 12.92;
      }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcltz_s32(v112), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v108))), (int8x8_t)__PAIR64__(LODWORD(v82), LODWORD(v108)));
      if (v38 < 0.0)
        v100 = -v100;
      v116.i64[1] = __PAIR64__(v37, LODWORD(v100));
      break;
    default:
      v22 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
LABEL_27:
      v116 = v22;
      break;
  }
  WebCore::ColorConversion<WebCore::HWBA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v116);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  long double v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = fmod(v3, 360.0);
  return fmod(v4 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, long double *a2)
{
  long double v2;

  v2 = fmod(*a2, 360.0);
  return fmod(v2 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj0EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11HWBFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::LabFunction>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t result;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[8];
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  double v58;
  uint64_t *v59;
  double v60;
  __int16 v61;
  unsigned __int8 v62;
  double v63;
  __int16 v64;
  unsigned __int8 v65;
  double v66;
  __int16 v67;
  unsigned __int8 v68;
  double v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v55 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v59 = &v57;
    v60 = COERCE_DOUBLE(&v55);
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v4), (uint64_t)&v59);
  }
  else
  {
    LODWORD(v59) = bswap32(v4);
    WebCore::ColorConversion<WebCore::Lab<float>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(&v59);
  }
  LOWORD(v59) = 836;
  BYTE2(v59) = 1;
  v60 = v5;
  v61 = 838;
  v62 = 1;
  v63 = v6;
  v64 = 833;
  v65 = 1;
  v66 = v7;
  v67 = 126;
  v68 = 1;
  v69 = v8;
  v53 = 0;
  v57 = 1;
  v58 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v53, &v59, (uint64_t)&v57, (uint64_t)&v55);
  v57 = v62;
  v58 = v63;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v53, &v61, (uint64_t)&v57, (uint64_t)&v55);
  v57 = v65;
  v58 = v66;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v53, &v64, (uint64_t)&v57, (uint64_t)&v55);
  v57 = v68;
  v58 = v69;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v53, &v67, (uint64_t)&v57, (uint64_t)&v55);
  *(_QWORD *)&v55 = &v53;
  v9 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v59 = (uint64_t *)&v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v9])(&v57, &v59, a1 + 1);
  *(_QWORD *)&v55 = &v53;
  v10 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v59 = (uint64_t *)&v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v10])(&v51, &v59, a1 + 3);
  *(_QWORD *)&v55 = &v53;
  v11 = *((unsigned int *)a1 + 12);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v59 = (uint64_t *)&v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v11])(&v49, &v59, a1 + 5);
  if (*((_BYTE *)a1 + 72))
  {
    v54 = &v53;
    v12 = *((unsigned int *)a1 + 16);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    *(_QWORD *)&v55 = &v54;
    ((void (*)(uint64_t **__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v12])(&v59, &v55, a1 + 7);
    LOBYTE(v55) = 0;
    DWORD2(v55) = -1;
    v13 = LODWORD(v60);
    if (LODWORD(v60) == -1)
    {
      v56 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int128 *, uint64_t **))off_1E339A948[LODWORD(v60)])(&v54, &v55, &v59);
      DWORD2(v55) = v13;
      v56 = 1;
      if (LODWORD(v60) != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[LODWORD(v60)])(&v54, &v59);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v56 = 0;
  }
  LOBYTE(v59) = 0;
  LODWORD(v60) = -1;
  v14 = LODWORD(v58);
  if (LODWORD(v58) != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t *))off_1E339A948[LODWORD(v58)])(&v54, &v59, &v57);
    LODWORD(v60) = v14;
  }
  LOBYTE(v61) = 0;
  LODWORD(v63) = -1;
  v15 = v52;
  if (v52 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v52])(&v54, &v61, &v51);
    LODWORD(v63) = v15;
  }
  LOBYTE(v64) = 0;
  LODWORD(v66) = -1;
  v16 = v50;
  if (v50 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v50])(&v54, &v64, &v49);
    LODWORD(v66) = v16;
  }
  LOBYTE(v67) = 0;
  v70 = 0;
  if (v56)
  {
    LODWORD(v69) = -1;
    v17 = DWORD2(v55);
    if (DWORD2(v55) == -1)
    {
      v70 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339A948[DWORD2(v55)])(&v54, &v67, &v55);
      LODWORD(v69) = v17;
      v70 = 1;
      if (v56 && DWORD2(v55) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v55)])(&v54, &v55);
    }
  }
  if (v50 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v50])(&v55, &v49);
  if (v52 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v52])(&v55, &v51);
  if (LODWORD(v58) != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[LODWORD(v58)])(&v55, &v57);
  v57 = (uint64_t)&v53;
  if (LODWORD(v60) == -1)
    goto LABEL_54;
  *(_QWORD *)&v55 = &v57;
  v18 = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A970[LODWORD(v60)])(&v55, &v59);
  v57 = (uint64_t)&v53;
  if (LODWORD(v63) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v23 = v4,
        *(_QWORD *)&v55 = &v57,
        v24 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v63)])(&v55, &v61),
        v57 = (uint64_t)&v53,
        LODWORD(v66) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v26 = v24;
  v27 = v25;
  *(_QWORD *)&v55 = &v57;
  v29 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v66)])(&v55, &v64);
  v30 = v28;
  v31 = v70;
  if (v70)
  {
    v57 = (uint64_t)&v53;
    if (LODWORD(v69) != -1)
    {
      *(_QWORD *)&v55 = &v57;
      v32 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v69)])(&v55, &v67);
      v31 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v32 = 0;
LABEL_38:
  v47[0] = v20;
  v47[1] = v21;
  v47[2] = v26;
  v47[3] = v27;
  v47[4] = v29;
  v47[5] = v30;
  v47[6] = v32;
  v47[7] = v28;
  v48 = v31;
  WebCore::convertToTypedColor<WebCore::LabFunction>((uint64_t)v47);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v40 = v39;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v34;
  *(_DWORD *)(result + 8) = v36;
  *(_DWORD *)(result + 12) = v38;
  *(_DWORD *)(result + 16) = v40;
  *v22 = result | 0xB0C000000000000;
  if (v70)
  {
    if (LODWORD(v69) != -1)
      result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v69)])(&v55, &v67);
    LODWORD(v69) = -1;
  }
  if (LODWORD(v66) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v66)])(&v55, &v64);
  LODWORD(v66) = -1;
  if (LODWORD(v63) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v63)])(&v55, &v61);
  LODWORD(v63) = -1;
  if (LODWORD(v60) != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A920[LODWORD(v60)])(&v55, &v59);
  if (v53)
  {
    result = WTF::fastFree((WTF *)(v53 - 16), v42);
    if ((v23 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v23 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v23 & 0xFFFFFFFFFFFFLL;
  do
  {
    v45 = __ldaxr((unsigned int *)result);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, (unsigned int *)result));
  if (!v46)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v42);
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::LabFunction>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB60[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB78[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AB90[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ABA8[v5])(&v8, a1 + 48);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_3LabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float v20;
  unsigned int v21;
  int v22;
  int v23;
  int8x8_t *v24;
  float v25;
  float v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  __int128 v70[2];
  int v71;
  _OWORD v72[2];
  int v73;
  __int128 v74;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v66 = v11.f32[0];
      v68 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v66, 2.1992);
      v12.f32[1] = v68;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v70);
      goto LABEL_34;
    case 2:
      v24 = *(int8x8_t **)(a2 + 8);
      v3 = v24[1].i32[1];
      v25 = *(float *)v24[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 < 0.0)
        v26 = -v26;
      v8 = v26;
      v27 = (float32x2_t)vand_s8(*v24, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v24), (int8x8_t)vcgez_f32((float32x2_t)*v24)));
      v28 = (int8x8_t)vcltz_s32((int32x2_t)v27);
      v29 = vabs_f32(v27);
      v67 = v29.f32[0];
      v69 = powf(v29.f32[1], 2.1992);
      v30.f32[0] = powf(v67, 2.1992);
      v30.f32[1] = v69;
      v19 = vbsl_s8(v28, (int8x8_t)vneg_f32(v30), (int8x8_t)v30);
LABEL_16:
      *(int8x8_t *)&v74 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      *((_QWORD *)&v74 + 1) = __PAIR64__(v3, LODWORD(v8));
      v72[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v72[1] = unk_1968BFBBC;
      v73 = 1065207884;
      v70[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v70[1] = unk_1969EF33C;
      v71 = 1061190357;
      v20 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v74, (float *)v72, (float *)v70);
      goto LABEL_34;
    case 3:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v70);
      goto LABEL_34;
    case 4:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v70);
      goto LABEL_34;
    case 5:
      v50 = *(_QWORD *)(a2 + 8);
      v51 = *(float *)v50;
      v44 = *(_DWORD *)(v50 + 12);
      v52 = *(float *)(v50 + 4);
      v46 = *(float *)(v50 + 8);
      if (fabsf(*(float *)v50) <= 0.03125)
      {
        v49 = v51 * 0.0625;
      }
      else
      {
        v53 = *(float *)v50;
        v54 = powf(v51, 1.8);
        if (v53 >= 0.0)
          v49 = v54;
        else
          v49 = -v54;
      }
      if (fabsf(v52) <= 0.03125)
      {
        v61 = v52 * 0.0625;
      }
      else
      {
        v62 = powf(v52, 1.8);
        if (v52 >= 0.0)
          v61 = v62;
        else
          v61 = -v62;
      }
      if (fabsf(v46) <= 0.03125)
        goto LABEL_72;
      v65 = powf(v46, 1.8);
      if (v46 < 0.0)
        v65 = -v65;
      goto LABEL_73;
    case 6:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v70);
      goto LABEL_34;
    case 7:
      v72[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_45;
    case 8:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v70);
      goto LABEL_44;
    case 9:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)v70);
LABEL_44:
      *(_QWORD *)&v72[0] = __PAIR64__(v32, LODWORD(v31));
      *((_QWORD *)&v72[0] + 1) = __PAIR64__(v34, v33);
LABEL_45:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v72);
      return;
    case 10:
      v72[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v72);
      return;
    case 11:
      return;
    case 12:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v70);
      goto LABEL_34;
    case 13:
      v74 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v74);
      *(_QWORD *)&v70[0] = __PAIR64__(v36, v35);
      *((_QWORD *)&v70[0] + 1) = __PAIR64__(v38, v37);
      goto LABEL_25;
    case 14:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_25:
      v39 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v70);
      *(float32x2_t *)&v72[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v39), (float32x2_t)0x3F7D8D1C3CBBFB13, v40), (float32x2_t)0xBC8BDE5ABD4D9668, v41);
      *((float *)v72 + 2) = (float)((float)((float)(v39 * -0.009243) + 0.0) + (float)(v40 * 0.015055))
                          + (float)(v41 * 0.75187);
      goto LABEL_35;
    case 15:
      v42 = *(_QWORD *)(a2 + 8);
      v43 = *(float *)v42;
      v44 = *(_DWORD *)(v42 + 12);
      v45 = *(float *)(v42 + 4);
      v46 = *(float *)(v42 + 8);
      if (*(float *)v42 <= 0.03125)
      {
        v49 = v43 * 0.0625;
      }
      else
      {
        v47 = powf(v43, 1.8);
        if (v47 > 0.0)
          v48 = v47;
        else
          v48 = 0.0;
        if (v47 >= 1.0)
          v49 = 1.0;
        else
          v49 = v48;
      }
      if (v45 <= 0.03125)
      {
        v61 = v45 * 0.0625;
      }
      else
      {
        v59 = powf(v45, 1.8);
        v60 = 0.0;
        if (v59 > 0.0)
          v60 = v59;
        if (v59 >= 1.0)
          v61 = 1.0;
        else
          v61 = v60;
      }
      if (v46 <= 0.03125)
      {
LABEL_72:
        v65 = v46 * 0.0625;
      }
      else
      {
        v63 = powf(v46, 1.8);
        v64 = 0.0;
        if (v63 > 0.0)
          v64 = v63;
        if (v63 >= 1.0)
          v65 = 1.0;
        else
          v65 = v64;
      }
LABEL_73:
      *(float32x2_t *)&v72[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v49), (float32x2_t)0x3F363AD53E0A6CF7, v61), (float32x2_t)0x38BC9C873D00667BLL, v65);
      *((float *)v72 + 2) = (float)((float)((float)(v49 * 0.0) + 0.0) + (float)(v61 * 0.0)) + (float)(v65 * 0.8251);
      HIDWORD(v72[0]) = v44;
      goto LABEL_36;
    case 16:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v70);
      goto LABEL_34;
    case 18:
      v72[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_36;
    case 19:
      v55 = *(_QWORD *)(a2 + 8);
      v56 = *(float *)v55;
      v57 = *(float *)(v55 + 4);
      v58 = *(float *)(v55 + 8);
      v23 = *(_DWORD *)(v55 + 12);
      *(float32x2_t *)&v72[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, *(float *)v55), (float32x2_t)0x3F7D8D1C3CBBFB13, v57), (float32x2_t)0xBC8BDE5ABD4D9668, v58);
      *((float *)v72 + 2) = (float)((float)((float)(v56 * -0.009243) + 0.0) + (float)(v57 * 0.015055))
                          + (float)(v58 * 0.75187);
      goto LABEL_35;
    default:
      v70[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v70);
LABEL_34:
      *(_QWORD *)&v72[0] = __PAIR64__(v21, LODWORD(v20));
      DWORD2(v72[0]) = v22;
LABEL_35:
      HIDWORD(v72[0]) = v23;
LABEL_36:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v72);
      return;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 100.0;
  if (*a2 <= 100.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 100.0;
  if (*a2 <= 100.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 1.25;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 1.25;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::LCHFunction>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t result;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD v43[4];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  double v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  double v62;
  __int16 v63;
  unsigned __int8 v64;
  double v65;
  __int16 v66;
  unsigned __int8 v67;
  double v68;
  int v69;
  double v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v57 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v39 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossy<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>(&v57, (unint64_t)&v61);
  LOWORD(v61) = 836;
  BYTE2(v61) = 1;
  v62 = v5;
  v63 = 839;
  v64 = 1;
  v65 = v6;
  v66 = 834;
  v67 = 1;
  v68 = v7;
  LOWORD(v69) = 126;
  BYTE2(v69) = 1;
  v70 = v8;
  v56 = 0;
  v49 = 1;
  v50 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v61, (uint64_t)&v49, (uint64_t)&v59);
  v49 = v64;
  v50 = v65;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v63, (uint64_t)&v49, (uint64_t)&v59);
  v49 = v67;
  v50 = v68;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v66, (uint64_t)&v49, (uint64_t)&v59);
  v49 = BYTE2(v69);
  v50 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v69, (uint64_t)&v49, (uint64_t)&v59);
  *(_QWORD *)&v59 = &v56;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v59;
  ((void (*)(uint64_t **__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v9])(&v54, &v61, a1 + 8);
  *(_QWORD *)&v59 = &v56;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v59;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v10])(&v52, &v61, a1 + 24);
  v49 = (uint64_t)&v56;
  v11 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v61 = &v49;
  ((void (*)(__int128 *__return_ptr, uint64_t **, uint64_t))off_1E339A9F8[v11])(&v59, &v61, a1 + 40);
  if (*(_BYTE *)(a1 + 80))
  {
    v58 = &v56;
    v12 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v49 = (uint64_t)&v58;
    ((void (*)(uint64_t **__return_ptr, uint64_t *, uint64_t))off_1E339A8F0[v12])(&v61, &v49, a1 + 64);
    LOBYTE(v49) = 0;
    LODWORD(v50) = -1;
    v13 = LODWORD(v62);
    if (LODWORD(v62) == -1)
    {
      v51 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t *, uint64_t **))off_1E339A948[LODWORD(v62)])(&v58, &v49, &v61);
      LODWORD(v50) = v13;
      v51 = 1;
      if (LODWORD(v62) != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[LODWORD(v62)])(&v58, &v61);
    }
  }
  else
  {
    LOBYTE(v49) = 0;
    v51 = 0;
  }
  LOBYTE(v61) = 0;
  LODWORD(v62) = -1;
  v14 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t **))off_1E339A948[v55])(&v58, &v61, &v54);
    LODWORD(v62) = v14;
  }
  LOBYTE(v63) = 0;
  LODWORD(v65) = -1;
  v15 = v53;
  if (v53 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v53])(&v58, &v63, &v52);
    LODWORD(v65) = v15;
  }
  LOBYTE(v66) = 0;
  v69 = -1;
  v16 = v60;
  if ((_DWORD)v60 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339AA50[v60])(&v58, &v66, &v59);
    v69 = v16;
  }
  LOBYTE(v70) = 0;
  v72 = 0;
  if (v51)
  {
    v71 = -1;
    v17 = LODWORD(v50);
    if (LODWORD(v50) == -1)
    {
      v72 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[LODWORD(v50)])(&v58, &v70, &v49);
      v71 = v17;
      v72 = 1;
      if (v51 && LODWORD(v50) != -1)
        ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v50)])(&v58, &v49);
    }
  }
  if ((_DWORD)v60 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E339AA28[v60])(&v49, &v59);
  if (v53 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v53])(&v59, &v52);
  if (v55 != -1)
    ((void (*)(__int128 *, uint64_t **))off_1E339A920[v55])(&v59, &v54);
  v49 = (uint64_t)&v56;
  if (LODWORD(v62) == -1)
    goto LABEL_54;
  *(_QWORD *)&v59 = &v49;
  v18 = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A970[LODWORD(v62)])(&v59, &v61);
  v49 = (uint64_t)&v56;
  if (LODWORD(v65) == -1
    || (v20 = v18,
        v21 = v19,
        *(_QWORD *)&v59 = &v49,
        v22 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v65)])(&v59, &v63),
        v54 = &v56,
        v69 == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v24 = v22;
  v25 = v23;
  v49 = (uint64_t)&v54;
  ((void (*)(__int128 *__return_ptr, uint64_t *, __int16 *))off_1E339AA78[v69])(&v59, &v49, &v66);
  v27 = v72;
  if (v72)
  {
    v54 = &v56;
    if (v71 != -1)
    {
      v49 = (uint64_t)&v54;
      v28 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v71])(&v49, &v70);
      v27 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v28 = 0;
LABEL_37:
  v44 = v59;
  v43[0] = v20;
  v43[1] = v21;
  v43[2] = v24;
  v43[3] = v25;
  v45 = v60;
  v46 = v28;
  v47 = v26;
  v48 = v27;
  WebCore::convertToTypedColor<WebCore::LCHFunction>((uint64_t)v43);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v30;
  *(_DWORD *)(result + 8) = v32;
  *(_DWORD *)(result + 12) = v34;
  *(_DWORD *)(result + 16) = v36;
  *a2 = result | 0xA0C000000000000;
  if (v72)
  {
    if (v71 != -1)
      result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v71])(&v59, &v70);
    v71 = -1;
  }
  if (v69 != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339AA28[v69])(&v59, &v66);
  v69 = -1;
  if (LODWORD(v65) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v65)])(&v59, &v63);
  LODWORD(v65) = -1;
  if (LODWORD(v62) != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A920[LODWORD(v62)])(&v59, &v61);
  if (v56)
    result = WTF::fastFree((WTF *)(v56 - 16), v38);
  if ((v57 & 0x8000000000000) != 0)
  {
    result = v57 & 0xFFFFFFFFFFFFLL;
    do
    {
      v41 = __ldaxr((unsigned int *)result);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)result));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v38);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::LCHFunction>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ABC0[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ABD8[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ABF0[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 72))
    return;
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossy<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC08[v5])(&v8, a1 + 56);
}

void WebCore::Color::callOnUnderlyingType<WebCore::LCHA<float> WebCore::Color::toColorTypeLossy<WebCore::LCHA<float>>(void)::{lambda(WebCore::LCHA<float> const&)#1}>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  unint64_t v12;
  __int128 *v13;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v11 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v12 = a2;
    v13 = &v11;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v12);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v11 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v11 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v11 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v12) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v11);
    HIDWORD(v12) = v4;
    v13 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v12);
    v12 = __PAIR64__(v8, v7);
    v13 = (__int128 *)__PAIR64__(v10, v9);
    WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)&v12);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4LCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float v20;
  unsigned int v21;
  int v22;
  int v23;
  int8x8_t *v24;
  float v25;
  float v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int128 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  __int128 v75[2];
  int v76;
  _OWORD v77[2];
  int v78;
  __int128 v79;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v71 = v11.f32[0];
      v73 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v71, 2.1992);
      v12.f32[1] = v73;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v75);
      goto LABEL_34;
    case 2:
      v24 = *(int8x8_t **)(a2 + 8);
      v3 = v24[1].i32[1];
      v25 = *(float *)v24[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 < 0.0)
        v26 = -v26;
      v8 = v26;
      v27 = (float32x2_t)vand_s8(*v24, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v24), (int8x8_t)vcgez_f32((float32x2_t)*v24)));
      v28 = (int8x8_t)vcltz_s32((int32x2_t)v27);
      v29 = vabs_f32(v27);
      v72 = v29.f32[0];
      v74 = powf(v29.f32[1], 2.1992);
      v30.f32[0] = powf(v72, 2.1992);
      v30.f32[1] = v74;
      v19 = vbsl_s8(v28, (int8x8_t)vneg_f32(v30), (int8x8_t)v30);
LABEL_16:
      *(int8x8_t *)&v79 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      *((_QWORD *)&v79 + 1) = __PAIR64__(v3, LODWORD(v8));
      v77[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v77[1] = unk_1968BFBBC;
      v78 = 1065207884;
      v75[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v75[1] = unk_1969EF33C;
      v76 = 1061190357;
      v20 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v79, (float *)v77, (float *)v75);
      goto LABEL_34;
    case 3:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v75);
      goto LABEL_34;
    case 4:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v75);
      goto LABEL_34;
    case 5:
      v55 = *(_QWORD *)(a2 + 8);
      v56 = *(float *)v55;
      v44 = *(_DWORD *)(v55 + 12);
      v57 = *(float *)(v55 + 4);
      v46 = *(float *)(v55 + 8);
      if (fabsf(*(float *)v55) <= 0.03125)
      {
        v49 = v56 * 0.0625;
      }
      else
      {
        v58 = *(float *)v55;
        v59 = powf(v56, 1.8);
        if (v58 >= 0.0)
          v49 = v59;
        else
          v49 = -v59;
      }
      if (fabsf(v57) <= 0.03125)
      {
        v66 = v57 * 0.0625;
      }
      else
      {
        v67 = powf(v57, 1.8);
        if (v57 >= 0.0)
          v66 = v67;
        else
          v66 = -v67;
      }
      if (fabsf(v46) <= 0.03125)
        goto LABEL_74;
      v70 = powf(v46, 1.8);
      if (v46 < 0.0)
        v70 = -v70;
      goto LABEL_75;
    case 6:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v75);
      goto LABEL_34;
    case 7:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_47;
    case 8:
      v79 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v79);
      goto LABEL_46;
    case 9:
      v79 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v79);
LABEL_46:
      *(_QWORD *)&v75[0] = __PAIR64__(v32, LODWORD(v31));
      *((_QWORD *)&v75[0] + 1) = __PAIR64__(v34, v33);
LABEL_47:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)v75);
      goto LABEL_38;
    case 10:
      return;
    case 11:
      v77[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_39;
    case 12:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v75);
      goto LABEL_34;
    case 13:
      v79 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v79);
      *(_QWORD *)&v75[0] = __PAIR64__(v36, v35);
      *((_QWORD *)&v75[0] + 1) = __PAIR64__(v38, v37);
      goto LABEL_25;
    case 14:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_25:
      v39 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v75);
      *(float32x2_t *)&v77[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, v39), (float32x2_t)0x3F7D8D1C3CBBFB13, v40), (float32x2_t)0xBC8BDE5ABD4D9668, v41);
      *((float *)v77 + 2) = (float)((float)((float)(v39 * -0.009243) + 0.0) + (float)(v40 * 0.015055))
                          + (float)(v41 * 0.75187);
      goto LABEL_35;
    case 15:
      v42 = *(_QWORD *)(a2 + 8);
      v43 = *(float *)v42;
      v44 = *(_DWORD *)(v42 + 12);
      v45 = *(float *)(v42 + 4);
      v46 = *(float *)(v42 + 8);
      if (*(float *)v42 <= 0.03125)
      {
        v49 = v43 * 0.0625;
      }
      else
      {
        v47 = powf(v43, 1.8);
        if (v47 > 0.0)
          v48 = v47;
        else
          v48 = 0.0;
        if (v47 >= 1.0)
          v49 = 1.0;
        else
          v49 = v48;
      }
      if (v45 <= 0.03125)
      {
        v66 = v45 * 0.0625;
      }
      else
      {
        v64 = powf(v45, 1.8);
        v65 = 0.0;
        if (v64 > 0.0)
          v65 = v64;
        if (v64 >= 1.0)
          v66 = 1.0;
        else
          v66 = v65;
      }
      if (v46 <= 0.03125)
      {
LABEL_74:
        v70 = v46 * 0.0625;
      }
      else
      {
        v68 = powf(v46, 1.8);
        v69 = 0.0;
        if (v68 > 0.0)
          v69 = v68;
        if (v68 >= 1.0)
          v70 = 1.0;
        else
          v70 = v69;
      }
LABEL_75:
      *(float32x2_t *)&v77[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v49), (float32x2_t)0x3F363AD53E0A6CF7, v66), (float32x2_t)0x38BC9C873D00667BLL, v70);
      *((float *)v77 + 2) = (float)((float)((float)(v49 * 0.0) + 0.0) + (float)(v66 * 0.0)) + (float)(v70 * 0.8251);
      HIDWORD(v77[0]) = v44;
      goto LABEL_36;
    case 16:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v75);
      goto LABEL_34;
    case 18:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v50 = v75;
      goto LABEL_37;
    case 19:
      v60 = *(_QWORD *)(a2 + 8);
      v61 = *(float *)v60;
      v62 = *(float *)(v60 + 4);
      v63 = *(float *)(v60 + 8);
      v23 = *(_DWORD *)(v60 + 12);
      *(float32x2_t *)&v77[0] = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3CF2B6053F862290, *(float *)v60), (float32x2_t)0x3F7D8D1C3CBBFB13, v62), (float32x2_t)0xBC8BDE5ABD4D9668, v63);
      *((float *)v77 + 2) = (float)((float)((float)(v61 * -0.009243) + 0.0) + (float)(v62 * 0.015055))
                          + (float)(v63 * 0.75187);
      goto LABEL_35;
    default:
      v75[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v20 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v75);
LABEL_34:
      *(_QWORD *)&v77[0] = __PAIR64__(v21, LODWORD(v20));
      DWORD2(v77[0]) = v22;
LABEL_35:
      HIDWORD(v77[0]) = v23;
LABEL_36:
      v50 = v77;
LABEL_37:
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v50);
LABEL_38:
      *(_QWORD *)&v77[0] = __PAIR64__(v52, v51);
      *((_QWORD *)&v77[0] + 1) = __PAIR64__(v54, v53);
LABEL_39:
      WebCore::ColorConversion<WebCore::LCHA<float>,WebCore::Lab<float>,void>::convert((uint64_t)v77);
      return;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 100.0;
  if (*a2 <= 100.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 100.0;
  if (*a2 <= 100.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2 * 1.5;
  if (v2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if (*a2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  long double v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = fmod(v3, 360.0);
  return fmod(v4 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, long double *a2)
{
  long double v2;

  v2 = fmod(*a2, 360.0);
  return fmod(v2 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_11LCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::OKLabFunction>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossy<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 836;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 838;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::OKLabFunction>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0xE0C000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::OKLabFunction>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC20[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC38[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC50[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossy<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC68[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::OKLab<float> WebCore::Color::toColorTypeLossy<WebCore::OKLab<float>>(void)::{lambda(WebCore::OKLab<float> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  int v7;
  __int128 v8;
  float32x2_t v9;
  __int128 *v10;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v8 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v9 = (float32x2_t)a2;
    v10 = &v8;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v9);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v8 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v8 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v8 + 3) = (float)HIBYTE(v3) / 255.0;
    v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v8);
    v9 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v4), (float32x2_t)0x3F37154B3EB7154BLL, v5), (float32x2_t)0x3D93D9913E38CFF5, v6);
    *(float *)&v10 = (float)((float)((float)(v4 * 0.019331) + 0.0) + (float)(v5 * 0.11919)) + (float)(v6 * 0.95053);
    HIDWORD(v10) = v7;
    WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v9);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_5OKLabIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  float32x2_t v54;
  uint64_t v55;
  float v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  switch(a1)
  {
    case 0:
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(float *)v17;
      v19 = *(float *)(v17 + 4);
      v20 = *(float *)(v17 + 8);
      v21 = *(_DWORD *)(v17 + 12);
      v22 = powf(fabsf(*(float *)v17), 2.1992);
      if (v18 < 0.0)
        v22 = -v22;
      if (v22 > 0.0)
        v23 = v22;
      else
        v23 = 0.0;
      if (v22 >= 1.0)
        v24 = 1.0;
      else
        v24 = v23;
      v25 = powf(fabsf(v19), 2.1992);
      if (v19 < 0.0)
        v25 = -v25;
      if (v25 > 0.0)
        v26 = v25;
      else
        v26 = 0.0;
      if (v25 >= 1.0)
        v27 = 1.0;
      else
        v27 = v26;
      v28 = powf(fabsf(v20), 2.1992);
      if (v20 < 0.0)
        v28 = -v28;
      if (v28 > 0.0)
        v29 = v28;
      else
        v29 = 0.0;
      if (v28 >= 1.0)
        v30 = 1.0;
      else
        v30 = v29;
      *(float32x2_t *)&v59 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v24), (float32x2_t)0x3F209AE63E3E02FBLL, v27), (float32x2_t)0x3D9A32683E40BF03, v30);
      *((float *)&v59 + 2) = (float)((float)((float)(v24 * 0.027031) + 0.0) + (float)(v27 * 0.070689))
                           + (float)(v30 * 0.99134);
      HIDWORD(v59) = v21;
      goto LABEL_58;
    case 1:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 2:
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(float *)v34;
      v36 = *(float *)(v34 + 4);
      v37 = *(float *)(v34 + 8);
      v38 = *(_DWORD *)(v34 + 12);
      v39 = powf(fabsf(*(float *)v34), 2.1992);
      if (v35 >= 0.0)
        v40 = v39;
      else
        v40 = -v39;
      v41 = powf(fabsf(v36), 2.1992);
      if (v36 >= 0.0)
        v42 = v41;
      else
        v42 = -v41;
      v43 = powf(fabsf(v37), 2.1992);
      if (v37 < 0.0)
        v43 = -v43;
      *(float32x2_t *)&v59 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v40), (float32x2_t)0x3F209AE63E3E02FBLL, v42), (float32x2_t)0x3D9A32683E40BF03, v43);
      *((float *)&v59 + 2) = (float)((float)((float)(v40 * 0.027031) + 0.0) + (float)(v42 * 0.070689))
                           + (float)(v43 * 0.99134);
      HIDWORD(v59) = v38;
      goto LABEL_58;
    case 3:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 4:
    case 12:
      v2 = *(_QWORD *)(a2 + 8);
      v3 = *(float *)(v2 + 4);
      v4 = *(float *)(v2 + 8);
      v5 = *(_DWORD *)(v2 + 12);
      v6 = (float)((float)((float)(*(float *)v2 * 0.019331) + 0.0) + (float)(v3 * 0.11919)) + (float)(v4 * 0.95053);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, *(float *)v2), (float32x2_t)0x3F37154B3EB7154BLL, v3);
      v8 = (float32x2_t)0x3D93D9913E38CFF5;
      goto LABEL_56;
    case 5:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 6:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 7:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_46;
    case 8:
      v57 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v44 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v57);
      goto LABEL_45;
    case 9:
      v57 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v44 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v57);
LABEL_45:
      *(_QWORD *)&v58 = __PAIR64__(v45, LODWORD(v44));
      *((_QWORD *)&v58 + 1) = __PAIR64__(v47, v46);
LABEL_46:
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 10:
      v57 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v57);
      *(_QWORD *)&v58 = __PAIR64__(v49, v48);
      *((_QWORD *)&v58 + 1) = __PAIR64__(v51, v50);
      goto LABEL_49;
    case 11:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_49:
      v52 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v58);
      v12 = (float)((float)(v52 * 0.012314) + 0.0) + (float)(v53 * -0.020508);
      v54 = vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v52);
      v14 = 1.3304;
      v15 = vmla_n_f32(v54, (float32x2_t)0x3F814787BCBD38F9, v53);
      v16 = (float32x2_t)0x3CAC5F1A3D818E10;
      goto LABEL_50;
    case 13:
      v59 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v59);
      return;
    case 14:
      return;
    case 15:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v58);
      goto LABEL_54;
    case 16:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v58);
LABEL_54:
      *(_QWORD *)&v59 = __PAIR64__(v32, LODWORD(v31));
      DWORD2(v59) = v33;
      goto LABEL_57;
    case 18:
      v55 = *(_QWORD *)(a2 + 8);
      v56 = *(float *)(v55 + 4);
      v4 = *(float *)(v55 + 8);
      v5 = *(_DWORD *)(v55 + 12);
      v6 = (float)((float)((float)(*(float *)v55 * 0.012314) + 0.0) + (float)(v56 * -0.020508)) + (float)(v4 * 1.3304);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, *(float *)v55), (float32x2_t)0x3F814787BCBD38F9, v56);
      v8 = (float32x2_t)0x3CAC5F1A3D818E10;
LABEL_56:
      *(float32x2_t *)&v59 = vmla_n_f32(v7, v8, v4);
      *((float *)&v59 + 2) = v6;
      goto LABEL_57;
    case 19:
      v59 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_58;
    default:
      v58 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v58);
      v12 = (float)((float)(v9 * 0.019331) + 0.0) + (float)(v11 * 0.11919);
      v13 = vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v9);
      v14 = 0.95053;
      v15 = vmla_n_f32(v13, (float32x2_t)0x3F37154B3EB7154BLL, v11);
      v16 = (float32x2_t)0x3D93D9913E38CFF5;
LABEL_50:
      *(float32x2_t *)&v59 = vmla_n_f32(v15, v16, v10);
      *((float *)&v59 + 2) = v12 + (float)(v10 * v14);
LABEL_57:
      HIDWORD(v59) = v5;
LABEL_58:
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v59);
      return;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.004;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.004;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLabFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::OKLCHFunction>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t result;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD v43[4];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  double v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  double v62;
  __int16 v63;
  unsigned __int8 v64;
  double v65;
  __int16 v66;
  unsigned __int8 v67;
  double v68;
  int v69;
  double v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v57 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v39 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossy<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>(&v57, (unint64_t)&v61);
  LOWORD(v61) = 836;
  BYTE2(v61) = 1;
  v62 = v5;
  v63 = 839;
  v64 = 1;
  v65 = v6;
  v66 = 834;
  v67 = 1;
  v68 = v7;
  LOWORD(v69) = 126;
  BYTE2(v69) = 1;
  v70 = v8;
  v56 = 0;
  v49 = 1;
  v50 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v61, (uint64_t)&v49, (uint64_t)&v59);
  v49 = v64;
  v50 = v65;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v63, (uint64_t)&v49, (uint64_t)&v59);
  v49 = v67;
  v50 = v68;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v66, (uint64_t)&v49, (uint64_t)&v59);
  v49 = BYTE2(v69);
  v50 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v56, &v69, (uint64_t)&v49, (uint64_t)&v59);
  *(_QWORD *)&v59 = &v56;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v59;
  ((void (*)(uint64_t **__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v9])(&v54, &v61, a1 + 8);
  *(_QWORD *)&v59 = &v56;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v61 = (uint64_t *)&v59;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v10])(&v52, &v61, a1 + 24);
  v49 = (uint64_t)&v56;
  v11 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v61 = &v49;
  ((void (*)(__int128 *__return_ptr, uint64_t **, uint64_t))off_1E339A9F8[v11])(&v59, &v61, a1 + 40);
  if (*(_BYTE *)(a1 + 80))
  {
    v58 = &v56;
    v12 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v49 = (uint64_t)&v58;
    ((void (*)(uint64_t **__return_ptr, uint64_t *, uint64_t))off_1E339A8F0[v12])(&v61, &v49, a1 + 64);
    LOBYTE(v49) = 0;
    LODWORD(v50) = -1;
    v13 = LODWORD(v62);
    if (LODWORD(v62) == -1)
    {
      v51 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t *, uint64_t **))off_1E339A948[LODWORD(v62)])(&v58, &v49, &v61);
      LODWORD(v50) = v13;
      v51 = 1;
      if (LODWORD(v62) != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[LODWORD(v62)])(&v58, &v61);
    }
  }
  else
  {
    LOBYTE(v49) = 0;
    v51 = 0;
  }
  LOBYTE(v61) = 0;
  LODWORD(v62) = -1;
  v14 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t **))off_1E339A948[v55])(&v58, &v61, &v54);
    LODWORD(v62) = v14;
  }
  LOBYTE(v63) = 0;
  LODWORD(v65) = -1;
  v15 = v53;
  if (v53 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v53])(&v58, &v63, &v52);
    LODWORD(v65) = v15;
  }
  LOBYTE(v66) = 0;
  v69 = -1;
  v16 = v60;
  if ((_DWORD)v60 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339AA50[v60])(&v58, &v66, &v59);
    v69 = v16;
  }
  LOBYTE(v70) = 0;
  v72 = 0;
  if (v51)
  {
    v71 = -1;
    v17 = LODWORD(v50);
    if (LODWORD(v50) == -1)
    {
      v72 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, double *, uint64_t *))off_1E339A948[LODWORD(v50)])(&v58, &v70, &v49);
      v71 = v17;
      v72 = 1;
      if (v51 && LODWORD(v50) != -1)
        ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v50)])(&v58, &v49);
    }
  }
  if ((_DWORD)v60 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E339AA28[v60])(&v49, &v59);
  if (v53 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v53])(&v59, &v52);
  if (v55 != -1)
    ((void (*)(__int128 *, uint64_t **))off_1E339A920[v55])(&v59, &v54);
  v49 = (uint64_t)&v56;
  if (LODWORD(v62) == -1)
    goto LABEL_54;
  *(_QWORD *)&v59 = &v49;
  v18 = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A970[LODWORD(v62)])(&v59, &v61);
  v49 = (uint64_t)&v56;
  if (LODWORD(v65) == -1
    || (v20 = v18,
        v21 = v19,
        *(_QWORD *)&v59 = &v49,
        v22 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v65)])(&v59, &v63),
        v54 = &v56,
        v69 == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v24 = v22;
  v25 = v23;
  v49 = (uint64_t)&v54;
  ((void (*)(__int128 *__return_ptr, uint64_t *, __int16 *))off_1E339AA78[v69])(&v59, &v49, &v66);
  v27 = v72;
  if (v72)
  {
    v54 = &v56;
    if (v71 != -1)
    {
      v49 = (uint64_t)&v54;
      v28 = ((uint64_t (*)(uint64_t *, double *))off_1E339A970[v71])(&v49, &v70);
      v27 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v28 = 0;
LABEL_37:
  v44 = v59;
  v43[0] = v20;
  v43[1] = v21;
  v43[2] = v24;
  v43[3] = v25;
  v45 = v60;
  v46 = v28;
  v47 = v26;
  v48 = v27;
  WebCore::convertToTypedColor<WebCore::OKLCHFunction>((uint64_t)v43);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v30;
  *(_DWORD *)(result + 8) = v32;
  *(_DWORD *)(result + 12) = v34;
  *(_DWORD *)(result + 16) = v36;
  *a2 = result | 0xD0C000000000000;
  if (v72)
  {
    if (v71 != -1)
      result = ((uint64_t (*)(__int128 *, double *))off_1E339A920[v71])(&v59, &v70);
    v71 = -1;
  }
  if (v69 != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339AA28[v69])(&v59, &v66);
  v69 = -1;
  if (LODWORD(v65) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v65)])(&v59, &v63);
  LODWORD(v65) = -1;
  if (LODWORD(v62) != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A920[LODWORD(v62)])(&v59, &v61);
  if (v56)
    result = WTF::fastFree((WTF *)(v56 - 16), v38);
  if ((v57 & 0x8000000000000) != 0)
  {
    result = v57 & 0xFFFFFFFFFFFFLL;
    do
    {
      v41 = __ldaxr((unsigned int *)result);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)result));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v38);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::OKLCHFunction>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC80[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AC98[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ACB0[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 72))
    return;
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossy<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ACC8[v5])(&v8, a1 + 56);
}

void WebCore::Color::callOnUnderlyingType<WebCore::OKLCHA<float> WebCore::Color::toColorTypeLossy<WebCore::OKLCHA<float>>(void)::{lambda(WebCore::OKLCHA<float> const&)#1}>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  unint64_t v13;
  __int128 *v14;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v12 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v13 = a2;
    v14 = &v12;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(HIBYTE(v2), (uint64_t)&v13);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v12 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v12 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v12 + 3) = (float)HIBYTE(v3) / 255.0;
    v4 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v12);
    v13 = (unint64_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v4), (float32x2_t)0x3F37154B3EB7154BLL, v5), (float32x2_t)0x3D93D9913E38CFF5, v6);
    *(float *)&v14 = (float)((float)((float)(v4 * 0.019331) + 0.0) + (float)(v5 * 0.11919)) + (float)(v6 * 0.95053);
    HIDWORD(v14) = v7;
    WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)&v13);
    v13 = __PAIR64__(v9, v8);
    v14 = (__int128 *)__PAIR64__(v11, v10);
    WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v13);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_6OKLCHAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  float32x2_t v54;
  uint64_t v55;
  float v56;
  float *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  switch(a1)
  {
    case 0:
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(float *)v17;
      v19 = *(float *)(v17 + 4);
      v20 = *(float *)(v17 + 8);
      v21 = *(_DWORD *)(v17 + 12);
      v22 = powf(fabsf(*(float *)v17), 2.1992);
      if (v18 < 0.0)
        v22 = -v22;
      if (v22 > 0.0)
        v23 = v22;
      else
        v23 = 0.0;
      if (v22 >= 1.0)
        v24 = 1.0;
      else
        v24 = v23;
      v25 = powf(fabsf(v19), 2.1992);
      if (v19 < 0.0)
        v25 = -v25;
      if (v25 > 0.0)
        v26 = v25;
      else
        v26 = 0.0;
      if (v25 >= 1.0)
        v27 = 1.0;
      else
        v27 = v26;
      v28 = powf(fabsf(v20), 2.1992);
      if (v20 < 0.0)
        v28 = -v28;
      if (v28 > 0.0)
        v29 = v28;
      else
        v29 = 0.0;
      if (v28 >= 1.0)
        v30 = 1.0;
      else
        v30 = v29;
      *(float32x2_t *)&v64 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v24), (float32x2_t)0x3F209AE63E3E02FBLL, v27), (float32x2_t)0x3D9A32683E40BF03, v30);
      *((float *)&v64 + 2) = (float)((float)((float)(v24 * 0.027031) + 0.0) + (float)(v27 * 0.070689))
                           + (float)(v30 * 0.99134);
      HIDWORD(v64) = v21;
      goto LABEL_58;
    case 1:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 2:
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(float *)v34;
      v36 = *(float *)(v34 + 4);
      v37 = *(float *)(v34 + 8);
      v38 = *(_DWORD *)(v34 + 12);
      v39 = powf(fabsf(*(float *)v34), 2.1992);
      if (v35 >= 0.0)
        v40 = v39;
      else
        v40 = -v39;
      v41 = powf(fabsf(v36), 2.1992);
      if (v36 >= 0.0)
        v42 = v41;
      else
        v42 = -v41;
      v43 = powf(fabsf(v37), 2.1992);
      if (v37 < 0.0)
        v43 = -v43;
      *(float32x2_t *)&v64 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E983D9A3F13A095, v40), (float32x2_t)0x3F209AE63E3E02FBLL, v42), (float32x2_t)0x3D9A32683E40BF03, v43);
      *((float *)&v64 + 2) = (float)((float)((float)(v40 * 0.027031) + 0.0) + (float)(v42 * 0.070689))
                           + (float)(v43 * 0.99134);
      HIDWORD(v64) = v38;
      goto LABEL_58;
    case 3:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 4:
    case 12:
      v2 = *(_QWORD *)(a2 + 8);
      v3 = *(float *)(v2 + 4);
      v4 = *(float *)(v2 + 8);
      v5 = *(_DWORD *)(v2 + 12);
      v6 = (float)((float)((float)(*(float *)v2 * 0.019331) + 0.0) + (float)(v3 * 0.11919)) + (float)(v4 * 0.95053);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, *(float *)v2), (float32x2_t)0x3F37154B3EB7154BLL, v3);
      v8 = (float32x2_t)0x3D93D9913E38CFF5;
      goto LABEL_56;
    case 5:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 6:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 7:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_46;
    case 8:
      v62 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v44 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v62);
      goto LABEL_45;
    case 9:
      v62 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v44 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v62);
LABEL_45:
      *(_QWORD *)&v63 = __PAIR64__(v45, LODWORD(v44));
      *((_QWORD *)&v63 + 1) = __PAIR64__(v47, v46);
LABEL_46:
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 10:
      v62 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v62);
      *(_QWORD *)&v63 = __PAIR64__(v49, v48);
      *((_QWORD *)&v63 + 1) = __PAIR64__(v51, v50);
      goto LABEL_49;
    case 11:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_49:
      v52 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v63);
      v12 = (float)((float)(v52 * 0.012314) + 0.0) + (float)(v53 * -0.020508);
      v54 = vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, v52);
      v14 = 1.3304;
      v15 = vmla_n_f32(v54, (float32x2_t)0x3F814787BCBD38F9, v53);
      v16 = (float32x2_t)0x3CAC5F1A3D818E10;
      goto LABEL_50;
    case 13:
      return;
    case 14:
      v64 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_60;
    case 15:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v63);
      goto LABEL_54;
    case 16:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v31 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v63);
LABEL_54:
      *(_QWORD *)&v64 = __PAIR64__(v32, LODWORD(v31));
      DWORD2(v64) = v33;
      goto LABEL_57;
    case 18:
      v55 = *(_QWORD *)(a2 + 8);
      v56 = *(float *)(v55 + 4);
      v4 = *(float *)(v55 + 8);
      v5 = *(_DWORD *)(v55 + 12);
      v6 = (float)((float)((float)(*(float *)v55 * 0.012314) + 0.0) + (float)(v56 * -0.020508)) + (float)(v4 * 1.3304);
      v7 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBCE867983F7499E8, *(float *)v55), (float32x2_t)0x3F814787BCBD38F9, v56);
      v8 = (float32x2_t)0x3CAC5F1A3D818E10;
LABEL_56:
      *(float32x2_t *)&v64 = vmla_n_f32(v7, v8, v4);
      *((float *)&v64 + 2) = v6;
      goto LABEL_57;
    case 19:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v57 = (float *)&v63;
      goto LABEL_59;
    default:
      v63 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v63);
      v12 = (float)((float)(v9 * 0.019331) + 0.0) + (float)(v11 * 0.11919);
      v13 = vmla_n_f32(0, (float32x2_t)0x3E59BE0A3ED324E3, v9);
      v14 = 0.95053;
      v15 = vmla_n_f32(v13, (float32x2_t)0x3F37154B3EB7154BLL, v11);
      v16 = (float32x2_t)0x3D93D9913E38CFF5;
LABEL_50:
      *(float32x2_t *)&v64 = vmla_n_f32(v15, v16, v10);
      *((float *)&v64 + 2) = v12 + (float)(v10 * v14);
LABEL_57:
      HIDWORD(v64) = v5;
LABEL_58:
      v57 = (float *)&v64;
LABEL_59:
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(v57);
      *(_QWORD *)&v64 = __PAIR64__(v59, v58);
      *((_QWORD *)&v64 + 1) = __PAIR64__(v61, v60);
LABEL_60:
      WebCore::ColorConversion<WebCore::OKLCHA<float>,WebCore::OKLab<float>,void>::convert((uint64_t)&v64);
      return;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2 * 0.004;
  if (v2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;

  v2 = *a2;
  if (*a2 < 0.0)
    return 0.0;
  return v2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  long double v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = fmod(v3, 360.0);
  return fmod(v4 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, long double *a2)
{
  long double v2;

  v2 = fmod(*a2, 360.0);
  return fmod(v2 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj2EJNSA_8AngleRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_13OKLCHFunctionELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v5 = WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 832;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x20E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ACE0[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ACF8[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD10[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD28[v5])(&v8, a1 + 48);
}

float WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  __int128 v16;
  _OWORD v17[2];
  int v18;
  _OWORD v19[2];
  int v20;
  float v21[4];

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v17[0] = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v19[0] = a2;
    *((_QWORD *)&v19[0] + 1) = v17;
    return _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_16A98RGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)v19);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v16 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v16 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v16 + 3) = (float)HIBYTE(v3) / 255.0;
    v21[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v16);
    v21[1] = v4;
    v21[2] = v5;
    v21[3] = v6;
    v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
    v19[1] = unk_1969EF2D0;
    v20 = 1064523283;
    v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
    v17[1] = unk_1969EF3A8;
    v18 = 1065480513;
    v7 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v21, (float *)v19, (float *)v17);
    v9 = v8;
    v11 = v10;
    v12 = LODWORD(v7);
    v13 = powf(fabsf(v7), 0.45471);
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = -v13;
    powf(fabsf(v9), 0.45471);
    powf(fabsf(v11), 0.45471);
  }
  return v14;
}

float _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_16A98RGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  __int128 *v2;
  unsigned int v3;
  unsigned int v4;
  __int32 v5;
  __int128 *v6;
  float v7;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int32 v19;
  __int128 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  __int128 v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  int8x16_t v55;

  switch(a1)
  {
    case 0:
      return **(float **)(a2 + 8);
    case 1:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v52);
    case 2:
      return **(float **)(a2 + 8);
    case 3:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)&v52);
    case 4:
    case 12:
      v55 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
      v2 = &WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
      goto LABEL_26;
    case 5:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v52);
    case 6:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v52);
    case 7:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)&v52);
    case 8:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v49);
      goto LABEL_13;
    case 9:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v9 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v49);
LABEL_13:
      *(_QWORD *)&v52 = __PAIR64__(v10, LODWORD(v9));
      *((_QWORD *)&v52 + 1) = __PAIR64__(v12, v11);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((int8x8_t *)&v52);
    case 10:
      v47 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v47);
      *(_QWORD *)&v48 = __PAIR64__(v14, v13);
      *((_QWORD *)&v48 + 1) = __PAIR64__(v16, v15);
      goto LABEL_17;
    case 11:
      v48 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_17:
      v55.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v48);
      *(uint64_t *)((char *)v55.i64 + 4) = __PAIR64__(v18, v17);
      v55.i32[3] = v19;
      v6 = &WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
      goto LABEL_18;
    case 13:
      v49 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v49);
      *(_QWORD *)&v52 = __PAIR64__(v29, v28);
      *((_QWORD *)&v52 + 1) = __PAIR64__(v31, v30);
      goto LABEL_21;
    case 14:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_21:
      v32 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v52);
      goto LABEL_28;
    case 15:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v52);
    case 16:
      v52 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v52);
    case 18:
      v55 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
      v2 = &WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
LABEL_26:
      v35 = v2[1];
      v52 = *v2;
      v53 = v35;
      v54 = *((_DWORD *)v2 + 8);
      v49 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
      v50 = unk_1969EF3A8;
      v51 = 1065480513;
      v36 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v55.i32, (float *)&v52, (float *)&v49);
      v23 = v37;
      v25 = v38;
      v26 = fabsf(v36);
      v27 = v36;
      goto LABEL_29;
    case 19:
      v39 = *(float **)(a2 + 8);
      v32 = *v39;
      v33 = v39[1];
      v34 = v39[2];
LABEL_28:
      v40 = (float)((float)(v32 * 0.013444) + 0.0) + (float)(v33 * -0.11836);
      v41 = (float)((float)((float)(v32 * -0.96924) + 0.0) + (float)(v33 * 1.876)) + (float)(v34 * 0.041555);
      v42 = (float)((float)((float)(v32 * 2.0416) + 0.0) + (float)(v33 * -0.56501)) + (float)(v34 * -0.34473);
      v43 = v40 + (float)(v34 * 1.0152);
      v44 = v42;
      v23 = v41;
      v25 = v43;
      v26 = fabsf(v42);
      v27 = v44;
      goto LABEL_29;
    default:
      v48 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v55.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v48);
      *(uint64_t *)((char *)v55.i64 + 4) = __PAIR64__(v4, v3);
      v55.i32[3] = v5;
      v6 = &WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
LABEL_18:
      v20 = v6[1];
      v52 = *v6;
      v53 = v20;
      v54 = *((_DWORD *)v6 + 8);
      v49 = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::xyzToLinear;
      v50 = unk_1969EF3A8;
      v51 = 1065480513;
      v21 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v55.i32, (float *)&v52, (float *)&v49);
      v23 = v22;
      v25 = v24;
      v26 = fabsf(v21);
      v27 = v21;
LABEL_29:
      v45 = powf(v26, 0.45471);
      if (v27 >= 0.0)
        v7 = v45;
      else
        v7 = -v45;
      powf(fabsf(v23), 0.45471);
      powf(fabsf(v25), 0.45471);
      return v7;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 832;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x30E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD40[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD58[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD70[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AD88[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  unsigned int v18;
  unsigned int v19;
  __int32 v20;
  int8x8_t *v21;
  __int32 v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  float v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int8x8_t *v38;
  __int32 v39;
  float v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  __int32 v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  int32x2_t v92;
  __int128 v93;
  __int128 v94;
  int8x16_t v95;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v87 = v10.f32[0];
      v90 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v87, 2.1992);
      v11.f32[1] = v90;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v95.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v95.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v95);
      return;
    case 1:
    case 3:
      return;
    case 2:
      v21 = *(int8x8_t **)(a2 + 8);
      v22 = v21[1].i32[1];
      v23 = *(float *)v21[1].i32;
      v24 = powf(fabsf(v23), 2.1992);
      if (v23 >= 0.0)
        v25 = v24;
      else
        v25 = -v24;
      v26 = (float32x2_t)vand_s8(*v21, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v21), (int8x8_t)vcgez_f32((float32x2_t)*v21)));
      v27 = (int8x8_t)vcltz_s32((int32x2_t)v26);
      v28 = vabs_f32(v26);
      v88 = v28.f32[0];
      v91 = powf(v28.f32[1], 2.1992);
      v29.f32[0] = powf(v88, 2.1992);
      v29.f32[1] = v91;
      *(int8x8_t *)v95.i8 = vbsl_s8(v27, (int8x8_t)vneg_f32(v29), (int8x8_t)v29);
      v95.i64[1] = __PAIR64__(v22, LODWORD(v25));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v95);
      return;
    case 4:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_94;
    case 5:
      v30 = *(_QWORD *)(a2 + 8);
      v31 = *(float *)v30;
      v32 = *(_DWORD *)(v30 + 12);
      v33 = *(float *)(v30 + 4);
      v34 = *(float *)(v30 + 8);
      if (fabsf(*(float *)v30) <= 0.03125)
      {
        v37 = v31 * 0.0625;
      }
      else
      {
        v35 = *(float *)v30;
        v36 = powf(v31, 1.8);
        if (v35 >= 0.0)
          v37 = v36;
        else
          v37 = -v36;
      }
      if (fabsf(v33) <= 0.03125)
      {
        v74 = v33 * 0.0625;
      }
      else
      {
        v73 = powf(v33, 1.8);
        if (v33 >= 0.0)
          v74 = v73;
        else
          v74 = -v73;
      }
      if (fabsf(v34) <= 0.03125)
      {
        v80 = v34 * 0.0625;
      }
      else
      {
        v80 = powf(v34, 1.8);
        if (v34 < 0.0)
          v80 = -v80;
      }
      goto LABEL_89;
    case 6:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v95);
      return;
    case 7:
      v38 = *(int8x8_t **)(a2 + 8);
      v39 = v38[1].i32[1];
      v40 = *(float *)v38[1].i32;
      v92 = (int32x2_t)vand_s8(*v38, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v38), (int8x8_t)vcgez_f32((float32x2_t)*v38)));
      v41 = fabsf(*(float *)v92.i32);
      if (v41 <= 0.04045)
        v89 = v41 / 12.92;
      else
        v89 = powf((float)(v41 + 0.055) / 1.055, 2.4);
      v75 = fabsf(*(float *)&v92.i32[1]);
      if (v75 <= 0.04045)
        v76 = v75 / 12.92;
      else
        v76 = powf((float)(v75 + 0.055) / 1.055, 2.4);
      v81 = fabsf(v40);
      if (v81 <= 0.04045)
      {
        v82 = v81 / 12.92;
      }
      else
      {
        v86 = v76;
        v82 = powf((float)(v81 + 0.055) / 1.055, 2.4);
        v76 = v86;
      }
      *(int8x8_t *)v95.i8 = vbsl_s8((int8x8_t)vcltz_s32(v92), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v76), LODWORD(v89))), (int8x8_t)__PAIR64__(LODWORD(v76), LODWORD(v89)));
      if (v40 < 0.0)
        v82 = -v82;
      v95.i64[1] = __PAIR64__(v39, LODWORD(v82));
LABEL_94:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v95);
      return;
    case 8:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HSLA<float>,void>::convert((float *)v95.i32);
      return;
    case 9:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v95);
      return;
    case 10:
      v93 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v93);
      *(_QWORD *)&v94 = __PAIR64__(v43, v42);
      *((_QWORD *)&v94 + 1) = __PAIR64__(v45, v44);
      goto LABEL_28;
    case 11:
      v94 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_28:
      v95.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v94);
      *(uint64_t *)((char *)v95.i64 + 4) = __PAIR64__(v47, v46);
      v95.i32[3] = v48;
      goto LABEL_44;
    case 12:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_30;
    case 13:
      v94 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v94);
      v95.i64[0] = __PAIR64__(v50, v49);
      v95.i64[1] = __PAIR64__(v52, v51);
      goto LABEL_33;
    case 14:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_33:
      v53 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v95.i32);
      v56 = (float)((float)((float)(v53 * -0.82949) + 0.0) + (float)(v54 * 1.7627)) + (float)(v55 * 0.023625);
      v57 = (float)((float)((float)(v53 * 0.035846) + 0.0) + (float)(v54 * -0.076172)) + (float)(v55 * 0.95688);
      v58 = fabsf((float)((float)((float)(v53 * 2.4935) + 0.0) + (float)(v54 * -0.93138)) + (float)(v55 * -0.40271));
      if (v58 >= 0.0031308)
        powf(v58, 0.41667);
      v71 = fabsf(v56);
      if (v71 >= 0.0031308)
        powf(v71, 0.41667);
      v72 = fabsf(v57);
      if (v72 >= 0.0031308)
        powf(v72, 0.41667);
      break;
    case 15:
      v59 = *(_QWORD *)(a2 + 8);
      v60 = *(float *)v59;
      v32 = *(_DWORD *)(v59 + 12);
      v61 = *(float *)(v59 + 4);
      v62 = *(float *)(v59 + 8);
      if (*(float *)v59 <= 0.03125)
      {
        v37 = v60 * 0.0625;
      }
      else
      {
        v63 = powf(v60, 1.8);
        if (v63 > 0.0)
          v64 = v63;
        else
          v64 = 0.0;
        if (v63 >= 1.0)
          v37 = 1.0;
        else
          v37 = v64;
      }
      if (v61 <= 0.03125)
      {
        v74 = v61 * 0.0625;
      }
      else
      {
        v77 = powf(v61, 1.8);
        v78 = 0.0;
        if (v77 > 0.0)
          v78 = v77;
        if (v77 >= 1.0)
          v74 = 1.0;
        else
          v74 = v78;
      }
      if (v62 <= 0.03125)
      {
        v80 = v62 * 0.0625;
      }
      else
      {
        v83 = powf(v62, 1.8);
        v84 = 0.0;
        if (v83 > 0.0)
          v84 = v83;
        if (v83 >= 1.0)
          v80 = 1.0;
        else
          v80 = v84;
      }
LABEL_89:
      v95.i64[0] = __PAIR64__(LODWORD(v74), LODWORD(v37));
      v95.i64[1] = __PAIR64__(v32, LODWORD(v80));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v95);
      break;
    case 16:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v95);
      break;
    case 18:
      v95 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_44:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v95);
      break;
    case 19:
      v65 = *(float **)(a2 + 8);
      v66 = v65[1];
      v67 = v65[2];
      v68 = (float)((float)((float)(*v65 * -0.82949) + 0.0) + (float)(v66 * 1.7627)) + (float)(v67 * 0.023625);
      v69 = (float)((float)((float)(*v65 * 0.035846) + 0.0) + (float)(v66 * -0.076172)) + (float)(v67 * 0.95688);
      v70 = fabsf((float)((float)((float)(*v65 * 2.4935) + 0.0) + (float)(v66 * -0.93138)) + (float)(v67 * -0.40271));
      if (v70 >= 0.0031308)
        powf(v70, 0.41667);
      v79 = fabsf(v68);
      if (v79 >= 0.0031308)
        powf(v79, 0.41667);
      v85 = fabsf(v69);
      if (v85 >= 0.0031308)
        powf(v85, 0.41667);
      break;
    default:
      v94 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v95.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v94);
      *(uint64_t *)((char *)v95.i64 + 4) = __PAIR64__(v19, v18);
      v95.i32[3] = v20;
LABEL_30:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v95);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_19DisplayP3DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 832;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x50E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ADA0[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ADB8[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ADD0[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339ADE8[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_21ProPhotoRGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_21ProPhotoRGBDescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  unsigned int v18;
  unsigned int v19;
  __int32 v20;
  int8x8_t *v21;
  __int32 v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t *v30;
  __int32 v31;
  float v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int32 v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int32 v47;
  int8x8_t *v48;
  __int32 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int32x2_t v69;
  int32x2_t v70;
  __int128 v71;
  __int128 v72;
  int8x16_t v73;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v63 = v10.f32[0];
      v67 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v63, 2.1992);
      v11.f32[1] = v67;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v73.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v73.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)&v73);
      return;
    case 1:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v73);
      return;
    case 2:
      v21 = *(int8x8_t **)(a2 + 8);
      v22 = v21[1].i32[1];
      v23 = *(float *)v21[1].i32;
      v24 = powf(fabsf(v23), 2.1992);
      if (v23 >= 0.0)
        v25 = v24;
      else
        v25 = -v24;
      v26 = (float32x2_t)vand_s8(*v21, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v21), (int8x8_t)vcgez_f32((float32x2_t)*v21)));
      v27 = (int8x8_t)vcltz_s32((int32x2_t)v26);
      v28 = vabs_f32(v26);
      v64 = v28.f32[0];
      v68 = powf(v28.f32[1], 2.1992);
      v29.f32[0] = powf(v64, 2.1992);
      v29.f32[1] = v68;
      *(int8x8_t *)v73.i8 = vbsl_s8(v27, (int8x8_t)vneg_f32(v29), (int8x8_t)v29);
      v73.i64[1] = __PAIR64__(v22, LODWORD(v25));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)&v73);
      return;
    case 3:
      v30 = *(int8x8_t **)(a2 + 8);
      v31 = v30[1].i32[1];
      v32 = *(float *)v30[1].i32;
      v69 = (int32x2_t)vand_s8(*v30, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v30), (int8x8_t)vcgez_f32((float32x2_t)*v30)));
      v33 = fabsf(*(float *)v69.i32);
      if (v33 <= 0.04045)
        v65 = v33 / 12.92;
      else
        v65 = powf((float)(v33 + 0.055) / 1.055, 2.4);
      v53 = fabsf(*(float *)&v69.i32[1]);
      if (v53 <= 0.04045)
        v54 = v53 / 12.92;
      else
        v54 = powf((float)(v53 + 0.055) / 1.055, 2.4);
      v57 = fabsf(v32);
      if (v57 <= 0.04045)
      {
        v58 = v57 / 12.92;
      }
      else
      {
        v61 = v54;
        v58 = powf((float)(v57 + 0.055) / 1.055, 2.4);
        v54 = v61;
      }
      *(int8x8_t *)v73.i8 = vbsl_s8((int8x8_t)vcltz_s32(v69), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v54), LODWORD(v65))), (int8x8_t)__PAIR64__(LODWORD(v54), LODWORD(v65)));
      if (v32 < 0.0)
        v58 = -v58;
      v73.i64[1] = __PAIR64__(v31, LODWORD(v58));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v73);
      return;
    case 4:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_58;
    case 5:
    case 15:
      return;
    case 6:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v73);
      return;
    case 7:
      v48 = *(int8x8_t **)(a2 + 8);
      v49 = v48[1].i32[1];
      v50 = *(float *)v48[1].i32;
      v70 = (int32x2_t)vand_s8(*v48, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v48), (int8x8_t)vcgez_f32((float32x2_t)*v48)));
      v51 = fabsf(*(float *)v70.i32);
      if (v51 <= 0.04045)
        v52 = v51 / 12.92;
      else
        v52 = powf((float)(v51 + 0.055) / 1.055, 2.4);
      v66 = v52;
      v55 = fabsf(*(float *)&v70.i32[1]);
      if (v55 <= 0.04045)
        v56 = v55 / 12.92;
      else
        v56 = powf((float)(v55 + 0.055) / 1.055, 2.4);
      v59 = fabsf(v50);
      if (v59 <= 0.04045)
      {
        v60 = v59 / 12.92;
      }
      else
      {
        v62 = v56;
        v60 = powf((float)(v59 + 0.055) / 1.055, 2.4);
        v56 = v62;
      }
      *(int8x8_t *)v73.i8 = vbsl_s8((int8x8_t)vcltz_s32(v70), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v56), LODWORD(v66))), (int8x8_t)__PAIR64__(LODWORD(v56), LODWORD(v66)));
      if (v50 < 0.0)
        v60 = -v60;
      v73.i64[1] = __PAIR64__(v49, LODWORD(v60));
LABEL_58:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v73);
      return;
    case 8:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HSLA<float>,void>::convert((float *)v73.i32);
      return;
    case 9:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v73);
      return;
    case 10:
      v71 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v71);
      *(_QWORD *)&v72 = __PAIR64__(v35, v34);
      *((_QWORD *)&v72 + 1) = __PAIR64__(v37, v36);
      goto LABEL_25;
    case 11:
      v72 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_25:
      v73.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v72);
      *(uint64_t *)((char *)v73.i64 + 4) = __PAIR64__(v39, v38);
      v73.i32[3] = v40;
      goto LABEL_33;
    case 12:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_27;
    case 13:
      v71 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v71);
      *(_QWORD *)&v72 = __PAIR64__(v42, v41);
      *((_QWORD *)&v72 + 1) = __PAIR64__(v44, v43);
      goto LABEL_30;
    case 14:
      v72 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_30:
      v73.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v72);
      *(uint64_t *)((char *)v73.i64 + 4) = __PAIR64__(v46, v45);
      v73.i32[3] = v47;
      goto LABEL_37;
    case 16:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v73);
      return;
    case 18:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_33:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v73);
      return;
    case 19:
      v73 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_37:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(&v73);
      break;
    default:
      v72 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v73.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v72);
      *(uint64_t *)((char *)v73.i64 + 4) = __PAIR64__(v19, v18);
      v73.i32[3] = v20;
LABEL_27:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v73);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_21ProPhotoRGBDescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 832;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x60E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AE00[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AE18[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AE30[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AE48[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(void)::{lambda(WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8 = a2;
    v9 = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_17Rec2020DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v8);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v7 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v7 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v7 + 3) = (float)HIBYTE(v3) / 255.0;
    LODWORD(v8) = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v7);
    HIDWORD(v8) = v4;
    v9 = (__int128 *)__PAIR64__(v6, v5);
    WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v8);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_17Rec2020DescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  unsigned int v18;
  unsigned int v19;
  __int32 v20;
  int8x8_t *v21;
  __int32 v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t *v30;
  __int32 v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  __int32 v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  __int32 v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int8x8_t *v62;
  __int32 v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int32x2_t v89;
  int32x2_t v90;
  __int128 v91;
  __int128 v92;
  int8x16_t v93;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v83 = v10.f32[0];
      v87 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v83, 2.1992);
      v11.f32[1] = v87;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v93.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v93.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v93);
      return;
    case 1:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v93);
      return;
    case 2:
      v21 = *(int8x8_t **)(a2 + 8);
      v22 = v21[1].i32[1];
      v23 = *(float *)v21[1].i32;
      v24 = powf(fabsf(v23), 2.1992);
      if (v23 >= 0.0)
        v25 = v24;
      else
        v25 = -v24;
      v26 = (float32x2_t)vand_s8(*v21, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v21), (int8x8_t)vcgez_f32((float32x2_t)*v21)));
      v27 = (int8x8_t)vcltz_s32((int32x2_t)v26);
      v28 = vabs_f32(v26);
      v84 = v28.f32[0];
      v88 = powf(v28.f32[1], 2.1992);
      v29.f32[0] = powf(v84, 2.1992);
      v29.f32[1] = v88;
      *(int8x8_t *)v93.i8 = vbsl_s8(v27, (int8x8_t)vneg_f32(v29), (int8x8_t)v29);
      v93.i64[1] = __PAIR64__(v22, LODWORD(v25));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v93);
      return;
    case 3:
      v30 = *(int8x8_t **)(a2 + 8);
      v31 = v30[1].i32[1];
      v32 = *(float *)v30[1].i32;
      v89 = (int32x2_t)vand_s8(*v30, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v30), (int8x8_t)vcgez_f32((float32x2_t)*v30)));
      v33 = fabsf(*(float *)v89.i32);
      if (v33 <= 0.04045)
        v85 = v33 / 12.92;
      else
        v85 = powf((float)(v33 + 0.055) / 1.055, 2.4);
      v66 = fabsf(*(float *)&v89.i32[1]);
      if (v66 <= 0.04045)
        v67 = v66 / 12.92;
      else
        v67 = powf((float)(v66 + 0.055) / 1.055, 2.4);
      v74 = fabsf(v32);
      if (v74 <= 0.04045)
      {
        v75 = v74 / 12.92;
      }
      else
      {
        v81 = v67;
        v75 = powf((float)(v74 + 0.055) / 1.055, 2.4);
        v67 = v81;
      }
      *(int8x8_t *)v93.i8 = vbsl_s8((int8x8_t)vcltz_s32(v89), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v67), LODWORD(v85))), (int8x8_t)__PAIR64__(LODWORD(v67), LODWORD(v85)));
      if (v32 < 0.0)
        v75 = -v75;
      v93.i64[1] = __PAIR64__(v31, LODWORD(v75));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v93);
      return;
    case 4:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_94;
    case 5:
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(float *)v34;
      v36 = *(_DWORD *)(v34 + 12);
      v37 = *(float *)(v34 + 4);
      v38 = *(float *)(v34 + 8);
      if (fabsf(*(float *)v34) <= 0.03125)
      {
        v41 = v35 * 0.0625;
      }
      else
      {
        v39 = *(float *)v34;
        v40 = powf(v35, 1.8);
        if (v39 >= 0.0)
          v41 = v40;
        else
          v41 = -v40;
      }
      if (fabsf(v37) <= 0.03125)
      {
        v69 = v37 * 0.0625;
      }
      else
      {
        v68 = powf(v37, 1.8);
        if (v37 >= 0.0)
          v69 = v68;
        else
          v69 = -v68;
      }
      if (fabsf(v38) <= 0.03125)
      {
        v76 = v38 * 0.0625;
      }
      else
      {
        v76 = powf(v38, 1.8);
        if (v38 < 0.0)
          v76 = -v76;
      }
      goto LABEL_88;
    case 6:
    case 16:
      return;
    case 7:
      v62 = *(int8x8_t **)(a2 + 8);
      v63 = v62[1].i32[1];
      v64 = *(float *)v62[1].i32;
      v90 = (int32x2_t)vand_s8(*v62, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v62), (int8x8_t)vcgez_f32((float32x2_t)*v62)));
      v65 = fabsf(*(float *)v90.i32);
      if (v65 <= 0.04045)
        v86 = v65 / 12.92;
      else
        v86 = powf((float)(v65 + 0.055) / 1.055, 2.4);
      v72 = fabsf(*(float *)&v90.i32[1]);
      if (v72 <= 0.04045)
        v73 = v72 / 12.92;
      else
        v73 = powf((float)(v72 + 0.055) / 1.055, 2.4);
      v79 = fabsf(v64);
      if (v79 <= 0.04045)
      {
        v80 = v79 / 12.92;
      }
      else
      {
        v82 = v73;
        v80 = powf((float)(v79 + 0.055) / 1.055, 2.4);
        v73 = v82;
      }
      *(int8x8_t *)v93.i8 = vbsl_s8((int8x8_t)vcltz_s32(v90), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v73), LODWORD(v86))), (int8x8_t)__PAIR64__(LODWORD(v73), LODWORD(v86)));
      if (v64 < 0.0)
        v80 = -v80;
      v93.i64[1] = __PAIR64__(v63, LODWORD(v80));
LABEL_94:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v93);
      return;
    case 8:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HSLA<float>,void>::convert((float *)v93.i32);
      return;
    case 9:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v93);
      return;
    case 10:
      v91 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v91);
      *(_QWORD *)&v92 = __PAIR64__(v43, v42);
      *((_QWORD *)&v92 + 1) = __PAIR64__(v45, v44);
      goto LABEL_28;
    case 11:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_28:
      v93.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v92);
      *(uint64_t *)((char *)v93.i64 + 4) = __PAIR64__(v47, v46);
      v93.i32[3] = v48;
      goto LABEL_42;
    case 12:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_30;
    case 13:
      v91 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v91);
      *(_QWORD *)&v92 = __PAIR64__(v50, v49);
      *((_QWORD *)&v92 + 1) = __PAIR64__(v52, v51);
      goto LABEL_33;
    case 14:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_33:
      v93.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v92);
      *(uint64_t *)((char *)v93.i64 + 4) = __PAIR64__(v54, v53);
      v93.i32[3] = v55;
      goto LABEL_46;
    case 15:
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(float *)v56;
      v36 = *(_DWORD *)(v56 + 12);
      v58 = *(float *)(v56 + 4);
      v59 = *(float *)(v56 + 8);
      if (*(float *)v56 <= 0.03125)
      {
        v41 = v57 * 0.0625;
      }
      else
      {
        v60 = powf(v57, 1.8);
        if (v60 > 0.0)
          v61 = v60;
        else
          v61 = 0.0;
        if (v60 >= 1.0)
          v41 = 1.0;
        else
          v41 = v61;
      }
      if (v58 <= 0.03125)
      {
        v69 = v58 * 0.0625;
      }
      else
      {
        v70 = powf(v58, 1.8);
        v71 = 0.0;
        if (v70 > 0.0)
          v71 = v70;
        if (v70 >= 1.0)
          v69 = 1.0;
        else
          v69 = v71;
      }
      if (v59 <= 0.03125)
      {
        v76 = v59 * 0.0625;
      }
      else
      {
        v77 = powf(v59, 1.8);
        v78 = 0.0;
        if (v77 > 0.0)
          v78 = v77;
        if (v77 >= 1.0)
          v76 = 1.0;
        else
          v76 = v78;
      }
LABEL_88:
      v93.i64[0] = __PAIR64__(LODWORD(v69), LODWORD(v41));
      v93.i64[1] = __PAIR64__(v36, LODWORD(v76));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v93);
      return;
    case 18:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_42:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v93);
      return;
    case 19:
      v93 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_46:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v93.i32);
      break;
    default:
      v92 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v93.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v92);
      *(uint64_t *)((char *)v93.i64 + 4) = __PAIR64__(v19, v18);
      v93.i32[3] = v20;
LABEL_30:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v93);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_17Rec2020DescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t result;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[8];
  char v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t *v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v56 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v60 = &v58;
    v61 = COERCE_DOUBLE(&v56);
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v60);
    v9 = v45;
  }
  else
  {
    v5 = bswap32(v4);
    v6 = (float)v5 / 255.0;
    v7 = (float)BYTE1(v5) / 255.0;
    v8 = (float)BYTE2(v5) / 255.0;
    v9 = (float)HIBYTE(v5) / 255.0;
  }
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v6;
  v62 = 832;
  v63 = 1;
  v64 = v7;
  v65 = 833;
  v66 = 1;
  v67 = v8;
  v68 = 126;
  v69 = 1;
  v70 = v9;
  v54 = 0;
  v58 = 1;
  v59 = v6;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v60, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v62, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v65, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v68, (uint64_t)&v58, (uint64_t)&v56);
  *(_QWORD *)&v56 = &v54;
  v10 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = (uint64_t *)&v56;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v10])(&v58, &v60, a1 + 1);
  *(_QWORD *)&v56 = &v54;
  v11 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = (uint64_t *)&v56;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v11])(&v52, &v60, a1 + 3);
  *(_QWORD *)&v56 = &v54;
  v12 = *((unsigned int *)a1 + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_54;
  v60 = (uint64_t *)&v56;
  ((void (*)(uint64_t *__return_ptr, uint64_t **, unint64_t *))off_1E339A8F0[v12])(&v50, &v60, a1 + 5);
  if (*((_BYTE *)a1 + 72))
  {
    v55 = &v54;
    v13 = *((unsigned int *)a1 + 16);
    if ((_DWORD)v13 == -1)
      goto LABEL_54;
    *(_QWORD *)&v56 = &v55;
    ((void (*)(uint64_t **__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v13])(&v60, &v56, a1 + 7);
    LOBYTE(v56) = 0;
    DWORD2(v56) = -1;
    v14 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int128 *, uint64_t **))off_1E339A948[LODWORD(v61)])(&v55, &v56, &v60);
      DWORD2(v56) = v14;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[LODWORD(v61)])(&v55, &v60);
    }
  }
  else
  {
    LOBYTE(v56) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v15 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t *))off_1E339A948[LODWORD(v59)])(&v55, &v60, &v58);
    LODWORD(v61) = v15;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v16 = v53;
  if (v53 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v53])(&v55, &v62, &v52);
    LODWORD(v64) = v16;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v17 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v55, &v65, &v50);
    LODWORD(v67) = v17;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v18 = DWORD2(v56);
    if (DWORD2(v56) == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339A948[DWORD2(v56)])(&v55, &v68, &v56);
      LODWORD(v70) = v18;
      v71 = 1;
      if (v57 && DWORD2(v56) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v56)])(&v55, &v56);
    }
  }
  if (v51 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v51])(&v56, &v50);
  if (v53 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v53])(&v56, &v52);
  if (LODWORD(v59) != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[LODWORD(v59)])(&v56, &v58);
  v58 = (uint64_t)&v54;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  *(_QWORD *)&v56 = &v58;
  v19 = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A970[LODWORD(v61)])(&v56, &v60);
  v58 = (uint64_t)&v54;
  if (LODWORD(v64) == -1
    || (v21 = v19,
        v22 = v20,
        v23 = a2,
        v24 = v4,
        *(_QWORD *)&v56 = &v58,
        v25 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v64)])(&v56, &v62),
        v58 = (uint64_t)&v54,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v27 = v25;
  v28 = v26;
  *(_QWORD *)&v56 = &v58;
  v30 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v67)])(&v56, &v65);
  v31 = v29;
  v32 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v54;
    if (LODWORD(v70) != -1)
    {
      *(_QWORD *)&v56 = &v58;
      v33 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v70)])(&v56, &v68);
      v32 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v33 = 0;
LABEL_38:
  v48[0] = v21;
  v48[1] = v22;
  v48[2] = v27;
  v48[3] = v28;
  v48[4] = v30;
  v48[5] = v31;
  v48[6] = v33;
  v48[7] = v29;
  v49 = v32;
  v34 = WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)v48);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(float *)(result + 4) = v34;
  *(_DWORD *)(result + 8) = v36;
  *(_DWORD *)(result + 12) = v38;
  *(_DWORD *)(result + 16) = v40;
  *v23 = result | 0x70E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v70)])(&v56, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v67)])(&v56, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v64)])(&v56, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t **))off_1E339A920[LODWORD(v61)])(&v56, &v60);
  if (v54)
  {
    result = WTF::fastFree((WTF *)(v54 - 16), v42);
    if ((v24 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v24 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v24 & 0xFFFFFFFFFFFFLL;
  do
  {
    v46 = __ldaxr((unsigned int *)result);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, (unsigned int *)result));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v42);
  }
  return result;
}

float WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(uint64_t a1)
{
  uint64_t v1;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double *v10;
  char v11;
  char *v12;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 != -1)
  {
    v12 = &v11;
    ((void (*)(char **, uint64_t))off_1E339AE60[v1])(&v12, a1);
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 != -1)
    {
      v5 = v3;
      v12 = &v11;
      ((void (*)(char **, uint64_t))off_1E339AE78[v4])(&v12, a1 + 16);
      v6 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v6 != -1)
      {
        v12 = &v11;
        ((void (*)(char **, uint64_t))off_1E339AE90[v6])(&v12, a1 + 32);
        if (!*(_BYTE *)(a1 + 64))
          return v5;
        v7 = *(unsigned int *)(a1 + 56);
        if ((_DWORD)v7 != -1)
        {
          v12 = &v11;
          ((void (*)(char **, uint64_t))off_1E339AEA8[v7])(&v12, a1 + 48);
          return v5;
        }
      }
    }
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(v9, v10);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 831;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 832;
  v63 = 1;
  v64 = v6;
  v65 = 833;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x40E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AEC0[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AED8[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AEF0[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF08[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  __int128 v7;
  _QWORD v8[2];

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v7 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    v8[0] = a2;
    v8[1] = &v7;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)v8);
  }
  else
  {
    v3 = bswap32(v2);
    v4 = (float)v3 / 255.0;
    v5 = (float)BYTE1(v3) / 255.0;
    if (v4 > 0.04045)
      powf((float)(v4 + 0.055) / 1.055, 2.4);
    v6 = (float)BYTE2(v3) / 255.0;
    if (v5 > 0.04045)
      powf((float)(v5 + 0.055) / 1.055, 2.4);
    if (v6 > 0.04045)
      powf((float)(v6 + 0.055) / 1.055, 2.4);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_21ExtendedLinearEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  float *v20;
  float v21;
  float v22;
  int8x8_t *v23;
  float v24;
  float v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x2_t v28;
  float32x2_t v29;
  __int128 *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  __int32 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  float *v52;
  float v53;
  float v54;
  __int128 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  int v67;
  _OWORD v68[2];
  int v69;
  int8x16_t v70;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v60 = v11.f32[0];
      v62 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v60, 2.1992);
      v12.f32[1] = v62;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_21;
    case 1:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v68);
      return;
    case 2:
      v23 = *(int8x8_t **)(a2 + 8);
      v3 = v23[1].i32[1];
      v24 = *(float *)v23[1].i32;
      v25 = powf(fabsf(v24), 2.1992);
      if (v24 < 0.0)
        v25 = -v25;
      v8 = v25;
      v26 = (float32x2_t)vand_s8(*v23, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v23), (int8x8_t)vcgez_f32((float32x2_t)*v23)));
      v27 = (int8x8_t)vcltz_s32((int32x2_t)v26);
      v28 = vabs_f32(v26);
      v61 = v28.f32[0];
      v63 = powf(v28.f32[1], 2.1992);
      v29.f32[0] = powf(v61, 2.1992);
      v29.f32[1] = v63;
      v19 = vbsl_s8(v27, (int8x8_t)vneg_f32(v29), (int8x8_t)v29);
LABEL_21:
      *(int8x8_t *)v70.i8 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      v70.i64[1] = __PAIR64__(v3, LODWORD(v8));
      v30 = &WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      goto LABEL_47;
    case 3:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v68);
      return;
    case 4:
    case 12:
    case 19:
      return;
    case 5:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v68);
      return;
    case 6:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v68);
      return;
    case 7:
      v31 = *(float **)(a2 + 8);
      v32 = v31[1];
      v33 = v31[2];
      v34 = fabsf(*v31);
      if (v34 > 0.04045)
        powf((float)(v34 + 0.055) / 1.055, 2.4);
      v58 = fabsf(v32);
      if (v58 > 0.04045)
        powf((float)(v58 + 0.055) / 1.055, 2.4);
      v59 = fabsf(v33);
      if (v59 > 0.04045)
        powf((float)(v59 + 0.055) / 1.055, 2.4);
      return;
    case 8:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v35 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v68);
      goto LABEL_29;
    case 9:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v35 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)v68);
LABEL_29:
      v38 = v36;
      v39 = v37;
      v40 = fabsf(v35);
      if (v40 > 0.04045)
        powf((float)(v40 + 0.055) / 1.055, 2.4);
      v56 = fabsf(v38);
      if (v56 > 0.04045)
        powf((float)(v56 + 0.055) / 1.055, 2.4);
      v57 = fabsf(v39);
      if (v57 > 0.04045)
        powf((float)(v57 + 0.055) / 1.055, 2.4);
      return;
    case 10:
      v64 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v64);
      *(_QWORD *)&v65 = __PAIR64__(v42, v41);
      *((_QWORD *)&v65 + 1) = __PAIR64__(v44, v43);
      goto LABEL_33;
    case 11:
      v65 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_33:
      v70.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v65);
      *(uint64_t *)((char *)v70.i64 + 4) = __PAIR64__(v46, v45);
      v70.i32[3] = v47;
      goto LABEL_46;
    case 13:
      v66[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)v66);
      *(_QWORD *)&v68[0] = __PAIR64__(v49, v48);
      *((_QWORD *)&v68[0] + 1) = __PAIR64__(v51, v50);
      goto LABEL_36;
    case 14:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_36:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v68);
      break;
    case 15:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v68);
      break;
    case 16:
      v68[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v68);
      break;
    case 17:
      v52 = *(float **)(a2 + 8);
      v53 = v52[1];
      v54 = v52[2];
      if (*v52 > 0.04045)
        powf((float)(*v52 + 0.055) / 1.055, 2.4);
      if (v53 > 0.04045)
        powf((float)(v53 + 0.055) / 1.055, 2.4);
      if (v54 > 0.04045)
        powf((float)(v54 + 0.055) / 1.055, 2.4);
      break;
    case 18:
      v70 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
LABEL_46:
      v30 = &WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
LABEL_47:
      v55 = v30[1];
      v68[0] = *v30;
      v68[1] = v55;
      v69 = *((_DWORD *)v30 + 8);
      v66[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
      v66[1] = unk_1968BFBE0;
      v67 = 1065831128;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v70.i32, (float *)v68, (float *)v66);
      break;
    default:
      v20 = *(float **)(a2 + 8);
      v21 = v20[1];
      v22 = v20[2];
      if (*v20 > 0.04045)
        powf((float)(*v20 + 0.055) / 1.055, 2.4);
      if (v21 > 0.04045)
        powf((float)(v21 + 0.055) / 1.055, 2.4);
      if (v22 > 0.04045)
        powf((float)(v22 + 0.055) / 1.055, 2.4);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorRGBFunctionINSA_21ExtendedLinearEncodedIfNSA_15SRGBADescriptorEEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t result;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[8];
  char v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  double v59;
  __int128 v60;
  __int16 v61;
  unsigned __int8 v62;
  double v63;
  __int16 v64;
  unsigned __int8 v65;
  double v66;
  __int16 v67;
  unsigned __int8 v68;
  double v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v44 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    v56 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v60 = &v58;
    *((_QWORD *)&v60 + 1) = &v56;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v4), (uint64_t)&v60);
  }
  else
  {
    v5 = bswap32(v4);
    *(float *)&v60 = (float)v5 / 255.0;
    *(float32x2_t *)((char *)&v60 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v60 + 3) = (float)HIBYTE(v5) / 255.0;
    v6 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(&v60);
  }
  LOWORD(v60) = 998;
  BYTE2(v60) = 1;
  *((double *)&v60 + 1) = v6;
  v61 = 999;
  v62 = 1;
  v63 = v7;
  v64 = 1000;
  v65 = 1;
  v66 = v8;
  v67 = 126;
  v68 = 1;
  v69 = v9;
  v54 = 0;
  v58 = 1;
  v59 = v6;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v60, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v62;
  v59 = v63;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v61, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v65;
  v59 = v66;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v64, (uint64_t)&v58, (uint64_t)&v56);
  v58 = v68;
  v59 = v69;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v54, &v67, (uint64_t)&v58, (uint64_t)&v56);
  *(_QWORD *)&v56 = &v54;
  v10 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  *(_QWORD *)&v60 = &v56;
  ((void (*)(uint64_t *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v10])(&v58, &v60, a1 + 1);
  *(_QWORD *)&v56 = &v54;
  v11 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  *(_QWORD *)&v60 = &v56;
  ((void (*)(uint64_t *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v11])(&v52, &v60, a1 + 3);
  *(_QWORD *)&v56 = &v54;
  v12 = *((unsigned int *)a1 + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_54;
  *(_QWORD *)&v60 = &v56;
  ((void (*)(uint64_t *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v12])(&v50, &v60, a1 + 5);
  if (*((_BYTE *)a1 + 72))
  {
    v55 = &v54;
    v13 = *((unsigned int *)a1 + 16);
    if ((_DWORD)v13 == -1)
      goto LABEL_54;
    *(_QWORD *)&v56 = &v55;
    ((void (*)(__int128 *__return_ptr, __int128 *, unint64_t *))off_1E339A8F0[v13])(&v60, &v56, a1 + 7);
    LOBYTE(v56) = 0;
    DWORD2(v56) = -1;
    v14 = DWORD2(v60);
    if (DWORD2(v60) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int128 *, __int128 *))off_1E339A948[DWORD2(v60)])(&v55, &v56, &v60);
      DWORD2(v56) = v14;
      v57 = 1;
      if (DWORD2(v60) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v60)])(&v55, &v60);
    }
  }
  else
  {
    LOBYTE(v56) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  DWORD2(v60) = -1;
  v15 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, __int128 *, uint64_t *))off_1E339A948[LODWORD(v59)])(&v55, &v60, &v58);
    DWORD2(v60) = v15;
  }
  LOBYTE(v61) = 0;
  LODWORD(v63) = -1;
  v16 = v53;
  if (v53 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v53])(&v55, &v61, &v52);
    LODWORD(v63) = v16;
  }
  LOBYTE(v64) = 0;
  LODWORD(v66) = -1;
  v17 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v55, &v64, &v50);
    LODWORD(v66) = v17;
  }
  LOBYTE(v67) = 0;
  v70 = 0;
  if (v57)
  {
    LODWORD(v69) = -1;
    v18 = DWORD2(v56);
    if (DWORD2(v56) == -1)
    {
      v70 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, __int128 *))off_1E339A948[DWORD2(v56)])(&v55, &v67, &v56);
      LODWORD(v69) = v18;
      v70 = 1;
      if (v57 && DWORD2(v56) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E339A920[DWORD2(v56)])(&v55, &v56);
    }
  }
  if (v51 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v51])(&v56, &v50);
  if (v53 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[v53])(&v56, &v52);
  if (LODWORD(v59) != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E339A920[LODWORD(v59)])(&v56, &v58);
  v58 = (uint64_t)&v54;
  if (DWORD2(v60) == -1)
    goto LABEL_54;
  *(_QWORD *)&v56 = &v58;
  v19 = ((uint64_t (*)(__int128 *, __int128 *))off_1E339A970[DWORD2(v60)])(&v56, &v60);
  v58 = (uint64_t)&v54;
  if (LODWORD(v63) == -1
    || (v21 = v19,
        v22 = v20,
        v23 = a2,
        v24 = v4,
        *(_QWORD *)&v56 = &v58,
        v25 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v63)])(&v56, &v61),
        v58 = (uint64_t)&v54,
        LODWORD(v66) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v27 = v25;
  v28 = v26;
  *(_QWORD *)&v56 = &v58;
  v30 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v66)])(&v56, &v64);
  v31 = v29;
  v32 = v70;
  if (v70)
  {
    v58 = (uint64_t)&v54;
    if (LODWORD(v69) != -1)
    {
      *(_QWORD *)&v56 = &v58;
      v33 = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A970[LODWORD(v69)])(&v56, &v67);
      v32 = 1;
      goto LABEL_38;
    }
    goto LABEL_54;
  }
  v33 = 0;
LABEL_38:
  v48[0] = v21;
  v48[1] = v22;
  v48[2] = v27;
  v48[3] = v28;
  v48[4] = v30;
  v48[5] = v31;
  v48[6] = v33;
  v48[7] = v29;
  v49 = v32;
  WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>((uint64_t)v48);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v35;
  *(_DWORD *)(result + 8) = v37;
  *(_DWORD *)(result + 12) = v39;
  *(_DWORD *)(result + 16) = v41;
  *v23 = result | 0x120E000000000000;
  if (v70)
  {
    if (LODWORD(v69) != -1)
      result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v69)])(&v56, &v67);
    LODWORD(v69) = -1;
  }
  if (LODWORD(v66) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v66)])(&v56, &v64);
  LODWORD(v66) = -1;
  if (LODWORD(v63) != -1)
    result = ((uint64_t (*)(__int128 *, __int16 *))off_1E339A920[LODWORD(v63)])(&v56, &v61);
  LODWORD(v63) = -1;
  if (DWORD2(v60) != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_1E339A920[DWORD2(v60)])(&v56, &v60);
  if (v54)
  {
    result = WTF::fastFree((WTF *)(v54 - 16), v43);
    if ((v24 & 0x8000000000000) == 0)
      return result;
  }
  else if ((v24 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = v24 & 0xFFFFFFFFFFFFLL;
  do
  {
    v46 = __ldaxr((unsigned int *)result);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, (unsigned int *)result));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)result);
    return WTF::fastFree((WTF *)result, v43);
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF20[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF38[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF50[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF68[v5])(&v8, a1 + 48);
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4XYZAIfLNS_10WhitePointE0EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  int8x8_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int8x8_t v19;
  int8x8_t *v20;
  float v21;
  float v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float *v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  float *v38;
  float v39;
  float v40;
  int8x8_t *v41;
  __int32 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int32x2_t v55;
  _OWORD v56[2];
  int v57;
  __int128 v58[2];
  int v59;
  int8x8_t v60;
  float v61;
  __int32 v62;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = v7;
      v9 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v10 = (int8x8_t)vcltz_s32((int32x2_t)v9);
      v11 = vabs_f32(v9);
      v50 = v11.f32[0];
      v53 = powf(v11.f32[1], 2.1992);
      v12.f32[0] = powf(v50, 2.1992);
      v12.f32[1] = v53;
      v13 = vbsl_s8(v10, (int8x8_t)vneg_f32(v12), (int8x8_t)v12);
      __asm { FMOV            V1.2S, #1.0 }
      v19 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v13, (float32x2_t)_D1), _D1, vbic_s8(v13, (int8x8_t)vclez_f32((float32x2_t)v13)));
      goto LABEL_16;
    case 1:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)v58);
      return;
    case 2:
      v20 = *(int8x8_t **)(a2 + 8);
      v3 = v20[1].i32[1];
      v21 = *(float *)v20[1].i32;
      v22 = powf(fabsf(v21), 2.1992);
      if (v21 < 0.0)
        v22 = -v22;
      v8 = v22;
      v23 = (float32x2_t)vand_s8(*v20, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v20), (int8x8_t)vcgez_f32((float32x2_t)*v20)));
      v24 = (int8x8_t)vcltz_s32((int32x2_t)v23);
      v25 = vabs_f32(v23);
      v51 = v25.f32[0];
      v54 = powf(v25.f32[1], 2.1992);
      v26.f32[0] = powf(v51, 2.1992);
      v26.f32[1] = v54;
      v19 = vbsl_s8(v24, (int8x8_t)vneg_f32(v26), (int8x8_t)v26);
LABEL_16:
      v60 = vand_s8(v19, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v19), (int8x8_t)vcgez_f32((float32x2_t)v19)));
      v61 = v8;
      v62 = v3;
      v58[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
      v58[1] = unk_1968BFBBC;
      v59 = 1065207884;
      v56[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)1,(WebCore::WhitePoint)0>::matrix;
      v56[1] = unk_1969EF33C;
      v57 = 1061190357;
      WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v60, (float *)v58, (float *)v56);
      return;
    case 3:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((int8x8_t *)v58);
      return;
    case 4:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_55;
    case 5:
      v27 = *(float **)(a2 + 8);
      v28 = v27[1];
      v29 = v27[2];
      if (fabsf(*v27) > 0.03125)
        powf(*v27, 1.8);
      if (fabsf(v28) > 0.03125)
        powf(v28, 1.8);
      if (fabsf(v29) > 0.03125)
        powf(v29, 1.8);
      return;
    case 6:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v58);
      return;
    case 7:
      v41 = *(int8x8_t **)(a2 + 8);
      v42 = v41[1].i32[1];
      v43 = *(float *)v41[1].i32;
      v55 = (int32x2_t)vand_s8(*v41, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v41), (int8x8_t)vcgez_f32((float32x2_t)*v41)));
      v44 = fabsf(*(float *)v55.i32);
      if (v44 <= 0.04045)
        v52 = v44 / 12.92;
      else
        v52 = powf((float)(v44 + 0.055) / 1.055, 2.4);
      v45 = fabsf(*(float *)&v55.i32[1]);
      if (v45 <= 0.04045)
        v46 = v45 / 12.92;
      else
        v46 = powf((float)(v45 + 0.055) / 1.055, 2.4);
      v47 = fabsf(v43);
      if (v47 <= 0.04045)
      {
        v48 = v47 / 12.92;
      }
      else
      {
        v49 = v46;
        v48 = powf((float)(v47 + 0.055) / 1.055, 2.4);
        v46 = v49;
      }
      *(int8x8_t *)&v58[0] = vbsl_s8((int8x8_t)vcltz_s32(v55), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v46), LODWORD(v52))), (int8x8_t)__PAIR64__(LODWORD(v46), LODWORD(v52)));
      if (v43 < 0.0)
        v48 = -v48;
      *((_QWORD *)&v58[0] + 1) = __PAIR64__(v42, LODWORD(v48));
LABEL_55:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleMatrixConversion((uint64_t)v58);
      return;
    case 8:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HSLA<float>,void>::convert((float *)v58);
      return;
    case 9:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::HWBA<float>,void>::convert((uint64_t)v58);
      return;
    case 10:
      v56[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)v56);
      *(_QWORD *)&v58[0] = __PAIR64__(v31, v30);
      *((_QWORD *)&v58[0] + 1) = __PAIR64__(v33, v32);
      goto LABEL_26;
    case 11:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_26:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)v58);
      return;
    case 12:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)v58);
      return;
    case 13:
      v56[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)v56);
      *(_QWORD *)&v58[0] = __PAIR64__(v35, v34);
      *((_QWORD *)&v58[0] + 1) = __PAIR64__(v37, v36);
      goto LABEL_30;
    case 14:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_30:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)v58);
      break;
    case 15:
      v38 = *(float **)(a2 + 8);
      v39 = v38[1];
      v40 = v38[2];
      if (*v38 > 0.03125)
        powf(*v38, 1.8);
      if (v39 > 0.03125)
        powf(v39, 1.8);
      if (v40 > 0.03125)
        powf(v40, 1.8);
      break;
    case 16:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)v58);
      break;
    case 18:
    case 19:
      return;
    default:
      v58[0] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert(v58);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

uint64_t WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t result;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t **v60;
  double v61;
  __int16 v62;
  unsigned __int8 v63;
  double v64;
  __int16 v65;
  unsigned __int8 v66;
  double v67;
  __int16 v68;
  unsigned __int8 v69;
  double v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v53 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v42 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossy<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(&v53, (uint64_t)&v60);
  LOWORD(v60) = 998;
  BYTE2(v60) = 1;
  v61 = v5;
  v62 = 999;
  v63 = 1;
  v64 = v6;
  v65 = 1000;
  v66 = 1;
  v67 = v7;
  v68 = 126;
  v69 = 1;
  v70 = v8;
  v52 = 0;
  v58 = 1;
  v59 = v5;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v60, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v63;
  v59 = v64;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v62, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v66;
  v59 = v67;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v65, (uint64_t)&v58, (uint64_t)&v55);
  v58 = v69;
  v59 = v70;
  WTF::HashMap<WebCore::CSSValueID,std::pair<WebCore::CSSUnitType,double>,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<std::pair<WebCore::CSSUnitType,double>>,WTF::HashTableTraits>::add<std::pair<WebCore::CSSUnitType,double>>(&v52, &v68, (uint64_t)&v58, (uint64_t)&v55);
  v55 = &v52;
  v9 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v9])(&v58, &v60, a1 + 8);
  v55 = &v52;
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v10])(&v50, &v60, a1 + 24);
  v55 = &v52;
  v11 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_54;
  v60 = &v55;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))off_1E339A8F0[v11])(&v48, &v60, a1 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    v54 = &v52;
    v12 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v55 = (uint64_t *)&v54;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t))off_1E339A8F0[v12])(&v60, &v55, a1 + 56);
    LOBYTE(v55) = 0;
    v56 = -1;
    v13 = LODWORD(v61);
    if (LODWORD(v61) == -1)
    {
      v57 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, uint64_t **, uint64_t ***))off_1E339A948[LODWORD(v61)])(&v54, &v55, &v60);
      v56 = v13;
      v57 = 1;
      if (LODWORD(v61) != -1)
        ((void (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v54, &v60);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    v57 = 0;
  }
  LOBYTE(v60) = 0;
  LODWORD(v61) = -1;
  v14 = LODWORD(v59);
  if (LODWORD(v59) != -1)
  {
    ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339A948[LODWORD(v59)])(&v54, &v60, &v58);
    LODWORD(v61) = v14;
  }
  LOBYTE(v62) = 0;
  LODWORD(v64) = -1;
  v15 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v51])(&v54, &v62, &v50);
    LODWORD(v64) = v15;
  }
  LOBYTE(v65) = 0;
  LODWORD(v67) = -1;
  v16 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t **, __int16 *, uint64_t *))off_1E339A948[v49])(&v54, &v65, &v48);
    LODWORD(v67) = v16;
  }
  LOBYTE(v68) = 0;
  v71 = 0;
  if (v57)
  {
    LODWORD(v70) = -1;
    v17 = v56;
    if (v56 == -1)
    {
      v71 = 1;
    }
    else
    {
      ((void (*)(uint64_t **, __int16 *, uint64_t **))off_1E339A948[v56])(&v54, &v68, &v55);
      LODWORD(v70) = v17;
      v71 = 1;
      if (v57 && v56 != -1)
        ((void (*)(uint64_t **, uint64_t **))off_1E339A920[v56])(&v54, &v55);
    }
  }
  if (v49 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v49])(&v55, &v48);
  if (v51 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[v51])(&v55, &v50);
  if (LODWORD(v59) != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339A920[LODWORD(v59)])(&v55, &v58);
  v58 = (uint64_t)&v52;
  if (LODWORD(v61) == -1)
    goto LABEL_54;
  v55 = &v58;
  v18 = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A970[LODWORD(v61)])(&v55, &v60);
  v58 = (uint64_t)&v52;
  if (LODWORD(v64) == -1
    || (v20 = v18,
        v21 = v19,
        v22 = a2,
        v55 = &v58,
        v23 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v64)])(&v55, &v62),
        v58 = (uint64_t)&v52,
        LODWORD(v67) == -1))
  {
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v25 = v23;
  v26 = v24;
  v55 = &v58;
  v28 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v67)])(&v55, &v65);
  v29 = v27;
  v30 = v71;
  if (v71)
  {
    v58 = (uint64_t)&v52;
    if (LODWORD(v70) != -1)
    {
      v55 = &v58;
      v31 = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A970[LODWORD(v70)])(&v55, &v68);
      v30 = 1;
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  v31 = 0;
LABEL_37:
  v46[0] = v20;
  v46[1] = v21;
  v46[2] = v25;
  v46[3] = v26;
  v46[4] = v28;
  v46[5] = v29;
  v46[6] = v31;
  v46[7] = v27;
  v47 = v30;
  WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((uint64_t)v46);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = v33;
  *(_DWORD *)(result + 8) = v35;
  *(_DWORD *)(result + 12) = v37;
  *(_DWORD *)(result + 16) = v39;
  *v22 = result | 0x130E000000000000;
  if (v71)
  {
    if (LODWORD(v70) != -1)
      result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v70)])(&v55, &v68);
    LODWORD(v70) = -1;
  }
  if (LODWORD(v67) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v67)])(&v55, &v65);
  LODWORD(v67) = -1;
  if (LODWORD(v64) != -1)
    result = ((uint64_t (*)(uint64_t **, __int16 *))off_1E339A920[LODWORD(v64)])(&v55, &v62);
  LODWORD(v64) = -1;
  if (LODWORD(v61) != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339A920[LODWORD(v61)])(&v55, &v60);
  if (v52)
    result = WTF::fastFree((WTF *)(v52 - 16), v41);
  if ((v53 & 0x8000000000000) != 0)
  {
    result = v53 & 0xFFFFFFFFFFFFLL;
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v41);
    }
  }
  return result;
}

void WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF80[v1])(&v8, a1);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AF98[v3])(&v8, a1 + 16);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    goto LABEL_8;
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AFB0[v4])(&v8, a1 + 32);
  if (!*(_BYTE *)(a1 + 64))
    return;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossy<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(v6);
    return;
  }
  v8 = &v7;
  ((void (*)(char **, uint64_t))off_1E339AFC8[v5])(&v8, a1 + 48);
}

void WebCore::Color::callOnUnderlyingType<WebCore::XYZA<float,(WebCore::WhitePoint)1> WebCore::Color::toColorTypeLossy<WebCore::XYZA<float,(WebCore::WhitePoint)1>>(void)::{lambda(WebCore::XYZA<float,(WebCore::WhitePoint)1> const&)#1}>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v4 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    *(_QWORD *)&v5 = a2;
    *((_QWORD *)&v5 + 1) = &v4;
    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4XYZAIfLNS_10WhitePointE1EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v2), (uint64_t)&v5);
  }
  else
  {
    v3 = bswap32(v2);
    *(float *)&v5 = (float)v3 / 255.0;
    *(float32x2_t *)((char *)&v5 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    *((float *)&v5 + 3) = (float)HIBYTE(v3) / 255.0;
    WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v5);
  }
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4XYZAIfLNS_10WhitePointE1EEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;

  switch(a1)
  {
    case 0:
    case 2:
      v2 = *(float **)(a2 + 8);
      v3 = v2[1];
      v4 = v2[2];
      powf(fabsf(*v2), 2.1992);
      powf(fabsf(v3), 2.1992);
      powf(fabsf(v4), 2.1992);
      return;
    case 1:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v18);
      return;
    case 3:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((float *)&v18);
      return;
    case 4:
    case 12:
    case 18:
    case 19:
      return;
    case 5:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v18);
      return;
    case 6:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v18);
      return;
    case 7:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      goto LABEL_12;
    case 8:
      v17 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v5 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v17);
      goto LABEL_11;
    case 9:
      v17 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v5 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v17);
LABEL_11:
      *(_QWORD *)&v18 = __PAIR64__(v6, LODWORD(v5));
      *((_QWORD *)&v18 + 1) = __PAIR64__(v8, v7);
LABEL_12:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((float *)&v18);
      return;
    case 10:
      v17 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v17);
      *(_QWORD *)&v18 = __PAIR64__(v10, v9);
      *((_QWORD *)&v18 + 1) = __PAIR64__(v12, v11);
      goto LABEL_15;
    case 11:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_15:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v18);
      return;
    case 13:
      v17 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v17);
      *(_QWORD *)&v18 = __PAIR64__(v14, v13);
      *((_QWORD *)&v18 + 1) = __PAIR64__(v16, v15);
      goto LABEL_18;
    case 14:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_18:
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v18);
      break;
    case 15:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((float *)&v18);
      break;
    case 16:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((float *)&v18);
      break;
    default:
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v18);
      break;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  return *a2 * 0.01;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE1EEEEELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSH_SI_SJ_EEEEEEDcSQ_DpT0_()
{
  return NAN;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSJ_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSJ_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSU_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return v5;
}

uint64_t WebCore::serializationForCSS(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  WTF::StringBuilder::append();
  v4 = *a2;
  v15 = a1;
  v5 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v5 == -1
    || (v16 = &v15,
        ((void (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v16),
        WTF::StringBuilder::append(),
        v6 = a2[1],
        v15 = a1,
        v7 = *(unsigned int *)(v6 + 88),
        (_DWORD)v7 == -1))
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS(v14);
  }
  else
  {
    v16 = &v15;
    result = ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor19serializationForCSSERNS6_13StringBuilderEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSL_INS8_17HSLFunctionModernEEENSL_INS8_11HWBFunctionEEENSL_INS8_11LabFunctionEEENSL_INS8_11LCHFunctionEEENSL_INS8_13OKLabFunctionEEENSL_INS8_13OKLCHFunctionEEENSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_19DisplayP3DescriptorEEEEEEENSL_INS10_INS11_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSL_INS10_INS11_IfNS8_17Rec2020DescriptorEEEEEEENSL_INS10_INS11_IfNS8_15SRGBADescriptorEEEEEEENSL_INS10_INS8_21ExtendedLinearEncodedIfS1I_EEEEEENSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSL_INS1Q_INS1R_IfLS1S_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v16);
    LOBYTE(v16) = 41;
    v9 = *(_QWORD *)(a1 + 8);
    if (v9
      && ((v10 = *(unsigned int *)(a1 + 16), v10 < *(_DWORD *)(v9 + 4))
        ? (v11 = *(_QWORD *)a1 == 0)
        : (v11 = 0),
          v11))
    {
      v12 = *(_DWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 8);
      *(_DWORD *)(a1 + 16) = v10 + 1;
      if ((v12 & 4) != 0)
        *(_BYTE *)(v13 + v10) = 41;
      else
        *(_WORD *)(v13 + 2 * v10) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSS((uint64_t)&v6, a1);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::StyleColor::StyleColor(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  return this;
}

uint64_t WebCore::StyleColor::StyleColor(uint64_t result, unsigned int a2)
{
  *(_QWORD *)result = bswap32(a2) | 0x1104000000000000;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void WebCore::StyleColor::resolveAbsoluteComponents<WebCore::StyleColorMix>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  if (*((_DWORD *)a1 + 6) | *((_DWORD *)a1 + 14))
  {
    v4 = WTF::fastMalloc((WTF *)0x50);
    v5 = *((_DWORD *)a1 + 2);
    *(_QWORD *)v4 = *a1;
    *(_DWORD *)(v4 + 8) = v5;
    *(_BYTE *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = -1;
    v6 = *((unsigned int *)a1 + 6);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v6])(&v24, v4 + 16, a1 + 2);
      *(_DWORD *)(v4 + 24) = v6;
    }
    v7 = *((_OWORD *)a1 + 2);
    *(_BYTE *)(v4 + 48) = 0;
    *(_OWORD *)(v4 + 32) = v7;
    *(_DWORD *)(v4 + 56) = -1;
    v8 = *((unsigned int *)a1 + 14);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v8])(&v24);
      *(_DWORD *)(v4 + 56) = v8;
    }
    *(_OWORD *)(v4 + 64) = *((_OWORD *)a1 + 4);
    v9 = 2;
    goto LABEL_15;
  }
  v24 = *a1;
  v25 = *((_BYTE *)a1 + 8);
  v10 = a1[2];
  v26 = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *((_DWORD *)a1 + 14);
    v27 = a1[4];
    v28 = *((_BYTE *)a1 + 40);
    if (v15)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
      v16 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      goto LABEL_10;
    }
  }
  else
  {
    v27 = a1[4];
    v28 = *((_BYTE *)a1 + 40);
  }
  v11 = a1[6];
  v29 = v11;
  if ((v11 & 0x8000000000000) != 0)
    goto LABEL_20;
LABEL_10:
  v30 = a1[8];
  v31 = *((_BYTE *)a1 + 72);
  WebCore::mix((uint64_t)&v24, &v32);
  v4 = v32;
  if (v32)
    v32 = 0;
  if ((v29 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v12);
    }
  }
  if ((v26 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v12);
    }
  }
  v9 = 0;
LABEL_15:
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v9;
}

WebCore::StyleColor *WebCore::StyleColor::StyleColor(WebCore::StyleColor *this, const WebCore::StyleColor *a2)
{
  uint64_t v2;
  WebCore::StyleColor *v5;
  const WebCore::StyleColor *v6;
  char v7;
  _QWORD v8[4];
  _QWORD *v9;

  v8[0] = &v7;
  v8[1] = &v7;
  v8[2] = &v7;
  v8[3] = &v7;
  v2 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v2 == -1)
  {
    v5 = (WebCore::StyleColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleColor::StyleColor(v5, v6);
  }
  else
  {
    v9 = v8;
    ((void (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v9);
    return this;
  }
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v2 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v2 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::StyleColor *)WebCore::StyleColor::operator=(v5);
  }
  else
  {
    v8 = v7;
    ((void (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v8);
    return this;
  }
}

uint64_t WebCore::StyleColor::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  _QWORD v11[4];
  _QWORD *v12;

  v11[0] = &v10;
  v11[1] = &v10;
  v11[2] = &v10;
  v11[3] = &v10;
  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 != -1)
  {
    v12 = v11;
    ((void (*)(uint64_t *__return_ptr, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v8, &v12);
    v4 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v4 == -1)
    {
      if (v9 == -1)
        return a1;
    }
    else if (v9 == -1)
    {
      ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(v11, a1);
      *(_DWORD *)(a1 + 8) = -1;
LABEL_5:
      if (v9 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(v11, &v8);
      return a1;
    }
    v11[0] = a1;
    ((void (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                        + v9))(v11, a1, &v8);
    goto LABEL_5;
  }
  v6 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::StyleColor::StyleColor(v6, v7);
}

uint64_t WebCore::StyleColor::StyleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void WebCore::StyleColor::~StyleColor(WebCore::StyleColor *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v3, this);
  *((_DWORD *)this + 2) = -1;
}

{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v3, this);
  *((_DWORD *)this + 2) = -1;
}

uint64_t WebCore::StyleColor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v4])(&v11, a1);
  }
  return result;
}

void WebCore::StyleColor::currentColor(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t WebCore::StyleColor::colorFromAbsoluteKeyword@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  char **v2;
  char *v3;
  char *v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;

  if (result > 0x48D
    || ((v2 = (char **)(&WebCore::valueList + 2 * result), v4 = *v2, v3 = v2[1], v4)
      ? (v5 = v3 == 0)
      : (v5 = 1),
        v5))
  {
    v6 = 0;
  }
  else
  {
    v11 = a2;
    if (((_DWORD)v3 - 4) > 0x11
      || (v7 = (int)v3,
          v8 = (_DWORD)v3 - 1,
          result = WebCore::ColorDataHash::colordata_hash_function((WebCore::ColorDataHash *)v4, (const char *)((_DWORD)v3 - 1)), result > 0x41F)|| (__int16)WebCore::lookup[result] < 0|| (v9 = WebCore::lookup[result], v10 = (&WebCore::wordlist)[2 * v9], *v4 != *v10)|| (result = strncmp(v4 + 1, v10 + 1, (v7 - 2)), (_DWORD)result)|| v10[v8])
    {
      v6 = 0;
    }
    else
    {
      v6 = bswap32((uint64_t)(&WebCore::wordlist)[2 * v9 + 1] & 0xFF00FF00 | (LODWORD((&WebCore::wordlist)[2 * v9 + 1]) << 16) | BYTE2(LODWORD((&WebCore::wordlist)[2 * v9 + 1]))) | 0x1104000000000000;
    }
    a2 = v11;
  }
  *a2 = v6;
  return result;
}

BOOL WebCore::StyleColor::isSystemColorKeyword(unsigned int a1)
{
  _BOOL8 result;

  if (a1 >= 0xA7)
  {
    result = 1;
    if (a1 >= 0xE7 && a1 != 403)
      return a1 == 18;
  }
  else
  {
    if (a1 <= 0x90)
      return a1 == 18;
    return 1;
  }
  return result;
}

uint64_t WebCore::StyleColor::containsCurrentColor(WebCore::StyleColor *this, const WebCore::CSSPrimitiveValue *a2)
{
  int v2;

  v2 = *((_WORD *)this + 2) & 0x7F;
  if (v2 == 80 && *((_WORD *)this + 4) == 124)
    return 1;
  if (v2 == 78)
    return WebCore::CSSUnresolvedColor::containsCurrentColor(*((WebCore::CSSUnresolvedColor **)this + 1));
  return 0;
}

uint64_t WebCore::StyleColor::containsColorSchemeDependentColor(WebCore::StyleColor *this, const WebCore::CSSPrimitiveValue *a2)
{
  int v2;
  unsigned int v4;

  v2 = *((_WORD *)this + 2) & 0x7F;
  if (v2 == 80)
  {
    v4 = *((unsigned __int16 *)this + 4);
    if (v4 >= 0xA7)
    {
      if (v4 >= 0xE7 && v4 != 403)
        return 0;
    }
    else if (v4 < 0x91)
    {
      return v4 == 18;
    }
    return 1;
  }
  else
  {
    if (v2 != 78)
      return 0;
    return WebCore::CSSUnresolvedColor::containsColorSchemeDependentColor(*((WebCore::CSSUnresolvedColor **)this + 1));
  }
}

uint64_t WebCore::StyleColor::resolveColor(WebCore::StyleColor *this, const WebCore::Color *a2)
{
  uint64_t v2;
  WebCore::StyleColor *v4;
  const WebCore::Color *v5;
  _QWORD v6[4];
  _QWORD *v7;

  v5 = a2;
  v6[0] = &v5;
  v6[1] = &v5;
  v6[2] = &v5;
  v6[3] = &v5;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::StyleColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleColor::containsCurrentColor(v4);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v2])(&v7, this);
  }
}

uint64_t WebCore::StyleColor::containsCurrentColor(WebCore::StyleColor *this)
{
  uint64_t v1;
  WebCore::StyleColor *v3;
  char v4;
  _QWORD v5[4];
  _QWORD *v6;

  v5[0] = &v4;
  v5[1] = &v4;
  v5[2] = &v4;
  v5[3] = &v4;
  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::StyleColor *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleColor::absoluteColor(v3);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **, WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v1])(&v6, this);
  }
}

uint64_t WebCore::StyleColor::absoluteColor(uint64_t this)
{
  WebCore *v1;
  const WebCore::StyleColor *v2;

  if (*(_DWORD *)(this + 8))
  {
    v1 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS(v1, v2);
  }
  return this;
}

uint64_t WebCore::serializationForCSS(WebCore *this, const WebCore::StyleColor *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD v6[4];
  _QWORD *v7;

  v6[0] = &v5;
  v6[1] = &v5;
  v6[2] = &v5;
  v6[3] = &v5;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSSColorMix<WebCore::StyleColorMix>(v4);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, WebCore *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSI_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSI_INSL_INS8_17HSLFunctionModernEEEEENSI_INSL_INS8_11HWBFunctionEEEEENSI_INSL_INS8_11LabFunctionEEEEENSI_INSL_INS8_11LCHFunctionEEEEENSI_INSL_INS8_13OKLabFunctionEEEEENSI_INSL_INS8_13OKLCHFunctionEEEEENSI_INSL_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNS8_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INS8_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSA_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSA_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSA_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__implIJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEESE_OS2T_DpOT0____fmatrix
                                                          + v2))(&v7, this);
  }
}

uint64_t WebCore::serializationForCSSColorMix<WebCore::StyleColorMix>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;

  WTF::StringBuilder::append();
  v31 = (uint64_t **)a1;
  v4 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v4 == -1)
    goto LABEL_41;
  v27 = (uint64_t *)&v31;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSERNS6_13StringBuilderERKNS8_24ColorInterpolationMethodEE3__0JEEEEEJRKNS0_6__implIJNSB_3HSLENSB_3HWBENSB_3LCHENSB_3LabENSB_5OKLCHENSB_5OKLabENSB_4SRGBENSB_10SRGBLinearENSB_9DisplayP3ENSB_6A98RGBENSB_11ProPhotoRGBENSB_7Rec2020ENSB_6XYZD50ENSB_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v4])(&v27, a2);
  WTF::StringBuilder::append();
  v26 = a1;
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_41;
  v31 = &v27;
  ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v5])(&v31, a2 + 16);
  if (*(_BYTE *)(a2 + 40) && *(double *)(a2 + 32) != 50.0 || *(_BYTE *)(a2 + 72) && *(double *)(a2 + 64) != 50.0)
  {
    LOBYTE(v27) = 32;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = *(unsigned int *)(a1 + 16), v7 >= *(_DWORD *)(v6 + 4)) || *(_QWORD *)a1)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v8 = *(_DWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(a1 + 16) = v7 + 1;
      if ((v8 & 4) != 0)
        *(_BYTE *)(v9 + v7) = 32;
      else
        *(_WORD *)(v9 + 2 * v7) = 32;
    }
    if (*(_BYTE *)(a2 + 40))
    {
      v10 = *(double *)(a2 + 32);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 72))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      v10 = 100.0 - *(double *)(a2 + 64);
    }
    WebCore::formatCSSNumberValue((WebCore *)a1, (int8x16_t *)"%", 2uLL, v10);
  }
  WTF::StringBuilder::append();
  v26 = a1;
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v11 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v11 == -1)
  {
LABEL_41:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPropertyParserHelpers::CalcParser::CalcParser(v21, v22, v23, v24, v25);
  }
  v31 = &v27;
  result = ((uint64_t (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v11])(&v31, a2 + 48);
  if (*(_BYTE *)(a2 + 40) && *(_BYTE *)(a2 + 72) && *(double *)(a2 + 32) + *(double *)(a2 + 64) != 100.0)
  {
    LOBYTE(v27) = 32;
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v15 = *(_DWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(a1 + 16) = v14 + 1;
      if ((v15 & 4) != 0)
        *(_BYTE *)(v16 + v14) = 32;
      else
        *(_WORD *)(v16 + 2 * v14) = 32;
    }
    if (*(_BYTE *)(a2 + 72))
    {
      result = WebCore::formatCSSNumberValue((WebCore *)a1, (int8x16_t *)"%", 2uLL, *(double *)(a2 + 64));
      goto LABEL_31;
    }
    goto LABEL_40;
  }
LABEL_31:
  LOBYTE(v27) = 41;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17)
    return WTF::StringBuilder::append();
  v18 = *(unsigned int *)(a1 + 16);
  if (v18 >= *(_DWORD *)(v17 + 4) || *(_QWORD *)a1)
    return WTF::StringBuilder::append();
  v19 = *(_DWORD *)(v17 + 16);
  v20 = *(_QWORD *)(v17 + 8);
  *(_DWORD *)(a1 + 16) = v18 + 1;
  if ((v19 & 4) != 0)
    *(_BYTE *)(v20 + v18) = 41;
  else
    *(_WORD *)(v20 + 2 * v18) = 41;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::CalcParser::CalcParser(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4, unint64_t a5)
{
  int *v9;
  int v10;
  WebCore::CSSParserTokenRange *v11;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned __int8 v23[8];
  uint64_t v24;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(int **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v9 = (int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v10 = WebCore::CSSParserToken::functionId(v9);
  if (WebCore::CSSCalcValue::isCalcFunction(v10))
  {
    v13 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)(a1 + 8), v11);
    v14 = *a4;
    *a4 = 0;
    v23[0] = a3;
    v24 = v14;
    WebCore::CSSCalcExpressionNodeParser::parseCalc(v23, v13, v15, v10, (a5 >> 24) & 1, (uint64_t *)&v22);
    v17 = 0;
    if (v22)
    {
      v17 = WTF::fastCompactMalloc((WTF *)0x18);
      v18 = (uint64_t)v22;
      v22 = 0;
      *(_DWORD *)v17 = 2;
      v19 = *(_BYTE *)(v17 + 6);
      *(_WORD *)(v17 + 4) = -14336;
      *(_BYTE *)(v17 + 6) = v19 & 0xFC;
      *(_QWORD *)(v17 + 8) = v18;
      *(_BYTE *)(v17 + 16) = (a5 & 0xFF00) != 0;
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
      }
    }
    if (v24)
      WTF::fastFree((WTF *)(v24 - 16), v16);
    v21 = *(_DWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v17;
    if (v21)
    {
      if (*v21 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)v16);
      else
        *v21 -= 2;
    }
  }
  return a1;
}

void WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, __int16 a4@<W3>, WebCore::CSSCalcValue **a5@<X8>)
{
  unsigned __int8 v5;
  __int128 *v10;
  int v11;
  WebCore::CSSParserTokenRange *v12;
  __int128 *v13;
  uint64_t v14;
  void *v15;
  WebCore::CSSCalcValue *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int128 *v19[2];
  WebCore::CSSCalcValue *v20;

  v5 = HIBYTE(a4);
  v10 = *(__int128 **)a1;
  if ((unint64_t)v10 >= *(_QWORD *)(a1 + 8))
  {
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v11 = WebCore::CSSParserToken::functionId((int *)v10);
  if (!WebCore::CSSCalcValue::isCalcFunction(v11))
    goto LABEL_3;
  v19[0] = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)a1, v12);
  v19[1] = v13;
  v14 = *a3;
  *a3 = 0;
  v18 = v14;
  WebCore::CSSCalcValue::create(v11, v19, a2, v5, &v18, 0, (uint64_t *)&v20);
  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), v15);
  v16 = v20;
  if (v20)
  {
    if (WebCore::CSSCalcValue::category(v20) == a2)
    {
      *a5 = v16;
    }
    else
    {
      *a5 = 0;
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
LABEL_3:
    *a5 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = v2[14];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v3])(&v6, v2 + 12);
    v2[14] = -1;
    v4 = v2[6];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v4])(&v7, v2 + 4);
    v2[6] = -1;
    return WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::LCHFunction>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::LCHFunction>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

uint64_t std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (*((_BYTE *)this + 80))
  {
    v3 = *((unsigned int *)this + 18);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E339B2C8[v3])(&v9, (char *)this + 64);
    *((_DWORD *)this + 18) = -1;
  }
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v4])(&v10, (char *)this + 48);
  *((_DWORD *)this + 14) = -1;
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v5])(&v11, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v6 = *((unsigned int *)this + 6);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v6])(&v12, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v13, this);
  *((_DWORD *)this + 2) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t std::default_delete<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (*((_BYTE *)this + 88))
  {
    v3 = *((unsigned int *)this + 20);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E339B2C8[v3])(&v9, (char *)this + 72);
    *((_DWORD *)this + 20) = -1;
  }
  v4 = *((unsigned int *)this + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v4])(&v10, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v5])(&v11, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E339B2F8[v6])(&v12, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v13, this);
  *((_DWORD *)this + 2) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t std::default_delete<WebCore::StyleRelativeColor<WebCore::LCHFunction>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (*((_BYTE *)this + 88))
  {
    v3 = *((unsigned int *)this + 20);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E339B2C8[v3])(&v9, (char *)this + 72);
    *((_DWORD *)this + 20) = -1;
  }
  v4 = *((unsigned int *)this + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E339B2F8[v4])(&v10, (char *)this + 48);
  *((_DWORD *)this + 16) = -1;
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v5])(&v11, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v6 = *((unsigned int *)this + 6);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E339B2C8[v6])(&v12, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v13, this);
  *((_DWORD *)this + 2) = -1;
  return WTF::fastFree(this, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS28_LNS0_6_TraitE1EEEEEvRS29_OT_EUlRS2F_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2N_EEEDcS2F_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v14, v4);
LABEL_11:
    *(_QWORD *)v4 = 0;
    if (*a3)
    {
      *(_QWORD *)v4 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v14 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v13 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v12 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
      a2 = v12;
      v6 = *v12;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v9 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v9;
    }
  }
  *a2 = *a3;
  *a3 = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(uint64_t result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v13, v4);
LABEL_10:
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = v7[14];
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v11, v7 + 12);
    v7[14] = -1;
    v9 = v7[6];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v12, v7 + 4);
    v7[6] = -1;
    return WTF::fastFree((WTF *)v7, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 4)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 6)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 7)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 7;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::LCHFunction>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 8)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 8;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 9)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 9;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::LCHFunction>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 10)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 10;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 11)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 11;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 12)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 12;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 13)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 13;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 14)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 14;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 15)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 15;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 16)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 16;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS28_LNS0_6_TraitE1EEEEEvOT_EUlRS2E_OT0_E_JRNS0_6__baseILS2C_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEOS2M_EEEDcS2E_DpT0_(WTF *result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 17)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 17;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF *)std::default_delete<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>::operator()[abi:sn180100](result, a2);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *a3;
  if ((*a2 & 0x8000000000000) == 0)
    return (v4 & 0x8000000000000) == 0 && v3 == v4;
  if ((v4 & 0x8000000000000) != 0
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC)
    && *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10))
  {
    return HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4);
  }
  else
  {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v17;
  _BOOL4 v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  _BOOL8 result;
  _BOOL4 v26;
  _BOOL4 v27;
  char v28;
  char *v29;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 4);
  v6 = *(_DWORD *)(*a3 + 4);
  v7 = v6 == v5;
  v10 = v6 == -1;
  v8 = v6 == -1;
  if (v10)
    v7 = 0;
  if ((_DWORD)v5 == -1)
    v9 = v8;
  else
    v9 = v7;
  v10 = (_DWORD)v5 == -1 || !v7;
  if (!v10)
  {
    v29 = &v28;
    v9 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B4D8[v5])(&v29, v3, v4);
  }
  if (v9)
    v11 = *(unsigned __int8 *)(v3 + 8) == *(unsigned __int8 *)(v4 + 8);
  else
    v11 = 0;
  if (!v11)
    return 0;
  v12 = *(unsigned int *)(v3 + 24);
  v13 = *(_DWORD *)(v4 + 24);
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v17 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v18 = v17;
    else
      v18 = v15;
    if (!v18)
      return 0;
  }
  else
  {
    v29 = &v28;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v12])(&v29, v3 + 16, v4 + 16) & 1) == 0)return 0;
  }
  v19 = *(unsigned __int8 *)(v4 + 40);
  if (*(_BYTE *)(v3 + 40))
    v20 = v19 == 0;
  else
    v20 = 1;
  if (v20)
  {
    if ((*(_BYTE *)(v3 + 40) != 0) != (v19 != 0))
      return 0;
  }
  else if (*(double *)(v3 + 32) != *(double *)(v4 + 32))
  {
    return 0;
  }
  v21 = *(unsigned int *)(v3 + 56);
  v22 = *(_DWORD *)(v4 + 56);
  v24 = v22 == (_DWORD)v21 && v22 != -1;
  if ((_DWORD)v21 == -1 || !v24)
  {
    v26 = v22 == -1;
    if ((_DWORD)v21 == -1)
      v27 = v26;
    else
      v27 = v24;
    if (!v27)
      return 0;
  }
  else
  {
    v29 = &v28;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v21])(&v29, v3 + 48, v4 + 48) & 1) == 0)return 0;
  }
  result = (*(_BYTE *)(v3 + 72) != 0) == (*(_BYTE *)(v4 + 72) != 0);
  if (*(_BYTE *)(v3 + 72))
  {
    if (*(_BYTE *)(v4 + 72))
      return *(double *)(v3 + 64) == *(double *)(v4 + 64);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 88))
      v13 = *(_BYTE *)(v4 + 88) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 88) != 0) == (*(_BYTE *)(v4 + 88) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 80);
      v15 = *(_DWORD *)(v4 + 80);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 72, v4 + 72);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 88))
      v13 = *(_BYTE *)(v4 + 88) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 88) != 0) == (*(_BYTE *)(v4 + 88) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 80);
      v15 = *(_DWORD *)(v4 + 80);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 72, v4 + 72);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 88))
      v13 = *(_BYTE *)(v4 + 88) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 88) != 0) == (*(_BYTE *)(v4 + 88) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 80);
      v15 = *(_DWORD *)(v4 + 80);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 72, v4 + 72);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul,9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 88))
      v13 = *(_BYTE *)(v4 + 88) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 88) != 0) == (*(_BYTE *)(v4 + 88) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 80);
      v15 = *(_DWORD *)(v4 + 80);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 72, v4 + 72);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul,10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul,11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul,12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul,13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul,14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul,15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul,16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul,17ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleAbsoluteColor,std::__variant_detail::_Trait::StyleCurrentColor,WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix>,WTF<std::__variant_detail::_Trait::StyleRelativeColor<std::__variant_detail::_Trait::RGBFunctionModernRelative>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HSLFunctionModern>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::HWBFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::LCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLabFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorRGBFunction<std::__variant_detail::_Trait::ExtendedGammaEncoded<float,std::__variant_detail::_Trait::A98RGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::DisplayP3Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::ProPhotoRGBDescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::SRGBADescriptor>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::ColorXYZFunction<std::__variant_detail::_Trait::XYZA<float,(std::__variant_detail::_Trait::WhitePoint)0>>>>,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ExtendedLinearEncoded<float,WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><WTF<WTF::UniqueRef<std::__variant_detail::_Trait::StyleColorMix><std::__variant_detail::_Trait::OKLCHFunction>><std::__variant_detail::_Trait::ColorRGBFunction<float,std::__variant_detail::_Trait::Rec2020Descriptor>>>>>>>><std::__variant_detail::_Trait::ColorXYZFunction<float,(std::__variant_detail::_Trait::XYZA)1>>>>> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char *v20;

  v3 = *a2;
  v4 = *a3;
  v5 = *(unsigned int *)(*a2 + 8);
  v6 = *(_DWORD *)(*a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v20, v3, v4) & 1) == 0)return 0;
  }
  result = std::__tuple_equal<3ul>::operator()[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>>((uint64_t)&v18, (unsigned int *)(v3 + 16), (_DWORD *)(v4 + 16));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 80))
      v13 = *(_BYTE *)(v4 + 80) == 0;
    else
      v13 = 1;
    if (v13)
    {
      return (*(_BYTE *)(v3 + 80) != 0) == (*(_BYTE *)(v4 + 80) != 0);
    }
    else
    {
      v14 = *(unsigned int *)(v3 + 72);
      v15 = *(_DWORD *)(v4 + 72);
      v16 = v15 == -1;
      v17 = v15 != -1 && v15 == v14;
      if ((_DWORD)v14 == -1)
        result = v16;
      else
        result = v17;
      if ((_DWORD)v14 != -1 && v17)
      {
        v20 = &v19;
        return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E339B548[v14])(&v20, v3 + 64, v4 + 64);
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char **v16;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x50);
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)v4 = *(_QWORD *)v3;
  *(_DWORD *)(v4 + 8) = v5;
  v12 = &v11;
  v13 = &v11;
  v14 = &v11;
  v15 = &v11;
  v6 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_4;
  v7 = v4;
  v16 = &v12;
  ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v6])(&v16, v3 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v3 + 32);
  v12 = &v11;
  v13 = &v11;
  v14 = &v11;
  v15 = &v11;
  v8 = *(unsigned int *)(v3 + 56);
  if ((_DWORD)v8 == -1)
  {
LABEL_4:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v10);
  }
  else
  {
    v16 = &v12;
    result = ((uint64_t (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v16, v3 + 48);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v3 + 64);
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 3;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x60);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 32) = -1;
    v8 = *(unsigned int *)(v3 + 32);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B638[v8])(v14);
      *(_DWORD *)(v6 + 32) = v8;
    }
    *(_BYTE *)(v6 + 40) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    v9 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 48) = v9;
    }
    *(_BYTE *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 64) = -1;
    v10 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 64) = v10;
    }
    *(_BYTE *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    if (*(_BYTE *)(v3 + 88))
    {
      *(_DWORD *)(v6 + 80) = -1;
      v11 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 80) = v11;
      }
      *(_BYTE *)(v6 + 88) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x60);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 32) = -1;
    v8 = *(unsigned int *)(v3 + 32);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B638[v8])(v14);
      *(_DWORD *)(v6 + 32) = v8;
    }
    *(_BYTE *)(v6 + 40) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    v9 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 48) = v9;
    }
    *(_BYTE *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 64) = -1;
    v10 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 64) = v10;
    }
    *(_BYTE *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    if (*(_BYTE *)(v3 + 88))
    {
      *(_DWORD *)(v6 + 80) = -1;
      v11 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 80) = v11;
      }
      *(_BYTE *)(v6 + 88) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 6;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x60);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 64) = -1;
    v10 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B638[v10])(v14);
      *(_DWORD *)(v6 + 64) = v10;
    }
    *(_BYTE *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    if (*(_BYTE *)(v3 + 88))
    {
      *(_DWORD *)(v6 + 80) = -1;
      v11 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 80) = v11;
      }
      *(_BYTE *)(v6 + 88) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 8;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x60);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 64) = -1;
    v10 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B638[v10])(v14);
      *(_DWORD *)(v6 + 64) = v10;
    }
    *(_BYTE *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    if (*(_BYTE *)(v3 + 88))
    {
      *(_DWORD *)(v6 + 80) = -1;
      v11 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 80) = v11;
      }
      *(_BYTE *)(v6 + 88) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 9;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 10;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 11;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 12;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 13;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 14;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 15;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 24) = v8;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v9 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 40) = v9;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v10 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E339B608[v10])(v14);
      *(_DWORD *)(v6 + 56) = v10;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v11 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(_QWORD *))off_1E339B608[v11])(v14);
        *(_DWORD *)(v6 + 72) = v11;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 16;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSB_4copyERKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSG_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSA_17HSLFunctionModernEEEEENSG_INSJ_INSA_11HWBFunctionEEEEENSG_INSJ_INSA_11LabFunctionEEEEENSG_INSJ_INSA_11LCHFunctionEEEEENSG_INSJ_INSA_13OKLabFunctionEEEEENSG_INSJ_INSA_13OKLCHFunctionEEEEENSG_INSJ_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSA_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSA_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEE3__0ZNSB_4copyES2E_E3__1ZNSB_4copyES2E_E3__2ZNSB_4copyES2E_E3__3EEEDcS2E_DpOT_EUlRKSE_E_JZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSF_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlRKSI_E_ZNSC_IJS2F_S2G_S2H_S2I_EEES2J_S2E_S2M_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEEDcS2W_DpT0_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  _QWORD v14[4];
  _QWORD *v15;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)0x58);
  v14[0] = &v13;
  v14[1] = &v13;
  v14[2] = &v13;
  v14[3] = &v13;
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_(v11, v12);
  }
  else
  {
    v6 = v4;
    v15 = v14;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v15, v3);
    *(_BYTE *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v7 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_QWORD *))off_1E339B608[v7])(v14);
      *(_DWORD *)(v6 + 24) = v7;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -1;
    v8 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_QWORD *))off_1E339B608[v8])(v14);
      *(_DWORD *)(v6 + 40) = v8;
    }
    *(_BYTE *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = -1;
    v9 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *))off_1E339B608[v9])(v14);
      *(_DWORD *)(v6 + 56) = v9;
    }
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    if (*(_BYTE *)(v3 + 80))
    {
      *(_DWORD *)(v6 + 72) = -1;
      v10 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(_QWORD *))off_1E339B608[v10])(v14);
        *(_DWORD *)(v6 + 72) = v10;
      }
      *(_BYTE *)(v6 + 80) = 1;
    }
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 17;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  *a2 = *a1;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = ***(_QWORD ***)(*(_QWORD *)result + 8);
  *a2 = v2;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;

  v4 = *a2;
  v5 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v6 = **a2;
  v18 = *((_BYTE *)*a2 + 8);
  v17 = v6;
  v23 = v5;
  v24 = &v23;
  v25 = &v23;
  v26 = &v23;
  v27 = &v23;
  v7 = *((unsigned int *)v4 + 6);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v28 = &v24;
  ((void (*)(_QWORD *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v7])(v19, &v28, v4 + 2);
  v19[1] = v4[4];
  v20 = *((_BYTE *)v4 + 40);
  v23 = v5;
  v24 = &v23;
  v25 = &v23;
  v26 = &v23;
  v27 = &v23;
  v8 = *((unsigned int *)v4 + 14);
  if ((_DWORD)v8 == -1)
  {
LABEL_6:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v28 = &v24;
    ((void (*)(_QWORD *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v8])(v21, &v28, v4 + 6);
    v21[1] = v4[8];
    v22 = *((_BYTE *)v4 + 72);
    WebCore::mix((uint64_t)&v17, a3);
    v10 = v21[0];
    if ((v21[0] & 0x8000000000000) == 0)
      goto LABEL_4;
  }
  v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v9);
  }
LABEL_4:
  if ((v19[0] & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v19[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v9);
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::RGBFunctionModernRelative>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B638[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 48);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 40);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 56);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 88))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 72);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::HSLFunctionModern>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2F8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B638[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 48);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 40);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 56);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 88))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 72);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::HWBFunction>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2F8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::LabFunction>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[16];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B638[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 88))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 72);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::LCHFunction>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2F8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::OKLabFunction>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[16];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B638[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 88))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 72);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::OKLCHFunction>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2F8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_12resolveColorERKNSA_5ColorEE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSL_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSL_INSO_INSA_17HSLFunctionModernEEEEENSL_INSO_INSA_11HWBFunctionEEEEENSL_INSO_INSA_11LabFunctionEEEEENSL_INSO_INSA_11LCHFunctionEEEEENSL_INSO_INSA_13OKLabFunctionEEEEENSL_INSO_INSA_13OKLCHFunctionEEEEENSL_INSO_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_19DisplayP3DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_17Rec2020DescriptorEEEEEEEEENSL_INSO_INS1A_INS1B_IfNSA_15SRGBADescriptorEEEEEEEEENSL_INSO_INS1A_INSA_21ExtendedLinearEncodedIfS1W_EEEEEEEENSL_INSO_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSL_INSO_INS26_INS27_IfLS28_1EEEEEEEEEEEEDpOT_EUlRKSJ_E_JZNSC_IJSG_EEESH_S2J_S2M_EUlRKSK_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlRKSN_E_ZNSC_IJSG_EEESH_S2J_S2M_EUlTyRKNSL_INSO_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSJ_SK_SN_SR_SU_SX_S10_S13_S16_S19_S1G_S1L_S1Q_S1V_S20_S25_S2C_S2G_EEEEEEDcS2W_DpT0_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE v16[8];
  int v17;
  _BYTE v18[8];
  int v19;
  _BYTE v20[8];
  int v21;
  _BYTE v22[8];
  int v23;
  char v24;
  uint64_t v25;
  _QWORD v26[4];
  _QWORD *v27;

  v4 = *a2;
  v25 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v26[0] = &v25;
  v26[1] = &v25;
  v26[2] = &v25;
  v26[3] = &v25;
  v5 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v5 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
    return result;
  }
  v27 = v26;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v15, &v27, v4);
  v16[0] = 0;
  v17 = -1;
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v6])(v26, v16, v4 + 16);
    v17 = v6;
  }
  v18[0] = 0;
  v19 = -1;
  v7 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v7])(v26, v18, v4 + 32);
    v19 = v7;
  }
  v20[0] = 0;
  v21 = -1;
  v8 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v8])(v26, v20, v4 + 48);
    v21 = v8;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(v4 + 80))
  {
    v23 = -1;
    v9 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E339B608[v9])(v26, v22, v4 + 64);
      v23 = v9;
    }
    v24 = 1;
  }
  result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((uint64_t)&v15, a3);
  if (v24)
  {
    if (v23 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v21])(v26, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v19])(v26, v18);
  v19 = -1;
  if (v17 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E339B2C8[v17])(v26, v16);
  v17 = -1;
  v12 = v15;
  if ((v15 & 0x8000000000000) != 0)
    goto LABEL_25;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_()
{
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;

  v2 = *a2;
  v8 = &v7;
  v9 = &v7;
  v10 = &v7;
  v11 = &v7;
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v12 = &v8;
  if ((((uint64_t (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v12, v2 + 16) & 1) != 0)return 1;
  v8 = &v7;
  v9 = &v7;
  v10 = &v7;
  v11 = &v7;
  v5 = *(unsigned int *)(v2 + 56);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v6);
  }
  else
  {
    v12 = &v8;
    return ((uint64_t (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v12, v2 + 48);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKSB_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSI_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSI_INSL_INSA_17HSLFunctionModernEEEEENSI_INSL_INSA_11HWBFunctionEEEEENSI_INSL_INSA_11LabFunctionEEEEENSI_INSL_INSA_11LCHFunctionEEEEENSI_INSL_INSA_13OKLabFunctionEEEEENSI_INSL_INSA_13OKLCHFunctionEEEEENSI_INSL_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_19DisplayP3DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_17Rec2020DescriptorEEEEEEEEENSI_INSL_INS17_INS18_IfNSA_15SRGBADescriptorEEEEEEEEENSI_INSL_INS17_INSA_21ExtendedLinearEncodedIfS1T_EEEEEEEENSI_INSL_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSI_INSL_INS23_INS24_IfLS25_1EEEEEEEEEEEEDpOT_EUlRKSG_E_JZNSC_IJSD_EEESE_S2G_S2J_EUlRKSH_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlRKSK_E_ZNSC_IJSD_EEESE_S2G_S2J_EUlTyRKNSI_INSL_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SH_SK_SO_SR_SU_SX_S10_S13_S16_S1D_S1I_S1N_S1S_S1X_S22_S29_S2D_EEEEEEDcS2T_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD *v8;

  v2 = *a2;
  v7[0] = &v6;
  v7[1] = &v6;
  v7[2] = &v6;
  v7[3] = &v6;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v3])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(a2, *a1, (uint64_t *)a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_()
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  v3 = *a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WebCore::serializationForCSSColorMix<WebCore::StyleColorMix>((uint64_t)&v7, v3);
  result = v7;
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v7),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v7),
        (result = v7) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      result = v7;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::RGBFunctionModernRelative>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::HSLFunctionModern>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::HWBFunction>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::LabFunction>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::LCHFunction>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::OKLabFunction>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::OKLCHFunction>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(a2, *a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSK_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSK_INSN_INSA_17HSLFunctionModernEEEEENSK_INSN_INSA_11HWBFunctionEEEEENSK_INSN_INSA_11LabFunctionEEEEENSK_INSN_INSA_11LCHFunctionEEEEENSK_INSN_INSA_13OKLabFunctionEEEEENSK_INSN_INSA_13OKLCHFunctionEEEEENSK_INSN_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNSA_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INSA_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSC_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSC_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEEDcS2V_DpT0_@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>(a2, *a1);
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::RGBFunctionModernRelative>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27 = &v36;
  v28 = &v36;
  v29 = &v36;
  v30 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = (uint64_t *)&v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v5])(&v37, &v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 32);
    LODWORD(v30) = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v7])(&v37, v31, a2 + 48);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 64);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v28])(&v37, &v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if ((_DWORD)v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::HSLFunctionModern>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v32])(&v37, v31);
  v32 = -1;
  if ((_DWORD)v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  LODWORD(v30) = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v28])(&v37, &v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::HSLFunctionModern>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27[0] = &v36;
  v27[1] = &v36;
  v28 = &v36;
  v29 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27[0]) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, _QWORD *, uint64_t))off_1E339B638[v5])(&v37, v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  v30 = -1;
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 40);
    v30 = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v7])(&v37, v31, a2 + 56);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 72);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, _QWORD *))off_1E339B848[v28])(&v37, v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if (v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::HWBFunction>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v32])(&v37, v31);
  v32 = -1;
  if (v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  v30 = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E339B2F8[v28])(&v37, v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::HWBFunction>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HWBFunction>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HWBFunction>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27[0] = &v36;
  v27[1] = &v36;
  v28 = &v36;
  v29 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27[0]) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, _QWORD *, uint64_t))off_1E339B638[v5])(&v37, v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  v30 = -1;
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 40);
    v30 = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v7])(&v37, v31, a2 + 56);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 72);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, _QWORD *))off_1E339B848[v28])(&v37, v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if (v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::LabFunction>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v32])(&v37, v31);
  v32 = -1;
  if (v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  v30 = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E339B2F8[v28])(&v37, v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::LabFunction>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LabFunction>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LabFunction>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27 = &v36;
  v28 = &v36;
  v29 = &v36;
  v30 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = (uint64_t *)&v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v5])(&v37, &v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 32);
    LODWORD(v30) = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v7])(&v37, v31, a2 + 48);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 64);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v28])(&v37, &v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if ((_DWORD)v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::LCHFunction>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v32])(&v37, v31);
  v32 = -1;
  if ((_DWORD)v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  LODWORD(v30) = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v28])(&v37, &v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::LCHFunction>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LCHFunction>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LCHFunction>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE v31[16];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27 = &v36;
  v28 = &v36;
  v29 = &v36;
  v30 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = (uint64_t *)&v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v5])(&v37, &v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 32);
    LODWORD(v30) = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B638[v7])(&v37, v31, a2 + 48);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 72);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v28])(&v37, &v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if ((_DWORD)v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B848[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::OKLabFunction>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2F8[v32])(&v37, v31);
  v32 = -1;
  if ((_DWORD)v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  LODWORD(v30) = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v28])(&v37, &v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::OKLabFunction>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLabFunction>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLabFunction>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE v31[8];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27 = &v36;
  v28 = &v36;
  v29 = &v36;
  v30 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = (uint64_t *)&v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v5])(&v37, &v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 32);
    LODWORD(v30) = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v7])(&v37, v31, a2 + 48);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 64);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v28])(&v37, &v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if ((_DWORD)v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::OKLCHFunction>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v32])(&v37, v31);
  v32 = -1;
  if ((_DWORD)v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  LODWORD(v30) = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v28])(&v37, &v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::OKLCHFunction>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLCHFunction>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLCHFunction>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _BYTE v31[16];
  int v32;
  _BYTE v33[8];
  int v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;

  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v36 = a1;
  v27 = &v36;
  v28 = &v36;
  v29 = &v36;
  v30 = &v36;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v37 = (uint64_t *)&v27;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v37, a2);
  LOBYTE(v27) = 0;
  LODWORD(v28) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v5])(&v37, &v27, a2 + 16);
    LODWORD(v28) = v5;
  }
  LOBYTE(v29) = 0;
  LODWORD(v30) = -1;
  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v6])(&v37, &v29, a2 + 32);
    LODWORD(v30) = v6;
  }
  v31[0] = 0;
  v32 = -1;
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B638[v7])(&v37, v31, a2 + 48);
    v32 = v7;
  }
  v33[0] = 0;
  v35 = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v34 = -1;
    v8 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v8])(&v37, v33, a2 + 72);
      v34 = v8;
    }
    v35 = 1;
  }
  LOBYTE(v37) = 32;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 16), v10 >= *(_DWORD *)(v9 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(a1 + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = 32;
    else
      *(_WORD *)(v12 + 2 * v10) = 32;
  }
  v36 = a1;
  if ((_DWORD)v28 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v28])(&v37, &v27);
  LOBYTE(v37) = 32;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(unsigned int *)(a1 + 16), v14 >= *(_DWORD *)(v13 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v15 = *(_DWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v14 + 1;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v14) = 32;
    else
      *(_WORD *)(v16 + 2 * v14) = 32;
  }
  v36 = a1;
  if ((_DWORD)v30 == -1)
    goto LABEL_59;
  v37 = &v36;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v30])(&v37, &v29);
  LOBYTE(v37) = 32;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 || (v18 = *(unsigned int *)(a1 + 16), v18 >= *(_DWORD *)(v17 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 8);
    *(_DWORD *)(a1 + 16) = v18 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v18) = 32;
    else
      *(_WORD *)(v20 + 2 * v18) = 32;
  }
  v36 = a1;
  if (v32 == -1)
    goto LABEL_59;
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B848[v32])(&v37, v31);
  if (!v35)
    goto LABEL_37;
  WTF::StringBuilder::append();
  if (!v35)
  {
    __break(1u);
    goto LABEL_59;
  }
  v36 = a1;
  if (v34 == -1)
  {
LABEL_59:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>(v26);
  }
  v37 = &v36;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v34])(&v37, v33);
LABEL_37:
  LOBYTE(v37) = 41;
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22 || (v23 = *(unsigned int *)(a1 + 16), v23 >= *(_DWORD *)(v22 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 8);
    *(_DWORD *)(a1 + 16) = v23 + 1;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = 41;
    else
      *(_WORD *)(v25 + 2 * v23) = 41;
  }
  if (v35)
  {
    if (v34 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v34])(&v37, v33);
    v34 = -1;
  }
  if (v32 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2F8[v32])(&v37, v31);
  v32 = -1;
  if ((_DWORD)v30 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v30])(&v37, &v29);
  LODWORD(v30) = -1;
  if ((_DWORD)v28 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v28])(&v37, &v27);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _BYTE v36[8];
  int v37;
  _BYTE v38[8];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;

  WTF::StringBuilder::append();
  v41 = a1;
  v32 = &v41;
  v33 = &v41;
  v34 = &v41;
  v35 = &v41;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v42 = (uint64_t *)&v32;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v42, a2);
  LOBYTE(v32) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v32) = 0;
  LODWORD(v33) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v42, &v32, a2 + 16);
    LODWORD(v33) = v8;
  }
  LOBYTE(v34) = 0;
  LODWORD(v35) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v42, &v34, a2 + 32);
    LODWORD(v35) = v9;
  }
  v36[0] = 0;
  v37 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v42, v36, a2 + 48);
    v37 = v10;
  }
  v38[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v39 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v42, v38, a2 + 64);
      v39 = v11;
    }
    v40 = 1;
  }
  LOBYTE(v42) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v41 = a1;
  if ((_DWORD)v33 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v33])(&v42, &v32);
  LOBYTE(v42) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v41 = a1;
  if ((_DWORD)v35 == -1)
    goto LABEL_68;
  v42 = &v41;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v35])(&v42, &v34);
  LOBYTE(v42) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v41 = a1;
  if (v37 == -1)
    goto LABEL_68;
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v37])(&v42, v36);
  if (!v40)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v40)
  {
    __break(1u);
    goto LABEL_68;
  }
  v41 = a1;
  if (v39 == -1)
  {
LABEL_68:
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>(v31);
  }
  v42 = &v41;
  result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v39])(&v42, v38);
LABEL_43:
  LOBYTE(v42) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v40)
  {
    if (v39 != -1)
      result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v39])(&v42, v38);
    v39 = -1;
  }
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v37])(&v42, v36);
  v37 = -1;
  if ((_DWORD)v35 != -1)
    result = ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v35])(&v42, &v34);
  LODWORD(v35) = -1;
  if ((_DWORD)v33 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v33])(&v42, &v32);
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>((uint64_t)&v6, a2);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t ***v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;

  WTF::StringBuilder::append();
  v42 = a1;
  v33 = &v42;
  v34 = &v42;
  v35 = &v42;
  v36 = &v42;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v43 = (uint64_t *)&v33;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS8_19serializationForCSSERNS6_13StringBuilderERKS9_E3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSK_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSK_INSN_INS8_17HSLFunctionModernEEEEENSK_INSN_INS8_11HWBFunctionEEEEENSK_INSN_INS8_11LabFunctionEEEEENSK_INSN_INS8_11LCHFunctionEEEEENSK_INSN_INS8_13OKLabFunctionEEEEENSK_INSN_INS8_13OKLCHFunctionEEEEENSK_INSN_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_19DisplayP3DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_17Rec2020DescriptorEEEEEEEEENSK_INSN_INS19_INS1A_IfNS8_15SRGBADescriptorEEEEEEEEENSK_INSN_INS19_INS8_21ExtendedLinearEncodedIfS1V_EEEEEEEENSK_INSN_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSK_INSN_INS25_INS26_IfLS27_1EEEEEEEEEEEEDpOT_EUlRKSI_E_JZNSA_IJSF_EEESG_S2I_S2L_EUlRKSJ_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlRKSM_E_ZNSA_IJSF_EEESG_S2I_S2L_EUlTyRKNSK_INSN_IT_EEEEE_EEEEEJRKNS0_6__implIJSI_SJ_SM_SQ_ST_SW_SZ_S12_S15_S18_S1F_S1K_S1P_S1U_S1Z_S24_S2B_S2F_EEEEEESG_OS2V_DpOT0____fmatrix[v4])(&v43, a2);
  LOBYTE(v33) = 32;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v29 = *(_DWORD *)(v5 + 16);
    v30 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v29 & 4) != 0)
      *(_BYTE *)(v30 + v6) = 32;
    else
      *(_WORD *)(v30 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::append();
  LOBYTE(v33) = 0;
  LODWORD(v34) = -1;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v8])(&v43, &v33, a2 + 16);
    LODWORD(v34) = v8;
  }
  LOBYTE(v35) = 0;
  LODWORD(v36) = -1;
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t **, uint64_t **, uint64_t))off_1E339B608[v9])(&v43, &v35, a2 + 32);
    LODWORD(v36) = v9;
  }
  v37[0] = 0;
  v38 = -1;
  v10 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v10])(&v43, v37, a2 + 48);
    v38 = v10;
  }
  v39[0] = 0;
  v41 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v40 = -1;
    v11 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(uint64_t **, _BYTE *, uint64_t))off_1E339B608[v11])(&v43, v39, a2 + 64);
      v40 = v11;
    }
    v41 = 1;
  }
  LOBYTE(v43) = 32;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(unsigned int *)(a1 + 16), v13 >= *(_DWORD *)(v12 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v14 = *(_DWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 8);
    *(_DWORD *)(a1 + 16) = v13 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v13) = 32;
    else
      *(_WORD *)(v15 + 2 * v13) = 32;
  }
  v42 = a1;
  if ((_DWORD)v34 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v34])(&v43, &v33);
  LOBYTE(v43) = 32;
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16 || (v17 = *(unsigned int *)(a1 + 16), v17 >= *(_DWORD *)(v16 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v17 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = 32;
    else
      *(_WORD *)(v19 + 2 * v17) = 32;
  }
  v42 = a1;
  if ((_DWORD)v36 == -1)
    goto LABEL_68;
  v43 = &v42;
  ((void (*)(uint64_t **, uint64_t **))off_1E339B818[v36])(&v43, &v35);
  LOBYTE(v43) = 32;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20 || (v21 = *(unsigned int *)(a1 + 16), v21 >= *(_DWORD *)(v20 + 4)) || *(_QWORD *)a1)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v22 = *(_DWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 8);
    *(_DWORD *)(a1 + 16) = v21 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v21) = 32;
    else
      *(_WORD *)(v23 + 2 * v21) = 32;
  }
  v42 = a1;
  if (v38 == -1)
    goto LABEL_68;
  v43 = &v42;
  result = (WTF::StringImpl *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v38])(&v43, v37);
  if (!v41)
    goto LABEL_43;
  WTF::StringBuilder::append();
  if (!v41)
  {
    __break(1u);
    goto LABEL_68;
  }
  v42 = a1;
  if (v40 == -1)
  {
LABEL_68:
    v31 = (uint64_t ***)std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(v31, v32);
  }
  v43 = &v42;
  result = (WTF::StringImpl *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B818[v40])(&v43, v39);
LABEL_43:
  LOBYTE(v43) = 41;
  v25 = *(_QWORD *)(a1 + 8);
  if (!v25 || (v26 = *(unsigned int *)(a1 + 16), v26 >= *(_DWORD *)(v25 + 4)) || *(_QWORD *)a1)
  {
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  else
  {
    v27 = *(_DWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(a1 + 16) = v26 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 41;
    else
      *(_WORD *)(v28 + 2 * v26) = 41;
  }
  if (v41)
  {
    if (v40 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v40])(&v43, v39);
    v40 = -1;
  }
  if (v38 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339B2C8[v38])(&v43, v37);
  v38 = -1;
  if ((_DWORD)v36 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v36])(&v43, &v35);
  LODWORD(v36) = -1;
  if ((_DWORD)v34 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t **, uint64_t **))off_1E339B2C8[v34])(&v43, &v33);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t ***a1, unint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v2 = ***a1;
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v8, *a2, (uint64_t *)a2);
  v4 = v8;
  if (*(_DWORD *)(v2 + 16))
    v5 = 0;
  else
    v5 = *(_QWORD *)(v2 + 8) == 0;
  if (!v5)
  {
    if (v8 && (*((_BYTE *)v8 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_14;
  }
  if (v8)
    *(_DWORD *)v8 += 2;
  v6 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v3);
      v4 = v8;
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (v4)
LABEL_12:
    LODWORD(v4) = *((_DWORD *)v4 + 1);
LABEL_13:
  *(_DWORD *)(v2 + 16) = (_DWORD)v4;
LABEL_14:
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_()
{
  return WTF::StringBuilder::append();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSColorMix<WebCore::StyleColorMix>(**(_QWORD **)(*(_QWORD *)a1 + 16), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::HWBFunction>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LabFunction>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::LCHFunction>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLabFunction>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::OKLCHFunction>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNSA_19serializationForCSSERNS8_13StringBuilderERKSB_E3__0EEEDcRKNS_7variantIJNSA_18StyleAbsoluteColorENSA_17StyleCurrentColorENS8_9UniqueRefINSA_13StyleColorMixEEENSM_INSA_18StyleRelativeColorINSA_25RGBFunctionModernRelativeEEEEENSM_INSP_INSA_17HSLFunctionModernEEEEENSM_INSP_INSA_11HWBFunctionEEEEENSM_INSP_INSA_11LabFunctionEEEEENSM_INSP_INSA_11LCHFunctionEEEEENSM_INSP_INSA_13OKLabFunctionEEEEENSM_INSP_INSA_13OKLCHFunctionEEEEENSM_INSP_INSA_16ColorRGBFunctionINSA_20ExtendedGammaEncodedIfNSA_16A98RGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_19DisplayP3DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_21ProPhotoRGBDescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_17Rec2020DescriptorEEEEEEEEENSM_INSP_INS1B_INS1C_IfNSA_15SRGBADescriptorEEEEEEEEENSM_INSP_INS1B_INSA_21ExtendedLinearEncodedIfS1X_EEEEEEEENSM_INSP_INSA_16ColorXYZFunctionINSA_4XYZAIfLNSA_10WhitePointE0EEEEEEEEENSM_INSP_INS27_INS28_IfLS29_1EEEEEEEEEEEEDpOT_EUlRKSK_E_JZNSC_IJSH_EEESI_S2K_S2N_EUlRKSL_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlRKSO_E_ZNSC_IJSH_EEESI_S2K_S2N_EUlTyRKNSM_INSP_IT_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSK_SL_SO_SS_SV_SY_S11_S14_S17_S1A_S1H_S1M_S1R_S1W_S21_S26_S2D_S2H_EEEEEEDcS2X_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WebCore::serializationForCSSRelativeColor<WebCore::StyleRelativeColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>>(**(_QWORD **)(*(_QWORD *)a1 + 24), *a2);
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::RGBFunctionModernRelative>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::RGBFunctionModernRelative>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>,WebCore::StyleRelativeColor<WebCore::RGBFunctionModernRelative>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  result = WTF::fastMalloc((WTF *)0x58);
  v5 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v6])(&v11, result, a1);
    *(_DWORD *)(v5 + 8) = v6;
  }
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = -1;
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v7])(&v12);
    *(_DWORD *)(v5 + 24) = v7;
  }
  *(_BYTE *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v8])(&v13);
    *(_DWORD *)(v5 + 40) = v8;
  }
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 56) = -1;
  v9 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v9])(&v14);
    *(_DWORD *)(v5 + 56) = v9;
  }
  *(_BYTE *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    *(_DWORD *)(v5 + 72) = -1;
    v10 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E339B908[v10])(&v15);
      *(_DWORD *)(v5 + 72) = v10;
    }
    *(_BYTE *)(v5 + 80) = 1;
  }
  *a2 = v5;
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::HSLFunctionModern>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[16];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[8];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B638[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[12];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 10);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[16];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 14);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 88))
    {
      v22 = -1;
      v8 = v3[20];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 18);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::HSLFunctionModern>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2F8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>,WebCore::StyleRelativeColor<WebCore::HSLFunctionModern>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  result = WTF::fastMalloc((WTF *)0x60);
  v5 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v6])(&v11, result, a1);
    *(_DWORD *)(v5 + 8) = v6;
  }
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 32) = -1;
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B938[v7])(&v12);
    *(_DWORD *)(v5 + 32) = v7;
  }
  *(_BYTE *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 48) = -1;
  v8 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v8])(&v13);
    *(_DWORD *)(v5 + 48) = v8;
  }
  *(_BYTE *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 64) = -1;
  v9 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v9])(&v14);
    *(_DWORD *)(v5 + 64) = v9;
  }
  *(_BYTE *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(v5 + 80) = -1;
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E339B908[v10])(&v15);
      *(_DWORD *)(v5 + 80) = v10;
    }
    *(_BYTE *)(v5 + 88) = 1;
  }
  *a2 = v5;
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::HWBFunction>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[16];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[8];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B638[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[12];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 10);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[16];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 14);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 88))
    {
      v22 = -1;
      v8 = v3[20];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 18);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::HWBFunction>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2F8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::LabFunction>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::LabFunction>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::LCHFunction>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[16];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B638[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 88))
    {
      v22 = -1;
      v8 = v3[20];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 18);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::LCHFunction>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2F8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::StyleRelativeColor<WebCore::LCHFunction>,WebCore::StyleRelativeColor<WebCore::LCHFunction>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  result = WTF::fastMalloc((WTF *)0x60);
  v5 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v6])(&v11, result, a1);
    *(_DWORD *)(v5 + 8) = v6;
  }
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = -1;
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v7])(&v12);
    *(_DWORD *)(v5 + 24) = v7;
  }
  *(_BYTE *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B908[v8])(&v13);
    *(_DWORD *)(v5 + 40) = v8;
  }
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 64) = -1;
  v9 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E339B938[v9])(&v14);
    *(_DWORD *)(v5 + 64) = v9;
  }
  *(_BYTE *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(v5 + 80) = -1;
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E339B908[v10])(&v15);
      *(_DWORD *)(v5 + 80) = v10;
    }
    *(_BYTE *)(v5 + 88) = 1;
  }
  *a2 = v5;
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::OKLabFunction>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::OKLabFunction>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::OKLCHFunction>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[16];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B638[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 88))
    {
      v22 = -1;
      v8 = v3[20];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 18);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::OKLCHFunction>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2F8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>(&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::resolveAbsoluteComponents<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>@<X0>(unsigned int *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  _BYTE v17[8];
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  uint64_t v24;
  char v25;

  if (result[2])
  {
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v14 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v15[0] = 0;
    v16 = -1;
    v5 = result[6];
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v5])(&v24, v15, result + 4);
      v16 = v5;
    }
    v17[0] = 0;
    v18 = -1;
    v6 = v3[10];
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v6])(&v24, v17, v3 + 8);
      v18 = v6;
    }
    v19[0] = 0;
    v20 = -1;
    v7 = v3[14];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v7])(&v24, v19, v3 + 12);
      v20 = v7;
    }
    v21[0] = 0;
    v23 = 0;
    if (*((_BYTE *)v3 + 80))
    {
      v22 = -1;
      v8 = v3[18];
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E339B608[v8])(&v24, v21, v3 + 16);
        v22 = v8;
      }
      v23 = 1;
    }
    result = (unsigned int *)WebCore::resolve<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((uint64_t)&v14, &v24);
    *(_QWORD *)a2 = 0;
    if (v24)
    {
      *(_QWORD *)a2 = v24;
      v24 = 0;
    }
    a2[8] = 1;
    if (v23)
    {
      if (v22 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v22])(&v25, v21);
      v22 = -1;
    }
    if (v20 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v20])(&v25, v19);
    v20 = -1;
    if (v18 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v18])(&v25, v17);
    v18 = -1;
    if (v16 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E339B2C8[v16])(&v25, v15);
    v16 = -1;
    if ((v14 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, result));
      if (!v13)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::CSSAtRuleID> [24]>::tryGet<WTF::StringView>(char ***a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  char **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  char *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int16 v34;
  int v35;

  v2 = *a2;
  v3 = *a1;
  v4 = a2[1];
  v5 = (unint64_t)a2[1] & 0xFF00000000;
  if (v5)
  {
    if (!a2[1])
      goto LABEL_14;
    v6 = 0;
    v7 = 24;
    do
    {
      v8 = v7 >> 1;
      v9 = v6 + (v7 >> 1);
      v10 = v3[3 * v9];
      v11 = v4;
      v12 = v2;
      while (1)
      {
        v13 = *v10;
        if (!*v10)
          break;
        v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v12);
        if (v14 != v13)
        {
          if (v13 >= v14)
            goto LABEL_11;
          break;
        }
        ++v10;
        ++v12;
        if (!--v11)
          goto LABEL_11;
      }
      v6 = v9 + 1;
      v8 = v7 + ~v8;
LABEL_11:
      v7 = v8;
    }
    while (v8);
  }
  else
  {
    if (!a2[1])
      goto LABEL_14;
    v6 = 0;
    v18 = 24;
    do
    {
      v19 = v18 >> 1;
      v20 = v6 + (v18 >> 1);
      v21 = v3[3 * v20];
      v22 = 2 * v4;
      v23 = (unsigned __int16 *)v2;
      while (1)
      {
        v24 = *v21;
        if (!*v21)
          break;
        v25 = *v23 | (32 * (*v23 - 65 < 0x1A));
        if (v25 != v24)
        {
          if (v24 >= v25)
            goto LABEL_28;
          break;
        }
        ++v21;
        ++v23;
        v22 -= 2;
        if (!v22)
          goto LABEL_28;
      }
      v6 = v20 + 1;
      v19 = v18 + ~v19;
LABEL_28:
      v18 = v19;
    }
    while (v19);
  }
  if (v6 == 24)
    return 0;
  v3 += 3 * v6;
LABEL_14:
  v15 = v3[1];
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  if (v16 != (char *)v4)
    return 0;
  v26 = *v3;
  if (v5)
  {
    if (v4)
    {
      if ((*v2 | 0x20) == *v26)
      {
        v27 = 0;
        v28 = v2 + 1;
        v29 = (unsigned __int8 *)(v26 + 1);
        while (v4 - 1 != v27)
        {
          v30 = v29[v27];
          v31 = v28[v27++] | 0x20;
          if (v31 != v30)
            goto LABEL_36;
        }
        return v3 + 2;
      }
      return 0;
    }
  }
  else if (v4)
  {
    if ((*(unsigned __int16 *)v2 | 0x20) == (unsigned __int16)*v26)
    {
      v27 = 0;
      v32 = v2 + 2;
      v33 = (unsigned __int8 *)(v26 + 1);
      while (v4 - 1 != v27)
      {
        v34 = (char)v33[v27];
        v35 = *(unsigned __int16 *)&v32[2 * v27++] | 0x20;
        if (v35 != v34)
        {
LABEL_36:
          if (v27 < v4)
            return 0;
          return v3 + 2;
        }
      }
      return v3 + 2;
    }
    return 0;
  }
  return v3 + 2;
}

WTF::StringImpl *WebCore::CSSCustomPropertySyntax::parse@<X0>(WTF::StringImpl *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *i;
  int v32;
  char v33;
  unsigned int *v34;
  WebCore::CSSTokenizer *v35;
  __int128 *v36;
  unsigned int v37;
  __int128 *v38;
  char v39;
  unsigned int v40;
  __int128 *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  __int128 *v45;
  __int128 *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v52;
  int v54;
  WTF *v55;
  void *v56;
  int v57;
  __int16 v58;
  int v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  char v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  unsigned __int16 *v80;
  int v81;
  uint64_t v82;
  unsigned __int16 *v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  char **v89;
  int v90;
  unint64_t v92;
  _DWORD *v93;
  WTF::StringImpl *v94;
  unsigned __int8 *v95;
  unsigned int v96;
  uint64_t v97;
  WTF::StringImpl *v99;
  unsigned __int16 *v100;
  int v101;
  unsigned int *v102;
  unsigned int v103;
  __int128 *v104;
  char v105;
  unsigned int v106;
  __int128 *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  char v113;
  unsigned int v114;
  int v115;
  int v116;
  __int128 *v117;
  WTF *v118;
  void *v119;
  int v120;
  __int16 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  __int128 *v129;
  __int128 *v130;
  __int128 *v131;
  __int128 *v132;
  __int128 *v133;
  WebCore::CSSTokenizer *v134;
  WebCore::CSSTokenizer *v135;
  char v136;
  char *v137;
  __int16 v138;
  WTF::StringImpl *v139;
  char v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  unsigned int *v143;
  WebCore::CSSTokenizer *v144;
  unsigned int *v145;

  v4 = (unsigned __int8 *)result;
  v6 = a2;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      while (1)
      {
        v7 = *v4;
        if ((v7 - 9) >= 2 && v7 != 32)
          break;
        ++v4;
        if (!--v6)
          goto LABEL_6;
      }
      if (v7 == 42)
      {
        if (v6 != 1)
        {
          v10 = 1;
          while (1)
          {
            v11 = v4[v10];
            v12 = v11 > 0x20;
            v13 = (1 << v11) & 0x100000600;
            if (v12 || v13 == 0)
              break;
            if (v6 == ++v10)
              goto LABEL_35;
          }
LABEL_181:
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 16) = 0;
          return result;
        }
        goto LABEL_35;
      }
      v8 = 0;
      v19 = 0;
      v141 = 0;
      v142 = 0;
      while (1)
      {
        v20 = &v4[v6];
        v21 = v4;
        while (*v21 != 124)
        {
          ++v21;
          if (!--v6)
            goto LABEL_43;
        }
        v20 = v21;
LABEL_43:
        v22 = v20 - v4;
        if (v20 - v4 < 0)
          goto LABEL_342;
        if (!v22)
        {
          v33 = 1;
          v3 = (WTF::StringImpl *)v4;
          goto LABEL_62;
        }
        v23 = *v4;
        if (v23 != 60)
          break;
        if (v22 == 1)
          goto LABEL_189;
        v24 = 0;
        result = (WTF::StringImpl *)(v4 + 1);
        while (v4[v24 + 1] != 62)
        {
          if (v22 - 1 == ++v24)
            goto LABEL_189;
        }
        if (!v24)
          goto LABEL_189;
        if (v22 - 2 == v24)
        {
          v29 = 0;
        }
        else
        {
          v25 = v22 - v24;
          v26 = &v4[v24];
          v27 = &v4[v24 + 2];
          v28 = *v27;
          if (v28 == 43)
          {
            v29 = 1;
          }
          else
          {
            if (v28 != 35)
            {
              v29 = 0;
              v48 = v25 - 2;
LABEL_95:
              while (1)
              {
                v49 = *v27;
                v12 = v49 > 0x20;
                v50 = (1 << v49) & 0x100000600;
                if (v12 || v50 == 0)
                  break;
                ++v27;
                if (!--v48)
                  goto LABEL_109;
              }
LABEL_189:
              *(_BYTE *)a3 = 0;
              *(_BYTE *)(a3 + 16) = 0;
LABEL_190:
              if ((_DWORD)v19)
              {
                v72 = 0;
                do
                {
                  result = *(WTF::StringImpl **)((char *)v8 + v72 + 8);
                  *(_QWORD *)((char *)v8 + v72 + 8) = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
                  v72 += 16;
                }
                while (16 * v19 != v72);
              }
              goto LABEL_8;
            }
            v29 = 2;
          }
          if (v22 - 3 != v24)
          {
            v48 = v25 - 3;
            v27 = v26 + 3;
            goto LABEL_95;
          }
        }
LABEL_109:
        result = (WTF::StringImpl *)WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CSSCustomPropertySyntax::Type> [14]>::tryGet<WTF::StringView>((const char *)result, v24 | 0x100000000);
        if (result)
          v52 = *(unsigned __int8 *)result;
        else
          v52 = 14;
        if (v52 == 13 && v29 != 0)
          LOWORD(v52) = 14;
        v138 = v52 | ((_WORD)v29 << 8);
        v139 = 0;
        v140 = 1;
LABEL_134:
        if ((_DWORD)v19 == (_DWORD)v142)
        {
          result = (WTF::StringImpl *)WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v141, v19 + 1, (unint64_t)&v138);
          v19 = HIDWORD(v142);
          v8 = v141;
          *((_WORD *)v141 + 8 * HIDWORD(v142)) = *(_WORD *)result;
          v60 = (_DWORD *)*((_QWORD *)result + 1);
          if (v60)
            *v60 += 2;
          *((_QWORD *)v8 + 2 * v19 + 1) = v60;
        }
        else
        {
          v8 = v141;
          *((_WORD *)v141 + 8 * v19) = v138;
          v61 = v139;
          if (v139)
            *(_DWORD *)v139 += 2;
          *((_QWORD *)v8 + 2 * v19 + 1) = v61;
        }
        v19 = (v19 + 1);
        HIDWORD(v142) = v19;
        if (v6)
        {
          if (*v20 == 124)
          {
            v4 = v20 + 1;
            if (!--v6)
              goto LABEL_155;
          }
          else
          {
            v4 = v20;
          }
          v62 = v4;
          v4 += v6;
          while (1)
          {
            v63 = *v62;
            v12 = v63 > 0x20;
            v64 = (1 << v63) & 0x100000600;
            if (v12 || v64 == 0)
              break;
            ++v62;
            if (!--v6)
              goto LABEL_155;
          }
          v4 = v62;
        }
        else
        {
          v4 = v20;
        }
LABEL_155:
        if (!v140)
          goto LABEL_159;
        result = v139;
        v139 = 0;
        if (!result)
          goto LABEL_159;
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          if (!v6)
          {
LABEL_182:
            if ((_DWORD)v19)
            {
              if (!(v19 >> 28))
              {
                result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v19));
                v69 = 0;
                do
                {
                  v70 = (_QWORD *)((char *)v8 + v69);
                  *(_WORD *)((char *)result + v69) = *(_WORD *)((char *)v8 + v69);
                  v71 = *(_DWORD **)((char *)v8 + v69 + 8);
                  if (v71)
                    *v71 += 2;
                  *(_QWORD *)((char *)result + v69 + 8) = v71;
                  v69 += 16;
                }
                while (v70 + 2 != (_QWORD *)((char *)v8 + 16 * v19));
                *(_QWORD *)a3 = result;
                *(_DWORD *)(a3 + 8) = v19;
                *(_DWORD *)(a3 + 12) = v19;
                *(_BYTE *)(a3 + 16) = 1;
                goto LABEL_190;
              }
LABEL_363:
              __break(0xC471u);
              JUMPOUT(0x195875724);
            }
            goto LABEL_7;
          }
        }
        else
        {
          *(_DWORD *)result -= 2;
LABEL_159:
          if (!v6)
            goto LABEL_182;
        }
      }
      v3 = (WTF::StringImpl *)v20;
      v30 = v4 - v20 + 1;
      for (i = v4; ; ++i)
      {
        if ((v23 | 8) == 0x2B)
        {
          v33 = 0;
          v3 = (WTF::StringImpl *)i;
          goto LABEL_62;
        }
        if (!v30)
          break;
        v32 = i[1];
        v23 = v32;
        ++v30;
      }
      v33 = 1;
LABEL_62:
      if (v3 - (WTF::StringImpl *)v4 < 0)
        goto LABEL_342;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        v34 = (unsigned int *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v143 = v34;
        result = WebCore::CSSTokenizer::tryCreate(&v143, (uint64_t *)&v144);
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v34 = v145;
        v143 = v145;
        result = WebCore::CSSTokenizer::tryCreate(&v143, (uint64_t *)&v144);
        if (!v34)
          goto LABEL_67;
      }
      if (*v34 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v34, a2);
      else
        *v34 -= 2;
LABEL_67:
      v35 = v144;
      v134 = v3;
      v136 = v33;
      if (!v144)
      {
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (!*MEMORY[0x1E0CBF2F8])
          goto LABEL_189;
        *(_DWORD *)v3 += 2;
LABEL_126:
        if ((v136 & 1) != 0)
          goto LABEL_131;
        v57 = *(unsigned __int8 *)v134;
        if (v57 == 43)
        {
          v58 = 1;
          goto LABEL_132;
        }
        if (v57 != 35)
LABEL_131:
          v58 = 0;
        else
          v58 = 2;
LABEL_132:
        v59 = *(_DWORD *)v3;
        *(_DWORD *)v3 += 2;
        v138 = (v58 << 8) | 0xB;
        v139 = v3;
        v140 = 1;
        if (v59)
        {
          *(_DWORD *)v3 = v59;
        }
        else
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, a2);
          LODWORD(v19) = HIDWORD(v142);
          if (!v140)
          {
            v8 = v141;
            goto LABEL_189;
          }
        }
        goto LABEL_134;
      }
      v36 = (__int128 *)*((_QWORD *)v144 + 6);
      v37 = *((_DWORD *)v144 + 15);
      v38 = (__int128 *)((char *)v36 + 24 * v37);
      v40 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) == 0x10)
      {
        while (1)
        {
          while (v36 >= v38)
          {
            if ((v66 & 1) == 0)
              goto LABEL_179;
            v36 = (__int128 *)((char *)v36 + 24);
            v66 = 1;
          }
          v67 = *(_DWORD *)v36;
          v36 = (__int128 *)((char *)v36 + 24);
          v42 = v67;
          v68 = v67 & 0x3F;
          if ((v67 & 0x3F) == 0)
            break;
          if (v68 != 16)
            goto LABEL_123;
        }
        v45 = (__int128 *)((char *)v36 - 24);
        v41 = v36;
        v36 = (__int128 *)((char *)v36 - 24);
      }
      else if (v37)
      {
        v41 = (__int128 *)*((_QWORD *)v144 + 6);
        while (1)
        {
          v43 = *(_DWORD *)v41;
          v41 = (__int128 *)((char *)v41 + 24);
          v42 = v43;
          v44 = v43 & 0x3F;
          if ((v43 & 0x3F) == 0)
            break;
          if (v44 != 16)
            goto LABEL_123;
          v36 = v41;
          if (v41 >= v38)
            goto LABEL_105;
        }
        v45 = v36;
      }
      else
      {
        v41 = (__int128 *)*((_QWORD *)v144 + 6);
LABEL_105:
        {
LABEL_179:
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          goto LABEL_123;
        }
        if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) != 0)
          goto LABEL_123;
        v45 = v41;
        v41 = (__int128 *)((char *)v41 + 24);
        v39 = 1;
        v42 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      if ((v42 & 0x3F) != 0)
      {
LABEL_79:
        if (v45 == v38)
        {
          if ((v39 & 1) != 0)
          {
            v39 = 1;
            v41 = v38;
            v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v40 = v40 & 0xFF000000 | 0x1E;
            v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v40;
            v39 = 1;
            v41 = v38;
          }
        }
        do
        {
          if (v41 < v38 || (v39 & 1) != 0)
          {
            v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            if (v41 < v38)
              v46 = v41;
            v47 = *(_DWORD *)v46;
          }
          else
          {
            LOBYTE(v47) = 30;
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v40 & 0xFF000000 | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v39 = 1;
            v40 = v40 & 0xFF000000 | 0x1E;
          }
          v41 = (__int128 *)((char *)v41 + 24);
        }
        while ((v47 & 0x3F) == 0x10);
        if ((__int128 *)((char *)v41 - 24) == v38)
        {
          if ((*((_BYTE *)v45 + 2) & 0x40) != 0)
            WTF::AtomStringImpl::add();
          else
            WTF::AtomStringImpl::add();
          v3 = (WTF::StringImpl *)v145;
        }
        else
        {
          v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
          if (*MEMORY[0x1E0CBF2F8])
            *(_DWORD *)v3 += 2;
        }
        goto LABEL_125;
      }
      v54 = *((_DWORD *)v36 + 4);
      if (v54 < 0)
      {
        v130 = v45;
        v132 = v38;
        v54 = WebCore::cssValueKeywordID(*((_QWORD *)v36 + 1), *((unsigned int *)v36 + 1) | ((unint64_t)((v42 >> 22) & 1) << 32));
        v45 = v130;
        v38 = v132;
        *((_DWORD *)v36 + 4) = v54;
      }
      if ((unsigned __int16)v54 - 1 >= 5 && (unsigned __int16)v54 != 395)
      {
        v40 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        goto LABEL_79;
      }
LABEL_123:
      v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *(_DWORD *)v3 += 2;
LABEL_125:
      WebCore::CSSTokenizer::~CSSTokenizer(v35, a2);
      result = (WTF::StringImpl *)WTF::fastFree(v55, v56);
      if (!v3)
        goto LABEL_189;
      goto LABEL_126;
    }
LABEL_6:
    v8 = 0;
    v142 = 0;
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
LABEL_8:
    if (!v8)
      return result;
    v141 = 0;
    LODWORD(v142) = 0;
    result = v8;
    return (WTF::StringImpl *)WTF::fastFree(result, a2);
  }
  if (!(_DWORD)a2)
  {
LABEL_14:
    result = 0;
    v142 = 0;
LABEL_15:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (!result)
      return result;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = *(unsigned __int16 *)v4;
    if ((v9 - 9) >= 2 && v9 != 32)
      break;
    v4 += 2;
    if (!--v6)
      goto LABEL_14;
  }
  if (v9 == 42)
  {
    if (v6 != 1)
    {
      v15 = 1;
      do
      {
        v16 = *(unsigned __int16 *)&v4[2 * v15];
        v12 = v16 > 0x20;
        v17 = (1 << v16) & 0x100000600;
        if (v12 || v17 == 0)
          goto LABEL_181;
      }
      while (v6 != ++v15);
    }
LABEL_35:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v19 = 0;
  LODWORD(v3) = 0;
  v141 = 0;
  v142 = 0;
  while (1)
  {
    v73 = &v4[2 * v6];
    v74 = v4;
    while (*(_WORD *)v74 != 124)
    {
      v74 += 2;
      if (!--v6)
        goto LABEL_204;
    }
    v73 = v74;
LABEL_204:
    if (v73 - v4 <= -2)
      break;
    if (v73 == v4)
    {
      v75 = 0;
      v137 = (char *)v4;
    }
    else
    {
      v75 = (v73 - v4) >> 1;
      v76 = *(unsigned __int16 *)v4;
      if (v76 == 60)
      {
        v77 = v75 - 1;
        if (v75 == 1)
          goto LABEL_352;
        v78 = (const char *)(v4 + 2);
        if (*((_WORD *)v4 + 1) == 62)
        {
          v79 = (const char *)(v4 + 2);
        }
        else
        {
          v79 = (const char *)(v4 + 2);
          v80 = (unsigned __int16 *)(v4 + 4);
          while (--v77)
          {
            v81 = *v80++;
            v79 += 2;
            if (v81 == 62)
              goto LABEL_215;
          }
          v79 = (const char *)v73;
        }
LABEL_215:
        if (v78 == v79)
          goto LABEL_352;
        if (v79 - v78 <= -2)
          break;
        if (!v77 || *(_WORD *)v79 != 62)
          goto LABEL_352;
        v82 = v77 - 1;
        if (v77 == 1)
        {
          v85 = 0;
        }
        else
        {
          v83 = (unsigned __int16 *)(v79 + 2);
          v84 = *((unsigned __int16 *)v79 + 1);
          if (v84 == 43)
          {
            v85 = 1;
          }
          else
          {
            if (v84 != 35)
            {
              v85 = 0;
LABEL_224:
              while (1)
              {
                v86 = *v83;
                v12 = v86 > 0x20;
                v87 = (1 << v86) & 0x100000600;
                if (v12 || v87 == 0)
                  goto LABEL_352;
                ++v83;
                if (!--v82)
                  goto LABEL_229;
              }
            }
            v85 = 2;
          }
          v82 = v77 - 2;
          if (v77 != 2)
          {
            v83 = (unsigned __int16 *)(v79 + 4);
            goto LABEL_224;
          }
        }
LABEL_229:
        v89 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CSSCustomPropertySyntax::Type> [14]>::tryGet<WTF::StringView>(v78, ((unint64_t)(v79 - v78) >> 1));
        if (v89)
          v90 = *(unsigned __int8 *)v89;
        else
          v90 = 14;
        if (v90 == 13 && v85 != 0)
          LOWORD(v90) = 14;
        v138 = v90 | ((_WORD)v85 << 8);
        v139 = 0;
        v140 = 1;
        goto LABEL_238;
      }
      v100 = (unsigned __int16 *)(v4 + 2);
      v137 = (char *)v4;
      while ((v76 | 8) != 0x2B)
      {
        if (!--v75)
        {
          v137 = (char *)v73;
          break;
        }
        v101 = *v100++;
        v76 = v101;
        v137 += 2;
      }
    }
    if (v137 - (char *)v4 <= -2)
      break;
    if (((v137 - (char *)v4) & 0x1FFFFFFFELL) != 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v102 = v145;
      v143 = v145;
      WebCore::CSSTokenizer::tryCreate(&v143, (uint64_t *)&v144);
      if (!v102)
        goto LABEL_280;
    }
    else
    {
      v102 = (unsigned int *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v143 = v102;
      WebCore::CSSTokenizer::tryCreate(&v143, (uint64_t *)&v144);
    }
    if (*v102 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v102, a2);
    else
      *v102 -= 2;
LABEL_280:
    v135 = v144;
    if (v144)
    {
      v103 = *((_DWORD *)v144 + 15);
      v104 = (__int128 *)*((_QWORD *)v144 + 6);
      v133 = (__int128 *)((char *)v104 + 24 * v103);
      v106 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) == 0x10)
      {
        while (1)
        {
          while (v104 >= v133)
          {
            if ((v113 & 1) == 0)
              goto LABEL_316;
            v104 = (__int128 *)((char *)v104 + 24);
            v113 = 1;
          }
          v114 = *(_DWORD *)v104;
          v104 = (__int128 *)((char *)v104 + 24);
          v108 = v114;
          v115 = v114 & 0x3F;
          if ((v114 & 0x3F) == 0)
            break;
          if (v115 != 16)
            goto LABEL_325;
        }
        v107 = v104;
        v131 = (__int128 *)((char *)v104 - 24);
        v104 = (__int128 *)((char *)v104 - 24);
LABEL_291:
        if ((v108 & 0x3F) == 0)
        {
          v112 = *((_DWORD *)v104 + 4);
          if (v112 < 0)
          {
            v129 = v104;
            v112 = WebCore::cssValueKeywordID(*((_QWORD *)v104 + 1), *((unsigned int *)v104 + 1) | ((unint64_t)((v108 >> 22) & 1) << 32));
            *((_DWORD *)v129 + 4) = v112;
          }
          if ((unsigned __int16)v112 - 1 < 5 || (unsigned __int16)v112 == 395)
            goto LABEL_325;
          v106 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        if (v131 == v133)
        {
          if ((v105 & 1) == 0)
          {
            v106 = v106 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v106;
          }
          v105 = 1;
          v107 = v133;
          v131 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        do
        {
          if (v107 < v133 || (v105 & 1) != 0)
          {
            v117 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            if (v107 < v133)
              v117 = v107;
            v116 = *(_DWORD *)v117;
          }
          else
          {
            LOBYTE(v116) = 30;
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v106 & 0xFF000000 | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v105 = 1;
            v106 = v106 & 0xFF000000 | 0x1E;
          }
          v107 = (__int128 *)((char *)v107 + 24);
        }
        while ((v116 & 0x3F) == 0x10);
        if ((__int128 *)((char *)v107 - 24) != v133)
          goto LABEL_325;
        if ((*((_BYTE *)v131 + 2) & 0x40) != 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v111 = (WTF::StringImpl *)v145;
      }
      else
      {
        if (v103)
        {
          v107 = (__int128 *)*((_QWORD *)v144 + 6);
          while (1)
          {
            v109 = *(_DWORD *)v107;
            v107 = (__int128 *)((char *)v107 + 24);
            v108 = v109;
            v110 = v109 & 0x3F;
            if ((v109 & 0x3F) == 0)
              break;
            if (v110 != 16)
              goto LABEL_325;
            v104 = v107;
            if (v107 >= v133)
              goto LABEL_297;
          }
          v131 = v104;
          goto LABEL_291;
        }
        v107 = (__int128 *)*((_QWORD *)v144 + 6);
LABEL_297:
        {
          if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) == 0)
          {
            v131 = v107;
            v107 = (__int128 *)((char *)v107 + 24);
            v105 = 1;
            v108 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v104 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            goto LABEL_291;
          }
        }
        else
        {
LABEL_316:
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
LABEL_325:
        v111 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v111 += 2;
      }
      WebCore::CSSTokenizer::~CSSTokenizer(v135, a2);
      WTF::fastFree(v118, v119);
      if (!v111)
        goto LABEL_352;
      goto LABEL_328;
    }
    v111 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_352;
    *(_DWORD *)v111 += 2;
    if (!v75)
      goto LABEL_341;
LABEL_328:
    v120 = *(unsigned __int16 *)v137;
    if (v120 == 43)
    {
      v121 = 1;
      goto LABEL_331;
    }
    if (v120 == 35)
      v121 = 2;
    else
LABEL_341:
      v121 = 0;
LABEL_331:
    v122 = *(_DWORD *)v111;
    *(_DWORD *)v111 += 2;
    v138 = (v121 << 8) | 0xB;
    v139 = v111;
    v140 = 1;
    if (v122)
    {
      *(_DWORD *)v111 = v122;
    }
    else
    {
      WTF::StringImpl::destroy(v111, a2);
      LODWORD(v3) = HIDWORD(v142);
      if (!v140)
      {
        v19 = (unint64_t)v141;
LABEL_352:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 16) = 0;
        goto LABEL_353;
      }
    }
LABEL_238:
    if ((_DWORD)v3 == (_DWORD)v142)
    {
      v92 = WTF::Vector<WebCore::IDBError,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v141, v3 + 1, (unint64_t)&v138);
      v3 = (WTF::StringImpl *)HIDWORD(v142);
      v19 = (unint64_t)v141;
      *((_WORD *)v141 + 8 * HIDWORD(v142)) = *(_WORD *)v92;
      v93 = *(_DWORD **)(v92 + 8);
      if (v93)
        *v93 += 2;
      *(_QWORD *)(v19 + 16 * (_QWORD)v3 + 8) = v93;
    }
    else
    {
      v19 = (unint64_t)v141;
      *((_WORD *)v141 + 8 * v3) = v138;
      v94 = v139;
      if (v139)
        *(_DWORD *)v139 += 2;
      *(_QWORD *)(v19 + 16 * v3 + 8) = v94;
    }
    LODWORD(v3) = (_DWORD)v3 + 1;
    HIDWORD(v142) = (_DWORD)v3;
    if (!v6)
    {
      v4 = v73;
      goto LABEL_256;
    }
    if (*(_WORD *)v73 == 124)
    {
      v4 = v73 + 2;
      if (!--v6)
        goto LABEL_256;
    }
    else
    {
      v4 = v73;
    }
    v95 = v4;
    v4 += 2 * v6;
    while (1)
    {
      v96 = *(unsigned __int16 *)v95;
      v12 = v96 > 0x20;
      v97 = (1 << v96) & 0x100000600;
      if (v12 || v97 == 0)
        break;
      v95 += 2;
      if (!--v6)
        goto LABEL_256;
    }
    v4 = v95;
LABEL_256:
    if (!v140)
      goto LABEL_260;
    v99 = v139;
    v139 = 0;
    if (!v99)
      goto LABEL_260;
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::destroy(v99, a2);
      if (!v6)
        goto LABEL_343;
    }
    else
    {
      *(_DWORD *)v99 -= 2;
LABEL_260:
      if (!v6)
        goto LABEL_343;
    }
  }
LABEL_342:
  __break(1u);
LABEL_343:
  if (!(_DWORD)v3)
  {
    result = (WTF::StringImpl *)v19;
    goto LABEL_15;
  }
  if (v3 >> 28)
    goto LABEL_363;
  v123 = WTF::fastMalloc((WTF *)(16 * v3));
  v124 = 0;
  do
  {
    v125 = (_QWORD *)(v19 + v124);
    *(_WORD *)(v123 + v124) = *(_WORD *)(v19 + v124);
    v126 = *(_DWORD **)(v19 + v124 + 8);
    if (v126)
      *v126 += 2;
    *(_QWORD *)(v123 + v124 + 8) = v126;
    v124 += 16;
  }
  while (v125 + 2 != (_QWORD *)(v19 + 16 * v3));
  *(_QWORD *)a3 = v123;
  *(_DWORD *)(a3 + 8) = (_DWORD)v3;
  *(_DWORD *)(a3 + 12) = (_DWORD)v3;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_353:
  if ((_DWORD)v3)
  {
    v127 = 0;
    do
    {
      v128 = *(WTF::StringImpl **)(v19 + v127 + 8);
      *(_QWORD *)(v19 + v127 + 8) = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, a2);
        else
          *(_DWORD *)v128 -= 2;
      }
      v127 += 16;
    }
    while (16 * v3 != v127);
  }
  result = (WTF::StringImpl *)v19;
  if (v19)
  {
LABEL_16:
    v141 = 0;
    LODWORD(v142) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::CSSParser::CSSParser(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  __int128 v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v3;
  v4 = *(_DWORD **)(a2 + 40);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v5;
  return result;
}

{
  _DWORD *v2;
  __int128 v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v3;
  v4 = *(_DWORD **)(a2 + 40);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v5;
  return result;
}

void WebCore::CSSParser::~CSSParser(WebCore::CSSParser *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

unsigned int *WebCore::CSSParserImpl::parseStyleSheetForInspector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned __int8 v9;
  char v10;
  BOOL v11;
  __int128 *v12;
  int v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)();
  BOOL v20;
  char v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  unsigned int *result;
  unsigned int v30;
  unsigned int v31;
  _BYTE v32[80];
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;

  v34 = 0;
  v35 = a4;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v32, a2);
  v6 = *(__int128 **)(v33 + 48);
  v7 = *(_DWORD *)(v33 + 60);
  v8 = (__int128 *)((char *)v6 + 24 * v7);
  v42 = v6;
  v43 = v8;
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v6;
      if (v6 >= v8)
      {
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v13 = *(_DWORD *)v12 & 0x3F;
      if ((v13 - 17) < 2)
      {
        if (v6 == v8)
        {
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        else
        {
          v42 = (__int128 *)((char *)v6 + 24);
        }
        goto LABEL_44;
      }
      if (v13 == 2)
      {
        WebCore::CSSParserImpl::consumeAtRule((WebCore::CSSParserTokenRange *)v32, &v42, v9, &v41);
      }
      else
      {
        if (v13 == 16)
        {
          v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v6 < v8 || (v14 & 1) != 0)
            {
              v16 = v6 >= v8 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
              v17 = *(_DWORD *)v16;
            }
            else
            {
              v17 = v15 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
              v14 = 1;
              v15 = v17;
            }
            if ((v17 & 0x3F) != 0x10)
              break;
            v6 = (__int128 *)((char *)v6 + 24);
            v42 = v6;
          }
          goto LABEL_44;
        }
        WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v41, (uint64_t)v32);
      }
      v18 = v41;
      if (v41)
        v19 = WTF::RefPtr<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>::unspecifiedBoolTypeInstance;
      else
        v19 = 0;
      v20 = v19 != 0;
      if ((v10 & 1) == 0)
        v11 = v20;
      if (v41)
        break;
LABEL_43:
      v10 = 1;
LABEL_44:
      v6 = v42;
      v8 = v43;
      if (v42 == v43)
        goto LABEL_55;
    }
    v21 = *(_BYTE *)(v41 + 4);
    v22 = v21 & 0x1F;
    if (v22 == 2 || v9 <= 1u && (v21 & 0x1E) == 0x10 && v22 == 17)
    {
      v9 = 1;
    }
    else if (v22 == 3)
    {
      v9 = 2;
    }
    else if (v22 == 10)
    {
      v9 = 3;
    }
    else
    {
      v9 = 4;
    }
    v23 = *(_DWORD *)v41 + 1;
    *(_DWORD *)v41 = v23;
    v40 = (int *)v18;
    if ((*(_BYTE *)(v18 + 4) & 0x1F) == 2)
    {
      v40 = 0;
      v24 = (int *)v18;
    }
    else
    {
      WebCore::StyleSheetContents::parserAppendRule((void **)a3, &v40);
      v24 = v40;
      v40 = 0;
      if (!v24)
      {
LABEL_41:
        if (*(_DWORD *)v18 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v18, v5);
        else
          --*(_DWORD *)v18;
        goto LABEL_43;
      }
      v23 = *v24;
    }
    v25 = v23 - 1;
    if (v25)
      *v24 = v25;
    else
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v24, v5);
    goto LABEL_41;
  }
  v11 = 0;
LABEL_55:
  *(_BYTE *)(a3 + 122) = v11;
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v32, v5);
  v27 = v38;
  if (v38)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v27, v26);
  }
  v28 = v36;
  if (v36)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v28, v26);
  }
  result = (unsigned int *)v34;
  if (v34)
  {
    *((_QWORD *)v34 + 1) = 0;
    v34 = 0;
    do
    {
      v30 = __ldaxr(result);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, result));
    if (!v31)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v26);
    }
  }
  return result;
}

void WebCore::CSSParserImpl::parseRule(uint64_t a1@<X1>, unsigned int a2@<W3>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  BOOL v13;
  char v14;
  _DWORD *v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  __int128 *v19;
  unsigned int v20;
  _DWORD *v21;
  __int128 *v22;
  __int128 *v23;
  _BYTE v24[80];
  uint64_t v25;

  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v24, a1);
  v6 = *(__int128 **)(v25 + 48);
  v7 = (__int128 *)((char *)v6 + 24 * *(unsigned int *)(v25 + 60));
  v8 = 24 * *(unsigned int *)(v25 + 60);
  v22 = v6;
  v23 = v7;
  v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v6 < v7 || (v9 & 1) != 0)
    {
      v11 = v6 >= v7 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
      v12 = *(_DWORD *)v11;
    }
    else
    {
      v12 = v10 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v9 = 1;
      v10 = v12;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    v22 = v6;
    v8 -= 24;
  }
  if (!v8)
    goto LABEL_31;
  v13 = v6 >= v7;
  v14 = (v6 < v7) | v9;
  if (v13)
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  if ((v14 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10 & 0xFF000000 | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  if ((*(_DWORD *)v6 & 0x3F) == 2)
    WebCore::CSSParserImpl::consumeAtRule((WebCore::CSSParserTokenRange *)v24, &v22, a2, (uint64_t *)&v21);
  else
    WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v21, (uint64_t)v24);
  v15 = v21;
  if (v21)
  {
    v16 = v22;
    v18 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v16 < v23 || (v17 & 1) != 0)
      {
        v19 = v16 >= v23 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v16;
        v20 = *(_DWORD *)v19;
      }
      else
      {
        v20 = v18 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v17 = 1;
        v18 = v20;
      }
      if ((v20 & 0x3F) != 0x10)
        break;
      v16 = (__int128 *)((char *)v16 + 24);
      v22 = v16;
    }
    if (v16 == v23)
    {
      *a3 = v21;
    }
    else
    {
      *a3 = 0;
      if (*v15 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, v5);
      else
        --*v15;
    }
  }
  else
  {
LABEL_31:
    *a3 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v24, v5);
}

int *WebCore::CSSParser::parseColor@<X0>(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  int v13;
  unsigned int *v14;
  char *v15;
  unint64_t v16;
  int *result;
  _UNKNOWN *__ptr32 *v18;
  int16x8_t v19;
  int16x8_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  int *v29;

  v13 = *((unsigned __int8 *)a2 + 48);
  v14 = *this;
  if (*this)
  {
    v15 = (char *)*((_QWORD *)v14 + 1);
    v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  result = (int *)WebCore::CSSParserFastPaths::parseSimpleColor(v15, (const char *)v16, v13 != 1, a4, a5, a6, a7, a8, a9);
  if (BYTE4(result))
  {
    *a3 = bswap32(result) | 0x1104000000000000;
    return result;
  }
  WebCore::CSSParser::parseSingleValue(5, this, (uint64_t)a2, v18, &v29, v19, v20, v21, v22, v23, v24);
  result = v29;
  if (!v29 || ((*((unsigned __int16 *)v29 + 2) | (*((unsigned __int8 *)v29 + 6) << 16)) & 0x3F87F) != 0x18)
  {
    *a3 = 0;
    goto LABEL_12;
  }
  v26 = *((_QWORD *)v29 + 1);
  *a3 = v26;
  if ((v26 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    result = v29;
LABEL_12:
    if (!result)
      return result;
  }
  if (*result == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v25);
  *result -= 2;
  return result;
}

unint64_t WebCore::CSSParserFastPaths::parseSimpleColor(char *a1, const char *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  unint64_t v14;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v20;
  unsigned __int8 v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned __int8 v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v62;
  int v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float v68;
  uint64_t v69;
  _BYTE *v71;
  int i;
  double v73;
  double v74;
  unsigned int v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned __int16 v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  unsigned __int16 v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  unsigned __int8 v98;
  unsigned __int16 v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned __int8 v110;
  unsigned __int8 *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned __int8 **v122;
  uint64_t v123;
  unint64_t v124;
  unsigned __int8 v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  char *v129;
  float v130;
  uint64_t v131;
  unsigned int v132;
  unint64_t v133;
  BOOL v134;
  _BYTE *v135;
  unint64_t v136;
  int v137;
  int v138;
  unsigned __int8 v139;
  double v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;

  v13 = a1;
  v143 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (a2 < 4uLL || *a1 != 35)
      goto LABEL_19;
    if ((_DWORD)a2 == 7)
      goto LABEL_5;
    v27 = 0;
    if (a2 > 9)
    {
      v26 = 0;
      goto LABEL_18;
    }
    v10 = 560;
    v26 = 0;
    if (((1 << (char)a2) & 0x230) != 0)
    {
LABEL_5:
      v16 = 0;
      v17 = (unsigned __int8 *)(a1 + 1);
      v10 = a2 - 1;
      while (1)
      {
        v18 = *v17;
        v9 = ((v18 | 0x20) - 97);
        if (v18 - 48 >= 0xA && v9 > 5)
          break;
        v20 = 16 * v16;
        v21 = (v18 + 9) & 0xF;
        if (v18 < 0x41)
          v21 = v18 - 48;
        v22 = v21;
        v16 = v20 | v21;
        ++v17;
        if (!--v10)
        {
          switch((_DWORD)a2)
          {
            case 7:
              LOBYTE(v23) = BYTE2(v20);
              v24 = v20 & 0xFF00 | (v16 << 16);
              goto LABEL_15;
            case 4:
              v23 = (((v20 & 0xF00) << 8) & 0xFF0FFFFF | ((((unsigned __int16)(v20 & 0xF00) >> 8) & 0xF) << 20)) >> 16;
              v10 = (v16 << 8) & 0xF000 | (v16 >> 4 << 8);
              v24 = v10 | ((v22 & 0xF | (16 * v16)) << 16);
LABEL_15:
              v25 = v24 | 0xFF000000;
LABEL_16:
              v26 = 1;
              break;
            case 9:
              v132 = bswap32(v16);
              v25 = v132 & 0xFFFFFF00;
              LOBYTE(v23) = v132;
              goto LABEL_16;
            case 5:
              v23 = ((v22 & 0xF) << 24) | (v22 << 28) | (((unsigned __int16)(v20 & 0xF000) >> 8) >> 4 << 20) | (((unsigned __int16)(v20 & 0xF000) >> 8) >> 4 << 16);
              v137 = v20 & 0xF00;
              v10 = v16 & 0xF0;
              v138 = v23 | (16 * v137) | (v16 >> 4);
              LOBYTE(v23) = BYTE2(v23);
              v25 = v138 & 0xFF00FF00 | v137 | ((v138 | v10) << 16);
              goto LABEL_16;
            default:
              v26 = 0;
              LOBYTE(v23) = 0;
              v25 = 0;
              break;
          }
          v27 = v25 | v23;
          v9 = v25 >> 8;
          goto LABEL_18;
        }
      }
      v27 = 0;
      v26 = 0;
    }
LABEL_18:
    if (v26)
    {
      v57 = (v9 << 8) | v27;
      v58 = 1;
      return v57 | (unint64_t)(v58 << 32);
    }
LABEL_19:
    if ((a3 & 1) == 0 && ((_DWORD)a2 == 6 || (_DWORD)a2 == 3))
    {
      v44 = 0;
      v45 = a2;
      v10 = (uint64_t)a1;
      do
      {
        v46 = *(unsigned __int8 *)v10;
        v47 = ((v46 | 0x20) - 97);
        if (v46 - 48 >= 0xA && v47 > 5)
        {
          v56 = 0;
          v55 = 0;
          goto LABEL_64;
        }
        v49 = 16 * v44;
        v50 = (v46 + 9) & 0xF;
        if (v46 < 0x41)
          v50 = v46 - 48;
        v51 = v50;
        v44 = v49 | v50;
        ++v10;
        --v45;
      }
      while (v45);
      if ((_DWORD)a2 == 6)
      {
        LOBYTE(v52) = BYTE2(v49);
        v53 = v49 & 0xFF00 | (v44 << 16);
      }
      else
      {
        v52 = (((v49 & 0xF00) << 8) & 0xFF0FFFFF | ((((unsigned __int16)(v49 & 0xF00) >> 8) & 0xF) << 20)) >> 16;
        v10 = (v44 << 8) & 0xF000 | ((v44 >> 4) << 8);
        v53 = v10 | ((v51 & 0xF | (16 * v44)) << 16);
      }
      v54 = v53 | 0xFF000000;
      v55 = 1;
      v56 = v54 | v52;
      v47 = v54 >> 8;
LABEL_64:
      if (v55)
      {
        v57 = (v47 << 8) | v56;
        v58 = 1;
        return v57 | (unint64_t)(v58 << 32);
      }
    }
    if (a2 < 5uLL)
    {
      if (a2 != 4)
      {
LABEL_204:
        if (!v14)
        {
LABEL_208:
          *((_BYTE *)&v141 + v14) = 0;
          if (((_DWORD)a2 - 3) > 0x11
            || (v127 = WebCore::ColorDataHash::colordata_hash_function((WebCore::ColorDataHash *)&v141, a2), v127 > 0x41F)
            || (__int16)WebCore::lookup[v127] < 0
            || (v128 = WebCore::lookup[v127],
                v129 = (&WebCore::wordlist)[2 * v128],
                v141 != *v129)
            || strncmp((const char *)&v141 + 1, v129 + 1, ((_DWORD)a2 - 1))
            || v129[v14])
          {
            v58 = 0;
            v119 = 0;
          }
          else
          {
            v119 = (uint64_t)(&WebCore::wordlist)[2 * v128 + 1] & 0xFF00FF00 | (LODWORD((&WebCore::wordlist)[2 * v128 + 1]) << 16) | BYTE2(LODWORD((&WebCore::wordlist)[2 * v128 + 1]));
            v58 = 1;
          }
          v120 = v119 & 0xFFFFFF00;
          v119 = v119;
          goto LABEL_202;
        }
        v122 = &v141;
        v123 = MEMORY[0x1E0CBF868];
        v124 = v14;
        while (1)
        {
          v126 = *v13++;
          v125 = v126;
          if (v126 < 1)
            break;
          *(_BYTE *)v122 = *(_BYTE *)(v123 + v125);
          v122 = (unsigned __int8 **)((char *)v122 + 1);
          if (!--v124)
            goto LABEL_208;
        }
LABEL_201:
        v119 = 0;
        v58 = 0;
        v120 = 0;
LABEL_202:
        v57 = v120 | v119;
        return v57 | (unint64_t)(v58 << 32);
      }
    }
    else if (a1[4] == 40
           && (*a1 & 0xDF) == 0x52
           && (a1[1] & 0xDF) == 0x47
           && (a1[2] & 0xDF) == 0x42
           && (a1[3] & 0xDF) == 0x41)
    {
      v139 = 0;
      v141 = (unsigned __int8 *)(a1 + 5);
      v142 = a2 - 5;
      v84 = WebCore::parseColorIntOrPercentage<unsigned char>(&v141, 0x2Cu, &v139, a4, a5, a6, a7, a8, a9);
      v32 = 0;
      LOBYTE(v30) = 0;
      v31 = 0;
      if (v84 < 0x100u)
        goto LABEL_198;
      v91 = WebCore::parseColorIntOrPercentage<unsigned char>(&v141, 0x2Cu, &v139, v85, v86, v87, v88, v89, v90);
      if (v91 >= 0x100u)
      {
        v98 = v91;
        v99 = WebCore::parseColorIntOrPercentage<unsigned char>(&v141, 0x2Cu, &v139, v92, v93, v94, v95, v96, v97);
        if (v99 >= 0x100u)
        {
          v106 = v142;
          if (v142)
          {
            v107 = 0;
            while (1)
            {
              v108 = v141[v107];
              if (v108 > 0x20 || ((1 << v108) & 0x100003600) == 0)
                break;
              if (v142 == ++v107)
                goto LABEL_144;
            }
            v110 = v99;
            v111 = &v141[v107];
            v112 = v142 - v107;
            v141 += v107;
            v142 -= v107;
            if (v108 == 45)
            {
              v112 = ~v107 + v106;
              v141 = ++v111;
              v142 = v112;
            }
            if (v112 >= 2 && v111[v112 - 1] == 41)
            {
              v113 = v111[v112 - 2];
              if ((v113 - 48) <= 9)
              {
                v114 = *v111;
                if ((v114 - 48) >= 2)
                {
                  if (v114 != 46)
                  {
                    v30 = WebCore::checkForValidDouble<unsigned char>((uint64_t)v111, v112);
                    if (!v30)
                    {
LABEL_227:
                      v32 = 0;
                      v31 = 0;
LABEL_198:
                      if (v32)
                      {
                        v57 = v31 & 0xFFFFFF00 | v30;
                        v58 = 1;
                        return v57 | (unint64_t)(v58 << 32);
                      }
LABEL_200:
                      if (v14 > 0x3F)
                        goto LABEL_201;
                      goto LABEL_204;
                    }
                    if (v108 == 45)
                      LOBYTE(v117) = 0;
                    else
                      LOBYTE(v117) = -1;
LABEL_190:
                    v118 = v117 | 0x100;
LABEL_191:
                    v31 = (v110 << 16) | (v118 << 24) | (v98 << 8);
                    LOBYTE(v30) = v84;
                    v32 = 1;
                    goto LABEL_198;
                  }
                  if (v112 != 3 || v111[1] - 48 > 9)
                  {
LABEL_218:
                    v140 = 0.0;
                    v30 = WebCore::parseDouble<unsigned char>((uint64_t)v111, v112, 0x29u, &v140, v100, v101, v102, v103, v104, v105);
                    if (v30)
                    {
                      if (v108 == 45)
                      {
                        v118 = 0;
                      }
                      else
                      {
                        v130 = v140;
                        v131 = llroundf(v130 * 255.0);
                        if (v131 >= 255)
                          v131 = 255;
                        v118 = v131 & ~(v131 >> 63);
                      }
                      goto LABEL_191;
                    }
                    goto LABEL_227;
                  }
                }
                else
                {
                  if (v112 == 2)
                  {
                    v116 = v108 != 45 && v114 == 49;
                    v117 = v116 << 31 >> 31;
                    goto LABEL_190;
                  }
                  if (v112 != 4 || v114 != 48 || v111[1] != 46 || v111[2] - 48 >= 0xA)
                    goto LABEL_218;
                }
                if (v108 == 45)
                  LOBYTE(v117) = 0;
                else
                  LOBYTE(v117) = WebCore::parseRGBAlphaValue<char16_t>(std::span<char16_t const,18446744073709551615ul> &,char)::tenthAlphaValues[v113 - 48];
                goto LABEL_190;
              }
            }
          }
        }
      }
      goto LABEL_144;
    }
    v28 = a1[3];
    if (v28 == 40 && (*a1 & 0xDF) == 0x52 && (a1[1] & 0xDF) == 0x47 && (a1[2] & 0xDF) == 0x42)
    {
      v139 = 0;
      v141 = (unsigned __int8 *)(a1 + 4);
      v142 = a2 - 4;
      if (a2 != 4)
      {
        v59 = 0;
        while (1)
        {
          v60 = a1[v59 + 4];
          if (v60 > 0x20 || ((1 << v60) & 0x100003600) == 0)
            break;
          if (a2 - 4 == ++v59)
            goto LABEL_144;
        }
        v62 = a2 - v59;
        if (v60 == 45)
        {
          if (a2 - 5 == v59)
            goto LABEL_144;
          v35 = v62 - 5;
          v39 = (uint64_t)&a1[v59 + 5];
          v63 = *(unsigned __int8 *)v39;
        }
        else
        {
          v39 = (uint64_t)&a1[v59 + 4];
          v35 = v62 - 4;
          v63 = *(unsigned __int8 *)v39;
        }
        if ((v63 - 48) <= 9)
        {
          v64 = 0.0;
          v38 = &xmmword_1968DE000;
          v12 = 255.0;
          while (v35)
          {
            LODWORD(v36) = *(unsigned __int8 *)v39;
            if ((v36 - 48) > 9)
              goto LABEL_89;
            a5 = (double)v36 + v64 * 10.0;
            a6 = -48.0;
            v64 = a5 + -48.0;
            --v35;
            ++v39;
            if (a5 + -48.0 >= 255.0)
            {
              if (!v35)
                break;
              v65 = 0;
              while (1)
              {
                LODWORD(v36) = *(unsigned __int8 *)(v39 + v65);
                if ((v36 - 48) > 9)
                  break;
                v32 = 0;
                LOBYTE(v30) = 0;
                v31 = 0;
                if (v35 == ++v65)
                  goto LABEL_198;
              }
              v39 += v65;
              v35 -= v65;
              v64 = 255.0;
LABEL_89:
              if ((_DWORD)v36 == 46)
              {
                v140 = 0.0;
                v11 = v39;
                v133 = WebCore::parseDouble<unsigned char>(v39, v35, 0x25u, &v140, 10.0, a5, a6, a7, a8, a9);
                if (!v133)
                  break;
                v134 = v35 >= v133;
                v35 -= v133;
                if (!v134 || !v35)
                  goto LABEL_251;
                v135 = (_BYTE *)(v11 + v133);
                if (*v135 != 37)
                  break;
                v39 = (uint64_t)v135;
                v64 = v64 + v140;
                LODWORD(v36) = *v135;
              }
              if ((_DWORD)v36 == 37)
              {
                v139 = 3;
                a5 = 255.0;
                if (v64 / 100.0 * 255.0 <= 255.0)
                  v64 = v64 / 100.0 * 255.0;
                else
                  v64 = 255.0;
                if (!--v35)
                  break;
                ++v39;
              }
              else
              {
                v139 = 1;
              }
              v10 = 0;
              while (1)
              {
                v66 = *(unsigned __int8 *)(v39 + v10);
                if (v66 > 0x2C)
                  goto LABEL_144;
                if (((1 << v66) & 0x100003600) == 0)
                {
                  v32 = 0;
                  LOBYTE(v30) = 0;
                  v31 = 0;
                  if (v66 != 44)
                    goto LABEL_198;
                  v67 = v35 - 1;
                  v141 = (unsigned __int8 *)(v39 + v10 + 1);
                  v142 = ~v10 + v35;
                  if (v60 == 45)
                  {
                    LOBYTE(v38) = 0;
                  }
                  else
                  {
                    v68 = v64;
                    v69 = llroundf(v68);
                    if (v69 >= 255)
                      v69 = 255;
                    LODWORD(v38) = v69 & ~(v69 >> 63);
                  }
                  for (; v67 != v10; ++v10)
                  {
                    LODWORD(v11) = *(unsigned __int8 *)(v39 + v10 + 1);
                    if (v11 > 0x20 || ((1 << v11) & 0x100003600) == 0)
                    {
                      if ((_DWORD)v11 == 45)
                        goto LABEL_252;
                      v71 = (_BYTE *)(v39 + v10 + 1);
                      v35 += ~v10;
                      for (i = *v71; ; i = *v71)
                      {
                        if ((i - 48) > 9)
                          goto LABEL_144;
                        v73 = 0.0;
                        v74 = 10.0;
                        do
                        {
                          if (!v35)
                            goto LABEL_144;
                          v75 = *v71;
                          if (v75 - 48 > 9)
                            goto LABEL_120;
                          a5 = (double)v75 + v73 * 10.0;
                          a6 = -48.0;
                          v73 = a5 + -48.0;
                          --v35;
                          ++v71;
                        }
                        while (a5 + -48.0 < v12);
                        if (!v35)
                          goto LABEL_144;
                        v76 = 0;
                        while (1)
                        {
                          v75 = v71[v76];
                          if (v75 - 48 > 9)
                            break;
                          v32 = 0;
                          LOBYTE(v30) = 0;
                          v31 = 0;
                          if (v35 == ++v76)
                            goto LABEL_198;
                        }
                        v71 += v76;
                        v35 -= v76;
                        v73 = v12;
LABEL_120:
                        if ((_DWORD)v36 != 37)
                          break;
                        if (v75 != 46)
                          goto LABEL_139;
                        v140 = 0.0;
                        v136 = WebCore::parseDouble<unsigned char>((uint64_t)v71, v35, 0x25u, &v140, 10.0, a5, a6, a7, a8, a9);
                        if (!v136)
                          goto LABEL_144;
                        v134 = v35 >= v136;
                        v35 -= v136;
                        if (v134 && v35)
                        {
                          v71 += v136;
                          if (*v71 != 37)
                            goto LABEL_144;
                          v73 = v73 + v140;
                          v75 = *v71;
LABEL_139:
                          if (v75 != 37)
                            goto LABEL_144;
                          v139 = 3;
                          v74 = v73 / 100.0 * v12;
                          v73 = v74 <= v12 ? v73 / 100.0 * v12 : v12;
                          if (!--v35)
                            goto LABEL_144;
                          ++v71;
LABEL_124:
                          v77 = v71 + 1;
                          v78 = 1 - v35;
                          while (1)
                          {
                            v79 = *(v77 - 1);
                            if (v79 > 0x2C)
                              goto LABEL_144;
                            if (((1 << v79) & 0x100003600) == 0)
                            {
                              v32 = 0;
                              LOBYTE(v30) = 0;
                              v31 = 0;
                              if (v79 != 44)
                                goto LABEL_198;
                              v141 = v77;
                              v142 = -(uint64_t)v78;
                              *(float *)&v74 = v73;
                              v80 = llroundf(*(float *)&v74);
                              if (v80 >= 255)
                                v80 = 255;
                              v81 = (v80 & ~(v80 >> 63)) << 8;
                              if ((_DWORD)v11 == 45)
                                v82 = 0;
                              else
                                v82 = v81;
                              LODWORD(v30) = WebCore::parseColorIntOrPercentage<unsigned char>(&v141, 0x29u, &v139, v74, a5, a6, a7, a8, a9);
                              v32 = 0;
                              if ((unsigned __int16)v30 >= 0x100u)
                              {
                                v83 = v30;
                                LOBYTE(v30) = 0;
                                v31 = 0;
                                if (!v142)
                                {
                                  v31 = v82 | (v83 << 16) | 0xFF000000;
                                  LOBYTE(v30) = v82 | v38;
                                  v32 = 1;
                                }
                                goto LABEL_198;
                              }
                              goto LABEL_164;
                            }
                            ++v77;
                            if (++v78 == 1)
                              goto LABEL_144;
                          }
                        }
LABEL_251:
                        __break(1u);
LABEL_252:
                        if (v35 - 2 == v10)
                          goto LABEL_144;
                        v35 = v35 - v10 - 2;
                        v71 = (_BYTE *)(v39 + v10 + 2);
                      }
                      v32 = 0;
                      if (v75 == 37)
                      {
LABEL_164:
                        LOBYTE(v30) = 0;
                        v31 = 0;
                        goto LABEL_198;
                      }
                      LOBYTE(v30) = 0;
                      v31 = 0;
                      if (v75 == 46)
                        goto LABEL_198;
                      v139 = 1;
                      goto LABEL_124;
                    }
                  }
                  goto LABEL_144;
                }
                if (v35 == ++v10)
                  goto LABEL_144;
              }
            }
          }
        }
      }
LABEL_144:
      v32 = 0;
      LOBYTE(v30) = 0;
      v31 = 0;
      goto LABEL_198;
    }
    if (a2 >= 5uLL
      && a1[4] == 40
      && (*a1 & 0xDF) == 0x48
      && (a1[1] & 0xDF) == 0x53
      && (v28 & 0xFFFFFFDF) == 0x41)
    {
      v29 = a1[2] & 0xDF;
      if ((_DWORD)v29 == 76)
      {
        v30 = WebCore::parseLegacyHSL<unsigned char>(a1 + 5, a2 - 5, v29);
        v31 = v30 & 0xFFFFFF00;
        v32 = BYTE4(v30);
        goto LABEL_198;
      }
    }
    if (v28 != 40 || (*a1 & 0xDF) != 0x48 || (a1[1] & 0xDF) != 0x53 || (a1[2] & 0xDF) != 0x4C)
      goto LABEL_200;
    v33 = a2 - 4;
    if (a2 == 4)
    {
LABEL_197:
      v32 = 0;
      v31 = 0;
      LOBYTE(v30) = 0;
      goto LABEL_198;
    }
    v34 = a1 + 4;
    v35 = (unint64_t)&a1[a2];
    v36 = 16;
    if (v33 < 0x10)
      v36 = a2 - 4;
    v37 = v36;
    v38 = (__int128 *)(a1 + 4);
    while (1)
    {
      v39 = *(unsigned __int8 *)v38;
      if ((_DWORD)v39 == 44)
        break;
      v38 = (__int128 *)((char *)v38 + 1);
      if (!--v37)
      {
        if (v33 < 0x11)
          goto LABEL_197;
        v38 = (__int128 *)memchr(&v34[v36], 44, v33 - v36);
        if (!v38)
          goto LABEL_197;
        break;
      }
    }
    v40 = (char *)v38 - v34;
    if ((char *)v38 - v34 == -1)
      goto LABEL_197;
    if (v33 < v40)
      goto LABEL_251;
    if (v40 < 4)
    {
      if (!v40)
        goto LABEL_197;
      v41 = (char *)((char *)v38 - v34);
      goto LABEL_147;
    }
    v41 = (char *)(v40 - 3);
    v42 = *((unsigned __int8 *)v38 - 3) | 0x20;
    if (v42 == 114)
    {
      if ((*((_BYTE *)v38 - 2) & 0xDF) == 0x41 && (*((_BYTE *)v38 - 1) & 0xDF) == 0x44)
        goto LABEL_147;
    }
    else if (v42 == 100 && (*((_BYTE *)v38 - 2) & 0xDF) == 0x45)
    {
      v43 = (char *)((char *)v38 - v34);
      if ((*((_BYTE *)v38 - 1) & 0xDF) != 0x47)
      {
LABEL_148:
        if (v34[(_QWORD)v43 - 1] != 46)
        {
          LOBYTE(v141) = 0;
          WTF::charactersToDouble();
        }
        goto LABEL_197;
      }
LABEL_147:
      v43 = v41;
      goto LABEL_148;
    }
    v43 = (char *)((char *)v38 - v34);
    goto LABEL_148;
  }
  return WebCore::parseSimpleColorInternal<char16_t>((unsigned __int16 *)a1, (const char *)a2, a3, a4, a5, a6, a7, a8, a9);
}

void WebCore::CSSParser::parseSingleValue(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, _UNKNOWN *__ptr32 *a4@<X5>, int **a5@<X8>, int16x8_t a6@<Q0>, int16x8_t a7@<Q1>, double a8@<D2>, double a9@<D3>, double a10@<D4>, double a11@<D5>)
{
  unsigned int *v12;
  uint64_t v13;
  WTF::StringImpl *v17;
  __int128 v18;
  _BYTE v19[48];
  uint64_t v20;
  unsigned int v21;

  v12 = *a2;
  if (*a2 && (v13 = v12[1], (_DWORD)v13))
  {
    WebCore::CSSParserFastPaths::maybeParseValue(a1, *((_QWORD *)v12 + 1), v13 | ((unint64_t)((v12[4] >> 2) & 1) << 32), a3, a4, (unint64_t)a5, a6, a7, a8, a9, a10, a11);
    if (!*a5)
    {
      *a5 = 0;
      WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v19, a2, 0, 0);
      *(_QWORD *)&v18 = v20;
      *((_QWORD *)&v18 + 1) = v20 + 24 * v21;
      WebCore::CSSPropertyParser::parseSingleValue(a1, &v18, a3, a5);
      WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v19, v17);
    }
  }
  else
  {
    *a5 = 0;
  }
}

_DWORD *WebCore::CSSParser::parseColorWithoutContext@<X0>(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  char v9;
  unsigned int *v12;
  char *v13;
  unint64_t v14;
  _DWORD *result;
  _UNKNOWN *__ptr32 *v16;
  int16x8_t v17;
  int16x8_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  int16x8_t v33;
  char v34;
  char **v35;
  char *v36;

  v9 = (char)a2;
  v12 = *this;
  if (*this)
  {
    v13 = (char *)*((_QWORD *)v12 + 1);
    v14 = v12[1] | ((unint64_t)((v12[4] >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  result = (_DWORD *)WebCore::CSSParserFastPaths::parseSimpleColor(v13, (const char *)v14, v9, a4, a5, a6, a7, a8, a9);
  if (BYTE4(result))
  {
    *a3 = bswap32(result) | 0x1104000000000000;
    return result;
  }
  {
    v31 = 0;
    WTF::URL::invalidate((WTF::URL *)&v31);
    v28 = v31;
    if (v31)
      *(_DWORD *)v31 += 2;
    WebCore::strictCSSParserContext(void)::strictContext = (uint64_t)v28;
    unk_1EE2F56F0 = v32;
    v17 = v33;
    unk_1EE2F5700 = v33;
    qword_1EE2F5710 = 0;
    *(uint64_t *)((char *)&qword_1EE2F5710 + 6) = 0;
    unk_1EE2F571E &= 0xC0000000;
    v29 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v29 != -1)
    {
      v36 = &v34;
      v35 = &v36;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v30 = v31;
    v31 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v27);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  WebCore::CSSParser::parseSingleValue(5, this, (uint64_t)&WebCore::strictCSSParserContext(void)::strictContext, v16, (int **)&v31, v17, v18, v19, v20, v21, v22);
  result = v31;
  if (!v31 || ((*((unsigned __int16 *)v31 + 2) | (*((unsigned __int8 *)v31 + 6) << 16)) & 0x3F87F) != 0x18)
  {
    *a3 = 0;
    goto LABEL_11;
  }
  v24 = *((_QWORD *)v31 + 1);
  *a3 = v24;
  if ((v24 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    result = v31;
LABEL_11:
    v31 = 0;
    if (!result)
      return result;
    goto LABEL_12;
  }
  v31 = 0;
LABEL_12:
  if (*result == 2)
    return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v23);
  *result -= 2;
  return result;
}

uint64_t *WebCore::strictCSSParserContext(WebCore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  char v9;
  char **v10;
  char *v11;

  {
    v6 = 0;
    WTF::URL::invalidate((WTF::URL *)&v6);
    v3 = v6;
    if (v6)
      *(_DWORD *)v6 += 2;
    WebCore::strictCSSParserContext(void)::strictContext = (uint64_t)v3;
    unk_1EE2F56F0 = v7;
    unk_1EE2F5700 = v8;
    qword_1EE2F5710 = 0;
    *(uint64_t *)((char *)&qword_1EE2F5710 + 6) = 0;
    unk_1EE2F571E &= 0xC0000000;
    v4 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v4 != -1)
    {
      v11 = &v9;
      v10 = &v11;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return &WebCore::strictCSSParserContext(void)::strictContext;
}

uint64_t WebCore::CSSParserFastPaths::parseNamedColor(unsigned __int16 *a1, const char *a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char **Color;
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a2 & 0xFF00000000) == 0)
  {
    if (a2 <= 0x3FuLL)
    {
      if ((_DWORD)a2)
      {
        v9 = v15;
        v2 = MEMORY[0x1E0CBF868];
        v10 = a2;
        while (1)
        {
          v12 = *a1++;
          v11 = v12;
          if (v12 - 1 > 0x7E)
            goto LABEL_9;
          *v9++ = *(_BYTE *)(v2 + v11);
          if (!--v10)
            goto LABEL_14;
        }
      }
      goto LABEL_14;
    }
LABEL_9:
    LOBYTE(v7) = 0;
    v8 = 0;
    return (v8 << 32) | ((v2 & 0xFFFFFF) << 8) | v7;
  }
  if (a2 > 0x3FuLL)
    goto LABEL_9;
  if ((_DWORD)a2)
  {
    v3 = v15;
    v2 = MEMORY[0x1E0CBF868];
    v4 = a2;
    do
    {
      v6 = *(char *)a1;
      a1 = (unsigned __int16 *)((char *)a1 + 1);
      v5 = v6;
      if (v6 < 1)
        goto LABEL_9;
      *v3++ = *(_BYTE *)(v2 + v5);
    }
    while (--v4);
  }
LABEL_14:
  v15[a2] = 0;
  Color = WebCore::findColor((WebCore *)v15, a2);
  if (Color)
  {
    v7 = (_DWORD)Color[1] & 0xFF00FF00 | (*((_DWORD *)Color + 2) << 16) | BYTE2(*((_DWORD *)Color + 2));
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  LODWORD(v2) = v7 >> 8;
  return (v8 << 32) | ((v2 & 0xFFFFFF) << 8) | v7;
}

_DWORD *WebCore::CSSParserImpl::parseCustomPropertyValue(WebCore::CSSParserImpl *this, WebCore::MutableStyleProperties *a2, const WTF::AtomString *a3, const WTF::String *a4, uint64_t a5, const WebCore::CSSParserContext *a6)
{
  int v6;
  __int128 *v9;
  char *v10;
  char v11;
  unsigned int v12;
  char *v13;
  __int128 *v14;
  unsigned int v15;
  int v16;
  char *v17;
  int v18;
  _DWORD *result;
  const WTF::StringImpl *v20;
  unsigned __int16 **v21;
  uint64_t v22;
  _BYTE v23[48];
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v6 = (int)a4;
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v23, a5);
  v9 = *(__int128 **)(v26 + 48);
  v10 = (char *)v9 + 24 * *(unsigned int *)(v26 + 60);
  v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v13 = (char *)v9 - 24;
  do
  {
    v14 = v9;
    if (v9 < (__int128 *)v10 || (v11 & 1) != 0)
    {
      if (v9 >= (__int128 *)v10)
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v15 = *(_DWORD *)v9;
    }
    else
    {
      v15 = v12 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      v11 = 1;
      v12 = v15;
    }
    v16 = v15 & 0x3F;
    v9 = (__int128 *)((char *)v14 + 24);
    v13 += 24;
  }
  while (v16 == 16);
  if (v14 < (__int128 *)v10)
  {
    v17 = v10;
    do
    {
      v18 = *((_DWORD *)v17 - 6);
      v17 -= 24;
      if ((v18 & 0x3F) != 0x10)
        break;
      v10 = v17;
    }
    while (v17 > (char *)v14);
  }
  result = WebCore::CSSParserImpl::consumeCustomPropertyValue((uint64_t)v23, v13, v10, a2, v6);
  if (v25)
  {
    v21 = (unsigned __int16 **)(v24 + 4128 * v25 - 4128);
    if (*(_DWORD *)(v24 + 4128 * v25 - 4116))
      v22 = WebCore::MutableStyleProperties::addParsedProperties(this, v21, v20) ^ 1;
    else
      v22 = 2;
    WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v23, v21);
    return (_DWORD *)v22;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WebCore::CSSParser::parseSelectorList(uint64_t a1@<X0>, unsigned int **a2@<X1>, WebCore::StyleSheetContents *a3@<X2>, WTF::AtomString *a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  int32x4_t v10;
  int16x8_t v11;
  WTF::StringImpl *v12;
  char v13;
  unsigned __int32 v14;
  char v15;
  BOOL v16;
  BOOL v17;
  char v18;
  _BYTE v19[48];
  uint64_t v20;
  unsigned int v21;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v19, a2, 0, 0);
  v9 = *(unsigned __int8 *)(a1 + 53);
  v10 = vdupq_n_s32(*(unsigned __int16 *)(a1 + 51) | (v9 << 16));
  v13 = *(_BYTE *)(a1 + 48);
  v11 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v10 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
  *(int8x8_t *)v11.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v11), (int8x8_t)0x1000100010001);
  v14 = vmovn_s16(v11).u32[0];
  v15 = v9 & 1;
  v16 = (v9 & 0x40) != 0;
  v17 = (*(_DWORD *)(a1 + 54) & 0x20000000) != 0;
  v18 = 0;
  WebCore::parseCSSSelectorList(v20, v20 + 24 * v21, &v13, a3, a4, a5);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v19, v12);
}

WTF::StringImpl *WebCore::CSSParserImpl::parseInlineStyleDeclaration@<X0>(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v6;
  WTF::StringImpl *result;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD v11[7];
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14[5];
  WTF::StringImpl *v15;
  BOOL v16;

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v14, *(const WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
  v6 = (*((_WORD *)a1 + 14) & 0x10) == 0 || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 3384) == 2;
  v16 = v6;
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v11, (uint64_t)v14);
  result = (WTF::StringImpl *)WebCore::CSSParserImpl::consumeBlockContent((uint64_t)v11, *(const WebCore::CSSParserTokenRange **)(v13 + 48), (const WebCore::CSSParserTokenRange *)(*(_QWORD *)(v13 + 48)+ 24 * *(unsigned int *)(v13 + 60)), 1u, 1, 0);
  if (v12)
  {
    WebCore::createStyleProperties(a2, v11[6] + 4128 * v12 - 4128);
    WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v11, v8);
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSParser::parseDeclaration(WebCore::CSSParser *this, WebCore::MutableStyleProperties *a2, const WTF::String *a3, const WebCore::CSSParserContext *a4)
{
  return WebCore::CSSParserImpl::parseDeclarationList(a2, a3, this, a4);
}

uint64_t WebCore::CSSParserImpl::parseDeclarationList(WebCore::CSSParserImpl *this, WebCore::MutableStyleProperties *a2, const WTF::String *a3, const WebCore::CSSParserContext *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::StyleProperties *v7;
  uint64_t v8;
  unsigned __int8 v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  _BYTE v29[4096];
  WTF::StringImpl *v30;
  _OWORD v31[4];
  uint64_t v32;
  _BYTE v33[48];
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;

  v4 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v7 = (WebCore::StyleProperties *)v4;
  v8 = WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v33, v5);
  if (*(_BYTE *)(v6 + 50))
    v9 = *(_BYTE *)(v6 + 49);
  else
    v9 = 1;
  WebCore::CSSParserImpl::consumeBlockContent(v8, *(const WebCore::CSSParserTokenRange **)(v36 + 48), (const WebCore::CSSParserTokenRange *)(*(_QWORD *)(v36 + 48) + 24 * *(unsigned int *)(v36 + 60)), v9, 1, 0);
  if (!v35)
  {
    __break(0xC471u);
    goto LABEL_44;
  }
  v11 = *(unsigned int *)(v34 + 4128 * v35 - 4116);
  if (!(_DWORD)v11)
  {
    v14 = 0;
    goto LABEL_26;
  }
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = (WTF::StringImpl *)v11;
  v26 = (WTF *)v29;
  v27 = 256;
  v28 = v11;
  if (v11 >= 0x101)
  {
    if (!(v11 >> 28))
    {
      v12 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
      v27 = v11;
      v26 = v12;
      v11 = v28;
      goto LABEL_8;
    }
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x195877F8CLL);
  }
  v12 = (WTF *)v29;
LABEL_8:
  bzero(v12, 16 * v11);
  v25 = 0;
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195877F94);
  }
  WebCore::filterProperties((_DWORD *)1, (unsigned int *)(v34 + 4128 * v35 - 4128), (uint64_t)&v26, (unint64_t *)&v30, (uint64_t)v31, (uint64_t *)&v25);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195877F9CLL);
  }
  WebCore::filterProperties(0, (unsigned int *)(v34 + 4128 * v35 - 4128), (uint64_t)&v26, (unint64_t *)&v30, (uint64_t)v31, (uint64_t *)&v25);
  if (v30)
    WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((char **)&v26, v30);
  v14 = WebCore::MutableStyleProperties::addParsedProperties(v7, (unsigned __int16 **)&v26, v13);
  v15 = (uint64_t)v25;
  if (v25)
  {
    v22 = *((unsigned int *)v25 - 1);
    if ((_DWORD)v22)
    {
      v23 = v25;
      do
      {
        v24 = *v23;
        if (*v23 != (WTF::StringImpl *)-1)
        {
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        ++v23;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v15 - 16), v10);
  }
  v16 = v26;
  if (v28)
  {
    v17 = 16 * v28;
    v18 = (_DWORD **)((char *)v26 + 8);
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v10);
        else
          *v19 -= 2;
      }
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
    v16 = v26;
  }
  if (v29 != (_BYTE *)v16 && v16 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v16, v10);
  }
LABEL_26:
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v33, v10);
  return v14;
}

unsigned int *WebCore::CSSParserImpl::parseDeclarationListForInspector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  _BYTE v11[80];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;

  v13 = 0;
  v14 = a3;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v11, a2);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, 1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, 1);
  WebCore::CSSParserImpl::consumeBlockContent((uint64_t)v11, *(const WebCore::CSSParserTokenRange **)(v12 + 48), (const WebCore::CSSParserTokenRange *)(*(_QWORD *)(v12 + 48) + 24 * *(unsigned int *)(v12 + 60)), 1u, 1, 0);
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v11, v4);
  v6 = v17;
  if (v17)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = v15;
  if (v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v7, v5);
  }
  result = (unsigned int *)v13;
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v13 = 0;
    do
    {
      v9 = __ldaxr(result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, result));
    if (!v10)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WebCore::CSSParserContext::CSSParserContext(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  char v9;
  char **v10;
  char *v11;

  v4 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 49) = 0;
  *(_BYTE *)(a1 + 53) = 0;
  v6 = *(_DWORD *)(a1 + 54) & 0xC0000000;
  *(_DWORD *)(a1 + 54) = v6;
  if (a2 == 4)
  {
    *(_DWORD *)(a1 + 54) = v6 | 0x20000420;
    *(_BYTE *)(a1 + 53) = -63;
    *(_WORD *)(a1 + 51) = 0;
  }
  v7 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v7 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  return a1;
}

WebCore::CSSParserContext *WebCore::CSSParserContext::CSSParserContext(WebCore::CSSParserContext *this, const WebCore::Document *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::CSSParserContext *v13;
  WebCore::CSSParserContext *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  WTF *v20[2];
  WTF *v21;
  WTF::StringImpl *v22;
  __int16 v23;

  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  *(_QWORD *)((char *)this + 46) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_DWORD *)((char *)this + 54) &= 0xC0000000;
  v5 = *((_QWORD *)a2 + 437);
  if (!v5)
  {
    v22 = 0;
    WTF::URL::invalidate((WTF::URL *)&v22);
    v13 = (WebCore::CSSParserContext *)WTF::fastMalloc((WTF *)0x40);
    v14 = WebCore::CSSParserContext::CSSParserContext(v13, a2, (const WTF::URL *)&v22, MEMORY[0x1E0CBF738]);
    v15 = (WTF::StringImpl **)*((_QWORD *)a2 + 437);
    *((_QWORD *)a2 + 437) = v14;
    if (v15)
    {
      v16 = v15[5];
      v21 = (WTF *)v15;
      v15[5] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v4);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v4);
        else
          *(_DWORD *)v17 -= 2;
      }
      WTF::fastFree(v21, v4);
    }
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v4);
      else
        *(_DWORD *)v18 -= 2;
    }
    v5 = *((_QWORD *)a2 + 437);
  }
  v6 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v6 += 2;
  v7 = *(_OWORD *)(v5 + 8);
  v8 = *(_OWORD *)(v5 + 24);
  v9 = *(_DWORD **)(v5 + 40);
  if (v9)
    *v9 += 2;
  v22 = *(WTF::StringImpl **)(v5 + 48);
  v23 = *(_WORD *)(v5 + 56);
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v6;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      v19 = v8;
      *(_OWORD *)v20 = v7;
      WTF::StringImpl::destroy(v10, v4);
      v8 = v19;
      v7 = *(_OWORD *)v20;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  *(_OWORD *)((char *)this + 8) = v7;
  *(_OWORD *)((char *)this + 24) = v8;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v9;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v4);
    else
      *(_DWORD *)v11 -= 2;
  }
  *((_QWORD *)this + 6) = v22;
  *((_WORD *)this + 28) = v23;
  return this;
}

unsigned int *WTF::add<WTF::URL,WTF::String,WebCore::CSSPropertySettings,unsigned int>(unsigned int *result, uint64_t *a2, uint64_t *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;

  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 + 4);
    v7 = v6 & 0xFFFFFFFE;
    if ((v6 & 0xFFFFFFFE) != 0)
    {
      v8 = 0;
      v9 = *result;
      do
      {
        v10 = *(unsigned int *)(v5 + 4);
        if (v8 >= v10)
        {
          v12 = 0;
        }
        else
        {
          v11 = *(_QWORD *)(v5 + 8);
          if ((*(_BYTE *)(v5 + 16) & 4) != 0)
            v12 = *(unsigned __int8 *)(v11 + v8);
          else
            v12 = *(unsigned __int16 *)(v11 + 2 * v8);
        }
        v13 = v8 + 1;
        if (v8 + 1 >= v10)
        {
          v15 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(v5 + 8);
          if ((*(_BYTE *)(v5 + 16) & 4) != 0)
            v15 = *(unsigned __int8 *)(v14 + v8 + 1);
          else
            v15 = *(unsigned __int16 *)(v14 + 2 * v8 + 2);
        }
        v16 = (v12 << 11) ^ ((v9 + v15) << 16) ^ (v9 + v15);
        v9 = v16 + (v16 >> 11);
        *result = v9;
        v8 = v13 + 1;
      }
      while (v13 + 1 < v7);
    }
    if ((v6 & 1) != 0)
    {
      if (*(_DWORD *)(v5 + 4) <= v7)
      {
        v18 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
          v18 = *(unsigned __int8 *)(v17 + v7);
        else
          v18 = *(unsigned __int16 *)(v17 + 2 * v7);
      }
      *result = ((*result + v18) ^ ((*result + v18) << 16)) + (((*result + v18) ^ ((*result + v18) << 16)) >> 11);
    }
  }
  v19 = *a3;
  if (*a3)
  {
    v20 = *(_DWORD *)(v19 + 4);
    v21 = v20 & 0xFFFFFFFE;
    if ((v20 & 0xFFFFFFFE) != 0)
    {
      v22 = 0;
      v23 = *result;
      do
      {
        v24 = *(unsigned int *)(v19 + 4);
        if (v22 >= v24)
        {
          v26 = 0;
        }
        else
        {
          v25 = *(_QWORD *)(v19 + 8);
          if ((*(_BYTE *)(v19 + 16) & 4) != 0)
            v26 = *(unsigned __int8 *)(v25 + v22);
          else
            v26 = *(unsigned __int16 *)(v25 + 2 * v22);
        }
        v27 = v22 + 1;
        if (v22 + 1 >= v24)
        {
          v29 = 0;
        }
        else
        {
          v28 = *(_QWORD *)(v19 + 8);
          if ((*(_BYTE *)(v19 + 16) & 4) != 0)
            v29 = *(unsigned __int8 *)(v28 + v22 + 1);
          else
            v29 = *(unsigned __int16 *)(v28 + 2 * v22 + 2);
        }
        v30 = (v26 << 11) ^ ((v23 + v29) << 16) ^ (v23 + v29);
        v23 = v30 + (v30 >> 11);
        *result = v23;
        v22 = v27 + 1;
      }
      while (v27 + 1 < v21);
    }
    if ((v20 & 1) != 0)
    {
      if (*(_DWORD *)(v19 + 4) <= v21)
      {
        v32 = 0;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
          v32 = *(unsigned __int8 *)(v31 + v21);
        else
          v32 = *(unsigned __int16 *)(v31 + 2 * v21);
      }
      *result = ((*result + v32) ^ ((*result + v32) << 16)) + (((*result + v32) ^ ((*result + v32) << 16)) >> 11);
    }
  }
  v33 = *result + (unsigned __int16)*a4;
  v34 = (*a4 >> 5) & 0x1FFF800 ^ (v33 << 16) ^ v33;
  v35 = (v34 + (v34 >> 11)) ^ ((v34 + (v34 >> 11)) << 16);
  v36 = v35 + (v35 >> 11);
  *result = v36;
  v37 = v36 + (unsigned __int16)*a5;
  v38 = (*a5 >> 5) & 0x7FFF800 ^ (v37 << 16);
  *result = (v38 ^ v37) + ((v38 ^ v37) >> 11);
  return result;
}

uint64_t WebCore::mayDependOnBaseURL(uint64_t a1)
{
  if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4) && (WTF::StringView::startsWith() & 1) == 0)
    return WTF::protocolIs() ^ 1;
  else
    return 0;
}

uint64_t WebCore::CSSParserFastPaths::isSimpleLengthPropertyID(int a1, char *a2)
{
  uint64_t result;
  char v4;
  char v5;

  result = 0;
  v4 = 1;
  if (a1 <= 297)
  {
    if ((a1 - 207) <= 0x12 && ((1 << (a1 + 49)) & 0x40061) != 0)
      goto LABEL_13;
    if ((a1 - 107) >= 2)
    {
      if (a1 != 13)
        return result;
      goto LABEL_13;
    }
    goto LABEL_4;
  }
  v5 = a1 + 125;
  if ((a1 - 387) <= 0x3F)
  {
    if (((1 << v5) & 0x40001000001FFF01) != 0)
    {
LABEL_4:
      v4 = 0;
LABEL_13:
      *a2 = v4;
      return 1;
    }
    if (((1 << v5) & 0x80000FF0F00000C0) != 0)
      goto LABEL_13;
  }
  if ((a1 - 298) < 2)
    goto LABEL_4;
  if (a1 == 354)
    goto LABEL_13;
  return result;
}

unint64_t WebCore::parseSimpleColorInternal<char16_t>(unsigned __int16 *a1, const char *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char v22;
  char v23[63];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v11 = WebCore::parseNumericColor<char16_t>(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if (!BYTE4(v11))
  {
    if ((unint64_t)a2 <= 0x3F)
    {
      if (!a2)
      {
LABEL_16:
        v13 = 0;
        v12 = 0;
LABEL_17:
        v14 = v12 & 0xFFFFFF00;
        v12 = v12;
        goto LABEL_18;
      }
      v15 = 0;
      v16 = MEMORY[0x1E0CBF868];
      while (1)
      {
        v17 = a1[(_QWORD)v15];
        if ((v17 - 1) > 0x7E)
          break;
        v23[(_QWORD)v15++ - 1] = *(_BYTE *)(v16 + v17);
        if (a2 == v15)
        {
          v23[a2 - 1] = 0;
          if (((_DWORD)a2 - 3) <= 0x11)
          {
            v18 = WebCore::ColorDataHash::colordata_hash_function((WebCore::ColorDataHash *)&v22, a2);
            if (v18 <= 0x41F && ((__int16)WebCore::lookup[v18] & 0x80000000) == 0)
            {
              v19 = WebCore::lookup[v18];
              v20 = (&WebCore::wordlist)[2 * v19];
              if (v22 == *v20 && !strncmp(v23, v20 + 1, ((_DWORD)a2 - 1)) && !v20[a2])
              {
                v12 = (uint64_t)(&WebCore::wordlist)[2 * v19 + 1] & 0xFF00FF00 | (LODWORD((&WebCore::wordlist)[2 * v19 + 1]) << 16) | BYTE2(LODWORD((&WebCore::wordlist)[2 * v19 + 1]));
                v13 = 1;
                goto LABEL_17;
              }
            }
          }
          goto LABEL_16;
        }
      }
    }
    v12 = 0;
    v13 = 0;
    v14 = 0;
LABEL_18:
    LODWORD(v11) = v14 | v12;
    return v11 | (unint64_t)(v13 << 32);
  }
  v13 = 1;
  return v11 | (unint64_t)(v13 << 32);
}

uint64_t WebCore::parseHexColorInternal<unsigned char>(unsigned __int8 *a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned int v16;
  int v17;
  char v18;
  int v19;

  if (a2 != 6)
  {
    v14 = 0;
    if (a2 > 8)
    {
      v13 = 0;
      return (v13 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v14;
    }
    v13 = 0;
    if (((1 << a2) & 0x118) == 0)
      return (v13 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v14;
  }
  v3 = 0;
  v4 = a2;
  while (1)
  {
    v5 = *a1;
    v2 = ((v5 | 0x20) - 97);
    if (v5 - 48 >= 0xA && v2 > 5)
      break;
    v7 = 16 * v3;
    v8 = (v5 + 9) & 0xF;
    if (v5 < 0x41)
      v8 = v5 - 48;
    v9 = v8;
    v3 = v7 | v8;
    ++a1;
    if (!--v4)
    {
      switch((_DWORD)a2)
      {
        case 6:
          LOBYTE(v10) = BYTE2(v7);
          v11 = v7 & 0xFF00 | (v3 << 16);
          goto LABEL_12;
        case 3:
          v10 = (((v7 & 0xF00) << 8) & 0xFF0FFFFF | ((((unsigned __int16)(v7 & 0xF00) >> 8) & 0xF) << 20)) >> 16;
          v11 = (v3 << 8) & 0xF000 | (v3 >> 4 << 8) | ((v9 & 0xF | (16 * v3)) << 16);
LABEL_12:
          v12 = v11 | 0xFF000000;
LABEL_13:
          v13 = 1;
          break;
        case 8:
          v16 = bswap32(v3);
          v12 = v16 & 0xFFFFFF00;
          LOBYTE(v10) = v16;
          goto LABEL_13;
        case 4:
          v10 = ((v9 & 0xF) << 24) | (v9 << 28) | (((unsigned __int16)(v7 & 0xF000) >> 8) >> 4 << 20) | (((unsigned __int16)(v7 & 0xF000) >> 8) >> 4 << 16);
          v17 = v7 & 0xF00;
          v18 = v3 & 0xF0;
          v19 = v10 | (16 * v17) | (v3 >> 4);
          LOBYTE(v10) = BYTE2(v10);
          v12 = v19 & 0xFF00FF00 | v17 | ((v19 | v18) << 16);
          goto LABEL_13;
        default:
          v13 = 0;
          LOBYTE(v10) = 0;
          v12 = 0;
          break;
      }
      v14 = v12 | v10;
      v2 = v12 >> 8;
      return (v13 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v14;
    }
  }
  v14 = 0;
  v13 = 0;
  return (v13 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v14;
}

uint64_t WebCore::parseHexColorInternal<char16_t>(unsigned __int16 *a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned int v17;
  char v18;
  int v19;

  if (a2 != 6)
  {
    v15 = 0;
    if (a2 > 8)
    {
      v14 = 0;
      return (v14 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v15;
    }
    v14 = 0;
    if (((1 << a2) & 0x118) == 0)
      return (v14 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v15;
  }
  v3 = 0;
  v4 = 2 * a2;
  while (1)
  {
    v5 = v3;
    v6 = *a1;
    v2 = v6 - 48;
    if (v6 - 48 >= 0xA && (unsigned __int16)((v6 | 0x20) - 97) > 5u)
      break;
    if (v6 >= 0x41)
      v8 = (v6 + 9) & 0xF;
    else
      v8 = v6 - 48;
    v9 = v8;
    v3 = v8 | (16 * v5);
    ++a1;
    v4 -= 2;
    if (!v4)
    {
      v10 = 16 * v5;
      switch((_DWORD)a2)
      {
        case 6:
          LOBYTE(v11) = BYTE2(v10);
          v12 = v10 & 0xFF00 | (v3 << 16);
          goto LABEL_13;
        case 3:
          v11 = (((v10 & 0xF00) << 8) & 0xFF0FFFFF | ((((unsigned __int16)(v10 & 0xF00) >> 8) & 0xF) << 20)) >> 16;
          v12 = (v3 << 8) & 0xF000 | (v3 >> 4 << 8) | ((v9 & 0xF | (16 * v3)) << 16);
LABEL_13:
          v13 = v12 | 0xFF000000;
LABEL_14:
          v14 = 1;
          break;
        case 8:
          v17 = bswap32(v3);
          v13 = v17 & 0xFFFFFF00;
          LOBYTE(v11) = v17;
          goto LABEL_14;
        case 4:
          v18 = v3 & 0xF0;
          v19 = ((v9 & 0xF) << 24) | (v9 << 28) | (((unsigned __int16)(v10 & 0xF000) >> 8) >> 4 << 20) | (((unsigned __int16)(v10 & 0xF000) >> 8) >> 4 << 16) | (16 * (v10 & 0xF00)) | (v3 >> 4);
          LOBYTE(v11) = (((v9 & 0xF) << 24) | (v9 << 28) | (((unsigned __int16)(v10 & 0xF000) >> 8) >> 4 << 20) | (((unsigned __int16)(v10 & 0xF000) >> 8) >> 4 << 16)) >> 16;
          v13 = v19 & 0xFF00FF00 | v10 & 0xF00 | ((v19 | v18) << 16);
          goto LABEL_14;
        default:
          v14 = 0;
          LOBYTE(v11) = 0;
          v13 = 0;
          break;
      }
      v15 = v13 | v11;
      v2 = v13 >> 8;
      return (v14 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v15;
    }
  }
  v15 = 0;
  v14 = 0;
  return (v14 << 32) | ((*(_QWORD *)&v2 & 0xFFFFFFLL) << 8) | v15;
}

uint64_t WebCore::parseColor(int **a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v10;
  int v12;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t result;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unsigned __int16 v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  unsigned __int16 v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  unsigned __int8 v81;
  unsigned __int16 v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned int v91;
  unsigned __int8 v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  int *v98;
  unsigned __int8 *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  float v111;
  uint64_t v112;
  unint64_t v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  unsigned __int8 v136;
  int **v137;
  uint64_t v138;
  unsigned __int8 v139;
  double v140;
  __int128 v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  uint64_t v180;

  v12 = a3;
  v180 = *MEMORY[0x1E0C80C00];
  v15 = a3 & 0xFF00000000;
  v16 = a3;
  if ((a3 - 55) > 0xFFFFFFC9)
  {
    v17 = 0;
    if (v15)
    {
      v18 = MEMORY[0x1E0CBF868];
      v10 = (unint64_t)&v141;
      do
      {
        if (a3 == v17)
          goto LABEL_152;
        if ((char)a2[v17] < 1)
          goto LABEL_156;
        if (v17 == 55)
          goto LABEL_152;
        *((_BYTE *)&v141 + v17) = *(_BYTE *)(v18 + a2[v17]);
        ++v17;
      }
      while (a3 != v17);
      v10 = a3;
      v138 = v141;
      if (v141 != 45)
        goto LABEL_9;
      v10 = a3;
      v113 = a3 - 7;
      if (a3 < 7uLL
        || (*(_DWORD *)((char *)&v141 + 1) == *(_DWORD *)"apple-"
          ? (v114 = *(unsigned __int16 *)((char *)&v141 + 5) == *(unsigned __int16 *)"e-")
          : (v114 = 0),
            v10 = a3,
            !v114))
      {
LABEL_10:
        if ((v10 - 1) > 0x35)
          goto LABEL_156;
        v133 = v10;
        v134 = v15;
        v135 = v12;
        v136 = a4;
        v137 = a1;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v122 = 0;
        v123 = 0;
        v124 = 0;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        switch((int)v10)
        {
          case 1:
            goto LABEL_16;
          case 2:
            goto LABEL_15;
          case 3:
            goto LABEL_14;
          case 4:
            goto LABEL_13;
          case 5:
            goto LABEL_12;
          case 6:
            goto LABEL_140;
          case 7:
            goto LABEL_139;
          case 8:
            goto LABEL_138;
          case 9:
            goto LABEL_137;
          case 10:
            goto LABEL_136;
          case 11:
            goto LABEL_135;
          case 12:
            goto LABEL_134;
          case 13:
            goto LABEL_133;
          case 14:
            goto LABEL_132;
          case 15:
            goto LABEL_131;
          case 16:
            goto LABEL_130;
          case 17:
            goto LABEL_129;
          case 18:
            goto LABEL_128;
          case 19:
            goto LABEL_127;
          case 20:
            goto LABEL_126;
          case 21:
            goto LABEL_125;
          case 22:
            goto LABEL_124;
          case 23:
            goto LABEL_123;
          case 24:
            goto LABEL_122;
          case 25:
            goto LABEL_121;
          case 26:
            goto LABEL_120;
          case 27:
            goto LABEL_119;
          case 28:
            goto LABEL_118;
          case 29:
            goto LABEL_117;
          case 30:
            goto LABEL_116;
          case 31:
            goto LABEL_115;
          case 32:
            goto LABEL_114;
          case 33:
            goto LABEL_113;
          case 34:
            goto LABEL_112;
          case 35:
            goto LABEL_111;
          case 36:
            goto LABEL_110;
          case 37:
            goto LABEL_109;
          case 38:
            goto LABEL_108;
          case 39:
            goto LABEL_107;
          case 40:
            goto LABEL_106;
          case 41:
            goto LABEL_105;
          case 42:
            goto LABEL_104;
          case 43:
            goto LABEL_103;
          case 44:
            goto LABEL_102;
          case 45:
            goto LABEL_101;
          case 46:
            goto LABEL_100;
          case 47:
            goto LABEL_99;
          case 48:
            goto LABEL_98;
          case 49:
            goto LABEL_97;
          case 50:
            goto LABEL_96;
          case 51:
            goto LABEL_95;
          case 52:
            goto LABEL_94;
          case 53:
            goto LABEL_93;
          default:
            v117 = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v179];
LABEL_93:
            LODWORD(v118) = v117 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v178];
LABEL_94:
            HIDWORD(v118) = v118 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v177];
LABEL_95:
            LODWORD(v119) = HIDWORD(v118)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v176];
LABEL_96:
            HIDWORD(v119) = v119 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v175];
LABEL_97:
            LODWORD(v120) = HIDWORD(v119)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v174];
LABEL_98:
            HIDWORD(v120) = v120 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v173];
LABEL_99:
            LODWORD(v121) = HIDWORD(v120)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v172];
LABEL_100:
            HIDWORD(v121) = v121 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v171];
LABEL_101:
            LODWORD(v122) = HIDWORD(v121)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v170];
LABEL_102:
            HIDWORD(v122) = v122 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v169];
LABEL_103:
            LODWORD(v123) = HIDWORD(v122)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v168];
LABEL_104:
            HIDWORD(v123) = v123 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v167];
LABEL_105:
            LODWORD(v124) = HIDWORD(v123)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v166];
LABEL_106:
            HIDWORD(v124) = v124 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v165];
LABEL_107:
            LODWORD(v125) = HIDWORD(v124)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v164];
LABEL_108:
            HIDWORD(v125) = v125 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v163];
LABEL_109:
            LODWORD(v126) = HIDWORD(v125)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v162];
LABEL_110:
            HIDWORD(v126) = v126 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v161];
LABEL_111:
            LODWORD(v127) = HIDWORD(v126)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v160];
LABEL_112:
            HIDWORD(v127) = v127 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v159];
LABEL_113:
            LODWORD(v128) = HIDWORD(v127)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v158];
LABEL_114:
            HIDWORD(v128) = v128 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v157];
LABEL_115:
            LODWORD(v129) = HIDWORD(v128)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v156];
LABEL_116:
            HIDWORD(v129) = v129 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v155];
LABEL_117:
            LODWORD(v130) = HIDWORD(v129)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v154];
LABEL_118:
            HIDWORD(v130) = v130 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v153];
LABEL_119:
            LODWORD(v131) = HIDWORD(v130)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v152];
LABEL_120:
            HIDWORD(v131) = v131 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v151];
LABEL_121:
            LODWORD(v132) = HIDWORD(v131)
                          + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v150];
LABEL_122:
            HIDWORD(v132) = v132 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v149];
LABEL_123:
            v19 = HIDWORD(v132) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v148];
LABEL_124:
            v20 = v19 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v147];
LABEL_125:
            v21 = v20 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v146];
LABEL_126:
            v22 = v21 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v145];
LABEL_127:
            v23 = v22 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v144];
LABEL_128:
            v24 = v23 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v143];
LABEL_129:
            v25 = v24 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v142];
LABEL_130:
            v26 = v25 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[HIBYTE(v141)];
LABEL_131:
            v27 = v26 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE14(v141)];
LABEL_132:
            v28 = v27 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE13(v141)];
LABEL_133:
            v29 = v28 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE12(v141) + 1];
LABEL_134:
            v30 = v29 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE11(v141)];
LABEL_135:
            v31 = v30 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE10(v141) + 1];
LABEL_136:
            v32 = v31 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE9(v141)];
LABEL_137:
            v33 = v32 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE8(v141)];
LABEL_138:
            v34 = v33 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE7(v141)];
LABEL_139:
            v35 = v34 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE6(v141)];
LABEL_140:
            v36 = v35 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE5(v141)];
LABEL_12:
            v37 = v36 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE4(v141)];
LABEL_13:
            v38 = v37 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE3(v141) + 5];
LABEL_14:
            v39 = v38 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE2(v141)];
LABEL_15:
            v40 = v39 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE1(v141)];
LABEL_16:
            v41 = v40 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v138 + 1];
            if (v41 > 0x66C4)
            {
              result = 0;
              a1 = v137;
              a4 = v136;
              v15 = v134;
              v12 = v135;
            }
            else
            {
              v42 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v41];
              a1 = v137;
              v15 = v134;
              if (v42 < 0
                || (v43 = (unsigned __int16)v42,
                    v44 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v42],
                    (_DWORD)v138 != *v44)
                || strncmp((const char *)&v141 + 1, v44 + 1, (v10 - 1))
                || v44[v133])
              {
                result = 0;
              }
              else
              {
                result = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v43 + 1]);
              }
              a4 = v136;
              v12 = v135;
            }
            break;
        }
        goto LABEL_23;
      }
      if (v113 < 6)
      {
        if (v113 < 3)
          goto LABEL_247;
      }
      else
      {
        v115 = *(_DWORD *)((char *)&v141 + 7) == *(_DWORD *)"system"
            && *(unsigned __int16 *)((char *)&v141 + 11) == *(unsigned __int16 *)"em";
        v10 = a3;
        if (v115)
          goto LABEL_10;
      }
      v116 = *(unsigned __int16 *)((char *)&v141 + 7) == *(unsigned __int16 *)"pay"
          && BYTE9(v141) == str_29_15[2];
      v10 = a3;
      if (v116)
        goto LABEL_10;
      if (v113 >= 8)
      {
        v10 = a3;
        if (*(_QWORD *)((char *)&v141 + 7) == *(_QWORD *)"wireless")
          goto LABEL_10;
      }
LABEL_247:
      memmove((char *)&v141 + 7, (char *)&v141 + 6, a3 - 6);
      *(_DWORD *)((char *)&v141 + 1) = *(_DWORD *)"webkit";
      *(_WORD *)((char *)&v141 + 5) = *(_WORD *)"it";
      v10 = v16 + 1;
LABEL_9:
      if (v10 >= 0x38)
        goto LABEL_152;
      goto LABEL_10;
    }
    while (1)
    {
      if (a3 == v17)
        goto LABEL_152;
      LODWORD(v10) = *(unsigned __int16 *)&a2[2 * v17];
      if ((v10 - 1) > 0x7E)
        break;
      if (v17 == 55)
        goto LABEL_152;
      LODWORD(v10) = v10 | (32 * ((v10 - 65) < 0x1A));
      *((_BYTE *)&v141 + v17++) = v10;
      if (a3 == v17)
      {
        v96 = a3;
        if (v141 != 45)
        {
LABEL_150:
          if (v96 >= 0x38)
          {
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }
          goto LABEL_151;
        }
        LODWORD(v96) = a3;
        v107 = a3 - 7;
        if (a3 < 7uLL
          || (*(_DWORD *)((char *)&v141 + 1) == *(_DWORD *)"apple-"
            ? (v108 = *(unsigned __int16 *)((char *)&v141 + 5) == *(unsigned __int16 *)"e-")
            : (v108 = 0),
              LODWORD(v96) = a3,
              !v108))
        {
LABEL_151:
          result = WebCore::findCSSValueKeyword((const char *)&v141, v96);
          goto LABEL_23;
        }
        if (v107 >= 6)
        {
          v109 = *(_DWORD *)((char *)&v141 + 7) == *(_DWORD *)"system"
              && *(unsigned __int16 *)((char *)&v141 + 11) == *(unsigned __int16 *)"em";
          LODWORD(v96) = a3;
          if (v109)
            goto LABEL_151;
          goto LABEL_200;
        }
        if (v107 >= 3)
        {
LABEL_200:
          v110 = *(unsigned __int16 *)((char *)&v141 + 7) == *(unsigned __int16 *)"pay"
              && BYTE9(v141) == str_29_15[2];
          LODWORD(v96) = a3;
          if (v110)
            goto LABEL_151;
          if (v107 >= 8)
          {
            LODWORD(v96) = a3;
            if (*(_QWORD *)((char *)&v141 + 7) == *(_QWORD *)"wireless")
              goto LABEL_151;
          }
        }
        memmove((char *)&v141 + 7, (char *)&v141 + 6, a3 - 6);
        *(_DWORD *)((char *)&v141 + 1) = *(_DWORD *)"webkit";
        *(_WORD *)((char *)&v141 + 5) = *(_WORD *)"it";
        v96 = v16 + 1;
        goto LABEL_150;
      }
    }
LABEL_156:
    result = 0;
LABEL_23:
    if ((result - 127) < 0x12)
      goto LABEL_159;
    v46 = result >= 0x3FA && result < 0x47C;
    if ((result - 125) < 2 || v46)
      goto LABEL_159;
    if ((_DWORD)result == 124)
    {
LABEL_168:
      v98 = &WebCore::staticCSSValuePool[4 * result + 3088];
      *v98 += 2;
      *a1 = v98;
      return result;
    }
    if (result < 0xA7)
    {
      if (result <= 0x90)
      {
        if ((_DWORD)result != 18)
          goto LABEL_32;
        goto LABEL_168;
      }
LABEL_159:
      if ((int)result > 228)
      {
        if ((_DWORD)result == 229)
        {
          v97 = a4;
          if (a4 == 1)
            goto LABEL_168;
LABEL_167:
          if (v97 == 4)
            goto LABEL_168;
          goto LABEL_68;
        }
        if ((_DWORD)result != 230)
          goto LABEL_162;
      }
      else if ((_DWORD)result != 193 && (_DWORD)result != 223)
      {
LABEL_162:
        if (result >= 0x48E)
        {
          __break(0xC471u);
          JUMPOUT(0x1958795C8);
        }
        goto LABEL_168;
      }
      v97 = a4;
      goto LABEL_167;
    }
    if (result < 0xE7 || (_DWORD)result == 403)
      goto LABEL_159;
  }
LABEL_32:
  if (v15)
  {
    if (v16 >= 4 && *a2 == 35)
    {
      v47 = WebCore::parseHexColorInternal<unsigned char>(a2 + 1, v16 - 1);
      if (BYTE4(v47))
      {
        LOBYTE(v49) = v47;
        LODWORD(v47) = v47 & 0xFFFFFF00;
        LODWORD(v10) = 1;
        goto LABEL_66;
      }
    }
    if (a4 == 1 && (v12 == 6 || v12 == 3))
    {
      v47 = WebCore::parseHexColorInternal<unsigned char>(a2, v16);
      if (BYTE4(v47))
      {
        LOBYTE(v49) = v47;
        LODWORD(v47) = v47 & 0xFFFFFF00;
        LODWORD(v10) = 1;
        goto LABEL_66;
      }
    }
    if (v16 < 5)
    {
      if (v16 != 4)
        goto LABEL_64;
    }
    else if (a2[4] == 40
           && (*a2 & 0xDF) == 0x52
           && (a2[1] & 0xDF) == 0x47
           && (a2[2] & 0xDF) == 0x42
           && (a2[3] & 0xDF) == 0x41)
    {
      v139 = 0;
      *(_QWORD *)&v141 = a2 + 5;
      *((_QWORD *)&v141 + 1) = v16 - 5;
      v51 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x2Cu, &v139, a5, a6, a7, a8, a9, a10);
      LODWORD(v10) = 0;
      LOBYTE(v49) = 0;
      LODWORD(v47) = 0;
      if (v51 < 0x100u)
        goto LABEL_66;
      v74 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x2Cu, &v139, v68, v69, v70, v71, v72, v73);
      if (v74 >= 0x100u)
      {
        v81 = v74;
        v82 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x2Cu, &v139, v75, v76, v77, v78, v79, v80);
        if (v82 >= 0x100u)
        {
          v49 = *((_QWORD *)&v141 + 1);
          if (!*((_QWORD *)&v141 + 1))
          {
            LODWORD(v10) = 0;
            goto LABEL_65;
          }
          v89 = v82;
          v90 = 0;
          while (1)
          {
            v91 = *(unsigned __int8 *)(v141 + v90);
            if (v91 > 0x20 || ((1 << v91) & 0x100003600) == 0)
              break;
            if (*((_QWORD *)&v141 + 1) == ++v90)
              goto LABEL_64;
          }
          v99 = (unsigned __int8 *)(v141 + v90);
          v100 = *((_QWORD *)&v141 + 1) - v90;
          *(_QWORD *)&v141 = v141 + v90;
          *((_QWORD *)&v141 + 1) -= v90;
          if (v91 == 45)
          {
            v100 = ~v90 + v49;
            *(_QWORD *)&v141 = ++v99;
            *((_QWORD *)&v141 + 1) = v100;
          }
          if (v100 >= 2 && v99[v100 - 1] == 41)
          {
            v101 = v99[v100 - 2];
            if ((v101 - 48) <= 9)
            {
              v102 = *v99;
              if ((v102 - 48) >= 2)
              {
                if (v102 != 46)
                {
                  v47 = WebCore::checkForValidDouble<unsigned char>((uint64_t)v99, v100);
                  if (!v47)
                    goto LABEL_222;
                  if (v91 == 45)
                    LOBYTE(v105) = 0;
                  else
                    LOBYTE(v105) = -1;
LABEL_187:
                  v106 = v105 | 0x100;
LABEL_188:
                  LODWORD(v47) = (v89 << 16) | (v106 << 24) | (v81 << 8);
                  goto LABEL_144;
                }
                if (v100 != 3 || v99[1] - 48 > 9)
                {
LABEL_213:
                  v140 = 0.0;
                  v47 = WebCore::parseDouble<unsigned char>((uint64_t)v99, v100, 0x29u, &v140, v83, v84, v85, v86, v87, v88);
                  if (v47)
                  {
                    if (v91 == 45)
                    {
                      v106 = 0;
                    }
                    else
                    {
                      v111 = v140;
                      v112 = llroundf(v111 * 255.0);
                      if (v112 >= 255)
                        v112 = 255;
                      v106 = v112 & ~(v112 >> 63);
                    }
                    goto LABEL_188;
                  }
LABEL_222:
                  LODWORD(v10) = 0;
                  LOBYTE(v49) = 0;
                  goto LABEL_66;
                }
              }
              else
              {
                if (v100 == 2)
                {
                  v104 = v91 != 45 && v102 == 49;
                  v105 = v104 << 31 >> 31;
                  goto LABEL_187;
                }
                if (v100 != 4 || v102 != 48 || v99[1] != 46 || v99[2] - 48 >= 0xA)
                  goto LABEL_213;
              }
              if (v91 == 45)
                LOBYTE(v105) = 0;
              else
                LOBYTE(v105) = WebCore::parseRGBAlphaValue<char16_t>(std::span<char16_t const,18446744073709551615ul> &,char)::tenthAlphaValues[v101 - 48];
              goto LABEL_187;
            }
          }
        }
      }
LABEL_64:
      LODWORD(v10) = 0;
      LOBYTE(v49) = 0;
LABEL_65:
      LODWORD(v47) = 0;
      goto LABEL_66;
    }
    v48 = a2[3];
    if ((_DWORD)v48 == 40 && (*a2 & 0xDF) == 0x52 && (a2[1] & 0xDF) == 0x47 && (a2[2] & 0xDF) == 0x42)
    {
      LOBYTE(v140) = 0;
      *(_QWORD *)&v141 = a2 + 4;
      *((_QWORD *)&v141 + 1) = v16 - 4;
      v51 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x2Cu, (unsigned __int8 *)&v140, a5, a6, a7, a8, a9, a10);
      LODWORD(v10) = 0;
      LOBYTE(v49) = 0;
      LODWORD(v47) = 0;
      if (v51 < 0x100u)
        goto LABEL_66;
      v58 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x2Cu, (unsigned __int8 *)&v140, v52, v53, v54, v55, v56, v57);
      if (v58 < 0x100u)
        goto LABEL_64;
      v93 = v58;
      v94 = WebCore::parseColorIntOrPercentage<unsigned char>((unsigned __int8 **)&v141, 0x29u, (unsigned __int8 *)&v140, v59, v60, v61, v62, v63, v64);
      LODWORD(v10) = 0;
      if ((unsigned __int16)v94 < 0x100u)
      {
LABEL_153:
        LOBYTE(v49) = v10;
        LODWORD(v47) = v10;
        goto LABEL_66;
      }
      v95 = v94;
      LOBYTE(v49) = 0;
      LODWORD(v47) = 0;
      if (!*((_QWORD *)&v141 + 1))
      {
        LODWORD(v47) = (v93 << 8) | (v95 << 16) | 0xFF000000;
LABEL_144:
        LOBYTE(v49) = v51;
        LODWORD(v10) = 1;
      }
    }
    else if (v16 >= 5
           && a2[4] == 40
           && (*a2 & 0xDF) == 0x48
           && (a2[1] & 0xDF) == 0x53
           && (v48 & 0xFFFFFFDF) == 0x41
           && (a2[2] & 0xDF) == 0x4C)
    {
      v49 = WebCore::parseLegacyHSL<unsigned char>(a2 + 5, v16 - 5, v48);
      LODWORD(v47) = v49 & 0xFFFFFF00;
      LODWORD(v10) = BYTE4(v49);
    }
    else
    {
      if ((_DWORD)v48 != 40)
        goto LABEL_64;
      if ((*a2 & 0xDF) != 0x48)
        goto LABEL_64;
      if ((a2[1] & 0xDF) != 0x53)
        goto LABEL_64;
      v50 = a2[2] & 0xDF;
      if ((_DWORD)v50 != 76)
        goto LABEL_64;
      v49 = WebCore::parseLegacyHSL<unsigned char>(a2 + 4, v16 - 4, v50);
      LODWORD(v47) = v49 & 0xFFFFFF00;
      LODWORD(v10) = BYTE4(v49);
    }
LABEL_66:
    result = v47 & 0xFFFFFF00 | v49;
    goto LABEL_67;
  }
  result = WebCore::parseNumericColor<char16_t>((unsigned __int16 *)a2, v16, a4 != 1, a5, a6, a7, a8, a9, a10);
  LODWORD(v10) = BYTE4(result);
LABEL_67:
  if (!(_DWORD)v10)
  {
LABEL_68:
    *a1 = 0;
    return result;
  }
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  *(_QWORD *)&v140 = bswap32(result) | 0x1104000000000000;
  result = WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v140, (int **)&v141);
  *a1 = (int *)v141;
  *(_QWORD *)&v141 = 0;
  if ((*(_QWORD *)&v140 & 0x8000000000000) != 0)
  {
    result = *(_QWORD *)&v140 & 0xFFFFFFFFFFFFLL;
    do
    {
      v66 = __ldaxr((unsigned int *)result);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)result));
    if (!v67)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v65);
    }
  }
  return result;
}

void WebCore::CSSParserImpl::~CSSParserImpl(WebCore::CSSParserImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF *v12;
  WebCore::StyleSheetContents *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  WTF *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;

  v3 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    v7 = *(WTF::StringImpl **)(v6 + 864);
    *(_QWORD *)(v6 + 864) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(unsigned int *)(v6 + 844);
    if ((_DWORD)v8)
    {
      v28 = *(WTF::StringImpl ***)(v6 + 832);
      v29 = 8 * v8;
      do
      {
        v30 = *v28;
        *v28 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    v9 = *(WTF **)(v6 + 832);
    if (v9)
    {
      *(_QWORD *)(v6 + 832) = 0;
      *(_DWORD *)(v6 + 840) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = *(WTF **)(v6 + 48);
    if ((WTF *)(v6 + 64) != v10 && v10 != 0)
    {
      *(_QWORD *)(v6 + 48) = 0;
      *(_DWORD *)(v6 + 56) = 0;
      WTF::fastFree(v10, a2);
    }
    v12 = *(WTF **)v6;
    if (v6 + 16 != *(_QWORD *)v6 && v12)
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree((WTF *)v6, a2);
  }
  v13 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v13, a2);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = *((_DWORD *)this + 15);
  v15 = *((_QWORD *)this + 6);
  if (v14)
  {
    v16 = v15 + 4128 * v14;
    do
    {
      v17 = *(unsigned int *)(v15 + 4124);
      if ((_DWORD)v17)
      {
        v31 = *(_DWORD ***)(v15 + 4112);
        v32 = 8 * v17;
        do
        {
          v33 = *v31;
          *v31 = 0;
          if (v33)
          {
            if (*v33 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v33, (WTF::StringImpl *)a2);
            else
              --*v33;
          }
          ++v31;
          v32 -= 8;
        }
        while (v32);
      }
      v18 = *(WTF **)(v15 + 4112);
      if (v18)
      {
        *(_QWORD *)(v15 + 4112) = 0;
        *(_DWORD *)(v15 + 4120) = 0;
        WTF::fastFree(v18, a2);
      }
      v19 = *(unsigned int *)(v15 + 12);
      if ((_DWORD)v19)
      {
        v22 = 16 * v19;
        v23 = (_DWORD **)(*(_QWORD *)v15 + 8);
        do
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
          {
            if (*v24 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, (WTF::StringImpl *)a2);
            else
              *v24 -= 2;
          }
          v23 += 2;
          v22 -= 16;
        }
        while (v22);
      }
      v20 = *(WTF **)v15;
      if (v15 + 16 != *(_QWORD *)v15 && v20 != 0)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
        WTF::fastFree(v20, a2);
      }
      v15 += 4128;
    }
    while (v15 != v16);
    v15 = *((_QWORD *)this + 6);
  }
  if (v15)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((WTF *)v15, a2);
  }
  v25 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::CSSParserImpl *)((char *)this + 32) != v25)
  {
    if (v25)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v25, a2);
    }
  }
}

void WebCore::appendImplicitSelectorNestingParentIfNeeded(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BYTE **v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  int **v10;
  int v11;
  uint64_t v12;
  int v13;
  WebCore::MutableCSSSelector *v14;
  WTF *v15;
  void *v16;

  v1 = a1;
  v2 = a1;
  while (1)
  {
    WebCore::CSSSelector::hasExplicitNestingParent(*(WebCore::CSSSelector **)v2);
    if (v3)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      goto LABEL_8;
  }
  v4 = v1;
  do
  {
    v5 = (_BYTE **)v4;
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  if ((**v5 & 0xE) != 0)
  {
LABEL_8:
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = 786433;
    v7[1] = 0;
    *v6 = v7;
    v6[1] = 0;
    *(_DWORD *)v7 = *(_DWORD *)v7 & 0xFFFFFE0F | 0xE0;
    v9 = v1;
    do
    {
      v10 = (int **)v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
    v11 = **v10;
    do
    {
      v12 = v1;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
    if ((v11 & 0xE) != 0)
      v13 = v11 & 0xF;
    else
      v13 = 1;
    **(_DWORD **)v12 = **(_DWORD **)v12 & 0xFFFFFFF0 | v13;
    v14 = *(WebCore::MutableCSSSelector **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v6;
    if (v14)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v14, v8);
      WTF::fastFree(v15, v16);
    }
  }
}

void WebCore::appendImplicitSelectorPseudoClassScopeIfNeeded(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE **v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  int **v12;
  int v13;
  uint64_t v14;
  int v15;
  WebCore::MutableCSSSelector *v16;
  WTF *v17;
  void *v18;

  v1 = a1;
  v2 = a1;
  while (1)
  {
    WebCore::CSSSelector::hasExplicitNestingParent(*(WebCore::CSSSelector **)v2);
    if ((v3 & 1) != 0)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
    {
      v4 = v1;
      while (1)
      {
        WebCore::CSSSelector::hasExplicitPseudoClassScope(*(WebCore::CSSSelector **)v4);
        if (v5)
          goto LABEL_8;
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          goto LABEL_11;
      }
    }
  }
LABEL_8:
  v6 = v1;
  do
  {
    v7 = (_BYTE **)v6;
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
  if ((**v7 & 0xE) != 0)
  {
LABEL_11:
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = 786433;
    v9[1] = 0;
    *v8 = v9;
    v8[1] = 0;
    *(_DWORD *)v9 = *(_DWORD *)v9 & 0xFFFFFE0F | 0x80;
    *(_DWORD *)*v8 = *(_DWORD *)*v8 & 0xFFFE01FF | 0x8A00;
    *(_DWORD *)*v8 |= 0x1000000u;
    v11 = v1;
    do
    {
      v12 = (int **)v11;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
    v13 = **v12;
    do
    {
      v14 = v1;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
    if ((v13 & 0xE) != 0)
      v15 = v13 & 0xF;
    else
      v15 = 1;
    **(_DWORD **)v14 = **(_DWORD **)v14 & 0xFFFFFFF0 | v15;
    v16 = *(WebCore::MutableCSSSelector **)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v8;
    if (v16)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v16, v10);
      WTF::fastFree(v17, v18);
    }
  }
}

uint64_t *WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *a2;
  if (*a2)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*a2;
  *a2 = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *a2;
  if (*a2)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *a1 = v3;
  return a1;
}

_DWORD *WebCore::CSSParserImpl::consumeCustomPropertyValue(uint64_t a1, char *a2, char *a3, WebCore::CSSCustomPropertyValue *a4, int a5)
{
  _DWORD *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int16 v23;
  _DWORD *v24;

  if (a2 != a3)
  {
    result = (_DWORD *)WebCore::CSSVariableParser::parseDeclarationValue((unint64_t)a4, a2, a3, *(const WebCore::CSSParserContext **)(a1 + 64), (uint64_t *)&v22);
    v9 = (uint64_t)v22;
    if (!v22)
      return result;
    v10 = *(_DWORD *)(a1 + 60);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 48) + 4128 * v10 - 4128;
      v22 = 0;
      if (a5)
        v12 = -24575;
      else
        v12 = -32767;
      v23 = v12;
      v24 = (_DWORD *)v9;
      v13 = *(unsigned int *)(v11 + 12);
      if ((_DWORD)v13 != *(_DWORD *)(v11 + 8))
      {
        v14 = *(_QWORD *)v11 + 16 * v13;
        *(_WORD *)v14 = v12;
        *(_QWORD *)(v14 + 8) = v9;
        ++*(_DWORD *)(v11 + 12);
        goto LABEL_9;
      }
LABEL_14:
      WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>(v11, (unint64_t)&v23);
      v15 = v24;
      v24 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v8);
        else
          *v15 -= 2;
      }
      goto LABEL_9;
    }
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x19587A164);
  }
  v16 = *(_DWORD *)(a1 + 60);
  if (!v16)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v17 = *(_QWORD *)(a1 + 48) + 4128 * v16 - 4128;
  WebCore::CSSCustomPropertyValue::createEmpty(a4, (uint64_t *)&v22);
  v18 = (uint64_t)v22;
  v22 = 0;
  if (a5)
    v19 = -24575;
  else
    v19 = -32767;
  v23 = v19;
  v24 = (_DWORD *)v18;
  v20 = *(unsigned int *)(v17 + 12);
  if ((_DWORD)v20 == *(_DWORD *)(v17 + 8))
  {
    v11 = v17;
    goto LABEL_14;
  }
  v21 = *(_QWORD *)v17 + 16 * v20;
  *(_WORD *)v21 = v19;
  *(_QWORD *)(v21 + 8) = v18;
  ++*(_DWORD *)(v17 + 12);
  v24 = 0;
LABEL_9:
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WebCore::filterProperties(_DWORD *result, unsigned int *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _WORD *v22;
  _DWORD **v23;
  _DWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  _DWORD **v31;
  _DWORD *v32;
  _BYTE v33[24];

  v6 = a2[3];
  if ((_DWORD)v6)
  {
    v12 = (int)result;
    v13 = 16 * v6;
    v14 = v6 - 1;
    do
    {
      if (v14 >= a2[3])
      {
        __break(0xC471u);
        JUMPOUT(0x19587A34CLL);
      }
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)a2 + v13;
      v17 = *(_WORD *)(v16 - 16);
      if (v12 == (unsigned __int16)(v17 & 0x2000) >> 13)
      {
        v18 = v17 & 0x3FF;
        if (v18 == 1)
        {
          v19 = v15 + v13;
          v20 = *(_QWORD *)(v15 + v13 - 8);
          if (((*(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16)) & 0x3F800) != 0xE800)
            goto LABEL_26;
          result = WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add(a6, (WTF::StringImpl *)(v20 + 8), (uint64_t)v33);
          if (!v33[16])
            goto LABEL_21;
          v21 = *a4 - 1;
          *a4 = v21;
          if (v21 >= *(unsigned int *)(a3 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19587A354);
          }
          v22 = (_WORD *)(*(_QWORD *)a3 + 16 * v21);
          *v22 = *(_WORD *)(v16 - 16);
          v23 = (_DWORD **)(v22 + 4);
          v24 = *(_DWORD **)(v19 - 8);
          if (v24)
            *v24 += 2;
          result = *v23;
          *v23 = v24;
          if (!result)
            goto LABEL_21;
        }
        else
        {
          v25 = v18 - 2;
          v26 = (v18 - 2) >> 6;
          v27 = 1 << v25;
          v28 = *(_QWORD *)(a5 + 8 * v26);
          if ((v28 & v27) != 0)
            goto LABEL_21;
          *(_QWORD *)(a5 + 8 * v26) = v28 | v27;
          v29 = *a4 - 1;
          *a4 = v29;
          if (v29 >= *(unsigned int *)(a3 + 12))
          {
LABEL_26:
            __break(0xC471u);
            JUMPOUT(0x19587A344);
          }
          v30 = (_WORD *)(*(_QWORD *)a3 + 16 * v29);
          *v30 = *(_WORD *)(v16 - 16);
          v31 = (_DWORD **)(v30 + 4);
          v32 = *(_DWORD **)(v15 + v13 - 8);
          if (v32)
            *v32 += 2;
          result = *v31;
          *v31 = v32;
          if (!result)
            goto LABEL_21;
        }
        if (*result == 2)
          result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
        else
          *result -= 2;
      }
LABEL_21:
      --v14;
      v13 -= 16;
    }
    while (v13);
  }
  return result;
}

void *WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(char **a1, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  void *result;

  v2 = (int)a2;
  v4 = 0;
  v5 = *a1;
  v6 = &(*a1)[16 * (_QWORD)a2];
  v7 = 16 * (_QWORD)a2;
  do
  {
    v8 = *(_DWORD **)&v5[v4 + 8];
    *(_QWORD *)&v5[v4 + 8] = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
      else
        *v8 -= 2;
    }
    v4 += 16;
  }
  while (v7 != v4);
  result = memmove(v5, v6, &(*a1)[16 * *((unsigned int *)a1 + 3)] - v6);
  *((_DWORD *)a1 + 3) -= v2;
  return result;
}

void WebCore::CSSParserImpl::consumeAtRule(WebCore::CSSParserTokenRange *a1@<X0>, __int128 **a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  char v19;
  __int128 *v20;
  unsigned int v21;
  int v22;
  int v23;
  char v24;
  __int128 *v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned __int8 *v30;
  __int128 *v31;
  char **v32;
  int v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  char v38;
  __int128 *v39;
  int v40;
  __int128 *v41;
  char v42;
  __int128 *v43;
  int v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  int *v61;
  __int128 *v62;
  unsigned int v63;
  __int128 *v64;
  __int128 *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  WebCore::StyleRuleKeyframes *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WebCore::StyleRuleKeyframes *v73;
  __int128 *v74;
  int v75;
  char v76;
  unsigned int v77;
  __int128 *v78;
  unsigned int v79;
  WTF *v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  int v89;
  int v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  char v119;
  _BYTE v120[24];
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WebCore::StyleRuleKeyframes *v125;
  WTF::StringImpl *v126;
  unsigned __int8 *v127;

  v9 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v11 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
    v10 = *a2;
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v10 = (__int128 *)((char *)v9 + 24);
    *a2 = (__int128 *)((char *)v9 + 24);
  }
  while (1)
  {
    if (v10 < v8 || (v11 & 1) != 0)
    {
      if (v10 >= v8)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *(_DWORD *)v10;
    }
    else
    {
      v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v11 = 1;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)((char *)*a2 + 24);
    *a2 = v10;
  }
  v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
  v14 = *((unsigned int *)v9 + 1);
  v15 = (*(_DWORD *)v9 >> 22) & 1;
  v16 = *a2;
  if (*a2 >= v8)
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v17 = *a2;
  if ((*a2 < v8) | v11 & 1)
  {
    v18 = (*a2 >= v8) | v11;
  }
  else
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v18 = 1;
    v16 = *a2;
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  if (v16 == v8)
    goto LABEL_97;
  v19 = v18;
  while (1)
  {
    if (v16 >= v8)
    {
      if ((v19 & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v16 = *a2;
        v18 = 1;
      }
      v19 = 1;
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v20 = v16;
    }
    if ((*(_DWORD *)v20 & 0x3F) == 0x1A)
      break;
    if ((v16 < v8) | v19 & 1)
    {
      if (v16 >= v8)
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v21 = *(_DWORD *)v16;
    }
    else
    {
      v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
      v18 = 1;
      v19 = 1;
    }
    v22 = v21 & 0x3F;
    v16 = *a2;
    if (v22 == 20)
      break;
    v23 = 0;
    v24 = v19;
    do
    {
      if (v16 == v8)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v24 & 1) != 0)
        {
          v16 = v8;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v16 = *a2;
          v18 = 1;
          v19 = 1;
        }
        v24 = 1;
      }
      else
      {
        v25 = v16;
        v16 = (__int128 *)((char *)v16 + 24);
        *a2 = v16;
      }
      v26 = *(_DWORD *)v25 >> 6;
      if (v26 == 2)
        v27 = -1;
      else
        v27 = 0;
      if (v26 == 1)
        v28 = 1;
      else
        v28 = v27;
      v23 += v28;
      if (v23)
        v29 = v16 >= v8;
      else
        v29 = 1;
    }
    while (!v29);
    if (v16 == v8)
      goto LABEL_97;
  }
  if (v16 >= v8)
LABEL_97:
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  if ((v18 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
  v30 = (unsigned __int8 *)(v14 | (v15 << 32));
  if (v17 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v17 = v8;
  if (v16 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v31 = v8;
  else
    v31 = v16;
  v126 = (WTF::StringImpl *)v13;
  v127 = v30;
  v32 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2>,WebCore::CSSAtRuleID> [24]>::tryGet<WTF::StringView>((char ***)&WebCore::cssAtRuleID(WTF::StringView)::cssAtRules, (unsigned __int8 **)&v126);
  if (v32)
    v33 = *(_DWORD *)v32;
  else
    v33 = 0;
  v34 = *a2;
  v35 = a2[1];
  if (*a2 == v35)
    goto LABEL_182;
  if (*a2 >= v35)
  {
    v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v36 = *a2;
  if ((*(_DWORD *)v34 & 0x3F) == 0x14)
  {
    if (v36 != v35)
    {
      *a2 = (__int128 *)((char *)v36 + 24);
      goto LABEL_117;
    }
LABEL_182:
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
LABEL_117:
    if (!a3 && v33 == 1)
    {
      WebCore::CSSParserImpl::consumeCharsetRule(a4, v17, v31);
      return;
    }
    if (a3 <= 2 && v33 == 3)
    {
      WebCore::CSSParserImpl::consumeImportRule(a4, (uint64_t)a1, (uint64_t)v17, (uint64_t)v31);
      return;
    }
    if (a3 <= 3 && v33 == 6)
    {
      WebCore::CSSParserImpl::consumeNamespaceRule(a4, v17, v31);
      return;
    }
    if (a3 <= 4 && v33 == 12)
    {
      v120[0] = 0;
      v120[16] = 0;
      v93 = v120;
LABEL_192:
      WebCore::CSSParserImpl::consumeLayerRule(a4, (uint64_t)a1, v17, v31, (uint64_t)v93);
      return;
    }
LABEL_181:
    *a4 = 0;
    return;
  }
  if (v36 >= v35)
    v38 = 1;
  else
  if (v36 >= v35)
    v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v39 = *a2;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v37 = 1;
    v36 = *a2;
    v38 = 1;
    v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v40 = 0;
  v41 = (__int128 *)((char *)v39 + 24);
  v42 = v38;
  while (1)
  {
    if (v36 == v35)
    {
      v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v42 & 1) != 0)
      {
        v43 = v35;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v43 = *a2;
        v37 = 1;
        v38 = 1;
      }
      v42 = 1;
    }
    else
    {
      v43 = (__int128 *)((char *)v36 + 24);
      *a2 = (__int128 *)((char *)v36 + 24);
    }
    v44 = *(_DWORD *)v36 >> 6;
    v45 = v44 == 2 ? -1 : 0;
    v46 = v44 == 1 ? 1 : v45;
    v40 += v46;
    if (!v40)
      break;
    v36 = v43;
    if (v43 >= v35)
      goto LABEL_78;
  }
  v43 = (__int128 *)((char *)v43 - 24);
LABEL_78:
  if ((v38 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v37 = 1;
  }
  if (v41 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v47 = (unsigned __int8 *)v35;
  else
    v47 = (unsigned __int8 *)v41;
  if (v43 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v48 = v35;
  else
    v48 = v43;
  if (a3 == 5 || a3 == 8)
    goto LABEL_181;
  switch(v33)
  {
    case 2:
      WebCore::CSSParserImpl::consumeFontFaceRule((uint64_t)a4, (uint64_t)a1);
      return;
    case 4:
    case 10:
      v61 = &dword_1ECE90000;
      if (v17 == v31)
      {
        v63 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v37 & 1) == 0)
        {
          v63 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v63;
        }
        v37 = 1;
        v62 = v17;
        v64 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v62 = (__int128 *)((char *)v17 + 24);
        v63 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v64 = v17;
      }
      do
      {
        if (v62 < v31 || (v37 & 1) != 0)
        {
          if (v62 >= v31)
            v65 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v65 = v62;
          v66 = *(_DWORD *)v65;
        }
        else
        {
          v66 = v63 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v66;
          v37 = 1;
          v63 = v66;
        }
        v62 = (__int128 *)((char *)v62 + 24);
      }
      while ((v66 & 0x3F) == 0x10);
      if ((__int128 *)((char *)v62 - 24) != v31)
        goto LABEL_195;
      v67 = *(_DWORD *)v64;
      if ((*(_DWORD *)v64 & 0x3F) != 0)
      {
        if ((*(_DWORD *)v64 & 0x3F) != 0x1C)
        {
LABEL_195:
          v69 = 0;
          goto LABEL_114;
        }
      }
      else
      {
        v68 = *((_DWORD *)v64 + 4);
        if (v68 < 0)
        {
          v68 = WebCore::cssValueKeywordID(*((_QWORD *)v64 + 1), *((unsigned int *)v64 + 1) | ((unint64_t)((v67 >> 22) & 1) << 32));
          *((_DWORD *)v64 + 4) = v68;
        }
        v69 = 0;
        if ((unsigned __int16)v68 - 1 < 5 || (unsigned __int16)v68 == 395)
          goto LABEL_114;
        v67 = *(_DWORD *)v64;
        if ((unsigned __int16)v68 == 6)
        {
          v61 = &dword_1ECE90000;
          if ((v67 & 0x3F) == 0)
            goto LABEL_195;
        }
        else
        {
          v61 = &dword_1ECE90000;
        }
      }
      if ((v67 & 0x400000) != 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v121 = v126;
      v71 = *((_QWORD *)a1 + 11);
      if (v71)
      {
        v107 = *(_QWORD *)(v71 + 8);
        if (v107)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(_QWORD *)(v107 + 32)) >> 3) >= *(unsigned int *)(v107 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B2A0);
          }
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v107 + 8) + 16))(*(_QWORD *)(v107 + 8), 7, *(unsigned int *)(*(_QWORD *)(v107 + 16)- 0x5555555555555554 * (((uint64_t)v17 - *(_QWORD *)(v107 + 32)) >> 3)));
          v108 = *((_QWORD *)a1 + 11);
          if (v108)
          {
            v108 = *(_QWORD *)(v108 + 8);
            v109 = v108 + 8;
          }
          else
          {
            v109 = 8;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(_QWORD *)(v108 + 32)) >> 3) >= *(unsigned int *)(v108 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B2A8);
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v109 + 24))(*(_QWORD *)v109, *(unsigned int *)(*(_QWORD *)(v108 + 16)- 0x5555555555555554 * (((uint64_t)v31 - *(_QWORD *)(v108 + 32)) >> 3)));
          v110 = *((_QWORD *)a1 + 11);
          if (v110)
          {
            v110 = *(_QWORD *)(v110 + 8);
            v111 = v110 + 8;
          }
          else
          {
            v111 = 8;
          }
          v112 = *(_QWORD *)v111;
          v113 = *(unsigned __int8 **)(v110 + 32);
          if (v113 == v47)
          {
            v115 = 0;
          }
          else
          {
            v114 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v113) >> 3) - 1;
            if (v114 >= *(unsigned int *)(v110 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x19587B2B8);
            }
            v115 = *(unsigned int *)(*(_QWORD *)(v110 + 16) + 4 * v114);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 40))(v112, v115);
          v116 = *((_QWORD *)a1 + 11);
          if (v116)
          {
            v116 = *(_QWORD *)(v116 + 8);
            v117 = v116 + 8;
          }
          else
          {
            v117 = 8;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(_QWORD *)(v116 + 32)) >> 3) >= *(unsigned int *)(v116 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B2B0);
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v117 + 48))(*(_QWORD *)v117, *(unsigned int *)(*(_QWORD *)(v116 + 16)- 0x5555555555555554 * (((uint64_t)v48 - *(_QWORD *)(v116 + 32)) >> 3)));
        }
      }
      WebCore::StyleRuleKeyframes::create((WebCore::StyleRuleKeyframes *)&v121, &v125);
      v73 = v125;
      ++*(_DWORD *)v125;
      v126 = (WTF::StringImpl *)v47;
      v127 = (unsigned __int8 *)v48;
      if (v48 != (__int128 *)v47)
      {
        while (1)
        {
          v74 = (__int128 *)v47;
          if (v47 >= (unsigned __int8 *)v48)
          {
            v74 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              v74 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
          }
          v75 = *(_DWORD *)v74 & 0x3F;
          if (v75 == 2)
            break;
          if (v75 != 16)
          {
            WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v123, (uint64_t)a1);
LABEL_153:
            v80 = v123;
            if (v123)
            {
              v81 = *((_BYTE *)v123 + 4);
              v82 = (*(_DWORD *)v123)++;
              if ((v81 & 0x1F) != 8)
              {
                __break(0xC471u);
                JUMPOUT(0x19587AD58);
              }
              *(_DWORD *)v80 = v82 + 2;
              v123 = v80;
              v83 = *((unsigned int *)v73 + 5);
              if ((_DWORD)v83 == *((_DWORD *)v73 + 4))
              {
                v84 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73 + 8, v83 + 1, (unint64_t)&v123);
                v85 = *((unsigned int *)v73 + 5);
                v86 = *((_QWORD *)v73 + 1);
                v87 = *v84;
                *v84 = 0;
                *(_QWORD *)(v86 + 8 * v85) = v87;
                v88 = v123;
                *((_DWORD *)v73 + 5) = v85 + 1;
                v123 = 0;
                if (v88)
                {
                  if (*(_DWORD *)v88 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v88, v72);
                  else
                    --*(_DWORD *)v88;
                }
              }
              else
              {
                *(_QWORD *)(*((_QWORD *)v73 + 1) + 8 * v83) = v80;
                *((_DWORD *)v73 + 5) = v83 + 1;
              }
              v89 = *(_DWORD *)v80 - 1;
              if (*(_DWORD *)v80 == 1)
              {
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v80, v72);
                v89 = *(_DWORD *)v80;
              }
              else
              {
                *(_DWORD *)v80 = v89;
              }
              v90 = v89 - 1;
              if (v90)
                *(_DWORD *)v80 = v90;
              else
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v80, v72);
            }
            goto LABEL_164;
          }
          v77 = v61[306];
          while (1)
          {
            if (v47 < (unsigned __int8 *)v48 || (v76 & 1) != 0)
            {
              v78 = v47 >= (unsigned __int8 *)v48
                  ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
                  : (__int128 *)v47;
              v79 = *(_DWORD *)v78;
            }
            else
            {
              v79 = v77 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v79;
              v76 = 1;
              v77 = v79;
            }
            if ((v79 & 0x3F) != 0x10)
              break;
            v47 += 24;
            v126 = (WTF::StringImpl *)v47;
          }
LABEL_164:
          v47 = (unsigned __int8 *)v126;
          v48 = (__int128 *)v127;
          if (v126 == (WTF::StringImpl *)v127)
            goto LABEL_171;
        }
        WebCore::CSSParserImpl::consumeAtRule(&v123, a1, &v126, 5);
        goto LABEL_153;
      }
LABEL_171:
      if (*(_DWORD *)v73 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v73, v72);
      else
        --*(_DWORD *)v73;
      WebCore::StyleRuleKeyframes::shrinkToFit((uint64_t)v125, v72);
      v69 = v125;
      v92 = v121;
      v121 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, v91);
        else
          *(_DWORD *)v92 -= 2;
      }
LABEL_114:
      *a4 = (uint64_t)v69;
      break;
    case 5:
      v49 = *((_QWORD *)a1 + 11);
      if (v49)
      {
        v94 = *(_QWORD *)(v49 + 8);
        if (v94)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(_QWORD *)(v94 + 32)) >> 3) >= *(unsigned int *)(v94 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B280);
          }
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v94 + 8) + 16))(*(_QWORD *)(v94 + 8), 4, *(unsigned int *)(*(_QWORD *)(v94 + 16)- 0x5555555555555554 * (((uint64_t)v17 - *(_QWORD *)(v94 + 32)) >> 3)));
          v95 = *((_QWORD *)a1 + 11);
          if (v95)
          {
            v95 = *(_QWORD *)(v95 + 8);
            v96 = v95 + 8;
          }
          else
          {
            v96 = 8;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(_QWORD *)(v95 + 32)) >> 3) >= *(unsigned int *)(v95 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B288);
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v96 + 24))(*(_QWORD *)v96, *(unsigned int *)(*(_QWORD *)(v95 + 16)- 0x5555555555555554 * (((uint64_t)v31 - *(_QWORD *)(v95 + 32)) >> 3)));
          v97 = *((_QWORD *)a1 + 11);
          if (v97)
          {
            v97 = *(_QWORD *)(v97 + 8);
            v98 = v97 + 8;
          }
          else
          {
            v98 = 8;
          }
          v99 = *(_QWORD *)v98;
          v100 = *(unsigned __int8 **)(v97 + 32);
          if (v100 == v47)
          {
            v102 = 0;
          }
          else
          {
            v101 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v100) >> 3) - 1;
            if (v101 >= *(unsigned int *)(v97 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x19587B298);
            }
            v102 = *(unsigned int *)(*(_QWORD *)(v97 + 16) + 4 * v101);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 40))(v99, v102);
        }
      }
      WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)&v123, (uint64_t)a1, (__int128 *)v47, v48);
      v50 = *((_QWORD *)a1 + 11);
      if (v50)
      {
        v103 = *(_QWORD *)(v50 + 8);
        if (v103)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(_QWORD *)(v103 + 32)) >> 3) >= *(unsigned int *)(v103 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587B290);
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v103 + 8) + 48))(*(_QWORD *)(v103 + 8), *(unsigned int *)(*(_QWORD *)(v103 + 16)- 0x5555555555555554 * (((uint64_t)v48 - *(_QWORD *)(v103 + 32)) >> 3)));
        }
      }
      v51 = *((_QWORD *)a1 + 8);
      v52 = *(_WORD *)(v51 + 51);
      LOBYTE(v125) = (v52 & 8) != 0;
      BYTE1(v125) = (v52 & 0x2000) != 0;
      BYTE2(v125) = *(_BYTE *)(v51 + 48);
      v126 = (WTF::StringImpl *)v17;
      v127 = (unsigned __int8 *)v31;
      WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v126, (WebCore::CSSParserTokenRange *)&v125, (uint64_t)&v121);
      v53 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v53 = 1;
      *(_BYTE *)(v53 + 4) = *(_BYTE *)(v53 + 4) & 0xC0 | 4;
      v54 = v123;
      v123 = 0;
      *(_QWORD *)(v53 + 8) = v54;
      v55 = v124;
      v124 = 0;
      *(_QWORD *)(v53 + 16) = v55;
      v56 = v121;
      v121 = 0;
      *(_QWORD *)(v53 + 24) = v56;
      v57 = v122;
      v122 = 0;
      *(_QWORD *)(v53 + 32) = v57;
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v58);
      if (HIDWORD(v124))
      {
        v104 = v123;
        v105 = 8 * HIDWORD(v124);
        do
        {
          v106 = *(_DWORD **)v104;
          *(_QWORD *)v104 = 0;
          if (v106)
          {
            if (*v106 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v106, v59);
            else
              --*v106;
          }
          v104 = (WTF *)((char *)v104 + 8);
          v105 -= 8;
        }
        while (v105);
      }
      v60 = v123;
      if (v123)
      {
        v123 = 0;
        LODWORD(v124) = 0;
        WTF::fastFree(v60, v59);
      }
      *a4 = v53;
      return;
    case 7:
      WebCore::CSSParserImpl::consumePageRule((uint64_t)a4, (uint64_t)a1);
      return;
    case 8:
      WebCore::CSSParserImpl::consumeSupportsRule(a4, (uint64_t)a1, (char *)v17, (char *)v31, (__int128 *)v47, v48);
      return;
    case 11:
      WebCore::CSSParserImpl::consumeCounterStyleRule((uint64_t)a4, (uint64_t)a1);
      return;
    case 12:
      v118[0] = v47;
      v118[1] = v48;
      v119 = 1;
      v93 = v118;
      goto LABEL_192;
    case 13:
      WebCore::CSSParserImpl::consumeContainerRule(a4, (uint64_t)a1, v17, v31, (__int128 *)v47, v48);
      return;
    case 14:
      WebCore::CSSParserImpl::consumePropertyRule((uint64_t)a4, (uint64_t)a1);
      return;
    case 15:
      WebCore::CSSParserImpl::consumeFontFeatureValuesRule(a4, a1, v17, v31, (__int128 *)v47, v48);
      return;
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      if (a3 == 7)
      {
        WebCore::CSSParserImpl::consumeFontFeatureValuesRuleBlock((WTF::StringImpl *)&v126, a1, v33, (uint64_t)v17, (uint64_t)v31, (__int128 *)v47, v48);
        v70 = v126;
      }
      else
      {
        v70 = 0;
      }
      *a4 = (uint64_t)v70;
      return;
    case 22:
      WebCore::CSSParserImpl::consumeFontPaletteValuesRule((uint64_t)a4, (uint64_t)a1);
      return;
    case 23:
      WebCore::CSSParserImpl::consumeScopeRule(a4, (uint64_t)a1, v17, (unint64_t)v31, (__int128 *)v47, v48);
      return;
    case 24:
      WebCore::CSSParserImpl::consumeStartingStyleRule(a4, (uint64_t)a1, (uint64_t)v17, (uint64_t)v31, (__int128 *)v47, v48);
      return;
    default:
      goto LABEL_181;
  }
}

WTF *WebCore::CSSParserImpl::consumeQualifiedRule(uint64_t a1, uint64_t a2)
{
  WTF *result;
  __int128 **v3;
  unsigned int v4;
  unsigned int v5;
  __int128 **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  const WebCore::CSSParserTokenRange *v19;
  const WebCore::CSSParserTokenRange *v20;
  const WebCore::CSSParserTokenRange *v21;
  uint64_t v22;
  WebCore::StyleSheetContents *v23;
  int v24;
  int32x4_t v25;
  int16x8_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  _DWORD **v44;
  _DWORD *v45;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  int v52;
  int v53;
  unsigned int v54;
  WTF *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  WTF::StringImpl *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  int v67;
  __int16 v68;
  WTF *v69;
  uint64_t v70;
  char v71;
  WTF::StringImpl *v72;
  WebCore::MutableCSSSelector **v73;
  uint64_t v74;
  WebCore::MutableCSSSelector *v75;
  WTF *v76;
  void *v77;
  WTF *v78;
  void *v79;
  __int128 *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  WebCore::ImmutableStyleProperties *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WebCore::ImmutableStyleProperties *v92;
  uint64_t v93;
  _DWORD **v94;
  _DWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int *v98;
  _DWORD *v99;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  int v106;
  WTF *v107;
  void *v108;
  uint64_t v109;
  int v110;
  WTF *v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  _BYTE v120[4096];
  WTF *v121[2];
  WTF::StringImpl *v122;
  int v123;
  int v124;
  WebCore::ImmutableStyleProperties *v125;
  __int128 *v126;
  char *v127;
  WTF **v128;
  char v129;
  WTF *v130;
  const WebCore::CSSParserTokenRange *v131;

  result = (WTF *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = v3;
  v8 = v7;
  v9 = result;
  v11 = *v3;
  v10 = v3[1];
  if (*v3 >= v10)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v11 = *v3;
    }
  }
  else
  {
    v12 = *v3;
  }
  if (v11 == v10)
  {
    v13 = v10;
  }
  else if (v4 >= 5)
  {
    do
    {
      v13 = v10;
      if (v11 >= v10)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) == 0x1A)
        break;
      result = (WTF *)WebCore::CSSParserTokenRange::consumeComponentValue(v6);
      v11 = *v6;
      v10 = v6[1];
      v13 = *v6;
    }
    while (*v6 != v10);
  }
  else
  {
    v13 = v11;
    do
    {
      v14 = v13;
      v13 = v10;
      if (v14 >= v10)
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v14 & 0x3F) == 0x1A)
        break;
      if (*(_DWORD *)(v8 + 8)
        || (*(_BYTE *)v8 || *(_DWORD *)(v8 + 4)) && (*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) != 0)
      {
        v15 = *v6;
        if (*v6 >= v13)
        {
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v15 & 0x3F) == 0x14)
          break;
      }
      result = (WTF *)WebCore::CSSParserTokenRange::consumeComponentValue(v6);
      v13 = *v6;
      v10 = v6[1];
    }
    while (*v6 != v10);
  }
  v16 = *v6;
  if (*v6 == v13)
    goto LABEL_115;
  if (*(_DWORD *)(v8 + 8))
  {
    if (v5 > 4)
      goto LABEL_22;
  }
  else if (!*(_BYTE *)v8 && !*(_DWORD *)(v8 + 4) || v5 > 4 || (*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) == 0)
  {
    goto LABEL_22;
  }
  if (v16 >= v13)
  {
    v80 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v16 = *v6;
    }
  }
  else
  {
    v80 = *v6;
  }
  if ((*(_DWORD *)v80 & 0x3F) == 0x14)
  {
    if (v16 == v13)
    {
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *v6 = (__int128 *)((char *)v16 + 24);
    }
    goto LABEL_115;
  }
LABEL_22:
  if (v16 >= v13)
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
  if (v12 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v17 = v13;
  else
    v17 = v12;
  if (v16 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v18 = v13;
  else
    v18 = v16;
  result = (WTF *)WebCore::CSSParserTokenRange::consumeBlockCheckingForEditability(v6, *(_QWORD *)(v8 + 72));
  v19 = result;
  v21 = v20;
  if (v5 <= 4)
  {
    v22 = *(_QWORD *)(v8 + 64);
    v23 = *(WebCore::StyleSheetContents **)(v8 + 72);
    LOBYTE(v118) = *(_BYTE *)(v22 + 48);
    v24 = *(unsigned __int8 *)(v22 + 53);
    v25 = vdupq_n_s32(*(unsigned __int16 *)(v22 + 51) | (v24 << 16));
    BYTE5(v118) = v24 & 1;
    v125 = (WebCore::ImmutableStyleProperties *)v17;
    v126 = v18;
    v26 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v25 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
    *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v26), (int8x8_t)0x1000100010001);
    *(_DWORD *)((char *)&v118 + 1) = vmovn_s16(v26).u32[0];
    BYTE6(v118) = (v24 & 0x40) != 0;
    HIBYTE(v118) = (*(_DWORD *)(v22 + 54) & 0x20000000) != 0;
    LOBYTE(v119) = 0;
    if (v23)
      ++*(_DWORD *)v23;
    if (*(_DWORD *)(v8 + 8))
    {
      v27 = 1;
    }
    else if (*(_BYTE *)v8 || *(_DWORD *)(v8 + 4))
    {
      v27 = (*(unsigned __int16 *)(v22 + 51) >> 9) & 1;
    }
    else
    {
      v27 = 0;
    }
    WebCore::parseMutableCSSSelectorList((uint64_t)&v125, &v118, v23, (WTF::AtomString *)v27, 0, (uint64_t)&v130);
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::StyleSheetContents::~StyleSheetContents(v23, v28);
        WTF::fastFree(v78, v79);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    if (!HIDWORD(v131))
    {
      *v9 = 0;
LABEL_82:
      result = v130;
      if (!v130)
        return result;
      v130 = 0;
      LODWORD(v131) = 0;
      return (WTF *)WTF::fastFree(result, v28);
    }
    v29 = (_QWORD *)(v8 + 16);
    if (*(_DWORD *)(v8 + 28))
    {
      v101 = (uint64_t *)v130;
      v102 = 8 * HIDWORD(v131);
      do
      {
        v103 = *(unsigned int *)(v8 + 28);
        if (!(_DWORD)v103)
        {
          __break(0xC471u);
          JUMPOUT(0x19587BF5CLL);
        }
        v104 = *v101;
        if (*(_BYTE *)(v103 + *v29 - 1))
          WebCore::appendImplicitSelectorPseudoClassScopeIfNeeded(v104);
        else
          WebCore::appendImplicitSelectorNestingParentIfNeeded(v104);
        ++v101;
        v102 -= 8;
      }
      while (v102);
    }
    WebCore::CSSSelectorList::CSSSelectorList(&v122, (uint64_t)&v130);
    v31 = *(_QWORD *)(v8 + 88);
    if (v31)
    {
      v109 = *(_QWORD *)(v31 + 8);
      if (v109)
        WebCore::observeSelectors(v109, v17, v18);
    }
    *v9 = 0;
    v32 = (unsigned int *)(v8 + 48);
    v118 = (WTF *)v120;
    v119 = 256;
    *(_OWORD *)v121 = 0u;
    v33 = *(unsigned int *)(v8 + 60);
    if ((_DWORD)v33 == *(_DWORD *)(v8 + 56))
    {
      v81 = WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v118);
      v82 = *(_DWORD *)(v8 + 60);
      v83 = *(_QWORD *)(v8 + 48);
      v84 = v83 + 4128 * v82;
      *(_QWORD *)v84 = v84 + 16;
      *(_QWORD *)(v84 + 8) = 256;
      v30 = *(void **)v81;
      if (*(_QWORD *)v81 == v81 + 16)
      {
        memcpy((void *)(v84 + 16), v30, 16 * *(unsigned int *)(v81 + 12));
      }
      else
      {
        *(_QWORD *)v81 = v81 + 16;
        *(_QWORD *)v84 = v30;
        v110 = *(_DWORD *)(v81 + 8);
        *(_DWORD *)(v81 + 8) = 256;
        *(_DWORD *)(v84 + 8) = v110;
      }
      v85 = *(_DWORD *)(v81 + 12);
      *(_DWORD *)(v81 + 12) = 0;
      *(_DWORD *)(v84 + 12) = v85;
      v38 = v83 + 4128 * v82;
      *(_OWORD *)(v38 + 4112) = 0u;
      v86 = *(_QWORD *)(v81 + 4112);
      *(_QWORD *)(v81 + 4112) = 0;
      *(_QWORD *)(v38 + 4112) = v86;
      LODWORD(v86) = *(_DWORD *)(v81 + 4120);
      *(_DWORD *)(v81 + 4120) = 0;
      *(_DWORD *)(v38 + 4120) = v86;
      v40 = *(_DWORD *)(v81 + 4124);
      *(_DWORD *)(v81 + 4124) = 0;
    }
    else
    {
      v34 = *(_QWORD *)v32;
      v35 = *(_QWORD *)v32 + 4128 * v33;
      *(_QWORD *)v35 = v35 + 16;
      *(_QWORD *)(v35 + 8) = 256;
      v36 = v118;
      if (v118 == (WTF *)v120)
      {
        memcpy((void *)(v35 + 16), v120, 16 * HIDWORD(v119));
      }
      else
      {
        v118 = (WTF *)v120;
        *(_QWORD *)v35 = v36;
        v106 = v119;
        LODWORD(v119) = 256;
        *(_DWORD *)(v35 + 8) = v106;
      }
      v37 = HIDWORD(v119);
      HIDWORD(v119) = 0;
      *(_DWORD *)(v35 + 12) = v37;
      v38 = v34 + 4128 * v33;
      *(_OWORD *)(v38 + 4112) = 0u;
      v39 = v121[0];
      v121[0] = 0;
      *(_QWORD *)(v38 + 4112) = v39;
      LODWORD(v39) = v121[1];
      LODWORD(v121[1]) = 0;
      *(_DWORD *)(v38 + 4120) = (_DWORD)v39;
      v40 = HIDWORD(v121[1]);
      HIDWORD(v121[1]) = 0;
    }
    *(_DWORD *)(v38 + 4124) = v40;
    ++*(_DWORD *)(v8 + 60);
    if (HIDWORD(v121[1]))
    {
      v111 = v121[0];
      v112 = 8 * HIDWORD(v121[1]);
      do
      {
        v113 = *(_DWORD **)v111;
        *(_QWORD *)v111 = 0;
        if (v113)
        {
          if (*v113 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v113, (WTF::StringImpl *)v30);
          else
            --*v113;
        }
        v111 = (WTF *)((char *)v111 + 8);
        v112 -= 8;
      }
      while (v112);
    }
    v41 = v121[0];
    if (v121[0])
    {
      v121[0] = 0;
      LODWORD(v121[1]) = 0;
      WTF::fastFree(v41, v30);
    }
    v42 = v118;
    if (HIDWORD(v119))
    {
      v43 = 16 * HIDWORD(v119);
      v44 = (_DWORD **)((char *)v118 + 8);
      do
      {
        v45 = *v44;
        *v44 = 0;
        if (v45)
        {
          if (*v45 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, (WTF::StringImpl *)v30);
          else
            *v45 -= 2;
        }
        v44 += 2;
        v43 -= 16;
      }
      while (v43);
      v42 = v118;
    }
    if (v120 != (_BYTE *)v42 && v42 != 0)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      WTF::fastFree(v42, v30);
    }
    ++*(_DWORD *)(v8 + 4);
    LOBYTE(v118) = 0;
    v47 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v47 == *(_DWORD *)(v8 + 24))
    {
      v105 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, (WTF *)(v47 + 1), (unint64_t)&v118);
      v47 = *(unsigned int *)(v8 + 28);
      *(_BYTE *)(*(_QWORD *)(v8 + 16) + v47) = *v105;
    }
    else
    {
      *(_BYTE *)(*v29 + v47) = 0;
    }
    *(_DWORD *)(v8 + 28) = v47 + 1;
    WebCore::CSSParserImpl::consumeBlockContent(v8, v19, v21, 1u, 0, 0);
    v48 = *(_DWORD *)(v8 + 28);
    if (v48)
    {
      *(_DWORD *)(v8 + 28) = v48 - 1;
      --*(_DWORD *)(v8 + 4);
      v49 = *(_DWORD *)(v8 + 60);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x19587BF44);
      }
      v50 = *(_QWORD *)(v8 + 48) + 4128 * v49;
      v51 = *(WTF **)(v50 - 16);
      v52 = *(_DWORD *)(v50 - 8);
      v53 = *(_DWORD *)(v50 - 4);
      *(_QWORD *)(v50 - 16) = 0;
      *(_QWORD *)(v50 - 8) = 0;
      v54 = *(_DWORD *)(v8 + 60);
      if (!v54)
      {
        __break(0xC471u);
        JUMPOUT(0x19587BF4CLL);
      }
      WebCore::createStyleProperties((uint64_t)&v118, *(_QWORD *)(v8 + 48) + 4128 * v54 - 4128);
      if (!v53)
      {
        v65 = v122;
        if (v122)
        {
          while ((WebCore::forEachTagSelector<WebCore::CSSSelectorList::hasExplicitNestingParent(void)::$_0>(v65) & 1) == 0)
          {
            do
            {
              v67 = *(_DWORD *)v65;
              v65 = (WTF::StringImpl *)((char *)v65 + 16);
              v66 = v67;
            }
            while ((v67 & 0x80000) == 0);
            if ((v66 & 0x20000) != 0)
              goto LABEL_88;
          }
          goto LABEL_71;
        }
LABEL_88:
        if (!*(_DWORD *)(v8 + 8))
        {
          if (!*(_BYTE *)v8 && !*(_DWORD *)(v8 + 4))
          {
            v68 = *(_WORD *)(*(_QWORD *)(v8 + 64) + 51);
LABEL_92:
            v69 = v118;
            v118 = 0;
            v70 = WTF::fastMalloc((WTF *)0x20);
            v58 = v70;
            *(_DWORD *)v70 = 1;
            if ((v68 & 2) != 0)
              v71 = 33;
            else
              v71 = 1;
            *(_BYTE *)(v70 + 4) = *(_BYTE *)(v70 + 4) & 0xC0 | v71;
            *(_WORD *)(v70 + 5) = 0;
            v72 = v122;
            v122 = 0;
            *(_QWORD *)(v70 + 8) = v69;
            *(_QWORD *)(v70 + 16) = v72;
            *(_QWORD *)(v70 + 24) = 0;
            goto LABEL_75;
          }
          LOBYTE(v68) = *(_WORD *)(*(_QWORD *)(v8 + 64) + 51);
          if ((*(_WORD *)(*(_QWORD *)(v8 + 64) + 51) & 0x200) == 0)
            goto LABEL_92;
        }
      }
LABEL_71:
      v55 = v118;
      v118 = 0;
      v56 = *(_WORD *)(*(_QWORD *)(v8 + 64) + 51);
      v57 = WTF::fastMalloc((WTF *)0x38);
      v58 = v57;
      *(_DWORD *)v57 = 1;
      if ((v56 & 2) != 0)
        v59 = 33;
      else
        v59 = 1;
      *(_BYTE *)(v57 + 4) = *(_BYTE *)(v57 + 4) & 0xC0 | v59;
      *(_WORD *)(v57 + 5) = 0;
      *(_QWORD *)(v57 + 8) = v55;
      *(_QWORD *)(v57 + 16) = v122;
      v122 = 0;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = v51;
      *(_DWORD *)(v57 + 40) = v52;
      *(_DWORD *)(v57 + 44) = v53;
      WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v57 + 48), (uint64_t *)(v57 + 16));
      v51 = 0;
      *(_BYTE *)(v58 + 4) = *(_BYTE *)(v58 + 4) & 0xE0 | 0x16;
LABEL_75:
      *v9 = v58;
      v61 = (unsigned int *)v118;
      v118 = 0;
      if (v61)
      {
        if (*v61 == 1)
        {
          v96 = v61[1];
          if (v96 >= 0x10)
          {
            v97 = 0;
            v98 = (unsigned int *)((char *)v61 + ((v96 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v99 = (_DWORD *)(*v98 | ((unint64_t)*((unsigned __int8 *)v98 + 4) << 32));
              if (*v99 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99, v60);
              else
                *v99 -= 2;
              ++v97;
              v98 = (unsigned int *)((char *)v98 + 5);
            }
            while (v97 < (unint64_t)v61[1] >> 4);
          }
          WTF::fastFree((WTF *)v61, v60);
        }
        else
        {
          --*v61;
        }
      }
      if (v51)
        WTF::fastFree(v51, v60);
      v62 = *(_DWORD *)(v8 + 60);
      if (!v62)
      {
        __break(0xC471u);
        JUMPOUT(0x19587BF54);
      }
      v63 = v62 - 1;
      v64 = (WTF::StringImpl *)(*(_QWORD *)(v8 + 48) + 4128 * v62);
      WTF::VectorTypeOperations<WebCore::CSSParserImpl::NestingContext>::destruct((WTF::StringImpl *)((char *)v64 - 4128), v64);
      *(_DWORD *)(v8 + 60) = v63;
      v28 = v122;
      v122 = 0;
      if (v28)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v122, v28);
      if (HIDWORD(v131))
      {
        v73 = (WebCore::MutableCSSSelector **)v130;
        v74 = 8 * HIDWORD(v131);
        do
        {
          v75 = *v73;
          *v73 = 0;
          if (v75)
          {
            WebCore::MutableCSSSelector::~MutableCSSSelector(v75, v28);
            WTF::fastFree(v76, v77);
          }
          ++v73;
          v74 -= 8;
        }
        while (v74);
      }
      goto LABEL_82;
    }
    __break(0xC471u);
LABEL_201:
    JUMPOUT(0x19587BF3CLL);
  }
  if (v5 != 5)
  {
LABEL_115:
    *v9 = 0;
    return result;
  }
  WebCore::CSSParserImpl::consumeKeyframeKeyList(v17, v18, &v122);
  v87 = v124;
  if (v124)
  {
    v88 = *(_QWORD *)(v8 + 88);
    if (v88)
    {
      v114 = *(_QWORD *)(v88 + 8);
      if (v114)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(_QWORD *)(v114 + 32)) >> 3) >= *(unsigned int *)(v114 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587BF64);
        }
        v115 = *(unsigned int *)(*(_QWORD *)(v114 + 16)
                               - 0x5555555555555554 * (((uint64_t)v17 - *(_QWORD *)(v114 + 32)) >> 3));
        v116 = 8;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v114 + 8) + 16))(*(_QWORD *)(v114 + 8), 8, v115);
        v117 = *(_QWORD *)(v8 + 88);
        if (v117)
        {
          v117 = *(_QWORD *)(v117 + 8);
          v116 = v117 + 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *(_QWORD *)(v117 + 32)) >> 3) >= *(unsigned int *)(v117 + 28))
        {
          __break(0xC471u);
          goto LABEL_201;
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v116 + 24))(*(_QWORD *)v116, *(unsigned int *)(*(_QWORD *)(v117 + 16)- 0x5555555555555554 * (((uint64_t)v18 - *(_QWORD *)(v117 + 32)) >> 3)));
      }
    }
    v130 = v19;
    v131 = v21;
    v129 = 8;
    v118 = (WTF *)v120;
    v119 = 256;
    v125 = (WebCore::ImmutableStyleProperties *)v8;
    v126 = (__int128 *)&v130;
    v127 = &v129;
    v128 = &v118;
    WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v8, (uint64_t)&v125);
    WebCore::createStyleProperties((uint64_t)&v125, (uint64_t)&v118);
    v89 = v125;
    v125 = 0;
    v90 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v90 = 1;
    *(_BYTE *)(v90 + 4) = *(_BYTE *)(v90 + 4) & 0xC0 | 8;
    v91 = v122;
    *(_QWORD *)(v90 + 8) = v89;
    *(_QWORD *)(v90 + 16) = v91;
    *(_DWORD *)(v90 + 24) = v123;
    *(_DWORD *)(v90 + 28) = v87;
    *v9 = v90;
    v92 = v125;
    v125 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 1)
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v92, v28);
        WTF::fastFree(v107, v108);
      }
      else
      {
        --*(_DWORD *)v92;
      }
    }
    result = v118;
    if (HIDWORD(v119))
    {
      v93 = 16 * HIDWORD(v119);
      v94 = (_DWORD **)((char *)v118 + 8);
      do
      {
        v95 = *v94;
        *v94 = 0;
        if (v95)
        {
          if (*v95 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v95, v28);
          else
            *v95 -= 2;
        }
        v94 += 2;
        v93 -= 16;
      }
      while (v93);
      result = v118;
    }
    if (v120 != (_BYTE *)result && result != 0)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      return (WTF *)WTF::fastFree(result, v28);
    }
  }
  else
  {
    *v9 = 0;
    result = v122;
    if (v122)
      return (WTF *)WTF::fastFree(result, v28);
  }
  return result;
}

WebCore::MutableCSSSelector **std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](WebCore::MutableCSSSelector **a1, void *a2)
{
  WebCore::MutableCSSSelector *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::MutableCSSSelector **v4;
  uint64_t v5;
  WebCore::MutableCSSSelector *v6;
  WTF *v7;
  void *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::MutableCSSSelector ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v6, a2);
        WTF::fastFree(v7, v8);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WebCore::CSSParserImpl::supportsDeclaration(WebCore::CSSParserImpl *this, WebCore::CSSParserTokenRange *a2)
{
  _QWORD v3[3];
  unsigned __int8 v4;

  v4 = 0;
  v3[0] = &v4;
  v3[1] = this;
  v3[2] = a2;
  WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::supportsDeclaration(WebCore::CSSParserTokenRange &)::$_0>((uint64_t)this, (uint64_t)v3);
  return v4;
}

WTF *WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::supportsDeclaration(WebCore::CSSParserTokenRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF *result;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[4096];
  WTF *v31[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v6 = (unsigned int *)(v2 + 48);
  v28 = (WTF *)v30;
  v29 = 256;
  *(_OWORD *)v31 = 0u;
  v7 = *(_DWORD *)(v5 + 60);
  if (v7 == *(_DWORD *)(v5 + 56))
  {
    WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserImpl::NestingContext>(v6, (unint64_t)&v28);
  }
  else
  {
    v8 = *(_QWORD *)v6;
    v9 = *(_QWORD *)v6 + 4128 * v7;
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 256;
    v10 = v28;
    if (v28 == (WTF *)v30)
    {
      memcpy((void *)(v9 + 16), v30, 16 * HIDWORD(v29));
    }
    else
    {
      v28 = (WTF *)v30;
      *(_QWORD *)v9 = v10;
      v24 = v29;
      LODWORD(v29) = 256;
      *(_DWORD *)(v9 + 8) = v24;
    }
    v11 = HIDWORD(v29);
    HIDWORD(v29) = 0;
    *(_DWORD *)(v9 + 12) = v11;
    v12 = v8 + 4128 * v7;
    *(_OWORD *)(v12 + 4112) = 0u;
    v13 = v31[0];
    v31[0] = 0;
    *(_QWORD *)(v12 + 4112) = v13;
    LODWORD(v13) = v31[1];
    LODWORD(v31[1]) = 0;
    *(_DWORD *)(v12 + 4120) = (_DWORD)v13;
    LODWORD(v13) = HIDWORD(v31[1]);
    HIDWORD(v31[1]) = 0;
    *(_DWORD *)(v12 + 4124) = (_DWORD)v13;
    ++*(_DWORD *)(v5 + 60);
  }
  if (HIDWORD(v31[1]))
  {
    v25 = v31[0];
    v26 = 8 * HIDWORD(v31[1]);
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*v27 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v27, v3);
        else
          --*v27;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  v14 = v31[0];
  if (v31[0])
  {
    v31[0] = 0;
    LODWORD(v31[1]) = 0;
    WTF::fastFree(v14, v3);
  }
  v15 = v28;
  if (HIDWORD(v29))
  {
    v16 = 16 * HIDWORD(v29);
    v17 = (_DWORD **)((char *)v28 + 8);
    do
    {
      v18 = *v17;
      *v17 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v3);
        else
          *v18 -= 2;
      }
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    v15 = v28;
  }
  if (v30 != (_BYTE *)v15 && v15 != 0)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v15, v3);
  }
  result = (WTF *)WebCore::CSSParserImpl::consumeDeclaration(*((_QWORD *)v4 + 1), **((__int128 ***)v4 + 2), *(__int128 **)(*((_QWORD *)v4 + 2) + 8), 1u);
  **(_BYTE **)v4 = (_BYTE)result;
  v21 = *(_DWORD *)(v5 + 60);
  if (v21)
  {
    v22 = v21 - 1;
    v23 = (WTF::StringImpl *)(*(_QWORD *)(v5 + 48) + 4128 * v21);
    result = WTF::VectorTypeOperations<WebCore::CSSParserImpl::NestingContext>::destruct((WTF::StringImpl *)((char *)v23 - 4128), v23);
    *(_DWORD *)(v5 + 60) = v22;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSParserImpl::consumeCharsetRule(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 *v6;
  __int128 *v7;

  v6 = a2;
  v7 = a3;
  if ((*(_DWORD *)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v6) & 0x3F) == 0x1C && v6 == v7)
  {
    v4 = WTF::fastMalloc((WTF *)8);
    result = WebCore::StyleRuleCharset::StyleRuleCharset(v4);
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

WTF::StringImpl *WebCore::CSSParserImpl::consumeImportRule(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WebCore::CSSParserTokenRange *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int v15;
  __int128 *v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  __int128 *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  __int128 *v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  _BYTE v60[3];
  WTF *v61;
  uint64_t v62;
  char v63;
  WTF::StringImpl *v64;
  __int128 v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  char v68;
  WTF::StringImpl *v69;
  __int128 *v70;
  __int128 v71;

  *(_QWORD *)&v65 = a3;
  *((_QWORD *)&v65 + 1) = a4;
  result = (WTF::StringImpl *)WebCore::consumeStringOrURI((uint64_t)&v64, (__int128 **)&v65);
  if (!v64)
  {
    *a1 = 0;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 88);
  if (v8)
  {
    v48 = *(_QWORD *)(v8 + 8);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 32);
      v50 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v65 + 1) - v49) >> 3);
      v51 = *(unsigned int *)(v48 + 28);
      if (v50 >= v51 || (v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65 - v49) >> 3), v52 >= v51))
      {
        __break(0xC471u);
        JUMPOUT(0x19587CAACLL);
      }
      v53 = *(_QWORD *)(v48 + 8);
      v54 = *(_QWORD *)(v48 + 16);
      v55 = *(unsigned int *)(v54 + 4 * v50);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 16))(v53, 3, *(unsigned int *)(v54 + 4 * v52));
      v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 24))(v56, v55);
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 40))(v57, v55);
      v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 48))(v58, v55);
    }
  }
  v10 = *((_QWORD *)&v65 + 1);
  v9 = (char *)v65;
  v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v13 = (__int128 *)v65;
  while (1)
  {
    if ((unint64_t)v13 < *((_QWORD *)&v65 + 1) || (v11 & 1) != 0)
    {
      v14 = (unint64_t)v13 >= *((_QWORD *)&v65 + 1)
          ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
          : v13;
      v15 = *(_DWORD *)v14;
    }
    else
    {
      v15 = v12 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      v11 = 1;
      v12 = v15;
    }
    if ((v15 & 0x3F) != 0x10)
      break;
    v13 = (__int128 *)((char *)v13 + 24);
    *(_QWORD *)&v65 = v13;
    v9 += 24;
  }
  if ((unint64_t)v13 >= *((_QWORD *)&v65 + 1))
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v16 = v13;
  if (((unint64_t)v13 < *((_QWORD *)&v65 + 1)) | v11 & 1)
  {
    v17 = ((unint64_t)v13 >= *((_QWORD *)&v65 + 1)) | v11;
  }
  else
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12 & 0xFF000000 | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v17 = 1;
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v18 = *(_DWORD *)v16;
  if ((*(_DWORD *)v16 & 0x3F) != 0)
  {
    if ((*(_DWORD *)v16 & 0x3F) != 1 || *((_DWORD *)v16 + 1) != 5)
      goto LABEL_35;
    v19 = *((_QWORD *)v16 + 1);
    if ((v18 & 0x400000) != 0)
    {
      if ((*(_BYTE *)v19 & 0xDF) != 0x4C
        || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x59
        || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x45)
      {
        goto LABEL_35;
      }
      v20 = *(unsigned __int8 *)(v19 + 4);
    }
    else
    {
      if ((*(_WORD *)v19 & 0xFFDF) != 0x4C
        || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x59
        || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x45)
      {
        goto LABEL_35;
      }
      v20 = *(unsigned __int16 *)(v19 + 8);
    }
    if ((v20 & 0xFFFFFFDF) == 0x52)
    {
      v71 = v65;
      v69 = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v65, v7);
      v70 = v21;
      WebCore::consumeCascadeLayerName((uint64_t)&v66, (__int128 **)&v69, 0);
      if (v68)
      {
        if (v69 == (WTF::StringImpl *)v70)
        {
          v61 = v66;
          v62 = v67;
          v63 = 1;
        }
        else
        {
          v65 = v71;
          LOBYTE(v61) = 0;
          v63 = 0;
          v22 = v66;
          if (HIDWORD(v67))
          {
            v45 = 8 * HIDWORD(v67);
            v46 = v66;
            v59 = v66;
            do
            {
              v47 = *(WTF::StringImpl **)v46;
              *(_QWORD *)v46 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v7);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v46 = (WTF::StringImpl *)((char *)v46 + 8);
              v45 -= 8;
              v22 = v59;
            }
            while (v45);
          }
          if (v22)
            WTF::fastFree(v22, v7);
        }
      }
      else
      {
        v65 = v71;
        LOBYTE(v61) = 0;
        v63 = 0;
      }
      v10 = *((_QWORD *)&v65 + 1);
      v9 = (char *)v65;
      v13 = (__int128 *)v65;
      goto LABEL_36;
    }
LABEL_35:
    LOBYTE(v61) = 0;
    v63 = 0;
    goto LABEL_36;
  }
  if (*((_DWORD *)v16 + 1) != 5)
    goto LABEL_35;
  v39 = *((_QWORD *)v16 + 1);
  if ((v18 & 0x400000) != 0)
  {
    if ((*(_BYTE *)v39 & 0xDF) != 0x4C
      || (*(_BYTE *)(v39 + 1) & 0xDF) != 0x41
      || (*(_BYTE *)(v39 + 2) & 0xDF) != 0x59
      || (*(_BYTE *)(v39 + 3) & 0xDF) != 0x45)
    {
      goto LABEL_35;
    }
    v40 = *(unsigned __int8 *)(v39 + 4);
  }
  else
  {
    if ((*(_WORD *)v39 & 0xFFDF) != 0x4C
      || (*(_WORD *)(v39 + 2) & 0xFFDF) != 0x41
      || (*(_WORD *)(v39 + 4) & 0xFFDF) != 0x59
      || (*(_WORD *)(v39 + 6) & 0xFFDF) != 0x45)
    {
      goto LABEL_35;
    }
    v40 = *(unsigned __int16 *)(v39 + 8);
  }
  if ((v40 & 0xFFFFFFDF) != 0x52)
    goto LABEL_35;
  if (v13 == *((__int128 **)&v65 + 1))
  {
    v41 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v17 & 1) == 0)
    {
      v41 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v41;
    }
    v13 = (__int128 *)*((_QWORD *)&v65 + 1);
    v17 = 1;
  }
  else
  {
    v13 = (__int128 *)((char *)v13 + 24);
    *(_QWORD *)&v65 = v13;
    v41 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v9 += 24;
  }
  while (1)
  {
    if ((unint64_t)v13 < *((_QWORD *)&v65 + 1) || (v17 & 1) != 0)
    {
      v42 = (unint64_t)v13 >= *((_QWORD *)&v65 + 1)
          ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
          : v13;
      v43 = *(_DWORD *)v42;
    }
    else
    {
      v43 = v41 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
      v17 = 1;
      v41 = v43;
    }
    if ((v43 & 0x3F) != 0x10)
      break;
    v9 = (char *)v13 + 24;
    *(_QWORD *)&v65 = (char *)v13 + 24;
    v13 = (__int128 *)((char *)v13 + 24);
  }
  v61 = 0;
  v62 = 0;
  v63 = 1;
LABEL_36:
  if ((unint64_t)v13 >= v10)
  {
    v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v23 = *(_DWORD *)v13;
  if ((*(_DWORD *)v13 & 0x3F) != 1 || *((_DWORD *)v13 + 1) != 8)
    goto LABEL_39;
  v33 = *((_QWORD *)v13 + 1);
  if ((v23 & 0x400000) != 0)
  {
    if ((*(_BYTE *)v33 & 0xDF) != 0x53
      || (*(_BYTE *)(v33 + 1) & 0xDF) != 0x55
      || (*(_BYTE *)(v33 + 2) & 0xDF) != 0x50
      || (*(_BYTE *)(v33 + 3) & 0xDF) != 0x50
      || (*(_BYTE *)(v33 + 4) & 0xDF) != 0x4F
      || (*(_BYTE *)(v33 + 5) & 0xDF) != 0x52
      || (*(_BYTE *)(v33 + 6) & 0xDF) != 0x54)
    {
      goto LABEL_39;
    }
    v34 = *(unsigned __int8 *)(v33 + 7);
  }
  else
  {
    if ((*(_WORD *)v33 & 0xFFDF) != 0x53
      || (*(_WORD *)(v33 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v33 + 4) & 0xFFDF) != 0x50
      || (*(_WORD *)(v33 + 6) & 0xFFDF) != 0x50
      || (*(_WORD *)(v33 + 8) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v33 + 10) & 0xFFDF) != 0x52
      || (*(_WORD *)(v33 + 12) & 0xFFDF) != 0x54)
    {
      goto LABEL_39;
    }
    v34 = *(unsigned __int16 *)(v33 + 14);
  }
  if ((v34 & 0xFFFFFFDF) != 0x53)
  {
LABEL_39:
    v66 = 0;
    LOBYTE(v67) = 1;
    v68 = 1;
LABEL_40:
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(_WORD *)(v24 + 51);
    v60[0] = (v25 & 8) != 0;
    v60[1] = (v25 & 0x2000) != 0;
    v60[2] = *(_BYTE *)(v24 + 48);
    *(_QWORD *)&v71 = v9;
    *((_QWORD *)&v71 + 1) = v10;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList((const WebCore::CSSParserToken **)&v71, (WebCore::CSSParserTokenRange *)v60, (uint64_t)&v69);
    v26 = WTF::fastMalloc((WTF *)0x80);
    *a1 = WebCore::StyleRuleImport::StyleRuleImport(v26, (_DWORD **)&v64, (uint64_t *)&v69, (uint64_t *)&v61, (uint64_t *)&v66);
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v27);
    if (v68 && v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v28);
      else
        *(_DWORD *)v66 -= 2;
    }
    goto LABEL_44;
  }
  v35 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v65, v7);
  *(_QWORD *)&v71 = v35;
  *((_QWORD *)&v71 + 1) = v36;
  if (*(_DWORD *)(a2 + 8))
  {
    LOBYTE(v37) = 1;
  }
  else if (*(_BYTE *)a2 || *(_DWORD *)(a2 + 4))
  {
    v37 = (*(unsigned __int16 *)(*(_QWORD *)(a2 + 64) + 51) >> 9) & 1;
  }
  else
  {
    LOBYTE(v37) = 0;
  }
  v38 = WebCore::CSSSupportsParser::supportsCondition(v35, v36, a2, 1, v37);
  if (v38 != 2)
  {
    v44 = v38;
    WebCore::CSSParserTokenRange::serialize((char **)&v71, 0, &v69);
    v66 = v69;
    LOBYTE(v67) = v44 == 1;
    v68 = 1;
    v10 = *((_QWORD *)&v65 + 1);
    v9 = (char *)v65;
    goto LABEL_40;
  }
  *a1 = 0;
LABEL_44:
  if (v63)
  {
    v29 = v61;
    if (HIDWORD(v62))
    {
      v30 = 8 * HIDWORD(v62);
      v31 = v61;
      do
      {
        v32 = *(WTF::StringImpl **)v31;
        *(_QWORD *)v31 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v28);
          else
            *(_DWORD *)v32 -= 2;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v30 -= 8;
      }
      while (v30);
    }
    if (v29)
      WTF::fastFree(v29, v28);
  }
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSParserImpl::consumeLayerRule(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t result;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  __int128 *v28;
  __int128 *v29;
  unsigned int v30;
  int v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  WTF *v72;
  uint64_t v73;
  char v74;
  WTF *v75;
  uint64_t v76;
  __int128 *v77;
  __int128 *v78;

  v77 = a3;
  v78 = a4;
  if (*(_BYTE *)(a5 + 16))
  {
    result = WebCore::consumeCascadeLayerName((uint64_t)&v72, &v77, 1);
    if (!v74)
    {
      *a1 = 0;
      return result;
    }
    if (v77 != v78)
    {
      *a1 = 0;
      v12 = v72;
      if (HIDWORD(v73))
      {
        v48 = 8 * HIDWORD(v73);
        v49 = v72;
        do
        {
          result = *(_QWORD *)v49;
          *(_QWORD *)v49 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            else
              *(_DWORD *)result -= 2;
          }
          v49 = (WTF *)((char *)v49 + 8);
          v48 -= 8;
        }
        while (v48);
      }
      if (v12)
      {
        v13 = v12;
        return WTF::fastFree(v13, v11);
      }
      return result;
    }
    v40 = *(_QWORD *)(a2 + 88);
    if (v40)
    {
      v50 = *(_QWORD *)(v40 + 8);
      if (v50)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *(_QWORD *)(v50 + 32)) >> 3) >= *(unsigned int *)(v50 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587D164);
        }
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v50 + 8) + 16))(*(_QWORD *)(v50 + 8), 16, *(unsigned int *)(*(_QWORD *)(v50 + 16) - 0x5555555555555554 * (((uint64_t)a3 - *(_QWORD *)(v50 + 32)) >> 3)));
        v51 = *(_QWORD *)(a2 + 88);
        if (v51)
        {
          v51 = *(_QWORD *)(v51 + 8);
          v52 = v51 + 8;
        }
        else
        {
          v52 = 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - *(_QWORD *)(v51 + 32)) >> 3) >= *(unsigned int *)(v51 + 28))
        {
          __break(0xC471u);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v52 + 24))(*(_QWORD *)v52, *(unsigned int *)(*(_QWORD *)(v51 + 16) - 0x5555555555555554* (((uint64_t)a4 - *(_QWORD *)(v51 + 32)) >> 3)));
          v65 = *(_QWORD *)(a2 + 88);
          if (v65)
          {
            v65 = *(_QWORD *)(v65 + 8);
            v66 = v65 + 8;
          }
          else
          {
            v66 = 8;
          }
          if (*(_BYTE *)(a5 + 16))
          {
            v67 = *(_QWORD *)v66;
            v68 = *(_QWORD *)(v65 + 32);
            if (*(_QWORD *)a5 == v68)
            {
              v70 = 0;
            }
            else
            {
              v69 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)a5 - v68) >> 3) - 1;
              if (v69 >= *(unsigned int *)(v65 + 28))
              {
LABEL_121:
                __break(0xC471u);
                JUMPOUT(0x19587D154);
              }
              v70 = *(unsigned int *)(*(_QWORD *)(v65 + 16) + 4 * v69);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 40))(v67, v70);
            goto LABEL_61;
          }
        }
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
    }
LABEL_61:
    if (*(_BYTE *)(a5 + 16))
    {
      WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)&v75, a2, *(__int128 **)a5, *(__int128 **)(a5 + 8));
      v41 = *(_QWORD *)(a2 + 88);
      if (!v41 || (v53 = *(_QWORD *)(v41 + 8)) == 0)
      {
LABEL_63:
        result = WTF::fastMalloc((WTF *)0x30);
        *(_DWORD *)result = 1;
        *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 0x10;
        *(_QWORD *)(result + 8) = v75;
        *(_QWORD *)(result + 16) = v76;
        *(_QWORD *)(result + 24) = v72;
        *(_QWORD *)(result + 32) = v73;
        *(_DWORD *)(result + 40) = 0;
        *a1 = result;
        return result;
      }
      if (*(_BYTE *)(a5 + 16))
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)(v53 + 32)) >> 3) >= *(unsigned int *)(v53 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587D16CLL);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v53 + 8) + 48))(*(_QWORD *)(v53 + 8), *(unsigned int *)(*(_QWORD *)(v53 + 16)- 0x5555555555555554 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)(v53 + 32)) >> 3)));
        goto LABEL_63;
      }
    }
    goto LABEL_118;
  }
  v14 = 0;
  v15 = 0;
  v75 = 0;
  v76 = 0;
  do
  {
    while (1)
    {
      result = WebCore::consumeCascadeLayerName((uint64_t)&v72, &v77, 0);
      if (!v74)
      {
        *a1 = 0;
LABEL_65:
        v38 = v75;
        if (v15)
        {
          v42 = (WTF *)((char *)v75 + 16 * v15);
          v43 = v75;
          do
          {
            v44 = *((unsigned int *)v43 + 3);
            if ((_DWORD)v44)
            {
              v45 = *(WTF::StringImpl ***)v43;
              v46 = 8 * v44;
              do
              {
                v47 = *v45;
                *v45 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, v11);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                ++v45;
                v46 -= 8;
              }
              while (v46);
            }
            result = *(_QWORD *)v43;
            if (*(_QWORD *)v43)
            {
              *(_QWORD *)v43 = 0;
              *((_DWORD *)v43 + 2) = 0;
              result = WTF::fastFree((WTF *)result, v11);
            }
            v43 = (WTF *)((char *)v43 + 16);
          }
          while (v43 != v42);
        }
        goto LABEL_79;
      }
      if (v15 == (_DWORD)v76)
      {
        result = WTF::Vector<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v75, v15 + 1, (unint64_t)&v72);
        v14 = v75;
        v16 = (uint64_t)v75 + 16 * HIDWORD(v76);
        v17 = *(unsigned int *)(result + 12);
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 12) = v17;
        if ((_DWORD)v17)
        {
          if (v17 >> 29)
            goto LABEL_121;
          v18 = result;
          result = WTF::fastMalloc((WTF *)(8 * v17));
          *(_DWORD *)(v16 + 8) = v17;
          *(_QWORD *)v16 = result;
          v19 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v19)
          {
            v20 = *(_DWORD ***)v18;
            v21 = 8 * v19;
            do
            {
              v22 = *v20;
              if (*v20)
                *v22 += 2;
              *(_QWORD *)result = v22;
              result += 8;
              ++v20;
              v21 -= 8;
            }
            while (v21);
          }
        }
      }
      else
      {
        v23 = HIDWORD(v73);
        v24 = (uint64_t)v14 + 16 * v15;
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_DWORD *)(v24 + 12) = v23;
        if ((_DWORD)v23)
        {
          if (v23 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19587D15CLL);
          }
          result = WTF::fastMalloc((WTF *)(8 * v23));
          *(_DWORD *)(v24 + 8) = v23;
          *(_QWORD *)v24 = result;
          if (HIDWORD(v73))
          {
            v34 = v72;
            v35 = 8 * HIDWORD(v73);
            do
            {
              v36 = *(_DWORD **)v34;
              if (*(_QWORD *)v34)
                *v36 += 2;
              *(_QWORD *)result = v36;
              result += 8;
              v34 = (WTF *)((char *)v34 + 8);
              v35 -= 8;
            }
            while (v35);
          }
        }
      }
      v15 = ++HIDWORD(v76);
      v25 = v77;
      if (v77 == v78)
      {
        v31 = 3;
      }
      else
      {
        v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v28 = v77;
        do
        {
          v28 = (__int128 *)((char *)v28 + 24);
          if (v28 < v78 || (v26 & 1) != 0)
          {
            if (v28 >= v78)
              v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            else
              v29 = v28;
            v30 = *(_DWORD *)v29;
          }
          else
          {
            v30 = v27 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
            v26 = 1;
            v27 = v30;
          }
        }
        while ((v30 & 0x3F) == 0x10);
        v77 = v28;
        if ((*(_DWORD *)v25 & 0x3F) == 0x15)
        {
          v31 = 0;
        }
        else
        {
          *a1 = 0;
          v31 = 1;
        }
      }
      if (!v74)
        goto LABEL_37;
      v32 = v72;
      if (HIDWORD(v73))
        break;
      if (v72)
        goto LABEL_47;
LABEL_37:
      if (v31)
        goto LABEL_56;
    }
    v33 = 8 * HIDWORD(v73);
    do
    {
      result = *(_QWORD *)v32;
      *(_QWORD *)v32 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
    v32 = v72;
    if (!v72)
      goto LABEL_37;
LABEL_47:
    v72 = 0;
    LODWORD(v73) = 0;
    result = WTF::fastFree(v32, v11);
  }
  while (!v31);
LABEL_56:
  if (v31 != 3)
    goto LABEL_65;
  v37 = *(_QWORD *)(a2 + 88);
  if (!v37)
    goto LABEL_58;
  v54 = *(_QWORD *)(v37 + 8);
  if (!v54)
    goto LABEL_58;
  v55 = *(_QWORD *)(v54 + 32);
  v56 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - v55) >> 3);
  v57 = *(unsigned int *)(v54 + 28);
  if (v56 >= v57)
  {
LABEL_119:
    __break(0xC471u);
    JUMPOUT(0x19587D17CLL);
  }
  v58 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - v55) >> 3);
  if (v58 >= v57)
  {
    __break(0xC471u);
    JUMPOUT(0x19587D184);
  }
  v59 = *(_QWORD *)(v54 + 8);
  v60 = *(_QWORD *)(v54 + 16);
  v61 = *(unsigned int *)(v60 + 4 * v56);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v59 + 16))(v59, 17, *(unsigned int *)(v60 + 4 * v58));
  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 24))(v62, v61);
  v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 40))(v63, v61);
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v61);
LABEL_58:
  result = WTF::fastMalloc((WTF *)0x30);
  v38 = 0;
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 0x11;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v39 = v75;
  v75 = 0;
  *(_QWORD *)(result + 24) = v39;
  *(_DWORD *)(result + 32) = v76;
  *(_DWORD *)(result + 36) = v15;
  *(_DWORD *)(result + 40) = 1;
  *a1 = result;
LABEL_79:
  if (v38)
  {
    v13 = v38;
    return WTF::fastFree(v13, v11);
  }
  return result;
}

uint64_t WebCore::CSSParserImpl::consumeSupportsRule(_QWORD *a1, uint64_t a2, char *a3, char *a4, __int128 *a5, __int128 *a6)
{
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33[2];
  char *v34[2];

  v34[0] = a3;
  v34[1] = a4;
  if (*(_DWORD *)(a2 + 8))
  {
    LOBYTE(v12) = 1;
  }
  else if (*(_BYTE *)a2 || *(_DWORD *)(a2 + 4))
  {
    v12 = (*(unsigned __int16 *)(*(_QWORD *)(a2 + 64) + 51) >> 9) & 1;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  result = WebCore::CSSSupportsParser::supportsCondition((__int128 *)a3, (__int128 *)a4, a2, 0, v12);
  if ((_DWORD)result == 2)
  {
    *a1 = 0;
    return result;
  }
  v14 = result;
  v15 = *(_QWORD *)(a2 + 88);
  if (v15)
  {
    v20 = *(_QWORD *)(v15 + 8);
    if (v20)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a3[-*(_QWORD *)(v20 + 32)] >> 3) < *(unsigned int *)(v20 + 28))
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v20 + 8) + 16))(*(_QWORD *)(v20 + 8), 12, *(unsigned int *)(*(_QWORD *)(v20 + 16) - 0x5555555555555554 * ((uint64_t)&a3[-*(_QWORD *)(v20 + 32)] >> 3)));
        v21 = *(_QWORD *)(a2 + 88);
        if (v21)
        {
          v21 = *(_QWORD *)(v21 + 8);
          v22 = v21 + 8;
        }
        else
        {
          v22 = 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-*(_QWORD *)(v21 + 32)] >> 3) >= *(unsigned int *)(v21 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587D448);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v22 + 24))(*(_QWORD *)v22, *(unsigned int *)(*(_QWORD *)(v21 + 16) - 0x5555555555555554 * ((uint64_t)&a4[-*(_QWORD *)(v21 + 32)] >> 3)));
        v23 = *(_QWORD *)(a2 + 88);
        if (v23)
        {
          v23 = *(_QWORD *)(v23 + 8);
          v24 = v23 + 8;
        }
        else
        {
          v24 = 8;
        }
        v25 = *(_QWORD *)v24;
        v26 = *(__int128 **)(v23 + 32);
        if (v26 == a5)
        {
          v28 = 0;
          goto LABEL_29;
        }
        v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)a5 - (char *)v26) >> 3) - 1;
        if (v27 < *(unsigned int *)(v23 + 28))
        {
          v28 = *(unsigned int *)(*(_QWORD *)(v23 + 16) + 4 * v27);
LABEL_29:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v28);
          goto LABEL_7;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19587D440);
    }
  }
LABEL_7:
  WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)v33, a2, a5, a6);
  v16 = *(_QWORD *)(a2 + 88);
  if (v16)
  {
    v29 = *(_QWORD *)(v16 + 8);
    if (v29)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a6 - *(_QWORD *)(v29 + 32)) >> 3) >= *(unsigned int *)(v29 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587D450);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v29 + 8) + 48))(*(_QWORD *)(v29 + 8), *(unsigned int *)(*(_QWORD *)(v29 + 16) - 0x5555555555555554 * (((uint64_t)a6 - *(_QWORD *)(v29 + 32)) >> 3)));
    }
  }
  WebCore::CSSParserTokenRange::serialize(v34, 0, &v30);
  WTF::String::trim();
  WebCore::StyleRuleSupports::create((_DWORD **)&v31, v14 != 0, v33, &v32);
  v18 = v31;
  *a1 = v32;
  v31 = 0;
  v32 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  return WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v17);
}

WTF *WebCore::CSSParserImpl::consumeFontFeatureValuesRule(uint64_t *a1, WebCore::CSSParserTokenRange *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  WTF *result;
  WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  int v17;
  char v18;
  unsigned int v19;
  __int128 *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  _DWORD **v27;
  WTF *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  _QWORD *v40;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  unint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  _DWORD *v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  __int128 *v62;
  __int128 *v63;
  _DWORD *v64;
  _DWORD *v65;
  __int128 *v66;
  __int128 *v67;

  v62 = a3;
  v63 = a4;
  result = WebCore::CSSPropertyParserHelpers::consumeFamilyNameListRaw(&v62, a2, &v59);
  v13 = v61;
  if (!v61 || v62 != v63)
  {
    *a1 = 0;
    goto LABEL_52;
  }
  v14 = *((_QWORD *)a2 + 11);
  if (v14)
  {
    v44 = *(_QWORD *)(v14 + 8);
    if (v44)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *(_QWORD *)(v44 + 32)) >> 3) >= *(unsigned int *)(v44 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587D9B0);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v44 + 8) + 16))(*(_QWORD *)(v44 + 8), 14, *(unsigned int *)(*(_QWORD *)(v44 + 16) - 0x5555555555555554 * (((uint64_t)a3 - *(_QWORD *)(v44 + 32)) >> 3)));
      v45 = *((_QWORD *)a2 + 11);
      if (v45)
      {
        v45 = *(_QWORD *)(v45 + 8);
        v46 = v45 + 8;
      }
      else
      {
        v46 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v63 - *(_QWORD *)(v45 + 32)) >> 3) >= *(unsigned int *)(v45 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587D9C0);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v46 + 24))(*(_QWORD *)v46, *(unsigned int *)(*(_QWORD *)(v45 + 16) - 0x5555555555555554 * (((uint64_t)v63 - *(_QWORD *)(v45 + 32)) >> 3)));
      v48 = *((_QWORD *)a2 + 11);
      if (v48)
      {
        v48 = *(_QWORD *)(v48 + 8);
        v49 = v48 + 8;
      }
      else
      {
        v49 = 8;
      }
      v50 = *(_QWORD *)v49;
      v51 = *(__int128 **)(v48 + 32);
      if (v51 == a5)
      {
        v53 = 0;
      }
      else
      {
        v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)a5 - (char *)v51) >> 3) - 1;
        if (v52 >= *(unsigned int *)(v48 + 28))
        {
          __break(0xC471u);
          goto LABEL_100;
        }
        v53 = *(unsigned int *)(*(_QWORD *)(v48 + 16) + 4 * v52);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 40))(v50, v53);
    }
  }
  v57 = 0;
  v58 = 0;
  v66 = a5;
  v67 = a6;
  if (a6 != a5)
  {
    v15 = (unint64_t)a6;
    while (1)
    {
      v16 = a5;
      if ((unint64_t)a5 >= v15)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v17 = *(_DWORD *)v16 & 0x3F;
      if (v17 == 2)
        break;
      if (v17 != 16)
      {
        WebCore::CSSParserImpl::consumeQualifiedRule((uint64_t)&v65, (uint64_t)a2);
LABEL_22:
        v23 = v65;
        if (v65)
        {
          v24 = (*v65)++;
          v64 = v23;
          v25 = HIDWORD(v58);
          if (HIDWORD(v58) == (_DWORD)v58)
          {
            v27 = (_DWORD **)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, HIDWORD(v58) + 1, (unint64_t)&v64);
            v25 = HIDWORD(v58);
            v28 = v57;
            v29 = *v27;
            *v29 = **v27 + 1;
            *((_QWORD *)v28 + v25) = v29;
          }
          else
          {
            v26 = v57;
            *v23 = v24 + 2;
            *((_QWORD *)v26 + v25) = v23;
          }
          HIDWORD(v58) = v25 + 1;
          v30 = v64;
          v64 = 0;
          if (v30)
          {
            if (*v30 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v30, v22);
            else
              --*v30;
          }
          if (*v23 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v23, v22);
          else
            --*v23;
        }
        goto LABEL_31;
      }
      v19 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if ((unint64_t)a5 < v15 || (v18 & 1) != 0)
        {
          v20 = (unint64_t)a5 >= v15 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : a5;
          v21 = *(_DWORD *)v20;
        }
        else
        {
          v21 = v19 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
          v18 = 1;
          v19 = v21;
        }
        if ((v21 & 0x3F) != 0x10)
          break;
        a5 = (__int128 *)((char *)a5 + 24);
        v66 = a5;
      }
LABEL_31:
      a5 = v66;
      v15 = (unint64_t)v67;
      if (v66 == v67)
        goto LABEL_37;
    }
    WebCore::CSSParserImpl::consumeAtRule(&v65, a2, &v66, 7);
    goto LABEL_22;
  }
LABEL_37:
  v31 = *((_QWORD *)a2 + 11);
  if (v31)
  {
    v47 = *(_QWORD *)(v31 + 8);
    if (v47)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a6 - *(_QWORD *)(v47 + 32)) >> 3) >= *(unsigned int *)(v47 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587D9B8);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v47 + 8) + 48))(*(_QWORD *)(v47 + 8), *(unsigned int *)(*(_QWORD *)(v47 + 16) - 0x5555555555555554 * (((uint64_t)a6 - *(_QWORD *)(v47 + 32)) >> 3)));
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v32 = off_1E339BAC8;
  *(_QWORD *)(v32 + 8) = 1;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  if (HIDWORD(v58))
  {
    v33 = v57;
    v34 = 8 * HIDWORD(v58);
    do
    {
      if (*(_QWORD *)v33)
        v35 = (*(_BYTE *)(*(_QWORD *)v33 + 4) & 0x1F) == 20;
      else
        v35 = 0;
      if (v35)
        WebCore::FontFeatureValues::updateOrInsertForType((WTF *)v32, *(_DWORD *)(*(_QWORD *)v33 + 8), *(_QWORD *)v33 + 16);
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v36 = 1;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v36 + 4) & 0xC0 | 0xE;
  v37 = v61;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  *(_DWORD *)(v36 + 20) = v37;
  if ((_DWORD)v37)
  {
    if (!(v37 >> 29))
    {
      v40 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v37));
      *(_DWORD *)(v36 + 16) = v37;
      *(_QWORD *)(v36 + 8) = v40;
      if (v61)
      {
        v41 = v59;
        v42 = 8 * v61;
        do
        {
          v43 = *(_DWORD **)v41;
          if (*(_QWORD *)v41)
            *v43 += 2;
          *v40++ = v43;
          v41 = (WTF *)((char *)v41 + 8);
          v42 -= 8;
        }
        while (v42);
      }
      goto LABEL_48;
    }
    __break(0xC471u);
LABEL_100:
    JUMPOUT(0x19587D9A8);
  }
LABEL_48:
  *(_QWORD *)(v36 + 24) = v32;
  *a1 = v36;
  if (HIDWORD(v58))
  {
    v54 = v57;
    v55 = 8 * HIDWORD(v58);
    do
    {
      v56 = *(_DWORD **)v54;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v56, v12);
        else
          --*v56;
      }
      v54 = (WTF *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
  }
  result = v57;
  if (v57)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    result = (WTF *)WTF::fastFree(result, v12);
  }
  v13 = v61;
LABEL_52:
  v38 = v59;
  if (!v13)
  {
    if (!v59)
      return result;
LABEL_63:
    v59 = 0;
    v60 = 0;
    return (WTF *)WTF::fastFree(v38, v12);
  }
  v39 = 8 * v13;
  do
  {
    result = *(WTF **)v38;
    *(_QWORD *)v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
    v38 = (WTF *)((char *)v38 + 8);
    v39 -= 8;
  }
  while (v39);
  v38 = v59;
  if (v59)
    goto LABEL_63;
  return result;
}

WTF::StringImpl *WebCore::CSSParserImpl::consumeFontFeatureValuesRuleBlock(WTF::StringImpl *result, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v7;
  __int128 *v9;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  const void **v16;
  unsigned int *v17;
  int *v18;
  int *v19;
  __int128 *v20;
  int v21;
  char v23;
  unsigned int v24;
  __int128 *v25;
  unsigned int v26;
  int v27;
  char v28;
  __int128 *v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  __int128 *v35;
  unsigned int v36;
  __int128 *v37;
  unsigned int v38;
  int v39;
  char v40;
  __int128 *v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  int v52;
  __int128 *v53;
  int v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  int v59;
  _DWORD *v60;
  unint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  unsigned __int16 *v66;
  unsigned int v67;
  void *v68;
  WTF *v69;
  unint64_t v70;
  _DWORD *v71;
  unsigned int v72;
  char *v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  char *v77;
  const void **v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  WTF *v84;
  WTF::StringImpl *v85;
  __int128 *v86;
  __int128 *v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  char *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  unsigned int *v107;
  const void **v108;
  __int128 v109;
  unsigned int v110;
  unsigned int v111;
  char v112;
  WTF *v113;
  uint64_t v114;
  _BYTE v115[12];
  uint64_t v116;
  void *__src;
  uint64_t v118;
  __int128 *v119;
  __int128 *v120;
  uint64_t v121;
  unsigned __int16 *v122[2];

  v7 = result;
  if (a4 != a5 || (v9 = a6, a6 == a7))
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v12 = a2[11];
  if (v12)
  {
    v94 = *(_QWORD *)(v12 + 8);
    if (v94)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((a4 - *(_QWORD *)(v94 + 32)) >> 3) >= *(unsigned int *)(v94 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587E490);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v94 + 8) + 16))(*(_QWORD *)(v94 + 8), 20, *(unsigned int *)(*(_QWORD *)(v94 + 16) - 0x5555555555555554 * ((a4 - *(_QWORD *)(v94 + 32)) >> 3)));
      v96 = a2[11];
      if (v96)
      {
        v96 = *(_QWORD *)(v96 + 8);
        v97 = v96 + 8;
      }
      else
      {
        v97 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5 - *(_QWORD *)(v96 + 32)) >> 3) >= *(unsigned int *)(v96 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587E498);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v97 + 24))(*(_QWORD *)v97, *(unsigned int *)(*(_QWORD *)(v96 + 16) - 0x5555555555555554 * ((a5 - *(_QWORD *)(v96 + 32)) >> 3)));
      v98 = a2[11];
      if (v98)
      {
        v98 = *(_QWORD *)(v98 + 8);
        v99 = v98 + 8;
      }
      else
      {
        v99 = 8;
      }
      v100 = *(_QWORD *)v99;
      v101 = *(__int128 **)(v98 + 32);
      if (v101 == v9)
      {
        v103 = 0;
      }
      else
      {
        v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v101) >> 3) - 1;
        if (v102 >= *(unsigned int *)(v98 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587E4A8);
        }
        v103 = *(unsigned int *)(*(_QWORD *)(v98 + 16) + 4 * v102);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 40))(v100, v103);
      v104 = a2[11];
      if (v104)
      {
        v104 = *(_QWORD *)(v104 + 8);
        v105 = v104 + 8;
      }
      else
      {
        v105 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a7 - *(_QWORD *)(v104 + 32)) >> 3) >= *(unsigned int *)(v104 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19587E4A0);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v105 + 48))(*(_QWORD *)v105, *(unsigned int *)(*(_QWORD *)(v104 + 16) - 0x5555555555555554 * (((uint64_t)a7 - *(_QWORD *)(v104 + 32)) >> 3)));
    }
  }
  switch(a3)
  {
    case 16:
      v13 = 0x100000001;
      goto LABEL_13;
    case 17:
      LODWORD(v109) = 0;
      *(_QWORD *)((char *)&v109 + 4) = 0;
      break;
    case 18:
      v13 = 0x200000002;
      goto LABEL_13;
    case 19:
      v13 = 0x100000003;
      goto LABEL_13;
    case 20:
      v13 = 0x100000004;
      goto LABEL_13;
    case 21:
      v13 = 0x100000005;
LABEL_13:
      *(_QWORD *)&v109 = v13;
      BYTE8(v109) = 1;
      break;
    default:
      LODWORD(v109) = 0;
      BYTE4(v109) = 0;
      BYTE8(v109) = 0;
      break;
  }
  v14 = 0;
  v15 = 0;
  v114 = 0;
  *(_QWORD *)v115 = v109;
  *(_DWORD *)&v115[8] = DWORD2(v109);
  v113 = 0;
  v16 = (const void **)&v109 + 1;
  v17 = &v111;
  v18 = &dword_1ECE90000;
  v19 = &dword_1ECE90000;
  while (1)
  {
    v20 = v9;
    if (v9 >= a7)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v18[312] & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        *((_BYTE *)v18 + 1248) = 1;
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v21 = *(_DWORD *)v20 & 0x3F;
    if (!v21)
    {
      if (v9 >= a7)
        v34 = 1;
      else
        v34 = *((_BYTE *)v18 + 1248);
      if (v9 >= a7)
        v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v35 = v9;
      if (v9 >= a7 && (v18[312] & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v34 = 1;
        *((_BYTE *)v18 + 1248) = 1;
        v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      if (v9 == a7)
      {
LABEL_91:
        v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = a7;
        if ((v34 & 1) == 0)
        {
LABEL_149:
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          *((_BYTE *)v18 + 1248) = 1;
        }
      }
      else
      {
        v36 = v19[306];
        while (1)
        {
          if (v9 < a7 || (v34 & 1) != 0)
          {
            v37 = v9 >= a7 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v9;
            v38 = *(_DWORD *)v37;
          }
          else
          {
            v38 = v36 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
            v34 = 1;
            *((_BYTE *)v18 + 1248) = 1;
            v36 = v38;
          }
          if ((v38 & 0x3F) == 0x14)
            break;
          v39 = 0;
          v40 = v34;
          do
          {
            if (v9 == a7)
            {
              if ((v40 & 1) == 0)
              {
                v36 = v36 & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v36;
                *((_BYTE *)v18 + 1248) = 1;
                v34 = 1;
              }
              v9 = a7;
              v40 = 1;
              v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            else
            {
              v41 = v9;
              v9 = (__int128 *)((char *)v9 + 24);
            }
            v42 = *(_DWORD *)v41 >> 6;
            if (v42 == 2)
              v43 = -1;
            else
              v43 = 0;
            if (v42 == 1)
              v44 = 1;
            else
              v44 = v43;
            v39 += v44;
            if (v39)
              v45 = v9 >= a7;
            else
              v45 = 1;
          }
          while (!v45);
          if (v9 == a7)
            goto LABEL_91;
        }
        if (v9 >= a7)
          v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v46 = v9;
        if ((v34 & 1) == 0)
          goto LABEL_149;
      }
      if (v35 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v47 = a7;
      else
        v47 = v35;
      if (v46 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v48 = a7;
      else
        v48 = v46;
      v119 = v47;
      v120 = v48;
      if (v48 <= v47)
        v49 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v49 = v47;
      if ((*(_BYTE *)v49 & 0x3F) != 0)
        goto LABEL_188;
      if (v47 == v48)
      {
        v50 = v47;
        v47 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v50 = (__int128 *)((char *)v47 + 24);
        v119 = (__int128 *)((char *)v47 + 24);
      }
      if (v50 >= v48)
        v51 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v51 = v50;
      if ((*(_DWORD *)v51 & 0x3F) == 0x10)
      {
        do
        {
          v50 = (__int128 *)((char *)v50 + 24);
          if (v50 >= v48)
            v86 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v86 = v50;
        }
        while ((*(_DWORD *)v86 & 0x3F) == 0x10);
        v119 = v50;
      }
      v52 = *(_DWORD *)v47;
      if (v50 == v48)
      {
        LOBYTE(v54) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v53 = v48;
      }
      else
      {
        v53 = (__int128 *)((char *)v50 + 24);
        v119 = (__int128 *)((char *)v50 + 24);
        v54 = *(_DWORD *)v50;
      }
      if ((v54 & 0x3F) != 0x13)
        goto LABEL_188;
      if (v53 >= v48)
        v55 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v55 = v53;
      v107 = v17;
      v108 = v16;
      if ((*(_DWORD *)v55 & 0x3F) == 0x10)
      {
        do
        {
          v53 = (__int128 *)((char *)v53 + 24);
          if (v53 >= v48)
            v87 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v87 = v53;
        }
        while ((*(_DWORD *)v87 & 0x3F) == 0x10);
        v119 = v53;
      }
      __src = 0;
      v118 = 0;
      if (v53 == v48)
      {
LABEL_161:
        LOBYTE(v109) = 0;
        v112 = 0;
      }
      else
      {
        v56 = *(_QWORD *)&v115[4] & 0xFF00000000;
        v57 = *(unsigned int *)&v115[4];
        do
        {
          v121 = 0;
          v122[0] = 0;
          WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve((uint64_t)&v119, v122, (uint64_t)&v121, 0x10100000000, &v116);
          if (v121)
            WTF::fastFree((WTF *)(v121 - 16), a2);
          if (v122[0])
            WTF::fastFree((WTF *)(v122[0] - 8), a2);
          if (!v116)
          {
            LOBYTE(v109) = 0;
            v112 = 0;
            goto LABEL_166;
          }
          if ((*(_WORD *)(v116 + 4) & 0x7F) == 0x49)
          {
            v63 = *(_QWORD *)(v116 + 8);
            v122[0] = 0;
            v106 = WebCore::CSSCalcValue::doubleValue(v63, (uint64_t)v122);
            if (v122[0])
              WTF::fastFree((WTF *)(v122[0] - 8), a2);
            v58 = v106;
          }
          else
          {
            v58 = *(double *)(v116 + 8);
          }
          if (v58 >= 2147483650.0)
          {
            v59 = 0x7FFFFFFF;
          }
          else if (v58 <= -2147483650.0)
          {
            v59 = 0x80000000;
          }
          else
          {
            v59 = (int)v58;
          }
          LODWORD(v122[0]) = v59;
          if (HIDWORD(v118) == (_DWORD)v118)
          {
            v60 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, HIDWORD(v118) + 1, (unint64_t)v122);
            *((_DWORD *)__src + HIDWORD(v118)) = *v60;
          }
          else
          {
            *((_DWORD *)__src + HIDWORD(v118)) = v59;
          }
          v61 = ++HIDWORD(v118);
          if (v56 && v57 < v61)
          {
            LOBYTE(v109) = 0;
            v112 = 0;
            v64 = (WTF::StringImpl *)v116;
            v116 = 0;
            if (!v64)
              goto LABEL_166;
            v65 = *(_DWORD *)v64 - 2;
            if (*(_DWORD *)v64 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)a2);
              goto LABEL_166;
            }
            goto LABEL_165;
          }
          v62 = (_DWORD *)v116;
          v116 = 0;
          if (v62)
          {
            if (*v62 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, (WTF::StringImpl *)a2);
            else
              *v62 -= 2;
          }
        }
        while (v119 != v120);
        if (!HIDWORD(v118))
          goto LABEL_161;
        if ((v52 & 0x400000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        v66 = v122[0];
        v122[0] = 0;
        v67 = HIDWORD(v118);
        if (HIDWORD(v118))
        {
          if (HIDWORD(v118) >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x19587E454);
          }
          v68 = (void *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v118)));
          memcpy(v68, __src, 4 * HIDWORD(v118));
          v64 = (WTF::StringImpl *)v122[0];
        }
        else
        {
          v64 = 0;
          v68 = 0;
        }
        *(_QWORD *)&v109 = v66;
        *((_QWORD *)&v109 + 1) = v68;
        v110 = v67;
        v111 = v67;
        v112 = 1;
        v122[0] = 0;
        if (v64)
        {
          v65 = *(_DWORD *)v64 - 2;
          if (*(_DWORD *)v64 != 2)
          {
LABEL_165:
            *(_DWORD *)v64 = v65;
            goto LABEL_166;
          }
          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
        }
      }
LABEL_166:
      v69 = (WTF *)__src;
      if (__src)
      {
        __src = 0;
        LODWORD(v118) = 0;
        WTF::fastFree(v69, a2);
      }
      if (!v112)
        goto LABEL_187;
      if (v15 == (_DWORD)v114)
      {
        v70 = WTF::Vector<std::pair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v113, v15 + 1, (unint64_t)&v109);
        v71 = *(_DWORD **)v70;
        if (*(_QWORD *)v70)
          *v71 += 2;
        v72 = HIDWORD(v114);
        v14 = v113;
        *((_QWORD *)v113 + 3 * HIDWORD(v114)) = v71;
        v73 = (char *)v14 + 24 * v72;
        v76 = *(_DWORD *)(v70 + 20);
        v74 = (unsigned int *)(v70 + 20);
        v75 = v76;
        *((_QWORD *)v73 + 1) = 0;
        *((_QWORD *)v73 + 2) = 0;
        v77 = v73 + 8;
        *((_DWORD *)v77 + 3) = v76;
        if (!v76)
        {
          v19 = &dword_1ECE90000;
LABEL_181:
          v15 = ++HIDWORD(v114);
          if (v112)
          {
            v84 = (WTF *)*((_QWORD *)&v109 + 1);
            if (*((_QWORD *)&v109 + 1))
            {
              *((_QWORD *)&v109 + 1) = 0;
              v110 = 0;
              WTF::fastFree(v84, a2);
            }
            v85 = (WTF::StringImpl *)v109;
            *(_QWORD *)&v109 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v85 -= 2;
            }
          }
LABEL_187:
          v18 = &dword_1ECE90000;
          v17 = v107;
          v16 = v108;
          goto LABEL_188;
        }
        if (v75 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x19587E45CLL);
        }
        v78 = (const void **)(v70 + 8);
        v79 = (void *)WTF::fastMalloc((WTF *)(4 * v75));
        *((_DWORD *)v14 + 6 * v72 + 4) = v75;
        *(_QWORD *)v77 = v79;
        v19 = &dword_1ECE90000;
      }
      else
      {
        v80 = v109;
        if ((_QWORD)v109)
          *(_DWORD *)v109 += 2;
        *((_QWORD *)v14 + 3 * v15) = v80;
        v81 = (char *)v14 + 24 * v15;
        v82 = v111;
        *((_QWORD *)v81 + 1) = 0;
        *((_QWORD *)v81 + 2) = 0;
        v83 = v81 + 8;
        *((_DWORD *)v83 + 3) = v82;
        if (!(_DWORD)v82)
          goto LABEL_181;
        if (v82 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x19587E464);
        }
        v79 = (void *)WTF::fastMalloc((WTF *)(4 * v82));
        *((_DWORD *)v14 + 6 * v15 + 4) = v82;
        *(_QWORD *)v83 = v79;
        v74 = v107;
        v78 = v108;
      }
      memcpy(v79, *v78, 4 * *v74);
      goto LABEL_181;
    }
    if (v21 != 16 && v21 != 20)
    {
      if (v9 == a7)
        goto LABEL_209;
      v23 = *((_BYTE *)v18 + 1248);
      v24 = v19[306];
      while (1)
      {
        if (v9 < a7 || (v23 & 1) != 0)
        {
          v25 = v9 >= a7 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v9;
          v26 = *(_DWORD *)v25;
        }
        else
        {
          v26 = v24 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v26;
          v23 = 1;
          *((_BYTE *)v18 + 1248) = 1;
          v24 = v26;
        }
        if ((v26 & 0x3F) == 0x14)
          goto LABEL_188;
        v27 = 0;
        v28 = v23;
        do
        {
          if (v9 == a7)
          {
            if ((v28 & 1) == 0)
            {
              v24 = v24 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v24;
              *((_BYTE *)v18 + 1248) = 1;
              v23 = 1;
            }
            v9 = a7;
            v28 = 1;
            v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v29 = v9;
            v9 = (__int128 *)((char *)v9 + 24);
          }
          v30 = *(_DWORD *)v29 >> 6;
          if (v30 == 2)
            v31 = -1;
          else
            v31 = 0;
          if (v30 == 1)
            v32 = 1;
          else
            v32 = v31;
          v27 += v32;
          if (v27)
            v33 = v9 >= a7;
          else
            v33 = 1;
        }
        while (!v33);
        if (v9 == a7)
          goto LABEL_209;
      }
    }
    if (v9 == a7)
      break;
    v9 = (__int128 *)((char *)v9 + 24);
LABEL_188:
    if (v9 == a7)
      goto LABEL_209;
  }
  if ((v18[312] & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    *((_BYTE *)v18 + 1248) = 1;
  }
LABEL_209:
  v88 = *(_DWORD *)v115;
  v89 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF::StringImpl *)WebCore::StyleRuleFontFeatureValuesBlock::StyleRuleFontFeatureValuesBlock(v89, v88, (unsigned int *)&v113);
  *v7 = result;
  if (v15)
  {
    v91 = 24 * v15;
    v92 = (char *)v14 + 8;
    do
    {
      v93 = *(WTF **)v92;
      if (*(_QWORD *)v92)
      {
        *(_QWORD *)v92 = 0;
        *((_DWORD *)v92 + 2) = 0;
        WTF::fastFree(v93, v90);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v92 - 1);
      *((_QWORD *)v92 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v90);
        else
          *(_DWORD *)result -= 2;
      }
      v92 += 24;
      v91 -= 24;
    }
    while (v91);
    v14 = v113;
  }
  if (v14)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v14, v90);
  }
  return result;
}

_DWORD *WebCore::CSSParserImpl::consumeFontPaletteValuesRule(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *result;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  void *v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  unsigned __int8 *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  void *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  double v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF *v96;
  WTF::StringImpl **v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  unsigned int *v102;
  WTF *v103;
  uint64_t v104;
  _DWORD **v105;
  _DWORD *v106;
  WTF *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  _DWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  double v131;
  double v132;
  uint64_t *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  WTF *v138;
  uint64_t v139;
  _BYTE v140[4096];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  WTF::StringImpl **v145;
  WTF::StringImpl **v146;
  WTF **v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  _QWORD v150[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (uint64_t *)v2;
  v142 = v10;
  v143 = v11;
  WebCore::CSSPropertyParserHelpers::consumeDashedIdent((WebCore::CSSPropertyParserHelpers *)&v142, 0, &v141);
  result = (_DWORD *)v141;
  if (!v141 || v142 != v143)
  {
    *v9 = 0;
    if (!result)
      return result;
    goto LABEL_190;
  }
  v133 = v9;
  v14 = *(_QWORD *)(v8 + 88);
  if (v14)
  {
    v120 = *(_QWORD *)(v14 + 8);
    if (v120)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v142 - *(_QWORD *)(v120 + 32)) >> 3) >= *(unsigned int *)(v120 + 28))
      {
        __break(0xC471u);
        goto LABEL_251;
      }
      v121 = *(unsigned int *)(*(_QWORD *)(v120 + 16) - 0x5555555555555554 * ((v142 - *(_QWORD *)(v120 + 32)) >> 3));
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v120 + 8) + 16))(*(_QWORD *)(v120 + 8), 19, v121);
      v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 24))(v122, v121);
      v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v123 + 40))(v123, v121);
      v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 48))(v124, v121);
    }
  }
  v148 = v6;
  v149 = v4;
  LOBYTE(v134) = 19;
  v138 = (WTF *)v140;
  v139 = 256;
  v144 = (WTF *)v8;
  v145 = &v148;
  v146 = &v134;
  v147 = &v138;
  WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v8, (uint64_t)&v144);
  WebCore::createStyleProperties((uint64_t)&v137, (uint64_t)&v138);
  v144 = 0;
  v145 = 0;
  WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v137, 8, v150);
  v16 = (_DWORD *)v150[0];
  if (v150[0])
  {
    v17 = (*(unsigned __int16 *)(v150[0] + 4) | (*(unsigned __int8 *)(v150[0] + 6) << 16)) & 0x3F800;
    if (v17 == 120832)
      v18 = v150[0];
    else
      v18 = 0;
    if (v18)
    {
      *(_DWORD *)v18 += 2;
    }
    else if (v17 != 120832)
    {
      if (!v17 && (*(_WORD *)(v150[0] + 4) & 0x7F) == 0x4D)
      {
        v43 = *(WTF::StringImpl **)(v150[0] + 8);
        if (v43)
        {
          *(_DWORD *)v43 += 2;
          v134 = v43;
          if ((*((_BYTE *)v43 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v44 = v134;
            v43 = v148;
            v148 = 0;
            v134 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v15);
              else
                *(_DWORD *)v44 -= 2;
            }
          }
        }
        v148 = v43;
        v45 = HIDWORD(v145);
        if (HIDWORD(v145) == (_DWORD)v145)
        {
          v126 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, HIDWORD(v145) + 1, (unint64_t)&v148);
          v127 = HIDWORD(v145);
          v128 = v144;
          v129 = *v126;
          *v126 = 0;
          *((_QWORD *)v128 + v127) = v129;
          v130 = v148;
          HIDWORD(v145) = v127 + 1;
          v148 = 0;
          if (v130)
          {
            if (*(_DWORD *)v130 == 2)
              WTF::StringImpl::destroy(v130, v15);
            else
              *(_DWORD *)v130 -= 2;
          }
        }
        else
        {
          *((_QWORD *)v144 + HIDWORD(v145)) = v43;
          HIDWORD(v145) = v45 + 1;
        }
      }
      if (*v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v15);
      else
        *v16 -= 2;
      v150[0] = 0;
      goto LABEL_41;
    }
    v19 = v16[2];
    if (v19)
    {
      v20 = 0;
      v21 = 0;
      while (1)
      {
        if (v20 > 3)
        {
          if (v16[2] <= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x19587F13CLL);
          }
          v22 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 8 * (v21 - 4));
        }
        else
        {
          v22 = (uint64_t *)(v18 + 16 + 8 * v21);
        }
        v23 = *v22;
        if (((*(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16)) & 0x3F800) != 0)
          break;
        if ((*(_WORD *)(v23 + 4) & 0x7F) == 0x4D)
        {
          v24 = *(WTF::StringImpl **)(v23 + 8);
          if (v24)
          {
            *(_DWORD *)v24 += 2;
            v134 = v24;
            if ((*((_BYTE *)v24 + 16) & 0x10) == 0)
            {
              WTF::AtomStringImpl::addSlowCase();
              v25 = v134;
              v24 = v148;
              v148 = 0;
              v134 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v15);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
          }
          v148 = v24;
          v26 = HIDWORD(v145);
          if (HIDWORD(v145) == (_DWORD)v145)
          {
            v27 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, HIDWORD(v145) + 1, (unint64_t)&v148);
            v28 = HIDWORD(v145);
            v29 = v144;
            v30 = *v27;
            *v27 = 0;
            *((_QWORD *)v29 + v28) = v30;
            v31 = v148;
            HIDWORD(v145) = v28 + 1;
            v148 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v15);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v144 + HIDWORD(v145)) = v24;
            HIDWORD(v145) = v26 + 1;
          }
        }
        v20 = v21 + 1;
        v21 = (v21 + 1);
        if (v19 == v20)
          goto LABEL_34;
      }
      __break(0xC471u);
LABEL_251:
      JUMPOUT(0x19587E894);
    }
LABEL_34:
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v15);
    else
      *v16 -= 2;
  }
LABEL_41:
  WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v137, 67, &v134);
  v33 = v134;
  if (!v134)
  {
    v40 = 0;
    v39 = 0;
    goto LABEL_83;
  }
  v34 = *((unsigned __int16 *)v134 + 2) | (*((unsigned __int8 *)v134 + 6) << 16);
  if ((v34 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19587E9A4);
  }
  v35 = *((_WORD *)v134 + 2) & 0x7F;
  if ((v35 - 63) > 0x11 || ((1 << ((*((_WORD *)v134 + 2) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v35 == 73)
    {
      v41 = *(unsigned __int8 **)(*((_QWORD *)v134 + 1) + 8);
      v42 = v41[12];
      if (v42 != 1 && (v42 - 5) > 3)
        goto LABEL_75;
      v35 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v41 + 72))(v41);
      LOWORD(v34) = *((_WORD *)v33 + 2);
    }
    if (v35 == 2)
    {
      if ((v34 & 0x7F) == 0x49)
      {
        v125 = *((_QWORD *)v33 + 1);
        v148 = 0;
        v132 = WebCore::CSSCalcValue::doubleValue(v125, (uint64_t)&v148);
        if (v148)
          WTF::fastFree((WTF::StringImpl *)((char *)v148 - 16), v32);
        v37 = v132;
      }
      else
      {
        v37 = *((double *)v33 + 1);
      }
      if (v37 >= 4294967300.0)
      {
        v38 = 0xFFFFFFFFLL;
      }
      else if (v37 <= 0.0)
      {
        v38 = 0;
      }
      else
      {
        v38 = v37;
      }
      v39 = (v38 << 32) | 2;
      goto LABEL_56;
    }
  }
LABEL_75:
  if ((v34 & 0x7F) != 0x50)
  {
    v39 = 0;
    v40 = 0;
    goto LABEL_80;
  }
  v46 = *((unsigned __int16 *)v33 + 4);
  if (v46 == 963)
  {
    v39 = 0;
LABEL_56:
    v40 = 1;
    goto LABEL_80;
  }
  v39 = v46 == 964;
  v40 = v46 == 964;
LABEL_80:
  if (*(_DWORD *)v33 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, (WTF::StringImpl *)v32);
  else
    *(_DWORD *)v33 -= 2;
LABEL_83:
  v148 = 0;
  v149 = 0;
  WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v137, 194, v150);
  v48 = v150[0];
  if (!v150[0])
    goto LABEL_160;
  if (((*(unsigned __int16 *)(v150[0] + 4) | (*(unsigned __int8 *)(v150[0] + 6) << 16)) & 0x3F800) != 0x1D800)
  {
    __break(0xC471u);
    JUMPOUT(0x19587F0FCLL);
  }
  v49 = *(_DWORD *)(v150[0] + 8);
  if (v49)
  {
    v50 = 0;
    v51 = 0;
    while (1)
    {
      if (v50 > 3)
      {
        if (*(_DWORD *)(v48 + 8) <= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x19587F15CLL);
        }
        v52 = *(_QWORD *)(v48 + 48) + 8 * (v51 - 4);
      }
      else
      {
        v52 = v48 + 16 + 8 * v51;
      }
      v53 = *(_QWORD *)v52;
      if (((*(unsigned __int16 *)(*(_QWORD *)v52 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v52 + 6) << 16)) & 0x3F800) != 0x11800)
      {
        __break(0xC471u);
        JUMPOUT(0x19587F054);
      }
      v54 = *(_QWORD *)(v53 + 8);
      v55 = *(_WORD *)(v54 + 4) & 0x7F;
      if ((v55 - 63) <= 0x11 && ((1 << (v55 - 63)) & 0x34001) != 0)
        goto LABEL_138;
      if (v55 == 73)
      {
        v68 = *(unsigned __int8 **)(*(_QWORD *)(v54 + 8) + 8);
        v69 = v68[12];
        if (v69 != 1 && (v69 - 5) > 3)
          goto LABEL_138;
        v55 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v68 + 72))(v68);
      }
      if (v55 == 2)
      {
        v57 = *(_QWORD *)(v53 + 8);
        if ((*(_WORD *)(v57 + 4) & 0x7F) == 0x49)
        {
          v83 = *(_QWORD *)(v57 + 8);
          v134 = 0;
          v131 = WebCore::CSSCalcValue::doubleValue(v83, (uint64_t)&v134);
          if (v134)
            WTF::fastFree((WTF::StringImpl *)((char *)v134 - 16), v47);
          v58 = v131;
        }
        else
        {
          v58 = *(double *)(v57 + 8);
        }
        v59 = v58;
        if (v58 <= 0.0)
          v59 = 0;
        if (v58 < 4294967300.0)
          v60 = v59;
        else
          v60 = -1;
        v61 = *(_QWORD *)(v53 + 16);
        v62 = *(_WORD *)(v61 + 4);
        v63 = v62 & 0x7F;
        if (v63 != 24)
        {
          if (v63 != 78)
          {
            if (v63 != 80)
            {
              v64 = 0;
              goto LABEL_114;
            }
            v64 = *(unsigned __int16 *)(v61 + 8);
            if (v64 - 127 < 0x12 || v64 >= 0x3FA && v64 < 0x47C)
            {
LABEL_123:
              if ((v62 & 0x7F) == 0x50)
                v70 = *(unsigned __int16 *)(v61 + 8);
              else
                v70 = 0;
              WebCore::StyleColor::colorFromAbsoluteKeyword(v70, &v136);
              goto LABEL_127;
            }
LABEL_114:
            if (v64 - 125 <= 1)
              goto LABEL_123;
          }
          v136 = 0;
          goto LABEL_127;
        }
        v65 = *(_QWORD *)(v61 + 8);
        v136 = v65;
        if ((v65 & 0x8000000000000) != 0)
        {
          v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 + 1, v66));
        }
LABEL_127:
        v71 = v136;
        if ((v136 & 0x4000000000000) != 0)
        {
          LODWORD(v134) = v60;
          v135 = v136;
          if ((v136 & 0x8000000000000) != 0)
          {
            v81 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFLL);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 + 1, v81));
          }
          v72 = HIDWORD(v149);
          if (HIDWORD(v149) == (_DWORD)v149)
          {
            v73 = WTF::Vector<std::pair<unsigned int,WebCore::Color>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v148, HIDWORD(v149) + 1, (unint64_t)&v134);
            v72 = HIDWORD(v149);
            v74 = (char *)v148 + 16 * HIDWORD(v149);
            *(_DWORD *)v74 = *(_DWORD *)v73;
            *((_QWORD *)v74 + 1) = 0;
            v75 = v74 + 8;
            v78 = *(_QWORD *)(v73 + 8);
            v76 = (uint64_t *)(v73 + 8);
            v77 = v78;
            if (v78)
            {
              *v75 = v77;
              goto LABEL_134;
            }
          }
          else
          {
            v79 = (char *)v148 + 16 * HIDWORD(v149);
            *(_DWORD *)v79 = (_DWORD)v134;
            *((_QWORD *)v79 + 1) = 0;
            v80 = (uint64_t *)(v79 + 8);
            if (v135)
            {
              *v80 = v135;
              v76 = &v135;
LABEL_134:
              *v76 = 0;
            }
          }
          HIDWORD(v149) = v72 + 1;
          if ((v135 & 0x8000000000000) != 0)
          {
            v87 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFLL);
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              atomic_store(1u, v87);
              WTF::fastFree((WTF *)v87, v47);
            }
          }
          v71 = v136;
        }
        if ((v71 & 0x8000000000000) != 0)
        {
          v84 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            atomic_store(1u, v84);
            WTF::fastFree((WTF *)v84, v47);
          }
        }
      }
LABEL_138:
      v50 = v51 + 1;
      v51 = (v51 + 1);
      if (v49 == v50)
      {
        v48 = v150[0];
        if (!v150[0])
          goto LABEL_160;
        goto LABEL_157;
      }
    }
  }
  v150[0] = 0;
LABEL_157:
  if (*(_DWORD *)v48 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v48, (WTF::StringImpl *)v47);
  else
    *(_DWORD *)v48 -= 2;
LABEL_160:
  v90 = 0;
  v91 = (*(_WORD *)(v141 + 4) & 0x7Fu) - 20;
  if (v91 > 0x3C)
  {
    v92 = v133;
    goto LABEL_165;
  }
  v92 = v133;
  if (((1 << ((*(_WORD *)(v141 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
  {
    v90 = *(WTF::StringImpl **)(v141 + 8);
    if (!v90)
      goto LABEL_165;
LABEL_163:
    *(_DWORD *)v90 += 2;
    v150[0] = v90;
    if ((*((_BYTE *)v90 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v94 = (WTF::StringImpl *)v150[0];
      v90 = v134;
      v134 = 0;
      v150[0] = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v93);
        else
          *(_DWORD *)v94 -= 2;
      }
    }
    goto LABEL_165;
  }
  if (v91 == 60)
  {
    v119 = WebCore::nameString(*(unsigned __int16 *)(v141 + 8));
  }
  else
  {
    if (v91 != 59)
      goto LABEL_165;
    v119 = WebCore::nameString(*(unsigned __int16 *)(v141 + 8));
  }
  v90 = (WTF::StringImpl *)*v119;
  if (*v119)
    goto LABEL_163;
LABEL_165:
  v95 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v95 = 1;
  *(_BYTE *)(v95 + 4) = *(_BYTE *)(v95 + 4) & 0xC0 | 0x13;
  if (v90)
    *(_DWORD *)v90 += 2;
  v96 = v144;
  v144 = 0;
  *(_QWORD *)(v95 + 8) = v90;
  *(_QWORD *)(v95 + 16) = v96;
  v97 = v145;
  v145 = 0;
  *(_QWORD *)(v95 + 24) = v97;
  *(_QWORD *)(v95 + 32) = v39;
  *(_DWORD *)(v95 + 40) = v40;
  v98 = v148;
  v148 = 0;
  *(_QWORD *)(v95 + 48) = v98;
  v99 = v149;
  v149 = 0;
  *(_QWORD *)(v95 + 56) = v99;
  *v92 = v95;
  if (!v90)
    goto LABEL_170;
  if (*(_DWORD *)v90 != 2)
  {
    *(_DWORD *)v90 -= 2;
LABEL_170:
    v100 = v148;
    goto LABEL_171;
  }
  WTF::StringImpl::destroy(v90, v12);
  v100 = v148;
  if (HIDWORD(v149))
  {
    v108 = (WTF::StringImpl *)((char *)v148 + 16 * HIDWORD(v149));
    do
    {
      v109 = *((_QWORD *)v100 + 1);
      if ((v109 & 0x8000000000000) != 0)
      {
        v110 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFLL);
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((WTF *)v110, v12);
        }
      }
      v100 = (WTF *)((char *)v100 + 16);
    }
    while (v100 != v108);
    goto LABEL_170;
  }
LABEL_171:
  if (v100)
    WTF::fastFree(v100, v12);
  v101 = v144;
  if (!HIDWORD(v145))
  {
    if (!v144)
      goto LABEL_175;
    goto LABEL_215;
  }
  v113 = 8 * HIDWORD(v145);
  do
  {
    v114 = *(WTF::StringImpl **)v101;
    *(_QWORD *)v101 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v12);
      else
        *(_DWORD *)v114 -= 2;
    }
    v101 = (WTF *)((char *)v101 + 8);
    v113 -= 8;
  }
  while (v113);
  v101 = v144;
  if (v144)
  {
LABEL_215:
    v144 = 0;
    LODWORD(v145) = 0;
    WTF::fastFree(v101, v12);
  }
LABEL_175:
  v102 = (unsigned int *)v137;
  v137 = 0;
  if (v102)
  {
    if (*v102 == 1)
    {
      v115 = v102[1];
      if (v115 >= 0x10)
      {
        v116 = 0;
        v117 = (unsigned int *)((char *)v102 + ((v115 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v118 = (_DWORD *)(*v117 | ((unint64_t)*((unsigned __int8 *)v117 + 4) << 32));
          if (*v118 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v118, v12);
          else
            *v118 -= 2;
          ++v116;
          v117 = (unsigned int *)((char *)v117 + 5);
        }
        while (v116 < (unint64_t)v102[1] >> 4);
      }
      WTF::fastFree((WTF *)v102, v12);
    }
    else
    {
      --*v102;
    }
  }
  v103 = v138;
  if (HIDWORD(v139))
  {
    v104 = 16 * HIDWORD(v139);
    v105 = (_DWORD **)((char *)v138 + 8);
    do
    {
      v106 = *v105;
      *v105 = 0;
      if (v106)
      {
        if (*v106 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v106, v12);
        else
          *v106 -= 2;
      }
      v105 += 2;
      v104 -= 16;
    }
    while (v104);
    v103 = v138;
  }
  if (v140 != (_BYTE *)v103 && v103 != 0)
  {
    v138 = 0;
    LODWORD(v139) = 0;
    WTF::fastFree(v103, v12);
  }
  result = (_DWORD *)v141;
  if (v141)
  {
LABEL_190:
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v12);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSParserImpl::consumeCounterStyleRule(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::ImmutableStyleProperties *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD *v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  WTF **v44;
  unsigned int v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  _BYTE v49[4096];
  WTF::StringImpl *v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53[2];

  result = (WTF::StringImpl *)MEMORY[0x1E0C80A78](a1, a2);
  v8 = result;
  v9 = *(_QWORD *)(v3 + 64);
  if ((*(_BYTE *)(v9 + 54) & 0x20) != 0
    && (v10 = v7,
        v11 = v6,
        v12 = v5,
        v13 = v3,
        v51[0] = v4,
        v51[1] = v5,
        result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeCounterStyleNameInPrelude((uint64_t)v51, *(unsigned __int8 *)(v9 + 48), &v50), v50))
  {
    v14 = *(_QWORD *)(v13 + 88);
    if (v14)
    {
      v29 = *(_QWORD *)(v14 + 8);
      if (v29)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[0] - *(_QWORD *)(v29 + 32)) >> 3) >= *(unsigned int *)(v29 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587F6C0);
        }
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v29 + 8) + 16))(*(_QWORD *)(v29 + 8), 11, *(unsigned int *)(*(_QWORD *)(v29 + 16)- 0x5555555555555554 * ((uint64_t)(v51[0] - *(_QWORD *)(v29 + 32)) >> 3)));
        v30 = *(_QWORD *)(v13 + 88);
        if (v30)
        {
          v30 = *(_QWORD *)(v30 + 8);
          v31 = v30 + 8;
        }
        else
        {
          v31 = 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v12 - *(_QWORD *)(v30 + 32)) >> 3) >= *(unsigned int *)(v30 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587F6C8);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v31 + 24))(*(_QWORD *)v31, *(unsigned int *)(*(_QWORD *)(v30 + 16) - 0x5555555555555554 * ((v12 - *(_QWORD *)(v30 + 32)) >> 3)));
        v32 = *(_QWORD *)(v13 + 88);
        if (v32)
        {
          v32 = *(_QWORD *)(v32 + 8);
          v33 = v32 + 8;
        }
        else
        {
          v33 = 8;
        }
        v34 = *(_QWORD *)v33;
        v35 = *(_QWORD *)(v32 + 32);
        if (v35 == v11)
        {
          v37 = 0;
        }
        else
        {
          v36 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v35) >> 3) - 1;
          if (v36 >= *(unsigned int *)(v32 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x19587F6D8);
          }
          v37 = *(unsigned int *)(*(_QWORD *)(v32 + 16) + 4 * v36);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v37);
        v38 = *(_QWORD *)(v13 + 88);
        if (v38)
        {
          v38 = *(_QWORD *)(v38 + 8);
          v39 = v38 + 8;
        }
        else
        {
          v39 = 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v10 - *(_QWORD *)(v38 + 32)) >> 3) >= *(unsigned int *)(v38 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x19587F6D0);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v39 + 48))(*(_QWORD *)v39, *(unsigned int *)(*(_QWORD *)(v38 + 16) - 0x5555555555555554 * ((v10 - *(_QWORD *)(v38 + 32)) >> 3)));
      }
    }
    v53[0] = v11;
    v53[1] = v10;
    v52 = 11;
    v47 = (WTF *)v49;
    v48 = 256;
    v41 = v13;
    v42 = v53;
    v43 = &v52;
    v44 = &v47;
    WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v13, (uint64_t)&v41);
    v15 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v40 = v15;
    WebCore::createStyleProperties((uint64_t)v53, (uint64_t)&v47);
    WebCore::CSSCounterStyleDescriptors::create((_DWORD **)&v40, v53[0], (uint64_t)&v41);
    v17 = (WebCore::ImmutableStyleProperties *)v53[0];
    v53[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v17, v16);
        WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
    v18 = v40;
    v40 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    switch((char)v42)
    {
      case 0:
      case 3:
      case 5:
        if (v45)
          goto LABEL_12;
        goto LABEL_31;
      case 1:
      case 2:
        if (v45 > 1)
          goto LABEL_12;
        goto LABEL_31;
      case 4:
        if (!v46)
          goto LABEL_31;
        goto LABEL_12;
      case 6:
      case 7:
        goto LABEL_12;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
        if (v45 | v46)
          goto LABEL_31;
LABEL_12:
        v19 = WTF::fastMalloc((WTF *)0xC8);
        WebCore::StyleRuleCounterStyle::StyleRuleCounterStyle(v19, (_DWORD **)&v50, &v41);
        break;
      default:
LABEL_31:
        v20 = 0;
        break;
    }
    *(_QWORD *)v8 = v20;
    WebCore::CSSCounterStyleDescriptors::~CSSCounterStyleDescriptors((WebCore::CSSCounterStyleDescriptors *)&v41, v16);
    v22 = v47;
    if (HIDWORD(v48))
    {
      v23 = 16 * HIDWORD(v48);
      v24 = (_DWORD **)((char *)v47 + 8);
      do
      {
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v21);
          else
            *v25 -= 2;
        }
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
      v22 = v47;
    }
    if (v49 != (_BYTE *)v22 && v22 != 0)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree(v22, v21);
    }
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_QWORD *)v8 = 0;
  }
  return result;
}

void WebCore::CSSParserImpl::consumeContainerRule(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  WTF::StringImpl *v39;
  char v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  char v45;
  __int128 *v46;
  __int128 *v47;

  v46 = a3;
  v47 = a4;
  if (a3 == a4
    || (v12 = *(_QWORD *)(a2 + 64),
        v13 = *(_WORD *)(v12 + 51),
        LOBYTE(v38[0]) = (v13 & 8) != 0,
        BYTE1(v38[0]) = (v13 & 0x2000) != 0,
        BYTE2(v38[0]) = *(_BYTE *)(v12 + 48),
        WebCore::CQ::ContainerQueryParser::consumeContainerQuery(&v46, (WebCore::CSSParserTokenRange *)v38, (uint64_t)&v39), !v45))
  {
    *a1 = 0;
    return;
  }
  v15 = v46;
  v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v15 < v47 || (v16 & 1) != 0)
    {
      v18 = v15 >= v47 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v15;
      v19 = *(_DWORD *)v18;
    }
    else
    {
      v19 = v17 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
      v16 = 1;
      v17 = v19;
    }
    if ((v19 & 0x3F) != 0x10)
      break;
    v15 = (__int128 *)((char *)v15 + 24);
    v46 = v15;
  }
  if (v15 == v47)
  {
    v20 = *(_QWORD *)(a2 + 88);
    if (!v20 || (v28 = *(_QWORD *)(v20 + 8)) == 0)
    {
LABEL_17:
      WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)v38, a2, a5, a6);
      v21 = *(_QWORD *)(a2 + 88);
      if (v21)
      {
        v31 = *(_QWORD *)(v21 + 8);
        if (v31)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a6 - *(_QWORD *)(v31 + 32)) >> 3) >= *(unsigned int *)(v31 + 28))
          {
            __break(0xC471u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v31 + 8) + 48))(*(_QWORD *)(v31 + 8), *(unsigned int *)(*(_QWORD *)(v31 + 16) - 0x5555555555555554* (((uint64_t)a6 - *(_QWORD *)(v31 + 32)) >> 3)));
        }
      }
      if (v45)
      {
        v22 = WTF::fastMalloc((WTF *)0x48);
        *(_DWORD *)v22 = 1;
        *(_BYTE *)(v22 + 4) = *(_BYTE *)(v22 + 4) & 0xC0 | 0x12;
        *(_QWORD *)(v22 + 8) = v38[0];
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 16) = v38[1];
        *(_QWORD *)(v22 + 24) = v39;
        *(_BYTE *)(v22 + 32) = v40;
        v39 = 0;
        *(_QWORD *)(v22 + 40) = v41;
        v23 = v42;
        v41 = 0;
        v42 = 0;
        *(_QWORD *)(v22 + 48) = v23;
        *(_DWORD *)(v22 + 56) = v43;
        *(_WORD *)(v22 + 64) = v44;
        *a1 = v22;
        if (!v45)
          return;
        goto LABEL_20;
      }
      goto LABEL_52;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *(_QWORD *)(v28 + 32)) >> 3) < *(unsigned int *)(v28 + 28))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v28 + 8) + 16))(*(_QWORD *)(v28 + 8), 18, *(unsigned int *)(*(_QWORD *)(v28 + 16) - 0x5555555555555554 * (((uint64_t)a3 - *(_QWORD *)(v28 + 32)) >> 3)));
      v29 = *(_QWORD *)(a2 + 88);
      if (v29)
      {
        v29 = *(_QWORD *)(v29 + 8);
        v30 = v29 + 8;
      }
      else
      {
        v30 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - *(_QWORD *)(v29 + 32)) >> 3) >= *(unsigned int *)(v29 + 28))
      {
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x19587FAACLL);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v30 + 24))(*(_QWORD *)v30, *(unsigned int *)(*(_QWORD *)(v29 + 16) - 0x5555555555555554 * (((uint64_t)a4 - *(_QWORD *)(v29 + 32)) >> 3)));
      v32 = *(_QWORD *)(a2 + 88);
      if (v32)
      {
        v32 = *(_QWORD *)(v32 + 8);
        v33 = v32 + 8;
      }
      else
      {
        v33 = 8;
      }
      v34 = *(_QWORD *)v33;
      v35 = *(__int128 **)(v32 + 32);
      if (v35 == a5)
      {
        v37 = 0;
        goto LABEL_49;
      }
      v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)a5 - (char *)v35) >> 3) - 1;
      if (v36 < *(unsigned int *)(v32 + 28))
      {
        v37 = *(unsigned int *)(*(_QWORD *)(v32 + 16) + 4 * v36);
LABEL_49:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v37);
        goto LABEL_17;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19587FA9CLL);
  }
  *a1 = 0;
LABEL_20:
  v24 = (unsigned int *)v41;
  if (HIDWORD(v42))
  {
    v25 = 88 * HIDWORD(v42);
    do
    {
      v26 = v24[20];
      if ((_DWORD)v26 != -1)
        ((void (*)(_QWORD *, unsigned int *))off_1E339BAD8[v26])(v38, v24);
      v24[20] = -1;
      v24 += 22;
      v25 -= 88;
    }
    while (v25);
    v24 = (unsigned int *)v41;
  }
  if (v24)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree((WTF *)v24, v14);
  }
  v27 = v39;
  v39 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v27 -= 2;
  }
}

uint64_t *WebCore::CSSParserImpl::consumePropertyRule(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  __int128 *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  WTF **v21;
  uint64_t v22;
  unsigned __int16 v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF **v26;
  int v27;
  WTF *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _BOOL4 v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  _DWORD **v49;
  _DWORD *v50;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  char v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _BYTE v61[4096];
  __int128 v62;
  WTF **v63;
  __int128 v64;
  __int128 v65;
  char v66;
  char **v67;
  char *v68;

  result = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = result;
  if (v3 == v4)
  {
    v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v13 = 1;
    {
      v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
    }
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v12 = v3;
    v3 = (__int128 *)((char *)v3 + 24);
    v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  do
  {
    if (v3 < v4 || (v13 & 1) != 0)
    {
      if (v3 >= v4)
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v15 = v3;
      v16 = *(_DWORD *)v15;
    }
    else
    {
      v16 = v14 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      v13 = 1;
      v14 = v16;
    }
    v3 = (__int128 *)((char *)v3 + 24);
  }
  while ((v16 & 0x3F) == 0x10);
  if ((__int128 *)((char *)v3 - 24) != v4 || (*(_DWORD *)v12 & 0x3F) != 0)
  {
    *result = 0;
    return result;
  }
  if ((*(_DWORD *)v12 & 0x400000) != 0)
    result = (uint64_t *)WTF::AtomStringImpl::add();
  else
    result = (uint64_t *)WTF::AtomStringImpl::add();
  v18 = v59;
  if (!v59 || *((_DWORD *)v59 + 1) < 3u)
    goto LABEL_58;
  v19 = *((_QWORD *)v59 + 1);
  if ((*((_BYTE *)v59 + 16) & 4) != 0)
  {
    if (*(_BYTE *)v19 != 45)
      goto LABEL_58;
    v20 = *(unsigned __int8 *)(v19 + 1);
  }
  else
  {
    if (*(_WORD *)v19 != 45)
      goto LABEL_58;
    v20 = *(unsigned __int16 *)(v19 + 2);
  }
  if (v20 != 45)
  {
LABEL_58:
    *v11 = 0;
    if (!v18)
      return result;
    goto LABEL_116;
  }
  v56 = v8;
  v57 = v6;
  LOBYTE(v62) = 21;
  v59 = (WTF::StringImpl *)v61;
  v60 = 256;
  v21 = &v56;
  v63 = (WTF **)v10;
  *(_QWORD *)&v64 = &v56;
  *((_QWORD *)&v64 + 1) = &v62;
  *(_QWORD *)&v65 = &v59;
  WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(v10, (uint64_t)&v63);
  *(_DWORD *)v18 += 2;
  if (!HIDWORD(v60))
  {
    v22 = 0;
    v24 = 0;
LABEL_63:
    *v11 = 0;
    v38 = v18;
    goto LABEL_94;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 16 * HIDWORD(v60);
  v26 = (WTF **)((char *)v59 + 8);
  while (1)
  {
    v27 = *(_WORD *)(v26 - 1) & 0x3FF;
    if (v27 == 144)
    {
      v35 = 0;
      v36 = *v26;
      if (*v26 && ((*((unsigned __int16 *)v36 + 2) | (*((unsigned __int8 *)v36 + 6) << 16)) & 0x3F87F) == 0x50)
        v35 = *((unsigned __int16 *)v36 + 4);
      v23 = (v35 == 1010) | 0x100;
      goto LABEL_49;
    }
    if (v27 == 145)
      break;
    if (v27 == 245)
    {
      v28 = *v26;
      if (((*((unsigned __int16 *)*v26 + 2) | (*((unsigned __int8 *)*v26 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1958800F4);
      }
      v29 = 0;
      v30 = (*((unsigned __int16 *)*v26 + 2) & 0x7Fu) - 20;
      if (v30 > 0x3C)
        goto LABEL_35;
      if (((1 << ((*((_WORD *)*v26 + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v29 = (WTF::StringImpl **)*((_QWORD *)v28 + 1);
        if (v29)
          goto LABEL_34;
      }
      else
      {
        if (v30 == 60)
        {
          v37 = WebCore::nameString(*((unsigned __int16 *)v28 + 4));
        }
        else
        {
          if (v30 != 59)
            goto LABEL_35;
          v37 = WebCore::nameString(*((unsigned __int16 *)v28 + 4));
        }
        v29 = (WTF::StringImpl **)*v37;
        if (*v37)
LABEL_34:
          *(_DWORD *)v29 += 2;
      }
LABEL_35:
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v24, v17);
        else
          *(_DWORD *)v24 -= 2;
      }
      v24 = v29;
    }
LABEL_49:
    v26 += 2;
    v25 -= 16;
    if (!v25)
    {
      if (v23 < 0x100u)
        goto LABEL_63;
      if (!v24
        || (WebCore::CSSCustomPropertySyntax::parse(v24[1], (WTF::StringImpl *)(*((unsigned int *)v24 + 1) | ((unint64_t)((*((_DWORD *)v24 + 4) >> 2) & 1) << 32)), (uint64_t)&v56), !v58))
      {
        *v11 = 0;
        v38 = v18;
        goto LABEL_94;
      }
      if (HIDWORD(v57))
      {
        if (!v22)
          goto LABEL_82;
      }
      else if (!v22)
      {
LABEL_80:
        v43 = WTF::fastMalloc((WTF *)0x28);
        v38 = 0;
        *(_DWORD *)v43 = 1;
        *(_BYTE *)(v43 + 4) = *(_BYTE *)(v43 + 4) & 0xC0 | 0x15;
        *(_QWORD *)(v43 + 8) = v18;
        *(_QWORD *)(v43 + 16) = v24;
        *(_WORD *)(v43 + 24) = v23;
        *(_QWORD *)(v43 + 32) = v22;
        v22 = 0;
        v24 = 0;
        goto LABEL_83;
      }
      v39 = *(_QWORD *)(v22 + 16) + 24 * *(unsigned int *)(v22 + 28);
      *(_QWORD *)&v62 = *(_QWORD *)(v22 + 16);
      *((_QWORD *)&v62 + 1) = v39;
      v21 = (WTF **)&webThreadDelegateMessageScopeCount;
        goto LABEL_131;
      goto LABEL_73;
    }
  }
  v31 = *v26;
  if (((*((unsigned __int16 *)*v26 + 2) | (*((unsigned __int8 *)*v26 + 6) << 16)) & 0x3F800) != 0xE800)
  {
    __break(0xC471u);
    JUMPOUT(0x1958800D4);
  }
  v56 = *v26;
  v32 = *((unsigned int *)v31 + 18);
  if ((_DWORD)v32 != -1)
  {
    v63 = &v56;
    ((void (*)(__int128 *__return_ptr, WTF ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue14asVariableDataEvE3__0JZNKS9_14asVariableDataEvE3__1ZNKS9_14asVariableDataEvE3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISH_EENS6_21DefaultRefDerefTraitsISH_EEEENS8_10CSSValueIDENSG_INS8_15CSSVariableDataENSI_ISO_EENSK_ISO_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSI_ISX_EENSK_ISX_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v62, &v63, (char *)v31 + 24);
    v33 = v62;
    *(_QWORD *)&v62 = 0;
    if (v22)
    {
      WTF::RefCounted<WebCore::CSSVariableData>::deref(v22, v17);
      v34 = v62;
      *(_QWORD *)&v62 = 0;
      if (v34)
        WTF::RefCounted<WebCore::CSSVariableData>::deref(v34, v17);
    }
    v22 = v33;
    goto LABEL_49;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_131:
  v63 = 0;
  WTF::URL::invalidate((WTF::URL *)&v63);
  v53 = (uint64_t)v63;
  if (v63)
    *(_DWORD *)v63 += 2;
  WebCore::strictCSSParserContext(void)::strictContext = v53;
  unk_1EE2F56F0 = v64;
  unk_1EE2F5700 = v65;
  qword_1EE2F5710 = 0;
  *(uint64_t *)((char *)&qword_1EE2F5710 + 6) = 0;
  unk_1EE2F571E &= 0xC0000000;
  v54 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v54 != -1)
  {
    v68 = &v66;
    v67 = &v68;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v55 = (WTF::StringImpl *)v63;
  v63 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v52);
    else
      *(_DWORD *)v55 -= 2;
  }
  *((_BYTE *)v21 + 1832) = 1;
LABEL_73:
  WebCore::CSSPropertyParser::collectParsedCustomPropertyValueDependencies((uint64_t)&v56, &v62, (uint64_t)&WebCore::strictCSSParserContext(void)::strictContext, (uint64_t)&v63);
  if (DWORD1(v64) | DWORD1(v65))
    v40 = 0;
  else
    v40 = BYTE8(v65) == 0;
  v41 = (WTF *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    *((_QWORD *)&v64 + 1) = 0;
    LODWORD(v65) = 0;
    WTF::fastFree(v41, v17);
  }
  v42 = (WTF *)v63;
  if (v63)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v42, v17);
    if (v40)
      goto LABEL_80;
  }
  else if (v40)
  {
    goto LABEL_80;
  }
LABEL_82:
  v43 = 0;
  v38 = v18;
LABEL_83:
  *v11 = v43;
  if (v58)
  {
    v44 = v56;
    if (HIDWORD(v57))
    {
      v45 = 16 * HIDWORD(v57);
      v46 = (WTF::StringImpl **)((char *)v56 + 8);
      do
      {
        v47 = *v46;
        *v46 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v17);
          else
            *(_DWORD *)v47 -= 2;
        }
        v46 += 2;
        v45 -= 16;
      }
      while (v45);
    }
    if (v44)
    {
      v56 = 0;
      WTF::fastFree(v44, v17);
    }
  }
LABEL_94:
  if (v22)
    WTF::RefCounted<WebCore::CSSVariableData>::deref(v22, v17);
  if (!v24)
  {
LABEL_99:
    if (!v38)
      goto LABEL_102;
    goto LABEL_100;
  }
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_99;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v24, v17);
  if (v38)
  {
LABEL_100:
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v17);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_102:
  result = (uint64_t *)v59;
  if (HIDWORD(v60))
  {
    v48 = 16 * HIDWORD(v60);
    v49 = (_DWORD **)((char *)v59 + 8);
    do
    {
      v50 = *v49;
      *v49 = 0;
      if (v50)
      {
        if (*v50 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v17);
        else
          *v50 -= 2;
      }
      v49 += 2;
      v48 -= 16;
    }
    while (v48);
    result = (uint64_t *)v59;
  }
  if (v61 == (_BYTE *)result || result == 0)
  {
    if (!v18)
      return result;
    goto LABEL_116;
  }
  v59 = 0;
  LODWORD(v60) = 0;
  result = (uint64_t *)WTF::fastFree((WTF *)result, v17);
  if (v18)
  {
LABEL_116:
    if (*(_DWORD *)v18 == 2)
      return (uint64_t *)WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

void WebCore::CSSParserImpl::consumeScopeRule(uint64_t *a1, uint64_t a2, __int128 *a3, unint64_t a4, __int128 *a5, __int128 *a6)
{
  uint64_t v11;
  __int16 v12;
  _BOOL4 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::StyleSheetContents *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  __int128 *v34;
  __int128 *v35;
  char v36;
  unsigned int v37;
  __int128 *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 *v62;
  unint64_t v63;
  WTF *v64;
  uint64_t v65;

  v62 = a3;
  v63 = a4;
  if ((*(_WORD *)(*(_QWORD *)(a2 + 64) + 51) & 0x800) == 0)
  {
    *a1 = 0;
    return;
  }
  v60 = 0;
  v61 = 0;
  if (a3 != (__int128 *)a4)
  {
    v64 = (WTF *)&v62;
    v65 = a2;
    v11 = *(unsigned int *)(a2 + 28);
    v12 = (_DWORD)v11 ? *(unsigned __int8 *)(v11 + *(_QWORD *)(a2 + 16) - 1) | 0x100 : 0;
    v13 = _ZZZN7WebCore13CSSParserImpl16consumeScopeRuleENS_19CSSParserTokenRangeES1_ENK3__0clEvENKUlRT_NSt3__18optionalINS0_16AncestorRuleTypeEEEE_clINS_15CSSSelectorListEEEDaS4_S8_((__int128 ***)&v64, &v61, v12);
    v14 = v62;
    if (!v13 || v62 != (__int128 *)v63)
    {
      v34 = v62;
      if ((unint64_t)v62 >= v63)
      {
        v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_BYTE *)v34 & 0x3F) != 0)
        goto LABEL_44;
      if (v62 == (__int128 *)v63)
      {
        v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v36 = 1;
        {
          v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
        }
        v35 = v62;
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v35 = (__int128 *)((char *)v62 + 24);
        v62 = (__int128 *)((char *)v62 + 24);
        v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if ((unint64_t)v35 < v63 || (v36 & 1) != 0)
        {
          v38 = (unint64_t)v35 >= v63 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v35;
          v39 = *(_DWORD *)v38;
        }
        else
        {
          v39 = v37 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
          v36 = 1;
          v37 = v39;
        }
        if ((v39 & 0x3F) != 0x10)
          break;
        v35 = (__int128 *)((char *)v35 + 24);
        v62 = v35;
      }
      if (*((_DWORD *)v14 + 1) != 2)
        goto LABEL_44;
      v44 = *((_QWORD *)v14 + 1);
      if ((*((_BYTE *)v14 + 2) & 0x40) != 0)
      {
        if ((*(_BYTE *)v44 & 0xDF) != 0x54)
          goto LABEL_44;
        v45 = *(unsigned __int8 *)(v44 + 1);
      }
      else
      {
        if ((*(_WORD *)v44 & 0xFFDF) != 0x54)
          goto LABEL_44;
        v45 = *(unsigned __int16 *)(v44 + 2);
      }
      if ((v45 & 0xFFFFFFDF) == 0x4F
        && _ZZZN7WebCore13CSSParserImpl16consumeScopeRuleENS_19CSSParserTokenRangeES1_ENK3__0clEvENKUlRT_NSt3__18optionalINS0_16AncestorRuleTypeEEEE_clINS_15CSSSelectorListEEEDaS4_S8_((__int128 ***)&v64, &v60, 257)&& v62 == (__int128 *)v63)
      {
        goto LABEL_9;
      }
LABEL_44:
      *a1 = 0;
      goto LABEL_45;
    }
  }
LABEL_9:
  v15 = *(_QWORD *)(a2 + 88);
  if (v15)
  {
    v47 = *(_QWORD *)(v15 + 8);
    if (v47)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *(_QWORD *)(v47 + 32)) >> 3) >= *(unsigned int *)(v47 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1958807DCLL);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v47 + 8) + 16))(*(_QWORD *)(v47 + 8), 23, *(unsigned int *)(*(_QWORD *)(v47 + 16) - 0x5555555555555554 * (((uint64_t)a3 - *(_QWORD *)(v47 + 32)) >> 3)));
      v48 = *(_QWORD *)(a2 + 88);
      if (v48)
      {
        v48 = *(_QWORD *)(v48 + 8);
        v49 = v48 + 8;
      }
      else
      {
        v49 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *(_QWORD *)(v48 + 32)) >> 3) >= *(unsigned int *)(v48 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1958807E4);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v49 + 24))(*(_QWORD *)v49, *(unsigned int *)(*(_QWORD *)(v48 + 16) - 0x5555555555555554 * ((uint64_t)(v63 - *(_QWORD *)(v48 + 32)) >> 3)));
      v50 = *(_QWORD *)(a2 + 88);
      if (v50)
      {
        v50 = *(_QWORD *)(v50 + 8);
        v51 = v50 + 8;
      }
      else
      {
        v51 = 8;
      }
      v52 = *(_QWORD *)v51;
      v53 = *(__int128 **)(v50 + 32);
      if (v53 == a5)
      {
        v55 = 0;
      }
      else
      {
        v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)a5 - (char *)v53) >> 3) - 1;
        if (v54 >= *(unsigned int *)(v50 + 28))
          goto LABEL_97;
        v55 = *(unsigned int *)(*(_QWORD *)(v50 + 16) + 4 * v54);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 40))(v52, v55);
      v56 = *(_QWORD *)(a2 + 88);
      if (v56)
      {
        v56 = *(_QWORD *)(v56 + 8);
        v57 = v56 + 8;
      }
      else
      {
        v57 = 8;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a6 - *(_QWORD *)(v56 + 32)) >> 3) >= *(unsigned int *)(v56 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1958807ECLL);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v57 + 48))(*(_QWORD *)v57, *(unsigned int *)(*(_QWORD *)(v56 + 16) - 0x5555555555555554 * (((uint64_t)a6 - *(_QWORD *)(v56 + 32)) >> 3)));
    }
  }
  ++*(_DWORD *)(a2 + 8);
  v16 = (_QWORD *)(a2 + 16);
  LOBYTE(v64) = 1;
  v17 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v17 == *(_DWORD *)(a2 + 24))
  {
    v46 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (WTF *)(v17 + 1), (unint64_t)&v64);
    v17 = *(unsigned int *)(a2 + 28);
    *(_BYTE *)(*(_QWORD *)(a2 + 16) + v17) = *v46;
  }
  else
  {
    *(_BYTE *)(*v16 + v17) = 1;
  }
  *(_DWORD *)(a2 + 28) = v17 + 1;
  WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)&v64, a2, a5, a6);
  v18 = *(_DWORD *)(a2 + 28);
  if (!v18)
  {
LABEL_97:
    __break(0xC471u);
    JUMPOUT(0x1958807BCLL);
  }
  *(_DWORD *)(a2 + 28) = v18 - 1;
  v20 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v20 = 1;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v20 + 4) & 0xC0 | 0x17;
  *(_QWORD *)(v20 + 8) = v64;
  v21 = v65;
  v64 = 0;
  v65 = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  v23 = v60;
  v22 = v61;
  v60 = 0;
  v61 = 0;
  *(_QWORD *)(v20 + 40) = v22;
  *(_QWORD *)(v20 + 48) = v23;
  *(_QWORD *)(v20 + 56) = 0;
  v24 = *(WebCore::StyleSheetContents **)(a2 + 72);
  if (v24)
  {
    ++*(_DWORD *)v24;
    v25 = *((_QWORD *)v24 + 1);
    if (v25)
      goto LABEL_104;
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v24;
    v26 = (unsigned int *)*((_QWORD *)v24 + 1);
    *((_QWORD *)v24 + 1) = v25;
    if (!v26)
      goto LABEL_104;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v19);
    }
    v25 = *((_QWORD *)v24 + 1);
    if (v25)
    {
LABEL_104:
      do
        v29 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v29 + 1, (unsigned int *)v25));
    }
    v30 = *(unsigned int **)(v20 + 56);
    *(_QWORD *)(v20 + 56) = v25;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v19);
      }
    }
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v24, v19);
      WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  *a1 = v20;
  v33 = v64;
  if (HIDWORD(v65))
  {
    v58 = 8 * HIDWORD(v65);
    do
    {
      v59 = *(_DWORD **)v33;
      *(_QWORD *)v33 = 0;
      if (v59)
      {
        if (*v59 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v59, (WTF::StringImpl *)v19);
        else
          --*v59;
      }
      v33 = (WTF *)((char *)v33 + 8);
      v58 -= 8;
    }
    while (v58);
    v33 = v64;
    if (!v64)
      goto LABEL_29;
    goto LABEL_92;
  }
  if (v64)
  {
LABEL_92:
    v64 = 0;
    LODWORD(v65) = 0;
    WTF::fastFree(v33, v19);
  }
LABEL_29:
  --*(_DWORD *)(a2 + 8);
LABEL_45:
  v40 = v60;
  v60 = 0;
  if (v40)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v60, v40);
  v41 = v61;
  v61 = 0;
  if (v41)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v61, v41);
}

double WebCore::CSSParserImpl::consumeStartingStyleRule(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v24;
  uint64_t v25;
  double v26;

  if ((*(_WORD *)(*(_QWORD *)(a2 + 64) + 51) & 0x1000) == 0 || a3 != a4)
  {
    *a1 = 0;
    return result;
  }
  v9 = *(_QWORD *)(a2 + 88);
  if (v9)
  {
    v13 = *(_QWORD *)(v9 + 8);
    if (v13)
    {
      v24 = a5;
      if (0xAAAAAAAAAAAAAAABLL * ((a3 - *(_QWORD *)(v13 + 32)) >> 3) < *(unsigned int *)(v13 + 28))
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), 24, *(unsigned int *)(*(_QWORD *)(v13 + 16) - 0x5555555555555554 * ((a3 - *(_QWORD *)(v13 + 32)) >> 3)));
        v14 = *(_QWORD *)(a2 + 88);
        if (v14)
        {
          v14 = *(_QWORD *)(v14 + 8);
          v15 = v14 + 8;
        }
        else
        {
          v15 = 8;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a4 - *(_QWORD *)(v14 + 32)) >> 3) >= *(unsigned int *)(v14 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x195880A18);
        }
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v15 + 24))(*(_QWORD *)v15, *(unsigned int *)(*(_QWORD *)(v14 + 16) - 0x5555555555555554 * ((a4 - *(_QWORD *)(v14 + 32)) >> 3)));
        v17 = *(_QWORD *)(a2 + 88);
        if (v17)
        {
          v17 = *(_QWORD *)(v17 + 8);
          v18 = v17 + 8;
        }
        else
        {
          v18 = 8;
        }
        v19 = *(_QWORD *)v18;
        v20 = *(__int128 **)(v17 + 32);
        if (v20 == v24)
        {
          v22 = 0;
          goto LABEL_23;
        }
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v20) >> 3) - 1;
        if (v21 < *(unsigned int *)(v17 + 28))
        {
          v22 = *(unsigned int *)(*(_QWORD *)(v17 + 16) + 4 * v21);
LABEL_23:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v22);
          a5 = v24;
          goto LABEL_5;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195880A08);
    }
  }
LABEL_5:
  WebCore::CSSParserImpl::consumeNestedGroupRules((unsigned int *)&v25, a2, a5, a6);
  v10 = *(_QWORD *)(a2 + 88);
  if (v10)
  {
    v16 = *(_QWORD *)(v10 + 8);
    if (v16)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a6 - *(_QWORD *)(v16 + 32)) >> 3) >= *(unsigned int *)(v16 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x195880A10);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 8) + 48))(*(_QWORD *)(v16 + 8), *(unsigned int *)(*(_QWORD *)(v16 + 16) - 0x5555555555555554 * (((uint64_t)a6 - *(_QWORD *)(v16 + 32)) >> 3)));
    }
  }
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v11 = 1;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v11 + 4) & 0xC0 | 0x18;
  *(_QWORD *)(v11 + 8) = v25;
  result = v26;
  *(double *)(v11 + 16) = v26;
  *a1 = v11;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*v8 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
        else
          --*v8;
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeNestedGroupRules(WebCore::CSSParserTokenRange)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::MutableCSSSelector *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  WTF *v39;
  uint64_t v40;
  WebCore::MutableCSSSelector *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  WebCore::MutableCSSSelector *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _QWORD *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  WTF *result;
  uint64_t *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  int v82;
  WTF *v83;
  uint64_t v84;
  _DWORD *v85;
  WTF *v86;
  uint64_t v87;
  _BYTE v88[4096];
  WTF *v89[2];
  _DWORD *v90;
  WTF::StringImpl *v91;
  unsigned int *v92;
  WebCore::MutableCSSSelector *v93;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v6 = (unsigned int *)(v2 + 48);
  v86 = (WTF *)v88;
  v87 = 256;
  *(_OWORD *)v89 = 0u;
  v7 = *(unsigned int *)(v5 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(v5 + 56))
  {
    v70 = WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v86);
    v71 = *(_DWORD *)(v5 + 60);
    v72 = *(_QWORD *)(v5 + 48);
    v73 = v72 + 4128 * v71;
    *(_QWORD *)v73 = v73 + 16;
    *(_QWORD *)(v73 + 8) = 256;
    v3 = *(void **)v70;
    if (*(_QWORD *)v70 == v70 + 16)
    {
      memcpy((void *)(v73 + 16), v3, 16 * *(unsigned int *)(v70 + 12));
    }
    else
    {
      *(_QWORD *)v70 = v70 + 16;
      *(_QWORD *)v73 = v3;
      v82 = *(_DWORD *)(v70 + 8);
      *(_DWORD *)(v70 + 8) = 256;
      *(_DWORD *)(v73 + 8) = v82;
    }
    v74 = *(_DWORD *)(v70 + 12);
    *(_DWORD *)(v70 + 12) = 0;
    *(_DWORD *)(v73 + 12) = v74;
    v12 = v72 + 4128 * v71;
    *(_OWORD *)(v12 + 4112) = 0u;
    v75 = *(_QWORD *)(v70 + 4112);
    *(_QWORD *)(v70 + 4112) = 0;
    *(_QWORD *)(v12 + 4112) = v75;
    LODWORD(v75) = *(_DWORD *)(v70 + 4120);
    *(_DWORD *)(v70 + 4120) = 0;
    *(_DWORD *)(v12 + 4120) = v75;
    v14 = *(_DWORD *)(v70 + 4124);
    *(_DWORD *)(v70 + 4124) = 0;
  }
  else
  {
    v8 = *(_QWORD *)v6;
    v9 = *(_QWORD *)v6 + 4128 * v7;
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 256;
    v10 = v86;
    if (v86 == (WTF *)v88)
    {
      memcpy((void *)(v9 + 16), v88, 16 * HIDWORD(v87));
    }
    else
    {
      v86 = (WTF *)v88;
      *(_QWORD *)v9 = v10;
      v80 = v87;
      LODWORD(v87) = 256;
      *(_DWORD *)(v9 + 8) = v80;
    }
    v11 = HIDWORD(v87);
    HIDWORD(v87) = 0;
    *(_DWORD *)(v9 + 12) = v11;
    v12 = v8 + 4128 * v7;
    *(_OWORD *)(v12 + 4112) = 0u;
    v13 = v89[0];
    v89[0] = 0;
    *(_QWORD *)(v12 + 4112) = v13;
    LODWORD(v13) = v89[1];
    LODWORD(v89[1]) = 0;
    *(_DWORD *)(v12 + 4120) = (_DWORD)v13;
    v14 = HIDWORD(v89[1]);
    HIDWORD(v89[1]) = 0;
  }
  *(_DWORD *)(v12 + 4124) = v14;
  ++*(_DWORD *)(v5 + 60);
  if (HIDWORD(v89[1]))
  {
    v83 = v89[0];
    v84 = 8 * HIDWORD(v89[1]);
    do
    {
      v85 = *(_DWORD **)v83;
      *(_QWORD *)v83 = 0;
      if (v85)
      {
        if (*v85 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v85, (WTF::StringImpl *)v3);
        else
          --*v85;
      }
      v83 = (WTF *)((char *)v83 + 8);
      v84 -= 8;
    }
    while (v84);
  }
  v15 = v89[0];
  if (v89[0])
  {
    v89[0] = 0;
    LODWORD(v89[1]) = 0;
    WTF::fastFree(v15, v3);
  }
  v16 = v86;
  if (HIDWORD(v87))
  {
    v17 = 16 * HIDWORD(v87);
    v18 = (_DWORD **)((char *)v86 + 8);
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v3);
        else
          *v19 -= 2;
      }
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
    v16 = v86;
  }
  if (v88 != (_BYTE *)v16 && v16 != 0)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v16, v3);
  }
  v21 = *(_QWORD *)v4;
  WebCore::CSSParserImpl::consumeBlockContent(*(_QWORD *)v4, **((const WebCore::CSSParserTokenRange ***)v4 + 1), *(const WebCore::CSSParserTokenRange **)(*((_QWORD *)v4 + 1) + 8), 1u, 0, 1);
  v22 = *(_DWORD *)(v21 + 60);
  if (!v22)
    goto LABEL_81;
  if (!*(_DWORD *)(*(_QWORD *)(v21 + 48) + 4128 * v22 - 4116))
    goto LABEL_42;
  v23 = *((_QWORD *)v4 + 2);
  v24 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = 786433;
  v25[1] = 0;
  *(_QWORD *)v24 = v25;
  *((_QWORD *)v24 + 1) = 0;
  v93 = v24;
  *(_DWORD *)v25 = *(_DWORD *)v25 & 0xFFFFFE0F | 0xE0;
  v86 = 0;
  v87 = 0;
  v26 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, 1uLL, (unint64_t)&v93);
  v27 = HIDWORD(v87);
  v28 = v86;
  v29 = *v26;
  *v26 = 0;
  *((_QWORD *)v28 + v27) = v29;
  HIDWORD(v87) = v27 + 1;
  v30 = *(_DWORD *)(v21 + 60);
  if (!v30)
  {
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x1958810E4);
  }
  WebCore::createStyleProperties((uint64_t)&v92, *(_QWORD *)(v21 + 48) + 4128 * v30 - 4128);
  v31 = v92;
  v92 = 0;
  v32 = *(_WORD *)(*(_QWORD *)(v21 + 64) + 51);
  WebCore::CSSSelectorList::CSSSelectorList(&v91, (uint64_t)&v86);
  v33 = WTF::fastMalloc((WTF *)0x38);
  v34 = v33;
  *(_DWORD *)v33 = 1;
  if ((v32 & 2) != 0)
    v35 = 33;
  else
    v35 = 1;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v33 + 4) & 0xC0 | v35;
  *(_WORD *)(v33 + 5) = 0;
  *(_QWORD *)(v33 + 8) = v31;
  v36 = v91;
  v91 = 0;
  *(_QWORD *)(v33 + 16) = v36;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v33 + 48), (uint64_t *)(v33 + 16));
  *(_BYTE *)(v34 + 4) = *(_BYTE *)(v34 + 4) & 0xE0 | 0x16;
  v37 = v91;
  v90 = (_DWORD *)v34;
  v91 = 0;
  if (v37)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v91, v37);
  v38 = v92;
  v92 = 0;
  if (v38)
  {
    if (*v38 == 1)
    {
      v76 = v38[1];
      if (v76 >= 0x10)
      {
        v77 = 0;
        v78 = (unsigned int *)((char *)v38 + ((v76 >> 3) & 0x1FFFFFFE) + 8);
        do
        {
          v79 = (_DWORD *)(*v78 | ((unint64_t)*((unsigned __int8 *)v78 + 4) << 32));
          if (*v79 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v79, v37);
          else
            *v79 -= 2;
          ++v77;
          v78 = (unsigned int *)((char *)v78 + 5);
        }
        while (v77 < (unint64_t)v38[1] >> 4);
      }
      WTF::fastFree((WTF *)v38, v37);
    }
    else
    {
      --*v38;
    }
  }
  if (HIDWORD(v87))
  {
    v39 = v86;
    v40 = 8 * HIDWORD(v87);
    do
    {
      v41 = *(WebCore::MutableCSSSelector **)v39;
      *(_QWORD *)v39 = 0;
      if (v41)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v41, v37);
        WTF::fastFree(v42, v43);
      }
      v39 = (WTF *)((char *)v39 + 8);
      v40 -= 8;
    }
    while (v40);
  }
  v44 = v86;
  if (v86)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v44, v37);
  }
  v45 = v93;
  v93 = 0;
  if (v45)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v45, v37);
    WTF::fastFree(v46, v47);
  }
  v48 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v48 == *(_DWORD *)(v23 + 8))
  {
    v64 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v48 + 1, (unint64_t)&v90);
    v66 = *(unsigned int *)(v23 + 12);
    v67 = *(_QWORD *)v23;
    v68 = *v64;
    *v64 = 0;
    *(_QWORD *)(v67 + 8 * v66) = v68;
    v69 = v90;
    *(_DWORD *)(v23 + 12) = v66 + 1;
    v90 = 0;
    if (v69)
    {
      if (*v69 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v69, v65);
      else
        --*v69;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v23 + 8 * v48) = v34;
    *(_DWORD *)(v23 + 12) = v48 + 1;
  }
  v49 = *(_QWORD *)(v21 + 88);
  if (v49)
  {
    v81 = *(_QWORD *)(v49 + 8);
    if (v81)
      (*(void (**)(_QWORD))(**(_QWORD **)(v81 + 8) + 56))(*(_QWORD *)(v81 + 8));
  }
LABEL_42:
  v50 = *(_DWORD *)(v21 + 60);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x1958810ECLL);
  }
  v51 = *(_QWORD *)(v21 + 48) + 4128 * v50;
  v52 = *(unsigned int *)(v51 - 4);
  if ((_DWORD)v52)
  {
    v53 = *(_QWORD **)(v51 - 16);
    v54 = 8 * v52;
    do
    {
      v55 = (uint64_t *)*((_QWORD *)v4 + 2);
      v56 = *((unsigned int *)v55 + 3);
      if ((_DWORD)v56 == *((_DWORD *)v55 + 2))
      {
        v59 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((_QWORD *)v4 + 2), v56 + 1, (unint64_t)v53);
        v56 = *((unsigned int *)v55 + 3);
        v57 = *v55;
        v58 = (_DWORD *)*v59;
        ++*(_DWORD *)*v59;
      }
      else
      {
        v57 = *v55;
        v58 = (_DWORD *)*v53;
        ++*(_DWORD *)*v53;
      }
      *(_QWORD *)(v57 + 8 * v56) = v58;
      *((_DWORD *)v55 + 3) = v56 + 1;
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  v60 = *(_DWORD *)(v5 + 60);
  if (!v60)
  {
    __break(0xC471u);
    JUMPOUT(0x1958810F4);
  }
  v61 = v60 - 1;
  v62 = (WTF::StringImpl *)(*(_QWORD *)(v5 + 48) + 4128 * v60);
  result = WTF::VectorTypeOperations<WebCore::CSSParserImpl::NestingContext>::destruct((WTF::StringImpl *)((char *)v62 - 4128), v62);
  *(_DWORD *)(v5 + 60) = v61;
  return result;
}

uint64_t WebCore::consumeCascadeLayerName(uint64_t result, __int128 **a2, int a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v3 = result;
  v19 = 0;
  v20 = 0;
  v5 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    if (a3)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      goto LABEL_43;
    }
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
  }
  else
  {
    while (1)
    {
      if (v5 == v4)
      {
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        *a2 = (__int128 *)((char *)v5 + 24);
      }
      if ((*(_DWORD *)v5 & 0x3F) != 0)
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 16) = 0;
        v17 = v19;
        if (HIDWORD(v20))
        {
          v18 = 8 * HIDWORD(v20);
          do
          {
            result = *(_QWORD *)v17;
            *(_QWORD *)v17 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)result -= 2;
            }
            v17 = (WTF *)((char *)v17 + 8);
            v18 -= 8;
          }
          while (v18);
          v17 = v19;
          if (!v19)
            return result;
        }
        else if (!v19)
        {
          return result;
        }
        v19 = 0;
        LODWORD(v20) = 0;
        return WTF::fastFree(v17, a2);
      }
      if ((*(_DWORD *)v5 & 0x400000) != 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v7 = v21;
      LODWORD(v8) = HIDWORD(v20);
      if (HIDWORD(v20) == (_DWORD)v20)
      {
        v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v19, HIDWORD(v20) + 1, (unint64_t)&v21);
        v8 = HIDWORD(v20);
        v13 = v19;
        v14 = *v12;
        *v12 = 0;
        *((_QWORD *)v13 + v8) = v14;
      }
      else
      {
        v21 = 0;
        *((_QWORD *)v19 + HIDWORD(v20)) = v7;
      }
      HIDWORD(v20) = v8 + 1;
      result = (uint64_t)v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v9 = *a2;
      v4 = a2[1];
      if (*a2 >= v4)
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v9 = *a2;
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        v10 = *a2;
      }
      if ((*(_DWORD *)v10 & 0x3F) != 6)
        break;
      if (v9 >= v4)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v9 = *a2;
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        v11 = v9;
      }
      if (*((_WORD *)v11 + 8) != 46)
        break;
      if (v9 == v4)
      {
        v5 = v4;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v5 = *a2;
        }
      }
      else
      {
        v5 = (__int128 *)((char *)v9 + 24);
        *a2 = v5;
      }
    }
    while (1)
    {
      if (v9 < v4 || (v15 & 1) != 0)
      {
        if (v9 >= v4)
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = *(_DWORD *)v9;
      }
      else
      {
        v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
        v15 = 1;
      }
      if ((v16 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)((char *)*a2 + 24);
      *a2 = v9;
    }
    *(_QWORD *)v3 = v19;
    *(_QWORD *)(v3 + 8) = v20;
LABEL_43:
    *(_BYTE *)(v3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::observeSelectors(uint64_t a1, __int128 *a2, __int128 *a3)
{
  char v5;
  unsigned int v6;
  uint64_t v7;
  __int128 *v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  __int128 *v13;
  unsigned int v14;
  __int128 *v15;
  unsigned int v16;
  int v17;
  char v18;
  __int128 *v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v6 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v7 = 24 - (_QWORD)a2;
  do
  {
    if (a2 < a3 || (v5 & 1) != 0)
    {
      if (a2 >= a3)
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v8 = a2;
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v9 = v6 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v5 = 1;
      v6 = v9;
    }
    a2 = (__int128 *)((char *)a2 + 24);
    v7 -= 24;
  }
  while ((v9 & 0x3F) == 0x10);
  v10 = 0xAAAAAAAAAAAAAAABLL * (-(*(_QWORD *)(a1 + 32) + v7) >> 3);
  if (v10 >= *(unsigned int *)(a1 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x195881720);
  }
  v11 = (__int128 *)((char *)a2 - 24);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 1, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v10));
  while (v11 != a3)
  {
    if (v11 >= a3)
      v12 = 1;
    else
    if (v11 >= a3)
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v13 = v11;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v12 = 1;
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    if (v11 == a3)
    {
LABEL_51:
      v11 = a3;
    }
    else
    {
      v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if (v11 < a3 || (v12 & 1) != 0)
        {
          v15 = v11 >= a3 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
          v16 = *(_DWORD *)v15;
        }
        else
        {
          v16 = v14 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
          v12 = 1;
          v14 = v16;
        }
        if ((v16 & 0x3F) == 0x15)
          break;
        v17 = 0;
        v18 = v12;
        do
        {
          if (v11 == a3)
          {
            if ((v18 & 1) == 0)
            {
              v14 = v14 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
              v12 = 1;
            }
            v11 = a3;
            v18 = 1;
            v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v19 = v11;
            v11 = (__int128 *)((char *)v11 + 24);
          }
          v20 = *(_DWORD *)v19 >> 6;
          if (v20 == 2)
            v21 = -1;
          else
            v21 = 0;
          if (v20 == 1)
            v22 = 1;
          else
            v22 = v21;
          v17 += v22;
          if (v17)
            v23 = v11 >= a3;
          else
            v23 = 1;
        }
        while (!v23);
        if (v11 == a3)
          goto LABEL_51;
      }
      if (v11 < a3)
      {
        v24 = v11;
        if ((v12 & 1) != 0)
          goto LABEL_53;
        goto LABEL_71;
      }
    }
    v24 = v11;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v12 & 1) != 0)
      goto LABEL_53;
LABEL_71:
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_53:
    if (v13 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v25 = a3;
    else
      v25 = v13;
    if (v11 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v26 = a3;
    else
      v26 = v11;
    v27 = (__int128 *)((char *)v24 + 24);
    if (v24 == a3)
      v27 = a3;
    do
    {
      if (v27 >= a3)
        v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v28 = v27;
      v27 = (__int128 *)((char *)v27 + 24);
    }
    while ((*(_DWORD *)v28 & 0x3F) == 0x10);
    v29 = *(_QWORD *)(a1 + 32);
    v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v29) >> 3);
    v31 = *(unsigned int *)(a1 + 28);
    if (v30 >= v31)
      goto LABEL_77;
    v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - v29) >> 3);
    if (v32 >= v31)
    {
      __break(0xC471u);
      JUMPOUT(0x195881718);
    }
    v11 = (__int128 *)((char *)v27 - 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v30), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v32));
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *(_QWORD *)(a1 + 32)) >> 3) >= *(unsigned int *)(a1 + 28))
  {
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x195881710);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(unsigned int *)(*(_QWORD *)(a1 + 16) - 0x5555555555555554 * (((uint64_t)a3 - *(_QWORD *)(a1 + 32)) >> 3)));
}

uint64_t WebCore::CSSParserObserverWrapper::yieldCommentsBefore(uint64_t this, const WebCore::CSSParserTokenRange *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *(unsigned int **)(this + 56);
  if ((unint64_t)v2 < *(_QWORD *)(this + 40) + 12 * (unint64_t)*(unsigned int *)(this + 52))
  {
    v3 = this;
    v4 = -1431655765 * (((unint64_t)a2 - *(_QWORD *)(this + 32)) >> 3);
    do
    {
      if (v2[2] > v4)
        break;
      this = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8) + 72))(*(_QWORD *)(v3 + 8), *v2, v2[1]);
      v2 = (unsigned int *)(*(_QWORD *)(v3 + 56) + 12);
      *(_QWORD *)(v3 + 56) = v2;
    }
    while ((unint64_t)v2 < *(_QWORD *)(v3 + 40) + 12 * (unint64_t)*(unsigned int *)(v3 + 52));
  }
  return this;
}

uint64_t WebCore::CSSParserImpl::consumeBlockContent(WebCore::CSSParserTokenRange,WebCore::StyleRuleType,WebCore::CSSParserImpl::OnlyDeclarations,WebCore::CSSParserImpl::ParsingStyleDeclarationsInRuleList)::$_2::operator()(_QWORD *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t result;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *a1;
  WebCore::CSSParserImpl::consumeQualifiedRule(&v18, *a1, a1[1], 4);
  result = v18;
  if (!v18)
    return 0;
  v4 = *(_BYTE *)(v18 + 4) & 0x1F;
  if (v4 != 22 && v4 != 1)
  {
    if (*(_DWORD *)v18 != 1)
    {
      v10 = 0;
      --*(_DWORD *)v18;
      return v10;
    }
    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v18, v2);
    return 0;
  }
  v6 = *(_DWORD *)(v1 + 60);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + 48) + 4128 * v6;
    v8 = v7 - 16;
    v17 = v18;
    v9 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v9 == *(_DWORD *)(v7 - 8))
    {
      v11 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v17);
      v13 = *(unsigned int *)(v8 + 12);
      v14 = *(_QWORD *)v8;
      v15 = *v11;
      *v11 = 0;
      *(_QWORD *)(v14 + 8 * v13) = v15;
      v16 = (_DWORD *)v17;
      *(_DWORD *)(v8 + 12) = v13 + 1;
      v17 = 0;
      if (v16)
      {
        if (*v16 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v16, v12);
        else
          --*v16;
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v18;
      *(_DWORD *)(v7 - 4) = v9 + 1;
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSParserImpl::consumeBlockContent(WebCore::CSSParserTokenRange,WebCore::StyleRuleType,WebCore::CSSParserImpl::OnlyDeclarations,WebCore::CSSParserImpl::ParsingStyleDeclarationsInRuleList)::$_3::operator()(uint64_t result)
{
  __int128 ***v1;
  __int128 *v2;
  __int128 *v3;
  char v4;
  unsigned int v5;
  int v6;
  __int128 **v7;
  __int128 *v8;
  __int128 *v9;
  char v10;
  int v11;
  int v12;

  *(_OWORD *)*(_QWORD *)result = *(_OWORD *)*(_QWORD *)(result + 8);
  v1 = *(__int128 ****)(result + 16);
  v2 = **v1;
  v3 = (*v1)[1];
  if (v2 != v3)
  {
    do
    {
      if (v2 < v3 || (v4 & 1) != 0)
      {
        if (v2 >= v3)
          v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v5 = *(_DWORD *)v2;
      }
      else
      {
        v5 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
        v4 = 1;
      }
      if ((v5 & 0x3F) == 0x14)
        break;
      v6 = 0;
      v7 = *v1;
      v9 = **v1;
      v8 = (*v1)[1];
      v10 = v4;
      do
      {
        if (v9 == v8)
        {
          if ((v10 & 1) == 0)
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v4 = 1;
          }
          v10 = 1;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          *v7 = (__int128 *)((char *)v9 + 24);
        }
        v11 = *(_DWORD *)v9 >> 6;
        if (v11 == 2)
          result = 0xFFFFFFFFLL;
        else
          result = 0;
        if (v11 == 1)
          v12 = 1;
        else
          v12 = result;
        v6 += v12;
        if (!v6)
          break;
        v9 = *v7;
      }
      while (*v7 < v8);
      v2 = **v1;
      v3 = (*v1)[1];
    }
    while (v2 != v3);
  }
  return result;
}

WTF *WebCore::CSSParserImpl::runInNewNestingContext<WebCore::CSSParserImpl::consumeDeclarationListInNewNestingContext(WebCore::CSSParserTokenRange,WebCore::StyleRuleType)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  WTF *v27;
  const void *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF *result;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD **v42;
  _DWORD *v43;
  int v44;
  int v45;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  uint64_t v50;
  _BYTE v51[4096];
  WTF *v52[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v6 = (unsigned int *)(v2 + 48);
  v49 = (WTF *)v51;
  v50 = 256;
  *(_OWORD *)v52 = 0u;
  v7 = *(unsigned int *)(v5 + 60);
  if ((_DWORD)v7 == *(_DWORD *)(v5 + 56))
  {
    v35 = WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v49);
    v36 = *(_DWORD *)(v5 + 60);
    v37 = *(_QWORD *)(v5 + 48);
    v38 = v37 + 4128 * v36;
    *(_QWORD *)v38 = v38 + 16;
    *(_QWORD *)(v38 + 8) = 256;
    v3 = *(uint64_t **)v35;
    if (*(_QWORD *)v35 == v35 + 16)
    {
      memcpy((void *)(v38 + 16), v3, 16 * *(unsigned int *)(v35 + 12));
    }
    else
    {
      *(_QWORD *)v35 = v35 + 16;
      *(_QWORD *)v38 = v3;
      v45 = *(_DWORD *)(v35 + 8);
      *(_DWORD *)(v35 + 8) = 256;
      *(_DWORD *)(v38 + 8) = v45;
    }
    v39 = *(_DWORD *)(v35 + 12);
    *(_DWORD *)(v35 + 12) = 0;
    *(_DWORD *)(v38 + 12) = v39;
    v12 = v37 + 4128 * v36;
    *(_OWORD *)(v12 + 4112) = 0u;
    v40 = *(_QWORD *)(v35 + 4112);
    *(_QWORD *)(v35 + 4112) = 0;
    *(_QWORD *)(v12 + 4112) = v40;
    LODWORD(v40) = *(_DWORD *)(v35 + 4120);
    *(_DWORD *)(v35 + 4120) = 0;
    *(_DWORD *)(v12 + 4120) = v40;
    v14 = *(_DWORD *)(v35 + 4124);
    *(_DWORD *)(v35 + 4124) = 0;
  }
  else
  {
    v8 = *(_QWORD *)v6;
    v9 = *(_QWORD *)v6 + 4128 * v7;
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 256;
    v10 = v49;
    if (v49 == (WTF *)v51)
    {
      memcpy((void *)(v9 + 16), v51, 16 * HIDWORD(v50));
    }
    else
    {
      v49 = (WTF *)v51;
      *(_QWORD *)v9 = v10;
      v44 = v50;
      LODWORD(v50) = 256;
      *(_DWORD *)(v9 + 8) = v44;
    }
    v11 = HIDWORD(v50);
    HIDWORD(v50) = 0;
    *(_DWORD *)(v9 + 12) = v11;
    v12 = v8 + 4128 * v7;
    *(_OWORD *)(v12 + 4112) = 0u;
    v13 = v52[0];
    v52[0] = 0;
    *(_QWORD *)(v12 + 4112) = v13;
    LODWORD(v13) = v52[1];
    LODWORD(v52[1]) = 0;
    *(_DWORD *)(v12 + 4120) = (_DWORD)v13;
    v14 = HIDWORD(v52[1]);
    HIDWORD(v52[1]) = 0;
  }
  *(_DWORD *)(v12 + 4124) = v14;
  ++*(_DWORD *)(v5 + 60);
  if (HIDWORD(v52[1]))
  {
    v46 = v52[0];
    v47 = 8 * HIDWORD(v52[1]);
    do
    {
      v48 = *(_DWORD **)v46;
      *(_QWORD *)v46 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v48, (WTF::StringImpl *)v3);
        else
          --*v48;
      }
      v46 = (WTF *)((char *)v46 + 8);
      v47 -= 8;
    }
    while (v47);
  }
  v15 = v52[0];
  if (v52[0])
  {
    v52[0] = 0;
    LODWORD(v52[1]) = 0;
    WTF::fastFree(v15, v3);
  }
  v16 = v49;
  if (HIDWORD(v50))
  {
    v17 = 16 * HIDWORD(v50);
    v18 = (_DWORD **)((char *)v49 + 8);
    do
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v3);
        else
          *v19 -= 2;
      }
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
    v16 = v49;
  }
  if (v51 != (_BYTE *)v16 && v16 != 0)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v16, v3);
  }
  v21 = *v4;
  WebCore::CSSParserImpl::consumeBlockContent(*v4, *(const WebCore::CSSParserTokenRange **)v4[1], *(const WebCore::CSSParserTokenRange **)(v4[1] + 8), *(unsigned __int8 *)v4[2], 1, 0);
  v23 = *(_DWORD *)(v21 + 60);
  if (!v23)
    goto LABEL_51;
  v24 = *(_QWORD *)(v21 + 48) + 4128 * v23 - 4128;
  v25 = (unsigned int *)v4[3];
  v26 = v25[3];
  if ((_DWORD)v26)
  {
    v41 = 16 * v26;
    v42 = (_DWORD **)(*(_QWORD *)v25 + 8);
    do
    {
      v43 = *v42;
      *v42 = 0;
      if (v43)
      {
        if (*v43 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v22);
        else
          *v43 -= 2;
      }
      v42 += 2;
      v41 -= 16;
    }
    while (v41);
  }
  v27 = *(WTF **)v25;
  if (*(unsigned int **)v25 != v25 + 4)
  {
    if (v27)
    {
      *(_QWORD *)v25 = 0;
      v25[2] = 0;
      WTF::fastFree(v27, v22);
    }
    *(_QWORD *)v25 = v25 + 4;
  }
  v28 = *(const void **)v24;
  if (*(_QWORD *)v24 == v24 + 16)
  {
    memcpy(v25 + 4, v28, 16 * *(unsigned int *)(v24 + 12));
    v29 = *(_DWORD *)(v24 + 8);
  }
  else
  {
    *(_QWORD *)v24 = v24 + 16;
    *(_QWORD *)v25 = v28;
    v29 = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 256;
  }
  v25[2] = v29;
  v30 = *(_DWORD *)(v24 + 12);
  *(_DWORD *)(v24 + 12) = 0;
  v25[3] = v30;
  v31 = *(_DWORD *)(v5 + 60);
  if (!v31)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x195881D9CLL);
  }
  v32 = v31 - 1;
  v33 = (WTF::StringImpl *)(*(_QWORD *)(v5 + 48) + 4128 * v31);
  result = WTF::VectorTypeOperations<WebCore::CSSParserImpl::NestingContext>::destruct((WTF::StringImpl *)((char *)v33 - 4128), v33);
  *(_DWORD *)(v5 + 60) = v32;
  return result;
}

uint64_t WebCore::CSSParserImpl::consumeTrailingImportantAndWhitespace(WebCore::CSSParserImpl *this, WebCore::CSSParserTokenRange *a2)
{
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  _DWORD *v17;
  BOOL v18;

  v3 = *(_QWORD *)this;
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if ((unint64_t)v2 > *(_QWORD *)this)
  {
    v4 = v2 - 6;
    do
    {
      if ((*v4 & 0x3F) != 0x10)
      {
        v2 = v4 + 6;
        goto LABEL_5;
      }
      *((_QWORD *)this + 1) = v4;
      v17 = v4 - 6;
      v18 = (unint64_t)v4 > v3;
      v4 -= 6;
    }
    while (v18);
    v2 = v17 + 6;
  }
LABEL_5:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2 - v3) >> 3) < 2)
    return 0;
  if ((_DWORD *)v3 == v2)
  {
    v2 = (_DWORD *)v3;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v2 = (_DWORD *)v3;
    }
  }
  v5 = v2 - 6;
  v6 = *(v2 - 6);
  if ((v6 & 0x3F) != 0 || *(v2 - 5) != 9)
    return 0;
  v9 = *((_QWORD *)v2 - 2);
  if ((v6 & 0x400000) != 0)
  {
    if ((*(_BYTE *)v9 & 0xDF) != 0x49
      || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x4D
      || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x50
      || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x4F
      || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x52
      || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x54
      || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x41
      || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x4E)
    {
      return 0;
    }
    v10 = *(unsigned __int8 *)(v9 + 8);
  }
  else
  {
    if ((*(_WORD *)v9 & 0xFFDF) != 0x49
      || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4D
      || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x50
      || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x52
      || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x54
      || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x41
      || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x4E)
    {
      return 0;
    }
    v10 = *(unsigned __int16 *)(v9 + 16);
  }
  if ((v10 & 0xFFFFFFDF) != 0x54)
    return 0;
  if ((unint64_t)v5 > v3)
  {
    v11 = (unint64_t)v5;
    do
    {
      v12 = *(_DWORD *)(v11 - 24);
      v11 -= 24;
      if ((v12 & 0x3F) != 0x10)
        break;
      v5 = (_DWORD *)v11;
    }
    while (v11 > v3);
  }
  if ((_DWORD *)v3 == v5)
  {
    v5 = (_DWORD *)v3;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v5 = (_DWORD *)v3;
    }
  }
  v7 = 0;
  v14 = *(v5 - 6);
  v13 = (unint64_t)(v5 - 6);
  if ((v14 & 0x3F) == 6 && *(_WORD *)(v13 + 16) == 33)
  {
    if (v13 > v3)
    {
      v15 = v13;
      do
      {
        v16 = *(_DWORD *)(v15 - 24);
        v15 -= 24;
        if ((v16 & 0x3F) != 0x10)
          break;
        v13 = v15;
      }
      while (v15 > v3);
    }
    *(_QWORD *)this = v3;
    *((_QWORD *)this + 1) = v13;
    return 1;
  }
  return v7;
}

uint64_t WebCore::CSSParserToken::stringToUnitType(unsigned __int8 *a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>(a1, a2);
  else
    return WebCore::cssPrimitiveValueUnitFromTrie<char16_t>((unsigned __int16 *)a1, a2);
}

uint64_t WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  int v5;
  int v6;
  char v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;

  switch(a2)
  {
    case 1:
      if ((*(_BYTE *)(MEMORY[0x1E0CBF868] + *a1) - 113) >= 8u)
        goto LABEL_193;
      v3 = 0x380000000010003CuLL >> (8 * (*(_BYTE *)(MEMORY[0x1E0CBF868] + *a1) - 113));
      break;
    case 2:
      if (*(_BYTE *)(MEMORY[0x1E0CBF868] + *a1) == 112)
      {
        v2 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
        switch(v2)
        {
          case 'x':
            LOBYTE(v3) = 6;
            break;
          case 'c':
            LOBYTE(v3) = 11;
            break;
          case 't':
            LOBYTE(v3) = 10;
            break;
          default:
            goto LABEL_193;
        }
      }
      else
      {
        switch(*(_BYTE *)(MEMORY[0x1E0CBF868] + *a1))
        {
          case 'c':
            LODWORD(v3) = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if ((_DWORD)v3 == 109)
              v7 = 7;
            else
              v7 = 0;
            v8 = (_DWORD)v3 == 104;
            LOBYTE(v3) = 69;
            goto LABEL_21;
          case 'e':
            LODWORD(v3) = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if ((_DWORD)v3 == 120)
              v7 = 5;
            else
              v7 = 0;
            v8 = (_DWORD)v3 == 109;
            LOBYTE(v3) = 4;
            goto LABEL_21;
          case 'f':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 114)
              goto LABEL_193;
            LOBYTE(v3) = 59;
            return v3;
          case 'h':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 122)
              goto LABEL_193;
            LOBYTE(v3) = 17;
            return v3;
          case 'i':
            LODWORD(v3) = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if ((_DWORD)v3 == 110)
              v7 = 9;
            else
              v7 = 0;
            v8 = (_DWORD)v3 == 99;
            LOBYTE(v3) = 71;
            goto LABEL_21;
          case 'l':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 104)
              goto LABEL_193;
            LOBYTE(v3) = 61;
            return v3;
          case 'm':
            LODWORD(v3) = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if ((_DWORD)v3 == 115)
              v7 = 15;
            else
              v7 = 0;
            v8 = (_DWORD)v3 == 109;
            LOBYTE(v3) = 8;
            goto LABEL_21;
          case 'v':
            v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            switch(v11)
            {
              case 'h':
                LOBYTE(v3) = 26;
                return v3;
              case 'w':
                LOBYTE(v3) = 25;
                return v3;
              case 'b':
                LOBYTE(v3) = 29;
                break;
              case 'i':
                LOBYTE(v3) = 30;
                break;
              default:
                goto LABEL_193;
            }
            break;
          default:
            goto LABEL_193;
        }
      }
      break;
    case 3:
      v5 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1);
      if (v5 == 100)
      {
        v6 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
        switch(v6)
        {
          case 'e':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 103)
              goto LABEL_193;
            LOBYTE(v3) = 12;
            break;
          case 'p':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 105)
              goto LABEL_193;
            LOBYTE(v3) = 57;
            break;
          case 'v':
            v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
            if (v13 > 0x68)
            {
              if (v13 == 105)
              {
                LOBYTE(v3) = 48;
              }
              else
              {
                if (v13 != 119)
                  goto LABEL_193;
                LOBYTE(v3) = 43;
              }
            }
            else if (v13 == 98)
            {
              LOBYTE(v3) = 47;
            }
            else
            {
              if (v13 != 104)
                goto LABEL_193;
              LOBYTE(v3) = 44;
            }
            break;
          default:
            goto LABEL_193;
        }
      }
      else
      {
        switch(*(_BYTE *)(MEMORY[0x1E0CBF868] + *a1))
        {
          case 'k':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 104 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 122)
              goto LABEL_193;
            LOBYTE(v3) = 18;
            return v3;
          case 'l':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 118)
              goto LABEL_193;
            v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
            if (v18 > 0x68)
            {
              if (v18 == 105)
              {
                LOBYTE(v3) = 42;
              }
              else
              {
                if (v18 != 119)
                  goto LABEL_193;
                LOBYTE(v3) = 37;
              }
            }
            else if (v18 == 98)
            {
              LOBYTE(v3) = 41;
            }
            else
            {
              if (v18 != 104)
                goto LABEL_193;
              LOBYTE(v3) = 38;
            }
            return v3;
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
            goto LABEL_193;
          case 'r':
            v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if (v9 == 101)
            {
              LODWORD(v3) = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
              if ((_DWORD)v3 == 120)
                v7 = 66;
              else
                v7 = 0;
              v8 = (_DWORD)v3 == 109;
              LOBYTE(v3) = 65;
LABEL_21:
              if (!v8)
                LOBYTE(v3) = v7;
              return v3;
            }
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]) > 0x68u)
            {
              if (v9 != 105)
              {
                if (v9 == 108 && *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) == 104)
                {
                  LOBYTE(v3) = 62;
                  return v3;
                }
                goto LABEL_193;
              }
              if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 99)
                goto LABEL_193;
              LOBYTE(v3) = 72;
            }
            else
            {
              if (v9 != 97)
              {
                if (v9 == 99 && *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) == 104)
                {
                  LOBYTE(v3) = 70;
                  return v3;
                }
                goto LABEL_193;
              }
              if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 100)
                goto LABEL_193;
              LOBYTE(v3) = 13;
            }
            return v3;
          case 's':
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 118)
              goto LABEL_193;
            v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
            if (v19 > 0x68)
            {
              if (v19 == 105)
              {
                LOBYTE(v3) = 36;
              }
              else
              {
                if (v19 != 119)
                  goto LABEL_193;
                LOBYTE(v3) = 31;
              }
            }
            else if (v19 == 98)
            {
              LOBYTE(v3) = 35;
            }
            else
            {
              if (v19 != 104)
                goto LABEL_193;
              LOBYTE(v3) = 32;
            }
            return v3;
          default:
            if (v5 != 99)
              goto LABEL_193;
            v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]);
            if (v15 != 113)
            {
              if (v15 == 97 && *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) == 112)
              {
                LOBYTE(v3) = 67;
                return v3;
              }
              goto LABEL_193;
            }
            v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
            if (v22 > 0x68)
            {
              if (v22 == 105)
              {
                LOBYTE(v3) = 51;
              }
              else
              {
                if (v22 != 119)
                  goto LABEL_193;
                LOBYTE(v3) = 49;
              }
            }
            else if (v22 == 98)
            {
              LOBYTE(v3) = 52;
            }
            else
            {
              if (v22 != 104)
                goto LABEL_193;
              LOBYTE(v3) = 50;
            }
            break;
        }
      }
      break;
    case 4:
      v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1);
      if (v16 <= 0x71)
      {
        if (v16 == 100)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 112)
            goto LABEL_193;
          v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
          if (v23 == 112)
          {
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 120)
              goto LABEL_193;
            LOBYTE(v3) = 55;
          }
          else
          {
            if (v23 != 99 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 109)
              goto LABEL_193;
            LOBYTE(v3) = 58;
          }
        }
        else
        {
          if (v16 != 103
            || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 114
            || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 97
            || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 100)
          {
            goto LABEL_193;
          }
          LOBYTE(v3) = 14;
        }
      }
      else if (v16 == 114)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 99
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 97
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 112)
        {
          goto LABEL_193;
        }
        LOBYTE(v3) = 68;
      }
      else if (v16 == 116)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 117
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 114
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 110)
        {
          goto LABEL_193;
        }
        LOBYTE(v3) = 64;
      }
      else
      {
        if (v16 != 118 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 109)
          goto LABEL_193;
        v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]);
        if (v17 == 105)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 110)
            goto LABEL_193;
          LOBYTE(v3) = 27;
        }
        else
        {
          if (v17 != 97 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 120)
            goto LABEL_193;
          LOBYTE(v3) = 28;
        }
      }
      break;
    case 5:
      v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1);
      if (v10 == 95)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 95
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 113
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[3]) != 101
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 109)
        {
          goto LABEL_193;
        }
        LOBYTE(v3) = 81;
      }
      else if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) > 0x6Bu)
      {
        if (v10 == 108)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 118 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 109)
            goto LABEL_193;
          v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]);
          if (v21 == 105)
          {
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 110)
              goto LABEL_193;
            LOBYTE(v3) = 39;
          }
          else
          {
            if (v21 != 97 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 120)
              goto LABEL_193;
            LOBYTE(v3) = 40;
          }
        }
        else
        {
          if (v10 != 115
            || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 118
            || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 109)
          {
            goto LABEL_193;
          }
          v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]);
          if (v14 == 105)
          {
            if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 110)
              goto LABEL_193;
            LOBYTE(v3) = 33;
          }
          else
          {
            if (v14 != 97 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 120)
              goto LABEL_193;
            LOBYTE(v3) = 34;
          }
        }
      }
      else if (v10 == 99)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 113 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 109)
          goto LABEL_193;
        v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]);
        if (v20 == 105)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 110)
            goto LABEL_193;
          LOBYTE(v3) = 53;
        }
        else
        {
          if (v20 != 97 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 120)
            goto LABEL_193;
          LOBYTE(v3) = 54;
        }
      }
      else
      {
        if (v10 != 100
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[1]) != 118
          || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[2]) != 109)
        {
          goto LABEL_193;
        }
        v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]);
        if (v12 == 105)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 110)
            goto LABEL_193;
          LOBYTE(v3) = 45;
        }
        else
        {
          if (v12 != 97 || *(_BYTE *)(MEMORY[0x1E0CBF868] + a1[4]) != 120)
            goto LABEL_193;
          LOBYTE(v3) = 46;
        }
      }
      break;
    default:
LABEL_193:
      LOBYTE(v3) = 0;
      break;
  }
  return v3;
}

uint64_t WebCore::cssPrimitiveValueUnitFromTrie<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v6;
  int v7;
  char v8;
  BOOL v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  if (a2 == 2)
  {
    v2 = *a1 | (32 * (*a1 - 65 < 0x1A));
    if (v2 == 112)
    {
      v3 = a1[1] | (32 * (a1[1] - 65 < 0x1A));
      switch(v3)
      {
        case 'x':
          LOBYTE(v4) = 6;
          return v4;
        case 'c':
          LOBYTE(v4) = 11;
          return v4;
        case 't':
          LOBYTE(v4) = 10;
          return v4;
      }
    }
    else
    {
      switch(v2)
      {
        case 'c':
          LODWORD(v4) = a1[1] | (32 * (a1[1] - 65 < 0x1A));
          if ((_DWORD)v4 == 109)
            v8 = 7;
          else
            v8 = 0;
          v9 = (_DWORD)v4 == 104;
          LOBYTE(v4) = 69;
          goto LABEL_16;
        case 'e':
          LODWORD(v4) = a1[1] | (32 * (a1[1] - 65 < 0x1A));
          if ((_DWORD)v4 == 120)
            v8 = 5;
          else
            v8 = 0;
          v9 = (_DWORD)v4 == 109;
          LOBYTE(v4) = 4;
          goto LABEL_16;
        case 'f':
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x72)
            break;
          LOBYTE(v4) = 59;
          return v4;
        case 'h':
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x7A)
            break;
          LOBYTE(v4) = 17;
          return v4;
        case 'i':
          LODWORD(v4) = a1[1] | (32 * (a1[1] - 65 < 0x1A));
          if ((_DWORD)v4 == 110)
            v8 = 9;
          else
            v8 = 0;
          v9 = (_DWORD)v4 == 99;
          LOBYTE(v4) = 71;
          goto LABEL_16;
        case 'l':
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x68)
            break;
          LOBYTE(v4) = 61;
          return v4;
        case 'm':
          LODWORD(v4) = a1[1] | (32 * (a1[1] - 65 < 0x1A));
          if ((_DWORD)v4 == 115)
            v8 = 15;
          else
            v8 = 0;
          v9 = (_DWORD)v4 == 109;
          LOBYTE(v4) = 8;
          goto LABEL_16;
        case 'v':
          v11 = a1[1] | (32 * (a1[1] - 65 < 0x1A));
          if (v11 > 104)
          {
            if (v11 == 119)
            {
              LOBYTE(v4) = 25;
              return v4;
            }
            if (v11 == 105)
            {
              LOBYTE(v4) = 30;
              return v4;
            }
          }
          else
          {
            if (v11 == 104)
            {
              LOBYTE(v4) = 26;
              return v4;
            }
            if (v11 == 98)
            {
              LOBYTE(v4) = 29;
              return v4;
            }
          }
          break;
        default:
          break;
      }
    }
LABEL_195:
    LOBYTE(v4) = 0;
    return v4;
  }
  switch(a2)
  {
    case 1:
      v10 = (*a1 | (32 * (*a1 - 65 < 0x1A))) - 113;
      if (v10 >= 8u)
        goto LABEL_195;
      return (0x380000000010003CuLL >> (8 * v10));
    case 3:
      v6 = *a1 | (32 * (*a1 - 65 < 0x1A));
      if (v6 == 100)
      {
        v7 = a1[1] | (32 * (a1[1] - 65 < 0x1A));
        switch(v7)
        {
          case 'e':
            if ((a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x67)
              goto LABEL_195;
            LOBYTE(v4) = 12;
            break;
          case 'p':
            if ((a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x69)
              goto LABEL_195;
            LOBYTE(v4) = 57;
            break;
          case 'v':
            v13 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
            if (v13 > 104)
            {
              if (v13 == 105)
              {
                LOBYTE(v4) = 48;
              }
              else
              {
                if (v13 != 119)
                  goto LABEL_195;
                LOBYTE(v4) = 43;
              }
            }
            else if (v13 == 98)
            {
              LOBYTE(v4) = 47;
            }
            else
            {
              if (v13 != 104)
                goto LABEL_195;
              LOBYTE(v4) = 44;
            }
            break;
          default:
            goto LABEL_195;
        }
      }
      else
      {
        switch(v6)
        {
          case 'k':
            if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x68
              || (a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x7A)
            {
              goto LABEL_195;
            }
            LOBYTE(v4) = 18;
            return v4;
          case 'l':
            if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x76)
              goto LABEL_195;
            v19 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
            if (v19 > 104)
            {
              if (v19 == 105)
              {
                LOBYTE(v4) = 42;
              }
              else
              {
                if (v19 != 119)
                  goto LABEL_195;
                LOBYTE(v4) = 37;
              }
            }
            else if (v19 == 98)
            {
              LOBYTE(v4) = 41;
            }
            else
            {
              if (v19 != 104)
                goto LABEL_195;
              LOBYTE(v4) = 38;
            }
            return v4;
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
            goto LABEL_195;
          case 'r':
            v12 = a1[1] | (32 * (a1[1] - 65 < 0x1A));
            if (v12 == 101)
            {
              LODWORD(v4) = a1[2] | (32 * (a1[2] - 65 < 0x1A));
              if ((_DWORD)v4 == 120)
                v8 = 66;
              else
                v8 = 0;
              v9 = (_DWORD)v4 == 109;
              LOBYTE(v4) = 65;
LABEL_16:
              if (!v9)
                LOBYTE(v4) = v8;
              return v4;
            }
            if (v12 > 104)
            {
              if (v12 != 105)
              {
                if (v12 == 108 && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x68)
                {
                  LOBYTE(v4) = 62;
                  return v4;
                }
                goto LABEL_195;
              }
              if ((a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x63)
                goto LABEL_195;
              LOBYTE(v4) = 72;
            }
            else
            {
              if (v12 != 97)
              {
                if (v12 == 99 && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x68)
                {
                  LOBYTE(v4) = 70;
                  return v4;
                }
                goto LABEL_195;
              }
              if ((a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x64)
                goto LABEL_195;
              LOBYTE(v4) = 13;
            }
            return v4;
          case 's':
            if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x76)
              goto LABEL_195;
            v20 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
            if (v20 > 104)
            {
              if (v20 == 105)
              {
                LOBYTE(v4) = 36;
              }
              else
              {
                if (v20 != 119)
                  goto LABEL_195;
                LOBYTE(v4) = 31;
              }
            }
            else if (v20 == 98)
            {
              LOBYTE(v4) = 35;
            }
            else
            {
              if (v20 != 104)
                goto LABEL_195;
              LOBYTE(v4) = 32;
            }
            return v4;
          default:
            if (v6 != 99)
              goto LABEL_195;
            v14 = a1[1] | (32 * (a1[1] - 65 < 0x1A));
            if (v14 != 113)
            {
              if (v14 == 97 && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x70)
              {
                LOBYTE(v4) = 67;
                return v4;
              }
              goto LABEL_195;
            }
            v22 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
            if (v22 > 104)
            {
              if (v22 == 105)
              {
                LOBYTE(v4) = 51;
              }
              else
              {
                if (v22 != 119)
                  goto LABEL_195;
                LOBYTE(v4) = 49;
              }
            }
            else if (v22 == 98)
            {
              LOBYTE(v4) = 52;
            }
            else
            {
              if (v22 != 104)
                goto LABEL_195;
              LOBYTE(v4) = 50;
            }
            break;
        }
      }
      return v4;
    case 4:
      v15 = *a1 | (32 * (*a1 - 65 < 0x1A));
      if (v15 <= 113)
      {
        if (v15 != 100)
        {
          if (v15 == 103
            && (a1[1] | (32 * (a1[1] - 65 < 0x1A))) == 0x72
            && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x61
            && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x64)
          {
            LOBYTE(v4) = 14;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x70)
          goto LABEL_195;
        v25 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
        if (v25 != 112)
        {
          if (v25 == 99 && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x6D)
          {
            LOBYTE(v4) = 58;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[3] | (32 * (a1[3] - 65 < 0x1A))) != 0x78)
          goto LABEL_195;
        LOBYTE(v4) = 55;
      }
      else
      {
        if (v15 == 114)
        {
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) == 0x63
            && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x61
            && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x70)
          {
            LOBYTE(v4) = 68;
            return v4;
          }
          goto LABEL_195;
        }
        if (v15 == 116)
        {
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) == 0x75
            && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x72
            && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x6E)
          {
            LOBYTE(v4) = 64;
            return v4;
          }
          goto LABEL_195;
        }
        if (v15 != 118 || (a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x6D)
          goto LABEL_195;
        v16 = a1[2] | (32 * (a1[2] - 65 < 0x1A));
        if (v16 != 105)
        {
          if (v16 == 97 && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x78)
          {
            LOBYTE(v4) = 28;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[3] | (32 * (a1[3] - 65 < 0x1A))) != 0x6E)
          goto LABEL_195;
        LOBYTE(v4) = 27;
      }
      return v4;
    case 5:
      v17 = *a1 | (32 * (*a1 - 65 < 0x1A));
      if (v17 <= 99)
      {
        if (v17 == 95)
        {
          if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) == 0x5F
            && (a1[2] | (32 * (a1[2] - 65 < 0x1A))) == 0x71
            && (a1[3] | (32 * (a1[3] - 65 < 0x1A))) == 0x65
            && (a1[4] | (32 * (a1[4] - 65 < 0x1A))) == 0x6D)
          {
            LOBYTE(v4) = 81;
            return v4;
          }
          goto LABEL_195;
        }
        if (v17 != 99
          || (a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x71
          || (a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x6D)
        {
          goto LABEL_195;
        }
        v21 = a1[3] | (32 * (a1[3] - 65 < 0x1A));
        if (v21 != 105)
        {
          if (v21 == 97 && (a1[4] | (32 * (a1[4] - 65 < 0x1A))) == 0x78)
          {
            LOBYTE(v4) = 54;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[4] | (32 * (a1[4] - 65 < 0x1A))) != 0x6E)
          goto LABEL_195;
        LOBYTE(v4) = 53;
      }
      else if (v17 == 100)
      {
        if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x76
          || (a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x6D)
        {
          goto LABEL_195;
        }
        v23 = a1[3] | (32 * (a1[3] - 65 < 0x1A));
        if (v23 != 105)
        {
          if (v23 == 97 && (a1[4] | (32 * (a1[4] - 65 < 0x1A))) == 0x78)
          {
            LOBYTE(v4) = 46;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[4] | (32 * (a1[4] - 65 < 0x1A))) != 0x6E)
          goto LABEL_195;
        LOBYTE(v4) = 45;
      }
      else if (v17 == 108)
      {
        if ((a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x76
          || (a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x6D)
        {
          goto LABEL_195;
        }
        v24 = a1[3] | (32 * (a1[3] - 65 < 0x1A));
        if (v24 != 105)
        {
          if (v24 == 97 && (a1[4] | (32 * (a1[4] - 65 < 0x1A))) == 0x78)
          {
            LOBYTE(v4) = 40;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[4] | (32 * (a1[4] - 65 < 0x1A))) != 0x6E)
          goto LABEL_195;
        LOBYTE(v4) = 39;
      }
      else
      {
        if (v17 != 115
          || (a1[1] | (32 * (a1[1] - 65 < 0x1A))) != 0x76
          || (a1[2] | (32 * (a1[2] - 65 < 0x1A))) != 0x6D)
        {
          goto LABEL_195;
        }
        v18 = a1[3] | (32 * (a1[3] - 65 < 0x1A));
        if (v18 != 105)
        {
          if (v18 == 97 && (a1[4] | (32 * (a1[4] - 65 < 0x1A))) == 0x78)
          {
            LOBYTE(v4) = 34;
            return v4;
          }
          goto LABEL_195;
        }
        if ((a1[4] | (32 * (a1[4] - 65 < 0x1A))) != 0x6E)
          goto LABEL_195;
        LOBYTE(v4) = 33;
      }
      break;
    default:
      goto LABEL_195;
  }
  return v4;
}

uint64_t WebCore::CSSParserToken::CSSParserToken(uint64_t result, char a2, char a3)
{
  *(_QWORD *)result = a2 & 0x3F | ((a3 & 3) << 6) | (*(unsigned __int8 *)(result + 3) << 24);
  *(_QWORD *)(result + 8) = 0;
  return result;
}

const char *WebCore::CSSParserToken::unitString(WebCore::CSSParserToken *this)
{
  unsigned int v1;
  unint64_t v2;
  _QWORD v4[2];

  v1 = *(_DWORD *)this;
  v2 = *((unsigned int *)this + 1) | ((unint64_t)((*(_DWORD *)this >> 22) & 1) << 32);
  v4[0] = *((_QWORD *)this + 1);
  v4[1] = v2;
  return WTF::StringView::substring((const char *)v4, (v1 >> 18) & 0xF, 0xFFFFFFFF);
}

uint64_t WebCore::CSSParserToken::numericSign(WebCore::CSSParserToken *this)
{
  return (*(_DWORD *)this >> 9) & 3;
}

uint64_t WebCore::CSSParserToken::numericValueType(WebCore::CSSParserToken *this)
{
  return (*(_DWORD *)this >> 8) & 1;
}

uint64_t WebCore::CSSParserToken::tryUseStringLiteralBacking(WebCore::CSSParserToken *this)
{
  unsigned int v1;
  uint64_t result;
  int v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v1 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x3E) != 0)
    return 0;
  if ((v1 & 0x800000) != 0)
    return 1;
  v4 = *((_DWORD *)this + 4);
  if (v4 < 0)
  {
    v4 = WebCore::cssValueKeywordID(*((_QWORD *)this + 1), *((unsigned int *)this + 1) | ((unint64_t)((v1 >> 22) & 1) << 32));
    *((_DWORD *)this + 4) = v4;
  }
  if (!(_WORD)v4)
    return 0;
  if ((unsigned __int16)v4 > 0x48Du)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v5 = (unsigned __int8 **)(&WebCore::valueList + 2 * (unsigned __int16)v4);
    v6 = *v5;
    v7 = (uint64_t)v5[1];
  }
  result = WTF::operator==(*((unsigned __int8 **)this + 1), *((unsigned int *)this + 1) | ((unint64_t)((*(_DWORD *)this >> 22) & 1) << 32), v6, v7);
  if ((_DWORD)result)
  {
    v8 = v7 - 1;
    if (!v7)
      v8 = 0;
    v9 = *(_DWORD *)this;
    *((_QWORD *)this + 1) = v6;
    *(_DWORD *)this = v9 | 0xC00000;
    *((_DWORD *)this + 1) = v8;
    return 1;
  }
  return result;
}

BOOL WebCore::CSSParserToken::operator==(WebCore::CSSParserToken *this, WebCore::CSSParserToken *a2)
{
  int v2;
  int v3;
  int v4;
  _BOOL8 result;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  unsigned int v14;
  __int32 v15;
  __int32 v16;
  BOOL v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint16x8_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8x8_t *v39;
  unsigned int v40;
  int16x8_t *v41;
  uint16x8_t v42;
  unsigned int v43;
  uint16x8_t v44;
  BOOL v45;
  uint16x8_t v46;
  unsigned int v47;
  uint16x8_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint8x16_t v59;
  unsigned int v60;
  uint8x16_t v61;
  BOOL v62;
  int v63;
  __int32 v64;
  uint64_t v65;
  int v66;
  int v67;
  uint8x16_t v68;
  unsigned int v69;
  uint8x16_t v70;
  BOOL v71;
  uint16x8_t v72;
  unsigned int v73;
  uint16x8_t v74;
  BOOL v75;
  uint16x8_t v76;
  unsigned int v77;
  uint16x8_t v78;
  BOOL v79;
  uint16x8_t v80;
  unsigned int v81;
  uint16x8_t v82;
  BOOL v83;
  uint16x8_t v84;
  unsigned int v85;
  uint16x8_t v86;
  BOOL v87;
  WebCore::CSSParserToken *v88;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)this & 0x3F;
  v4 = *(_DWORD *)a2;
  if (v3 != (*(_DWORD *)a2 & 0x3F))
    return 0;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
    case 4:
      goto LABEL_36;
    case 2:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return result;
    case 3:
      if (*((_DWORD *)this + 4) != *((_DWORD *)a2 + 4))
        return 0;
      goto LABEL_36;
    case 6:
      v15 = *((unsigned __int16 *)this + 8);
      v16 = *((unsigned __int16 *)a2 + 8);
      return v15 == v16;
    case 7:
    case 8:
      goto LABEL_3;
    case 9:
      if ((v2 & 0x3C0000) == 0)
      {
        v88 = this;
        v19 = (unsigned __int8 *)WebCore::CSSParserToken::unitString(this);
        v21 = v20;
        v22 = (unsigned __int8 *)WebCore::CSSParserToken::unitString(a2);
        result = WTF::operator==(v19, v21, v22, v23);
        if (!result)
          return result;
        v24 = *(_DWORD *)a2 ^ *(_DWORD *)v88;
        if ((v24 & 0x600) == 0 && *((double *)v88 + 2) == *((double *)a2 + 2))
          return (v24 & 0x100) == 0;
        return 0;
      }
LABEL_3:
      v7 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v8 = *((_DWORD *)this + 1);
      v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v10 = *((unsigned int *)a2 + 1);
      result = v8 == (_DWORD)v10 && v7 == v9;
      if (v7 == v9 || v8 != (_DWORD)v10)
        return result;
      if (!v8)
        return 1;
      if ((v2 & 0x400000) != 0)
      {
        if ((v4 & 0x400000) == 0)
        {
          if (!(_DWORD)v10)
            goto LABEL_113;
          if (*(_WORD *)v9 == *v7)
          {
            v39 = (uint8x8_t *)(v7 + 1);
            v40 = v10 - 1;
            v41 = (int16x8_t *)(v9 + 2);
            if (v40 < 8)
              goto LABEL_108;
            v76 = (uint16x8_t)vceqq_s16(*v41, (int16x8_t)vmovl_u8(*v39));
            v76.i16[0] = vminvq_u16(v76);
            if (v76.i32[0])
            {
              v77 = v40 & 7;
              do
              {
                v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v41 + 2 * v77), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v39 + v77)));
                v78.i16[0] = vminvq_u16(v78);
                result = v78.i32[0] != 0;
                v77 += 8;
                if (v78.i32[0])
                  v79 = v77 >= v40;
                else
                  v79 = 1;
              }
              while (!v79);
              return result;
            }
          }
          return 0;
        }
        if (!(_DWORD)v10)
          goto LABEL_113;
        if (*v7 != *v9)
          return 0;
        v11 = v10 - 1;
        if ((_DWORD)v10 == 1)
          return 1;
        v12 = (int8x16_t *)(v7 + 1);
        v13 = (int8x16_t *)(v9 + 1);
        if ((_DWORD)v10 != 2)
        {
          v14 = 32 - __clz(v10 - 2);
          if (v14 == 1)
            goto LABEL_16;
          switch(v14)
          {
            case 2u:
LABEL_31:
              if (v12->u16[0] != v13->u16[0])
                return 0;
              v25 = *(unsigned __int16 *)&v7[v10 - 2];
              v26 = *(unsigned __int16 *)&v9[v10 - 2];
              return v25 == v26;
            case 3u:
LABEL_55:
              if (v12->i32[0] != v13->i32[0])
                return 0;
              v25 = *(_DWORD *)&v7[v10 - 4];
              v31 = &v9[v10];
              goto LABEL_57;
            case 4u:
LABEL_50:
              if (v12->i64[0] != v13->i64[0])
                return 0;
              v29 = *(_QWORD *)&v7[v10 - 8];
              v30 = &v9[v10];
              return v29 == *((_QWORD *)v30 - 1);
            case 5u:
LABEL_73:
              v33 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v7[v10 - 16], *(int8x16_t *)&v9[v10 - 16]), vceqq_s8(*(int8x16_t *)(v7 + 1), *(int8x16_t *)(v9 + 1)));
              v33.i8[0] = vminvq_u8((uint8x16_t)v33);
              return v33.i32[0] != 0;
            default:
              v59 = (uint8x16_t)vceqq_s8(*v12, *v13);
              v59.i8[0] = vminvq_u8(v59);
              if (!v59.i32[0])
                return 0;
              if (v11 < 0x10)
                return 1;
              v60 = v11 & 0xF;
              do
              {
                v61 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v12 + v60), *(int8x16_t *)((char *)v13 + v60));
                v61.i8[0] = vminvq_u8(v61);
                result = v61.i32[0] != 0;
                v60 += 16;
                if (v61.i32[0])
                  v62 = v60 >= v11;
                else
                  v62 = 1;
              }
              while (!v62);
              break;
          }
          return result;
        }
        goto LABEL_53;
      }
      if ((v4 & 0x400000) != 0)
      {
        if (!(_DWORD)v10)
          goto LABEL_113;
        if (*(_WORD *)v7 == *v9)
        {
          v7 += 2;
          LODWORD(v10) = v10 - 1;
          ++v9;
          if (v10 < 8)
            goto LABEL_81;
          v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v7, (int16x8_t)vmovl_u8(*(uint8x8_t *)v9));
          v72.i16[0] = vminvq_u16(v72);
          if (v72.i32[0])
          {
            v73 = v10 & 7;
            do
            {
              v74 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v7[2 * v73], (int16x8_t)vmovl_u8(*(uint8x8_t *)&v9[v73]));
              v74.i16[0] = vminvq_u16(v74);
              result = v74.i32[0] != 0;
              v73 += 8;
              if (v74.i32[0])
                v75 = v73 >= v10;
              else
                v75 = 1;
            }
            while (!v75);
            return result;
          }
        }
        return 0;
      }
      if (!(_DWORD)v10)
        goto LABEL_113;
      if (*(unsigned __int16 *)v7 != *(unsigned __int16 *)v9)
        return 0;
      v32 = v10 - 1;
      if ((_DWORD)v10 == 1)
        return 1;
      v12 = (int8x16_t *)(v7 + 2);
      v13 = (int8x16_t *)(v9 + 2);
      if ((_DWORD)v10 != 2)
      {
        switch(31 - __clz(v10 - 2))
        {
          case 0u:
LABEL_64:
            v15 = v12->i32[0];
            v16 = v13->i32[0];
            return v15 == v16;
          case 1u:
LABEL_85:
            if (v12->i32[0] != v13->i32[0])
              return 0;
            v25 = *(_DWORD *)&v7[2 * v10 - 4];
            v31 = &v9[2 * v10];
LABEL_57:
            v26 = *((_DWORD *)v31 - 1);
            return v25 == v26;
          case 2u:
LABEL_71:
            if (v12->i64[0] != v13->i64[0])
              return 0;
            v29 = *(_QWORD *)&v7[2 * v10 - 8];
            v30 = &v9[2 * v10];
            return v29 == *((_QWORD *)v30 - 1);
          case 3u:
LABEL_142:
            v33 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v7[2 * v10 - 16], *(int16x8_t *)&v9[2 * v10 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v7 + 2), *(int16x8_t *)(v9 + 2)));
            v33.i16[0] = vminvq_u16(v33);
            return v33.i32[0] != 0;
          default:
            v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v12, *(int16x8_t *)v13);
            v80.i16[0] = vminvq_u16(v80);
            if (!v80.i32[0])
              return 0;
            if (v32 < 8)
              return 1;
            v81 = v32 & 7;
            do
            {
              v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v12 + 2 * v81), *(int16x8_t *)((char *)v13 + 2 * v81));
              v82.i16[0] = vminvq_u16(v82);
              result = v82.i32[0] != 0;
              v81 += 8;
              if (v82.i32[0])
                v83 = v81 >= v32;
              else
                v83 = 1;
            }
            while (!v83);
            break;
        }
        return result;
      }
      goto LABEL_112;
    case 16:
      v15 = *((_DWORD *)this + 4);
      v16 = *((_DWORD *)a2 + 4);
      return v15 == v16;
    default:
      if (v3 != 28)
        return result;
LABEL_36:
      v7 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v27 = *((_DWORD *)this + 1);
      v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v10 = *((unsigned int *)a2 + 1);
      result = v27 == (_DWORD)v10 && v7 == v9;
      if (v7 == v9 || v27 != (_DWORD)v10)
        return result;
      if (!v27)
        return 1;
      if ((v2 & 0x400000) != 0)
      {
        if ((v4 & 0x400000) != 0)
        {
          if ((_DWORD)v10)
          {
            if (*v7 != *v9)
              return 0;
            v11 = v10 - 1;
            if ((_DWORD)v10 == 1)
              return 1;
            v12 = (int8x16_t *)(v7 + 1);
            v13 = (int8x16_t *)(v9 + 1);
            if ((_DWORD)v10 != 2)
            {
              v28 = 32 - __clz(v10 - 2);
              if (v28 != 1)
              {
                switch(v28)
                {
                  case 2u:
                    goto LABEL_31;
                  case 3u:
                    goto LABEL_55;
                  case 4u:
                    goto LABEL_50;
                  case 5u:
                    goto LABEL_73;
                  default:
                    v68 = (uint8x16_t)vceqq_s8(*v12, *v13);
                    v68.i8[0] = vminvq_u8(v68);
                    if (!v68.i32[0])
                      return 0;
                    if (v11 < 0x10)
                      return 1;
                    v69 = v11 & 0xF;
                    do
                    {
                      v70 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v12 + v69), *(int8x16_t *)((char *)v13 + v69));
                      v70.i8[0] = vminvq_u8(v70);
                      result = v70.i32[0] != 0;
                      v69 += 16;
                      if (v70.i32[0])
                        v71 = v69 >= v11;
                      else
                        v71 = 1;
                    }
                    while (!v71);
                    break;
                }
                return result;
              }
              goto LABEL_16;
            }
LABEL_53:
            if (v11)
            {
              v15 = v12->u8[0];
              v16 = v13->u8[0];
              return v15 == v16;
            }
          }
          goto LABEL_113;
        }
        if ((_DWORD)v10)
        {
          if (*(_WORD *)v9 != *v7)
            return 0;
          v39 = (uint8x8_t *)(v7 + 1);
          v40 = v10 - 1;
          v41 = (int16x8_t *)(v9 + 2);
          if (v40 < 8)
          {
LABEL_108:
            if (v40 >= 4)
            {
              v50 = (v39->u32[0] | ((unint64_t)v39->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v17 = ((v50 | (v50 << 8)) & 0xFF00FF00FF00FFLL) == v41->i64[0];
              v51 = v40 & 3;
              v52 = (*(unsigned int *)((char *)v39->u32 + v51) | ((unint64_t)*(unsigned int *)((char *)v39->u32 + v51) << 16)) & 0xFFFF0000FFFFLL;
              v53 = (v52 | (v52 << 8)) & 0xFF00FF00FF00FFLL;
              v54 = *(uint64_t *)((char *)v41->i64 + 2 * v51);
              return v17 && v53 == v54;
            }
            if (v40 >= 2)
            {
              v63 = (v39->u16[0] | (v39->u16[0] << 8)) & 0xFF00FF;
              v64 = v41->i32[0];
              v65 = v40 & 1;
              v66 = (*(unsigned __int16 *)((char *)v39->u16 + v65) | (*(unsigned __int16 *)((char *)v39->u16 + v65) << 8)) & 0xFF00FF;
              v67 = *(__int32 *)((char *)v41->i32 + 2 * v65);
              return v63 == v64 && v66 == v67;
            }
            if (v40 == 1)
            {
              v16 = v39->u8[0];
              v15 = v41->u16[0];
              return v15 == v16;
            }
            return 1;
          }
          v42 = (uint16x8_t)vceqq_s16(*v41, (int16x8_t)vmovl_u8(*v39));
          v42.i16[0] = vminvq_u16(v42);
          if (!v42.i32[0])
            return 0;
          v43 = v40 & 7;
          do
          {
            v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v41 + 2 * v43), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v39 + v43)));
            v44.i16[0] = vminvq_u16(v44);
            result = v44.i32[0] != 0;
            v43 += 8;
            if (v44.i32[0])
              v45 = v43 >= v40;
            else
              v45 = 1;
          }
          while (!v45);
          return result;
        }
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      if ((v4 & 0x400000) == 0)
      {
        if ((_DWORD)v10)
        {
          if (*(unsigned __int16 *)v7 != *(unsigned __int16 *)v9)
            return 0;
          v32 = v10 - 1;
          if ((_DWORD)v10 == 1)
            return 1;
          v12 = (int8x16_t *)(v7 + 2);
          v13 = (int8x16_t *)(v9 + 2);
          if ((_DWORD)v10 != 2)
          {
            switch(31 - __clz(v10 - 2))
            {
              case 0u:
                goto LABEL_64;
              case 1u:
                goto LABEL_85;
              case 2u:
                goto LABEL_71;
              case 3u:
                goto LABEL_142;
              default:
                v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v12, *(int16x8_t *)v13);
                v84.i16[0] = vminvq_u16(v84);
                if (!v84.i32[0])
                  return 0;
                if (v32 < 8)
                  return 1;
                v85 = v32 & 7;
                do
                {
                  v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v12 + 2 * v85), *(int16x8_t *)((char *)v13 + 2 * v85));
                  v86.i16[0] = vminvq_u16(v86);
                  result = v86.i32[0] != 0;
                  v85 += 8;
                  if (v86.i32[0])
                    v87 = v85 >= v32;
                  else
                    v87 = 1;
                }
                while (!v87);
                break;
            }
            return result;
          }
LABEL_112:
          if (v32)
          {
LABEL_16:
            v15 = v12->u16[0];
            v16 = v13->u16[0];
            return v15 == v16;
          }
        }
        goto LABEL_113;
      }
      if (!(_DWORD)v10)
        goto LABEL_113;
      if (*(_WORD *)v7 != *v9)
        return 0;
      v7 += 2;
      LODWORD(v10) = v10 - 1;
      ++v9;
      if (v10 < 8)
      {
LABEL_81:
        if (v10 >= 4)
        {
          v34 = (*(unsigned int *)v9 | ((unint64_t)*(unsigned int *)v9 << 16)) & 0xFFFF0000FFFFLL;
          v35 = v10 & 3;
          v36 = (*(unsigned int *)&v9[v35] | ((unint64_t)*(unsigned int *)&v9[v35] << 16)) & 0xFFFF0000FFFFLL;
          v37 = (v36 | (v36 << 8)) & 0xFF00FF00FF00FFLL;
          v38 = *(_QWORD *)&v7[2 * v35];
          return ((v34 | (v34 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)v7 && v37 == v38;
        }
LABEL_114:
        if (v10 >= 2)
        {
          v55 = (*(unsigned __int16 *)v9 | (*(unsigned __int16 *)v9 << 8)) & 0xFF00FF;
          v56 = v10 & 1;
          v57 = (*(unsigned __int16 *)&v9[v56] | (*(unsigned __int16 *)&v9[v56] << 8)) & 0xFF00FF;
          v58 = *(_DWORD *)&v7[2 * v56];
          return v55 == *(_DWORD *)v7 && v57 == v58;
        }
        if ((_DWORD)v10 == 1)
          return *(unsigned __int16 *)v7 == *v9;
        return 1;
      }
      v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v7, (int16x8_t)vmovl_u8(*(uint8x8_t *)v9));
      v46.i16[0] = vminvq_u16(v46);
      if (!v46.i32[0])
        return 0;
      v47 = v10 & 7;
      do
      {
        v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v7[2 * v47], (int16x8_t)vmovl_u8(*(uint8x8_t *)&v9[v47]));
        v48.i16[0] = vminvq_u16(v48);
        result = v48.i32[0] != 0;
        v47 += 8;
        if (v48.i32[0])
          v49 = v47 >= v10;
        else
          v49 = 1;
      }
      while (!v49);
      return result;
  }
}

char *WebCore::CSSParserToken::serialize(char *result, WTF::StringBuilder *this, uint64_t a3, int a4)
{
  unsigned int v4;
  char *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringBuilder *v13;
  unsigned __int8 v14;
  int8x16_t *v16;
  const WTF::String *v17;
  _BOOL8 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringBuilder *v22;
  unsigned __int8 v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringBuilder *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int8x16_t *v35[6];

  v35[5] = *(int8x16_t **)MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)result;
  v7 = result;
  switch(*(_DWORD *)result & 0x3F)
  {
    case 0:
      if ((v4 & 0x400000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::serializeIdentifier((WTF::String *)v35, this, 0);
      result = v35[0]->i8;
      v35[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      *(_OWORD *)((char *)v35 + 2) = 0x101010001010000uLL;
      v35[3] = 0;
      LOWORD(v35[0]) = 257;
      *(int8x16_t **)((char *)&v35[2] + 2) = (int8x16_t *)0x100000001;
      if (a3)
      {
        if ((*(_DWORD *)a3 & 0x3Fu) >= 0x20)
          __break(1u);
        if (*((_BYTE *)v35 + (*(_DWORD *)a3 & 0x3F)) || (*(_DWORD *)a3 & 0x3F) == 6 && *(_WORD *)(a3 + 16) == 45)
          return (char *)WTF::StringBuilder::append();
      }
      return result;
    case 1:
      v10 = *((unsigned int *)result + 1);
      v35[0] = *((int8x16_t **)result + 1);
      v35[1] = (int8x16_t *)(v10 | ((unint64_t)((v4 >> 22) & 1) << 32));
      WTF::StringView::toString((uint64_t *)&v34, (WTF::StringView *)v35);
      WebCore::serializeIdentifier((WTF::String *)&v34, this, 0);
      v12 = v34;
      v34 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = this;
      v14 = 40;
      return (char *)WTF::StringBuilder::append((uint64_t)v13, v14);
    case 2:
      WTF::StringBuilder::append((uint64_t)this, 0x40u);
      v24 = (int8x16_t *)(*((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      v35[0] = *((int8x16_t **)v7 + 1);
      v35[1] = v24;
      goto LABEL_33;
    case 3:
      WTF::StringBuilder::append((uint64_t)this, 0x23u);
      v25 = (int8x16_t *)(*((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      v35[0] = *((int8x16_t **)v7 + 1);
      v35[1] = v25;
      WTF::StringView::toString((uint64_t *)&v34, (WTF::StringView *)v35);
      v18 = *((_DWORD *)v7 + 4) == 1;
      v17 = this;
      goto LABEL_34;
    case 4:
      WTF::StringBuilder::append();
      v26 = (int8x16_t *)(*((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      v35[0] = *((int8x16_t **)v7 + 1);
      v35[1] = v26;
      WTF::StringView::toString((uint64_t *)&v34, (WTF::StringView *)v35);
      WebCore::serializeIdentifier((WTF::String *)&v34, this, 0);
      v28 = v34;
      v34 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v27);
        else
          *(_DWORD *)v28 -= 2;
      }
      v13 = this;
      v14 = 41;
      return (char *)WTF::StringBuilder::append((uint64_t)v13, v14);
    case 5:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x1D:
      return (char *)WTF::StringBuilder::append();
    case 6:
      v29 = *((unsigned __int16 *)result + 8);
      if (v29 <= 0x3F)
      {
        switch(*((_WORD *)result + 8))
        {
          case '+':
          case '.':
            WTF::StringBuilder::append((uint64_t)this, v29);
            memset(v35, 0, 32);
            *(_WORD *)((char *)v35 + 7) = 257;
            BYTE1(v35[1]) = 1;
            return (char *)WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<>((_DWORD *)a3, (uint64_t)this, (uint64_t)v35);
          case ',':
            return (char *)WTF::StringBuilder::append((uint64_t)this, v29);
          case '-':
            goto LABEL_79;
          case '/':
            WTF::StringBuilder::append((uint64_t)this, 0x2Fu);
            memset(v35, 0, 32);
            v21 = a3;
            v22 = this;
            v23 = 42;
            return (char *)WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<char>(v21, (uint64_t)v22, (uint64_t)v35, v23);
          default:
            if (v29 != 35)
              return (char *)WTF::StringBuilder::append((uint64_t)this, v29);
LABEL_79:
            WTF::StringBuilder::append((uint64_t)this, v29);
            *(int8x16_t **)((char *)v35 + 2) = (int8x16_t *)0x101010001010000;
            *(int8x16_t **)((char *)&v35[1] + 2) = 0;
            v35[3] = 0;
            *(int8x16_t **)((char *)&v35[2] + 2) = 0;
            LOWORD(v35[0]) = 257;
            break;
        }
LABEL_38:
        v21 = a3;
        v22 = this;
        v23 = 45;
        return (char *)WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<char>(v21, (uint64_t)v22, (uint64_t)v35, v23);
      }
      if (v29 == 64)
      {
        WTF::StringBuilder::append((uint64_t)this, 0x40u);
        *(int8x16_t **)((char *)v35 + 2) = (int8x16_t *)16842752;
        *(int8x16_t **)((char *)&v35[1] + 2) = 0;
        v35[3] = 0;
        *(int8x16_t **)((char *)&v35[2] + 2) = 0;
        LOWORD(v35[0]) = 257;
        goto LABEL_38;
      }
      if (v29 == 92)
        return (char *)WTF::StringBuilder::append();
      else
        return (char *)WTF::StringBuilder::append((uint64_t)this, v29);
    case 7:
      if (a4)
      {
        WTF::StringBuilder::append((uint64_t)this, *((_QWORD *)result + 1), *((unsigned int *)result + 1) | ((unint64_t)((v4 >> 22) & 1) << 32));
      }
      else
      {
        if ((*(_DWORD *)result & 0x600) == 0x200)
          WTF::StringBuilder::append((uint64_t)this, 0x2Bu);
        WTF::StringBuilder::append<double>(this);
      }
      *(int8x16_t **)((char *)v35 + 2) = (int8x16_t *)0x101010001010000;
      *(int8x16_t **)((char *)&v35[1] + 2) = 0;
      v35[3] = 0;
      *(int8x16_t **)((char *)&v35[2] + 2) = 0;
      LOWORD(v35[0]) = 257;
      v21 = a3;
      v22 = this;
      v23 = 37;
      return (char *)WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<char>(v21, (uint64_t)v22, (uint64_t)v35, v23);
    case 8:
      if (a4)
      {
        v30 = *((unsigned int *)result + 1);
        v35[0] = *((int8x16_t **)result + 1);
        v35[1] = (int8x16_t *)(v30 | ((unint64_t)((v4 >> 22) & 1) << 32));
        LOBYTE(v34) = 37;
        return (char *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(this, v35, (char *)&v34);
      }
      else
      {
        LOBYTE(v35[0]) = 37;
        return WTF::StringBuilder::append<double,char>(this, (char *)v35);
      }
    case 9:
      if ((v4 & 0x3C0000) == 0 || a4 == 0)
      {
        WTF::StringBuilder::append<double>(this);
        v35[0] = (int8x16_t *)WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)v7);
        v35[1] = v16;
LABEL_33:
        WTF::StringView::toString((uint64_t *)&v34, (WTF::StringView *)v35);
        v17 = this;
        v18 = 0;
LABEL_34:
        WebCore::serializeIdentifier((WTF::String *)&v34, v17, (WTF::StringBuilder *)v18);
        v20 = v34;
        v34 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v19);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)this, *((_QWORD *)result + 1), *((unsigned int *)result + 1) | ((unint64_t)((v4 >> 22) & 1) << 32));
      }
      *(int8x16_t **)((char *)v35 + 2) = (int8x16_t *)0x101010001010000;
      *(int8x16_t **)((char *)&v35[1] + 2) = 0;
      v35[3] = 0;
      LOWORD(v35[0]) = 257;
      *(int8x16_t **)((char *)&v35[2] + 2) = (int8x16_t *)1;
      goto LABEL_38;
    case 0x10:
      if (a4)
      {
        v9 = *((_DWORD *)result + 4);
        if (!v9)
          return result;
      }
      else
      {
        v9 = 1;
      }
      do
      {
        result = (char *)WTF::StringBuilder::append((uint64_t)this, 0x20u);
        --v9;
      }
      while (v9);
      return result;
    case 0x13:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x3Au);
    case 0x14:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x3Bu);
    case 0x15:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x2Cu);
    case 0x16:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x28u);
    case 0x17:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x29u);
    case 0x18:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x5Bu);
    case 0x19:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x5Du);
    case 0x1A:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x7Bu);
    case 0x1B:
      return (char *)WTF::StringBuilder::append((uint64_t)this, 0x7Du);
    case 0x1C:
      v31 = *((unsigned int *)result + 1);
      v35[0] = *((int8x16_t **)result + 1);
      v35[1] = (int8x16_t *)(v31 | ((unint64_t)((v4 >> 22) & 1) << 32));
      WTF::StringView::toString((uint64_t *)&v34, (WTF::StringView *)v35);
      WebCore::serializeString((uint64_t)&v34, this, v32);
      result = (char *)v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    default:
      return result;
  }
}

uint64_t WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<char>(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result)
  {
    if ((*(_DWORD *)result & 0x3Fu) >= 0x20)
    {
      __break(1u);
    }
    else if (*(_BYTE *)(a3 + (*(_DWORD *)result & 0x3F))
           || (*(_DWORD *)result & 0x3F) == 6 && *(_WORD *)(result + 16) == a4)
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

_DWORD *WebCore::CSSParserToken::serialize(WTF::StringBuilder &,WebCore::CSSParserToken const*,WebCore::CSSParserToken::SerializationMode)const::$_0::operator()<>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if ((*result & 0x3Fu) >= 0x20)
    {
      __break(1u);
    }
    else if (*(_BYTE *)(a3 + (*result & 0x3F)))
    {
      return (_DWORD *)WTF::StringBuilder::append();
    }
  }
  return result;
}

uint64_t WTF::StringBuilder::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xFF00000000) != 0)
    return WTF::StringBuilder::append();
  else
    return WTF::StringBuilder::append();
}

char *WTF::StringBuilder::append<double>(WTF::StringBuilder *a1)
{
  char __s[124];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  v4 = strlen(__s);
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>>(a1, __s);
}

char *WTF::StringBuilder::append<double,char>(WTF::StringBuilder *a1, char *a2)
{
  char v5;
  char __s[124];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  v7 = strlen(__s);
  v5 = *a2;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(a1, __s, &v5);
}

uint64_t WebCore::parseCSSNumber<char16_t>(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_WORD *)(a1 + 2 * a2 - 2) == 46)
    return 0;
  WTF::charactersToDouble();
  return 0;
}

uint64_t WebCore::parseTransformNumberArguments<unsigned char const>(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  unsigned int v17;
  int *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char v24;

  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)result;
  while (1)
  {
    v9 = a2 - v8;
    if (a2 - v8 < 0)
      break;
    if (a3 == 1)
      v10 = 41;
    else
      v10 = 44;
    if (v8 == a2)
      return 0;
    if (v9 >= 0x10)
      v11 = 16;
    else
      v11 = a2 - v8;
    v12 = v11;
    result = v8;
    while (*(unsigned __int8 *)result != v10)
    {
      ++result;
      if (!--v12)
      {
        if (v9 < 0x11)
          return 0;
        result = (uint64_t)memchr((void *)(v8 + v11), v10, v9 - v11);
        if (!result)
          return result;
        break;
      }
    }
    v13 = result - v8;
    if (result - v8 == -1 || (_DWORD)result != (_DWORD)v8 && *(_BYTE *)((result - v8) + v8 - 1) == 46)
      return 0;
    v24 = 0;
    WTF::charactersToDouble();
    if (!v24)
      return 0;
    v16 = v15;
    v17 = (int)v15;
    if ((int)v15 <= 0xFF && *(_QWORD *)&v15 == COERCE__INT64((double)v17))
    {
      v19 = &WebCore::staticCSSValuePool[4 * v17 + 2064];
      *v19 += 2;
    }
    else
    {
      v19 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v19 = 2;
      v20 = *((_BYTE *)v19 + 6);
      *((_WORD *)v19 + 2) = 1;
      *((_BYTE *)v19 + 6) = v20 & 0xFC;
      *((double *)v19 + 1) = v16;
    }
    v23 = v19;
    v21 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a4 + 8))
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>(a4, (uint64_t *)&v23);
    }
    else
    {
      v22 = *(_QWORD *)a4;
      v23 = 0;
      *(_QWORD *)(v22 + 8 * v21) = v19;
      *(_DWORD *)(a4 + 12) = v21 + 1;
    }
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *v7 + (v13 + 1);
    *v7 = v8;
    if (!--a3)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::parseTransformNumberArguments<char16_t const>(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, float a7)
{
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  int16x8_t v15;
  int16x8_t *v16;
  int16x8_t *v17;
  int8x16_t v18;
  char *v19;
  unsigned __int16 *i;
  uint64_t v21;
  double v22;
  WTF::StringImpl *v23;
  double v24;
  int *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;

  result = *a1;
  while (1)
  {
    v12 = a2 - result;
    if (a2 - result <= -2)
      break;
    if (a3 == 1)
      v13 = 41;
    else
      v13 = 44;
    if (result == a2)
      return 0;
    v14 = (unsigned __int16 *)(result + 2 * (v12 >> 1));
    if ((unint64_t)v12 <= 0x3E)
    {
      v31 = 2 * (v12 >> 1);
      for (i = (unsigned __int16 *)result; *i != v13; ++i)
      {
        v31 -= 2;
        if (!v31)
          return 0;
      }
    }
    else
    {
      v15 = vdupq_n_s16(v13);
      v16 = (int16x8_t *)result;
      if (v12 < 15)
      {
LABEL_12:
        if (v16 >= (int16x8_t *)v14)
          return 0;
        v17 = (int16x8_t *)(v14 - 8);
        v18 = (int8x16_t)vceqq_s16(*((int16x8_t *)v14 - 1), v15);
        v15.i16[0] = vmaxvq_u16((uint16x8_t)v18);
        if (!v15.i32[0])
          return 0;
      }
      else
      {
        v17 = (int16x8_t *)result;
        while (1)
        {
          v18 = (int8x16_t)vceqq_s16(*v17, v15);
          LOWORD(a7) = vmaxvq_u16((uint16x8_t)v18);
          if (a7 != 0.0)
            break;
          v16 = v17 + 1;
          v19 = &v17[1].i8[14];
          ++v17;
          if (v19 >= (char *)v14)
            goto LABEL_12;
        }
      }
      i = (unsigned __int16 *)v17 + vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v18));
    }
    if (i == v14)
      return 0;
    v21 = (uint64_t)i - result;
    if ((unsigned __int16 *)((char *)i - result) == (unsigned __int16 *)-2)
      return 0;
    v22 = COERCE_DOUBLE(WebCore::parseCSSNumber<char16_t>(result, ((unint64_t)v21 >> 1)));
    if (!(_BYTE)v23)
      return 0;
    v24 = v22;
    if ((int)v22 <= 0xFF && *(_QWORD *)&v22 == COERCE__INT64((double)(int)v22))
    {
      v26 = &WebCore::staticCSSValuePool[4 * (int)v22 + 2064];
      *v26 += 2;
    }
    else
    {
      v26 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v26 = 2;
      v27 = *((_BYTE *)v26 + 6);
      *((_WORD *)v26 + 2) = 1;
      *((_BYTE *)v26 + 6) = v27 & 0xFC;
      *((double *)v26 + 1) = v24;
    }
    v32 = v26;
    v28 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v28 == *(_DWORD *)(a4 + 8))
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>(a4, (uint64_t *)&v32);
    }
    else
    {
      v29 = *(_QWORD *)a4;
      v32 = 0;
      *(_QWORD *)(v29 + 8 * v28) = v26;
      *(_DWORD *)(a4 + 12) = v28 + 1;
    }
    v30 = v32;
    v32 = 0;
    if (v30)
    {
      if (*v30 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v23);
      else
        *v30 -= 2;
    }
    result = *a1 + 2 * ((v21 >> 1) + 1);
    *a1 = result;
    if (!--a3)
      return 1;
  }
  __break(1u);
  return result;
}

unint64_t WebCore::parseNumericColor<char16_t>(unsigned __int16 *a1, unint64_t a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  unsigned __int16 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unsigned __int8 v29;
  unsigned __int16 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v44;
  unsigned __int16 v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unsigned __int16 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  unsigned __int8 v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  int16x8_t *v64;
  _BOOL8 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  int v71;
  int v73;
  int v74;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned __int16 *v79;
  int v80;
  unsigned __int16 *v81;
  float v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  double v90;

  v12 = a2 - 4;
  if (a2 >= 4 && *a1 == 35)
  {
    v13 = WebCore::parseHexColorInternal<char16_t>(a1 + 1, a2 - 1);
    if (BYTE4(v13))
    {
      v62 = v13 & 0xFFFFFF00;
      goto LABEL_53;
    }
  }
  if ((a3 & 1) == 0 && (a2 == 6 || a2 == 3))
  {
    v13 = WebCore::parseHexColorInternal<char16_t>(a1, a2);
    if (BYTE4(v13))
    {
      v62 = v13 & 0xFFFFFF00;
      v60 = 1;
      return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
    }
  }
  if (a2 >= 5)
  {
    if (a1[4] != 40
      || (*a1 & 0xFFDF) != 0x52
      || (a1[1] & 0xFFDF) != 0x47
      || (a1[2] & 0xFFDF) != 0x42
      || (a1[3] & 0xFFDF) != 0x41)
    {
      goto LABEL_28;
    }
    v89 = 0;
    v87 = (uint64_t)(a1 + 5);
    v88 = a2 - 5;
    v14 = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x2Cu, &v89, a4, a5, a6, a7, a8, a9);
    if (v14 < 0x100u)
      goto LABEL_70;
    v21 = v14;
    v22 = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x2Cu, &v89, v15, v16, v17, v18, v19, v20);
    if (v22 < 0x100u)
      goto LABEL_70;
    v29 = v22;
    v30 = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x2Cu, &v89, v23, v24, v25, v26, v27, v28);
    if (v30 < 0x100u || !v88)
      goto LABEL_70;
    v37 = -(uint64_t)v88;
    v38 = (unsigned __int16 *)v87;
    v39 = v88 - 2;
    v40 = -v87;
    while (1)
    {
      v41 = *v38;
      if (v41 > 0x20 || ((1 << v41) & 0x100003600) == 0)
        break;
      ++v38;
      --v39;
      v40 -= 2;
      if (__CFADD__(v37++, 1))
        goto LABEL_70;
    }
    v65 = v41 == 45;
    v66 = v41 == 45 ? -1 : 0;
    v67 = v66 - v37;
    if ((unint64_t)(v66 - v37) < 2)
      goto LABEL_70;
    v68 = 2 * v65 + 2 * (v66 + v39);
    if (*(unsigned __int16 *)((char *)v38 + v68 + 2) != 41)
      goto LABEL_70;
    v69 = *(unsigned __int16 *)((char *)v38 + v68);
    if ((v69 - 48) > 9)
      goto LABEL_70;
    v70 = v30;
    v71 = v38[v65];
    if ((v71 - 48) >= 2)
    {
      if (v71 != 46)
      {
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v79 = &v38[v65];
        while (1)
        {
          v80 = v79[v76];
          if (v80 == 41)
            break;
          if ((v80 - 48) >= 0xA)
          {
            v60 = 0;
            if (v77)
              goto LABEL_108;
            LOBYTE(v13) = 0;
            v62 = 0;
            if (v80 != 46)
              return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
            v77 = 1;
            v78 = v76;
          }
          v60 = 0;
          LOBYTE(v13) = 0;
          v62 = 0;
          if (v67 == ++v76)
            return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
        }
        v60 = 0;
        if (v77)
          v85 = v76 - 1 == v78;
        else
          v85 = 0;
        v86 = v85;
        if (!v76)
          goto LABEL_108;
        LOBYTE(v13) = 0;
        v62 = 0;
        if ((v86 & 1) != 0)
          return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
        if (v41 == 45)
          LOBYTE(v74) = 0;
        else
          LOBYTE(v74) = -1;
        goto LABEL_110;
      }
      if ((v65 ^ 0xFFFFFFFFFFFFFFFDLL) != v37 || v38[v65 + 1] - 48 > 9)
        goto LABEL_90;
    }
    else
    {
      if (v67 != 4)
      {
        if (v67 == 2)
        {
          v73 = v41 != 45 && v71 == 49;
          v74 = v73 << 31 >> 31;
          goto LABEL_110;
        }
LABEL_90:
        v90 = 0.0;
        v13 = WebCore::parseDouble<char16_t>(2 * (v41 == 45) - v40, v67, 0x29u, &v90, v31, v32, v33, v34, v35, v36);
        if (!v13)
        {
          v60 = 0;
          goto LABEL_71;
        }
        if (v41 == 45)
        {
          v84 = 0;
        }
        else
        {
          v82 = v90;
          v83 = llroundf(v82 * 255.0);
          if (v83 >= 255)
            v83 = 255;
          v84 = v83 & ~(v83 >> 63);
        }
LABEL_111:
        v62 = (v70 << 16) | (v84 << 24) | (v29 << 8);
        goto LABEL_37;
      }
      if (v71 != 48)
        goto LABEL_90;
      v81 = &v38[v65];
      if (v81[1] != 46 || v81[2] - 48 >= 0xA)
        goto LABEL_90;
    }
    if (v41 == 45)
      LOBYTE(v74) = 0;
    else
      LOBYTE(v74) = WebCore::parseRGBAlphaValue<char16_t>(std::span<char16_t const,18446744073709551615ul> &,char)::tenthAlphaValues[v69 - 48];
LABEL_110:
    v84 = v74 | 0x100;
    goto LABEL_111;
  }
  if (a2 != 4)
    goto LABEL_70;
LABEL_28:
  v44 = a1[3];
  if ((_DWORD)v44 != 40 || (*a1 & 0xFFDF) != 0x52 || (a1[1] & 0xFFDF) != 0x47 || (a1[2] & 0xFFDF) != 0x42)
  {
    v63 = a2 - 5;
    if (a2 >= 5
      && a1[4] == 40
      && (*a1 & 0xFFDF) == 0x48
      && (a1[1] & 0xFFDF) == 0x53
      && (v44 & 0xFFFFFFDF) == 0x41
      && (a1[2] & 0xFFDF) == 0x4C)
    {
      v64 = (int16x8_t *)(a1 + 5);
    }
    else
    {
      if ((_DWORD)v44 != 40)
        goto LABEL_70;
      if ((*a1 & 0xFFDF) != 0x48)
        goto LABEL_70;
      if ((a1[1] & 0xFFDF) != 0x53)
        goto LABEL_70;
      v44 = a1[2] & 0xFFDF;
      if ((_DWORD)v44 != 76)
        goto LABEL_70;
      v64 = (int16x8_t *)(a1 + 4);
      v63 = v12;
    }
    v13 = WebCore::parseLegacyHSL<char16_t>(v64, v63, v44, *(float *)&a6);
    v62 = v13 & 0xFFFFFF00;
    v60 = BYTE4(v13);
    return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
  }
  LOBYTE(v90) = 0;
  v87 = (uint64_t)(a1 + 4);
  v88 = v12;
  v45 = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x2Cu, &v90, a4, a5, a6, a7, a8, a9);
  if (v45 < 0x100u
    || (v21 = v45,
        v52 = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x2Cu, &v90, v46, v47, v48, v49, v50, v51),
        v52 < 0x100u))
  {
LABEL_70:
    v60 = 0;
    LOBYTE(v13) = 0;
LABEL_71:
    v62 = 0;
    return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
  }
  v59 = v52;
  LODWORD(v13) = WebCore::parseColorIntOrPercentage<char16_t>(&v87, 0x29u, &v90, v53, v54, v55, v56, v57, v58);
  v60 = 0;
  if ((unsigned __int16)v13 < 0x100u)
  {
LABEL_108:
    LOBYTE(v13) = 0;
    v62 = 0;
    return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
  }
  v61 = v13;
  LOBYTE(v13) = 0;
  v62 = 0;
  if (!v88)
  {
    v62 = (v59 << 8) | (v61 << 16) | 0xFF000000;
LABEL_37:
    LOBYTE(v13) = v21;
LABEL_53:
    v60 = 1;
  }
  return v62 & 0xFFFFFF00 | v13 | (unint64_t)(v60 << 32);
}

unint64_t WebCore::parseColorIntOrPercentage<unsigned char>(unsigned __int8 **a1, unsigned __int8 a2, unsigned __int8 *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  float v27;
  uint64_t v28;
  unint64_t result;
  BOOL v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  double v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  double v42;

  v9 = a1[1];
  if (!v9)
    goto LABEL_32;
  v10 = 0;
  v11 = a2;
  v12 = *a1;
  while (1)
  {
    v13 = v10[(_QWORD)v12];
    if (v13 > 0x20 || ((1 << v13) & 0x100003600) == 0)
      break;
    if (v9 == ++v10)
      goto LABEL_31;
  }
  if (v13 != 45)
  {
    v15 = &v10[(_QWORD)v12];
    v16 = v9 - v10;
    v17 = v13;
    goto LABEL_11;
  }
  if (v9 - 1 != v10)
  {
    v16 = (unint64_t)&v9[~(unint64_t)v10];
    v32 = &v10[(_QWORD)v12];
    v33 = v32[1];
    v15 = v32 + 1;
    v17 = v33;
LABEL_11:
    if (v17 - 48 <= 9)
    {
      v18 = 0.0;
      do
      {
        if (!v16)
          goto LABEL_31;
        v19 = *v15;
        if (v19 - 48 > 9)
          goto LABEL_20;
        a7 = -48.0;
        v18 = (double)v19 + v18 * 10.0 + -48.0;
        --v16;
        ++v15;
      }
      while (v18 < 255.0);
      if (!v16)
        goto LABEL_31;
      v20 = 0;
      while (1)
      {
        v19 = v15[v20];
        if (v19 - 48 > 9)
          break;
        LOBYTE(v9) = 0;
        v22 = 0;
        if (v16 == ++v20)
          return v9 | (v22 << 8);
      }
      v15 += v20;
      v16 -= v20;
      v18 = 255.0;
LABEL_20:
      v21 = *a3;
      if (v21 == 1)
      {
        LOBYTE(v9) = 0;
        v22 = 0;
        if (v19 == 37 || v19 == 46)
          return v9 | (v22 << 8);
      }
      else
      {
        if (v19 == 46)
        {
          v34 = v18;
          v38 = v13;
          v37 = v11;
          v35 = a3;
          v36 = a1;
          v40 = v16;
          v42 = 0.0;
          v39 = v15;
          result = WebCore::parseDouble<unsigned char>((uint64_t)v15, v16, 0x25u, &v42, v18, 255.0, 10.0, a7, a8, a9);
          if (!result)
            goto LABEL_31;
          v30 = v40 >= result;
          v31 = v40 - result;
          v41 = v40 - result;
          if (!v30 || !v31)
          {
            __break(1u);
            return result;
          }
          v15 = &v39[result];
          if (v39[result] != 37)
            goto LABEL_31;
          v18 = v34 + v42;
          a3 = v35;
          a1 = v36;
          v21 = *v35;
          v16 = v41;
          v11 = v37;
          v13 = v38;
        }
        v19 = *v15;
        if (v21 == 3)
        {
          if (v19 != 37)
            goto LABEL_31;
          goto LABEL_43;
        }
      }
      if (v19 != 37)
      {
        *a3 = 1;
LABEL_25:
        v23 = v15 + 1;
        v24 = 1 - v16;
        while (1)
        {
          v25 = *(v23 - 1);
          if (v25 > 0x20 || ((1 << v25) & 0x100003600) == 0)
            break;
          ++v23;
          if (++v24 == 1)
            goto LABEL_31;
        }
        if (v25 == v11)
        {
          *a1 = v23;
          a1[1] = (unsigned __int8 *)-(uint64_t)v24;
          if (v13 == 45)
          {
            LOBYTE(v9) = 0;
          }
          else
          {
            v27 = v18;
            v28 = llroundf(v27);
            if (v28 >= 255)
              v28 = 255;
            LODWORD(v9) = v28 & ~(v28 >> 63);
          }
          v22 = 1;
          return v9 | (v22 << 8);
        }
        goto LABEL_31;
      }
LABEL_43:
      *a3 = 3;
      v18 = v18 / 100.0 * 255.0;
      if (v18 > 255.0)
        v18 = 255.0;
      if (!--v16)
        goto LABEL_31;
      ++v15;
      goto LABEL_25;
    }
  }
LABEL_31:
  LOBYTE(v9) = 0;
LABEL_32:
  v22 = 0;
  return v9 | (v22 << 8);
}

uint64_t WebCore::parseLegacyHSL<unsigned char>@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  int v15;
  _BYTE *v16;
  unsigned __int8 v17;
  long double v18;
  float v19;
  double v20;
  float v21;
  float v22;
  double v23;
  float v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a1 == &a1[a2])
    {
LABEL_40:
      v17 = 0;
LABEL_41:
      v28 = 0;
      return (v28 << 32) | ((v3 & 0xFFFFFF) << 8) | v17;
    }
    a3 = 16;
    if (a2 < 0x10)
      a3 = a2;
    v11 = a3;
    v12 = a1;
    while (*v12 != 44)
    {
      ++v12;
      if (!--v11)
      {
        if (a2 < 0x11)
          goto LABEL_40;
        v12 = memchr(&a1[a3], 44, a2 - a3);
        if (!v12)
          goto LABEL_40;
        break;
      }
    }
    v13 = v12 - a1;
    if (v12 - a1 == -1)
      goto LABEL_40;
    if (a2 >= v13)
    {
      if (v13 < 4)
      {
        if (!v13)
          goto LABEL_40;
        v14 = (_BYTE *)(v12 - a1);
      }
      else
      {
        v14 = (_BYTE *)(v13 - 3);
        v15 = *(v12 - 3) | 0x20;
        if (v15 != 114)
        {
          if (v15 == 100 && (*(v12 - 2) & 0xDF) == 0x45)
          {
            v16 = (_BYTE *)(v12 - a1);
            if ((*(v12 - 1) & 0xDF) != 0x47)
              goto LABEL_24;
            goto LABEL_20;
          }
LABEL_23:
          v16 = (_BYTE *)(v12 - a1);
          goto LABEL_24;
        }
        if ((*(v12 - 2) & 0xDF) != 0x41 || (*(v12 - 1) & 0xDF) != 0x44)
          goto LABEL_23;
      }
LABEL_20:
      v16 = v14;
LABEL_24:
      if (a1[(_QWORD)v16 - 1] == 46)
        goto LABEL_40;
      WTF::charactersToDouble();
      v17 = 0;
      goto LABEL_41;
    }
  }
  __break(1u);
  if ((_DWORD)a3 != 41)
    goto LABEL_40;
  if (v4 != 12)
  {
    if (v4 == 13)
      v5 = v5 * 57.2957795;
    else
      v5 = 0.0;
  }
  v18 = fmod(v5, 360.0);
  v19 = fmod(v18 + 360.0, 360.0);
  v20 = 1.0;
  if (v7 <= 1.0)
    v20 = v7;
  if (v7 < 0.0)
    v20 = 0.0;
  v21 = v20;
  if (v6 >= 0.0)
    v23 = v6;
  else
    v23 = 0.0;
  v24 = v23;
  v22 = v8;
  WebCore::convertToColor<WebCore::HSLFunctionLegacy,(WebCore::CSSColorFunctionForm)1>(&v33, v19, v24, v22, v21);
  v26 = bswap32(v33);
  if ((v33 & 0x8000000000000) != 0)
    v27 = 0;
  else
    v27 = v26;
  v28 = ((v33 & 0x8000000000000uLL) >> 51) ^ 1;
  if ((v33 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v25);
    }
  }
  v17 = v27;
  v3 = v27 >> 8;
  return (v28 << 32) | ((v3 & 0xFFFFFF) << 8) | v17;
}

unint64_t WebCore::parseDouble<unsigned char>(uint64_t a1, unint64_t a2, unsigned __int8 a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  double v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;

  if (!a2)
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a3;
  while (1)
  {
    v14 = *(unsigned __int8 *)(a1 + v10);
    if (v14 == v13)
      break;
    if ((v14 - 48) >= 0xA)
    {
      v15 = 0;
      if (v11 || v14 != 46)
        return v15;
      v11 = 1;
      v12 = v10;
    }
    if (a2 == ++v10)
      return 0;
  }
  v15 = 0;
  if (v11)
    v16 = v10 - 1 == v12;
  else
    v16 = 0;
  v17 = v16;
  if (v10 && (v17 & 1) == 0)
  {
    v18 = 0;
    v19 = 0.0;
    do
    {
      if (a2 == v18)
        goto LABEL_41;
      v20 = *(unsigned __int8 *)(a1 + v18);
      if (v20 == 46)
        goto LABEL_23;
      v19 = (double)v20 + v19 * 10.0 + -48.0;
      ++v18;
    }
    while (v10 != v18);
    v18 = v10;
LABEL_23:
    v21 = v10 - v18;
    if (v10 - v18 == 1)
    {
LABEL_38:
      *a4 = v19;
      return v10;
    }
    v22 = v18 + 1;
    if (v18 + 1 >= v10)
    {
      v29 = 0.0;
LABEL_37:
      v19 = v19 + v29;
      goto LABEL_38;
    }
    if (a2 <= v22)
      v23 = v18 + 1;
    else
      v23 = a2;
    v24 = v23 + ~v18;
    v25 = v21 - 2;
    if (v24 < v25)
      v25 = v24;
    if (v25 >= 5)
      v25 = 5;
    if (v24 != v25)
    {
      v26 = 0.0;
      v27 = 1.0;
      do
      {
        LOBYTE(a10) = *(_BYTE *)(a1 + v22);
        v28 = (double)*(unint64_t *)&a10 + v26 * 10.0;
        a10 = -48.0;
        v26 = v28 + -48.0;
        v27 = v27 * 10.0;
        if (v22 + 1 >= v10)
          break;
        ++v22;
      }
      while (v27 < 1000000.0);
      v29 = v26 / v27;
      goto LABEL_37;
    }
LABEL_41:
    __break(1u);
    return 0;
  }
  return v15;
}

uint64_t WebCore::checkForValidDouble<unsigned char>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (!a2)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v5 = *(unsigned __int8 *)(a1 + v2);
    if (v5 == 41)
      break;
    if ((v5 - 48) >= 0xA)
    {
      v6 = 0;
      if (v3 || v5 != 46)
        return v6;
      v3 = 1;
      v4 = v2;
    }
    if (a2 == ++v2)
    {
      v2 = 0;
      break;
    }
  }
  if (v4 != v2 - 1 || v3 == 0)
    return v2;
  else
    return 0;
}

void WebCore::convertToColor<WebCore::HSLFunctionLegacy,(WebCore::CSSColorFunctionForm)1>(uint64_t *a1, float a2, float a3, float a4, float a5)
{
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v45;
  float v46;

  if (a3 <= 100.0 && (a4 >= 0.0 ? (v7 = a4 <= 100.0) : (v7 = 0), v7))
  {
    v46 = a5 * 255.0;
    v8 = a2 / 30.0;
    v9 = a3 * 0.01;
    v10 = a4 * 0.01;
    if ((float)(1.0 - v10) >= v10)
      v11 = a4 * 0.01;
    else
      v11 = 1.0 - v10;
    v12 = fmodf(v8 + 0.0, 12.0);
    v13 = v12 + -3.0;
    v14 = 9.0 - v12;
    if (v14 >= v13)
      v14 = v13;
    if (v14 > 1.0)
      v14 = 1.0;
    v15 = -(float)(v9 * v11);
    v16 = v10 + (float)(v15 * fmaxf(v14, -1.0));
    v17 = fmodf(v8 + 8.0, 12.0);
    v18 = v17 + -3.0;
    v19 = 9.0 - v17;
    if (v19 >= v18)
      v19 = v18;
    if (v19 > 1.0)
      v19 = 1.0;
    v20 = v10 + (float)(v15 * fmaxf(v19, -1.0));
    v21 = fmodf(v8 + 4.0, 12.0);
    v22 = v21 + -3.0;
    v23 = 9.0 - v21;
    if (v23 >= v22)
      v23 = v22;
    if (v23 > 1.0)
      v23 = 1.0;
    v24 = v10 + (float)(v15 * fmaxf(v23, -1.0));
    v25 = v16 * 255.0;
    if (v16 > 1.0)
      v25 = 255.0;
    v26 = v20 * 255.0;
    if (v20 > 1.0)
      v26 = 255.0;
    v27 = v24 * 255.0;
    if (v24 > 1.0)
      v27 = 255.0;
    if (v16 >= 0.0)
      v28 = v25;
    else
      v28 = 0.0;
    if (v20 >= 0.0)
      v29 = v26;
    else
      v29 = 0.0;
    if (v24 >= 0.0)
      v30 = v27;
    else
      v30 = 0.0;
    v31 = llroundf(v28);
    v32 = 255;
    if (v31 >= 255)
      v31 = 255;
    v33 = llroundf(v29);
    v34 = v31 & ~(v31 >> 63);
    if (v33 >= 255)
      v35 = 255;
    else
      v35 = v33;
    v36 = llroundf(v30);
    v37 = v35 & ~(v35 >> 63);
    if (v36 >= 255)
      v38 = 255;
    else
      v38 = v36;
    v39 = llroundf(v46);
    v40 = v38 & ~(v38 >> 63);
    if (v39 < 255)
      v32 = v39;
    v41 = bswap32((v40 << 16) | ((v32 & ~(v32 >> 63)) << 24) | (v37 << 8) | v34) | 0x1104000000000000;
  }
  else
  {
    v45 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v45 = 1;
    *(float *)(v45 + 4) = a2;
    *(float *)(v45 + 8) = a3;
    v41 = v45 | 0x80C000000000000;
    *(float *)(v45 + 12) = a4;
    *(float *)(v45 + 16) = a5;
  }
  *a1 = v41;
}

unint64_t WebCore::parseColorIntOrPercentage<char16_t>(_QWORD *a1, unsigned __int8 a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v9;
  int v12;
  _WORD *v13;
  unsigned int v14;
  int v16;
  int v17;
  unint64_t result;
  unsigned int v19;
  double v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  _WORD *v24;
  unint64_t v25;
  unsigned int v26;
  float v28;
  uint64_t v29;
  double v30;

  v9 = a1[1];
  if (!v9)
    goto LABEL_8;
  v12 = a2;
  v13 = (_WORD *)(*a1 + 2);
  while (1)
  {
    v14 = (unsigned __int16)*(v13 - 1);
    if (v14 > 0x20 || ((1 << v14) & 0x100003600) == 0)
      break;
    ++v13;
    if (!--v9)
      goto LABEL_8;
  }
  if (v14 == 45)
  {
    if (!--v9)
      goto LABEL_8;
    v19 = (unsigned __int16)*v13;
  }
  else
  {
    --v13;
    v19 = v14;
  }
  if (v19 - 48 <= 9)
  {
    v20 = 0.0;
    do
    {
      if (!v9)
        goto LABEL_8;
      v21 = (unsigned __int16)*v13;
      if (v21 - 48 > 9)
        goto LABEL_24;
      a5 = (double)v21 + v20 * 10.0;
      a6 = -48.0;
      v20 = a5 + -48.0;
      --v9;
      ++v13;
    }
    while (a5 + -48.0 < 255.0);
    if (!v9)
      goto LABEL_8;
    while (1)
    {
      v21 = (unsigned __int16)*v13;
      if (v21 - 48 > 9)
        break;
      LOBYTE(v16) = 0;
      v17 = 0;
      ++v13;
      if (!--v9)
        return v16 | (v17 << 8);
    }
    v20 = 255.0;
LABEL_24:
    v22 = *a3;
    if (v22 == 1)
    {
      LOBYTE(v16) = 0;
      v17 = 0;
      if (v21 == 37 || v21 == 46)
        return v16 | (v17 << 8);
    }
    else
    {
      if (v21 == 46)
      {
        v30 = 0.0;
        result = WebCore::parseDouble<char16_t>((unint64_t)v13, v9, 0x25u, &v30, 10.0, a5, a6, a7, a8, a9);
        if (!result)
          goto LABEL_8;
        v23 = v9 >= result;
        v9 -= result;
        if (!v23 || !v9)
        {
          __break(1u);
          return result;
        }
        v13 += result;
        if (*v13 != 37)
          goto LABEL_8;
        v20 = v20 + v30;
        v22 = *a3;
      }
      v21 = (unsigned __int16)*v13;
      if (v22 == 3)
      {
        if (v21 != 37)
          goto LABEL_8;
        goto LABEL_39;
      }
    }
    if (v21 != 37)
    {
      *a3 = 1;
      goto LABEL_45;
    }
LABEL_39:
    *a3 = 3;
    if (v20 / 100.0 * 255.0 <= 255.0)
      v20 = v20 / 100.0 * 255.0;
    else
      v20 = 255.0;
    if (!--v9)
      goto LABEL_8;
    ++v13;
LABEL_45:
    v24 = v13 + 1;
    v25 = 1 - v9;
    while (1)
    {
      v26 = (unsigned __int16)*(v24 - 1);
      if (v26 > 0x20 || ((1 << v26) & 0x100003600) == 0)
        break;
      LOBYTE(v16) = 0;
      v17 = 0;
      ++v24;
      if (++v25 == 1)
        return v16 | (v17 << 8);
    }
    if (v26 == v12)
    {
      *a1 = v24;
      a1[1] = -(uint64_t)v25;
      if (v14 == 45)
      {
        LOBYTE(v16) = 0;
      }
      else
      {
        v28 = v20;
        v29 = llroundf(v28);
        if (v29 >= 255)
          v29 = 255;
        v16 = v29 & ~(v29 >> 63);
      }
      v17 = 1;
      return v16 | (v17 << 8);
    }
  }
LABEL_8:
  LOBYTE(v16) = 0;
  v17 = 0;
  return v16 | (v17 << 8);
}

uint64_t WebCore::parseLegacyHSL<char16_t>@<X0>(int16x8_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S2>)
{
  char *v4;
  int v5;
  double v6;
  double v7;
  double v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v12;
  unsigned __int16 *v13;
  int16x8_t *v14;
  int16x8_t v15;
  int16x8_t *v16;
  int8x16_t v17;
  int16x8_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int8 *v23;
  uint64_t v24;
  __int8 *v25;
  long double v26;
  float v27;
  double v28;
  float v29;
  float v30;
  double v31;
  float v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  uint64_t v40;

  if ((uint64_t)(2 * a2) > -2)
  {
    if (a1 == (int16x8_t *)((char *)a1 + 2 * a2))
      goto LABEL_3;
    a3 = (uint64_t)(2 * a2) >> 1;
    v12 = 2 * a3;
    if (2 * a3 > -2)
    {
      v13 = (unsigned __int16 *)a1 + a3;
      if (v12 <= 0x3E)
      {
        v19 = (unsigned __int16 *)a1;
        while (1)
        {
          LODWORD(v4) = *v19;
          if ((_DWORD)v4 == 44)
            break;
          ++v19;
          v12 -= 2;
          if (!v12)
            goto LABEL_3;
        }
      }
      else
      {
        v14 = a1;
        if ((uint64_t)(2 * a2) < 15)
        {
LABEL_12:
          if (v14 >= (int16x8_t *)v13)
            goto LABEL_3;
          v16 = (int16x8_t *)(v13 - 8);
          v18.i64[0] = 0x2C002C002C002CLL;
          v18.i64[1] = 0x2C002C002C002CLL;
          v17 = (int8x16_t)vceqq_s16(*((int16x8_t *)v13 - 1), v18);
          v18.i16[0] = vmaxvq_u16((uint16x8_t)v17);
          if (!v18.i32[0])
            goto LABEL_3;
        }
        else
        {
          v15.i64[0] = 0x2C002C002C002CLL;
          v15.i64[1] = 0x2C002C002C002CLL;
          v16 = a1;
          while (1)
          {
            v17 = (int8x16_t)vceqq_s16(*v16, v15);
            LOWORD(a4) = vmaxvq_u16((uint16x8_t)v17);
            if (a4 != 0.0)
              break;
            v14 = v16 + 1;
            v4 = &v16[1].i8[14];
            ++v16;
            if (v4 >= (char *)v13)
              goto LABEL_12;
          }
        }
        v19 = (unsigned __int16 *)v16
            + vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v17));
      }
      if (v19 == v13 || (a3 = (char *)v19 - (char *)a1, (char *)v19 - (char *)a1 == -2))
      {
LABEL_3:
        v9 = 0;
LABEL_4:
        v10 = 0;
        return (v10 << 32) | (((unint64_t)v4 & 0xFFFFFF) << 8) | v9;
      }
      v20 = a3 >> 1;
      if (a2 >= a3 >> 1)
      {
        if ((unint64_t)a3 < 7)
        {
          if (a1 == (int16x8_t *)v19)
            goto LABEL_3;
          v21 = a3 >> 1;
          goto LABEL_30;
        }
        v21 = v20 - 3;
        v22 = a1->u16[v20 - 3] | 0x20;
        if (v22 == 114)
        {
          v25 = &a1->i8[2 * v20];
          if ((*((_WORD *)v25 - 2) & 0xFFDF) == 0x41 && (*((_WORD *)v25 - 1) & 0xFFDF) == 0x44)
            goto LABEL_30;
        }
        else if (v22 == 100)
        {
          v23 = &a1->i8[2 * v20];
          if ((*((_WORD *)v23 - 2) & 0xFFDF) == 0x45)
          {
            v24 = v20;
            if ((*((_WORD *)v23 - 1) & 0xFFDF) != 0x47)
            {
LABEL_34:
              if (a1->i16[v24 - 1] != 46)
              {
                WTF::charactersToDouble();
                v9 = 0;
                goto LABEL_4;
              }
              goto LABEL_3;
            }
LABEL_30:
            v24 = v21;
            goto LABEL_34;
          }
        }
        v24 = v20;
        goto LABEL_34;
      }
    }
  }
  __break(1u);
  if ((_DWORD)a3 != 41)
    goto LABEL_3;
  if (v5 != 12)
  {
    if (v5 == 13)
      v6 = v6 * 57.2957795;
    else
      v6 = 0.0;
  }
  v26 = fmod(v6, 360.0);
  v27 = fmod(v26 + 360.0, 360.0);
  v28 = 1.0;
  if (v8 <= 1.0)
    v28 = v8;
  if (v8 < 0.0)
    v28 = 0.0;
  v29 = v28;
  v31 = v39;
  if (v39 < 0.0)
    v31 = 0.0;
  v32 = v31;
  v30 = v7;
  WebCore::convertToColor<WebCore::HSLFunctionLegacy,(WebCore::CSSColorFunctionForm)1>(&v40, v27, v32, v30, v29);
  v34 = bswap32(v40);
  if ((v40 & 0x8000000000000) != 0)
    v35 = 0;
  else
    v35 = v34;
  v10 = ((v40 & 0x8000000000000uLL) >> 51) ^ 1;
  if ((v40 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v33);
    }
  }
  v9 = v35;
  v4 = (char *)(v35 >> 8);
  return (v10 << 32) | (((unint64_t)v4 & 0xFFFFFF) << 8) | v9;
}

unint64_t WebCore::parseDouble<char16_t>(unint64_t result, unint64_t a2, unsigned __int8 a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  double v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;

  if (!a2)
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a3;
  while (1)
  {
    v14 = *(unsigned __int16 *)(result + 2 * v10);
    if (v14 == v13)
      break;
    if ((v14 - 48) >= 0xA)
    {
      v15 = 0;
      if (v11 || v14 != 46)
        return v15;
      v11 = 1;
      v12 = v10;
    }
    if (a2 == ++v10)
      return 0;
  }
  v15 = 0;
  if (v11)
    v16 = v10 - 1 == v12;
  else
    v16 = 0;
  v17 = v16;
  if (!v10 || (v17 & 1) != 0)
    return v15;
  v18 = 0;
  v19 = 0.0;
  do
  {
    if (a2 == v18)
      goto LABEL_39;
    v20 = *(unsigned __int16 *)(result + 2 * v18);
    if (v20 == 46)
      goto LABEL_24;
    v19 = (double)v20 + v19 * 10.0 + -48.0;
    ++v18;
  }
  while (v10 != v18);
  v18 = v10;
LABEL_24:
  if (v10 - v18 == 1)
  {
LABEL_38:
    *a4 = v19;
    return v10;
  }
  v21 = v18 + 1;
  v22 = 0.0;
  if (v18 + 1 >= v10)
  {
LABEL_37:
    v19 = v19 + v22;
    goto LABEL_38;
  }
  if (a2 > v21)
    v21 = a2;
  v23 = v21 + ~v18;
  v24 = v10 - v18 - 2;
  if (v23 < v24)
    v24 = v23;
  if (v24 >= 5)
    v24 = 5;
  if (v23 != v24)
  {
    v25 = 0.0;
    v26 = 1.0;
    do
    {
      LOWORD(a10) = *(_WORD *)(result + 2 + 2 * v18);
      v27 = (double)*(unint64_t *)&a10 + v25 * 10.0;
      a10 = -48.0;
      v25 = v27 + -48.0;
      v26 = v26 * 10.0;
      if (v18 + 2 >= v10)
        break;
      ++v18;
    }
    while (v26 < 1000000.0);
    v22 = v25 / v26;
    goto LABEL_37;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::CSSProperty,256ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 0x101)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 256;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 28))
  {
    v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FontFeatureValues::~FontFeatureValues(WebCore::FontFeatureValues *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::FontFeatureValues::~FontFeatureValues(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)this = off_1E339BAC8;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v33 = *((_QWORD *)this + 7);
    v9 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)this + 7);
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          v12 = *(WTF **)(v10 + 8);
          if (v12)
          {
            *(_QWORD *)(v10 + 8) = 0;
            *(_DWORD *)(v10 + 16) = 0;
            WTF::fastFree(v12, a2);
            v11 = *(WTF::StringImpl **)v10;
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 24;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v33 - 16), a2);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v34 = *((_QWORD *)this + 6);
    v13 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v13)
    {
      v14 = *((_QWORD *)this + 6);
      do
      {
        v15 = *(WTF::StringImpl **)v14;
        if (*(_QWORD *)v14 != -1)
        {
          v16 = *(WTF **)(v14 + 8);
          if (v16)
          {
            *(_QWORD *)(v14 + 8) = 0;
            *(_DWORD *)(v14 + 16) = 0;
            WTF::fastFree(v16, a2);
            v15 = *(WTF::StringImpl **)v14;
          }
          *(_QWORD *)v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        v14 += 24;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v34 - 16), a2);
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v35 = *((_QWORD *)this + 5);
    v17 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v17)
    {
      v18 = *((_QWORD *)this + 5);
      do
      {
        v19 = *(WTF::StringImpl **)v18;
        if (*(_QWORD *)v18 != -1)
        {
          v20 = *(WTF **)(v18 + 8);
          if (v20)
          {
            *(_QWORD *)(v18 + 8) = 0;
            *(_DWORD *)(v18 + 16) = 0;
            WTF::fastFree(v20, a2);
            v19 = *(WTF::StringImpl **)v18;
          }
          *(_QWORD *)v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v35 - 16), a2);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v36 = *((_QWORD *)this + 4);
    v21 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v21)
    {
      v22 = *((_QWORD *)this + 4);
      do
      {
        v23 = *(WTF::StringImpl **)v22;
        if (*(_QWORD *)v22 != -1)
        {
          v24 = *(WTF **)(v22 + 8);
          if (v24)
          {
            *(_QWORD *)(v22 + 8) = 0;
            *(_DWORD *)(v22 + 16) = 0;
            WTF::fastFree(v24, a2);
            v23 = *(WTF::StringImpl **)v22;
          }
          *(_QWORD *)v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        v22 += 24;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v36 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v37 = *((_QWORD *)this + 3);
    v25 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v25)
    {
      v26 = *((_QWORD *)this + 3);
      do
      {
        v27 = *(WTF::StringImpl **)v26;
        if (*(_QWORD *)v26 != -1)
        {
          v28 = *(WTF **)(v26 + 8);
          if (v28)
          {
            *(_QWORD *)(v26 + 8) = 0;
            *(_DWORD *)(v26 + 16) = 0;
            WTF::fastFree(v28, a2);
            v27 = *(WTF::StringImpl **)v26;
          }
          *(_QWORD *)v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v27 -= 2;
          }
        }
        v26 += 24;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v37 - 16), a2);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v38 = *((_QWORD *)this + 2);
    v29 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v29)
    {
      v30 = *((_QWORD *)this + 2);
      do
      {
        v31 = *(WTF::StringImpl **)v30;
        if (*(_QWORD *)v30 != -1)
        {
          v32 = *(WTF **)(v30 + 8);
          if (v32)
          {
            *(_QWORD *)(v30 + 8) = 0;
            *(_DWORD *)(v30 + 16) = 0;
            WTF::fastFree(v32, a2);
            v31 = *(WTF::StringImpl **)v30;
          }
          *(_QWORD *)v30 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        v30 += 24;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v38 - 16), a2);
  }
}

BOOL _ZZZN7WebCore13CSSParserImpl16consumeScopeRuleENS_19CSSParserTokenRangeES1_ENK3__0clEvENKUlRT_NSt3__18optionalINS0_16AncestorRuleTypeEEEE_clINS_15CSSSelectorListEEEDaS4_S8_(__int128 ***a1, WTF::StringImpl **a2, __int16 a3)
{
  char v3;
  __int128 **v6;
  __int128 *v7;
  __int128 **v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  _BOOL8 v13;
  __int128 **v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  int v23;
  int v24;
  int v25;
  __int128 *v26;
  __int128 *v27;
  WebCore::StyleSheetContents *v28;
  int v29;
  int32x4_t v30;
  int16x8_t v31;
  _BOOL4 v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  int v40;
  __int128 **v41;
  __int128 *v42;
  __int128 *v43;
  char v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  WebCore::MutableCSSSelector *v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  WTF *v54;
  void *v55;
  WTF::StringImpl *v56;
  char v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _QWORD v61[2];

  v3 = a3;
  v6 = a1[1];
  v7 = **a1;
  if (v7 >= (*a1)[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0x16)
    return 0;
  v8 = *a1;
  v10 = **a1;
  v9 = (*a1)[1];
  if (v10 == v9)
  {
    v11 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v10 = *v8;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *v8 = v10;
  }
  while (1)
  {
    if (v10 < v9 || (v11 & 1) != 0)
    {
      if (v10 >= v9)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *(_DWORD *)v10;
    }
    else
    {
      v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v11 = 1;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)((char *)*v8 + 24);
    *v8 = v10;
  }
  v14 = *a1;
  v15 = **a1;
  v16 = (*a1)[1];
  if (v15 >= v16)
  {
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v11 & 1) == 0)
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v14 = *a1;
      v15 = **a1;
      v16 = (*a1)[1];
    }
    v11 = 1;
  }
  else
  {
    v17 = **a1;
  }
  if (v15 != v16)
  {
    v18 = v11;
    while (1)
    {
      if (v15 >= v16)
      {
        if ((v18 & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v14 = *a1;
          v11 = 1;
        }
        v18 = 1;
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      if ((*(_DWORD *)v15 & 0x3F) == 0x17)
        break;
      v19 = 0;
      v20 = *v14;
      v21 = v14[1];
      v22 = v18;
      do
      {
        if (v20 == v21)
        {
          if ((v22 & 1) == 0)
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v11 = 1;
            v18 = 1;
          }
          v22 = 1;
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          *v14 = (__int128 *)((char *)v20 + 24);
        }
        v23 = *(_DWORD *)v20 >> 6;
        if (v23 == 2)
          v24 = -1;
        else
          v24 = 0;
        if (v23 == 1)
          v25 = 1;
        else
          v25 = v24;
        v19 += v25;
        if (!v19)
          break;
        v20 = *v14;
      }
      while (*v14 < v21);
      v14 = *a1;
      v15 = **a1;
      v16 = (*a1)[1];
      if (v15 == v16)
        goto LABEL_40;
    }
    v26 = *v14;
    if (*v14 >= v14[1])
      v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v11 & 1) != 0)
      goto LABEL_41;
    goto LABEL_58;
  }
LABEL_40:
  v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  if ((v11 & 1) == 0)
  {
LABEL_58:
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
LABEL_41:
  if (v17 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v17 = v14[1];
  if (v26 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v26 = v14[1];
  v61[0] = v17;
  v61[1] = v26;
  v27 = v6[8];
  v28 = (WebCore::StyleSheetContents *)v6[9];
  v29 = *((unsigned __int8 *)v27 + 53);
  v30 = vdupq_n_s32(*(unsigned __int16 *)((char *)v27 + 51) | (v29 << 16));
  LOBYTE(v56) = *((_BYTE *)v27 + 48);
  v31 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v30 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
  *(int8x8_t *)v31.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v31), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)&v56 + 1) = vmovn_s16(v31).u32[0];
  BYTE5(v56) = v29 & 1;
  BYTE6(v56) = (v29 & 0x40) != 0;
  HIBYTE(v56) = (*(_DWORD *)((_BYTE *)v27 + 54) & 0x20000000) != 0;
  v57 = 0;
  if (v28)
  {
    ++*(_DWORD *)v28;
    v32 = HIBYTE(a3) != 0;
    WebCore::parseMutableCSSSelectorList((uint64_t)v61, &v56, v28, (WTF::AtomString *)(HIBYTE(a3) != 0), 1, (uint64_t)&v58);
    if (*(_DWORD *)v28 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v28, v33);
      WTF::fastFree(v54, v55);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  else
  {
    v32 = HIBYTE(a3) != 0;
    WebCore::parseMutableCSSSelectorList((uint64_t)v61, &v56, 0, (WTF::AtomString *)(HIBYTE(a3) != 0), 1, (uint64_t)&v58);
  }
  if (v60)
  {
    if (v32)
    {
      v34 = v58;
      if (v3)
      {
        v35 = 8 * v60;
        do
        {
          v36 = *(_QWORD *)v34;
          v34 = (WTF *)((char *)v34 + 8);
          WebCore::appendImplicitSelectorPseudoClassScopeIfNeeded(v36);
          v35 -= 8;
        }
        while (v35);
      }
      else
      {
        v37 = 8 * v60;
        do
        {
          v38 = *(_QWORD *)v34;
          v34 = (WTF *)((char *)v34 + 8);
          WebCore::appendImplicitSelectorNestingParentIfNeeded(v38);
          v37 -= 8;
        }
        while (v37);
      }
    }
    v39 = **a1;
    if (v39 >= (*a1)[1])
    {
      v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v40 = *(_DWORD *)v39 & 0x3F;
    v13 = v40 == 23;
    if (v40 == 23)
    {
      v41 = *a1;
      v43 = **a1;
      v42 = (*a1)[1];
      if (v43 == v42)
      {
        v44 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v43 = *v41;
        }
      }
      else
      {
        v43 = (__int128 *)((char *)v43 + 24);
        *v41 = v43;
      }
      while (1)
      {
        if (v43 < v42 || (v44 & 1) != 0)
        {
          if (v43 >= v42)
            v43 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v45 = *(_DWORD *)v43;
        }
        else
        {
          v45 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v45;
          v44 = 1;
        }
        if ((v45 & 0x3F) != 0x10)
          break;
        v43 = (__int128 *)((char *)*v41 + 24);
        *v41 = v43;
      }
      WebCore::CSSSelectorList::CSSSelectorList(&v56, (uint64_t)&v58);
      v46 = v56;
      v56 = 0;
      v33 = *a2;
      *a2 = v46;
      if (v33)
      {
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)a2, v33);
        v33 = v56;
        v56 = 0;
        if (v33)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v56, v33);
      }
    }
    if (v60)
    {
      v47 = v58;
      v48 = 8 * v60;
      do
      {
        v49 = *(WebCore::MutableCSSSelector **)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v49, v33);
          WTF::fastFree(v50, v51);
        }
        v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
    }
  }
  else
  {
    v13 = 0;
  }
  v52 = v58;
  if (v58)
  {
    v58 = 0;
    v59 = 0;
    WTF::fastFree(v52, v33);
  }
  return v13;
}

char **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::CSSCustomPropertySyntax::Type> [14]>::tryGet<WTF::StringView>(const char *a1, uint64_t a2)
{
  BOOL v2;
  char **v3;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  uint16x8_t v8;
  uint16x8_t v9;
  BOOL v10;
  BOOL v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint64_t v14;
  uint8x16_t v16;
  BOOL v17;
  _BOOL4 v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;

  v2 = (_DWORD)a2 != 5;
  if (a1 == "angle" || (_DWORD)a2 != 5)
  {
    if (a1 != "angle" || (_DWORD)a2 != 5)
      goto LABEL_13;
    goto LABEL_10;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 != 97 || *(_QWORD *)(a1 + 2) != 0x65006C0067006ELL)
      goto LABEL_13;
LABEL_10:
    v3 = &WebCore::CSSCustomPropertySyntax::typeForTypeName(WTF::StringView)::mappings;
    return v3 + 2;
  }
  if (*a1 == 97 && *(_WORD *)(a1 + 1) == 26478 && *(_WORD *)(a1 + 3) == 25964)
    goto LABEL_10;
LABEL_13:
  if (a1 == "color" || (_DWORD)a2 != 5)
  {
    if (a1 != "color" || (_DWORD)a2 != 5)
    {
      if (a1 == "custom-ident" || (_DWORD)a2 != 12)
      {
        if (a1 != "custom-ident" || (_DWORD)a2 != 12)
          goto LABEL_34;
      }
      else if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 != 99 || *(_QWORD *)(a1 + 1) != 0x64692D6D6F747375 || *(_QWORD *)(a1 + 4) != 0x746E6564692D6D6FLL)
          goto LABEL_34;
      }
      else
      {
        if (*(_WORD *)a1 != 99)
          goto LABEL_34;
        v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969EF830);
        v8.i16[0] = vminvq_u16(v8);
        if (!v8.i32[0])
          goto LABEL_34;
        v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1969EF840);
        v9.i16[0] = vminvq_u16(v9);
        if (!v9.i32[0])
          goto LABEL_34;
      }
      v3 = &off_1E339B998;
      return v3 + 2;
    }
LABEL_24:
    v3 = &off_1E339B980;
    return v3 + 2;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 99 || *(_WORD *)(a1 + 1) != 27759 || *(_WORD *)(a1 + 3) != 29295)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (*(_WORD *)a1 == 99 && *(_QWORD *)(a1 + 2) == 0x72006F006C006FLL)
    goto LABEL_24;
LABEL_34:
  if (a1 == "image")
    v2 = 1;
  if (!v2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 105 || *(_WORD *)(a1 + 1) != 24941 || *(_WORD *)(a1 + 3) != 25959)
      {
LABEL_54:
        v5 = 0;
        v6 = a1 == "percentage";
        v7 = 1;
        goto LABEL_55;
      }
    }
    else if (*(_WORD *)a1 != 105 || *(_QWORD *)(a1 + 2) != 0x6500670061006DLL)
    {
      goto LABEL_54;
    }
    goto LABEL_44;
  }
  if (a1 == "image" && (_DWORD)a2 == 5)
  {
LABEL_44:
    v3 = &off_1E339B9B0;
    return v3 + 2;
  }
  if (a1 != "integer" && (_DWORD)a2 == 7)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 105 || *(_DWORD *)(a1 + 1) != 1734702190 || *(_DWORD *)(a1 + 3) != 1919248229)
        goto LABEL_54;
    }
    else if (*(_WORD *)a1 != 105
           || *(_QWORD *)(a1 + 2) != 0x6700650074006ELL
           || *(_QWORD *)(a1 + 6) != 0x72006500670065)
    {
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  if (a1 == "integer" && (_DWORD)a2 == 7)
  {
LABEL_51:
    v3 = &off_1E339B9C8;
    return v3 + 2;
  }
  v10 = (_DWORD)a2 != 6;
  if (a1 == "length" || (_DWORD)a2 != 6)
  {
    if (a1 == "length" && (_DWORD)a2 == 6)
      goto LABEL_77;
    if (a1 == "length-percentage" || (_DWORD)a2 != 17)
    {
      if (a1 != "length-percentage" || (_DWORD)a2 != 17)
        goto LABEL_83;
    }
    else if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 108 || *(_QWORD *)(a1 + 1) != 0x65702D6874676E65)
        goto LABEL_83;
      if (*(_QWORD *)(a1 + 9) != 0x656761746E656372)
      {
        if (a1 == "number")
          v10 = 1;
        v11 = 0;
        if (!v10)
          goto LABEL_89;
        goto LABEL_186;
      }
    }
    else
    {
      if (*(_WORD *)a1 != 108)
        goto LABEL_83;
      v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969EF850);
      v28.i16[0] = vminvq_u16(v28);
      if (!v28.i32[0])
        goto LABEL_83;
      v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 18), (int16x8_t)xmmword_1969EF860);
      v29.i16[0] = vminvq_u16(v29);
      if (!v29.i32[0])
        goto LABEL_83;
    }
    v3 = &off_1E339B9F8;
    return v3 + 2;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 == 108 && *(_DWORD *)(a1 + 1) == 1952935525 && *(_DWORD *)(a1 + 2) == 1752459118)
    {
LABEL_77:
      v3 = &off_1E339B9E0;
      return v3 + 2;
    }
    goto LABEL_82;
  }
  if (*(_WORD *)a1 != 108)
  {
LABEL_82:
    v10 = 0;
    goto LABEL_83;
  }
  v10 = 0;
  if (*(_QWORD *)(a1 + 2) == 0x740067006E0065 && *(_QWORD *)(a1 + 4) == 0x6800740067006ELL)
    goto LABEL_77;
LABEL_83:
  v11 = a1 == "number";
  if ((_DWORD)a2 != 6)
    v11 = 0;
  if (a1 == "number" || v10)
  {
LABEL_186:
    if (!v11)
      goto LABEL_96;
LABEL_92:
    v3 = &off_1E339BA10;
    return v3 + 2;
  }
  if (!(_DWORD)a2)
    goto LABEL_92;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a1 == 110 && *(_QWORD *)(a1 + 2) == 0x650062006D0075 && *(_QWORD *)(a1 + 4) == 0x7200650062006DLL)
      goto LABEL_92;
    goto LABEL_96;
  }
LABEL_89:
  if (*a1 == 110 && *(_DWORD *)(a1 + 1) == 1700949365 && *(_DWORD *)(a1 + 2) == 1919246957)
    goto LABEL_92;
LABEL_96:
  v5 = (_DWORD)a2 == 10;
  v7 = (_DWORD)a2 != 10;
  v6 = a1 == "percentage";
  if (a1 != "percentage" && (_DWORD)a2 == 10)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 112 && *(_QWORD *)(a1 + 1) == 0x6761746E65637265 && *(_QWORD *)(a1 + 2) == 0x656761746E656372)
        goto LABEL_57;
    }
    else if (*(_WORD *)a1 == 112)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969EF870);
      v19.i16[0] = vminvq_u16(v19);
      v7 = v19.i8[0];
      if (v19.i32[0])
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969EF860);
        v20.i16[0] = vminvq_u16(v20);
        v7 = v20.i8[0];
        if (v20.i32[0])
          goto LABEL_57;
      }
      goto LABEL_103;
    }
    v7 = 0;
    goto LABEL_103;
  }
LABEL_55:
  if (v6 && v5)
  {
LABEL_57:
    v3 = &off_1E339BA28;
    return v3 + 2;
  }
LABEL_103:
  if (a1 == "resolution" || v7)
  {
    if (a1 != "resolution")
      v5 = 0;
    if (v5)
      goto LABEL_123;
  }
  else
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 114 || *(_QWORD *)(a1 + 1) != 0x6F6974756C6F7365 || *(_QWORD *)(a1 + 2) != 0x6E6F6974756C6F73)
        return 0;
LABEL_123:
      v3 = &off_1E339BA40;
      return v3 + 2;
    }
    if (*(_WORD *)a1 != 114)
      return 0;
    v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969EF880);
    v12.i16[0] = vminvq_u16(v12);
    if (!v12.i32[0])
      return 0;
    v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1968C0B80);
    v13.i16[0] = vminvq_u16(v13);
    if (v13.i32[0])
      goto LABEL_123;
  }
  if (a1 == "time" || (_DWORD)a2 != 4)
  {
    if (a1 == "time" && (_DWORD)a2 == 4)
      goto LABEL_119;
    if (a1 == "transform-function" || (_DWORD)a2 != 18)
    {
      if (a1 == "transform-function" && (_DWORD)a2 == 18)
        goto LABEL_140;
      v17 = (_DWORD)a2 == 14;
      v18 = a1 == "transform-list";
      if (a1 != "transform-list" && (_DWORD)a2 == 14)
      {
        if ((a2 & 0xFF00000000) != 0)
        {
          if (*a1 != 116 || *(_QWORD *)(a1 + 1) != 0x6D726F66736E6172 || *(_QWORD *)(a1 + 6) != 0x7473696C2D6D726FLL)
            return 0;
        }
        else
        {
          if (*(_WORD *)a1 != 116)
            return 0;
          v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2620);
          v26.i16[0] = vminvq_u16(v26);
          if (!v26.i32[0])
            return 0;
          v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 12), (int16x8_t)xmmword_1969EF8D0);
          v27.i16[0] = vminvq_u16(v27);
          v24 = v27.i32[0];
          if (!v27.i32[0])
          {
            v25 = a1 == "url";
            goto LABEL_170;
          }
        }
LABEL_159:
        v3 = &off_1E339BA88;
        return v3 + 2;
      }
    }
    else
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 != 116)
          return 0;
        v16 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a1 + 2), (int8x16_t)xmmword_1969EF8A0), vceqq_s8(*(int8x16_t *)(a1 + 1), (int8x16_t)xmmword_1969EF890));
        v16.i8[0] = vminvq_u8(v16);
        if (!v16.i32[0])
          return 0;
LABEL_140:
        v3 = &off_1E339BA70;
        return v3 + 2;
      }
      if (*(_WORD *)a1 != 116)
        return 0;
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968A2620);
      v21.i16[0] = vminvq_u16(v21);
      if (!v21.i32[0])
        return 0;
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_1969EF8B0);
      v22.i16[0] = vminvq_u16(v22);
      if (v22.i32[0])
      {
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 20), (int16x8_t)xmmword_1969EF8C0);
        v23.i16[0] = vminvq_u16(v23);
        if (v23.i32[0])
          goto LABEL_140;
      }
      v17 = 0;
      v18 = a1 == "transform-list";
    }
    if (v18 && v17)
      goto LABEL_159;
    v24 = a2 == 3;
    v25 = a1 == "url";
    if (a1 != "url" && (_DWORD)a2 == 3)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 != 117 || *(_WORD *)(a1 + 1) != 27762)
          return 0;
      }
      else if (*(_WORD *)a1 != 117 || *(_DWORD *)(a1 + 2) != 7078002)
      {
        return 0;
      }
      goto LABEL_171;
    }
LABEL_170:
    if (!v25 || !v24)
      return 0;
LABEL_171:
    v3 = &off_1E339BAA0;
    return v3 + 2;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 116 || *(_WORD *)(a1 + 1) != 28009 || *((_WORD *)a1 + 1) != 25965)
      return 0;
LABEL_119:
    v3 = &off_1E339BA58;
    return v3 + 2;
  }
  if (*(_WORD *)a1 != 116)
    return 0;
  v14 = 0;
  if (*(_DWORD *)(a1 + 2) == 7143529 && *((_DWORD *)a1 + 1) == 6619245)
    goto LABEL_119;
  return (char **)v14;
}

WebCore::StyleSheetContents *WTF::RefCounted<WebCore::StyleSheetContents>::deref(WebCore::StyleSheetContents *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
    return (WebCore::StyleSheetContents *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

double WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserImpl::NestingContext>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  int v12;

  v3 = WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 4128 * v4;
  *(_QWORD *)v6 = v6 + 16;
  *(_QWORD *)(v6 + 8) = 256;
  v7 = *(const void **)v3;
  if (*(_QWORD *)v3 == v3 + 16)
  {
    memcpy((void *)(v6 + 16), v7, 16 * *(unsigned int *)(v3 + 12));
  }
  else
  {
    *(_QWORD *)v3 = v3 + 16;
    *(_QWORD *)v6 = v7;
    v12 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 256;
    *(_DWORD *)(v6 + 8) = v12;
  }
  v8 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v6 + 12) = v8;
  v9 = v5 + 4128 * v4;
  result = 0.0;
  *(_OWORD *)(v9 + 4112) = 0u;
  v11 = *(_QWORD *)(v3 + 4112);
  *(_QWORD *)(v3 + 4112) = 0;
  *(_QWORD *)(v9 + 4112) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 4120);
  *(_DWORD *)(v3 + 4120) = 0;
  *(_DWORD *)(v9 + 4120) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 4124);
  *(_DWORD *)(v3 + 4124) = 0;
  *(_DWORD *)(v9 + 4124) = v11;
  ++a1[3];
  return result;
}

WTF *WTF::Vector<WebCore::CSSParserImpl::NestingContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xFE040)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = (WTF *)(*(_QWORD *)result + 4128 * *((unsigned int *)result + 3));
      v8 = 4128 * v4;
      v9 = WTF::fastMalloc((WTF *)(4128 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFE0) / 0x1020;
      *(_QWORD *)v5 = v9;
      result = WTF::VectorMover<false,WebCore::CSSParserImpl::NestingContext>::move(v6, v7, v9);
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v6, v10);
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          v10 = *((_QWORD *)v9 - 2);
          *((_QWORD *)v9 - 2) = 0;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *v9;
          *v9 = 0;
          v7[4] = v11;
          LODWORD(v11) = v9[1];
          v9[1] = 0;
          v7[5] = v11;
          v12 = (WTF *)*((_QWORD *)v9 - 1);
          if (v12)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            WTF::fastFree(v12, v6);
          }
          result = (unsigned int *)*((_QWORD *)v9 - 2);
          *((_QWORD *)v9 - 2) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *result -= 2;
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<unsigned int,WebCore::Color>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          *(_DWORD *)v14 = *(_DWORD *)((char *)v5 + v13);
          *(_QWORD *)(v14 + 8) = 0;
          v15 = *(_QWORD *)((char *)v5 + v13 + 8);
          if (v15)
          {
            *(_QWORD *)(v14 + 8) = v15;
            *(_QWORD *)((char *)v5 + v13 + 8) = 0;
          }
          v13 += 16;
        }
        while (16 * v6 != v13);
        if (v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x195888330);
    }
  }
  v16 = *(unsigned int *)(a1 + 8);
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= a2)
    v19 = a2;
  else
    v19 = v18;
  if (v19 > v16)
  {
    if (v19 >> 28)
      goto LABEL_39;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = WTF::fastMalloc((WTF *)(16 * v19));
    *(_DWORD *)(a1 + 8) = v19;
    *(_QWORD *)a1 = v21;
    if ((_DWORD)v20)
    {
      v23 = (_QWORD *)(v21 + 8);
      v24 = 16 * v20;
      v25 = (_QWORD *)((char *)v5 + 8);
      do
      {
        *((_DWORD *)v23 - 2) = *((_DWORD *)v25 - 2);
        *v23 = 0;
        if (*v25)
        {
          *v23 = *v25;
          *v25 = 0;
        }
        v23 += 2;
        v25 += 2;
        v24 -= 16;
      }
      while (v24);
    }
    if (v5)
    {
      if ((WTF *)v21 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v22);
    }
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 0x11)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1958884C8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

unint64_t WTF::Vector<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          v10 = *(WTF::StringImpl ***)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[2] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[3] = v10;
          v11 = *((unsigned int *)v9 + 3);
          if ((_DWORD)v11)
          {
            v12 = *(WTF::StringImpl ***)v9;
            v13 = 8 * v11;
            do
            {
              v14 = *v12;
              *v12 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v6);
                else
                  *(_DWORD *)v14 -= 2;
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 4;
          v9 = (WTF *)((char *)v9 + 16);
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSProperty>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_WORD *)v4 = *(_WORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CSSProperty,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<WebCore::CSSProperty,256ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 16 * v4);
    if ((void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v5);
    }
  }
  return 1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>>(WTF::StringBuilder *a1, _OWORD *a2)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  int8x16_t *v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  _OWORD v24[7];
  __int128 v25;
  _OWORD __src[7];
  size_t __n[2];
  uint64_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v9 = a2[5];
      v24[4] = a2[4];
      v24[5] = v9;
      v10 = a2[7];
      v24[6] = a2[6];
      v25 = v10;
      v11 = a2[1];
      v24[0] = *a2;
      v24[1] = v11;
      v12 = a2[3];
      v24[2] = a2[2];
      v24[3] = v12;
      v13 = &result[2 * HIDWORD(v10)];
      if (HIDWORD(v10) >= 0x40)
      {
        v15 = &result[2 * (HIDWORD(v25) & 0xFFFFFFC0)];
        v14 = (int8x16_t *)v24;
        v16 = 0uLL;
        do
        {
          v29.val[0] = *v14;
          v17 = v14[1];
          v30.val[0] = v14[2];
          v18 = v14[3];
          v14 += 4;
          v19 = v18;
          v30.val[1] = 0uLL;
          v31.val[0] = v17;
          v29.val[1] = 0uLL;
          v20 = result;
          vst2q_s8(v20, v29);
          v20 += 32;
          v31.val[1] = 0uLL;
          vst2q_s8(v20, v31);
          v21 = result + 64;
          vst2q_s8(v21, v30);
          v22 = result + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
          result += 128;
        }
        while (result != v15);
        result = v15;
      }
      else
      {
        v14 = (int8x16_t *)v24;
      }
      while (result != v13)
      {
        v23 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)result = v23;
        result += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v5 = a2[5];
      __src[4] = a2[4];
      __src[5] = v5;
      v6 = a2[7];
      __src[6] = a2[6];
      *(_OWORD *)__n = v6;
      v7 = a2[1];
      __src[0] = *a2;
      __src[1] = v7;
      v8 = a2[3];
      __src[2] = a2[2];
      __src[3] = v8;
      if (HIDWORD(v6))
      {
        if (HIDWORD(v6) == 1)
          *result = __src[0];
        else
          return (char *)memcpy(result, __src, HIDWORD(__n[1]));
      }
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, char *a3)
{
  uint64_t v5;
  _WORD *result;
  _WORD *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  char v10;
  _WORD *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  __int16 v14;
  char *v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  unsigned __int128 *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  __int8 v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;

  v5 = *((_QWORD *)a1 + 1);
  if ((v5 || (v5 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0 || !*((_BYTE *)a2 + 12))
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v11 = result;
      v12 = *a2;
      v13 = a2[1];
      v14 = *a3;
      if (((unint64_t)v13 & 0xFF00000000) != 0)
      {
        v15 = (char *)result;
        if (v13 >= 0x40)
        {
          v15 = (char *)&result[v13 & 0xFFFFFFC0];
          v16 = 0uLL;
          v17 = (char *)result;
          do
          {
            v29.val[0] = *v12;
            v18 = v12[1];
            v30.val[0] = v12[2];
            v19 = v12[3];
            v12 += 4;
            v20 = v19;
            v30.val[1] = 0uLL;
            v31.val[0] = v18;
            v29.val[1] = 0uLL;
            v21 = v17;
            vst2q_s8(v21, v29);
            v21 += 32;
            v31.val[1] = 0uLL;
            vst2q_s8(v21, v31);
            v22 = v17 + 64;
            vst2q_s8(v22, v30);
            v23 = v17 + 96;
            vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
            v17 += 128;
          }
          while (v17 != v15);
        }
        while (v15 != (char *)&result[v13])
        {
          v24 = v12->u8[0];
          v12 = (int8x16_t *)((char *)v12 + 1);
          *(_WORD *)v15 = v24;
          v15 += 2;
        }
      }
      else if ((_DWORD)v13 == 1)
      {
        *result = v12->i16[0];
      }
      else if ((_DWORD)v13)
      {
        result = memcpy(result, v12, 2 * v13);
      }
      v11[v13] = v14;
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v7 = result;
      v8 = *a2;
      v9 = a2[1];
      v10 = *a3;
      if (((unint64_t)v9 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 == 1)
            *(_BYTE *)result = v8->i8[0];
          else
            result = memcpy(result, v8, v9);
        }
      }
      else
      {
        v25 = (unsigned __int128 *)result;
        if (v9 >= 0x10)
        {
          v25 = (unsigned __int128 *)((char *)result + (v9 & 0xFFFFFFF0));
          v26 = (unsigned __int128 *)result;
          do
          {
            v27 = (unsigned __int128)vld2q_s8(v8->i8);
            v8 += 2;
            *v26++ = v27;
          }
          while (v26 != v25);
        }
        while (v25 != (unsigned __int128 *)((char *)result + v9))
        {
          v28 = v8->i8[0];
          v8 = (int8x16_t *)((char *)v8 + 2);
          *(_BYTE *)v25 = v28;
          v25 = (unsigned __int128 *)((char *)v25 + 1);
        }
      }
      *((_BYTE *)v7 + v9) = v10;
    }
  }
  return result;
}

__int128 *WebCore::CSSParserTokenRange::eofToken(WebCore::CSSParserTokenRange *this)
{
  {
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
  }
  return &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
}

const WebCore::CSSParserToken *WebCore::CSSParserTokenRange::makeSubRange(WebCore::CSSParserTokenRange *this, const WebCore::CSSParserToken *a2, const WebCore::CSSParserToken *a3)
{
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
  }
  if (a2 == (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    return (const WebCore::CSSParserToken *)*((_QWORD *)this + 1);
  return a2;
}

void WebCore::CSSParserTokenRange::serialize(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  char *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD v11[2];
  int v12;
  char v13;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13 = 1;
  v5 = *a1;
  v6 = a1[1];
  if (v5 < v6)
  {
    do
    {
      v8 = v5 + 24;
      if (v5 + 24 == v6)
        v9 = 0;
      else
        v9 = (uint64_t)(v5 + 24);
      WebCore::CSSParserToken::serialize(v5, (WTF::StringBuilder *)v11, v9, a2);
      v6 = a1[1];
      v5 = v8;
    }
    while (v8 < v6);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v11, a3);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v11, v10);
}

uint64_t WebCore::cssPropertyID(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13[33];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a2 - 35) >= 0xFFFFFFDE)
  {
    v2 = a2;
    if (((unint64_t)a2 & 0xFF00000000) != 0)
    {
      v3 = 0;
      v4 = MEMORY[0x1E0CBF868];
      while (*(char *)(a1 + v3) >= 1)
      {
        v13[v3 - 1] = *(_BYTE *)(v4 + *(unsigned __int8 *)(a1 + v3));
        if (a2 == ++v3)
          goto LABEL_6;
      }
    }
    else
    {
      v10 = 0;
      while (1)
      {
        v11 = *(unsigned __int16 *)(a1 + 2 * v10);
        if ((v11 - 1) > 0x7E)
          break;
        v13[v10++ - 1] = v11 | (32 * ((v11 - 65) < 0x1A));
        if (a2 == v10)
        {
LABEL_6:
          v5 = ((_DWORD)a2 - 1);
          if (v5 <= 0x21)
          {
            v6 = WebCore::CSSPropertyNamesHash::hash((WebCore::CSSPropertyNamesHash *)&v12, a2);
            if (v6 <= 0x1E3E && ((__int16)WebCore::lookup[v6] & 0x80000000) == 0)
            {
              v7 = WebCore::lookup[v6];
              v8 = (&WebCore::wordlist)[2 * v7];
              if (v12 == *v8 && !strncmp(v13, v8 + 1, v5) && !v8[v2])
                return LOWORD((&WebCore::wordlist)[2 * v7 + 1]);
            }
          }
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::CSSPropertyParser::parseFontPaletteValuesDescriptor(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int *v5;
  uint64_t v6;
  _BOOL8 v7;
  int *v9;

  WebCore::CSSPropertyParsing::parseFontPaletteValuesDescriptor((uint64_t)a1, a2, a1[2], (uint64_t *)&v9);
  v5 = v9;
  if (!v9)
    return 0;
  v6 = a1[1];
  v7 = *a1 == v6;
  if (*a1 == v6)
  {
    WebCore::CSSPropertyParser::addProperty((uint64_t)a1, a2, 0, &v9, 0, 0);
    v5 = v9;
    v9 = 0;
    if (!v5)
      return 1;
  }
  else
  {
    v9 = 0;
  }
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
  else
    *v5 -= 2;
  return v7;
}

uint64_t WebCore::CSSPropertyParser::parsePropertyDescriptor(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int *v5;
  uint64_t v6;
  _BOOL8 v7;
  int *v9;

  WebCore::CSSPropertyParsing::parsePropertyDescriptor((char **)a1, a2, *(_QWORD *)(a1 + 16), (uint64_t *)&v9);
  v5 = v9;
  if (!v9)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)a1 == v6;
  if (*(_QWORD *)a1 == v6)
  {
    WebCore::CSSPropertyParser::addProperty(a1, a2, 0, &v9, 0, 0);
    v5 = v9;
    v9 = 0;
    if (!v5)
      return 1;
  }
  else
  {
    v9 = 0;
  }
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
  else
    *v5 -= 2;
  return v7;
}

uint64_t WebCore::CSSPropertyParser::parseSingleValue@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  char *v7;
  __int128 *v8;
  __int128 *v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  __int128 *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t result;
  char *v18;
  int *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v21 = *a2;
  v22 = a3;
  v23 = 0;
  v7 = (char *)*((_QWORD *)&v21 + 1);
  v8 = (__int128 *)*((_QWORD *)&v21 + 1);
  v9 = (__int128 *)v21;
  v11 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)v9 < *((_QWORD *)&v21 + 1) || (v10 & 1) != 0)
    {
      v12 = (unint64_t)v9 >= *((_QWORD *)&v21 + 1) ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v9;
      v13 = *(_DWORD *)v12;
    }
    else
    {
      v13 = v11 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v10 = 1;
      v11 = v13;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)((char *)v9 + 24);
    *(_QWORD *)&v21 = v9;
  }
  if (v9 == *((__int128 **)&v21 + 1))
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v10 & 1) == 0)
    {
      v11 = v11 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
    }
    v10 = 1;
  }
  else
  {
    v8 = (__int128 *)((char *)v9 + 24);
  }
  do
  {
    if ((unint64_t)v8 < *((_QWORD *)&v21 + 1) || (v10 & 1) != 0)
    {
      if ((unint64_t)v8 >= *((_QWORD *)&v21 + 1))
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v14 = v8;
      v15 = *(_DWORD *)v14;
    }
    else
    {
      v15 = v11 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      v10 = 1;
      v11 = v15;
    }
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while ((v15 & 0x3F) == 0x10);
  if ((*(_DWORD *)v9 & 0x3F) != 0)
    goto LABEL_19;
  v18 = (char *)v8 - 24;
  result = *((unsigned int *)v9 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
    *((_DWORD *)v9 + 4) = result;
  }
  if (v18 != v7 || (unsigned __int16)result - 1 > 4)
  {
LABEL_19:
    WebCore::CSSPropertyParsing::parseStyleProperty(&v20, &v21, a1, 0, a3);
    result = v20;
    if (v20)
    {
      if ((_QWORD)v21 == *((_QWORD *)&v21 + 1))
      {
        *a4 = (int *)v20;
      }
      else
      {
        *a4 = 0;
        v20 = 0;
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *a4 = 0;
    }
  }
  else
  {
    v19 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v19 += 2;
    *a4 = v19;
  }
  return result;
}

unsigned int *WebCore::maybeConsumeCSSWideKeyword(WebCore *this, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  char v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int *result;
  int *v12;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v7 = 1;
    {
      v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
    }
    v6 = v4;
    v4 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v6 = v4 + 6;
    v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  do
  {
    if (v6 < v5 || (v7 & 1) != 0)
    {
      if (v6 >= v5)
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v9 = (__int128 *)v6;
      v10 = *(_DWORD *)v9;
    }
    else
    {
      v10 = v8 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
      v7 = 1;
      v8 = v10;
    }
    v6 += 6;
  }
  while ((v10 & 0x3F) == 0x10);
  result = WebCore::CSSParserToken::id(v4);
  v12 = 0;
  if (v6 - 6 == v5 && ((_DWORD)result - 1) <= 4)
  {
    *a2 = v5;
    a2[1] = v5;
    v12 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v12 += 2;
  }
  *(_QWORD *)this = v12;
  return result;
}

_DWORD *WebCore::CSSPropertyParser::parseTypedCustomPropertyValue@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  WTF::StringImpl *v7;
  _DWORD *result;
  _DWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *a3;
  v11 = a5;
  v12 = 0;
  WebCore::CSSPropertyParser::parseTypedCustomPropertyValue((WebCore::CSSParserTokenRange *)&v10, a1, a2, a4, (uint64_t *)&v9);
  result = v9;
  if (v9)
  {
    if ((_QWORD)v10 == *((_QWORD *)&v10 + 1))
    {
      *a6 = v9;
    }
    else
    {
      *a6 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

void WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(WebCore::CSSParserTokenRange *a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  _DWORD *v23;
  WebCore *v24;
  int v25;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WebCore **v30;
  WebCore *v31;
  int v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  char v43;
  char v44;
  _DWORD *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  char *v50[5];
  int v51;
  unsigned __int8 v52;
  WTF *v53;
  uint64_t v54;
  char v55;
  uint64_t v56[3];
  WebCore *v57;
  char v58;
  char v59;

  if (*(_DWORD *)(a3 + 12))
  {
    v11 = *(__int128 **)a1;
    v10 = *((_QWORD *)a1 + 1);
    while (1)
    {
      if ((unint64_t)v11 < v10 || (v12 & 1) != 0)
      {
        if ((unint64_t)v11 >= v10)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v11;
    }
    WebCore::maybeConsumeCSSWideKeyword((WebCore *)v50, (unsigned int **)a1);
    v14 = v50[0];
    if (v50[0])
    {
      if ((*((_WORD *)v50[0] + 2) & 0x7F) == 0x50)
        v15 = *((_WORD *)v50[0] + 4);
      else
        v15 = 0;
      v36 = WTF::fastCompactMalloc((WTF *)0x60);
      *(_DWORD *)v36 = 2;
      v37 = *(_BYTE *)(v36 + 6);
      *(_WORD *)(v36 + 4) = -6144;
      *(_BYTE *)(v36 + 6) = v37 & 0xFC;
      v38 = *a2;
      if (*a2)
        *v38 += 2;
      *(_QWORD *)(v36 + 8) = v38;
      *(_WORD *)(v36 + 24) = v15;
      *(_DWORD *)(v36 + 72) = 1;
      *(_QWORD *)(v36 + 80) = 0;
      *(_QWORD *)(v36 + 88) = 0;
      *a5 = v36;
      if (*(_DWORD *)v14 != 2)
      {
        *(_DWORD *)v14 -= 2;
        return;
      }
      v39 = (uint64_t)v14;
LABEL_72:
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v39, v49);
      return;
    }
    WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(a1, a3, (uint64_t)&v57);
    v24 = v57;
    if (!v57)
    {
      *a5 = 0;
      return;
    }
    LOBYTE(v56[0]) = v58;
    v56[1] = a4;
    v56[2] = (uint64_t)a1;
    v25 = (*((unsigned __int16 *)v57 + 2) | (*((unsigned __int8 *)v57 + 6) << 16)) & 0x3F800;
    if (v25 != 135168 && v25 != 120832)
    {
      WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(WTF::AtomString const&,WebCore::CSSCustomPropertySyntax const&,WebCore::Style::BuilderState &)::$_0::operator()((uint64_t)v50, (uint64_t)v56, v57);
      if (v52)
      {
        WebCore::CSSCustomPropertyValue::createForSyntaxValue(a2, (uint64_t)v50, a5);
        if (v52 && v51 != -1)
          ((void (*)(WTF **, char **))off_1E339BAF0[v51])(&v53, v50);
      }
      else
      {
        *a5 = 0;
      }
LABEL_69:
      if (*(_DWORD *)v24 != 2)
      {
        *(_DWORD *)v24 -= 2;
        return;
      }
      v39 = (uint64_t)v24;
      goto LABEL_72;
    }
    v53 = 0;
    v54 = 0;
    v55 = (*((unsigned __int16 *)v57 + 2) >> 9) & 3;
    v27 = *((_DWORD *)v57 + 2);
    if (!v27)
    {
LABEL_53:
      v40 = WTF::fastCompactMalloc((WTF *)0x60);
      v41 = v53;
      v42 = v54;
      v53 = 0;
      v54 = 0;
      v43 = v55;
      *(_DWORD *)v40 = 2;
      v44 = *(_BYTE *)(v40 + 6);
      *(_WORD *)(v40 + 4) = -6144;
      *(_BYTE *)(v40 + 6) = v44 & 0xFC;
      v45 = *a2;
      if (*a2)
        *v45 += 2;
      *(_QWORD *)(v40 + 8) = v45;
      *(_QWORD *)(v40 + 24) = v41;
      *(_QWORD *)(v40 + 32) = v42;
      *(_BYTE *)(v40 + 40) = v43;
      *(_DWORD *)(v40 + 72) = 4;
      *(_QWORD *)(v40 + 80) = 0;
      *(_QWORD *)(v40 + 88) = 0;
      *a5 = v40;
LABEL_56:
      v46 = (unsigned int *)v53;
      if (HIDWORD(v54))
      {
        v47 = 48 * HIDWORD(v54);
        do
        {
          v48 = v46[10];
          if ((_DWORD)v48 != -1)
            ((void (*)(char **, unsigned int *))off_1E339BAF0[v48])(v50, v46);
          v46[10] = -1;
          v46 += 12;
          v47 -= 48;
        }
        while (v47);
        v46 = (unsigned int *)v53;
      }
      if (v46)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree((WTF *)v46, v49);
      }
      goto LABEL_69;
    }
    v28 = 0;
    v29 = 0;
    while (1)
    {
      if (v28 > 3)
      {
        if (*((_DWORD *)v24 + 2) <= v28)
        {
          __break(0xC471u);
          return;
        }
        v30 = (WebCore **)(*((_QWORD *)v24 + 6) + 8 * (v29 - 4));
      }
      else
      {
        v30 = (WebCore **)((char *)v24 + 8 * v29 + 16);
      }
      v31 = *v30;
      *(_DWORD *)v31 = *(_DWORD *)*v30 + 2;
      WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(WTF::AtomString const&,WebCore::CSSCustomPropertySyntax const&,WebCore::Style::BuilderState &)::$_0::operator()((uint64_t)v50, (uint64_t)v56, v31);
      v32 = v52;
      if (v52)
        break;
      *a5 = 0;
LABEL_38:
      if (*(_DWORD *)v31 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v49);
        if (!v32)
          goto LABEL_56;
      }
      else
      {
        *(_DWORD *)v31 -= 2;
        if (!v32)
          goto LABEL_56;
      }
      v28 = v29 + 1;
      v29 = (v29 + 1);
      if (v27 == v28)
        goto LABEL_53;
    }
    if (HIDWORD(v54) == (_DWORD)v54)
    {
      v33 = WTF::Vector<std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, HIDWORD(v54) + 1, (unint64_t)v50);
      v34 = (char *)v53 + 48 * HIDWORD(v54);
      *v34 = 0;
      *((_DWORD *)v34 + 10) = -1;
      v35 = *(unsigned int *)(v33 + 40);
      if ((_DWORD)v35 != -1)
      {
        ((void (*)(char *, char *, unint64_t))off_1E339BB28[v35])(&v59, v34, v33);
LABEL_34:
        *((_DWORD *)v34 + 10) = v35;
      }
    }
    else
    {
      v34 = (char *)v53 + 48 * HIDWORD(v54);
      *v34 = 0;
      *((_DWORD *)v34 + 10) = -1;
      LODWORD(v35) = v51;
      if (v51 != -1)
      {
        ((void (*)(char *, char *, char **))off_1E339BB28[v51])(&v59, v34, v50);
        goto LABEL_34;
      }
    }
    ++HIDWORD(v54);
    if (v52 && v51 != -1)
      ((void (*)(char *, char **))off_1E339BAF0[v51])(&v59, v50);
    goto LABEL_38;
  }
  v16 = *(char **)a1;
  v17 = (char *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = v17;
  v50[0] = v16;
  v50[1] = v17;
  v18 = WebCore::strictCSSParserContext(a1);
  v19 = WTF::fastMalloc((WTF *)0x60);
  WebCore::CSSVariableData::CSSVariableData(v19, v50, (const WebCore::CSSParserContext *)v18);
  v20 = WTF::fastCompactMalloc((WTF *)0x60);
  v56[0] = 0;
  *(_DWORD *)v20 = 2;
  v22 = *(_BYTE *)(v20 + 6);
  *(_WORD *)(v20 + 4) = -6144;
  *(_BYTE *)(v20 + 6) = v22 & 0xFC;
  v23 = *a2;
  if (*a2)
    *v23 += 2;
  *(_QWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 24) = v19;
  *(_DWORD *)(v20 + 72) = 2;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *a5 = v20;
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(v56, v21);
}

void WebCore::CSSPropertyParser::collectParsedCustomPropertyValueDependencies(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v5;
  char v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  __int128 *v10;
  int v11;
  WebCore::CSSValue *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::CSSValue *v17;

  v14 = *a2;
  v15 = a3;
  v16 = 0;
  v5 = (__int128 *)v14;
  v7 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)v5 < *((_QWORD *)&v14 + 1) || (v6 & 1) != 0)
    {
      v8 = (unint64_t)v5 >= *((_QWORD *)&v14 + 1) ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v5;
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v9 = v7 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v6 = 1;
      v7 = v9;
    }
    if ((v9 & 0x3F) != 0x10)
      break;
    v5 = (__int128 *)((char *)v5 + 24);
    *(_QWORD *)&v14 = v5;
  }
  if (*(_DWORD *)(a1 + 12))
  {
    while (1)
    {
      if ((unint64_t)v5 < *((_QWORD *)&v14 + 1) || (v6 & 1) != 0)
      {
        v10 = (unint64_t)v5 >= *((_QWORD *)&v14 + 1)
            ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
            : v5;
        v11 = *(_DWORD *)v10;
      }
      else
      {
        v7 = v7 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v7;
        v6 = 1;
        LOBYTE(v11) = v7;
      }
      if ((v11 & 0x3F) != 0x10)
        break;
      v5 = (__int128 *)((char *)v5 + 24);
      *(_QWORD *)&v14 = v5;
    }
    WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax((WebCore::CSSPropertyParserHelpers *)&v14, a1, (uint64_t)&v17);
    v12 = v17;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_WORD *)(a4 + 32) = 0;
    if (v12)
    {
      WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)v12, (WebCore::ComputedStyleDependencies *)a4);
      if (*(_DWORD *)v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    *(_WORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

uint64_t WebCore::CSSPropertyParser::isValidCustomPropertyValueForSyntax(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  char v4;
  unsigned int v5;
  __int128 *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  _BOOL8 v9;
  _DWORD *v11;
  _QWORD v12[4];

  if (!*(_DWORD *)(a1 + 12))
    return 1;
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = 0;
  v5 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)a2 < a3 || (v4 & 1) != 0)
    {
      v6 = (unint64_t)a2 >= a3 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : a2;
      v7 = *(_DWORD *)v6;
    }
    else
    {
      v7 = v5 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v7;
      v4 = 1;
      v5 = v7;
    }
    if ((v7 & 0x3F) != 0x10)
      break;
    a2 = (__int128 *)((char *)a2 + 24);
    v12[0] = a2;
  }
  WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax((WebCore::CSSPropertyParserHelpers *)v12, a1, (uint64_t)&v11);
  v9 = v11 != 0;
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
    else
      *v11 -= 2;
  }
  return v9;
}

void WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(WebCore::CSSPropertyParserHelpers *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF *v34;
  WTF *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *v45;
  WTF *v47;
  int v49;
  int v50;
  int v51;
  WTF *v52;
  __int128 v53;
  WTF *v54;
  int v55;
  unsigned int v56;
  _BYTE v57[32];
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[32];
  WTF *v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  _BYTE v66[40];

  v53 = *(_OWORD *)a1;
  v4 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v4)
  {
LABEL_101:
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 14;
    return;
  }
  v6 = *(_BYTE **)a2;
  v7 = *(_QWORD *)a2 + 16 * v4;
  while (1)
  {
    v8 = v6[1];
    if (v8 == 2)
      break;
    if (v8 == 1)
    {
      v64 = (WTF *)v66;
      v65 = 4;
      while (1)
      {
        WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(WebCore::CSSCustomPropertySyntax const&)::$_0::operator()<WebCore::CSSParserTokenRange,WebCore::CSSCustomPropertySyntax::Component const>((WTF::StringImpl *)&v58, a1, a1, (uint64_t)v6);
        v17 = v58;
        if (!v58)
          break;
        v63 = v58;
        v58 = 0;
        LODWORD(v18) = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v63);
          v18 = HIDWORD(v65);
          v22 = v64;
          v23 = *v21;
          *v21 = 0;
          *((_QWORD *)v22 + v18) = v23;
        }
        else
        {
          v63 = 0;
          *((_QWORD *)v64 + HIDWORD(v65)) = v17;
        }
        HIDWORD(v65) = v18 + 1;
        v19 = v63;
        v63 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v9);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v58;
        v58 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v9);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      v24 = HIDWORD(v65);
      if (HIDWORD(v65))
      {
        v54 = (WTF *)v57;
        v55 = 4;
        v25 = v64;
        if (v64 == (WTF *)v66)
        {
          memcpy(v57, v66, 8 * HIDWORD(v65));
        }
        else
        {
          v64 = (WTF *)v66;
          v54 = v25;
          v49 = v65;
          LODWORD(v65) = 4;
          v55 = v49;
        }
        HIDWORD(v65) = 0;
        v56 = v24;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v54, (uint64_t *)&v58);
        v52 = v58;
        if (v56)
        {
          v26 = v54;
          v27 = 8 * v56;
          do
          {
            v28 = *(_DWORD **)v26;
            *(_QWORD *)v26 = 0;
            if (v28)
            {
              if (*v28 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v9);
              else
                *v28 -= 2;
            }
            v26 = (WTF *)((char *)v26 + 8);
            v27 -= 8;
          }
          while (v27);
        }
        v29 = v54;
        if (v57 != (_BYTE *)v54 && v54 != 0)
        {
          v54 = 0;
          v55 = 0;
          WTF::fastFree(v29, v9);
        }
        if (HIDWORD(v65))
        {
          v31 = v64;
          v32 = 8 * HIDWORD(v65);
          do
          {
            v33 = *(_DWORD **)v31;
            *(_QWORD *)v31 = 0;
            if (v33)
            {
              if (*v33 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v9);
              else
                *v33 -= 2;
            }
            v31 = (WTF *)((char *)v31 + 8);
            v32 -= 8;
          }
          while (v32);
        }
      }
      else
      {
        v52 = 0;
      }
      v47 = v64;
      if (v66 != (_BYTE *)v64 && v64 != 0)
      {
        v64 = 0;
        LODWORD(v65) = 0;
        WTF::fastFree(v47, v9);
      }
      goto LABEL_91;
    }
    if (!v6[1])
    {
      WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(WebCore::CSSCustomPropertySyntax const&)::$_0::operator()<WebCore::CSSParserTokenRange,WebCore::CSSCustomPropertySyntax::Component const>((WTF::StringImpl *)&v52, a1, a1, (uint64_t)v6);
LABEL_91:
      v34 = v52;
      goto LABEL_92;
    }
LABEL_97:
    *(_OWORD *)a1 = v53;
    v6 += 16;
    if (v6 == (_BYTE *)v7)
      goto LABEL_101;
  }
  v64 = (WTF *)v66;
  v65 = 4;
  do
  {
    WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(WebCore::CSSCustomPropertySyntax const&)::$_0::operator()<WebCore::CSSParserTokenRange,WebCore::CSSCustomPropertySyntax::Component const>((WTF::StringImpl *)&v63, a1, a1, (uint64_t)v6);
    v10 = v63;
    if (!v63)
    {
      v34 = 0;
      goto LABEL_73;
    }
    v62 = v63;
    v63 = 0;
    LODWORD(v11) = HIDWORD(v65);
    if (HIDWORD(v65) == (_DWORD)v65)
    {
      v14 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v62);
      v11 = HIDWORD(v65);
      v15 = v64;
      v16 = *v14;
      *v14 = 0;
      *((_QWORD *)v15 + v11) = v16;
    }
    else
    {
      v62 = 0;
      *((_QWORD *)v64 + HIDWORD(v65)) = v10;
    }
    HIDWORD(v65) = v11 + 1;
    v12 = v62;
    v62 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v63;
    v63 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a1, v9));
  v58 = (WTF *)v61;
  v59 = 4;
  v35 = v64;
  if (v64 == (WTF *)v66)
  {
    v36 = HIDWORD(v65);
    memcpy(v61, v66, 8 * HIDWORD(v65));
  }
  else
  {
    v64 = (WTF *)v66;
    v58 = v35;
    v50 = v65;
    v36 = HIDWORD(v65);
    LODWORD(v65) = 4;
    v59 = v50;
  }
  HIDWORD(v65) = 0;
  v60 = v36;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v58, (uint64_t *)&v63);
  v34 = v63;
  if (v60)
  {
    v37 = v58;
    v38 = 8 * v60;
    do
    {
      v39 = *(_DWORD **)v37;
      *(_QWORD *)v37 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v9);
        else
          *v39 -= 2;
      }
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
    }
    while (v38);
  }
  v40 = v58;
  if (v61 != (_BYTE *)v58 && v58 != 0)
  {
    v58 = 0;
    v59 = 0;
    WTF::fastFree(v40, v9);
  }
LABEL_73:
  if (HIDWORD(v65))
  {
    v42 = v64;
    v43 = 8 * HIDWORD(v65);
    do
    {
      v44 = *(_DWORD **)v42;
      *(_QWORD *)v42 = 0;
      if (v44)
      {
        if (*v44 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v9);
        else
          *v44 -= 2;
      }
      v42 = (WTF *)((char *)v42 + 8);
      v43 -= 8;
    }
    while (v43);
  }
  v45 = v64;
  if (v66 != (_BYTE *)v64 && v64 != 0)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    WTF::fastFree(v45, v9);
  }
LABEL_92:
  if (!v34)
    goto LABEL_97;
  if (*(_QWORD *)a1 != *((_QWORD *)a1 + 1))
  {
    v52 = 0;
    if (*(_DWORD *)v34 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v9);
    else
      *(_DWORD *)v34 -= 2;
    goto LABEL_97;
  }
  v51 = *(_DWORD *)v34;
  *(_DWORD *)v34 += 2;
  *(_QWORD *)a3 = v34;
  *(_BYTE *)(a3 + 8) = *v6;
  v52 = 0;
  if (v51)
    *(_DWORD *)v34 = v51;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v9);
}

void WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(WTF::AtomString const&,WebCore::CSSCustomPropertySyntax const&,WebCore::Style::BuilderState &)::$_0::operator()(uint64_t a1, uint64_t a2, WebCore *this)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  char v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::CSSParserContext *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  __int128 v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  WebCore::Document *v28;
  const WebCore::RenderStyle *v29;
  uint64_t v30;
  _BYTE *v31;
  WebCore::CSSParserContext *v32;
  uint64_t *v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int v36;
  WTF::StringImpl **v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  int v42;
  char v43;
  __int128 *v44;

  switch(*(_BYTE *)a2)
  {
    case 0:
    case 1:
      if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A5FCLL);
      }
      WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(a2 + 8), this, (uint64_t)&v38);
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 6) = 0;
      v12 = BYTE4(v38);
      *(_WORD *)(a1 + 4) = WORD2(v38);
      if ((v12 - 2) >= 9)
      {
        if (v12 != 11)
          goto LABEL_16;
      }
      else
      {
        v13 = BYTE6(v38);
        *(_BYTE *)(a1 + 6) = BYTE6(v38);
        if (v13)
        {
          *(_DWORD *)a1 = v38;
LABEL_16:
          *(_DWORD *)(a1 + 40) = 0;
          goto LABEL_50;
        }
      }
      *(_DWORD *)a1 = v38;
      goto LABEL_16;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v5 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
      if ((v5 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A550);
      }
      v6 = *((_WORD *)this + 2) & 0x7F;
      v7 = 22;
      if ((v6 - 79) >= 2)
      {
        if (v6 == 77)
        {
          v7 = 20;
        }
        else if (v6 != 63)
        {
          if ((*((_WORD *)this + 2) & 0x7F) == 0x49)
          {
            v31 = *(_BYTE **)(*((_QWORD *)this + 1) + 8);
            if (v31[12] == 1)
            {
LABEL_65:
              v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v31 + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
              v5 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
            }
            else
            {
              v7 = 1;
              switch(v31[12])
              {
                case 0:
                  break;
                case 2:
                  v7 = 3;
                  break;
                case 3:
                  v7 = 74;
                  break;
                case 4:
                  v7 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_65;
                default:
                  v7 = 0;
                  break;
              }
            }
          }
          else
          {
            v7 = *((_WORD *)this + 2) & 0x7F;
          }
        }
      }
      if ((v5 & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A570);
      }
      v8 = byte_1969EFD30[WebCore::unitCategory(v7)];
      v9 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)this, v8));
      if (!v10)
        v9 = 0.0;
      *(double *)a1 = v9;
      *(_BYTE *)(a1 + 8) = v8;
      v11 = 1;
      *(_DWORD *)(a1 + 40) = 1;
      goto LABEL_51;
    case 8:
      if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A61CLL);
      }
      v15 = *((_WORD *)this + 2) & 0x7F;
      if (v15 != 24)
      {
        v29 = *(const WebCore::RenderStyle **)(*(_QWORD *)(a2 + 8) + 16);
        v28 = *(WebCore::Document **)(*(_QWORD *)(a2 + 8) + 24);
        if (v15 == 80)
        {
          v30 = *((unsigned __int16 *)this + 4);
        }
        else
        {
          if (v15 == 78)
            goto LABEL_92;
          v30 = 0;
        }
        WebCore::Style::colorFromValueID(v28, v29, v30, 0, (uint64_t)&v41);
        goto LABEL_26;
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (((unint64_t)v16 & 0x8000000000000) != 0)
      {
        v35 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFLL);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      v41 = v16;
      v42 = 0;
LABEL_26:
      while (1)
      {
        *(_QWORD *)&v38 = &v43;
        *((_QWORD *)&v38 + 1) = &v43;
        *(_QWORD *)&v39 = &v43;
        *((_QWORD *)&v39 + 1) = &v43;
        if (v42 != -1)
          break;
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_92:
        WebCore::CSSUnresolvedColor::createStyleColor(*((_QWORD *)this + 1), (uint64_t)v28, (uint64_t)v29, 0);
      }
      v44 = &v38;
      ((void (*)(__int128 **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v42])(&v44, &v41);
      *(_DWORD *)(a1 + 40) = 2;
      *(_BYTE *)(a1 + 48) = 1;
      if (v42 != -1)
        ((void (*)(__int128 *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v42])(&v38, &v41);
      return;
    case 9:
      WebCore::Style::BuilderState::createStyleImage((uint64_t *)&v38, *(uint64_t **)(a2 + 8), this);
      v11 = v38;
      if ((_QWORD)v38)
      {
        *(_QWORD *)a1 = v38;
        v14 = 3;
        goto LABEL_49;
      }
      *(_BYTE *)a1 = 0;
      goto LABEL_51;
    case 0xA:
      if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A63CLL);
      }
      v17 = 0;
      v18 = *(WebCore::CSSParserContext **)(*(_QWORD *)(a2 + 16) + 16);
      v19 = (*((unsigned __int16 *)this + 2) & 0x7Fu) - 20;
      if (v19 > 0x3C)
        goto LABEL_34;
      if (((1 << ((*((_WORD *)this + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v17 = (WTF::StringImpl *)*((_QWORD *)this + 1);
        if (!v17)
          goto LABEL_34;
        goto LABEL_33;
      }
      v32 = *(WebCore::CSSParserContext **)(*(_QWORD *)(a2 + 16) + 16);
      if (v19 == 60)
      {
        v17 = (WTF::StringImpl *)*WebCore::nameString(*((unsigned __int16 *)this + 4));
        v18 = v32;
        if (!v17)
        {
LABEL_34:
          v41 = v17;
          WebCore::CSSParserContext::completeURL(v18, (unsigned int **)&v41, &v38);
          v21 = v41;
          v41 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = (WTF::StringImpl *)*((_QWORD *)&v38 + 1);
          if (*((_QWORD *)&v38 + 1))
          {
            v23 = **((_DWORD **)&v38 + 1);
            **((_DWORD **)&v38 + 1) += 2;
            *(_QWORD *)a1 = v22;
            v24 = v40;
            *(_OWORD *)(a1 + 8) = v39;
            *(_OWORD *)(a1 + 24) = v24;
            *(_DWORD *)(a1 + 40) = 4;
            *(_BYTE *)(a1 + 48) = 1;
            *((_QWORD *)&v38 + 1) = 0;
            if (v23)
              *(_DWORD *)v22 = v23;
            else
              WTF::StringImpl::destroy(v22, v20);
          }
          else
          {
            *(_QWORD *)a1 = 0;
            v34 = v40;
            *(_OWORD *)(a1 + 8) = v39;
            *(_OWORD *)(a1 + 24) = v34;
            *(_DWORD *)(a1 + 40) = 4;
            *(_BYTE *)(a1 + 48) = 1;
            *((_QWORD *)&v38 + 1) = 0;
          }
          v25 = (WTF::StringImpl *)v38;
          *(_QWORD *)&v38 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v20);
            else
              *(_DWORD *)v25 -= 2;
          }
          return;
        }
      }
      else
      {
        if (v19 != 59)
          goto LABEL_34;
        v37 = (WTF::StringImpl **)WebCore::nameString(*((unsigned __int16 *)this + 4));
        v18 = v32;
        v17 = *v37;
        if (!v17)
          goto LABEL_34;
      }
LABEL_33:
      *(_DWORD *)v17 += 2;
      goto LABEL_34;
    case 0xB:
      if (((*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19588A65CLL);
      }
      v26 = 0;
      v27 = (*((unsigned __int16 *)this + 2) & 0x7Fu) - 20;
      if (v27 > 0x3C)
        goto LABEL_48;
      if (((1 << ((*((_WORD *)this + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v26 = (_DWORD *)*((_QWORD *)this + 1);
        if (!v26)
          goto LABEL_48;
        goto LABEL_47;
      }
      if (v27 == 60)
      {
        v33 = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      else
      {
        if (v27 != 59)
          goto LABEL_48;
        v33 = WebCore::nameString(*((unsigned __int16 *)this + 4));
      }
      v26 = (_DWORD *)*v33;
      if (*v33)
LABEL_47:
        *v26 += 2;
LABEL_48:
      *(_QWORD *)a1 = v26;
      v14 = 5;
LABEL_49:
      *(_DWORD *)(a1 + 40) = v14;
LABEL_50:
      v11 = 1;
LABEL_51:
      *(_BYTE *)(a1 + 48) = v11;
      return;
    case 0xC:
    case 0xD:
      WebCore::transformForValue(this, (const WebCore::CSSValue *)(*(_QWORD *)(a2 + 8) + 64), (uint64_t *)&v38);
      if (!(_QWORD)v38)
        goto LABEL_19;
      *(_QWORD *)a1 = v38;
      v14 = 6;
      goto LABEL_49;
    default:
LABEL_19:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 48) = 0;
      return;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)50>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  int *v6;
  unsigned int *v7;
  __int128 *v8;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v7 = *(unsigned int **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::id(v7);
  if ((_DWORD)result != 50)
  {
LABEL_3:
    v6 = 0;
LABEL_4:
    *v3 = v6;
    return result;
  }
  v8 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)a2);
  result = (uint64_t)WebCore::CSSParserToken::id((unsigned int *)v8);
  if (result < 0x48E)
  {
    v6 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v6 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSFontVariantLigaturesParser::consumeLigature(WebCore::CSSFontVariantLigaturesParser *this, __int128 **a2)
{
  __int128 *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int *v9;
  int *v10;
  int *v11;

  v4 = *a2;
  if (*a2 >= a2[1])
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    return 2;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 < 0)
  {
    v6 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v6;
  }
  switch((__int16)v6)
  {
    case '3':
    case '4':
      result = 1;
      if (*(_BYTE *)this)
        return result;
      *(_BYTE *)this = 1;
      break;
    case '5':
    case '6':
      result = 1;
      if (*((_BYTE *)this + 1))
        return result;
      *((_BYTE *)this + 1) = 1;
      break;
    case '7':
    case '8':
      result = 1;
      if (*((_BYTE *)this + 2))
        return result;
      *((_BYTE *)this + 2) = 1;
      break;
    case '9':
    case ':':
      result = 1;
      if (*((_BYTE *)this + 3))
        return result;
      *((_BYTE *)this + 3) = 1;
      break;
    default:
      return 2;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent(a2, (WebCore::CSSParserTokenRange *)a2, &v10);
  v11 = v10;
  v7 = *((unsigned int *)this + 5);
  if ((_DWORD)v7 == *((_DWORD *)this + 4))
  {
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)this + 8, (uint64_t *)&v11);
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
      else
        *v9 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v7) = v10;
    *((_DWORD *)this + 5) = v7 + 1;
  }
  return 0;
}

BOOL WebCore::CSSPropertyParser::consumeFontSynthesis(unsigned int **this, int a2)
{
  unsigned int *v4;
  WebCore::CSSParserTokenRange *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v16;
  int *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int *v23;
  WTF::StringImpl *v24;
  int *v25;

  v4 = *this;
  if (v4 >= this[1])
  {
    v4 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v4) == 6)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v5, &v25);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 17, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v6);
      else
        *v25 -= 2;
    }
    dword_1ECE8BC48 += 2;
    v25 = &WebCore::staticCSSValuePool[3112];
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 18, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v7);
      else
        *v25 -= 2;
    }
    dword_1ECE8BC48 += 2;
    v25 = &WebCore::staticCSSValuePool[3112];
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 19, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v8);
      else
        *v25 -= 2;
    }
    return *this == this[1];
  }
  else
  {
    if (*this == this[1])
    {
      v10 = 0;
      v11 = 0;
LABEL_44:
      v16 = 6;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)922,(WebCore::CSSValueID)923,(WebCore::CSSValueID)50>((uint64_t)&v25, (uint64_t)this);
        if (!v25)
          return 0;
        if ((v25[1] & 0x7F) != 0x50)
          goto LABEL_40;
        v14 = *((unsigned __int16 *)v25 + 4);
        if (v14 == 50)
        {
          if (v10)
            goto LABEL_40;
          v10 = 1;
        }
        else if (v14 == 923)
        {
          if (v11)
            goto LABEL_40;
          v11 = 1;
        }
        else
        {
          if (v14 != 922 || v12 != 0)
          {
LABEL_40:
            if (*v25 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v13);
            else
              *v25 -= 2;
            return 0;
          }
          v12 = 1;
        }
        if (*v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v13);
        else
          *v25 -= 2;
      }
      while (*this != this[1]);
      if (!v12)
        goto LABEL_44;
      v16 = 394;
    }
    v17 = &WebCore::staticCSSValuePool[4 * v16];
    v17[3088] += 2;
    v25 = v17 + 3088;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 19, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v18);
      else
        *v25 -= 2;
    }
    v19 = 1576;
    if (!v11)
      v19 = 24;
    v20 = &WebCore::staticCSSValuePool[v19];
    v20[3088] += 2;
    v25 = v20 + 3088;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 18, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v21);
      else
        *v25 -= 2;
    }
    v22 = 1576;
    if (!v10)
      v22 = 24;
    v23 = &WebCore::staticCSSValuePool[v22];
    v23[3088] += 2;
    v25 = v23 + 3088;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 17, 493, &v25, a2, 0);
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v24);
      else
        *v25 -= 2;
    }
    return 1;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)922,(WebCore::CSSValueID)923,(WebCore::CSSValueID)50>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 922 >= 2 && (unsigned __int16)result != 50)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x19588AFC4);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParser::consumeColumns(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  int v2;
  __int128 *v4;
  __int128 *v5;
  WTF::StringImpl *v6;
  int *v7;
  int *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t result;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  int *v21;
  int v22;
  int *v23;
  int *v24;

  v2 = (int)a2;
  v5 = *this;
  v4 = this[1];
  if (*this == v4)
  {
    v8 = 0;
    v7 = 0;
LABEL_17:
    v23 = v8;
    v24 = v7;
LABEL_18:
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 97, 487, &v24, v2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 90, 487, &v23, v2, 0);
    v11 = 1;
    v8 = v23;
    if (!v23)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (*this >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_4;
  v15 = *((_DWORD *)v5 + 4);
  if (v15 < 0)
  {
    v15 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v15;
  }
  if ((unsigned __int16)v15 != 394)
  {
LABEL_4:
    WebCore::CSSPropertyParsing::consumeColumnWidth(this, &v24);
    v7 = v24;
    if (v24)
    {
      v8 = 0;
      goto LABEL_9;
    }
    WebCore::CSSPropertyParsing::consumeColumnCount(this, &v24);
    v8 = v24;
    if (!v24)
      return 0;
    goto LABEL_8;
  }
  v16 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if (v16 < 0x10000)
  {
LABEL_53:
    v8 = 0;
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  if ((unsigned __int16)v16 >= 0x48Eu)
    goto LABEL_55;
  v17 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v16 + 3088];
  v18 = *v17;
  *v17 += 2;
  if (!v18)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v6);
    goto LABEL_53;
  }
  v8 = 0;
  v7 = 0;
  *v17 = v18;
LABEL_9:
  v10 = *this;
  v9 = this[1];
  if (*this == v9)
    goto LABEL_17;
  if (*this >= v9)
  {
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v10 & 0x3F) != 0)
    goto LABEL_58;
  v19 = *((_DWORD *)v10 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
    *((_DWORD *)v10 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 394)
  {
LABEL_58:
    if (v7 || (WebCore::CSSPropertyParsing::consumeColumnWidth(this, &v24), !v24))
    {
      if (v8)
      {
        v11 = 0;
        v24 = v7;
LABEL_15:
        if (*v8 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
        else
          *v8 -= 2;
LABEL_19:
        v7 = v24;
        if (v24)
          goto LABEL_20;
        return v11;
      }
      WebCore::CSSPropertyParsing::consumeColumnCount(this, &v24);
      v8 = v24;
      if (!v24)
      {
        v11 = 0;
        if (v7)
        {
LABEL_20:
          if (*v7 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
          else
            *v7 -= 2;
        }
        return v11;
      }
    }
    else
    {
      v7 = v24;
    }
    goto LABEL_26;
  }
  v20 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, v6);
  if (v20 < 0x10000)
  {
LABEL_26:
    v12 = *this;
    v13 = this[1];
    v23 = v8;
    v24 = v7;
    if (v12 != v13)
    {
      v11 = 0;
      if (!v8)
        goto LABEL_19;
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  if ((unsigned __int16)v20 <= 0x48Du)
  {
    v21 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v20 + 3088];
    v22 = *v21;
    *v21 += 2;
    if (v22)
      *v21 = v22;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v6);
    goto LABEL_26;
  }
LABEL_55:
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::isInitialValueForLonghand(int a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSPrimitiveValue *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  double v22;
  _QWORD v23[2];
  _QWORD *v24;
  _BYTE v25[16];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a2 + 4);
  v3 = v2 | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v2 & 0x100) != 0)
    return 1;
  switch(a1)
  {
    case 'B':
LABEL_9:
      if ((v3 & 0x3F800) != 0x1B800)
        goto LABEL_46;
      v7 = *(_QWORD *)(a2 + 8);
      if (((*(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_46;
      if ((*(_WORD *)(v7 + 4) & 0x7F) != 0x50)
        goto LABEL_46;
      if (*(_WORD *)(v7 + 8) != 394)
        goto LABEL_46;
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
      if ((v9 & 0x3F800) != 0)
        goto LABEL_46;
      goto LABEL_14;
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'K':
      goto LABEL_46;
    case 'H':
LABEL_17:
      if ((v3 & 0x3F800) != 0x17800)
        goto LABEL_46;
      v10 = (_QWORD *)(a2 + 8);
      v6 = 1;
      v11 = 0.0;
      break;
    case 'I':
LABEL_21:
      if ((v3 & 0x3F800) == 0x1B800)
      {
        v12 = *(_QWORD *)(a2 + 8);
        if (((*(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16)) & 0x3F800) == 0
          && (*(_WORD *)(v12 + 4) & 0x7F) == 0x50
          && *(_WORD *)(v12 + 8) == 499)
        {
          v13 = *(_QWORD *)(a2 + 16);
          if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) == 0
            && (*(_WORD *)(v13 + 4) & 0x7F) == 0x50
            && *(_WORD *)(v13 + 8) == 499)
          {
            return 1;
          }
        }
      }
      goto LABEL_46;
    case 'J':
      if ((v3 & 0x3F800) == 0xB800 && !*(_BYTE *)(a2 + 40) && WebCore::isNumber((_QWORD *)(a2 + 8), 3, 100.0))
        return 1;
      goto LABEL_46;
    case 'L':
      if ((v3 & 0x3F800) != 0xC000 || *(_BYTE *)(a2 + 40))
        goto LABEL_46;
      v10 = (_QWORD *)(a2 + 8);
      v6 = 1;
      v11 = 1.0;
      break;
    default:
      switch(a1)
      {
        case 162:
          goto LABEL_17;
        case 163:
          goto LABEL_21;
        case 164:
          if ((v3 & 0x3F800) != 0xB800)
            return 0;
          if (*(_BYTE *)(a2 + 40))
            return 0;
          v6 = 1;
          if (!WebCore::isNumber((_QWORD *)(a2 + 8), 1, 0.0))
            return 0;
          return v6;
        case 165:
        case 167:
        case 168:
        case 169:
          goto LABEL_46;
        case 166:
          if ((v3 & 0x3F800) != 0xC000)
            goto LABEL_46;
          if (*(_BYTE *)(a2 + 40))
            goto LABEL_46;
          v17 = *(_QWORD *)(a2 + 8);
          if ((*(_WORD *)(v17 + 4) & 0x7F) != 0x50)
            goto LABEL_46;
          if (*(_WORD *)(v17 + 8) != 394)
            goto LABEL_46;
          v18 = *(_QWORD *)(a2 + 16);
          if ((*(_WORD *)(v18 + 4) & 0x7F) != 0x50)
            goto LABEL_46;
          if (*(_WORD *)(v18 + 8) != 394)
            goto LABEL_46;
          v19 = *(_QWORD *)(a2 + 24);
          if ((*(_WORD *)(v19 + 4) & 0x7F) != 0x50 || *(_WORD *)(v19 + 8) != 394)
            goto LABEL_46;
          v8 = *(_QWORD *)(a2 + 32);
          LOWORD(v9) = *(_WORD *)(v8 + 4);
          break;
        case 170:
          goto LABEL_9;
        default:
          if (a1 != 182)
            goto LABEL_46;
          if ((v3 & 0x3F800) != 0x16000)
            goto LABEL_46;
          v14 = *(_QWORD *)(a2 + 8);
          if (!v14)
            goto LABEL_46;
          if ((*(_WORD *)(v14 + 4) & 0x7F) != 0x50)
            goto LABEL_46;
          if (*(_WORD *)(v14 + 8) != 394)
            goto LABEL_46;
          v15 = *(WebCore::CSSPrimitiveValue **)(a2 + 16);
          if (v15)
          {
            if (WebCore::CSSPrimitiveValue::computeDegrees(v15) != 0.0)
              goto LABEL_46;
          }
          return 1;
      }
LABEL_14:
      if ((v9 & 0x7F) == 0x50 && *(_WORD *)(v8 + 8) == 394)
        return 1;
      goto LABEL_46;
  }
  if (WebCore::isNumber(v10, 1, v11))
    return v6;
LABEL_46:
  WebCore::initialValueForLonghand((uint64_t)v25, a1);
  v23[0] = a2;
  v23[1] = a2;
  if (v26 != -1)
  {
    v24 = v23;
    return ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339D738[v26])(&v24, v25);
  }
  v20 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::isNumber(v20, v21, v22);
}

BOOL WebCore::isNumber(_QWORD *a1, int a2, double a3)
{
  uint64_t v6;
  __int16 v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v19;
  double v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  double v25;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;

  v6 = *a1;
  v7 = *(_WORD *)(*a1 + 4);
  v8 = v7 & 0x7F;
  v9 = 22;
  if ((v8 - 79) >= 2)
  {
    if (v8 == 77)
    {
      v9 = 20;
    }
    else if (v8 != 63)
    {
      v9 = v7 & 0x7F;
      if (v9 == 73)
      {
        v27 = *(_BYTE **)(*(_QWORD *)(v6 + 8) + 8);
        if (v27[12] == 1)
        {
LABEL_35:
          v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v27 + 72))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8));
        }
        else
        {
          v9 = 1;
          switch(v27[12])
          {
            case 0:
              break;
            case 2:
              v9 = 3;
              break;
            case 3:
              v9 = 74;
              break;
            case 4:
              v9 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_35;
            default:
              v9 = 0;
              break;
          }
        }
      }
    }
  }
  if (v9 != a2)
    return 0;
  if ((*(_WORD *)(v6 + 4) & 0x7F) == 0x49)
  {
    v31 = *(_QWORD *)(v6 + 8);
    v43 = 0;
    v39 = WebCore::CSSCalcValue::doubleValue(v31, (uint64_t)&v43);
    if (v43)
      WTF::fastFree((WTF *)(v43 - 16), v32);
    v10 = v39;
  }
  else
  {
    v10 = *(double *)(v6 + 8);
  }
  if (v10 != a3)
    return 0;
  v11 = a1[1];
  v12 = *(_WORD *)(v11 + 4);
  v13 = v12 & 0x7F;
  v14 = 22;
  if ((v13 - 79) >= 2)
  {
    if (v13 == 77)
    {
      v14 = 20;
    }
    else if (v13 != 63)
    {
      v14 = *(_WORD *)(v11 + 4) & 0x7F;
      if ((v12 & 0x7F) == 0x49)
      {
        v28 = *(_BYTE **)(*(_QWORD *)(v11 + 8) + 8);
        if (v28[12] == 1)
        {
LABEL_37:
          v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 72))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8));
        }
        else
        {
          v14 = 1;
          switch(v28[12])
          {
            case 0:
              break;
            case 2:
              v14 = 3;
              break;
            case 3:
              v14 = 74;
              break;
            case 4:
              v14 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_37;
            default:
              v14 = 0;
              break;
          }
        }
      }
    }
  }
  if (v14 != a2)
    return 0;
  if ((*(_WORD *)(v11 + 4) & 0x7F) == 0x49)
  {
    v33 = *(_QWORD *)(v11 + 8);
    v43 = 0;
    v40 = WebCore::CSSCalcValue::doubleValue(v33, (uint64_t)&v43);
    if (v43)
      WTF::fastFree((WTF *)(v43 - 16), v34);
    v15 = v40;
  }
  else
  {
    v15 = *(double *)(v11 + 8);
  }
  if (v15 != a3)
    return 0;
  v16 = a1[2];
  v17 = *(_WORD *)(v16 + 4);
  v18 = v17 & 0x7F;
  v19 = 22;
  if ((v18 - 79) >= 2)
  {
    if (v18 == 77)
    {
      v19 = 20;
    }
    else if (v18 != 63)
    {
      v19 = *(_WORD *)(v16 + 4) & 0x7F;
      if ((v17 & 0x7F) == 0x49)
      {
        v29 = *(_BYTE **)(*(_QWORD *)(v16 + 8) + 8);
        if (v29[12] == 1)
        {
LABEL_39:
          v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v29 + 72))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8));
        }
        else
        {
          v19 = 1;
          switch(v29[12])
          {
            case 0:
              break;
            case 2:
              v19 = 3;
              break;
            case 3:
              v19 = 74;
              break;
            case 4:
              v19 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_39;
            default:
              v19 = 0;
              break;
          }
        }
      }
    }
  }
  if (v19 != a2)
    return 0;
  if ((*(_WORD *)(v16 + 4) & 0x7F) == 0x49)
  {
    v35 = *(_QWORD *)(v16 + 8);
    v43 = 0;
    v41 = WebCore::CSSCalcValue::doubleValue(v35, (uint64_t)&v43);
    if (v43)
      WTF::fastFree((WTF *)(v43 - 16), v36);
    v20 = v41;
  }
  else
  {
    v20 = *(double *)(v16 + 8);
  }
  if (v20 != a3)
    return 0;
  v21 = a1[3];
  v22 = *(_WORD *)(v21 + 4);
  v23 = v22 & 0x7F;
  v24 = 22;
  if ((v23 - 79) >= 2)
  {
    if (v23 == 77)
    {
      v24 = 20;
    }
    else if (v23 != 63)
    {
      v24 = *(_WORD *)(v21 + 4) & 0x7F;
      if ((v22 & 0x7F) == 0x49)
      {
        v30 = *(_BYTE **)(*(_QWORD *)(v21 + 8) + 8);
        if (v30[12] == 1)
        {
LABEL_43:
          v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v30 + 72))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8));
        }
        else
        {
          v24 = 1;
          switch(v30[12])
          {
            case 0:
              break;
            case 2:
              v24 = 3;
              break;
            case 3:
              v24 = 74;
              break;
            case 4:
              v24 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_43;
            default:
              v24 = 0;
              break;
          }
        }
      }
    }
  }
  if (v24 != a2)
    return 0;
  if ((*(_WORD *)(v21 + 4) & 0x7F) == 0x49)
  {
    v37 = *(_QWORD *)(v21 + 8);
    v43 = 0;
    v42 = WebCore::CSSCalcValue::doubleValue(v37, (uint64_t)&v43);
    if (v43)
      WTF::fastFree((WTF *)(v43 - 16), v38);
    v25 = v42;
  }
  else
  {
    v25 = *(double *)(v21 + 8);
  }
  return v25 == a3;
}

uint64_t WebCore::initialValueForLonghand(uint64_t result, int a2)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  switch(a2)
  {
    case 3:
      v2 = 0;
      v3 = 680;
      goto LABEL_74;
    case 5:
      v2 = 0;
      v3 = 168;
      goto LABEL_74;
    case 7:
      v2 = 0;
      v3 = 366;
      goto LABEL_74;
    case 9:
    case 12:
    case 15:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 36:
    case 41:
    case 42:
    case 48:
    case 60:
    case 92:
    case 100:
    case 101:
    case 148:
    case 154:
    case 181:
    case 191:
    case 211:
    case 217:
    case 230:
    case 253:
    case 279:
    case 297:
    case 350:
      v2 = 0;
      v3 = 90;
      goto LABEL_74;
    case 10:
    case 11:
    case 17:
    case 18:
    case 19:
    case 31:
    case 39:
    case 43:
    case 57:
    case 66:
    case 78:
    case 79:
    case 80:
    case 83:
    case 85:
    case 90:
    case 97:
    case 106:
    case 110:
    case 118:
    case 129:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 143:
    case 146:
    case 150:
    case 153:
    case 166:
    case 170:
    case 178:
    case 182:
    case 190:
    case 196:
    case 201:
    case 206:
    case 215:
    case 221:
    case 222:
    case 223:
    case 228:
    case 248:
    case 250:
    case 256:
    case 258:
    case 264:
    case 268:
    case 269:
    case 271:
    case 290:
    case 296:
    case 300:
    case 354:
    case 387:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 419:
    case 420:
    case 421:
    case 422:
    case 431:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 449:
    case 457:
      v2 = 0;
      v3 = 394;
      goto LABEL_74;
    case 13:
    case 95:
    case 189:
    case 357:
    case 360:
    case 365:
    case 370:
    case 373:
    case 376:
    case 379:
    case 386:
      v2 = 0;
      v3 = 97;
      goto LABEL_74;
    case 14:
    case 50:
    case 52:
    case 54:
    case 56:
    case 62:
    case 75:
    case 84:
    case 86:
    case 94:
    case 96:
    case 98:
    case 99:
    case 103:
    case 104:
    case 117:
    case 123:
    case 136:
    case 137:
    case 138:
    case 139:
    case 155:
    case 158:
    case 159:
    case 160:
    case 161:
    case 165:
    case 167:
    case 180:
    case 188:
    case 198:
    case 209:
    case 210:
    case 214:
    case 216:
    case 218:
    case 220:
    case 226:
    case 236:
    case 255:
    case 261:
    case 262:
    case 266:
    case 267:
    case 273:
    case 284:
    case 291:
    case 356:
    case 359:
    case 364:
    case 369:
    case 372:
    case 375:
    case 378:
    case 385:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 411:
    case 412:
    case 413:
    case 414:
    case 416:
    case 418:
    case 448:
    case 450:
    case 468:
    case 477:
    case 483:
      v2 = 0;
      v3 = 6;
      goto LABEL_74;
    case 29:
      v2 = 0;
      v3 = 706;
      goto LABEL_74;
    case 37:
      v2 = 0;
      v3 = 1013;
      goto LABEL_74;
    case 38:
      v2 = 0;
      v3 = 1012;
      goto LABEL_74;
    case 44:
    case 288:
      v2 = 0;
      v3 = 248;
      goto LABEL_74;
    case 47:
    case 49:
    case 280:
    case 281:
      *(_QWORD *)result = 0;
      v5 = 16;
      goto LABEL_55;
    case 51:
    case 76:
    case 115:
    case 121:
    case 125:
    case 183:
    case 241:
      v4 = 0x3FF0000000000000;
      goto LABEL_57;
    case 53:
      v2 = 0;
      v3 = 626;
      goto LABEL_74;
    case 55:
    case 283:
      v2 = 0;
      v3 = 630;
      goto LABEL_74;
    case 58:
    case 102:
    case 192:
    case 193:
    case 293:
      v2 = 0;
      v3 = 439;
      goto LABEL_74;
    case 59:
      v2 = 0;
      v3 = 489;
      goto LABEL_74;
    case 61:
    case 235:
      v2 = 0;
      v3 = 125;
      goto LABEL_74;
    case 63:
    case 64:
    case 335:
    case 336:
      *(_QWORD *)result = 0;
      goto LABEL_14;
    case 65:
    case 169:
      v2 = 0;
      v3 = 231;
      goto LABEL_74;
    case 71:
      v2 = 0;
      v3 = 490;
      goto LABEL_74;
    case 72:
    case 162:
    case 164:
      *(_QWORD *)result = 0;
      goto LABEL_58;
    case 73:
    case 163:
      v2 = 0;
      v3 = 499;
      goto LABEL_74;
    case 74:
      v6 = 0x4059000000000000;
      goto LABEL_13;
    case 77:
      v2 = 0;
      v3 = 600;
      goto LABEL_74;
    case 82:
      v2 = 0;
      v3 = 254;
      goto LABEL_74;
    case 87:
    case 116:
      v2 = 0;
      v3 = 719;
      goto LABEL_74;
    case 89:
      v2 = 0;
      v3 = 1148;
      goto LABEL_74;
    case 91:
      v2 = 0;
      v3 = 905;
      goto LABEL_74;
    case 93:
    case 186:
    case 254:
    case 259:
    case 344:
    case 355:
    case 358:
    case 361:
    case 368:
    case 371:
    case 374:
    case 377:
    case 382:
    case 465:
    case 471:
    case 474:
      v2 = 0;
      v3 = 124;
      goto LABEL_74;
    case 111:
      v2 = 0;
      v3 = 491;
      goto LABEL_74;
    case 113:
      v2 = 0;
      v3 = 458;
      goto LABEL_74;
    case 119:
    case 130:
      v2 = 0;
      v3 = 523;
      goto LABEL_74;
    case 122:
      v2 = 0;
      v3 = 481;
      goto LABEL_74;
    case 124:
      v2 = 0;
      v3 = 128;
      goto LABEL_74;
    case 142:
      v2 = 0;
      v3 = 890;
      goto LABEL_74;
    case 149:
      v2 = 0;
      v3 = 522;
      goto LABEL_74;
    case 152:
      v2 = 0;
      v3 = 142;
      goto LABEL_74;
    case 156:
      v2 = 0;
      v3 = 270;
      goto LABEL_74;
    case 157:
      v2 = 0;
      v3 = 272;
      goto LABEL_74;
    case 168:
    case 352:
    case 408:
    case 455:
      v2 = 0;
      v3 = 598;
      goto LABEL_74;
    case 171:
      v2 = 0;
      v3 = 996;
      goto LABEL_74;
    case 176:
      v2 = 0;
      v3 = 653;
      goto LABEL_74;
    case 179:
    case 277:
    case 345:
      *(_QWORD *)result = 0;
      goto LABEL_54;
    case 185:
    case 295:
      v4 = 0x4000000000000000;
      goto LABEL_57;
    case 199:
    case 200:
    case 275:
    case 276:
      v6 = 0x4049000000000000;
LABEL_13:
      *(_QWORD *)result = v6;
LABEL_14:
      v5 = 3;
      goto LABEL_55;
    case 202:
      v2 = 0;
      v3 = 492;
      goto LABEL_74;
    case 205:
      v2 = 0;
      v3 = 669;
      goto LABEL_74;
    case 219:
    case 289:
      v2 = 0;
      v3 = 367;
      goto LABEL_74;
    case 238:
      v2 = 0;
      v3 = 1150;
      goto LABEL_74;
    case 239:
      v2 = 0;
      v3 = 1151;
      goto LABEL_74;
    case 240:
      v4 = 0x4010000000000000;
      goto LABEL_57;
    case 242:
      *(_QWORD *)result = 0x3FF0000000000000;
LABEL_54:
      v5 = 6;
LABEL_55:
      *(_BYTE *)(result + 8) = v5;
      v2 = 1;
      goto LABEL_75;
    case 247:
      v4 = 0x4020000000000000;
LABEL_57:
      *(_QWORD *)result = v4;
LABEL_58:
      v2 = 1;
      *(_BYTE *)(result + 8) = 1;
      goto LABEL_75;
    case 249:
      v2 = 0;
      v3 = 500;
      goto LABEL_74;
    case 252:
      v2 = 0;
      v3 = 662;
      goto LABEL_74;
    case 257:
      v2 = 0;
      v3 = 14;
      goto LABEL_74;
    case 265:
      v2 = 0;
      v3 = 556;
      goto LABEL_74;
    case 270:
      v2 = 0;
      v3 = 726;
      goto LABEL_74;
    case 274:
      v2 = 0;
      v3 = 620;
      goto LABEL_74;
    case 278:
      v2 = 0;
      v3 = 628;
      goto LABEL_74;
    case 282:
      v2 = 0;
      v3 = 49;
      goto LABEL_74;
    case 294:
      v2 = 0;
      v3 = 440;
      goto LABEL_74;
    case 353:
      v2 = 0;
      v3 = 602;
      goto LABEL_74;
    case 409:
      v2 = 0;
      v3 = 606;
      goto LABEL_74;
    case 410:
      v2 = 0;
      v3 = 997;
LABEL_74:
      *(_WORD *)result = v3;
LABEL_75:
      *(_DWORD *)(result + 16) = v2;
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x19588BE94);
  }
}

uint64_t WebCore::initialValueTextForLonghand(int a1)
{
  char v2;
  char *v3;
  _BYTE v4[16];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WebCore::initialValueForLonghand((uint64_t)v4, a1);
  if (v5 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v3 = &v2;
  return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore27initialValueTextForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_27initialValueTextForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v3, v4);
}

uint64_t WebCore::initialValueIDForLonghand(int a1)
{
  char v2;
  char *v3;
  _BYTE v4[16];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WebCore::initialValueForLonghand((uint64_t)v4, a1);
  if (v5 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v3 = &v2;
  return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore25initialValueIDForLonghandENS8_13CSSPropertyIDEE3__0JZNS8_25initialValueIDForLonghandES9_E3__1EEEEEJNS0_6__implIJNS8_10CSSValueIDENS8_19InitialNumericValueEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v3, v4);
}

void WebCore::CSSPropertyParserHelpers::consumeColor(WebCore::CSSPropertyParserHelpers *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, int **a4@<X8>)
{
  unsigned int v5;
  char *v6;
  unint64_t v7;
  int *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _DWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t *v36;
  int v37;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  _OWORD *v53;
  uint64_t v54;
  int *v55;
  int *v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  BOOL v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v68;
  uint64_t v69;
  _DWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unint64_t *v83;
  _DWORD *v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  WTF *v104;
  _BYTE v105[88];
  int v106;
  unint64_t v107;
  unsigned __int8 v108;
  unsigned int v109[22];
  int v110;
  unsigned __int8 v111;
  _BYTE v112[8];
  int v113;
  unsigned int v114;
  unsigned __int16 v115;
  char v116;
  __int16 v117;
  _OWORD v118[2];

  v112[0] = a3[1];
  v112[1] = *a3;
  v5 = *(unsigned __int8 *)(a2 + 53);
  v112[2] = (*(_WORD *)(a2 + 51) & 0x20) != 0;
  v112[3] = v5 >> 7;
  v112[4] = *(_BYTE *)(a2 + 48);
  v113 = 0;
  WebCore::CSSPropertyParserHelpers::consumeColor((uint64_t)v109, a1, (uint64_t)v112);
  if (!v111)
  {
    *a4 = 0;
    return;
  }
  if (v110 == 2)
  {
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    v107 = bswap32(v109[0]) | 0x1104000000000000;
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v107, (int **)v118);
    *a4 = *(int **)&v118[0];
    *(_QWORD *)&v118[0] = 0;
    if ((v107 & 0x8000000000000) == 0)
      goto LABEL_9;
    v58 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
    do
    {
      v68 = __ldaxr(v58);
      v60 = --v68 == 0;
    }
    while (__stlxr(v68, v58));
    goto LABEL_134;
  }
  if (v110 == 1)
  {
    v7 = LOWORD(v109[0]);
    if (LOWORD(v109[0]) < 0x48EuLL)
    {
      v8 = &WebCore::staticCSSValuePool[4 * LOWORD(v109[0]) + 3088];
      *v8 += 2;
      *a4 = v8;
      goto LABEL_9;
    }
    v6 = "/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/css/CSSValuePool.h";
    __break(0xC471u);
    goto LABEL_95;
  }
  if (v110)
  {
    LOBYTE(v107) = 0;
    v108 = 0;
    std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v107, v6);
    v7 = v111;
    if (v111)
    {
      v105[0] = 0;
      v106 = -1;
      v9 = v110;
      if (v110 != -1)
      {
        ((void (*)(_OWORD *, _BYTE *, unsigned int *))off_1E339D698[v110])(v118, v105, v109);
        v106 = v9;
      }
      WebCore::CSSPrimitiveValue::create((uint64_t)v105, (uint64_t *)v118);
      *a4 = *(int **)&v118[0];
      *(_QWORD *)&v118[0] = 0;
      if (v106 != -1)
        ((void (*)(unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v106])(&v107, v105);
      v106 = -1;
      goto LABEL_9;
    }
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v107 = *(_QWORD *)v109;
  if ((*(_QWORD *)v109 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(*(_QWORD *)v109 & 0xFFFFFFFFFFFFLL);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
  }
  v108 = 1;
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  v7 = (unint64_t)WebCore::staticCSSValuePool;
  if (v107 != 0x11040000000000FFLL)
  {
    if (v107 == 0x11040000FFFFFFFFLL)
    {
LABEL_96:
      v55 = (int *)(v7 + 32);
      goto LABEL_90;
    }
    if (v107 == 0x1104000000000000)
    {
      v55 = &dword_1ECE88BB8;
      goto LABEL_90;
    }
    v10 = &WebCore::MathMLNames::rspaceAttr;
    v11 = WebCore::CSSValuePool::singleton(void)::pool;
    if (WebCore::CSSValuePool::singleton(void)::pool)
    {
      if (*(_DWORD *)(WebCore::CSSValuePool::singleton(void)::pool - 12) < 0x200u)
        goto LABEL_28;
      do
      {
        while (1)
        {
          v39 = (_QWORD *)v11;
          v40 = WTF::weakRandomNumber<unsigned int>();
          v11 = WebCore::CSSValuePool::singleton(void)::pool;
          if (WebCore::CSSValuePool::singleton(void)::pool)
            break;
          if (*v39 != 0x10000000000000 && (*v39 & 0x20000000000000) == 0)
          {
            v43 = 0;
            goto LABEL_71;
          }
        }
        v41 = v39[2 * (*(_DWORD *)(WebCore::CSSValuePool::singleton(void)::pool - 8) & v40)];
      }
      while (v41 == 0x10000000000000 || (v41 & 0x20000000000000) != 0);
      v39 += 2 * (*(_DWORD *)(WebCore::CSSValuePool::singleton(void)::pool - 8) & v40);
      v43 = WebCore::CSSValuePool::singleton(void)::pool
          + 16 * *(unsigned int *)(WebCore::CSSValuePool::singleton(void)::pool - 4);
      if ((_QWORD *)v43 == v39)
      {
        v10 = &WebCore::MathMLNames::rspaceAttr;
        goto LABEL_28;
      }
LABEL_71:
      if ((_QWORD *)v43 != v39)
      {
        WTF::HashTable<WebCore::Color,WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WebCore::Color>,WTF::HashMap<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Color>>::remove(&WebCore::CSSValuePool::singleton(void)::pool, v39);
        v11 = WebCore::CSSValuePool::singleton(void)::pool;
      }
      v10 = &WebCore::MathMLNames::rspaceAttr;
      if (v11)
        goto LABEL_28;
    }
    v44 = WTF::fastMalloc((WTF *)0x90);
    v10 = &WebCore::MathMLNames::rspaceAttr;
    *(_QWORD *)(v44 + 16) = 0x10000000000000;
    *(_QWORD *)(v44 + 24) = 0;
    *(_QWORD *)(v44 + 32) = 0x10000000000000;
    *(_QWORD *)(v44 + 40) = 0;
    *(_QWORD *)(v44 + 48) = 0x10000000000000;
    *(_QWORD *)(v44 + 56) = 0;
    *(_QWORD *)(v44 + 64) = 0x10000000000000;
    *(_QWORD *)(v44 + 72) = 0;
    *(_QWORD *)(v44 + 80) = 0x10000000000000;
    *(_QWORD *)(v44 + 88) = 0;
    *(_QWORD *)(v44 + 96) = 0x10000000000000;
    *(_QWORD *)(v44 + 104) = 0;
    *(_QWORD *)(v44 + 112) = 0x10000000000000;
    *(_QWORD *)(v44 + 120) = 0;
    *(_QWORD *)(v44 + 128) = 0x10000000000000;
    *(_QWORD *)(v44 + 136) = 0;
    WebCore::CSSValuePool::singleton(void)::pool = v44 + 16;
    *(_QWORD *)(v44 + 8) = 0x800000007;
    *(_DWORD *)v44 = 0;
    *(_DWORD *)(WebCore::CSSValuePool::singleton(void)::pool - 12) = 0;
    v11 = WebCore::CSSValuePool::singleton(void)::pool;
    if (WebCore::CSSValuePool::singleton(void)::pool)
LABEL_28:
      v12 = *(_DWORD *)(v11 - 8);
    else
      v12 = 0;
    v114 = -1640531527;
    v115 = 0;
    v116 = 0;
    v13 = v107;
    if ((v107 & 0x8000000000000) != 0)
    {
      v118[0] = *(_OWORD *)((v107 & 0xFFFFFFFFFFFFLL) + 4);
      v117 = HIWORD(v107);
      WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(&v114, v118, (unsigned __int8 *)&v117 + 1, &v117);
      v14 = v114;
      if (v116)
        v14 = ((v114 + v115) ^ ((v114 + v115) << 11)) + (((v114 + v115) ^ ((v114 + v115) << 11)) >> 17);
      v10 = &WebCore::MathMLNames::rspaceAttr;
    }
    else
    {
      v14 = ((v107 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v107 - 1640531527) << 16) ^ ((unsigned __int16)v107 - 1640531527))
          + (((v107 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v107 - 1640531527) << 16) ^ ((unsigned __int16)v107 - 1640531527)) >> 11);
      if (BYTE6(v107))
      {
        v15 = HIWORD(v107);
        do
        {
          v16 = (v14 + (v15 & -(char)v15)) ^ ((v14 + (v15 & -(char)v15)) << 16);
          v14 = v16 + (v16 >> 11);
          LODWORD(v15) = (v15 - 1) & v15;
        }
        while ((_BYTE)v15);
      }
    }
    v17 = (v14 ^ (8 * v14)) + ((v14 ^ (8 * v14)) >> 5);
    v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
    v19 = v18 ^ (v18 << 10);
    if (!v19)
      v19 = 0x800000;
    v20 = v19 & v12;
    v21 = (unint64_t *)(v11 + 16 * (v19 & v12));
    v22 = *v21;
    if (*v21 != 0x10000000000000)
    {
      v36 = 0;
      if ((v107 & 0x8000000000000) == 0)
      {
        v37 = 1;
        while (v22 != v107 || (v22 & 0x8000000000000) != 0)
        {
          if ((v22 & 0x20000000000000) != 0)
            v36 = v21;
          v20 = (v20 + v37) & v12;
          v21 = (unint64_t *)(v11 + 16 * v20);
          v22 = *v21;
          ++v37;
          if (*v21 == 0x10000000000000)
            goto LABEL_62;
        }
LABEL_99:
        v56 = (int *)v21[1];
        *v56 += 2;
        v57 = v108;
        *a4 = v56;
        if (!v57)
          goto LABEL_9;
        goto LABEL_100;
      }
      v38 = 1;
      do
      {
        if ((v22 & 0x8000000000000) != 0
          && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 0xC))
        {
          if (*(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v107 & 0xFFFFFFFFFFFFLL) + 0x10))
          {
            v10 = &WebCore::MathMLNames::rspaceAttr;
            if (HIBYTE(v22) == HIBYTE(v107) && BYTE6(v107) == BYTE6(v22))
              goto LABEL_99;
          }
          else
          {
            v10 = &WebCore::MathMLNames::rspaceAttr;
          }
        }
        if ((v22 & 0x20000000000000) != 0)
          v36 = v21;
        v20 = (v20 + v38) & v12;
        v21 = (unint64_t *)(v11 + 16 * v20);
        v22 = *v21;
        ++v38;
      }
      while (*v21 != 0x10000000000000);
LABEL_62:
      if (v36)
      {
        *v36 = 0x10000000000000;
        v36[1] = 0;
        --*(_DWORD *)(v10[369] - 16);
        v13 = v107;
        v21 = v36;
      }
    }
    if (v13 != 0x10000000000000)
    {
      *v21 = v13;
      if ((v13 & 0x8000000000000) != 0)
      {
        v61 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
      }
    }
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    v24 = v107;
    if ((v107 & 0x8000000000000) != 0)
    {
      v65 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    *(_DWORD *)v23 = 2;
    v25 = *(_BYTE *)(v23 + 6);
    *(_WORD *)(v23 + 4) = 24;
    *(_BYTE *)(v23 + 6) = v25 & 0xFC;
    *(_QWORD *)(v23 + 8) = v24;
    v26 = (_DWORD *)v21[1];
    v21[1] = v23;
    v27 = &WebCore::MathMLNames::rspaceAttr;
    if (v26)
    {
      if (*v26 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, (WTF::StringImpl *)v6);
        v27 = &WebCore::MathMLNames::rspaceAttr;
      }
      else
      {
        *v26 -= 2;
      }
    }
    v28 = v27[369];
    if (v28)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = v27[369];
    if (v30)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_99;
    }
    else
    {
      if (3 * v33 > 4 * v32)
        goto LABEL_99;
      if (!(_DWORD)v33)
      {
        v104 = (WTF *)(v30 - 16);
        v34 = *(_DWORD *)(v30 - 12);
        v35 = 8;
        goto LABEL_78;
      }
    }
    v104 = (WTF *)(v30 - 16);
    v34 = *(_DWORD *)(v30 - 12);
    v35 = (_DWORD)v33 << (6 * v34 >= (2 * v33));
LABEL_78:
    v45 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * v35 + 16));
    v47 = &WebCore::MathMLNames::rspaceAttr;
    if (v35)
    {
      if (v35 >= 4)
      {
        v48 = v35 & 0xFFFFFFFC;
        v53 = v45 + 12;
        v54 = v48;
        do
        {
          *(v53 - 2) = xmmword_1969EDAE0;
          *(v53 - 1) = xmmword_1969EDAE0;
          *v53 = xmmword_1969EDAE0;
          v53[1] = xmmword_1969EDAE0;
          v53 += 4;
          v54 -= 4;
        }
        while (v54);
        if (v48 == v35)
          goto LABEL_83;
      }
      else
      {
        v48 = 0;
      }
      v49 = v35 - v48;
      v50 = &v45[4 * v48 + 6];
      do
      {
        *(v50 - 1) = 0x10000000000000;
        *v50 = 0;
        v50 += 2;
        --v49;
      }
      while (v49);
    }
LABEL_83:
    WebCore::CSSValuePool::singleton(void)::pool = (uint64_t)(v45 + 4);
    v45[2] = v35 - 1;
    v45[3] = v35;
    *v45 = 0;
    *(_DWORD *)(WebCore::CSSValuePool::singleton(void)::pool - 12) = v34;
    if ((_DWORD)v33)
    {
      v51 = 0;
      v52 = 0;
      do
      {
        v71 = (unint64_t *)(v30 + 16 * v51);
        v72 = *v71;
        if ((*v71 & 0x20000000000000) == 0)
        {
          if (v72 == 0x10000000000000)
          {
            v69 = v30 + 16 * v51;
            v70 = *(_DWORD **)(v69 + 8);
            *(_QWORD *)(v69 + 8) = 0;
            if (v70)
            {
              if (*v70 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v46);
                if ((*v71 & 0x8000000000000) != 0)
                {
                  v98 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v99 = __ldaxr(v98);
                    v100 = v99 - 1;
                  }
                  while (__stlxr(v100, v98));
                  if (!v100)
                  {
                    atomic_store(1u, v98);
                    WTF::fastFree((WTF *)v98, v46);
                  }
                }
                v47 = &WebCore::MathMLNames::rspaceAttr;
              }
              else
              {
                *v70 -= 2;
              }
            }
          }
          else
          {
            v73 = v47[369];
            if (v73)
              v74 = *(_DWORD *)(v73 - 8);
            else
              v74 = 0;
            if ((v72 & 0x8000000000000) != 0)
            {
              v91 = (*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 4) >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 4)
                                                                                   - 1640531527) << 16) ^ ((unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 4) - 1640531527);
              v92 = (*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 8) >> 5) & 0x7FFF800 ^ ((v91
                                                                                   + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 8)
                                                                                   + (v91 >> 11)) << 16) ^ (v91 + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 8) + (v91 >> 11));
              v93 = (*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0xC) >> 5) & 0x7FFF800 ^ ((v92
                                                                                     + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0xC)
                                                                                     + (v92 >> 11)) << 16) ^ (v92 + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0xC) + (v92 >> 11));
              v94 = (*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0x10) >> 5) & 0x7FFF800 ^ ((v93
                                                                                      + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0x10)
                                                                                      + (v93 >> 11)) << 16) ^ (v93 + (unsigned __int16)*(_DWORD *)((v72 & 0xFFFFFFFFFFFFLL) + 0x10) + (v93 >> 11));
              v95 = (v94 + HIBYTE(v72) + (v94 >> 11)) ^ ((v94 + HIBYTE(v72) + (v94 >> 11)) << 16);
              v75 = v95 + (v95 >> 11);
              if (BYTE6(v72))
              {
                v96 = HIWORD(v72);
                v47 = &WebCore::MathMLNames::rspaceAttr;
                do
                {
                  v97 = (v75 + (v96 & -(char)v96)) ^ ((v75 + (v96 & -(char)v96)) << 16);
                  v75 = v97 + (v97 >> 11);
                  LODWORD(v96) = (v96 - 1) & v96;
                }
                while ((_BYTE)v96);
              }
              else
              {
                v47 = &WebCore::MathMLNames::rspaceAttr;
              }
            }
            else
            {
              v75 = ((v72 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v72 - 1640531527) << 16) ^ ((unsigned __int16)v72 - 1640531527))
                  + (((v72 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v72 - 1640531527) << 16) ^ ((unsigned __int16)v72 - 1640531527)) >> 11);
              if (BYTE6(v72))
              {
                v76 = HIWORD(v72);
                do
                {
                  v77 = (v75 + (v76 & -(char)v76)) ^ ((v75 + (v76 & -(char)v76)) << 16);
                  v75 = v77 + (v77 >> 11);
                  LODWORD(v76) = (v76 - 1) & v76;
                }
                while ((_BYTE)v76);
              }
            }
            v78 = 0;
            v79 = (v75 ^ (8 * v75)) + ((v75 ^ (8 * v75)) >> 5);
            v80 = (v79 ^ (4 * v79)) + ((v79 ^ (4 * v79)) >> 15);
            v81 = v80 ^ (v80 << 10);
            if (!v81)
              v81 = 0x800000;
            do
            {
              v82 = v81 & v74;
              v81 = ++v78 + v82;
            }
            while (*(_QWORD *)(v73 + 16 * v82) != 0x10000000000000);
            v83 = (unint64_t *)(v73 + 16 * v82);
            v84 = (_DWORD *)v83[1];
            v83[1] = 0;
            if (v84)
            {
              if (*v84 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v84, v46);
                v47 = &WebCore::MathMLNames::rspaceAttr;
                if ((*v83 & 0x8000000000000) != 0)
                {
                  v101 = (unsigned int *)(*v83 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, v101));
                  v47 = &WebCore::MathMLNames::rspaceAttr;
                  if (!v103)
                  {
                    atomic_store(1u, v101);
                    WTF::fastFree((WTF *)v101, v46);
                    v47 = &WebCore::MathMLNames::rspaceAttr;
                  }
                }
              }
              else
              {
                *v84 -= 2;
              }
            }
            *v83 = 0;
            if (*v71)
            {
              *v83 = *v71;
              *v71 = 0;
            }
            v85 = v30 + 16 * v51;
            v86 = *(_QWORD *)(v85 + 8);
            *(_QWORD *)(v85 + 8) = 0;
            v83[1] = v86;
            v87 = *(_DWORD **)(v85 + 8);
            *(_QWORD *)(v85 + 8) = 0;
            if (v87)
            {
              if (*v87 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v87, v46);
                v47 = &WebCore::MathMLNames::rspaceAttr;
                if ((*v71 & 0x8000000000000) != 0)
                {
                  v88 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v89 = __ldaxr(v88);
                    v90 = v89 - 1;
                  }
                  while (__stlxr(v90, v88));
                  v47 = &WebCore::MathMLNames::rspaceAttr;
                  if (!v90)
                  {
                    atomic_store(1u, v88);
                    WTF::fastFree((WTF *)v88, v46);
                    v47 = &WebCore::MathMLNames::rspaceAttr;
                  }
                }
              }
              else
              {
                *v87 -= 2;
              }
            }
            if (v71 == v21)
              v52 = v83;
          }
        }
        ++v51;
      }
      while (v51 != v33);
    }
    else
    {
      v52 = 0;
    }
    WTF::fastFree(v104, v46);
    v21 = v52;
    goto LABEL_99;
  }
  v55 = &dword_1ECE88BD8;
LABEL_90:
  *v55 += 2;
  *a4 = v55;
LABEL_100:
  if ((v107 & 0x8000000000000) != 0)
  {
    v58 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
    do
    {
      v59 = __ldaxr(v58);
      v60 = --v59 == 0;
    }
    while (__stlxr(v59, v58));
LABEL_134:
    if (v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v6);
    }
  }
LABEL_9:
  if (v111)
  {
    if (v110 != -1)
      ((void (*)(_OWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v110])(v118, v109);
  }
}

uint64_t WebCore::CSSPropertyParser::consumeLegacyBreakProperty(uint64_t a1, WebCore::CSSParserTokenRange *a2, int a3)
{
  int v4;
  unsigned int v6;
  WTF::StringImpl *v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int *v15;
  int *v17;

  v4 = (int)a2;
  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)a1, a2);
  if (v6 < 0x10000)
    return 0;
  if ((unsigned __int16)v6 >= 0x48Eu)
    goto LABEL_51;
  v8 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v6 + 3088];
  v9 = *v8;
  *v8 += 2;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
LABEL_4:
    v10 = 0;
    goto LABEL_46;
  }
  if ((WebCore::staticCSSValuePool[4 * (unsigned __int16)v6 + 3089] & 0x7F) == 0x50)
    v11 = LOWORD(WebCore::staticCSSValuePool[4 * (unsigned __int16)v6 + 3090]);
  else
    v11 = 0;
  v12 = v4 - 7;
  if ((v4 - 519) > 0x1B)
    goto LABEL_17;
  if (((1 << v12) & 3) == 0)
  {
    if (((1 << v12) & 0x6000000) != 0)
    {
      switch(v11)
      {
        case 447:
          v11 = 612;
          break;
        case 446:
          v11 = 525;
          break;
        case 394:
          break;
        default:
          goto LABEL_4;
      }
LABEL_33:
      v14 = 78;
      if (v4 > 543)
      {
        if (v4 == 544)
          goto LABEL_40;
        if (v4 != 545)
        {
LABEL_36:
          v14 = 80;
          goto LABEL_40;
        }
      }
      else
      {
        if (v4 == 519)
          goto LABEL_40;
        if (v4 != 520)
          goto LABEL_36;
      }
      v14 = 79;
LABEL_40:
      if (v11 < 0x48E)
      {
        v15 = &WebCore::staticCSSValuePool[4 * v11];
        v15[3088] += 2;
        v17 = v15 + 3088;
        WebCore::CSSPropertyParser::addProperty(a1, v14, v4, &v17, a3, 0);
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v7);
          else
            *v17 -= 2;
        }
        v9 = *v8 - 2;
        v10 = 1;
        goto LABEL_46;
      }
LABEL_51:
      __break(0xC471u);
      JUMPOUT(0x19588D504);
    }
    if (((1 << v12) & 0x8000004) != 0)
    {
      if (v11 == 394)
        v13 = 394;
      else
        v13 = 0;
      if (v11 == 447)
        goto LABEL_33;
      v11 = v13;
    }
LABEL_17:
    if (!v11)
      goto LABEL_4;
    goto LABEL_33;
  }
  v10 = 0;
  if (v11 <= 445)
  {
    if ((v11 - 258) >= 2 && v11 != 394)
      goto LABEL_46;
    goto LABEL_33;
  }
  if (v11 == 446)
  {
    v11 = 614;
    goto LABEL_33;
  }
  if (v11 == 447)
    goto LABEL_33;
LABEL_46:
  if (v9)
    *v8 = v9;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
  return v10;
}

void WebCore::CSSPropertyParser::consumeLegacyTextOrientation(WebCore::CSSPropertyParser *this, WebCore::CSSParserTokenRange *a2)
{
  int v2;
  __int128 *v4;
  int v5;
  WebCore::CSSParserTokenRange *v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int *v10;
  WTF::StringImpl *v11;
  int *v12;

  v2 = (int)a2;
  v4 = *(__int128 **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
  {
    LOWORD(v5) = 0;
  }
  else
  {
    v5 = *((_DWORD *)v4 + 4);
    if (v5 < 0)
    {
      v5 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
      *((_DWORD *)v4 + 4) = v5;
    }
    if ((unsigned __int16)v5 == 703)
    {
      v10 = &WebCore::staticCSSValuePool[5896];
      *v10 += 2;
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)this, a2);
      goto LABEL_8;
    }
  }
  WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty(29, (unsigned __int16)v5, *((_QWORD *)this + 2));
  if (!v7)
    return;
  v8 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)this, v6);
  if (v8 < 0x10000)
    return;
  if ((unsigned __int16)v8 >= 0x48Eu)
  {
    __break(0xC471u);
    return;
  }
  v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v8 + 3088];
  *v10 += 2;
LABEL_8:
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v12 = v10;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 29, 552, &v12, v2, 0);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
      else
        *v12 -= 2;
    }
  }
  else if (*v10 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
  }
  else
  {
    *v10 -= 2;
  }
}

uint64_t WebCore::CSSPropertyParser::consumeGridAreaShorthand(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  int v2;
  WebCore::CSSParserTokenRange *v4;
  WebCore::CSSParserTokenRange *v5;
  int *v6;
  int *v7;
  int *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int *v13;
  int *v15;
  int *v16;

  v2 = (int)a2;
  WebCore::CSSPropertyParserHelpers::consumeGridLine(this, a2, &v16);
  if (!v16)
    return 0;
  if (!WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace(this, v4))
  {
    if (*this == this[1])
    {
      v6 = v16;
      if (((*((unsigned __int16 *)v16 + 2) | (*((unsigned __int8 *)v16 + 6) << 16)) & 0x3F87F) == 0x3F)
      {
        *v16 += 2;
        v7 = v6;
      }
      else
      {
        v7 = &WebCore::staticCSSValuePool[4664];
        *v7 += 2;
      }
      goto LABEL_6;
    }
    goto LABEL_52;
  }
  WebCore::CSSPropertyParserHelpers::consumeGridLine(this, v5, &v15);
  v7 = v15;
  if (v15)
  {
    if (!WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace(this, v5))
    {
      if (*this == this[1])
      {
        v6 = v16;
LABEL_6:
        if (((*((unsigned __int16 *)v6 + 2) | (*((unsigned __int8 *)v6 + 6) << 16)) & 0x3F87F) != 0x3F)
          v6 = &WebCore::staticCSSValuePool[4664];
        *v6 += 2;
        goto LABEL_9;
      }
      goto LABEL_41;
    }
    WebCore::CSSPropertyParserHelpers::consumeGridLine(this, v5, &v15);
    v6 = v15;
    if (!v15)
    {
LABEL_41:
      if (*v7 != 2)
      {
        v12 = 0;
        *v7 -= 2;
        goto LABEL_24;
      }
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v5);
      goto LABEL_52;
    }
    if (WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace(this, v5))
    {
      WebCore::CSSPropertyParserHelpers::consumeGridLine(this, v5, &v15);
      v8 = v15;
      if (!v15)
      {
LABEL_39:
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
        else
          *v6 -= 2;
        goto LABEL_41;
      }
    }
    else
    {
      v8 = 0;
    }
    if (*this == this[1])
    {
      if (v8)
      {
LABEL_11:
        v15 = v16;
        v16 = 0;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 135, 497, &v15, v2, 0);
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v9);
          else
            *v15 -= 2;
        }
        v15 = v7;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 133, 497, &v15, v2, 0);
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v10);
          else
            *v15 -= 2;
        }
        v15 = v6;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 134, 497, &v15, v2, 0);
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v11);
          else
            *v15 -= 2;
        }
        v15 = v8;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 132, 497, &v15, v2, 0);
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v5);
          else
            *v15 -= 2;
        }
        v12 = 1;
        goto LABEL_24;
      }
LABEL_9:
      if (((*((unsigned __int16 *)v7 + 2) | (*((unsigned __int8 *)v7 + 6) << 16)) & 0x3F87F) == 0x3F)
      {
        *v7 += 2;
        v8 = v7;
      }
      else
      {
        v8 = &WebCore::staticCSSValuePool[4664];
        *v8 += 2;
      }
      goto LABEL_11;
    }
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
      else
        *v8 -= 2;
    }
    goto LABEL_39;
  }
LABEL_52:
  v12 = 0;
LABEL_24:
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
    else
      *v13 -= 2;
  }
  return v12;
}

uint64_t WebCore::CSSPropertyParser::consumeGridTemplateShorthand(uint64_t a1, int a2, int a3)
{
  WTF::StringImpl *v6;
  WTF *v7;
  __int128 *v8;
  __int128 *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  unsigned int *v21;
  _DWORD *v22;
  unint64_t v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD **v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  char *v38;
  _DWORD *v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  char v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  int *v49;
  int v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  int v65;
  WTF **v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  WTF *v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t *v73;
  WTF *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  WTF *v79;
  WTF *v80;
  int v81;
  WTF::StringImpl *v82;
  __int128 *v83;
  __int128 *v84;
  __int128 *v85;
  char v86;
  unsigned int v87;
  int *v88;
  WTF *v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  WTF *v92;
  uint64_t v93;
  _DWORD *v94;
  WTF *v95;
  WTF::StringImpl *v97;
  int *v98;
  WTF *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  WTF::StringImpl *v105;
  WTF *v106;
  uint64_t v107;
  _DWORD *v108;
  WTF *v109;
  _QWORD *v111;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  int v116;
  int v117;
  int v118;
  __int128 v119;
  WTF *v120;
  int v121;
  unsigned int v122;
  _BYTE v123[32];
  int *v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  _BYTE v128[32];
  uint64_t v129;
  _QWORD *v130[2];

  v119 = *(_OWORD *)a1;
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6>(a1, (int **)&v126);
  v7 = v126;
  if (v126)
  {
    v9 = *(__int128 **)a1;
    v8 = *(__int128 **)(a1 + 8);
    if (*(__int128 **)a1 == v8)
    {
      dword_1ECE8BC48 += 2;
      v126 = (WTF *)&WebCore::staticCSSValuePool[3112];
      WebCore::CSSPropertyParser::addProperty(a1, 138, a2, (int **)&v126, a3, 0);
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, v10);
        else
          *(_DWORD *)v126 -= 2;
      }
      dword_1ECE8BC48 += 2;
      v126 = (WTF *)&WebCore::staticCSSValuePool[3112];
      WebCore::CSSPropertyParser::addProperty(a1, 137, a2, (int **)&v126, a3, 0);
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, v82);
        else
          *(_DWORD *)v126 -= 2;
      }
      dword_1ECE8BC48 += 2;
      v126 = (WTF *)&WebCore::staticCSSValuePool[3112];
      WebCore::CSSPropertyParser::addProperty(a1, 136, a2, (int **)&v126, a3, 0);
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, v6);
        else
          *(_DWORD *)v126 -= 2;
      }
      v11 = 1;
      goto LABEL_170;
    }
LABEL_8:
    if (v9 >= v8)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v11 = 0;
    if ((*(_DWORD *)v9 & 0x3F) == 6 && *((_WORD *)v9 + 8) == 47)
    {
      v12 = *(__int128 **)a1;
      if (*(__int128 **)a1 == v8)
      {
        v14 = 1;
        v13 = v8;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v13 = *(__int128 **)a1;
        }
      }
      else
      {
        v13 = (__int128 *)((char *)v12 + 24);
        *(_QWORD *)a1 = (char *)v12 + 24;
      }
      while (1)
      {
        if (v13 < v8 || (v14 & 1) != 0)
        {
          if (v13 >= v8)
            v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v15 = *(_DWORD *)v13;
        }
        else
        {
          v15 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
          v14 = 1;
        }
        if ((v15 & 0x3F) != 0x10)
          break;
        v13 = (__int128 *)(*(_QWORD *)a1 + 24);
        *(_QWORD *)a1 = v13;
      }
      WebCore::CSSPropertyParserHelpers::consumeGridTemplatesRowsOrColumns((__int128 **)a1, *(WebCore::CSSParserTokenRange **)(a1 + 16), (int **)&v126);
      v99 = v126;
      if (v126)
      {
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
        {
          v120 = v7;
          WebCore::CSSPropertyParser::addProperty(a1, 138, a2, (int **)&v120, a3, 0);
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v100);
            else
              *(_DWORD *)v120 -= 2;
          }
          v120 = v99;
          WebCore::CSSPropertyParser::addProperty(a1, 137, a2, (int **)&v120, a3, 0);
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v101);
            else
              *(_DWORD *)v120 -= 2;
          }
          dword_1ECE8BC48 += 2;
          v120 = (WTF *)&WebCore::staticCSSValuePool[3112];
          WebCore::CSSPropertyParser::addProperty(a1, 136, a2, (int **)&v120, a3, 0);
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v102);
            else
              *(_DWORD *)v120 -= 2;
          }
          return 1;
        }
        if (*(_DWORD *)v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, v6);
        else
          *(_DWORD *)v126 -= 2;
      }
      v11 = 0;
    }
LABEL_170:
    if (*(_DWORD *)v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *(_DWORD *)v7 -= 2;
    return v11;
  }
  WebCore::CSSPropertyParserHelpers::consumeGridTrackList(a1, *(_QWORD *)(a1 + 16), 0, (int **)&v126);
  v7 = v126;
  if (v126)
  {
    v9 = *(__int128 **)a1;
    v8 = *(__int128 **)(a1 + 8);
    goto LABEL_8;
  }
  v117 = a2;
  v118 = a3;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)a1 = v119;
  v129 = 0;
  v130[0] = 0;
  v126 = (WTF *)v128;
  v18 = &dword_1ECE90000;
  v127 = 4;
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeGridLineNames((_OWORD *)a1, 0, (uint64_t *)&v120);
    v20 = v120;
    if (!v120)
      goto LABEL_47;
    if (v16)
    {
      v21 = *(unsigned int **)(v16 + 8);
      if (v21 && (v24 = *v21, v22 = v21 + 2, (v23 = v24) != 0))
      {
        if (v23 <= 0x10)
          v26 = 16;
        else
          v26 = v23;
        if (v26 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19588E9C0);
        }
        v57 = WTF::fastMalloc((WTF *)(8 * v26));
        v25 = (char *)v57;
        v58 = 0;
        do
        {
          v59 = *(_DWORD **)&v22[v58];
          if (v59)
            *v59 += 2;
          *(_QWORD *)(v57 + v58 * 4) = v59;
          v58 += 2;
        }
        while (2 * v23 != v58);
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v23 = 0;
      }
      v27 = (_DWORD *)*((_QWORD *)v20 + 1);
      if (v27 && (v30 = *v27, v29 = (_DWORD **)(v27 + 2), (v28 = v30) != 0))
      {
        v60 = v28 + v23;
        v61 = 8 * v23;
        if (v60 <= v26)
        {
          v31 = v25;
        }
        else
        {
          v62 = v26 + (v26 >> 2);
          if (v62 >= 0x10)
            v63 = v62 + 1;
          else
            v63 = 16;
          if (v63 <= v60)
            v63 = v60;
          if (v63 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19588E9C8);
          }
          v31 = (char *)WTF::fastMalloc((WTF *)(8 * v63));
          memcpy(v31, v25, v61);
          if (v25)
          {
            if (v31 == v25)
              v31 = 0;
            WTF::fastFree((WTF *)v25, v64);
          }
        }
        v71 = 8 * v28;
        do
        {
          v72 = *v29;
          if (*v29)
            *v72 += 2;
          *(_QWORD *)&v31[v61] = v72;
          ++v29;
          v61 += 8;
          v71 -= 8;
        }
        while (v71);
        v23 = v60;
      }
      else
      {
        v31 = v25;
      }
      v32 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v32 = 2;
      v33 = (*(unsigned __int8 *)(v32 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_WORD *)(v32 + 4) = 0x4000;
      *(_BYTE *)(v32 + 6) = BYTE2(v33);
      if (v23)
      {
        v34 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v23 + 8));
        v35 = 0;
        *v34 = v23;
        do
        {
          v36 = *(_DWORD **)&v31[v35 * 4];
          if (v36)
            *v36 += 2;
          *(_QWORD *)&v34[v35 + 2] = v36;
          v35 += 2;
        }
        while (2 * v23 != v35);
      }
      else
      {
        v34 = 0;
      }
      *(_QWORD *)(v32 + 8) = v34;
      if (!HIDWORD(v127))
      {
        __break(0xC471u);
        JUMPOUT(0x19588E9B8);
      }
      v38 = (char *)v126 + 8 * HIDWORD(v127);
      v39 = (_DWORD *)*((_QWORD *)v38 - 1);
      *((_QWORD *)v38 - 1) = v32;
      v18 = &dword_1ECE90000;
      if (v39)
      {
        if (*v39 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v19);
          if (!v23)
          {
LABEL_45:
            if (v31)
              WTF::fastFree((WTF *)v31, v19);
            goto LABEL_47;
          }
LABEL_76:
          v54 = 8 * v23;
          v55 = (WTF::StringImpl **)v31;
          do
          {
            v56 = *v55;
            *v55 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, v19);
              else
                *(_DWORD *)v56 -= 2;
            }
            ++v55;
            v54 -= 8;
          }
          while (v54);
          goto LABEL_45;
        }
        *v39 -= 2;
      }
      if (!v23)
        goto LABEL_45;
      goto LABEL_76;
    }
    v37 = HIDWORD(v127);
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1);
      v37 = HIDWORD(v127);
    }
    *((_QWORD *)v126 + v37) = v20;
    HIDWORD(v127) = v37 + 1;
    v20 = 0;
LABEL_47:
    v41 = *(__int128 **)a1;
    v40 = *(__int128 **)(a1 + 8);
    if (*(_QWORD *)a1 >= (unint64_t)v40)
    {
      v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v18[312] & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        *((_BYTE *)v18 + 1248) = 1;
        v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v41 & 0x3F) != 0x1C)
      goto LABEL_66;
    v42 = *(__int128 **)a1;
    if (*(__int128 **)a1 == v40)
    {
      v44 = 1;
      if ((v18[312] & 1) != 0)
      {
        v43 = v40;
        v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v18 = &dword_1ECE90000;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v18 = &dword_1ECE90000;
        v43 = *(__int128 **)a1;
        v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    else
    {
      v43 = (__int128 *)((char *)v42 + 24);
      *(_QWORD *)a1 = (char *)v42 + 24;
      v44 = *((_BYTE *)v18 + 1248);
    }
    while (1)
    {
      if (v43 < v40 || (v44 & 1) != 0)
      {
        if (v43 >= v40)
          v43 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v45 = *(_DWORD *)v43;
      }
      else
      {
        v45 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v45;
        v44 = 1;
        *((_BYTE *)v18 + 1248) = 1;
      }
      if ((v45 & 0x3F) != 0x10)
        break;
      v43 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v43;
    }
    if (WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasRow(*((unsigned __int8 **)v42 + 1), (unsigned __int8 *)(*((unsigned int *)v42 + 1) | ((unint64_t)((*(_DWORD *)v42 >> 22) & 1) << 32)), (uint64_t *)v130, v17, (unint64_t *)&v129))
    {
      WebCore::CSSPropertyParserHelpers::consumeGridTrackSize((__int128 **)a1, (WebCore::CSSParserTokenRange *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 48), (int **)&v120);
      v47 = v120;
      if (v120)
      {
        v125 = v120;
        v120 = 0;
        LODWORD(v48) = HIDWORD(v127);
        if (HIDWORD(v127) == (_DWORD)v127)
        {
          v73 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
          v48 = HIDWORD(v127);
          v74 = v126;
          v75 = *v73;
          *v73 = 0;
          *((_QWORD *)v74 + v48) = v75;
        }
        else
        {
          v125 = 0;
          *((_QWORD *)v126 + HIDWORD(v127)) = v47;
        }
        HIDWORD(v127) = v48 + 1;
        v49 = (int *)v125;
        v125 = 0;
        if (v49)
        {
          if (*v49 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v49, v46);
          else
            *v49 -= 2;
        }
      }
      else
      {
        WebCore::staticCSSValuePool[4664] += 2;
        v52 = HIDWORD(v127);
        if (HIDWORD(v127) == (_DWORD)v127)
        {
          v76 = HIDWORD(v127) + ((unint64_t)HIDWORD(v127) >> 2);
          if (v76 >= 0x10)
            v77 = v76 + 1;
          else
            v77 = 16;
          if (v77 <= (unint64_t)HIDWORD(v127) + 1)
            v78 = HIDWORD(v127) + 1;
          else
            v78 = v77;
          v79 = v126;
          if (v78 < 5)
          {
            v80 = (WTF *)v128;
            v126 = (WTF *)v128;
            LODWORD(v127) = 4;
          }
          else
          {
            if (v78 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19588E9D0);
            }
            v80 = (WTF *)WTF::fastMalloc((WTF *)(8 * v78));
            LODWORD(v127) = v78;
            v126 = v80;
          }
          memcpy(v80, v79, 8 * v52);
          if (v128 != (_BYTE *)v79 && v79)
          {
            if (v126 == v79)
            {
              v126 = 0;
              LODWORD(v127) = 0;
            }
            WTF::fastFree(v79, v46);
          }
          v81 = HIDWORD(v127) + 1;
          *((_QWORD *)v126 + HIDWORD(v127)) = &WebCore::staticCSSValuePool[4664];
          HIDWORD(v127) = v81;
          v18 = &dword_1ECE90000;
        }
        else
        {
          *((_QWORD *)v126 + HIDWORD(v127)) = &WebCore::staticCSSValuePool[4664];
          HIDWORD(v127) = v52 + 1;
        }
      }
      v53 = v120;
      v120 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v46);
        else
          *(_DWORD *)v53 -= 2;
      }
      WebCore::CSSPropertyParserHelpers::consumeGridLineNames((_OWORD *)a1, 0, (uint64_t *)&v120);
      v51 = v120;
      v120 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v19);
          v70 = v120;
          v120 = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v19);
            else
              *(_DWORD *)v70 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      ++v17;
      if (v51)
      {
        v65 = HIDWORD(v127);
        if (HIDWORD(v127) == (_DWORD)v127)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1);
          v65 = HIDWORD(v127);
        }
        v66 = (WTF **)((char *)v126 + 8 * HIDWORD(v127));
        *(_DWORD *)v51 += 2;
        *v66 = v51;
        HIDWORD(v127) = v65 + 1;
      }
      v50 = 1;
      if (!v16)
        goto LABEL_114;
    }
    else
    {
LABEL_66:
      v50 = 0;
      v51 = v20;
      if (!v16)
        goto LABEL_114;
    }
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
LABEL_114:
      if (!v50)
        goto LABEL_252;
      goto LABEL_115;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, v19);
    if (!v50)
      goto LABEL_252;
LABEL_115:
    v68 = *(__int128 **)a1;
    v67 = *(__int128 **)(a1 + 8);
    if (*(__int128 **)a1 == v67)
      goto LABEL_187;
    if (*(_QWORD *)a1 >= (unint64_t)v67)
    {
      v68 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v18[312] & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        *((_BYTE *)v18 + 1248) = 1;
        v68 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v16 = (uint64_t)v51;
    if ((*(_DWORD *)v68 & 0x3F) == 6)
    {
      v69 = *(__int128 **)a1;
      if (*(_QWORD *)a1 >= (unint64_t)v67)
      {
        v69 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v18[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v18 + 1248) = 1;
          v69 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v16 = (uint64_t)v51;
      if (*((_WORD *)v69 + 8) == 47)
        break;
    }
  }
  v83 = *(__int128 **)a1;
  if (*(__int128 **)a1 == v67)
  {
LABEL_187:
    v88 = &WebCore::staticCSSValuePool[3112];
    dword_1ECE8BC48 += 2;
    goto LABEL_188;
  }
  if (*(_QWORD *)a1 >= (unint64_t)v67)
  {
    v83 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v18[312] & 1) == 0)
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      *((_BYTE *)v18 + 1248) = 1;
    }
  }
  v11 = 0;
  if ((*(_DWORD *)v83 & 0x3F) == 6 && *((_WORD *)v83 + 8) == 47)
  {
    v84 = *(__int128 **)a1;
    if (*(__int128 **)a1 == v67)
    {
      v86 = 1;
      if ((v18[312] & 1) != 0)
      {
        v85 = v67;
        v18 = &dword_1ECE90000;
      }
      else
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v18 = &dword_1ECE90000;
        v85 = *(__int128 **)a1;
      }
    }
    else
    {
      v85 = (__int128 *)((char *)v84 + 24);
      *(_QWORD *)a1 = (char *)v84 + 24;
      v86 = *((_BYTE *)v18 + 1248);
    }
    while (1)
    {
      if (v85 < v67 || (v86 & 1) != 0)
      {
        if (v85 >= v67)
          v85 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v87 = *(_DWORD *)v85;
      }
      else
      {
        v87 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v87;
        v86 = 1;
        *((_BYTE *)v18 + 1248) = 1;
      }
      if ((v87 & 0x3F) != 0x10)
        break;
      v85 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v85;
    }
    WebCore::CSSPropertyParserHelpers::consumeGridTrackList(a1, *(_QWORD *)(a1 + 16), 1, (int **)&v120);
    v88 = (int *)v120;
    if (!v120)
    {
LABEL_252:
      v11 = 0;
      goto LABEL_253;
    }
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    {
      if (*(_DWORD *)v120 != 2)
      {
        v11 = 0;
        *(_DWORD *)v120 -= 2;
        goto LABEL_253;
      }
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v19);
      goto LABEL_252;
    }
LABEL_188:
    v120 = (WTF *)v123;
    v121 = 4;
    v89 = v126;
    if (v126 == (WTF *)v128)
    {
      v90 = HIDWORD(v127);
      memcpy(v123, v128, 8 * HIDWORD(v127));
    }
    else
    {
      v126 = (WTF *)v128;
      v120 = v89;
      v116 = v127;
      v90 = HIDWORD(v127);
      LODWORD(v127) = 4;
      v121 = v116;
    }
    HIDWORD(v127) = 0;
    v122 = v90;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v120, (uint64_t *)&v124);
    v125 = (WTF *)v124;
    WebCore::CSSPropertyParser::addProperty(a1, 138, v117, (int **)&v125, v118, 0);
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, v91);
      else
        *(_DWORD *)v125 -= 2;
    }
    if (v122)
    {
      v92 = v120;
      v93 = 8 * v122;
      do
      {
        v94 = *(_DWORD **)v92;
        *(_QWORD *)v92 = 0;
        if (v94)
        {
          if (*v94 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v94, v91);
          else
            *v94 -= 2;
        }
        v92 = (WTF *)((char *)v92 + 8);
        v93 -= 8;
      }
      while (v93);
    }
    v95 = v120;
    if (v123 != (_BYTE *)v120 && v120 != 0)
    {
      v120 = 0;
      v121 = 0;
      WTF::fastFree(v95, v91);
    }
    v125 = (WTF *)v88;
    WebCore::CSSPropertyParser::addProperty(a1, 137, v117, (int **)&v125, v118, 0);
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, v97);
      else
        *(_DWORD *)v125 -= 2;
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v124, v130);
    WebCore::CSSGridTemplateAreasValue::create((uint64_t *)&v124, v17, v129, (uint64_t *)&v125);
    WebCore::CSSPropertyParser::addProperty(a1, 136, v117, (int **)&v125, v118, 0);
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, v19);
      else
        *(_DWORD *)v125 -= 2;
    }
    v98 = v124;
    if (v124)
    {
      v103 = *(v124 - 1);
      if ((_DWORD)v103)
      {
        v104 = (WTF::StringImpl **)v124;
        do
        {
          v105 = *v104;
          if (*v104 != (WTF::StringImpl *)-1)
          {
            *v104 = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
                WTF::StringImpl::destroy(v105, v19);
              else
                *(_DWORD *)v105 -= 2;
            }
          }
          v104 += 4;
          --v103;
        }
        while (v103);
      }
      WTF::fastFree((WTF *)(v98 - 4), v19);
    }
    v11 = 1;
  }
LABEL_253:
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, v19);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (HIDWORD(v127))
  {
    v106 = v126;
    v107 = 8 * HIDWORD(v127);
    do
    {
      v108 = *(_DWORD **)v106;
      *(_QWORD *)v106 = 0;
      if (v108)
      {
        if (*v108 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v108, v19);
        else
          *v108 -= 2;
      }
      v106 = (WTF *)((char *)v106 + 8);
      v107 -= 8;
    }
    while (v107);
  }
  v109 = v126;
  if (v128 != (_BYTE *)v126 && v126 != 0)
  {
    v126 = 0;
    LODWORD(v127) = 0;
    WTF::fastFree(v109, v19);
  }
  v111 = v130[0];
  if (v130[0])
  {
    v113 = *((unsigned int *)v130[0] - 1);
    if ((_DWORD)v113)
    {
      v114 = (WTF::StringImpl **)v130[0];
      do
      {
        v115 = *v114;
        if (*v114 != (WTF::StringImpl *)-1)
        {
          *v114 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v19);
            else
              *(_DWORD *)v115 -= 2;
          }
        }
        v114 += 4;
        --v113;
      }
      while (v113);
    }
    WTF::fastFree((WTF *)(v111 - 2), v19);
  }
  return v11;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  __int128 **v2;
  unint64_t v4;
  __int128 *v5;
  unsigned int *v6;
  int *v7;
  __int128 *v8;

  v2 = (__int128 **)result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(unsigned int **)result;
  if ((unint64_t)*v2 >= v4)
  {
    v6 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::id(v6);
  if ((_DWORD)result != 6)
  {
LABEL_5:
    v7 = 0;
LABEL_6:
    *a2 = v7;
    return result;
  }
  v8 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(v2);
  result = (uint64_t)WebCore::CSSParserToken::id((unsigned int *)v8);
  if (result < 0x48E)
  {
    v7 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v7 += 2;
    goto LABEL_6;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParser::consumeGridShorthand(WebCore::CSSPropertyParser *this, int a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  int *v13;
  WTF::StringImpl *v14;
  __int128 *v15;
  __int128 *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t result;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  WTF::StringImpl *v29;
  __int128 *v30;
  __int128 *v31;
  char v32;
  unsigned int v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  char v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  __int128 *v41;
  __int128 *v42;
  char v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  char v56;
  _BYTE v57[9];
  __int128 v58;
  char v59;
  int **v60;
  int *v61;

  v58 = *(_OWORD *)this;
  if (!WebCore::CSSPropertyParser::consumeGridTemplateShorthand((uint64_t)this, 496, a2))
  {
    *(_OWORD *)this = v58;
    v7 = *(__int128 **)this;
    v6 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this >= v6)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v7 & 0x3F) == 0)
    {
      v23 = *((_DWORD *)v7 + 4);
      if (v23 < 0)
      {
        v23 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
        *((_DWORD *)v7 + 4) = v23;
      }
      if ((unsigned __int16)v23 == 902)
      {
LABEL_63:
        WebCore::consumeImplicitGridAutoFlow((uint64_t *)&v52, (__int128 **)this, 523);
        v25 = v52;
        if (!v52)
          return 0;
        v27 = *(__int128 **)this;
        v26 = (__int128 *)*((_QWORD *)this + 1);
        if (*(__int128 **)this == v26)
        {
          v18 = 0;
          v17 = 0;
LABEL_121:
          v13 = 0;
          goto LABEL_122;
        }
        if (*(_QWORD *)this >= (unint64_t)v26)
        {
          v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if ((*(_DWORD *)v27 & 0x3F) == 6 && *((_WORD *)v27 + 8) == 47)
        {
          v36 = *(__int128 **)this;
          if (*(__int128 **)this == v26)
          {
            v38 = 1;
            v37 = v26;
            {
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              v37 = *(__int128 **)this;
            }
          }
          else
          {
            v37 = (__int128 *)((char *)v36 + 24);
            *(_QWORD *)this = (char *)v36 + 24;
          }
          while (1)
          {
            if (v37 < v26 || (v38 & 1) != 0)
            {
              if (v37 >= v26)
                v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v39 = *(_DWORD *)v37;
            }
            else
            {
              v39 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
              v38 = 1;
            }
            if ((v39 & 0x3F) != 0x10)
              break;
            v37 = (__int128 *)(*(_QWORD *)this + 24);
            *(_QWORD *)this = v37;
          }
          v17 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
          *(_DWORD *)v17 += 2;
        }
        else
        {
          WebCore::CSSPropertyParserHelpers::consumeGridTrackList((uint64_t)this, *((_QWORD *)this + 2), 2, (int **)&v52);
          v17 = v52;
          if (!v52)
          {
LABEL_120:
            v18 = 0;
            goto LABEL_121;
          }
          v28 = *(__int128 **)this;
          v26 = (__int128 *)*((_QWORD *)this + 1);
          if (*(_QWORD *)this >= (unint64_t)v26)
          {
            v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          v18 = 0;
          if ((*(_DWORD *)v28 & 0x3F) != 6 || *((_WORD *)v28 + 8) != 47)
          {
            v13 = 0;
            v29 = 0;
LABEL_123:
            if (*(_DWORD *)v25 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v12);
            else
              *(_DWORD *)v25 -= 2;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v12);
                if (!v13)
                  goto LABEL_43;
                goto LABEL_29;
              }
              *(_DWORD *)v29 -= 2;
            }
            if (!v13)
              goto LABEL_43;
LABEL_29:
            if (*v13 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v12);
            else
              *v13 -= 2;
LABEL_43:
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v12);
                if (v18)
                  goto LABEL_47;
                return 0;
              }
              *(_DWORD *)v17 -= 2;
            }
            if (v18)
            {
LABEL_47:
              if (*(_DWORD *)v18 != 2)
              {
                result = 0;
                *(_DWORD *)v18 -= 2;
                return result;
              }
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v12);
            }
            return 0;
          }
          v41 = *(__int128 **)this;
          if (*(__int128 **)this == v26)
          {
            v43 = 1;
            v42 = v26;
            {
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              v42 = *(__int128 **)this;
            }
          }
          else
          {
            v42 = (__int128 *)((char *)v41 + 24);
            *(_QWORD *)this = (char *)v41 + 24;
          }
          while (1)
          {
            if (v42 < v26 || (v43 & 1) != 0)
            {
              if (v42 >= v26)
                v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v44 = *(_DWORD *)v42;
            }
            else
            {
              v44 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v44;
              v43 = 1;
            }
            if ((v44 & 0x3F) != 0x10)
              break;
            v42 = (__int128 *)(*(_QWORD *)this + 24);
            *(_QWORD *)this = v42;
          }
        }
        if (*(__int128 **)this != v26)
        {
          WebCore::CSSPropertyParserHelpers::consumeGridTemplatesRowsOrColumns((__int128 **)this, *((WebCore::CSSParserTokenRange **)this + 2), (int **)&v52);
          v29 = v52;
          if (!v52)
          {
            v18 = 0;
            v13 = 0;
            goto LABEL_123;
          }
          v13 = &WebCore::staticCSSValuePool[3112];
          v18 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
LABEL_116:
          dword_1ECE8BC48 += 2;
          WebCore::staticCSSValuePool[4664] += 2;
          if (*(_QWORD *)this == *((_QWORD *)this + 1))
          {
            v52 = v29;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, 137, 496, (int **)&v52, a2, 0);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v40);
              else
                *(_DWORD *)v52 -= 2;
            }
            v52 = (WTF::StringImpl *)v13;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, 138, 496, (int **)&v52, a2, 0);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v45);
              else
                *(_DWORD *)v52 -= 2;
            }
            dword_1ECE8BC48 += 2;
            v52 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[3112];
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, 136, 496, (int **)&v52, a2, 0);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v46);
              else
                *(_DWORD *)v52 -= 2;
            }
            v52 = v25;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, 130, 496, (int **)&v52, a2, 0);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v47);
              else
                *(_DWORD *)v52 -= 2;
            }
            v52 = v18;
            WebCore::CSSPropertyParser::addProperty((uint64_t)this, 129, 496, (int **)&v52, a2, 0);
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v48);
              else
                *(_DWORD *)v52 -= 2;
            }
            v52 = v17;
            goto LABEL_37;
          }
          goto LABEL_123;
        }
        goto LABEL_120;
      }
      v6 = *((_QWORD *)this + 1);
    }
    v8 = *(__int128 **)this;
    if (*(_QWORD *)this >= v6)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) == 0)
    {
      v24 = *((_DWORD *)v8 + 4);
      if (v24 < 0)
      {
        v24 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = v24;
      }
      if ((unsigned __int16)v24 == 903)
        goto LABEL_63;
    }
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
    v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    v10 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v52 = v10;
    v53 = v50;
    v54 = v51;
    v55 = 0;
    v56 = v9;
    memset(v57, 0, sizeof(v57));
    if (v9 == 4)
    {
      *(_DWORD *)&v57[5] = 536871968;
      v57[4] = -63;
      *(_WORD *)&v57[2] = 0;
    }
    v11 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
    if (v11 != -1)
    {
      v61 = (int *)&v59;
      v60 = &v61;
      std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    }
    WebCore::CSSPropertyParserHelpers::consumeGridTemplatesRowsOrColumns((__int128 **)this, (WebCore::CSSParserTokenRange *)&v52, &v61);
    v13 = v61;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v12);
      else
        *(_DWORD *)v55 -= 2;
    }
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v12);
      else
        *(_DWORD *)v52 -= 2;
    }
    v14 = v49;
    v49 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
          return 0;
LABEL_25:
        v16 = *(__int128 **)this;
        v15 = (__int128 *)*((_QWORD *)this + 1);
        if (*(_QWORD *)this >= (unint64_t)v15)
        {
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        v17 = 0;
        if ((*(_DWORD *)v16 & 0x3F) != 6 || *((_WORD *)v16 + 8) != 47)
        {
          v18 = 0;
          goto LABEL_29;
        }
        v30 = *(__int128 **)this;
        if (*(__int128 **)this == v15)
        {
          v32 = 1;
          {
            v31 = v15;
          }
          else
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v31 = *(__int128 **)this;
          }
        }
        else
        {
          v31 = (__int128 *)((char *)v30 + 24);
          *(_QWORD *)this = (char *)v30 + 24;
        }
        while (1)
        {
          if (v31 < v15 || (v32 & 1) != 0)
          {
            if (v31 >= v15)
              v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v33 = *(_DWORD *)v31;
          }
          else
          {
            v33 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v33;
            v32 = 1;
          }
          v34 = v33 & 0x3F;
          v35 = *(__int128 **)this;
          if (v34 != 16)
            break;
          v31 = (__int128 *)((char *)v35 + 24);
          *(_QWORD *)this = v31;
        }
        if (v35 == v15
          || (WebCore::consumeImplicitGridAutoFlow((uint64_t *)&v52, (__int128 **)this, 525), (v25 = v52) == 0))
        {
          v17 = 0;
          v18 = 0;
          goto LABEL_29;
        }
        if (*(_QWORD *)this == *((_QWORD *)this + 1))
        {
          v18 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
          *(_DWORD *)v18 += 2;
          v29 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[3112];
          v17 = v18;
          goto LABEL_116;
        }
        WebCore::CSSPropertyParserHelpers::consumeGridTrackList((uint64_t)this, *((_QWORD *)this + 2), 2, (int **)&v52);
        v18 = v52;
        if (v52)
        {
          v29 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[3112];
          v17 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
          goto LABEL_116;
        }
        v17 = 0;
LABEL_122:
        v29 = 0;
        goto LABEL_123;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13)
      return 0;
    goto LABEL_25;
  }
  v4 = 0x143Cu;
  WebCore::staticCSSValuePool[v4] += 2;
  v52 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v4];
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 130, 496, (int **)&v52, a2, 0);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v5);
    else
      *(_DWORD *)v52 -= 2;
  }
  v19 = 0x1238u;
  WebCore::staticCSSValuePool[v19] += 2;
  v52 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v19];
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 129, 496, (int **)&v52, a2, 0);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v20);
    else
      *(_DWORD *)v52 -= 2;
  }
  WebCore::staticCSSValuePool[4664] += 2;
  v52 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
LABEL_37:
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 131, 496, (int **)&v52, a2, 0);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v21);
    else
      *(_DWORD *)v52 -= 2;
  }
  return 1;
}

uint64_t WebCore::consumeImplicitGridAutoFlow(uint64_t *a1, __int128 **a2, int a3)
{
  unsigned int v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  uint64_t result;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  unsigned int v22;
  int v23;

  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)902>((uint64_t)a2);
  v8 = *a2;
  v7 = a2[1];
  if (*a2 >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *a2;
  if (*a2 >= v7)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0)
    goto LABEL_5;
  v17 = *((_DWORD *)v9 + 4);
  if (v17 < 0)
  {
    v17 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
    *((_DWORD *)v9 + 4) = v17;
  }
  if ((unsigned __int16)v17 != 903)
  {
LABEL_5:
    v10 = 1;
  }
  else
  {
    v19 = *a2;
    v18 = (unint64_t)a2[1];
    if (*a2 == (__int128 *)v18)
    {
      v21 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v20 = *a2;
      v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v20 = (__int128 *)((char *)v19 + 24);
      *a2 = (__int128 *)((char *)v19 + 24);
    }
    while (1)
    {
      if ((unint64_t)v20 < v18 || (v21 & 1) != 0)
      {
        if ((unint64_t)v20 >= v18)
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v22 = *(_DWORD *)v20;
      }
      else
      {
        v22 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
        v21 = 1;
      }
      if ((v22 & 0x3F) != 0x10)
        break;
      v20 = (__int128 *)((char *)*a2 + 24);
      *a2 = v20;
    }
    if ((*(_DWORD *)v19 & 0x3F) != 0 || (v19[1] & 0x80000000) == 0)
    {
      v10 = 0;
    }
    else
    {
      v23 = WebCore::cssValueKeywordID(*((_QWORD *)v19 + 1), *((unsigned int *)v19 + 1) | ((unint64_t)((*(_DWORD *)v19 >> 22) & 1) << 32));
      v10 = 0;
      *((_DWORD *)v19 + 4) = v23;
    }
  }
  if (HIWORD(v6))
  {
    if (v10)
    {
      v12 = &WebCore::staticCSSValuePool[4 * a3 + 3088];
      *v12 += 2;
LABEL_14:
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v13 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 1;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = (v13 | 0x10000u) >> 16;
      *(_QWORD *)(result + 16) = v12;
      goto LABEL_16;
    }
LABEL_12:
    if (a3 != 523)
    {
      v14 = &WebCore::staticCSSValuePool[4 * a3 + 3088];
      *v14 += 2;
      v15 = &WebCore::staticCSSValuePool[6700];
      *v15 += 2;
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v16 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 2;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = BYTE2(v16) | 1;
      *(_QWORD *)(result + 16) = v14;
      *(_QWORD *)(result + 24) = v15;
      goto LABEL_16;
    }
    v12 = &WebCore::staticCSSValuePool[6700];
    *v12 += 2;
    goto LABEL_14;
  }
  if ((v10 & 1) == 0
    && WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)902>((uint64_t)a2) >= 0x10000)
  {
    goto LABEL_12;
  }
  result = 0;
LABEL_16:
  *a1 = result;
  return result;
}

BOOL WebCore::CSSPropertyParser::consumePlaceContentShorthand(__int128 **this, int a2)
{
  __int128 *v2;
  __int128 *v3;
  BOOL v4;
  int v7;
  WTF::StringImpl *v8;
  BOOL v10;
  unint64_t v11;
  __int128 *v12;
  int *v13;
  __int128 *v14;
  _BOOL8 v15;
  int v16;
  int *v17;
  WTF::StringImpl *v18;
  int v19;
  int *v20;
  int *v22;
  int *v23;
  int *v24;
  __int128 v25;

  v3 = *this;
  v2 = this[1];
  v4 = *this >= v2;
  if (*this == v2)
    return 0;
  v25 = *(_OWORD *)this;
  if (v4)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v3 & 0x3F) != 0)
  {
    v7 = 0;
  }
  else
  {
    v16 = *((_DWORD *)v3 + 4);
    if (v16 < 0)
    {
      v16 = WebCore::cssValueKeywordID(*((_QWORD *)v3 + 1), *((unsigned int *)v3 + 1) | ((unint64_t)((*(_DWORD *)v3 >> 22) & 1) << 32));
      *((_DWORD *)v3 + 4) = v16;
    }
    v7 = (unsigned __int16)v16;
  }
  WebCore::CSSPropertyParserHelpers::consumeContentDistributionOverflowPosition(this, (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::isContentPositionKeyword, &v24);
  if (!v24)
    return 0;
  v10 = v7 == 933 || v7 == 248;
  if (v7 == 931)
    v10 = 1;
  v12 = *this;
  v11 = (unint64_t)this[1];
  if (*this == (__int128 *)v11 && v10)
    goto LABEL_24;
  if ((unint64_t)v12 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v12 & 0x3F) == 0)
  {
    v19 = *((_DWORD *)v12 + 4);
    if (v19 < 0)
    {
      v19 = WebCore::cssValueKeywordID(*((_QWORD *)v12 + 1), *((unsigned int *)v12 + 1) | ((unint64_t)((*(_DWORD *)v12 >> 22) & 1) << 32));
      *((_DWORD *)v12 + 4) = v19;
    }
    v15 = 0;
    if ((unsigned __int16)v19 == 248 || (unsigned __int16)v19 == 931 || (unsigned __int16)v19 == 933)
      goto LABEL_50;
  }
  if (*this == this[1])
    *(_OWORD *)this = v25;
  WebCore::CSSPropertyParserHelpers::consumeContentDistributionOverflowPosition(this, (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::isContentPositionOrLeftOrRightKeyword, &v23);
  v13 = v23;
  if (!v23)
  {
LABEL_24:
    v15 = 0;
    goto LABEL_50;
  }
  v14 = this[1];
  v15 = *this == v14;
  if (*this == v14)
  {
    v17 = v24;
    v24 = 0;
    v22 = v17;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 41, 523, &v22, a2, 0);
    if (v22)
    {
      if (*v22 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v18);
      else
        *v22 -= 2;
    }
    v22 = v23;
    v23 = 0;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 148, 523, &v22, a2, 0);
    if (v22)
    {
      if (*v22 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v8);
      else
        *v22 -= 2;
    }
    v13 = v23;
    v23 = 0;
    if (!v13)
    {
      v15 = 1;
      goto LABEL_50;
    }
  }
  else
  {
    v23 = 0;
  }
  if (*v13 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v8);
  else
    *v13 -= 2;
LABEL_50:
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
    else
      *v20 -= 2;
  }
  return v15;
}

BOOL WebCore::CSSPropertyParser::consumePlaceItemsShorthand(__int128 **this, int a2)
{
  __int128 *v4;
  WTF::StringImpl *v5;
  int *v6;
  __int128 *v7;
  _BOOL8 v8;
  int *v9;
  WTF::StringImpl *v10;
  int v11;
  int *v12;
  int *v14;
  int *v15;
  int *v16;
  __int128 v17;

  v17 = *(_OWORD *)this;
  v4 = *this;
  if (*this >= this[1])
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) == 0)
  {
    v11 = *((_DWORD *)v4 + 4);
    if (v11 < 0)
    {
      v11 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
      *((_DWORD *)v4 + 4) = v11;
    }
    if ((unsigned __int16)v11 == 394)
      return 0;
  }
  WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition(this, (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::isSelfPositionKeyword, (WebCore::CSSPropertyParserHelpers *)&v16);
  if (!v16)
    return 0;
  if (*this == this[1])
    *(_OWORD *)this = v17;
  WebCore::CSSPropertyParserHelpers::consumeJustifyItems((unsigned int **)this, (WebCore::CSSPropertyParserHelpers *)&v15);
  v6 = v15;
  if (!v15)
  {
    v8 = 0;
    goto LABEL_28;
  }
  v7 = this[1];
  v8 = *this == v7;
  if (*this == v7)
  {
    v9 = v16;
    v16 = 0;
    v14 = v9;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 42, 524, &v14, a2, 0);
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v10);
      else
        *v14 -= 2;
    }
    v14 = v15;
    v15 = 0;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 149, 524, &v14, a2, 0);
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v5);
      else
        *v14 -= 2;
    }
    v6 = v15;
    v15 = 0;
    if (!v6)
    {
      v8 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v15 = 0;
  }
  if (*v6 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
  else
    *v6 -= 2;
LABEL_28:
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v5);
    else
      *v12 -= 2;
  }
  return v8;
}

BOOL WebCore::CSSPropertyParser::consumePlaceSelfShorthand(__int128 **this, int a2)
{
  WTF::StringImpl *v4;
  int *v5;
  __int128 *v6;
  _BOOL8 v7;
  int *v8;
  WTF::StringImpl *v9;
  int *v10;
  int *v12;
  int *v13;
  int *v14;
  __int128 v15;

  v15 = *(_OWORD *)this;
  WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition(this, (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::isSelfPositionKeyword, (WebCore::CSSPropertyParserHelpers *)&v14);
  if (!v14)
    return 0;
  if (*this == this[1])
    *(_OWORD *)this = v15;
  WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition(this, (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::isSelfPositionOrLeftOrRightKeyword, (WebCore::CSSPropertyParserHelpers *)&v13);
  v5 = v13;
  if (!v13)
  {
    v7 = 0;
    goto LABEL_21;
  }
  v6 = this[1];
  v7 = *this == v6;
  if (*this == v6)
  {
    v8 = v14;
    v14 = 0;
    v12 = v8;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 43, 525, &v12, a2, 0);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
      else
        *v12 -= 2;
    }
    v12 = v13;
    v13 = 0;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 150, 525, &v12, a2, 0);
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v4);
      else
        *v12 -= 2;
    }
    v5 = v13;
    v13 = 0;
    if (!v5)
    {
      v7 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    v13 = 0;
  }
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
  else
    *v5 -= 2;
LABEL_21:
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v4);
    else
      *v10 -= 2;
  }
  return v7;
}

uint64_t WebCore::CSSPropertyParser::consumeOverscrollBehaviorShorthand(WebCore::CSSPropertyParser *this, int a2)
{
  int *v4;
  __int128 *v5;
  __int128 *v6;
  char v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  __int128 *v16;
  unsigned int v17;
  int *v19;
  int *v20;
  int *v21;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  WebCore::CSSPropertyParsing::consumeOverscrollBehaviorX((uint64_t)this, &v21);
  v4 = v21;
  if (!v21)
    return 0;
  v6 = *(__int128 **)this;
  v5 = (__int128 *)*((_QWORD *)this + 1);
  while (1)
  {
    if (v6 < v5 || (v7 & 1) != 0)
    {
      v8 = v6 >= v5 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v7 = 1;
      v6 = *(__int128 **)this;
    }
    if ((v9 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)this = v6;
  }
  if (v6 == v5)
  {
    *v4 += 2;
    v20 = v4;
LABEL_28:
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 421, 515, &v21, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 422, 515, &v20, a2, 0);
    v10 = 1;
    v12 = v20;
    goto LABEL_29;
  }
  WebCore::CSSPropertyParsing::consumeOverscrollBehaviorX((uint64_t)this, &v19);
  v12 = v19;
  v20 = v19;
  v14 = *(__int128 **)this;
  v13 = (__int128 *)*((_QWORD *)this + 1);
  while (1)
  {
    if (v14 < v13 || (v15 & 1) != 0)
    {
      v16 = v14 >= v13 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v14;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v15 = 1;
      v14 = *(__int128 **)this;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v14 = (__int128 *)((char *)v14 + 24);
    *(_QWORD *)this = v14;
  }
  if (v14 == v13)
    goto LABEL_28;
  v10 = 0;
LABEL_29:
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
    else
      *v12 -= 2;
  }
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v11);
    else
      *v21 -= 2;
  }
  return v10;
}

uint64_t WebCore::CSSPropertyParser::consumeContainerShorthand(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  int v2;
  WTF::StringImpl *v4;
  int *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int *v11;
  int *v12;
  __int128 *v14;
  char v15;
  unsigned int v16;
  int *v17;
  int *v18;
  int *v19;

  v2 = (int)a2;
  WebCore::CSSPropertyParserHelpers::consumeContainerName(this, a2, &v19);
  v5 = v19;
  if (!v19)
    return 0;
  v7 = *this;
  v6 = this[1];
  if (*this == v6)
  {
    v18 = 0;
    goto LABEL_11;
  }
  if (*this >= v6)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v7 = *this;
    }
  }
  else
  {
    v8 = *this;
  }
  if ((*(_DWORD *)v8 & 0x3F) == 6 && *((_WORD *)v8 + 8) == 47)
  {
    if (v7 == v6)
    {
      v15 = 1;
      {
        v14 = v6;
      }
      else
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v14 = *this;
      }
    }
    else
    {
      v14 = (__int128 *)((char *)v7 + 24);
      *this = (__int128 *)((char *)v7 + 24);
    }
    while (1)
    {
      if (v14 < v6 || (v15 & 1) != 0)
      {
        if (v14 >= v6)
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = *(_DWORD *)v14;
      }
      else
      {
        v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
        v15 = 1;
      }
      if ((v16 & 0x3F) != 0x10)
        break;
      v14 = (__int128 *)((char *)*this + 24);
      *this = v14;
    }
    WebCore::CSSPropertyParsing::parseStyleProperty(&v18, this, 100, 0, this[2]);
    v11 = v18;
    if (*this != this[1])
    {
      v9 = 0;
LABEL_16:
      v18 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v4);
        else
          *v11 -= 2;
      }
      goto LABEL_20;
    }
    if (!v18)
      goto LABEL_8;
    v5 = v19;
LABEL_11:
    v19 = 0;
    v17 = v5;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 99, 489, &v17, v2, 0);
    if (v17)
    {
      if (*v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v10);
      else
        *v17 -= 2;
    }
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 100, 489, &v18, v2, 0);
    v9 = 1;
    v11 = v18;
    goto LABEL_16;
  }
  v18 = 0;
  if (v7 == v6)
    goto LABEL_11;
LABEL_8:
  v9 = 0;
LABEL_20:
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v4);
    else
      *v12 -= 2;
  }
  return v9;
}

uint64_t WebCore::CSSPropertyParser::consumeContainIntrinsicSizeShorthand(WebCore::CSSPropertyParser *this, int a2)
{
  int *v4;
  __int128 *v5;
  __int128 *v6;
  char v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  __int128 *v16;
  unsigned int v17;
  int *v18;
  int *v20;
  int *v21;
  int *v22;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  WebCore::CSSPropertyParserHelpers::consumeContainIntrinsicSize(this, (uint64_t *)&v22);
  v4 = v22;
  if (!v22)
    return 0;
  v6 = *(__int128 **)this;
  v5 = (__int128 *)*((_QWORD *)this + 1);
  while (1)
  {
    if (v6 < v5 || (v7 & 1) != 0)
    {
      v8 = v6 >= v5 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v7 = 1;
      v6 = *(__int128 **)this;
    }
    if ((v9 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)this = v6;
  }
  if (v6 == v5)
  {
    *v4 += 2;
    v21 = v4;
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumeContainIntrinsicSize(this, (uint64_t *)&v20);
    v12 = v20;
    v21 = v20;
    v14 = *(__int128 **)this;
    v13 = (__int128 *)*((_QWORD *)this + 1);
    while (1)
    {
      if (v14 < v13 || (v15 & 1) != 0)
      {
        v16 = v14 >= v13 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v14;
        v17 = *(_DWORD *)v16;
      }
      else
      {
        v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
        v15 = 1;
        v14 = *(__int128 **)this;
      }
      if ((v17 & 0x3F) != 0x10)
        break;
      v14 = (__int128 *)((char *)v14 + 24);
      *(_QWORD *)this = v14;
    }
    v10 = 0;
    if (v14 != v13 || !v12)
      goto LABEL_30;
  }
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 392, 488, &v22, a2, 0);
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 390, 488, &v21, a2, 0);
  v10 = 1;
  v12 = v21;
LABEL_30:
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
    else
      *v12 -= 2;
  }
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v11);
    else
      *v18 -= 2;
  }
  return v10;
}

int *WebCore::CSSPropertyParser::consumePerspectiveOrigin(WebCore::CSSPropertyParser *this, int a2)
{
  int v4;
  WTF::StringImpl *v5;
  int *result;
  int *v7;
  WTF::StringImpl *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  unsigned __int8 v14;

  WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)this, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 1, 0, 0, (uint64_t)&v12);
  v4 = v14;
  if (!v14)
    return (int *)(v4 != 0);
  v11 = v12;
  v12 = 0;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 199, 522, &v11, a2, 0);
  result = v11;
  if (v11)
  {
    if (*v11 == 2)
      result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v5);
    else
      *v11 -= 2;
  }
  if (v14)
  {
    v7 = v13;
    v13 = 0;
    v11 = v7;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 200, 522, &v11, a2, 0);
    if (v11)
    {
      if (*v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
      else
        *v11 -= 2;
    }
    if (v14)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
        else
          *v9 -= 2;
      }
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v8);
        else
          *v10 -= 2;
      }
    }
    return (int *)(v4 != 0);
  }
  __break(1u);
  return result;
}

BOOL WebCore::CSSPropertyParser::consumeOffset(__int128 **this, int a2)
{
  __int128 *v4;
  int **v5;
  WebCore::CSSPropertyParser *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  int *v12;
  int *v13;
  __int128 *v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;

  WebCore::CSSPropertyParsing::parseStyleProperty(&v24, this, 181, 512, this[2]);
  WebCore::CSSPropertyParsing::parseStyleProperty(&v23, this, 180, 512, this[2]);
  if (!v24)
  {
    if (!v23)
      return 0;
    goto LABEL_5;
  }
  v21 = 0;
  v22 = 0;
  if (v23)
  {
LABEL_5:
    WebCore::CSSPropertyParsing::parseStyleProperty(&v20, this, 179, 512, this[2]);
    v22 = v20;
    if (v20)
    {
      v4 = this[2];
      v5 = &v21;
      v6 = (WebCore::CSSPropertyParser *)this;
      v7 = 182;
    }
    else
    {
      WebCore::CSSPropertyParsing::parseStyleProperty(&v20, this, 182, 512, this[2]);
      v21 = v20;
      v4 = this[2];
      v5 = &v22;
      v6 = (WebCore::CSSPropertyParser *)this;
      v7 = 179;
    }
    WebCore::CSSPropertyParsing::parseStyleProperty(v5, v6, v7, 512, v4);
  }
  v20 = 0;
  v9 = *this;
  v8 = this[1];
  if (*this >= v8)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 6 || *((_WORD *)v9 + 8) != 47)
    goto LABEL_12;
  v15 = *this;
  if (*this == v8)
  {
    v17 = 1;
    {
      v16 = v8;
    }
    else
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v16 = *this;
    }
  }
  else
  {
    v16 = (__int128 *)((char *)v15 + 24);
    *this = (__int128 *)((char *)v15 + 24);
  }
  while (1)
  {
    if (v16 < v8 || (v17 & 1) != 0)
    {
      if (v16 >= v8)
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v18 = *(_DWORD *)v16;
    }
    else
    {
      v18 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
      v17 = 1;
    }
    if ((v18 & 0x3F) != 0x10)
      break;
    v16 = (__int128 *)((char *)*this + 24);
    *this = v16;
  }
  WebCore::CSSPropertyParsing::parseStyleProperty(&v19, this, 178, 512, this[2]);
  v20 = v19;
  if (!v19)
  {
    v11 = 0;
  }
  else
  {
LABEL_12:
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 180, 512, &v23, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 179, 512, &v22, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 181, 512, &v24, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 178, 512, &v20, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 182, 512, &v21, a2, 0);
    v11 = *this == this[1];
    if (v20)
    {
      if (*v20 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v10);
      else
        *v20 -= 2;
    }
  }
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v10);
    else
      *v21 -= 2;
  }
  if (v22)
  {
    if (*v22 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v10);
    else
      *v22 -= 2;
  }
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v10);
    else
      *v12 -= 2;
  }
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v10);
    else
      *v13 -= 2;
  }
  return v11;
}

uint64_t WebCore::CSSPropertyParser::consumeTextWrapShorthand(WebCore::CSSPropertyParser *this, int a2)
{
  int *v4;
  WebCore::CSSParserTokenRange *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v4 = &WebCore::staticCSSValuePool[5992];
    *v4 += 2;
    goto LABEL_8;
  }
  WebCore::CSSPropertyParsing::consumeTextWrapMode((uint64_t)this, &v13);
  v4 = v13;
  if (v13)
  {
    if (*(_QWORD *)this != *((_QWORD *)this + 1))
    {
      v5 = (WebCore::CSSParserTokenRange *)*((_QWORD *)this + 2);
      if ((*((_BYTE *)v5 + 56) & 0x40) != 0)
      {
        WebCore::CSSPropertyParsing::consumeTextWrapStyle((uint64_t)this, v5, &v13);
        v6 = v13;
        if (v13)
        {
          v7 = v4;
          goto LABEL_25;
        }
        goto LABEL_13;
      }
LABEL_12:
      v6 = 0;
      goto LABEL_13;
    }
LABEL_8:
    v13 = v4;
    WebCore::staticCSSValuePool[4664] += 2;
    v12 = &WebCore::staticCSSValuePool[4664];
    goto LABEL_9;
  }
  v5 = (WebCore::CSSParserTokenRange *)*((_QWORD *)this + 2);
  if ((*((_BYTE *)v5 + 56) & 0x40) == 0)
    goto LABEL_12;
  WebCore::CSSPropertyParsing::consumeTextWrapStyle((uint64_t)this, v5, &v13);
  v6 = v13;
  if (!v13)
    goto LABEL_13;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v12 = v13;
    WebCore::staticCSSValuePool[5992] += 2;
    v13 = &WebCore::staticCSSValuePool[5992];
    goto LABEL_9;
  }
  WebCore::CSSPropertyParsing::consumeTextWrapMode((uint64_t)this, &v13);
  v7 = v13;
  if (v13)
  {
LABEL_25:
    v10 = *(_QWORD *)this;
    v11 = *((_QWORD *)this + 1);
    v12 = v6;
    v13 = v7;
    if (v10 != v11)
    {
      v8 = 0;
      goto LABEL_14;
    }
LABEL_9:
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 270, 536, &v13, a2, 0);
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 271, 536, &v12, a2, 0);
    v8 = 1;
    v6 = v12;
    if (!v12)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 56) & 0x40) == 0)
  {
LABEL_13:
    v8 = 0;
    v13 = v4;
    if (!v6)
      goto LABEL_17;
    goto LABEL_14;
  }
  v8 = 0;
  v13 = 0;
LABEL_14:
  if (*v6 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
  else
    *v6 -= 2;
LABEL_17:
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
    else
      *v13 -= 2;
  }
  return v8;
}

_DWORD *WebCore::CSSPropertyParser::consumeScrollTimelineShorthand(__int128 **this, int a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *result;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF *v32;
  unsigned int v34;
  WTF *v35;
  WTF *v36;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  int v48;
  int v49;
  int v50;
  WTF *__src;
  WTF *v52;
  int v53;
  unsigned int v54;
  _BYTE v55[32];
  WTF *v56;
  int v57;
  unsigned int v58;
  _BYTE v59[32];
  int *v60;
  int *v61;
  WTF *v62;
  uint64_t v63;
  _BYTE v64[32];
  WTF *v65;
  uint64_t v66;
  _BYTE v67[40];

  v65 = (WTF *)v67;
  v66 = 4;
  v62 = (WTF *)v64;
  v63 = 4;
  v4 = 0x11CCu;
  do
  {
    WebCore::CSSPropertyParsing::consumeSingleScrollTimelineName(this, (uint64_t *)&v61);
    if (!v61)
      goto LABEL_48;
    v60 = v61;
    LODWORD(v6) = HIDWORD(v66);
    if (HIDWORD(v66) == (_DWORD)v66)
    {
      v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v65, HIDWORD(v66) + 1, (unint64_t)&v60);
      v6 = HIDWORD(v66);
      v14 = v65;
      v15 = *v13;
      *v13 = 0;
      *((_QWORD *)v14 + v6) = v15;
    }
    else
    {
      v60 = 0;
      *((_QWORD *)v65 + HIDWORD(v66)) = v61;
    }
    HIDWORD(v66) = v6 + 1;
    result = v60;
    v60 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
      else
        *result -= 2;
    }
    v9 = *this;
    v8 = this[1];
    if (*this >= v8)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0x15 || *this == v8)
    {
      WebCore::staticCSSValuePool[v4] += 2;
      v12 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        v19 = HIDWORD(v63) + ((unint64_t)HIDWORD(v63) >> 2);
        if (v19 >= 0x10)
          v20 = v19 + 1;
        else
          v20 = 16;
        if (v20 <= (unint64_t)HIDWORD(v63) + 1)
          v20 = HIDWORD(v63) + 1;
        __src = v62;
        if (v20 < 5)
        {
          v62 = (WTF *)v64;
          LODWORD(v63) = 4;
          v21 = (WTF *)v64;
        }
        else
        {
          if (v20 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v50 = v20;
          v21 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
          LODWORD(v63) = v50;
          v62 = v21;
        }
        memcpy(v21, __src, 8 * v12);
        if (v64 != (_BYTE *)__src && __src)
        {
          if (v62 == __src)
          {
            v62 = 0;
            LODWORD(v63) = 0;
          }
          WTF::fastFree(__src, v5);
        }
        v22 = HIDWORD(v63) + 1;
        *((_QWORD *)v62 + HIDWORD(v63)) = &WebCore::staticCSSValuePool[v4];
        HIDWORD(v63) = v22;
      }
      else
      {
        *((_QWORD *)v62 + HIDWORD(v63)) = &WebCore::staticCSSValuePool[v4];
        HIDWORD(v63) = v12 + 1;
      }
    }
    else
    {
      WebCore::CSSPropertyParsing::consumeAxis((uint64_t)this, &v61);
      if (!v61)
        goto LABEL_48;
      v60 = v61;
      LODWORD(v10) = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v62, HIDWORD(v63) + 1, (unint64_t)&v60);
        v10 = HIDWORD(v63);
        v17 = v62;
        v18 = *v16;
        *v16 = 0;
        *((_QWORD *)v17 + v10) = v18;
      }
      else
      {
        v60 = 0;
        *((_QWORD *)v62 + HIDWORD(v63)) = v61;
      }
      HIDWORD(v63) = v10 + 1;
      v11 = v60;
      v60 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v5);
        else
          *v11 -= 2;
      }
    }
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v5));
  v23 = HIDWORD(v66);
  if (!HIDWORD(v66))
  {
LABEL_48:
    v25 = 0;
    goto LABEL_49;
  }
  v56 = (WTF *)v59;
  v57 = 4;
  v24 = v65;
  if (v65 == (WTF *)v67)
  {
    memcpy(v59, v67, 8 * HIDWORD(v66));
  }
  else
  {
    v65 = (WTF *)v67;
    v56 = v24;
    v48 = v66;
    LODWORD(v66) = 4;
    v57 = v48;
  }
  HIDWORD(v66) = 0;
  v58 = v23;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v56, (uint64_t *)&v60);
  v61 = v60;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 220, 532, &v61, a2, 0);
  if (v61)
  {
    if (*v61 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v5);
    else
      *v61 -= 2;
  }
  if (v58)
  {
    v29 = v56;
    v30 = 8 * v58;
    do
    {
      v31 = *(_DWORD **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*v31 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v5);
        else
          *v31 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  v32 = v56;
  if (v59 != (_BYTE *)v56 && v56 != 0)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree(v32, v5);
  }
  v34 = HIDWORD(v63);
  if (!HIDWORD(v63))
  {
    v25 = 1;
    goto LABEL_77;
  }
  v52 = (WTF *)v55;
  v53 = 4;
  v35 = v62;
  if (v62 == (WTF *)v64)
  {
    memcpy(v55, v64, 8 * HIDWORD(v63));
  }
  else
  {
    v62 = (WTF *)v64;
    v52 = v35;
    v49 = v63;
    LODWORD(v63) = 4;
    v53 = v49;
  }
  HIDWORD(v63) = 0;
  v54 = v34;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v52, (uint64_t *)&v60);
  v61 = v60;
  WebCore::CSSPropertyParser::addProperty((uint64_t)this, 219, 532, &v61, a2, 0);
  if (v61)
  {
    if (*v61 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v5);
    else
      *v61 -= 2;
  }
  if (v54)
  {
    v43 = v52;
    v44 = 8 * v54;
    do
    {
      v45 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v45)
      {
        if (*v45 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v5);
        else
          *v45 -= 2;
      }
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  v46 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree(v46, v5);
  }
  v25 = 1;
LABEL_49:
  if (HIDWORD(v63))
  {
    v26 = v62;
    v27 = 8 * HIDWORD(v63);
    do
    {
      v28 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v5);
        else
          *v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
LABEL_77:
  v36 = v62;
  if (v64 != (_BYTE *)v62 && v62 != 0)
  {
    v62 = 0;
    LODWORD(v63) = 0;
    WTF::fastFree(v36, v5);
  }
  if (HIDWORD(v66))
  {
    v38 = v65;
    v39 = 8 * HIDWORD(v66);
    do
    {
      v40 = *(_DWORD **)v38;
      *(_QWORD *)v38 = 0;
      if (v40)
      {
        if (*v40 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v5);
        else
          *v40 -= 2;
      }
      v38 = (WTF *)((char *)v38 + 8);
      v39 -= 8;
    }
    while (v39);
  }
  v41 = v65;
  if (v67 != (_BYTE *)v65 && v65 != 0)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v41, v5);
  }
  return (_DWORD *)v25;
}

uint64_t WebCore::CSSPropertyParser::consumeViewTimelineShorthand(__int128 **this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int *v7;
  __int128 *v8;
  __int128 *v9;
  WebCore::CSSParserTokenRange *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  int *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  WTF *v43;
  unsigned int v44;
  int *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  WTF *v52;
  unsigned int v53;
  WTF *v54;
  uint64_t v55;
  _DWORD *v56;
  WTF *v57;
  WTF *v59;
  uint64_t v60;
  _DWORD *v61;
  WTF *v63;
  uint64_t v64;
  _DWORD *v65;
  WTF *v67;
  uint64_t v68;
  _DWORD *v69;
  int v72;
  int v73;
  int v74;
  WTF *v76;
  int v77;
  unsigned int v78;
  _BYTE v79[32];
  WTF *v80;
  int v81;
  unsigned int v82;
  _BYTE v83[32];
  WTF *v84;
  int v85;
  unsigned int v86;
  _BYTE v87[32];
  int *v88;
  WTF *v89;
  uint64_t v90;
  _BYTE v91[32];
  WTF *v92;
  uint64_t v93;
  _BYTE v94[32];
  WTF *v95;
  uint64_t v96;
  _BYTE v97[32];
  int *v98;
  int *v99[2];

  v95 = (WTF *)v97;
  v96 = 4;
  v92 = (WTF *)v94;
  v3 = 0x11CCu;
  v93 = 4;
  v89 = (WTF *)v91;
  v90 = 4;
  v4 = 0x1238u;
  do
  {
    WebCore::CSSPropertyParsing::consumeSingleScrollTimelineName(this, (uint64_t *)v99);
    if (!v99[0])
    {
LABEL_55:
      v34 = 0;
      goto LABEL_112;
    }
    v98 = v99[0];
    LODWORD(v6) = HIDWORD(v96);
    if (HIDWORD(v96) == (_DWORD)v96)
    {
      v18 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, HIDWORD(v96) + 1, (unint64_t)&v98);
      v6 = HIDWORD(v96);
      v19 = v95;
      v20 = *v18;
      *v18 = 0;
      *((_QWORD *)v19 + v6) = v20;
    }
    else
    {
      v98 = 0;
      *((int **)v95 + HIDWORD(v96)) = v99[0];
    }
    HIDWORD(v96) = v6 + 1;
    v7 = v98;
    v98 = 0;
    if (v7)
    {
      if (*v7 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v5);
      else
        *v7 -= 2;
    }
    v9 = *this;
    v8 = this[1];
    if (*this >= v8)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0x15 || *this == v8)
    {
      WebCore::staticCSSValuePool[v3] += 2;
      v99[0] = &WebCore::staticCSSValuePool[v3];
      LODWORD(v15) = HIDWORD(v93);
      if (HIDWORD(v93) == (_DWORD)v93)
      {
        v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v92, HIDWORD(v93) + 1, (unint64_t)v99);
        v15 = HIDWORD(v93);
        v22 = v92;
        v23 = *v21;
        *v21 = 0;
        *((_QWORD *)v22 + v15) = v23;
      }
      else
      {
        v99[0] = 0;
        *((_QWORD *)v92 + HIDWORD(v93)) = &WebCore::staticCSSValuePool[v3];
      }
      HIDWORD(v93) = v15 + 1;
      v16 = v99[0];
      v99[0] = 0;
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v5);
        else
          *v16 -= 2;
      }
      WebCore::staticCSSValuePool[v4] += 2;
      v99[0] = &WebCore::staticCSSValuePool[v4];
      v17 = HIDWORD(v90);
      if (HIDWORD(v90) != (_DWORD)v90)
      {
        v99[0] = 0;
        *((_QWORD *)v89 + HIDWORD(v90)) = &WebCore::staticCSSValuePool[v4];
        goto LABEL_43;
      }
      goto LABEL_51;
    }
    WebCore::CSSPropertyParsing::consumeAxis((uint64_t)this, &v88);
    v10 = (WebCore::CSSParserTokenRange *)this[2];
    WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset(this, v10, (uint64_t *)v99);
    v11 = v99[0];
    if (v99[0])
    {
      WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset(this, v10, (uint64_t *)&v98);
      v12 = v98;
      if (v98)
      {
        if (v98 == v11)
        {
          if (*v11 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v5);
          else
            *v11 -= 2;
        }
        else
        {
          v13 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v13 = 2;
          v14 = (*(unsigned __int8 *)(v13 + 6) << 16) & 0xFC0000 | 0x10000;
          *(_BYTE *)(v13 + 7) = 0;
          *(_QWORD *)(v13 + 8) = v11;
          *(_QWORD *)(v13 + 16) = v12;
          *(_WORD *)(v13 + 4) = -18432;
          *(_BYTE *)(v13 + 6) = BYTE2(v14);
          v11 = (int *)v13;
        }
      }
    }
    v24 = v88;
    if (v88 || (WebCore::CSSPropertyParsing::consumeAxis((uint64_t)this, v99), (v24 = v99[0]) != 0))
    {
      v99[0] = v24;
      v88 = 0;
    }
    else
    {
      if (!v11)
        goto LABEL_55;
      v24 = &WebCore::staticCSSValuePool[v3];
      WebCore::staticCSSValuePool[v3] += 2;
      v99[0] = &WebCore::staticCSSValuePool[v3];
    }
    LODWORD(v25) = HIDWORD(v93);
    if (HIDWORD(v93) == (_DWORD)v93)
    {
      v31 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v92, HIDWORD(v93) + 1, (unint64_t)v99);
      v25 = HIDWORD(v93);
      v32 = v92;
      v33 = *v31;
      *v31 = 0;
      *((_QWORD *)v32 + v25) = v33;
    }
    else
    {
      v99[0] = 0;
      *((_QWORD *)v92 + HIDWORD(v93)) = v24;
    }
    HIDWORD(v93) = v25 + 1;
    v26 = v99[0];
    v99[0] = 0;
    if (!v26)
      goto LABEL_39;
    if (*v26 != 2)
    {
      *v26 -= 2;
LABEL_39:
      if (v11)
        goto LABEL_41;
LABEL_40:
      v11 = &WebCore::staticCSSValuePool[v4];
      WebCore::staticCSSValuePool[v4] += 2;
      goto LABEL_41;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v5);
    if (!v11)
      goto LABEL_40;
LABEL_41:
    v99[0] = v11;
    v17 = HIDWORD(v90);
    if (HIDWORD(v90) != (_DWORD)v90)
    {
      v99[0] = 0;
      *((_QWORD *)v89 + HIDWORD(v90)) = v11;
      goto LABEL_43;
    }
LABEL_51:
    v28 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, v17 + 1, (unint64_t)v99);
    v17 = HIDWORD(v90);
    v29 = v89;
    v30 = *v28;
    *v28 = 0;
    *((_QWORD *)v29 + v17) = v30;
LABEL_43:
    HIDWORD(v90) = v17 + 1;
    v27 = v99[0];
    v99[0] = 0;
    if (v27)
    {
      if (*v27 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v5);
      else
        *v27 -= 2;
    }
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v5));
  v34 = HIDWORD(v96);
  if (HIDWORD(v96))
  {
    v84 = (WTF *)v87;
    v85 = 4;
    v35 = v95;
    if (v95 == (WTF *)v97)
    {
      memcpy(v87, v97, 8 * HIDWORD(v96));
    }
    else
    {
      v95 = (WTF *)v97;
      v84 = v35;
      v72 = v96;
      LODWORD(v96) = 4;
      v85 = v72;
    }
    HIDWORD(v96) = 0;
    v86 = v34;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v84, (uint64_t *)&v98);
    v36 = v98;
    v98 = 0;
    v99[0] = v36;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 291, 539, v99, a2, 0);
    if (v99[0])
    {
      if (*v99[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99[0], v37);
      else
        *v99[0] -= 2;
    }
    if (v86)
    {
      v38 = v84;
      v39 = 8 * v86;
      do
      {
        v40 = *(_DWORD **)v38;
        *(_QWORD *)v38 = 0;
        if (v40)
        {
          if (*v40 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v37);
          else
            *v40 -= 2;
        }
        v38 = (WTF *)((char *)v38 + 8);
        v39 -= 8;
      }
      while (v39);
    }
    v41 = v84;
    if (v87 != (_BYTE *)v84 && v84 != 0)
    {
      v84 = 0;
      v85 = 0;
      WTF::fastFree(v41, v37);
    }
    v80 = (WTF *)v83;
    v81 = 4;
    v43 = v92;
    if (v92 == (WTF *)v94)
    {
      v44 = HIDWORD(v93);
      memcpy(v83, v94, 8 * HIDWORD(v93));
    }
    else
    {
      v92 = (WTF *)v94;
      v80 = v43;
      v73 = v93;
      v44 = HIDWORD(v93);
      LODWORD(v93) = 4;
      v81 = v73;
    }
    HIDWORD(v93) = 0;
    v82 = v44;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v80, (uint64_t *)&v98);
    v45 = v98;
    v98 = 0;
    v99[0] = v45;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 289, 539, v99, a2, 0);
    if (v99[0])
    {
      if (*v99[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99[0], v46);
      else
        *v99[0] -= 2;
    }
    if (v82)
    {
      v47 = v80;
      v48 = 8 * v82;
      do
      {
        v49 = *(_DWORD **)v47;
        *(_QWORD *)v47 = 0;
        if (v49)
        {
          if (*v49 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v49, v46);
          else
            *v49 -= 2;
        }
        v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
    }
    v50 = v80;
    if (v83 != (_BYTE *)v80 && v80 != 0)
    {
      v80 = 0;
      v81 = 0;
      WTF::fastFree(v50, v46);
    }
    v76 = (WTF *)v79;
    v77 = 4;
    v52 = v89;
    if (v89 == (WTF *)v91)
    {
      v53 = HIDWORD(v90);
      memcpy(v79, v91, 8 * HIDWORD(v90));
    }
    else
    {
      v89 = (WTF *)v91;
      v76 = v52;
      v74 = v90;
      v53 = HIDWORD(v90);
      LODWORD(v90) = 4;
      v77 = v74;
    }
    HIDWORD(v90) = 0;
    v78 = v53;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v76, (uint64_t *)&v98);
    v99[0] = v98;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 290, 539, v99, a2, 0);
    if (v99[0])
    {
      if (*v99[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99[0], v5);
      else
        *v99[0] -= 2;
    }
    if (v78)
    {
      v54 = v76;
      v55 = 8 * v78;
      do
      {
        v56 = *(_DWORD **)v54;
        *(_QWORD *)v54 = 0;
        if (v56)
        {
          if (*v56 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v5);
          else
            *v56 -= 2;
        }
        v54 = (WTF *)((char *)v54 + 8);
        v55 -= 8;
      }
      while (v55);
    }
    v57 = v76;
    if (v79 != (_BYTE *)v76 && v76 != 0)
    {
      v76 = 0;
      v77 = 0;
      WTF::fastFree(v57, v5);
    }
    v34 = 1;
  }
LABEL_112:
  v59 = v89;
  if (HIDWORD(v90))
  {
    v60 = 8 * HIDWORD(v90);
    do
    {
      v61 = *(_DWORD **)v59;
      *(_QWORD *)v59 = 0;
      if (v61)
      {
        if (*v61 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v5);
        else
          *v61 -= 2;
      }
      v59 = (WTF *)((char *)v59 + 8);
      v60 -= 8;
    }
    while (v60);
    v59 = v89;
  }
  if (v91 != (_BYTE *)v59 && v59 != 0)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree(v59, v5);
  }
  v63 = v92;
  if (HIDWORD(v93))
  {
    v64 = 8 * HIDWORD(v93);
    do
    {
      v65 = *(_DWORD **)v63;
      *(_QWORD *)v63 = 0;
      if (v65)
      {
        if (*v65 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v5);
        else
          *v65 -= 2;
      }
      v63 = (WTF *)((char *)v63 + 8);
      v64 -= 8;
    }
    while (v64);
    v63 = v92;
  }
  if (v94 != (_BYTE *)v63 && v63 != 0)
  {
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree(v63, v5);
  }
  v67 = v95;
  if (HIDWORD(v96))
  {
    v68 = 8 * HIDWORD(v96);
    do
    {
      v69 = *(_DWORD **)v67;
      *(_QWORD *)v67 = 0;
      if (v69)
      {
        if (*v69 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, v5);
        else
          *v69 -= 2;
      }
      v67 = (WTF *)((char *)v67 + 8);
      v68 -= 8;
    }
    while (v68);
    v67 = v95;
  }
  if (v97 != (_BYTE *)v67 && v67 != 0)
  {
    v95 = 0;
    LODWORD(v96) = 0;
    WTF::fastFree(v67, v5);
  }
  return v34;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithSingleValueOptimization<WebCore::CSSPropertyParser::parseShorthand(WebCore::CSSPropertyID,BOOL)::$_0,WebCore::CSSParserContext const&>(_QWORD *a1, __int128 **a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *result;
  int v27;
  WTF *v28;
  int v29;
  unsigned int v30;
  _BYTE v31[32];
  uint64_t v32;
  _DWORD *v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[32];

  v34 = (WTF *)v36;
  v35 = 4;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)541>(a2, (WebCore::CSSParserTokenRange *)*(unsigned __int8 *)(a3 + 48), &v33);
    v7 = (uint64_t)v33;
    if (!v33)
    {
      *a1 = 0;
      goto LABEL_33;
    }
    v32 = (uint64_t)v33;
    v33 = 0;
    LODWORD(v8) = HIDWORD(v35);
    if (HIDWORD(v35) == (_DWORD)v35)
    {
      v11 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v32);
      v8 = HIDWORD(v35);
      v12 = v34;
      v13 = *v11;
      *v11 = 0;
      *((_QWORD *)v12 + v8) = v13;
    }
    else
    {
      v32 = 0;
      *((_QWORD *)v34 + HIDWORD(v35)) = v7;
    }
    HIDWORD(v35) = v8 + 1;
    v9 = (_DWORD *)v32;
    v32 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
      else
        *v9 -= 2;
    }
    v10 = v33;
    v33 = 0;
    if (v10)
    {
      if (*v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
      else
        *v10 -= 2;
    }
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(a2, v6));
  v14 = HIDWORD(v35);
  if (HIDWORD(v35) == 1)
  {
    v15 = *(_QWORD *)v34;
    *(_QWORD *)v34 = 0;
    *a1 = v15;
  }
  else
  {
    v28 = (WTF *)v31;
    v29 = 4;
    v16 = v34;
    if (v34 == (WTF *)v36)
    {
      memcpy(v31, v36, 8 * HIDWORD(v35));
    }
    else
    {
      v34 = (WTF *)v36;
      v28 = v16;
      v27 = v35;
      LODWORD(v35) = 4;
      v29 = v27;
    }
    HIDWORD(v35) = 0;
    v30 = v14;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v28, (uint64_t *)&v33);
    *a1 = v33;
    if (v30)
    {
      v17 = v28;
      v18 = 8 * v30;
      do
      {
        v19 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v6);
          else
            *v19 -= 2;
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
    v20 = v28;
    if (v31 != (_BYTE *)v28 && v28 != 0)
    {
      v28 = 0;
      v29 = 0;
      WTF::fastFree(v20, v6);
    }
  }
LABEL_33:
  if (HIDWORD(v35))
  {
    v22 = v34;
    v23 = 8 * HIDWORD(v35);
    do
    {
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v6);
        else
          *v24 -= 2;
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  result = v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::AngleKnownTokenTypeDimensionConsumer::consume(uint64_t result, __int128 **a2, __int16 a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  double v6;
  __int128 *v7;
  __int128 *v8;
  char v9;
  unsigned int v10;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 >= v3)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v5 = (*(_DWORD *)v4 >> 11) & 0x7F;
  if (((v5 - 12) < 3 || (_DWORD)v5 == 64)
    && ((v6 = *((double *)v4 + 2), (a3 & 0xFF00) != 0x100) || v6 >= 0.0))
  {
    *(_QWORD *)result = v5;
    *(double *)(result + 8) = v6;
    *(_BYTE *)(result + 16) = 1;
    v7 = *a2;
    if (*a2 == v3)
    {
      v9 = 1;
      {
        v8 = v3;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v8 = *a2;
      }
    }
    else
    {
      v8 = (__int128 *)((char *)v7 + 24);
      *a2 = (__int128 *)((char *)v7 + 24);
    }
    while (1)
    {
      if (v8 < v3 || (v9 & 1) != 0)
      {
        if (v8 >= v3)
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v10 = *(_DWORD *)v8;
      }
      else
      {
        v10 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
        v9 = 1;
      }
      if ((v10 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)((char *)*a2 + 24);
      *a2 = v8;
    }
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeAngleRaw@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  _BYTE v14[16];
  int v15;
  char v16;
  int v17;
  __int16 v18;
  _QWORD v19[2];
  _QWORD *v20;

  v12 = 0;
  v13 = 0;
  v6 = 0x10000000000;
  if (!a4)
    v6 = 0;
  v7 = 0x100000000;
  if (!a3)
    v7 = 0;
  v8 = v7 | a2 | v6;
  result = WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>(a1, &v13, v8, (uint64_t)v14);
  if (v13)
    result = WTF::fastFree((WTF *)(v13 - 8), v10);
  if (v16)
  {
    v17 = v8;
    v18 = WORD2(v8);
    v19[0] = &v12;
    v19[1] = &v17;
    if (v15 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(v11 - 16), v10);
    }
    v20 = v19;
    result = ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339D778[v15])(&v20, v14);
    if (v16)
    {
      if (v15 != -1)
        result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(v19, v14);
    }
  }
  else
  {
    *a5 = 0;
    a5[16] = 0;
  }
  v11 = v12;
  if (v12)
    return WTF::fastFree((WTF *)(v11 - 16), v10);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeAngle@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  unsigned __int16 *v10;

  v9 = 0;
  v10 = 0;
  v5 = 0x10000000000;
  if (!a4)
    v5 = 0;
  v6 = 0x100000000;
  if (!a3)
    v6 = 0;
  result = WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve(a1, &v10, (uint64_t)&v9, v6 | a2 | v5, a5);
  if (v9)
    result = WTF::fastFree((WTF *)(v9 - 16), v8);
  if (v10)
    return WTF::fastFree((WTF *)(v10 - 8), v8);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  _BYTE v13[16];
  int v14;
  char v15;
  int v16;
  __int16 v17;
  _QWORD v18[2];
  _QWORD *v19;

  v8 = *a2;
  *a2 = 0;
  v12 = v8;
  result = WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>(a1, &v12, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v13);
  v11 = v12;
  if (v12)
    goto LABEL_10;
  while (1)
  {
    if (!v15)
    {
      *a5 = 0;
      return result;
    }
    v16 = a4;
    v17 = WORD2(a4);
    v18[0] = a3;
    v18[1] = &v16;
    if (v14 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    result = WTF::fastFree((WTF *)(v11 - 8), v10);
  }
  v19 = v18;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_8AngleRawEEE7resolveERKNS_7variantIJSJ_NS8_15UnevaluatedCalcISJ_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSJ_SN_EEEEEEDcOSV_DpOT0____fmatrix[v14])(&v19, v13);
  if (v15)
  {
    if (v14 != -1)
      return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(v18, v13);
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw,WebCore::PercentRaw>::consumeAndResolve(_QWORD *a1, __int128 **a2, unsigned __int16 **a3, uint64_t a4, unint64_t a5)
{
  int v5;
  unsigned __int16 *v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  unsigned __int16 *v21;
  __int128 v22;
  int v23;
  char v24;
  unsigned int v25;
  __int16 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  __int128 *v30;

  v5 = a5;
  v9 = *a3;
  *a3 = 0;
  v21 = v9;
  v10 = HIDWORD(a5);
  v26 = WORD2(a5);
  v25 = a5;
  v11 = *a2;
  if (*a2 >= a2[1])
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v11 & 0x3F)
  {
    case 1:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v29, &v21);
      v22 = *(_OWORD *)a2;
      v14 = v29;
      v29 = 0;
      v30 = (__int128 *)v14;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v22, 5, (uint64_t *)&v30, v5, (WebCore::CSSCalcValue **)&v27);
      if (v30)
        WTF::fastFree((WTF *)(v30 - 1), a2);
      v15 = (_DWORD *)v27;
      if ((_QWORD)v27)
        *(_OWORD *)a2 = v22;
      if (v29)
      {
        v20 = v15;
        WTF::fastFree((WTF *)(v29 - 16), a2);
        v15 = v20;
        if (v20)
          goto LABEL_11;
      }
      else if (v15)
      {
LABEL_11:
        v16 = *v15;
        *v15 += 2;
        *(_QWORD *)&v22 = v15;
        v23 = 1;
        v24 = 1;
        if (v16)
          *v15 = v16;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, (WTF::StringImpl *)a2);
        v12 = 1;
        v13 = 1;
        goto LABEL_38;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v29, &v21);
      v22 = *(_OWORD *)a2;
      v18 = v29;
      v29 = 0;
      v30 = (__int128 *)v18;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v22, 2, (uint64_t *)&v30, v5, (WebCore::CSSCalcValue **)&v27);
      if (v30)
        WTF::fastFree((WTF *)(v30 - 1), a2);
      v12 = v27;
      if ((_QWORD)v27)
        *(_OWORD *)a2 = v22;
      if (v29)
      {
        WTF::fastFree((WTF *)(v29 - 16), a2);
        if (!v12)
          goto LABEL_4;
      }
      else if (!v12)
      {
        goto LABEL_4;
      }
      v19 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *(_QWORD *)&v22 = v12;
      v23 = 3;
      v24 = 1;
      if (v19)
        *(_DWORD *)v12 = v19;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v12, (WTF::StringImpl *)a2);
      v13 = 1;
      v12 = 3;
LABEL_38:
      if (!v21)
      {
        if (v13)
          goto LABEL_40;
LABEL_44:
        *a1 = 0;
        return;
      }
      WTF::fastFree((WTF *)(v21 - 8), a2);
      if (!v13)
        goto LABEL_44;
LABEL_40:
      LODWORD(v29) = v5;
      WORD2(v29) = v10;
      *(_QWORD *)&v27 = a4;
      *((_QWORD *)&v27 + 1) = &v29;
      v30 = &v27;
      ((void (*)(__int128 **, __int128 *))off_1E339D7B8[v12])(&v30, &v22);
      if (v24)
      {
        if (v23 != -1)
          ((void (*)(__int128 *, __int128 *))off_1E339D798[v23])(&v27, &v22);
      }
      return;
    case 7:
      WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v27, a2, &v21, &v25);
      goto LABEL_17;
    case 8:
      v17 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a2, &v21, &v25);
      if ((_BYTE)a2)
      {
        *(_QWORD *)&v22 = v17;
        v23 = 2;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        LOBYTE(v22) = 0;
      }
      v24 = v13;
      v12 = 2;
      goto LABEL_38;
    case 9:
      WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)9,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v27, a2, &v21, &v25);
LABEL_17:
      if (v28)
      {
        v22 = v27;
        v23 = 0;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        LOBYTE(v22) = 0;
      }
      v12 = 0;
      v24 = v13;
      goto LABEL_38;
    default:
      v12 = 0;
LABEL_4:
      v13 = 0;
      LOBYTE(v22) = 0;
      v24 = 0;
      goto LABEL_38;
  }
}

int *WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase::resolve@<X0>(int **a1@<X8>, double a2@<D0>)
{
  unsigned int v4;
  int *result;
  char v7;

  v4 = (int)a2;
  if ((int)a2 <= 0xFF && *(_QWORD *)&a2 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 1040];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 3;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = a2;
  }
  *a1 = result;
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeColor(uint64_t a1, WebCore::CSSPropertyParserHelpers *this, uint64_t a3)
{
  uint64_t v3;
  WebCore::CSSPropertyParserHelpers *v4;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  __int128 *v9;
  unsigned int v10;
  int v11;
  int CSSValueKeyword;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  char *v39;
  __int128 *v40;
  __int128 *v41;
  char v42;
  unsigned int v43;
  char v44;
  __int128 *v45;
  int v46;
  __int128 *v47;
  __int128 *v48;
  char v49;
  __int128 *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  __int128 *v55;
  int v56;
  char *v57;
  __int128 *v58;
  unsigned int v59;
  int v60;
  char v61;
  __int128 *v62;
  unsigned int v63;
  int v64;
  __int128 *v65;
  int v66;
  __int128 *v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  __int128 *v71;
  int v72;
  __int128 *v73;
  __int128 *v74;
  char v75;
  unsigned int v76;
  __int128 *v77;
  int v78;
  uint64_t v79;
  uint64_t (**v80)();
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t *v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  __int128 *v90;
  unsigned int v91;
  uint64_t v92;
  void *v93;
  unsigned __int8 **v94;
  unsigned __int8 **v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  __int128 *v101;
  char v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  void *v106;
  __int128 *v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  __int128 *v111;
  __int128 *v112;
  char v113;
  unsigned int v114;
  __int128 *v115;
  int v116;
  __int128 *v117;
  __int128 *v118;
  __int128 *v119;
  int v120;
  uint64_t v121;
  int v122;
  char v123;
  int v124;
  unsigned int v125;
  WebCore::CSSPropertyParserHelpers *v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  WebCore::CSSPropertyParserHelpers *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  double v137;
  float v138;
  int v139;
  float v140;
  float v141;
  float v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  void *v150;
  char v151;
  unsigned int v152;
  __int128 *v153;
  int v154;
  uint64_t v155;
  void *v156;
  unsigned int v157;
  void *v158;
  char v159;
  uint64_t v160;
  BOOL v161;
  unint64_t v162;
  BOOL v164;
  double v166;
  unsigned int v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v180;
  BOOL v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  size_t __n;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WebCore::CSSPropertyParserHelpers *v204;
  WebCore::CSSPropertyParserHelpers *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char v209[8];
  unsigned int v210;
  char v211[8];
  unsigned int v212;
  char v213[8];
  unsigned int v214;
  char v215;
  unsigned int v216;
  unsigned int v217;
  unsigned __int8 v218;
  __int128 v219;
  _BYTE v220[16];
  int v221;
  unsigned __int16 **v222;
  unsigned int v223;
  unsigned int v224;
  char v225;
  __int128 v226;
  __int128 *v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  WebCore::CSSPropertyParserHelpers *v231;
  unint64_t v232;
  WebCore::CSSPropertyParserHelpers *v233;
  char v234;
  _BYTE v235[7];
  __int128 v236;
  unsigned __int16 *v237;
  int v238;
  unsigned __int8 v239;
  unsigned __int16 *v240;
  int v241;
  char v242;
  unsigned __int16 *v243;
  int v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  __int128 *v251;
  unsigned __int16 *v252;
  float v253;
  int v254;
  _BYTE v255[15];
  unsigned __int8 v256;
  unsigned __int8 v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  unsigned __int8 v262;
  unsigned __int8 v263;
  unsigned __int8 v264;
  unsigned __int8 v265;
  unsigned __int8 v266;
  unsigned __int8 v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  unsigned __int8 v275;
  unsigned __int8 v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  unsigned __int8 v284;
  unsigned __int8 v285;
  unsigned __int8 v286;
  unsigned __int8 v287;
  unsigned __int8 v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  unsigned __int8 v291;
  unsigned __int8 v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  int v295;
  unsigned __int8 v296;
  uint64_t v297;

  v3 = a3;
  v4 = this;
  v297 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a3 + 8);
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    v6 = (unint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
  {
    v7 = 0;
  }
  else
  {
    v84 = *(_DWORD *)(v6 + 16);
    if (v84 < 0)
    {
      v84 = WebCore::cssValueKeywordID(*(_QWORD *)(v6 + 8), *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *(_DWORD *)(v6 + 16) = v84;
    }
    v7 = (unsigned __int16)v84;
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    if (v7 - 127 < 0x12)
      goto LABEL_411;
    v8 = v7 < 0x47C;
    if (v7 < 0x3FA)
      v8 = 0;
    if (v7 - 125 < 2 || v8)
      goto LABEL_411;
  }
  if (v7 == 124 && (*(_BYTE *)v3 & 2) != 0)
    goto LABEL_420;
  if ((*(_BYTE *)v3 & 4) != 0)
  {
    if (v7 < 0xA7)
    {
      if (v7 <= 0x90)
      {
        if (v7 != 18)
          goto LABEL_16;
        goto LABEL_420;
      }
LABEL_411:
      v148 = *(unsigned __int8 *)(v3 + 4);
      if ((int)v7 > 228)
      {
        if (v7 == 229)
        {
          if (v148 == 1)
            goto LABEL_420;
        }
        else if (v7 != 230)
        {
          goto LABEL_420;
        }
      }
      else if (v7 != 193 && v7 != 223)
      {
        goto LABEL_420;
      }
      if (v148 != 4)
        goto LABEL_558;
LABEL_420:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v4, this);
      *(_WORD *)a1 = v7;
      *(_DWORD *)(a1 + 88) = 1;
      goto LABEL_231;
    }
    if (v7 < 0xE7 || v7 == 403)
      goto LABEL_411;
  }
LABEL_16:
  v9 = *(__int128 **)v4;
  if (*(_QWORD *)v4 >= *((_QWORD *)v4 + 1))
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v10 = *(_DWORD *)v9;
  v11 = *(_DWORD *)v9 & 0x3F;
  if (v11 == 3)
  {
    v94 = 0;
    v95 = (unsigned __int8 **)v9 + 1;
    v96 = *((unsigned int *)v9 + 1) | ((unint64_t)((v10 >> 22) & 1) << 32);
    goto LABEL_214;
  }
  if (*(_BYTE *)(v3 + 1))
    goto LABEL_517;
  while (1)
  {
    v219 = *(_OWORD *)v4;
    v9 = *(__int128 **)v4;
    if (*(_QWORD *)v4 >= *((_QWORD *)v4 + 1))
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 1)
      goto LABEL_558;
    CSSValueKeyword = *((_DWORD *)v9 + 4);
    if (CSSValueKeyword < 0)
    {
      v13 = *((unsigned int *)v9 + 1);
      if ((v13 - 55) < 0xFFFFFFCA)
      {
LABEL_390:
        CSSValueKeyword = 0;
        goto LABEL_43;
      }
      v14 = *((_QWORD *)v9 + 1);
      if ((*(_DWORD *)v9 & 0x400000) != 0)
      {
        v15 = 0;
        v16 = MEMORY[0x1E0CBF868];
        do
        {
          if (v13 == v15)
            goto LABEL_391;
          if (*(char *)(v14 + v15) < 1)
            goto LABEL_390;
          v255[v15] = *(_BYTE *)(v16 + *(unsigned __int8 *)(v14 + v15));
          ++v15;
        }
        while (v13 != v15);
        v17 = v255[0];
        if (v255[0] != 45)
        {
LABEL_29:
          if (v13 >= 0x38)
            goto LABEL_391;
LABEL_30:
          if ((v13 - 1) <= 0x35)
          {
            v203 = a1;
            v204 = v4;
            v201 = v3;
            v183 = 0;
            v184 = 0;
            v185 = 0;
            v186 = 0;
            v187 = 0;
            v188 = 0;
            v189 = 0;
            v190 = 0;
            v191 = 0;
            v192 = 0;
            v193 = 0;
            v194 = 0;
            v195 = 0;
            v196 = 0;
            v197 = 0;
            v198 = 0;
            v199 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = 0;
            this = 0;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            LODWORD(v6) = 0;
            v35 = 0;
            v36 = 0;
            switch((int)v13)
            {
              case 1:
                goto LABEL_36;
              case 2:
                goto LABEL_35;
              case 3:
                goto LABEL_34;
              case 4:
                goto LABEL_33;
              case 5:
                goto LABEL_32;
              case 6:
                goto LABEL_282;
              case 7:
                goto LABEL_281;
              case 8:
                goto LABEL_280;
              case 9:
                goto LABEL_279;
              case 10:
                goto LABEL_278;
              case 11:
                goto LABEL_277;
              case 12:
                goto LABEL_276;
              case 13:
                goto LABEL_275;
              case 14:
                goto LABEL_274;
              case 15:
                goto LABEL_273;
              case 16:
                goto LABEL_272;
              case 17:
                goto LABEL_271;
              case 18:
                goto LABEL_270;
              case 19:
                goto LABEL_269;
              case 20:
                goto LABEL_268;
              case 21:
                goto LABEL_267;
              case 22:
                goto LABEL_266;
              case 23:
                goto LABEL_265;
              case 24:
                goto LABEL_264;
              case 25:
                goto LABEL_263;
              case 26:
                goto LABEL_262;
              case 27:
                goto LABEL_261;
              case 28:
                goto LABEL_260;
              case 29:
                goto LABEL_259;
              case 30:
                goto LABEL_258;
              case 31:
                goto LABEL_257;
              case 32:
                goto LABEL_256;
              case 33:
                goto LABEL_255;
              case 34:
                goto LABEL_254;
              case 35:
                goto LABEL_253;
              case 36:
                goto LABEL_252;
              case 37:
                goto LABEL_251;
              case 38:
                goto LABEL_250;
              case 39:
                goto LABEL_249;
              case 40:
                goto LABEL_248;
              case 41:
                goto LABEL_247;
              case 42:
                goto LABEL_246;
              case 43:
                goto LABEL_245;
              case 44:
                goto LABEL_244;
              case 45:
                goto LABEL_243;
              case 46:
                goto LABEL_242;
              case 47:
                goto LABEL_241;
              case 48:
                goto LABEL_240;
              case 49:
                goto LABEL_239;
              case 50:
                goto LABEL_238;
              case 51:
                goto LABEL_237;
              case 52:
                goto LABEL_236;
              case 53:
                goto LABEL_235;
              default:
                v183 = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v294];
LABEL_235:
                LODWORD(v184) = v183 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v293];
LABEL_236:
                HIDWORD(v184) = v184 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v292];
LABEL_237:
                LODWORD(v185) = HIDWORD(v184)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v291];
LABEL_238:
                HIDWORD(v185) = v185 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v290];
LABEL_239:
                LODWORD(v186) = HIDWORD(v185)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v289];
LABEL_240:
                HIDWORD(v186) = v186 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v288];
LABEL_241:
                LODWORD(v187) = HIDWORD(v186)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v287];
LABEL_242:
                HIDWORD(v187) = v187 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v286];
LABEL_243:
                LODWORD(v188) = HIDWORD(v187)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v285];
LABEL_244:
                HIDWORD(v188) = v188 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v284];
LABEL_245:
                LODWORD(v189) = HIDWORD(v188)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v283];
LABEL_246:
                HIDWORD(v189) = v189 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v282];
LABEL_247:
                LODWORD(v190) = HIDWORD(v189)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v281];
LABEL_248:
                HIDWORD(v190) = v190 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v280];
LABEL_249:
                LODWORD(v191) = HIDWORD(v190)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v279];
LABEL_250:
                HIDWORD(v191) = v191 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v278];
LABEL_251:
                LODWORD(v192) = HIDWORD(v191)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v277];
LABEL_252:
                HIDWORD(v192) = v192 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v276];
LABEL_253:
                LODWORD(v193) = HIDWORD(v192)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v275];
LABEL_254:
                HIDWORD(v193) = v193 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v274];
LABEL_255:
                LODWORD(v194) = HIDWORD(v193)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v273];
LABEL_256:
                HIDWORD(v194) = v194 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v272];
LABEL_257:
                LODWORD(v195) = HIDWORD(v194)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v271];
LABEL_258:
                HIDWORD(v195) = v195 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v270];
LABEL_259:
                LODWORD(v196) = HIDWORD(v195)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v269];
LABEL_260:
                HIDWORD(v196) = v196 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v268];
LABEL_261:
                LODWORD(v197) = HIDWORD(v196)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v267];
LABEL_262:
                HIDWORD(v197) = v197 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v266];
LABEL_263:
                LODWORD(v198) = HIDWORD(v197)
                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v265];
LABEL_264:
                HIDWORD(v198) = v198 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v264];
LABEL_265:
                v199 = HIDWORD(v198) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v263];
LABEL_266:
                v18 = v199 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v262];
LABEL_267:
                v19 = v18 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v261];
LABEL_268:
                v20 = v19 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v260];
LABEL_269:
                v21 = v20 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v259];
LABEL_270:
                v22 = v21 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v258];
LABEL_271:
                this = (WebCore::CSSPropertyParserHelpers *)(v22
                                                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v257]);
LABEL_272:
                v23 = (_DWORD)this + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v256];
LABEL_273:
                v24 = v23 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[14]];
LABEL_274:
                v25 = v24 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[13]];
LABEL_275:
                v26 = v25 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[12] + 1];
LABEL_276:
                v27 = v26 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[11]];
LABEL_277:
                v28 = v27 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[10] + 1];
LABEL_278:
                v29 = v28 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[9]];
LABEL_279:
                v30 = v29 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[8]];
LABEL_280:
                v31 = v30 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[7]];
LABEL_281:
                v32 = v31 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[6]];
LABEL_282:
                v33 = v32 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[5]];
LABEL_32:
                v34 = v33 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[4]];
LABEL_33:
                LODWORD(v6) = v34
                            + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[3] + 5];
LABEL_34:
                v35 = v6 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[2]];
LABEL_35:
                v36 = v35 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v255[1]];
LABEL_36:
                v37 = v36 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v17 + 1];
                if (v37 > 0x66C4)
                {
                  CSSValueKeyword = 0;
                  v3 = v201;
                  a1 = v203;
                  v4 = v204;
                }
                else
                {
                  v38 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v37];
                  a1 = v203;
                  v4 = v204;
                  if (v38 < 0
                    || (v6 = (unsigned __int16)v38,
                        v39 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v38],
                        (_DWORD)v17 != *v39)
                    || strncmp(&v255[1], v39 + 1, (v13 - 1))
                    || v39[v13])
                  {
                    CSSValueKeyword = 0;
                  }
                  else
                  {
                    CSSValueKeyword = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v6 + 1]);
                  }
                  v3 = v201;
                }
                break;
            }
            goto LABEL_43;
          }
          goto LABEL_390;
        }
        v178 = v255[0];
        if (v13 < 7)
          goto LABEL_30;
        if (*(_DWORD *)&v255[1] != 1819308129 || *(unsigned __int16 *)&v255[5] != 11621)
          goto LABEL_30;
        v180 = v13 - 7;
        if (v13 - 7 < 6)
        {
          if (v180 < 3)
          {
LABEL_615:
            v6 = (unint64_t)&v255[1];
            memmove(&v255[7], &v255[6], v13 - 6);
            qmemcpy(&v255[1], "webkit", 6);
            ++v13;
            v17 = v178;
            goto LABEL_29;
          }
        }
        else if (*(_DWORD *)&v255[7] == 1953724787 && *(unsigned __int16 *)&v255[11] == 28005)
        {
          goto LABEL_30;
        }
        v182 = *(unsigned __int16 *)&v255[7] == 24944 && v255[9] == 121;
        if (v182 || v180 >= 8 && *(_QWORD *)&v255[7] == 0x7373656C65726977)
          goto LABEL_30;
        goto LABEL_615;
      }
      v146 = 0;
      do
      {
        if (v13 == v146)
          goto LABEL_391;
        v147 = *(unsigned __int16 *)(v14 + 2 * v146);
        if ((v147 - 1) > 0x7E)
          goto LABEL_390;
        v255[v146++] = v147 | (32 * ((v147 - 65) < 0x1A));
      }
      while (v13 != v146);
      if (v255[0] != 45)
        goto LABEL_388;
      if (v13 < 7
        || (*(_DWORD *)&v255[1] == 1819308129 ? (v161 = *(unsigned __int16 *)&v255[5] == 11621) : (v161 = 0), !v161))
      {
LABEL_389:
        CSSValueKeyword = WebCore::findCSSValueKeyword(v255, v13);
LABEL_43:
        *((_DWORD *)v9 + 4) = CSSValueKeyword;
        goto LABEL_44;
      }
      v162 = v13 - 7;
      if (v13 - 7 < 6)
      {
        if (v162 < 3)
          goto LABEL_480;
      }
      else if (*(_DWORD *)&v255[7] == 1953724787 && *(unsigned __int16 *)&v255[11] == 28005)
      {
        goto LABEL_389;
      }
      v164 = *(unsigned __int16 *)&v255[7] == 24944 && v255[9] == 121;
      if (v164 || v162 >= 8 && *(_QWORD *)&v255[7] == 0x7373656C65726977)
        goto LABEL_389;
LABEL_480:
      v6 = (unint64_t)&v255[1];
      memmove(&v255[7], &v255[6], v13 - 6);
      qmemcpy(&v255[1], "webkit", 6);
      ++v13;
LABEL_388:
      if (v13 >= 0x38)
        goto LABEL_391;
      goto LABEL_389;
    }
LABEL_44:
    v255[0] = 0;
    v296 = 0;
    if ((unsigned __int16)CSSValueKeyword - 824 >= 2)
      break;
    v40 = (__int128 *)*((_QWORD *)&v219 + 1);
    v41 = (__int128 *)v219;
    v9 = (__int128 *)&dword_1ECE90000;
    v43 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((unint64_t)v219 >= *((_QWORD *)&v219 + 1))
      v44 = 1;
    else
    if ((unint64_t)v219 >= *((_QWORD *)&v219 + 1))
      v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v45 = (__int128 *)v219;
    if ((unint64_t)v219 >= *((_QWORD *)&v219 + 1)
    {
      v43 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
      v42 = 1;
      v44 = 1;
      v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v46 = 0;
    v47 = (__int128 *)((char *)v45 + 24);
    v48 = (__int128 *)v219;
    v49 = v44;
    while (1)
    {
      if (v48 == *((__int128 **)&v219 + 1))
      {
        v48 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v49 & 1) != 0)
        {
          v50 = (__int128 *)*((_QWORD *)&v219 + 1);
        }
        else
        {
          v43 = v43 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
          v42 = 1;
          v44 = 1;
          v50 = v41;
        }
        v49 = 1;
      }
      else
      {
        v41 = (__int128 *)((char *)v48 + 24);
        *(_QWORD *)&v219 = (char *)v48 + 24;
        v50 = (__int128 *)((char *)v48 + 24);
      }
      v51 = *(_DWORD *)v48 >> 6;
      v52 = v51 == 2 ? -1 : 0;
      v53 = v51 == 1 ? 1 : v52;
      v46 += v53;
      if (!v46)
        break;
      v48 = v50;
      if ((unint64_t)v50 >= *((_QWORD *)&v219 + 1))
      {
        if ((v44 & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v42 = 1;
        }
        if (v47 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
          v47 = (__int128 *)*((_QWORD *)&v219 + 1);
        goto LABEL_73;
      }
    }
    v50 = (__int128 *)((char *)v50 - 24);
    if ((v44 & 1) == 0)
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v42 = 1;
    }
    if (v47 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v47 = (__int128 *)*((_QWORD *)&v219 + 1);
LABEL_73:
    v54 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if ((unint64_t)v41 < *((_QWORD *)&v219 + 1) || (v42 & 1) != 0)
      {
        v55 = (unint64_t)v41 >= *((_QWORD *)&v219 + 1)
            ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
            : v41;
        v56 = *(_DWORD *)v55;
      }
      else
      {
        v54 = v54 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v54;
        v42 = 1;
        LOBYTE(v56) = v54;
      }
      if ((v56 & 0x3F) != 0x10)
        break;
      v41 = (__int128 *)((char *)v41 + 24);
      *(_QWORD *)&v219 = v41;
    }
    if (v50 != &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v40 = v50;
    v57 = (char *)v47 - 24;
    do
    {
      v58 = v47;
      if (v47 < v40 || (v42 & 1) != 0)
      {
        if (v47 >= v40)
          v47 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v59 = *(_DWORD *)v47;
      }
      else
      {
        v59 = v54 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v59;
        v42 = 1;
        v54 = v59;
      }
      v60 = v59 & 0x3F;
      v47 = (__int128 *)((char *)v58 + 24);
      v57 += 24;
    }
    while (v60 == 16);
    *(_QWORD *)&v236 = v57;
    *((_QWORD *)&v236 + 1) = v40;
    v61 = (v58 < v40) | v42;
    v62 = v58;
    if ((v61 & 1) != 0)
    {
      if (v58 >= v40)
        v6 = (unint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v6 = (unint64_t)v58;
      v63 = *(_DWORD *)v6;
    }
    else
    {
      v63 = v54 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v63;
      v6 = (unint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    if ((v63 & 0x3F) == 0)
    {
      v85 = *(_DWORD *)(v6 + 16);
      if (v85 < 0)
      {
        v85 = WebCore::cssValueKeywordID(*(_QWORD *)(v6 + 8), *(unsigned int *)(v6 + 4) | ((unint64_t)((v63 >> 22) & 1) << 32));
        *(_DWORD *)(v6 + 16) = v85;
      }
      if ((unsigned __int16)v85 == 779)
      {
        WebCore::CSSPropertyParserHelpers::consumeRelativeFunctionParameters<WebCore::HSLFunctionModern>((uint64_t)&v226, (__int128 **)&v236, v3);
        WebCore::CSSPropertyParserHelpers::makeCSSUnresolvedColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(&v206, (uint64_t)&v226);
        std::__optional_destruct_base<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v226, v168);
        goto LABEL_140;
      }
      v40 = (__int128 *)*((_QWORD *)&v236 + 1);
      v62 = (__int128 *)v236;
    }
    v64 = *(unsigned __int8 *)(v3 + 4);
    *(_QWORD *)&v250 = 0;
    WORD2(v226) = 257;
    LODWORD(v226) = v64;
    v65 = v62;
    if (v62 >= v40)
    {
      v65 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v66 = *(_DWORD *)v65 & 0x3F;
    if (v66 == 7)
    {
      if (v62 >= v40)
      {
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        if (v64 == 2)
        {
          v86 = &qword_1ECE904D8;
          goto LABEL_187;
        }
        v67 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_100:
        if (v62 == v40)
        {
          v69 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v68 = 1;
          {
            v69 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v69;
          }
        }
        else
        {
          v62 = (__int128 *)((char *)v62 + 24);
          *(_QWORD *)&v236 = v62;
          v69 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v70 = *((_QWORD *)v67 + 2);
        while (1)
        {
          if (v62 < v40 || (v68 & 1) != 0)
          {
            v71 = v62 >= v40 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v62;
            v72 = *(_DWORD *)v71;
          }
          else
          {
            v69 = v69 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v69;
            v68 = 1;
            LOBYTE(v72) = v69;
          }
          if ((v72 & 0x3F) != 0x10)
            break;
          v62 = (__int128 *)((char *)v62 + 24);
          *(_QWORD *)&v236 = v62;
        }
        v206 = v70;
        v208 = 2;
      }
      else
      {
        v67 = v62;
        if (v64 != 2)
          goto LABEL_100;
        v86 = (uint64_t *)(v62 + 1);
LABEL_187:
        if (v62 == v40)
        {
          v88 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v87 = 1;
          {
            v88 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v88;
          }
        }
        else
        {
          v62 = (__int128 *)((char *)v62 + 24);
          *(_QWORD *)&v236 = v62;
          v88 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v89 = *v86;
        while (1)
        {
          if (v62 < v40 || (v87 & 1) != 0)
          {
            v90 = v62 >= v40 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v62;
            v91 = *(_DWORD *)v90;
          }
          else
          {
            v91 = v88 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v91;
            v87 = 1;
            v88 = v91;
          }
          if ((v91 & 0x3F) != 0x10)
            break;
          v62 = (__int128 *)((char *)v62 + 24);
          *(_QWORD *)&v236 = v62;
        }
        v206 = 12;
        v207 = v89;
        v208 = 0;
      }
      v209[0] = 1;
      goto LABEL_112;
    }
    switch(v66)
    {
      case 0:
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)0,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v206, (uint64_t)&v236, (unsigned __int16 **)&v250);
        break;
      case 1:
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v206, &v236, (unsigned __int16 **)&v250, (int *)&v226);
        break;
      case 9:
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)9,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v206, (__int128 **)&v236, (unsigned __int16 **)&v250, (int *)&v226);
        break;
      default:
        LOBYTE(v206) = 0;
        v209[0] = 0;
        break;
    }
LABEL_112:
    if ((_QWORD)v250)
      WTF::fastFree((WTF *)(v250 - 16), this);
    if (v209[0])
    {
      if (v208 == -1)
        goto LABEL_516;
      v222 = &v243;
      ((void (*)(__int128 *__return_ptr, unsigned __int16 ***, uint64_t *))off_1E339C298[v208])(&v226, &v222, &v206);
      LOBYTE(v222) = 0;
      v224 = -1;
      LODWORD(v6) = (_DWORD)v227;
      if ((_DWORD)v227 == -1)
      {
        v225 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, __int128 *))off_1E339C470[v227])(&v243, &v222, &v226);
        v224 = v6;
        v225 = 1;
        if ((_DWORD)v227 != -1)
          ((void (*)(unsigned __int16 **, __int128 *))off_1E339C448[v227])(&v243, &v226);
      }
      if (v209[0] && v208 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E339C448[v208])(&v226, &v206);
    }
    else
    {
      LOBYTE(v222) = 0;
      v225 = 0;
    }
    if (!v225)
    {
      LOBYTE(v206) = 0;
      v218 = 0;
      goto LABEL_136;
    }
    v73 = (__int128 *)v236;
    v74 = (__int128 *)v236;
    if ((unint64_t)v236 >= *((_QWORD *)&v236 + 1))
    {
      v74 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v74 & 0x3F) == 0x15)
    {
      if ((_QWORD)v236 == *((_QWORD *)&v236 + 1))
      {
        v76 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v75 = 1;
        {
          v76 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v76;
        }
      }
      else
      {
        v73 = (__int128 *)(v236 + 24);
        *(_QWORD *)&v236 = v236 + 24;
        v76 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if ((unint64_t)v73 < *((_QWORD *)&v236 + 1) || (v75 & 1) != 0)
        {
          v77 = (unint64_t)v73 >= *((_QWORD *)&v236 + 1)
              ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
              : v73;
          v78 = *(_DWORD *)v77;
        }
        else
        {
          v76 = v76 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v76;
          v75 = 1;
          LOBYTE(v78) = v76;
        }
        if ((v78 & 0x3F) != 0x10)
          break;
        v73 = (__int128 *)((char *)v73 + 24);
        *(_QWORD *)&v236 = v73;
      }
      *(_QWORD *)&v226 = &v236;
      *((_QWORD *)&v226 + 1) = v3;
      if (v224 != -1)
      {
        *(_QWORD *)&v250 = &v226;
        ((void (*)(uint64_t *__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C2C0[v224])(&v206, &v250, &v222);
        goto LABEL_136;
      }
      goto LABEL_516;
    }
    v220[0] = 0;
    v221 = -1;
    LODWORD(v6) = v224;
    if (v224 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, unsigned __int16 ***))off_1E339C470[v224])(&v206, v220, &v222);
      v221 = v6;
    }
    v92 = *(unsigned __int8 *)(v3 + 4);
    v240 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v206, (uint64_t)&v236, &v240, v92 | 0x10100000000);
    if (v240)
      WTF::fastFree((WTF *)(v240 - 8), v93);
    if ((_BYTE)v208)
    {
      if ((_DWORD)v207 == -1)
        goto LABEL_516;
      *(_QWORD *)&v250 = &v237;
      ((void (*)(__int128 *__return_ptr, __int128 *, uint64_t *))off_1E339C3A8[v207])(&v226, &v250, &v206);
      LOBYTE(v243) = 0;
      v244 = -1;
      LODWORD(v6) = DWORD2(v226);
      if (DWORD2(v226) == -1)
      {
        v245 = 1;
      }
      else
      {
        ((void (*)(__int128 *, unsigned __int16 **, __int128 *))off_1E339BFD0[DWORD2(v226)])(&v250, &v243, &v226);
        v244 = v6;
        v245 = 1;
        if (DWORD2(v226) != -1)
          ((void (*)(__int128 *, __int128 *))off_1E339BEF8[DWORD2(v226)])(&v250, &v226);
      }
      if ((_BYTE)v208 && (_DWORD)v207 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E339BEF8[v207])(&v226, &v206);
    }
    else
    {
      LOBYTE(v243) = 0;
      v245 = 0;
    }
    if (!v245)
      goto LABEL_349;
    v105 = *(unsigned __int8 *)(v3 + 4);
    v237 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v206, (uint64_t)&v236, &v237, v105 | 0x10100000000);
    if (v237)
      WTF::fastFree((WTF *)(v237 - 8), v106);
    if ((_BYTE)v208)
    {
      if ((_DWORD)v207 == -1)
        goto LABEL_516;
      *(_QWORD *)&v250 = &v240;
      ((void (*)(__int128 *__return_ptr, __int128 *, uint64_t *))off_1E339C3D0[v207])(&v226, &v250, &v206);
      LOBYTE(v240) = 0;
      v241 = -1;
      LODWORD(v6) = DWORD2(v226);
      if (DWORD2(v226) == -1)
      {
        v242 = 1;
      }
      else
      {
        ((void (*)(__int128 *, unsigned __int16 **, __int128 *))off_1E339BFD0[DWORD2(v226)])(&v250, &v240, &v226);
        v241 = v6;
        v242 = 1;
        if (DWORD2(v226) != -1)
          ((void (*)(__int128 *, __int128 *))off_1E339BEF8[DWORD2(v226)])(&v250, &v226);
      }
      if ((_BYTE)v208 && (_DWORD)v207 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E339BEF8[v207])(&v226, &v206);
    }
    else
    {
      LOBYTE(v240) = 0;
      v242 = 0;
    }
    if (!v242)
    {
      v121 = 0;
      v122 = 0;
LABEL_341:
      if (v245 && v244 != -1)
        ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BEF8[v244])(&v206, &v243);
      if (v122)
      {
        v206 = v121;
        v217 = 0;
        v123 = 1;
      }
      else
      {
LABEL_349:
        v123 = 0;
        LOBYTE(v206) = 0;
      }
      v218 = v123;
      if (v221 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E339C448[v221])(&v226, v220);
      v221 = -1;
LABEL_136:
      if (v225)
      {
        v79 = v224;
        if (v224 != -1)
        {
          v80 = off_1E339C448;
LABEL_139:
          ((void (*)(__int128 *, unsigned __int16 ***))v80[v79])(&v226, &v222);
          goto LABEL_140;
        }
      }
      goto LABEL_140;
    }
    LOBYTE(v237) = 0;
    v239 = 0;
    v118 = (__int128 *)*((_QWORD *)&v236 + 1);
    v117 = (__int128 *)v236;
    v119 = (__int128 *)v236;
    if ((unint64_t)v236 >= *((_QWORD *)&v236 + 1))
    {
      v119 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v120 = 0;
    if ((*(_DWORD *)v119 & 0x3F) != 6 || *((_WORD *)v119 + 8) != 47)
      goto LABEL_331;
    if ((_QWORD)v236 == *((_QWORD *)&v236 + 1))
    {
      v152 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v151 = 1;
      {
        v152 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v152;
      }
    }
    else
    {
      v117 = (__int128 *)(v236 + 24);
      *(_QWORD *)&v236 = v236 + 24;
      v152 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if ((unint64_t)v117 < *((_QWORD *)&v236 + 1) || (v151 & 1) != 0)
      {
        v153 = (unint64_t)v117 >= *((_QWORD *)&v236 + 1)
             ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
             : v117;
        v154 = *(_DWORD *)v153;
      }
      else
      {
        v152 = v152 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v152;
        v151 = 1;
        LOBYTE(v154) = v152;
      }
      if ((v154 & 0x3F) != 0x10)
        break;
      v117 = (__int128 *)((char *)v117 + 24);
      *(_QWORD *)&v236 = v117;
    }
    v155 = *(unsigned __int8 *)(v3 + 4);
    v252 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v206, (uint64_t)&v236, &v252, v155 | 0x10100000000);
    if (v252)
      WTF::fastFree((WTF *)(v252 - 8), v156);
    if ((_BYTE)v208)
    {
      if ((_DWORD)v207 == -1)
        goto LABEL_516;
      *(_QWORD *)&v226 = &v249;
      ((void (*)(__int128 *__return_ptr, __int128 *, uint64_t *))off_1E339C3F8[v207])(&v250, &v226, &v206);
      LOBYTE(v226) = 0;
      DWORD2(v226) = -1;
      LODWORD(v6) = DWORD2(v250);
      if (DWORD2(v250) == -1)
      {
        LOBYTE(v227) = 1;
      }
      else
      {
        ((void (*)(uint64_t *, __int128 *, __int128 *))off_1E339BFD0[DWORD2(v250)])(&v249, &v226, &v250);
        DWORD2(v226) = v6;
        LOBYTE(v227) = 1;
        if (DWORD2(v250) != -1)
          ((void (*)(uint64_t *, __int128 *))off_1E339BEF8[DWORD2(v250)])(&v249, &v250);
      }
      if ((_BYTE)v208 && (_DWORD)v207 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E339BEF8[v207])(&v250, &v206);
    }
    else
    {
      LOBYTE(v226) = 0;
      LOBYTE(v227) = 0;
    }
    if (v239 != v227)
    {
      if (v239)
      {
        if (v238 != -1)
          ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BEF8[v238])(&v206, &v237);
        v238 = -1;
        v239 = 0;
      }
      else
      {
        LOBYTE(v237) = 0;
        v238 = -1;
        LODWORD(v6) = DWORD2(v226);
        if (DWORD2(v226) != -1)
        {
          ((void (*)(uint64_t *, unsigned __int16 **, __int128 *))off_1E339BFD0[DWORD2(v226)])(&v206, &v237, &v226);
          v238 = v6;
        }
        v239 = 1;
      }
      goto LABEL_491;
    }
    if (v239)
    {
      if (v238 == -1)
      {
        if (DWORD2(v226) != -1)
        {
LABEL_486:
          v206 = (uint64_t)&v237;
          ((void (*)(uint64_t *, unsigned __int16 **, __int128 *))off_1E339BF20[DWORD2(v226)])(&v206, &v237, &v226);
        }
      }
      else
      {
        if (DWORD2(v226) != -1)
          goto LABEL_486;
        ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BEF8[v238])(&v206, &v237);
        v238 = -1;
      }
LABEL_491:
      if ((_BYTE)v227 && DWORD2(v226) != -1)
        ((void (*)(uint64_t *, __int128 *))off_1E339BEF8[DWORD2(v226)])(&v206, &v226);
    }
    if (!v239)
    {
      v121 = 0;
      v122 = 0;
LABEL_336:
      if (v242 && v241 != -1)
        ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BEF8[v241])(&v206, &v240);
      goto LABEL_341;
    }
    v120 = 1;
    v118 = (__int128 *)*((_QWORD *)&v236 + 1);
    v117 = (__int128 *)v236;
LABEL_331:
    if (v117 != v118)
    {
      v121 = 0;
      v122 = 0;
LABEL_333:
      if (v120 && v238 != -1)
        ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BEF8[v238])(&v206, &v237);
      goto LABEL_336;
    }
    if (!v245 || !v242)
    {
LABEL_391:
      __break(1u);
LABEL_392:
      LOBYTE(v224) = 1;
      goto LABEL_306;
    }
    LOBYTE(v206) = 0;
    v208 = -1;
    v124 = v221;
    if (v221 != -1)
    {
      ((void (*)(__int128 *, uint64_t *, _BYTE *))off_1E339C470[v221])(&v226, &v206, v220);
      v208 = v124;
    }
    v9 = (__int128 *)v209;
    v209[0] = 0;
    v210 = -1;
    v125 = v244;
    if (v244 != -1)
    {
      ((void (*)(__int128 *, char *, unsigned __int16 **))off_1E339BFD0[v244])(&v226, v209, &v243);
      v210 = v125;
    }
    v211[0] = 0;
    v212 = -1;
    LODWORD(v6) = v241;
    if (v241 != -1)
    {
      ((void (*)(__int128 *, char *, unsigned __int16 **))off_1E339BFD0[v241])(&v226, v211, &v240);
      v212 = v6;
    }
    v126 = (WebCore::CSSPropertyParserHelpers *)v213;
    v213[0] = 0;
    v215 = 0;
    if (v239)
    {
      v214 = -1;
      LODWORD(v6) = v238;
      if (v238 != -1)
      {
        ((void (*)(__int128 *, char *, unsigned __int16 **))off_1E339BFD0[v238])(&v226, v213, &v237);
        v214 = v6;
      }
      v215 = 1;
    }
    v216 = *(_DWORD *)(v3 + 8);
    v249 = 0;
    v252 = (unsigned __int16 *)&v249;
    if (v208 != -1)
    {
      v6 = (unint64_t)&v252;
      *(_QWORD *)&v250 = &v252;
      ((void (*)(__int128 *__return_ptr, __int128 *, uint64_t *))off_1E339C420[v208])(&v226, &v250, &v206);
      v248 = 0;
      v252 = (unsigned __int16 *)&v248;
      if (v210 != -1)
      {
        v205 = v4;
        *(_QWORD *)&v250 = &v252;
        v6 = (unint64_t)&off_1E339BF48;
        v127 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v210))(&v250, v209);
        v247 = 0;
        v252 = (unsigned __int16 *)&v247;
        if (v212 != -1)
        {
          v129 = v127;
          v202 = v128;
          *(_QWORD *)&v250 = &v252;
          v131 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v212))(&v250, v211);
          v4 = v130;
          v246 = 0;
          __n = v129;
          if (!v215)
          {
            v132 = a1;
            v136 = 0;
            v134 = 0;
            v135 = 0;
            v250 = v226;
            v251 = v227;
LABEL_372:
            if (v247)
              WTF::fastFree((WTF *)(v247 - 16), v130);
            if (v248)
              WTF::fastFree((WTF *)(v248 - 16), v130);
            if (v249)
              WTF::fastFree((WTF *)(v249 - 16), v130);
            v226 = v250;
            v227 = v251;
            v228 = __n;
            v229 = v202;
            v230 = v131;
            v231 = v4;
            v232 = v135 | v134;
            v233 = v126;
            v234 = v136;
            *(_DWORD *)v235 = v249;
            *(_DWORD *)&v235[3] = *(_DWORD *)((char *)&v249 + 3);
            v137 = WebCore::convertToTypedColor<WebCore::HSLFunctionModern>((uint64_t)&v226);
            v139 = LODWORD(v137);
            v141 = v140;
            v142 = v138;
            v144 = v143;
            v252 = (unsigned __int16 *)__PAIR64__(LODWORD(v140), LODWORD(v137));
            v253 = v138;
            v254 = v143;
            a1 = v132;
            v4 = v205;
            if (v140 <= 100.0 && v138 >= 0.0 && v138 <= 100.0 && v216 < 2)
            {
              v121 = bswap32(WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::HSLA<float>>((float *)&v252)) | 0x1104000000000000;
            }
            else
            {
              v145 = WTF::fastMalloc((WTF *)0x14);
              *(_DWORD *)v145 = 1;
              *(_DWORD *)(v145 + 4) = v139;
              *(float *)(v145 + 8) = v141;
              v121 = v145 | 0x80C000000000000;
              *(float *)(v145 + 12) = v142;
              *(_DWORD *)(v145 + 16) = v144;
            }
            if (v215)
            {
              if (v214 != -1)
                ((void (*)(__int128 *, char *))off_1E339BEF8[v214])(&v226, v213);
              v214 = -1;
            }
            if (v212 != -1)
              ((void (*)(__int128 *, char *))off_1E339BEF8[v212])(&v226, v211);
            v212 = -1;
            if (v210 != -1)
              ((void (*)(__int128 *, char *))off_1E339BEF8[v210])(&v226, v209);
            v210 = -1;
            if (v208 != -1)
              ((void (*)(__int128 *, uint64_t *))off_1E339C448[v208])(&v226, &v206);
            v120 = v239;
            v122 = 1;
            goto LABEL_333;
          }
          v252 = (unsigned __int16 *)&v246;
          if (v214 != -1)
          {
            v132 = a1;
            *(_QWORD *)&v250 = &v252;
            v133 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v214))(&v250, v213);
            v126 = v130;
            v134 = v133 & 0xFFFFFFFFFFFFFF00;
            v135 = v133;
            v250 = v226;
            v251 = v227;
            if (v246)
              WTF::fastFree((WTF *)(v246 - 16), v130);
            v136 = 1;
            goto LABEL_372;
          }
        }
      }
    }
LABEL_516:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_517:
    if (v11 == 9 || v11 == 7)
    {
      if (!WebCore::CSSParserToken::numericValueType((WebCore::CSSParserToken *)v9))
      {
        v166 = *((double *)v9 + 2);
        if (v166 >= 0.0 && v166 < 1000000.0)
        {
          v167 = (int)v166;
          if ((*(_DWORD *)v9 & 0x3F) == 7)
          {
            WTF::String::number((WTF::String *)(int)v166);
          }
          else
          {
            v171 = (char *)WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)v9);
            WTF::makeString<int,WTF::StringView>(v255, v167, v171, v172);
          }
          v173 = *(WTF::StringImpl **)v255;
          if (*(_QWORD *)v255)
          {
            v174 = *(unsigned int *)(*(_QWORD *)v255 + 4);
            if (v174 > 5)
            {
              v94 = *(unsigned __int8 ***)v255;
              goto LABEL_578;
            }
            **(_DWORD **)v255 += 2;
            WTF::makeString<std::span<unsigned char const,18446744073709551615ul>,WTF::String>(v255, (int8x16_t *)&a000000[v174], 6 - v174, (uint64_t)v173);
            v94 = *(unsigned __int8 ***)v255;
            v175 = *(_DWORD *)v173 - 2;
            if (*(_DWORD *)v173 == 2)
            {
              WTF::StringImpl::destroy(v173, this);
              v175 = *(_DWORD *)v173;
            }
            else
            {
              *(_DWORD *)v173 = v175;
            }
            v176 = v175 - 2;
            if (v176)
              *(_DWORD *)v173 = v176;
            else
              WTF::StringImpl::destroy(v173, this);
          }
          else
          {
            WTF::makeString<std::span<unsigned char const,18446744073709551615ul>,WTF::String>(v255, (int8x16_t *)"000000", 6uLL, 0);
            v94 = *(unsigned __int8 ***)v255;
          }
          if (v94)
          {
            LODWORD(v174) = *((_DWORD *)v94 + 1);
            if ((_DWORD)v174 == 3)
            {
              v177 = 3;
LABEL_580:
              v95 = v94 + 1;
              v96 = v177 | ((unint64_t)((*((_DWORD *)v94 + 4) >> 2) & 1) << 32);
LABEL_214:
              v97 = *v95;
              if ((v96 & 0x100000000) != 0)
                v98 = WebCore::parseHexColorInternal<unsigned char>(v97, v96);
              else
                v98 = WebCore::parseHexColorInternal<char16_t>((unsigned __int16 *)v97, v96);
              v99 = v98;
              if (BYTE4(v98))
              {
                v101 = *(__int128 **)v4;
                v100 = *((_QWORD *)v4 + 1);
                if (*(_QWORD *)v4 == v100)
                {
                  v102 = 1;
                  {
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
                    v101 = *(__int128 **)v4;
                  }
                }
                else
                {
                  v101 = (__int128 *)((char *)v101 + 24);
                  *(_QWORD *)v4 = v101;
                }
                while (1)
                {
                  if ((unint64_t)v101 < v100 || (v102 & 1) != 0)
                  {
                    if ((unint64_t)v101 >= v100)
                      v101 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    v103 = *(_DWORD *)v101;
                  }
                  else
                  {
                    v103 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v103;
                    v102 = 1;
                  }
                  if ((v103 & 0x3F) != 0x10)
                    break;
                  v101 = (__int128 *)(*(_QWORD *)v4 + 24);
                  *(_QWORD *)v4 = v101;
                }
                LODWORD(v6) = v98 >> 8;
                v104 = 1;
              }
              else
              {
                v104 = 0;
                v99 = 0;
              }
              if (!v94)
                goto LABEL_229;
              goto LABEL_227;
            }
LABEL_578:
            if ((_DWORD)v174 == 6)
            {
              v177 = 6;
              goto LABEL_580;
            }
            v99 = 0;
            v104 = 0;
LABEL_227:
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v94, this);
            else
              *(_DWORD *)v94 -= 2;
LABEL_229:
            if (v104)
            {
              *(_DWORD *)a1 = v99 | ((_DWORD)v6 << 8);
              *(_DWORD *)(a1 + 88) = 2;
              goto LABEL_231;
            }
          }
        }
      }
    }
    else if (!v11)
    {
      v94 = 0;
      v95 = (unsigned __int8 **)v9 + 1;
      v169 = *((unsigned int *)v9 + 1);
      v96 = v169 | ((unint64_t)((v10 >> 22) & 1) << 32);
      if ((_DWORD)v169 == 3 || (_DWORD)v169 == 6)
        goto LABEL_214;
    }
  }
  if ((unsigned __int16)CSSValueKeyword > 0x3AFu)
  {
    switch((unsigned __int16)CSSValueKeyword)
    {
      case 0x3B6u:
        WebCore::CSSPropertyParserHelpers::consumeColorMixFunction((uint64_t)&v206, (__int128 **)&v219);
LABEL_503:
        std::optional<WebCore::CSSUnresolvedColor>::operator=[abi:sn180100]((uint64_t)v255, (uint64_t)&v206);
        if (v218 && v217 != -1)
          ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v217])(&v226, &v206);
        goto LABEL_152;
      case 0x3B0u:
        WebCore::CSSPropertyParserHelpers::consumeColorContrastFunction((uint64_t)&v206, (__int128 **)&v219, v3);
        goto LABEL_503;
      case 0x3B7u:
        WebCore::CSSPropertyParserHelpers::consumeLightDarkFunction((uint64_t)&v206, (__int128 **)&v219, v3);
        goto LABEL_503;
    }
LABEL_558:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    goto LABEL_559;
  }
  switch((__int16)CSSValueKeyword)
  {
    case 822:
    case 823:
      v107 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v219, this);
      *(_QWORD *)&v250 = v107;
      *((_QWORD *)&v250 + 1) = v108;
      if (v108 <= (unint64_t)v107)
      {
        v107 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v107 & 0x3F) == 0)
      {
        v149 = *((_DWORD *)v107 + 4);
        if (v149 < 0)
        {
          v149 = WebCore::cssValueKeywordID(*((_QWORD *)v107 + 1), *((unsigned int *)v107 + 1) | ((unint64_t)((*(_DWORD *)v107 >> 22) & 1) << 32));
          *((_DWORD *)v107 + 4) = v149;
        }
        if ((unsigned __int16)v149 == 779)
        {
          WebCore::CSSPropertyParserHelpers::consumeRelativeFunctionParameters<WebCore::RGBFunctionModernRelative>((uint64_t)&v226, (__int128 **)&v250, v3);
          WebCore::CSSPropertyParserHelpers::makeCSSUnresolvedColor<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(&v206, (uint64_t)&v226);
          std::__optional_destruct_base<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v226, v150);
          goto LABEL_140;
        }
      }
      v109 = *(unsigned __int8 *)(v3 + 4);
      v243 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v206, (uint64_t)&v250, &v243, v109 | 0x10100000000);
      if (v243)
        WTF::fastFree((WTF *)(v243 - 8), v110);
      if (!(_BYTE)v208)
      {
        LOBYTE(v222) = 0;
        LOBYTE(v224) = 0;
        goto LABEL_309;
      }
      if ((_DWORD)v207 == -1)
        goto LABEL_516;
      v222 = &v240;
      ((void (*)(__int128 *__return_ptr, unsigned __int16 ***, uint64_t *))off_1E339BCB0[v207])(&v226, &v222, &v206);
      LOBYTE(v222) = 0;
      v223 = -1;
      LODWORD(v6) = DWORD2(v226);
      if (DWORD2(v226) == -1)
        goto LABEL_392;
      ((void (*)(unsigned __int16 **, unsigned __int16 ***, __int128 *))off_1E339BFD0[DWORD2(v226)])(&v240, &v222, &v226);
      v223 = v6;
      LOBYTE(v224) = 1;
      if (DWORD2(v226) != -1)
        ((void (*)(unsigned __int16 **, __int128 *))off_1E339BEF8[DWORD2(v226)])(&v240, &v226);
LABEL_306:
      if ((_BYTE)v208 && (_DWORD)v207 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E339BEF8[v207])(&v226, &v206);
LABEL_309:
      if (!(_BYTE)v224)
      {
        LOBYTE(v206) = 0;
        v218 = 0;
        goto LABEL_323;
      }
      v111 = (__int128 *)v250;
      v112 = (__int128 *)v250;
      if ((unint64_t)v250 >= *((_QWORD *)&v250 + 1))
      {
        v112 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v112 & 0x3F) == 0x15)
      {
        if ((_QWORD)v250 == *((_QWORD *)&v250 + 1))
        {
          v114 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v113 = 1;
          {
            v114 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v114;
          }
        }
        else
        {
          v111 = (__int128 *)(v250 + 24);
          *(_QWORD *)&v250 = v250 + 24;
          v114 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        while (1)
        {
          if ((unint64_t)v111 < *((_QWORD *)&v250 + 1) || (v113 & 1) != 0)
          {
            v115 = (unint64_t)v111 >= *((_QWORD *)&v250 + 1)
                 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
                 : v111;
            v116 = *(_DWORD *)v115;
          }
          else
          {
            v114 = v114 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v114;
            v113 = 1;
            LOBYTE(v116) = v114;
          }
          if ((v116 & 0x3F) != 0x10)
            break;
          v111 = (__int128 *)((char *)v111 + 24);
          *(_QWORD *)&v250 = v111;
        }
        *(_QWORD *)&v226 = &v250;
        *((_QWORD *)&v226 + 1) = v3;
        v227 = &v250;
        v228 = v3;
        if (v223 != -1)
        {
          v243 = (unsigned __int16 *)&v226;
          ((void (*)(uint64_t *__return_ptr, unsigned __int16 **, unsigned __int16 ***))off_1E339BCD8[v223])(&v206, &v243, &v222);
          goto LABEL_323;
        }
        goto LABEL_516;
      }
      LOBYTE(v243) = 0;
      v244 = -1;
      v157 = v223;
      if (v223 != -1)
      {
        ((void (*)(uint64_t *, unsigned __int16 **, unsigned __int16 ***))off_1E339BFD0[v223])(&v206, &v243, &v222);
        v244 = v157;
      }
      WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionModernAbsolute>(&v226, (uint64_t)&v250, v3, (unint64_t)&v243);
      v159 = BYTE8(v226);
      if (BYTE8(v226))
      {
        v160 = v226;
        if ((_QWORD)v226)
          *(_QWORD *)&v226 = 0;
        v206 = v160;
        v217 = 0;
        v159 = 1;
      }
      else
      {
        LOBYTE(v206) = 0;
      }
      v218 = v159;
      std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional((uint64_t)&v226, v158);
      if (v244 != -1)
        ((void (*)(unsigned __int16 **, unsigned __int16 **))off_1E339BEF8[v244])(&v240, &v243);
      v244 = -1;
LABEL_323:
      if ((_BYTE)v224)
      {
        v79 = v223;
        if (v223 != -1)
        {
          v80 = off_1E339BEF8;
          goto LABEL_139;
        }
      }
LABEL_140:
      if (v296 != v218)
      {
        if (v296)
        {
          if (v295 != -1)
            ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v295])(&v226, v255);
          v295 = -1;
          v296 = 0;
        }
        else
        {
          v255[0] = 0;
          v295 = -1;
          v83 = v217;
          if (v217 != -1)
          {
            ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E339D698[v217])(&v226, v255, &v206);
            v295 = v83;
          }
          v296 = 1;
        }
        goto LABEL_149;
      }
      if (v296)
      {
        if (v295 == -1)
        {
          if (v217 != -1)
          {
LABEL_144:
            *(_QWORD *)&v226 = v255;
            ((void (*)(__int128 *, _BYTE *, uint64_t *))*(&off_1E339C0C8 + v217))(&v226, v255, &v206);
          }
        }
        else
        {
          if (v217 != -1)
            goto LABEL_144;
          ((void (*)(__int128 *, _BYTE *))off_1E339BFF8[v295])(&v226, v255);
          v295 = -1;
        }
LABEL_149:
        if (v218 && v217 != -1)
          ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v217])(&v226, &v206);
      }
LABEL_152:
      if (!v296)
        goto LABEL_558;
      *(_OWORD *)v4 = v219;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 88) = -1;
      v81 = v295;
      if (v295 == -1)
      {
LABEL_231:
        *(_BYTE *)(a1 + 96) = 1;
        goto LABEL_559;
      }
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E339D698[v295])(&v206, a1, v255);
      *(_DWORD *)(a1 + 88) = v81;
      v82 = v296;
      *(_BYTE *)(a1 + 96) = 1;
      if (v82 && v295 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v295])(&v206, v255);
LABEL_559:
      --*(_DWORD *)(v3 + 8);
      return;
    case 824:
    case 825:
      goto LABEL_558;
    case 826:
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::HWBFunction>((uint64_t)&v206, (__int128 **)&v219, v3);
      goto LABEL_554;
    case 827:
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::LabFunction>((uint64_t)&v206, (__int128 **)&v219, v3);
      goto LABEL_554;
    case 828:
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::LCHFunction>((uint64_t)&v206, (__int128 **)&v219, v3);
      goto LABEL_554;
    case 829:
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::OKLabFunction>((uint64_t)&v206, (__int128 **)&v219, v3);
      goto LABEL_554;
    case 830:
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::OKLCHFunction>((uint64_t)&v206, (__int128 **)&v219, v3);
      goto LABEL_554;
    default:
      if ((unsigned __int16)CSSValueKeyword != 753)
        goto LABEL_558;
      v170 = v3;
      WebCore::CSSPropertyParserHelpers::consumeColorFunction(&v206, (__int128 **)&v219, v3);
LABEL_554:
      std::optional<WebCore::CSSUnresolvedColor>::operator=[abi:sn180100]((uint64_t)v255, (uint64_t)&v206);
      if (v218 && v217 != -1)
        ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v217])(&v226, &v206);
      v3 = v170;
      goto LABEL_152;
  }
}

uint64_t std::optional<WebCore::CSSUnresolvedAbsoluteColor>::~optional(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;

  v2 = a1;
  if (*(_BYTE *)(a1 + 8))
  {
    if ((*(_QWORD *)a1 & 0x8000000000000) != 0)
    {
      v4 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFLL);
      do
      {
        v5 = __ldaxr(v4);
        v6 = --v5 == 0;
      }
      while (__stlxr(v5, v4));
      v2 = a1;
      if (v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
        return a1;
      }
    }
  }
  return v2;
}

void WebCore::CSSPropertyParserHelpers::parseColorRawSlow(unsigned int **a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 *v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 **v26;
  WebCore::CSSParserTokenRange *v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  _BYTE v31[48];
  __int128 *v32;
  unsigned int v33;
  _BYTE v34[88];
  int v35;
  char v36;
  _BYTE v37[8];
  int v38;
  uint64_t v39;
  uint64_t *v40;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v31, a1, 0, 0);
  v9 = v32;
  v10 = (unint64_t)v32 + 24 * v33;
  v29 = v32;
  v30 = v10;
  v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if ((unint64_t)v9 < v10 || (v11 & 1) != 0)
    {
      if ((unint64_t)v9 >= v10)
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v13 = v9;
      v14 = *(_DWORD *)v13;
    }
    else
    {
      v14 = v12 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
      v11 = 1;
      v12 = v14;
    }
    v9 = (__int128 *)((char *)v9 + 24);
  }
  while ((v14 & 0x3F) == 0x10);
  v29 = (__int128 *)((char *)v9 - 24);
  v37[0] = a3[1];
  v37[1] = *a3;
  v15 = *(unsigned __int8 *)(a2 + 53);
  v37[2] = (*(_WORD *)(a2 + 51) & 0x20) != 0;
  v37[3] = v15 >> 7;
  v37[4] = *(_BYTE *)(a2 + 48);
  v38 = 0;
  WebCore::CSSPropertyParserHelpers::consumeColor((uint64_t)v34, (WebCore::CSSPropertyParserHelpers *)&v29, (uint64_t)v37);
  if (v36)
  {
    v39 = a4;
    if (v35 == -1)
    {
      v26 = (__int128 **)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(v26, v27);
      return;
    }
    v40 = &v39;
    ((void (*)(uint64_t *__return_ptr, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v28, &v40, v34);
    if (v36 && v35 != -1)
      ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v35])(&v40, v34);
  }
  else
  {
    v28 = 0;
  }
  v18 = v29;
  v17 = (__int128 *)v30;
  v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if ((unint64_t)v18 < v30 || (v19 & 1) != 0)
    {
      if ((unint64_t)v18 >= v30)
        v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v21 = v18;
      v22 = *(_DWORD *)v21;
    }
    else
    {
      v22 = v20 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
      v19 = 1;
      v20 = v22;
    }
    v18 = (__int128 *)((char *)v18 + 24);
  }
  while ((v22 & 0x3F) == 0x10);
  v29 = (__int128 *)((char *)v18 - 24);
  *a5 = 0;
  if ((__int128 *)((char *)v18 - 24) == v17)
  {
    if (v28)
      *a5 = v28;
  }
  else if ((v28 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v16);
    }
  }
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v31, (WTF::StringImpl *)v16);
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  v3 = *this;
  if (*this >= this[1])
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  LODWORD(v4) = WebCore::CSSParserToken::id((unsigned int *)v3);
  switch((int)v4)
  {
    case 935:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0xB00000000;
      break;
    case 936:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0x600000000;
      break;
    case 937:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0x900000000;
      break;
    case 938:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0x800000000;
      break;
    case 939:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0xA00000000;
      break;
    case 940:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0x700000000;
      break;
    case 941:
    case 943:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0xD00000000;
      break;
    case 942:
      WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
      LOBYTE(v4) = 0;
      v5 = 0xC00000000;
      break;
    default:
      v7 = v4 - 824;
      LOBYTE(v4) = 0;
      v5 = 0;
      switch(v7)
      {
        case 0:
          v4 = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::HSL>(this);
          goto LABEL_7;
        case 1:
          return v5 | v4;
        case 2:
          v4 = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::HWB>(this);
          goto LABEL_7;
        case 3:
          WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
          LOBYTE(v4) = 0;
          v5 = 0x300000000;
          return v5 | v4;
        case 4:
          v4 = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::LCH>(this);
          goto LABEL_7;
        case 5:
          WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(this);
          LOBYTE(v4) = 0;
          v5 = 0x500000000;
          return v5 | v4;
        case 6:
          v4 = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::OKLCH>(this);
LABEL_7:
          v5 = v4 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          LOBYTE(v4) = 0;
          v5 = 0;
          break;
      }
      break;
  }
  return v5 | v4;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::HSL>(__int128 **a1)
{
  unint64_t v2;
  __int128 *v3;
  char v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned __int8 v8;

  v3 = *a1;
  v2 = (unint64_t)a1[1];
  if (*a1 == (__int128 *)v2)
  {
    v4 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *a1;
    }
  }
  else
  {
    v3 = (__int128 *)((char *)v3 + 24);
    *a1 = v3;
  }
  while (1)
  {
    if ((unint64_t)v3 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v3 >= v2)
        v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v5 = *(_DWORD *)v3;
    }
    else
    {
      v5 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
      v4 = 1;
    }
    if ((v5 & 0x3F) != 0x10)
      break;
    v3 = (__int128 *)((char *)*a1 + 24);
    *a1 = v3;
  }
  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::HueInterpolationMethod> [4]> const>((uint64_t)a1);
  if (v6 < 0x100u)
    return 0;
  v8 = v6;
  if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)751>((uint64_t)a1) >= 0x10000)
    return v8;
  else
    return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::HWB>(__int128 **a1)
{
  unint64_t v2;
  __int128 *v3;
  char v4;
  unsigned int v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *a1;
  v2 = (unint64_t)a1[1];
  if (*a1 == (__int128 *)v2)
  {
    v4 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *a1;
    }
  }
  else
  {
    v3 = (__int128 *)((char *)v3 + 24);
    *a1 = v3;
  }
  while (1)
  {
    if ((unint64_t)v3 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v3 >= v2)
        v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v5 = *(_DWORD *)v3;
    }
    else
    {
      v5 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
      v4 = 1;
    }
    if ((v5 & 0x3F) != 0x10)
      break;
    v3 = (__int128 *)((char *)*a1 + 24);
    *a1 = v3;
  }
  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::HueInterpolationMethod> [4]> const>((uint64_t)a1);
  v7 = 0x100000000;
  if (v6 >= 0x100u)
  {
    v8 = v6;
    if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)751>((uint64_t)a1) >= 0x10000)
      return v8 | 0x100000000;
  }
  return v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::LCH>(__int128 **a1)
{
  unint64_t v2;
  __int128 *v3;
  char v4;
  unsigned int v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *a1;
  v2 = (unint64_t)a1[1];
  if (*a1 == (__int128 *)v2)
  {
    v4 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *a1;
    }
  }
  else
  {
    v3 = (__int128 *)((char *)v3 + 24);
    *a1 = v3;
  }
  while (1)
  {
    if ((unint64_t)v3 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v3 >= v2)
        v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v5 = *(_DWORD *)v3;
    }
    else
    {
      v5 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
      v4 = 1;
    }
    if ((v5 & 0x3F) != 0x10)
      break;
    v3 = (__int128 *)((char *)*a1 + 24);
    *a1 = v3;
  }
  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::HueInterpolationMethod> [4]> const>((uint64_t)a1);
  v7 = 0x200000000;
  if (v6 >= 0x100u)
  {
    v8 = v6;
    if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)751>((uint64_t)a1) >= 0x10000)
      return v8 | 0x200000000;
  }
  return v7;
}

__int128 **WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_1::operator()<WebCore::ColorInterpolationMethod::Lab>(__int128 **result)
{
  unint64_t v1;
  __int128 *v2;
  char v3;
  unsigned int v4;

  v2 = *result;
  v1 = (unint64_t)result[1];
  if (*result == (__int128 *)v1)
  {
    v3 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v2 = *result;
    }
  }
  else
  {
    v2 = (__int128 *)((char *)v2 + 24);
    *result = v2;
  }
  while (1)
  {
    if ((unint64_t)v2 < v1 || (v3 & 1) != 0)
    {
      if ((unint64_t)v2 >= v1)
        v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v4 = *(_DWORD *)v2;
    }
    else
    {
      v4 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v4;
      v3 = 1;
    }
    if ((v4 & 0x3F) != 0x10)
      break;
    v2 = (__int128 *)((char *)*result + 24);
    *result = v2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(WebCore::CSSParserTokenRange &)::$_0::operator()<WebCore::ColorInterpolationMethod::OKLCH>(__int128 **a1)
{
  unint64_t v2;
  __int128 *v3;
  char v4;
  unsigned int v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *a1;
  v2 = (unint64_t)a1[1];
  if (*a1 == (__int128 *)v2)
  {
    v4 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v3 = *a1;
    }
  }
  else
  {
    v3 = (__int128 *)((char *)v3 + 24);
    *a1 = v3;
  }
  while (1)
  {
    if ((unint64_t)v3 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v3 >= v2)
        v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v5 = *(_DWORD *)v3;
    }
    else
    {
      v5 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
      v4 = 1;
    }
    if ((v5 & 0x3F) != 0x10)
      break;
    v3 = (__int128 *)((char *)*a1 + 24);
    *a1 = v3;
  }
  v6 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::HueInterpolationMethod> [4]> const>((uint64_t)a1);
  v7 = 0x400000000;
  if (v6 >= 0x100u)
  {
    v8 = v6;
    if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)751>((uint64_t)a1) >= 0x10000)
      return v8 | 0x400000000;
  }
  return v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];

  v3 = (int)a2;
  v4 = this;
  v7 = *(__int128 **)this;
  v6 = *(__int128 **)(this + 8);
  if (*(_QWORD *)this >= (unint64_t)v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v7 & 0x3F) != 0)
    goto LABEL_24;
  v8 = *(__int128 **)this;
  if (*(_QWORD *)this >= (unint64_t)v6)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_5;
  this = *((unsigned int *)v8 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = this;
  }
  if ((unsigned __int16)this - 1 < 5 || (unsigned __int16)this == 395)
  {
LABEL_24:
    *a3 = 0;
    return this;
  }
  v6 = *(__int128 **)(v4 + 8);
LABEL_5:
  v9 = *(__int128 **)v4;
  if (*(__int128 **)v4 == v6)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v11 = 1;
    {
      v10 = v6;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v10 = *(__int128 **)v4;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v9 + 24);
    *(_QWORD *)v4 = (char *)v9 + 24;
  }
  while (1)
  {
    if (v10 < v6 || (v11 & 1) != 0)
    {
      if (v10 >= v6)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *(_DWORD *)v10;
    }
    else
    {
      v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v11 = 1;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)(*(_QWORD *)v4 + 24);
    *(_QWORD *)v4 = v10;
  }
  v14 = *(unsigned int *)v9;
  v13 = *((unsigned int *)v9 + 1);
  v15[0] = *((_QWORD *)v9 + 1);
  v15[1] = v13 & 0xFFFFFFFEFFFFFFFFLL | (((v14 >> 22) & 1) << 32);
  if (v3)
    return WTF::StringView::convertToASCIILowercase((WTF::StringView *)v15);
  if (((v14 >> 22) & 1) != 0)
    return WTF::String::String();
  return WTF::String::String();
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeDashedIdent@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  __int128 v14;
  WTF::StringImpl *v15;

  v14 = *(_OWORD *)this;
  result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, a2, &v15);
  v6 = v15;
  if (!v15)
  {
    *(_OWORD *)this = v14;
    *a3 = 0;
    return result;
  }
  v15 = 0;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 2;
  v9 = *(_BYTE *)(v8 + 6);
  *(_WORD *)(v8 + 4) = 63;
  *(_BYTE *)(v8 + 6) = v9 & 0xFC;
  *(_QWORD *)(v8 + 8) = v6;
  v10 = *(_DWORD *)v6;
  *(_DWORD *)v6 += 2;
  if (v10)
    *(_DWORD *)v6 = v10;
  else
    WTF::StringImpl::destroy(v6, v7);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  v11 = (*(_WORD *)(v8 + 4) & 0x7Fu) - 20;
  if (v11 <= 0x3C)
  {
    if (((1 << ((*(_WORD *)(v8 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v12 = *(WTF::StringImpl **)(v8 + 8);
      if (v12)
        goto LABEL_10;
    }
    else
    {
      if (v11 == 60)
      {
        result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v8 + 8));
      }
      else
      {
        if (v11 != 59)
          goto LABEL_17;
        result = (WTF::StringImpl *)WebCore::nameString(*(unsigned __int16 *)(v8 + 8));
      }
      v12 = *(WTF::StringImpl **)result;
      if (*(_QWORD *)result)
      {
LABEL_10:
        *(_DWORD *)v12 += 2;
        result = (WTF::StringImpl *)WTF::StringImpl::startsWith();
        v13 = (char)result;
        if (*(_DWORD *)v12 == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v7);
          if ((v13 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
          if ((_DWORD)result)
          {
LABEL_12:
            *a3 = v8;
            return result;
          }
        }
      }
    }
  }
LABEL_17:
  *(_OWORD *)this = v14;
  *a3 = 0;
  if (*(_DWORD *)v8 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, v7);
  *(_DWORD *)v8 -= 2;
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_2>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumeRadialGradient(&v8, &v9, a3, 0),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_3>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumeRadialGradient(&v8, &v9, a3, 1),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_4>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumePrefixedLinearGradient(&v8, (uint64_t)&v9, a3, 0),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_5>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumePrefixedLinearGradient(&v8, (uint64_t)&v9, a3, 1),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_6>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumeLinearGradient(&v8, (WebCore::CSSPropertyParserHelpers *)&v9, a3, 1),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_8>(unint64_t result, WebCore::CSSParserTokenRange *a2, const WebCore::CSSParserContext *a3)
{
  _QWORD *v3;
  WebCore::CSSParserTokenRange *v6;
  unint64_t v7;
  char v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  WTF *v15;
  WTF *v16;
  _QWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  WTF *v23;
  _DWORD *v25;
  _DWORD *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  __int128 v32;
  __int128 v33;
  WTF *v34;
  WTF *v35;
  _QWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  _DWORD *v41;
  WTF *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF *v45;
  WTF *v47;
  int v49;
  int v50;
  uint64_t v51;
  _DWORD **v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD **v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD **v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD **v64;
  _DWORD *v65;
  _DWORD *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 v69;
  WTF *v70[2];
  _OWORD v71[2];
  WTF *v72[2];
  __int128 v73;
  char v74[8];
  int v75;
  char v76[8];
  int v77;
  const WebCore::CSSParserContext *v78;
  WTF *v79;
  uint64_t v80;
  _BYTE v81[32];
  unsigned __int8 v82;
  uint64_t v83;
  char v84[8];
  unsigned int v85;
  unsigned __int8 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  __int128 v90;
  unsigned __int8 v91;
  __int128 v92;
  char v93;

  v3 = (_QWORD *)result;
  if ((**(_BYTE **)a2 & 8) == 0)
    goto LABEL_14;
  v69 = *(_OWORD *)*((_QWORD *)a2 + 1);
  result = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v69, a2);
  v67 = (__int128 *)result;
  v68 = (__int128 *)v6;
  if (v6 == (WebCore::CSSParserTokenRange *)result)
  {
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v8 = 1;
    {
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
    }
    v7 = (unint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v7 = result;
    result += 24;
    v67 = (__int128 *)result;
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  while (1)
  {
    if (result < (unint64_t)v6 || (v8 & 1) != 0)
    {
      v10 = result >= (unint64_t)v6
          ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
          : (__int128 *)result;
      v11 = *(_DWORD *)v10;
    }
    else
    {
      v11 = v9 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      v8 = 1;
      v9 = v11;
    }
    if ((v11 & 0x3F) != 0x10)
      break;
    result += 24;
    v67 = (__int128 *)result;
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_14;
  result = *(unsigned int *)(v7 + 16);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *(_DWORD *)(v7 + 16) = result;
  }
  if ((unsigned __int16)result == 782)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, v6);
    if ((_DWORD)result)
    {
      result = (unint64_t)WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientPoint((WebCore::CSSPropertyParserHelpers *)&v92, &v67);
      if (v93)
      {
        if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, (WebCore::CSSParserTokenRange *)v12))
        {
          v89 = 0;
          WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(&v67, &v89, 256, (uint64_t)&v90);
          if (v89)
            WTF::fastFree((WTF *)(v89 - 16), v12);
          if (v91)
          {
            if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, (WebCore::CSSParserTokenRange *)v12)&& (WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientPoint((WebCore::CSSPropertyParserHelpers *)&v87, &v67), v88))
            {
              if (!WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, (WebCore::CSSParserTokenRange *)v12))goto LABEL_118;
              v83 = 0;
              WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(&v67, &v83, 256, (uint64_t)v84);
              if (v83)
                WTF::fastFree((WTF *)(v83 - 16), v12);
              if (v86)
              {
                WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientColorStops((WebCore::CSSPropertyParserHelpers *)&v79, (int **)&v67, a3);
                if (v82)
                {
                  v32 = v92;
                  v92 = 0u;
                  v33 = v87;
                  v87 = 0u;
                  *(_OWORD *)v72 = v32;
                  v73 = v33;
                  v29 = v91;
                  if (!v91)
                    goto LABEL_168;
                  v74[0] = 0;
                  v75 = -1;
                  v7 = DWORD2(v90);
                  a3 = (const WebCore::CSSParserContext *)off_1E339BE20;
                  if (DWORD2(v90) != -1)
                  {
                    ((void (*)(WTF **, char *, __int128 *))off_1E339BE20[DWORD2(v90)])(v70, v74, &v90);
                    v75 = v7;
                  }
                  v29 = v86;
                  if (!v86)
                    goto LABEL_168;
                  v76[0] = 0;
                  v77 = -1;
                  v7 = v85;
                  if (v85 != -1)
                  {
                    ((void (*)(WTF **, char *, char *))off_1E339BE20[v85])(v70, v76, v84);
                    v77 = v7;
                  }
                  v29 = v82;
                  if (!v82)
                  {
LABEL_168:
                    __break(1u);
LABEL_169:
                    v55 = 16 * v29;
                    v56 = (_DWORD **)((char *)v72[0] + 8);
                    do
                    {
                      v57 = *v56;
                      *v56 = 0;
                      if (v57)
                      {
                        if (*v57 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, (WTF::StringImpl *)v12);
                        else
                          *v57 -= 2;
                      }
                      v58 = *(v56 - 1);
                      *(v56 - 1) = 0;
                      if (v58)
                      {
                        if (*v58 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, (WTF::StringImpl *)v12);
                        else
                          *v58 -= 2;
                      }
                      v56 += 2;
                      v55 -= 16;
                    }
                    while (v55);
LABEL_48:
                    v30 = v72[0];
                    if ((WTF *)v7 != v72[0] && v72[0] != 0)
                    {
                      v72[0] = 0;
                      LODWORD(v72[1]) = 0;
                      WTF::fastFree(v30, v12);
                    }
                    goto LABEL_111;
                  }
                  v70[0] = (WTF *)v71;
                  v70[1] = (WTF *)2;
                  v34 = v79;
                  if (v79 == (WTF *)v81)
                  {
                    if (HIDWORD(v80))
                    {
                      v35 = (WTF *)((char *)v79 + 16 * HIDWORD(v80));
                      v36 = v71;
                      do
                      {
                        v37 = *(_DWORD **)v34;
                        *(_QWORD *)v34 = 0;
                        *v36 = v37;
                        v38 = *((_QWORD *)v34 + 1);
                        *((_QWORD *)v34 + 1) = 0;
                        v36[1] = v38;
                        v39 = (_DWORD *)*((_QWORD *)v34 + 1);
                        *((_QWORD *)v34 + 1) = 0;
                        if (v39)
                        {
                          if (*v39 == 2)
                          {
                            v40 = v35;
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, (WTF::StringImpl *)v12);
                            v35 = v40;
                          }
                          else
                          {
                            *v39 -= 2;
                          }
                        }
                        v41 = *(_DWORD **)v34;
                        *(_QWORD *)v34 = 0;
                        if (v41)
                        {
                          if (*v41 == 2)
                          {
                            v42 = v35;
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, (WTF::StringImpl *)v12);
                            v35 = v42;
                          }
                          else
                          {
                            *v41 -= 2;
                          }
                        }
                        v34 = (WTF *)((char *)v34 + 16);
                        v36 += 2;
                      }
                      while (v34 != v35);
                    }
                  }
                  else
                  {
                    v79 = (WTF *)v81;
                    v70[0] = v34;
                    v50 = v80;
                    LODWORD(v80) = 2;
                    LODWORD(v70[1]) = v50;
                  }
                  v43 = HIDWORD(v80);
                  HIDWORD(v80) = 0;
                  HIDWORD(v70[1]) = v43;
                  WebCore::CSSDeprecatedRadialGradientValue::create((uint64_t *)v72, 0x600000000, 0, (uint64_t)v70, (uint64_t *)&v78);
                  a3 = v78;
                  v78 = 0;
                  if (HIDWORD(v70[1]))
                  {
                    v59 = 16 * HIDWORD(v70[1]);
                    v60 = (_DWORD **)((char *)v70[0] + 8);
                    do
                    {
                      v61 = *v60;
                      *v60 = 0;
                      if (v61)
                      {
                        if (*v61 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v44);
                        else
                          *v61 -= 2;
                      }
                      v62 = *(v60 - 1);
                      *(v60 - 1) = 0;
                      if (v62)
                      {
                        if (*v62 == 2)
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, v44);
                        else
                          *v62 -= 2;
                      }
                      v60 += 2;
                      v59 -= 16;
                    }
                    while (v59);
                  }
                  v45 = v70[0];
                  if (v71 != (_OWORD *)v70[0] && v70[0] != 0)
                  {
                    v70[0] = 0;
                    LODWORD(v70[1]) = 0;
                    WTF::fastFree(v45, v44);
                  }
                  WebCore::CSSDeprecatedRadialGradientValue::Data::~Data((WebCore::CSSDeprecatedRadialGradientValue::Data *)v72, v44);
                  if (v82)
                  {
                    if (HIDWORD(v80))
                    {
                      v63 = 16 * HIDWORD(v80);
                      v64 = (_DWORD **)((char *)v79 + 8);
                      do
                      {
                        v65 = *v64;
                        *v64 = 0;
                        if (v65)
                        {
                          if (*v65 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, (WTF::StringImpl *)v12);
                          else
                            *v65 -= 2;
                        }
                        v66 = *(v64 - 1);
                        *(v64 - 1) = 0;
                        if (v66)
                        {
                          if (*v66 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, (WTF::StringImpl *)v12);
                          else
                            *v66 -= 2;
                        }
                        v64 += 2;
                        v63 -= 16;
                      }
                      while (v63);
                    }
                    v47 = v79;
                    if (v81 != (_BYTE *)v79 && v79 != 0)
                    {
                      v79 = 0;
                      LODWORD(v80) = 0;
                      WTF::fastFree(v47, v12);
                    }
                  }
                }
                else
                {
                  a3 = 0;
                }
                if (v86 && v85 != -1)
                  ((void (*)(WTF **, char *))off_1E339BE10[v85])(&v79, v84);
              }
              else
              {
LABEL_118:
                a3 = 0;
              }
              if (*((_QWORD *)&v87 + 1))
              {
                if (**((_DWORD **)&v87 + 1) == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v87 + 1), (WTF::StringImpl *)v12);
                else
                  **((_DWORD **)&v87 + 1) -= 2;
              }
              if ((_QWORD)v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v87, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v87 -= 2;
              }
            }
            else
            {
              a3 = 0;
            }
            if (v91 && DWORD2(v90) != -1)
              ((void (*)(WTF **, __int128 *))off_1E339BE10[DWORD2(v90)])(&v79, &v90);
            goto LABEL_100;
          }
        }
        goto LABEL_99;
      }
    }
LABEL_98:
    a3 = 0;
    goto LABEL_102;
  }
  if ((unsigned __int16)result != 631)
  {
LABEL_14:
    *v3 = 0;
    return result;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, v6);
  if (!(_DWORD)result)
    goto LABEL_98;
  result = (unint64_t)WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientPoint((WebCore::CSSPropertyParserHelpers *)&v92, &v67);
  if (!v93)
    goto LABEL_98;
  if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v67, (WebCore::CSSParserTokenRange *)v12))
  {
    WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientPoint((WebCore::CSSPropertyParserHelpers *)&v90, &v67);
    if (v91)
    {
      WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientColorStops((WebCore::CSSPropertyParserHelpers *)v72, (int **)&v67, a3);
      if (v76[0])
      {
        v13 = v92;
        v92 = 0u;
        v14 = v90;
        v90 = 0u;
        *(_OWORD *)v70 = v13;
        v71[0] = v14;
        v79 = (WTF *)v81;
        v80 = 2;
        v15 = v72[0];
        v7 = (unint64_t)&v73;
        if ((__int128 *)v72[0] == &v73)
        {
          if (HIDWORD(v72[1]))
          {
            v16 = (WTF *)((char *)v72[0] + 16 * HIDWORD(v72[1]));
            v17 = v81;
            do
            {
              v18 = *(_DWORD **)v15;
              *(_QWORD *)v15 = 0;
              *v17 = v18;
              v19 = *((_QWORD *)v15 + 1);
              *((_QWORD *)v15 + 1) = 0;
              v17[1] = v19;
              v20 = (_DWORD *)*((_QWORD *)v15 + 1);
              *((_QWORD *)v15 + 1) = 0;
              if (v20)
              {
                if (*v20 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)v12);
                else
                  *v20 -= 2;
              }
              v21 = *(_DWORD **)v15;
              *(_QWORD *)v15 = 0;
              if (v21)
              {
                if (*v21 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)v12);
                else
                  *v21 -= 2;
              }
              v15 = (WTF *)((char *)v15 + 16);
              v17 += 2;
            }
            while (v15 != v16);
          }
        }
        else
        {
          v72[0] = (WTF *)&v73;
          v79 = v15;
          v49 = (int)v72[1];
          LODWORD(v72[1]) = 2;
          LODWORD(v80) = v49;
        }
        v22 = HIDWORD(v72[1]);
        HIDWORD(v72[1]) = 0;
        HIDWORD(v80) = v22;
        WebCore::CSSDeprecatedLinearGradientValue::create((WTF::StringImpl *)v70, 0x600000000, 0, (uint64_t)&v79, (uint64_t *)&v87);
        a3 = (const WebCore::CSSParserContext *)v87;
        *(_QWORD *)&v87 = 0;
        if (HIDWORD(v80))
        {
          v51 = 16 * HIDWORD(v80);
          v52 = (_DWORD **)((char *)v79 + 8);
          do
          {
            v53 = *v52;
            *v52 = 0;
            if (v53)
            {
              if (*v53 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, (WTF::StringImpl *)v12);
              else
                *v53 -= 2;
            }
            v54 = *(v52 - 1);
            *(v52 - 1) = 0;
            if (v54)
            {
              if (*v54 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, (WTF::StringImpl *)v12);
              else
                *v54 -= 2;
            }
            v52 += 2;
            v51 -= 16;
          }
          while (v51);
        }
        v23 = v79;
        if (v81 != (_BYTE *)v79 && v79 != 0)
        {
          v79 = 0;
          LODWORD(v80) = 0;
          WTF::fastFree(v23, v12);
        }
        v25 = (_DWORD *)*((_QWORD *)&v71[0] + 1);
        *((_QWORD *)&v71[0] + 1) = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, (WTF::StringImpl *)v12);
          else
            *v25 -= 2;
        }
        v26 = *(_DWORD **)&v71[0];
        *(_QWORD *)&v71[0] = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, (WTF::StringImpl *)v12);
          else
            *v26 -= 2;
        }
        v27 = v70[1];
        v70[1] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, (WTF::StringImpl *)v12);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = v70[0];
        v70[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)v12);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (!v76[0])
          goto LABEL_111;
        v29 = HIDWORD(v72[1]);
        if (!HIDWORD(v72[1]))
          goto LABEL_48;
        goto LABEL_169;
      }
      if (*((_QWORD *)&v90 + 1))
      {
        if (**((_DWORD **)&v90 + 1) != 2)
        {
          a3 = 0;
          **((_DWORD **)&v90 + 1) -= 2;
LABEL_111:
          if ((_QWORD)v90)
          {
            if (*(_DWORD *)v90 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v90, (WTF::StringImpl *)v12);
            else
              *(_DWORD *)v90 -= 2;
          }
          goto LABEL_100;
        }
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v90 + 1), (WTF::StringImpl *)v12);
      }
      a3 = 0;
      goto LABEL_111;
    }
  }
LABEL_99:
  a3 = 0;
LABEL_100:
  if (*((_QWORD *)&v92 + 1))
  {
    if (**((_DWORD **)&v92 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v92 + 1), (WTF::StringImpl *)v12);
    else
      **((_DWORD **)&v92 + 1) -= 2;
  }
  result = v92;
  if ((_QWORD)v92)
  {
    if (*(_DWORD *)v92 == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v92, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v92 -= 2;
  }
LABEL_102:
  if (!a3)
    goto LABEL_14;
  if (v67 == v68)
  {
    *(_OWORD *)*((_QWORD *)a2 + 1) = v69;
    *v3 = a3;
  }
  else
  {
    *v3 = 0;
    if (*(_DWORD *)a3 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)a3, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)a3 -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_9>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(&v8, &v9, a3, 0),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_10>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(&v8, &v9, a3, 1),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_11>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumeConicGradient(&v8, (uint64_t)&v9, a3, 0),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_12>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v11 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v9 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v11, a2),
        v10 = v6,
        WebCore::CSSPropertyParserHelpers::consumeConicGradient(&v8, (uint64_t)&v9, a3, 1),
        (result = v8) != 0))
  {
    if (v9 == v10)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v11;
      *v3 = result;
    }
    else
    {
      *v3 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_13>(_DWORD *result, WebCore::CSSParserTokenRange *a2, uint64_t a3, unsigned __int16 *a4)
{
  _QWORD *v4;
  __int128 *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;

  v4 = result;
  if ((**(_BYTE **)a2 & 8) != 0
    && (v13 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v11 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v13, a2),
        v12 = v8,
        WebCore::CSSPropertyParserHelpers::consumeCrossFade(&v10, &v11, a3, *a4),
        (result = v10) != 0))
  {
    if (v11 == v12)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v13;
      *v4 = result;
    }
    else
    {
      *v4 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v9);
      else
        *result -= 2;
    }
  }
  else
  {
    *v4 = 0;
  }
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_15>(unint64_t result, WebCore::CSSParserTokenRange *a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v2 = (_QWORD *)result;
  if ((**(_BYTE **)a2 & 8) == 0)
    goto LABEL_4;
  v15 = *(_OWORD *)*((_QWORD *)a2 + 1);
  result = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v15, a2);
  v5 = v4;
  v6 = (__int128 *)result;
  if (result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) == 0)
  {
    if (result == v4)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v8 = 1;
      {
        v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      }
    }
    else
    {
      v7 = (__int128 *)result;
      result += 24;
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    do
    {
      if (result < v4 || (v8 & 1) != 0)
      {
        if (result >= v4)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v10 = (__int128 *)result;
        v11 = *(_DWORD *)v10;
      }
      else
      {
        v11 = v9 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
        v8 = 1;
        v9 = v11;
      }
      result += 24;
    }
    while ((v11 & 0x3F) == 0x10);
    v12 = result - 24;
    if ((*((_BYTE *)v7 + 2) & 0x40) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    result = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)result = 2;
    v14 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 0x2000;
    *(_BYTE *)(result + 6) = v14 & 0xFC;
    *(_QWORD *)(result + 8) = v16;
    *(_QWORD *)(result + 16) = 0;
    if (v12 == v5)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v15;
      *v2 = result;
    }
    else
    {
      *v2 = 0;
      if (*(_DWORD *)result == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_4:
    *v2 = 0;
  }
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_16>(unint64_t result, WebCore::CSSParserTokenRange *a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v2 = (_QWORD *)result;
  if ((**(_BYTE **)a2 & 8) == 0)
    goto LABEL_4;
  v15 = *(_OWORD *)*((_QWORD *)a2 + 1);
  result = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v15, a2);
  v5 = v4;
  v6 = (__int128 *)result;
  if (result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) == 0)
  {
    if (result == v4)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v8 = 1;
      {
        v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      }
    }
    else
    {
      v7 = (__int128 *)result;
      result += 24;
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    do
    {
      if (result < v4 || (v8 & 1) != 0)
      {
        if (result >= v4)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v10 = (__int128 *)result;
        v11 = *(_DWORD *)v10;
      }
      else
      {
        v11 = v9 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
        v8 = 1;
        v9 = v11;
      }
      result += 24;
    }
    while ((v11 & 0x3F) == 0x10);
    v12 = result - 24;
    if ((*((_BYTE *)v7 + 2) & 0x40) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    result = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)result = 2;
    v14 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 12288;
    *(_BYTE *)(result + 6) = v14 & 0xFC;
    *(_QWORD *)(result + 8) = v16;
    *(_QWORD *)(result + 16) = 0;
    if (v12 == v5)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v15;
      *v2 = result;
    }
    else
    {
      *v2 = 0;
      if (*(_DWORD *)result == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_4:
    *v2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_17>(uint64_t result, WebCore::CSSParserTokenRange *a2, unsigned __int8 *a3)
{
  _QWORD *v3;
  WebCore::CSSParserTokenRange *v6;
  __int128 *v7;
  WebCore::CSSParserTokenRange *v8;
  int *v9;
  WTF::StringImpl *v10;
  int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v14;
  int v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  int *v19;
  int *v20;

  v3 = (_QWORD *)result;
  if ((**(_BYTE **)a2 & 8) == 0)
    goto LABEL_23;
  v18 = *(_OWORD *)*((_QWORD *)a2 + 1);
  v7 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v18, a2);
  v16 = v7;
  v17 = (__int128 *)v6;
  if (v6 <= (WebCore::CSSParserTokenRange *)v7)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_4;
  v15 = *((_DWORD *)v7 + 4);
  if (v15 < 0)
  {
    v15 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v15;
  }
  if ((unsigned __int16)v15 != 6)
  {
LABEL_4:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeImage((uint64_t *)&v20, (WebCore::CSSPropertyParserHelpers *)&v16);
    v9 = v20;
    if (!v20)
    {
LABEL_23:
      *v3 = 0;
      return result;
    }
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v16, v6);
    if (result < 0x10000)
    {
      v9 = 0;
    }
    else
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        result = 92;
        __break(0xC471u);
        return result;
      }
      v9 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v9 += 2;
    }
    v20 = v9;
    if (!v9)
      goto LABEL_23;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v16, v8);
  if (!(_DWORD)result
    || (result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeFilter(&v16, a3, 0, &v19), (v11 = v19) == 0))
  {
    if (*v9 == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v10);
    else
      *v9 -= 2;
    goto LABEL_23;
  }
  v19 = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)v13 = 2;
  v14 = *(_BYTE *)(v13 + 6);
  *(_WORD *)(v13 + 4) = 0x4000;
  *(_BYTE *)(v13 + 6) = v14 & 0xFC;
  *(_QWORD *)(v13 + 8) = v9;
  *(_QWORD *)(v13 + 16) = v11;
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (v16 == v17)
  {
    *(_OWORD *)*((_QWORD *)a2 + 1) = v18;
    *v3 = v13;
  }
  else
  {
    *v3 = 0;
    if (*(_DWORD *)v13 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_18>(WTF::StringImpl *result, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  _QWORD *v3;
  WTF::StringImpl *v6;
  char *v7;
  char *v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;
  WebCore::CSSParserToken *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  WTF::StringImpl *v32;

  v3 = result;
  if ((**(_BYTE **)a2 & 8) == 0)
    goto LABEL_5;
  v28 = *(_OWORD *)*((_QWORD *)a2 + 1);
  result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v28, a2);
  if ((*(_WORD *)(a3 + 51) & 0x400) == 0)
    goto LABEL_5;
  v7 = (char *)result;
  v8 = (char *)v6;
  v9 = (__int128 *)result;
  if (result >= v6)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v9 & 0x3F) != 0)
    goto LABEL_5;
  if (result == v6)
  {
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v11 = 1;
    {
      v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
    }
  }
  else
  {
    v10 = (__int128 *)result;
    v7 = (char *)result + 24;
    v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v13 = (__int128 *)v7;
  do
  {
    v14 = v13;
    if (v13 < (__int128 *)v6 || (v11 & 1) != 0)
    {
      if (v13 >= (__int128 *)v6)
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v15 = *(_DWORD *)v13;
    }
    else
    {
      v15 = v12 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
      v11 = 1;
      v12 = v15;
    }
    v16 = v15 & 0x3F;
    v13 = (__int128 *)((char *)v14 + 24);
    v7 += 24;
  }
  while (v16 == 16);
  v17 = (char *)v14;
  if ((*((_BYTE *)v10 + 2) & 0x40) != 0)
    v18 = WTF::String::String();
  else
    v18 = WTF::String::String();
  if (v14 == (__int128 *)v8)
  {
    v7 = v8;
LABEL_24:
    v30 = (uint64_t)v7;
    v31 = v8;
    v22 = WebCore::strictCSSParserContext((WebCore *)v18);
    v23 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v23, (char **)&v30, (const WebCore::CSSParserContext *)v22);
    v24 = v32;
    if (v32)
      *(_DWORD *)v32 += 2;
    v30 = 0;
    v21 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v21 = 2;
    v25 = *(_BYTE *)(v21 + 6);
    *(_WORD *)(v21 + 4) = 10240;
    *(_BYTE *)(v21 + 6) = v25 & 0xFC;
    v29 = 0;
    *(_QWORD *)(v21 + 8) = v24;
    *(_QWORD *)(v21 + 16) = v23;
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v29, v26);
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v30, v27);
    v17 = v8;
    goto LABEL_27;
  }
  v19 = (WebCore::CSSParserToken *)v14;
  if (v14 >= (__int128 *)v8)
  {
    v19 = (WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v30 = 21;
  v31 = 0;
  v18 = WebCore::CSSParserToken::operator==(v19, (WebCore::CSSParserToken *)&v30);
  v21 = 0;
  if ((v18 & 1) != 0)
    goto LABEL_24;
LABEL_27:
  result = v32;
  v32 = 0;
  if (!result)
    goto LABEL_30;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_30:
    if (v21)
      goto LABEL_31;
LABEL_5:
    *v3 = 0;
    return result;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
  if (!v21)
    goto LABEL_5;
LABEL_31:
  if (v17 == v8)
  {
    *(_OWORD *)*((_QWORD *)a2 + 1) = v28;
    *v3 = v21;
  }
  else
  {
    *v3 = 0;
    if (*(_DWORD *)v21 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_1::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_19>(_DWORD *result, WebCore::CSSParserTokenRange *a2)
{
  _QWORD *v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = result;
  if ((**(_BYTE **)a2 & 4) != 0
    && (v9 = *(_OWORD *)*((_QWORD *)a2 + 1),
        v7 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v9, a2),
        v8 = v4,
        WebCore::CSSPropertyParserHelpers::consumeImageSet(&v6, (WebCore::CSSPropertyParserHelpers *)&v7),
        (result = v6) != 0))
  {
    if (v7 == v8)
    {
      *(_OWORD *)*((_QWORD *)a2 + 1) = v9;
      *v2 = result;
    }
    else
    {
      *v2 = 0;
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
      else
        *result -= 2;
    }
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeImageOrNone@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, char a3@<W2>, WTF::StringImpl *a4@<X8>)
{
  __int128 *v8;
  uint64_t result;
  int v10;
  int *v11;

  v8 = *this;
  if (*this >= this[1])
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeImage(a4, this, (uint64_t)a2, a3);
  v10 = *((_DWORD *)v8 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v10;
  }
  if ((unsigned __int16)v10 != 6)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeImage(a4, this, (uint64_t)a2, a3);
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if (result < 0x10000)
  {
    v11 = 0;
    goto LABEL_12;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v11 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v11 += 2;
LABEL_12:
    *(_QWORD *)a4 = v11;
    return result;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)902>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 902)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

_WORD *WTF::makeString<int,WTF::StringView>(_WORD *result, unsigned int a2, _WORD *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  size_t v17;
  unsigned int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _WORD *v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  _WORD *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[3];

  v4 = a4;
  v6 = a2;
  v7 = result;
  v34[2] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
  {
    v31 = -a2;
    v8 = 1;
    do
    {
      ++v8;
      v24 = v31 >= 0xA;
      v31 /= 0xAu;
    }
    while (v24);
  }
  else
  {
    v8 = 0;
    v9 = a2;
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v10);
  }
  if (((v8 | a4) & 0x80000000) != 0)
    goto LABEL_64;
  v11 = (v8 + a4);
  if (__OFADD__(v8, (_DWORD)a4))
    goto LABEL_64;
  if ((a4 & 0xFF00000000) == 0)
  {
    if ((_DWORD)v11)
    {
      if (v11 <= 0x7FFFFFEF)
      {
        result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v11 + 20));
        v12 = v34[0];
        if (v34[0])
        {
          v20 = v34[0] + 20;
          *(_DWORD *)v34[0] = 2;
          *(_DWORD *)(v12 + 4) = v11;
          *(_QWORD *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 0;
          if ((v6 & 0x80000000) != 0)
          {
            v25 = -v6;
            v26 = 12;
            do
            {
              *((_BYTE *)v34 + v26--) = (v25 % 0xA) | 0x30;
              v10 = v25 > 9;
              v25 /= 0xAu;
            }
            while (v10);
            *((_BYTE *)v34 + v26) = 45;
            if (v26 + 2 <= 14)
            {
              v27 = (_WORD *)(v12 + 20);
              do
              {
                *v27++ = *((unsigned __int8 *)v34 + v26);
                v10 = v26++ < 12;
              }
              while (v10);
            }
          }
          else
          {
            v21 = 0;
            v22 = v6;
            do
            {
              *((_BYTE *)&v34[1] + v21-- + 4) = (v22 % 0xA) | 0x30;
              v10 = v22 > 9;
              v22 /= 0xAu;
            }
            while (v10);
            if (v21 + 14 <= 13)
            {
              v23 = (_WORD *)(v12 + 20);
              do
              {
                *v23++ = *((unsigned __int8 *)&v34[1] + v21 + 5);
                v24 = __CFADD__(v21++, 1);
              }
              while (!v24);
            }
          }
          if ((v6 & 0x80000000) != 0)
          {
            v33 = -v6;
            v28 = 1;
            do
            {
              ++v28;
              v24 = v33 >= 0xA;
              v33 /= 0xAu;
            }
            while (v24);
          }
          else
          {
            v28 = 0;
            do
            {
              ++v28;
              v10 = v6 > 9;
              v6 /= 0xAu;
            }
            while (v10);
          }
          result = (_WORD *)(v20 + 2 * v28);
          if (v4 == 1)
          {
            *result = *a3;
            goto LABEL_44;
          }
          if (!v4)
            goto LABEL_44;
          v19 = 2 * v4;
LABEL_22:
          result = memcpy(result, a3, v19);
LABEL_44:
          *v7 = v12;
          return result;
        }
      }
      goto LABEL_64;
    }
LABEL_48:
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_44;
  }
  if (!(_DWORD)v11)
    goto LABEL_48;
  if ((v11 & 0x80000000) == 0)
  {
    result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    v12 = v34[0];
    if (v34[0])
    {
      v13 = v34[0] + 20;
      *(_DWORD *)v34[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      v14 = 0;
      if ((v6 & 0x80000000) != 0)
      {
        v29 = -v6;
        do
        {
          *((_BYTE *)&v34[1] + v14-- + 4) = (v29 % 0xA) | 0x30;
          v10 = v29 > 9;
          v29 /= 0xAu;
        }
        while (v10);
        v30 = v14 + 12;
        v16 = (char *)&v34[1] + v14 + 4;
        *v16 = 45;
        if (v14 + 14 <= 14)
        {
          if (v30 <= 12)
            v30 = 12;
          v17 = v30 - v14 - 11;
          goto LABEL_15;
        }
      }
      else
      {
        v15 = v6;
        do
        {
          *((_BYTE *)&v34[1] + v14-- + 4) = (v15 % 0xA) | 0x30;
          v10 = v15 > 9;
          v15 /= 0xAu;
        }
        while (v10);
        if (v14 + 14 <= 13)
        {
          v16 = (char *)&v34[1] + v14 + 5;
          v17 = -v14;
LABEL_15:
          result = memcpy((void *)(v12 + 20), v16, v17);
        }
      }
      if ((v6 & 0x80000000) != 0)
      {
        v32 = -v6;
        v18 = 1;
        do
        {
          ++v18;
          v24 = v32 >= 0xA;
          v32 /= 0xAu;
        }
        while (v24);
      }
      else
      {
        v18 = 0;
        do
        {
          ++v18;
          v10 = v6 > 9;
          v6 /= 0xAu;
        }
        while (v10);
      }
      if (!v4)
        goto LABEL_44;
      result = (_WORD *)(v13 + v18);
      if (v4 == 1)
      {
        *(_BYTE *)result = *(_BYTE *)a3;
        goto LABEL_44;
      }
      v19 = v4;
      goto LABEL_22;
    }
  }
LABEL_64:
  *v7 = 0;
  __break(0xC471u);
  return result;
}

char *WTF::makeString<std::span<unsigned char const,18446744073709551615ul>,WTF::String>(char *result, int8x16_t *a2, size_t a3, uint64_t a4)
{
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  _OWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  char *v36;
  unsigned __int128 v37;
  char v38;
  uint64_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  if (a3 >> 31)
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  v7 = result;
  if (a4)
    v8 = *(_DWORD *)(a4 + 4);
  else
    v8 = 0;
  if (((v8 | a3) & 0x80000000) != 0)
    goto LABEL_53;
  v9 = (a3 + v8);
  if (__OFADD__((_DWORD)a3, v8))
    goto LABEL_53;
  if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if ((_DWORD)v9)
    {
      if (v9 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v9 + 20));
        v10 = v39;
        if (v39)
        {
          v11 = (char *)(v39 + 20);
          *(_DWORD *)v39 = 2;
          *(_DWORD *)(v39 + 4) = v9;
          *(_QWORD *)(v39 + 8) = v39 + 20;
          *(_DWORD *)(v39 + 16) = 0;
          result = (char *)(v39 + 20 + 2 * a3);
          if ((a3 & 0xFFFFFFC0) != 0)
          {
            v12 = &v11[2 * (a3 & 0xFFFFFFC0)];
            v13 = 0uLL;
            do
            {
              v40.val[0] = *a2;
              v14 = a2[1];
              v42.val[0] = a2[2];
              v15 = a2[3];
              a2 += 4;
              v16 = v15;
              v42.val[1] = 0uLL;
              v44.val[0] = v14;
              v40.val[1] = 0uLL;
              v17 = v11;
              vst2q_s8(v17, v40);
              v17 += 32;
              v44.val[1] = 0uLL;
              vst2q_s8(v17, v44);
              v18 = v11 + 64;
              vst2q_s8(v18, v42);
              v19 = v11 + 96;
              vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
              v11 += 128;
            }
            while (v11 != v12);
            v11 = v12;
          }
          while (v11 != result)
          {
            v20 = a2->u8[0];
            a2 = (int8x16_t *)((char *)a2 + 1);
            *(_WORD *)v11 = v20;
            v11 += 2;
          }
          v21 = *(_OWORD **)(a4 + 8);
          v22 = *(unsigned int *)(a4 + 4);
          if ((*(_BYTE *)(a4 + 16) & 4) == 0)
          {
            if ((_DWORD)v22 == 1)
            {
              *(_WORD *)result = *(_WORD *)v21;
              goto LABEL_37;
            }
            if (!(_DWORD)v22)
              goto LABEL_37;
            v24 = 2 * v22;
LABEL_30:
            result = (char *)memcpy(result, v21, v24);
            goto LABEL_37;
          }
          v25 = &result[2 * v22];
          if (v22 >= 0x40)
          {
            v26 = &result[2 * (v22 & 0xFFFFFFC0)];
            v27 = 0uLL;
            do
            {
              v41.val[0] = (int8x16_t)*v21;
              v28 = *((int8x16_t *)v21 + 1);
              v43.val[0] = (int8x16_t)v21[2];
              v29 = v21[3];
              v21 += 4;
              v30 = v29;
              v43.val[1] = 0uLL;
              v45.val[0] = v28;
              v41.val[1] = 0uLL;
              v31 = result;
              vst2q_s8(v31, v41);
              v31 += 32;
              v45.val[1] = 0uLL;
              vst2q_s8(v31, v45);
              v32 = result + 64;
              vst2q_s8(v32, v43);
              v33 = result + 96;
              vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
              result += 128;
            }
            while (result != v26);
            result = v26;
          }
          while (result != v25)
          {
            v34 = *(unsigned __int8 *)v21;
            v21 = (_OWORD *)((char *)v21 + 1);
            *(_WORD *)result = v34;
            result += 2;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_53;
    }
LABEL_45:
    v10 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_37;
  }
  if (!(_DWORD)v9)
    goto LABEL_45;
  if ((v9 & 0x80000000) != 0 || (result = (char *)WTF::tryFastCompactMalloc((WTF *)(v9 + 20)), (v10 = v39) == 0))
  {
LABEL_53:
    *(_QWORD *)v7 = 0;
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x195897D54);
  }
  v23 = (_BYTE *)(v39 + 20);
  *(_DWORD *)v39 = 2;
  *(_DWORD *)(v39 + 4) = v9;
  *(_QWORD *)(v39 + 8) = v39 + 20;
  *(_DWORD *)(v39 + 16) = 4;
  if (!(_DWORD)a3)
    goto LABEL_26;
  if ((_DWORD)a3 != 1)
  {
    result = (char *)memcpy((void *)(v39 + 20), a2, a3);
LABEL_26:
    if (!a4)
      goto LABEL_37;
    goto LABEL_27;
  }
  *v23 = a2->i8[0];
  if (!a4)
    goto LABEL_37;
LABEL_27:
  result = &v23[a3];
  v21 = *(_OWORD **)(a4 + 8);
  v24 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    if (!(_DWORD)v24)
      goto LABEL_37;
    if ((_DWORD)v24 == 1)
    {
      *result = *(_BYTE *)v21;
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  v35 = &result[v24];
  if (v24 >= 0x10)
  {
    v36 = &result[v24 & 0xFFFFFFF0];
    do
    {
      v37 = (unsigned __int128)vld2q_s8((const char *)v21);
      v21 += 2;
      *(_OWORD *)result = v37;
      result += 16;
    }
    while (result != v36);
    result = v36;
  }
  while (result != v35)
  {
    v38 = *(_BYTE *)v21;
    v21 = (_OWORD *)((char *)v21 + 2);
    *result++ = v38;
  }
LABEL_37:
  *(_QWORD *)v7 = v10;
  return result;
}

uint64_t std::optional<WebCore::CSSUnresolvedColor>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v3 = *(unsigned int *)(a1 + 88);
      v4 = *(unsigned int *)(a2 + 88);
      if ((_DWORD)v3 == -1)
      {
        if ((_DWORD)v4 == -1)
          return a1;
      }
      else if ((_DWORD)v4 == -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E339BFF8[v3])(&v9, a1, a2);
        *(_DWORD *)(a1 + 88) = -1;
        return a1;
      }
      v8 = a1;
      ((void (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E339C0C8 + v4))(&v8, a1, a2);
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    v5 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v5])(&v11, a1, a2);
    *(_DWORD *)(a1 + 88) = -1;
    *(_BYTE *)(a1 + 96) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 88) = -1;
    v6 = *(unsigned int *)(a2 + 88);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E339D698[v6])(&v10, a1, a2);
      *(_DWORD *)(a1 + 88) = v6;
    }
    *(_BYTE *)(a1 + 96) = 1;
  }
  return a1;
}

void WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::HWBFunction>(uint64_t a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t v37;
  uint64_t (**v38)();
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  float v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  int v49;
  int v50;
  uint64_t v51;
  __int32 v52;
  int v53;
  int v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned __int16 *v67;
  int v68;
  uint64_t v69;
  unsigned __int16 *v70;
  int v71;
  char v72;
  unsigned int v73;
  __int128 *v74;
  int v75;
  uint64_t v76;
  int v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  WTF *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int *v92;
  uint64_t v93;
  void *v94;
  unsigned int *v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  __int128 *v99;
  int v100;
  uint64_t v101;
  int8x8_t v102;
  int v103;
  int v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  WTF *v116[2];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (**v121)();
  unint64_t v122;
  uint64_t (**v123)();
  uint64_t v124;
  char v125;
  char v126;
  __int128 *v127;
  __int128 *v128;
  unsigned __int16 **v129;
  int v130;
  int v131;
  char v132[8];
  unsigned int v133;
  char v134[8];
  unsigned int v135;
  char v136[8];
  unsigned int v137;
  char v138;
  unsigned int v139;
  int v140;
  char v141;
  uint64_t v142;
  int v143;
  int v144;
  int8x8_t v145;
  unsigned __int16 *v146;
  int v147;
  unsigned __int8 v148;
  unsigned __int16 *v149;
  int v150;
  char v151;
  unsigned __int16 **v152;
  int v153;
  char v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  char v158;
  unsigned __int16 *v159;
  unsigned __int16 *v160;
  unsigned __int16 *v161;
  unsigned __int16 *v162;
  float v163;
  int v164;
  unsigned __int16 **v165;
  int v166;
  int v167;
  WTF *v168;
  int v169;
  __int16 v170;
  char v171[2];
  int v172;
  int v173;
  char v174[8];
  int v175;
  char v176[8];
  int v177;
  char v178[8];
  int v179;
  char v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v127 = v6;
  v128 = (__int128 *)v5;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 779)
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(a3 + 4);
    v152 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v129, &v127, (unsigned __int16 **)&v152, v7 | 0x10100000000);
    if (v152)
      WTF::fastFree((WTF *)(v152 - 2), v8);
    if (v132[0])
    {
      if (v131 == -1)
        goto LABEL_349;
      *(_QWORD *)&v155 = &v149;
      ((void (*)(WTF **__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C558[v131])(v116, &v155, &v129);
      LOBYTE(v168) = 0;
      v172 = -1;
      v9 = v117;
      if ((_DWORD)v117 == -1)
      {
        LOBYTE(v173) = 1;
      }
      else
      {
        ((void (*)(__int128 *, WTF **, WTF **))off_1E339C470[v117])(&v155, &v168, v116);
        v172 = v9;
        LOBYTE(v173) = 1;
        if ((_DWORD)v117 != -1)
          ((void (*)(__int128 *, WTF **))off_1E339C448[v117])(&v155, v116);
      }
      if (v132[0] && v131 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339C448[v131])(v116, &v129);
    }
    else
    {
      LOBYTE(v168) = 0;
      LOBYTE(v173) = 0;
    }
    if (!(_BYTE)v173)
    {
LABEL_292:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    }
    LOBYTE(v142) = 0;
    v144 = -1;
    v10 = v172;
    if (v172 != -1)
    {
      ((void (*)(unsigned __int16 ***, uint64_t *, WTF **))off_1E339C470[v172])(&v129, &v142, &v168);
      v144 = v10;
    }
    v11 = *(unsigned __int8 *)(a3 + 4);
    v149 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v129, (uint64_t)&v127, &v149, v11 | 0x10100000000);
    if (v149)
      WTF::fastFree((WTF *)(v149 - 8), v12);
    if ((_BYTE)v131)
    {
      if (v130 == -1)
        goto LABEL_349;
      *(_QWORD *)&v155 = &v152;
      ((void (*)(WTF **__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C580[v130])(v116, &v155, &v129);
      LOBYTE(v152) = 0;
      v153 = -1;
      v13 = (int)v116[1];
      if (LODWORD(v116[1]) == -1)
      {
        v154 = 1;
      }
      else
      {
        ((void (*)(__int128 *, unsigned __int16 ***, WTF **))off_1E339BFD0[LODWORD(v116[1])])(&v155, &v152, v116);
        v153 = v13;
        v154 = 1;
        if (LODWORD(v116[1]) != -1)
          ((void (*)(__int128 *, WTF **))off_1E339BEF8[LODWORD(v116[1])])(&v155, v116);
      }
      if ((_BYTE)v131 && v130 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v130])(v116, &v129);
    }
    else
    {
      LOBYTE(v152) = 0;
      v154 = 0;
    }
    if (!v154)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_117;
    }
    v14 = *(unsigned __int8 *)(a3 + 4);
    v146 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v129, (uint64_t)&v127, &v146, v14 | 0x10100000000);
    if (v146)
      WTF::fastFree((WTF *)(v146 - 8), v15);
    if ((_BYTE)v131)
    {
      if (v130 == -1)
        goto LABEL_349;
      *(_QWORD *)&v155 = &v149;
      ((void (*)(WTF **__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C5A8[v130])(v116, &v155, &v129);
      LOBYTE(v149) = 0;
      v150 = -1;
      v16 = (int)v116[1];
      if (LODWORD(v116[1]) == -1)
      {
        v151 = 1;
      }
      else
      {
        ((void (*)(__int128 *, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v116[1])])(&v155, &v149, v116);
        v150 = v16;
        v151 = 1;
        if (LODWORD(v116[1]) != -1)
          ((void (*)(__int128 *, WTF **))off_1E339BEF8[LODWORD(v116[1])])(&v155, v116);
      }
      if ((_BYTE)v131 && v130 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v130])(v116, &v129);
    }
    else
    {
      LOBYTE(v149) = 0;
      v151 = 0;
    }
    if (!v151)
    {
      v17 = 0;
      v18 = 0;
LABEL_114:
      if (v154 && v153 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v153])(&v129, &v152);
LABEL_117:
      if (v144 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339C448[v144])(&v129, &v142);
      v144 = -1;
      if ((_BYTE)v173)
      {
        if (v172 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339C448[v172])(&v129, &v168);
      }
      if (v17)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 88) = 0;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_292;
    }
    LOBYTE(v146) = 0;
    v148 = 0;
    v23 = v127;
    v24 = v128;
    v25 = v127;
    if (v127 >= v128)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v26 = 0;
    if ((*(_DWORD *)v25 & 0x3F) != 6 || *((_WORD *)v25 + 8) != 47)
      goto LABEL_61;
    if (v127 == v128)
    {
      v73 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v72 = 1;
      {
        v73 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v73;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v127 + 24);
      v127 = (__int128 *)((char *)v127 + 24);
      v73 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v23 < v128 || (v72 & 1) != 0)
      {
        v74 = v23 >= v128 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v75 = *(_DWORD *)v74;
      }
      else
      {
        v73 = v73 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v73;
        v72 = 1;
        LOBYTE(v75) = v73;
      }
      if ((v75 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v127 = v23;
    }
    v76 = *(unsigned __int8 *)(a3 + 4);
    v165 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v129, (uint64_t)&v127, (unsigned __int16 **)&v165, v76 | 0x10100000000);
    if (v165)
      WTF::fastFree((WTF *)(v165 - 2), v15);
    if ((_BYTE)v131)
    {
      if (v130 == -1)
        goto LABEL_349;
      v116[0] = (WTF *)&v162;
      ((void (*)(__int128 *__return_ptr, WTF **, unsigned __int16 ***))off_1E339C5D0[v130])(&v155, v116, &v129);
      LOBYTE(v116[0]) = 0;
      LODWORD(v116[1]) = -1;
      v77 = DWORD2(v155);
      if (DWORD2(v155) == -1)
      {
        LOBYTE(v117) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, WTF **, __int128 *))off_1E339BFD0[DWORD2(v155)])(&v162, v116, &v155);
        LODWORD(v116[1]) = v77;
        LOBYTE(v117) = 1;
        if (DWORD2(v155) != -1)
          ((void (*)(unsigned __int16 **, __int128 *))off_1E339BEF8[DWORD2(v155)])(&v162, &v155);
      }
      if ((_BYTE)v131 && v130 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BEF8[v130])(&v155, &v129);
    }
    else
    {
      LOBYTE(v116[0]) = 0;
      LOBYTE(v117) = 0;
    }
    if (v148 != v117)
    {
      if (v148)
      {
        if (v147 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v147])(&v129, &v146);
        v147 = -1;
        v148 = 0;
      }
      else
      {
        LOBYTE(v146) = 0;
        v147 = -1;
        v91 = (int)v116[1];
        if (LODWORD(v116[1]) != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v116[1])])(&v129, &v146, v116);
          v147 = v91;
        }
        v148 = 1;
      }
      goto LABEL_296;
    }
    if (!v148)
    {
LABEL_299:
      if (!v148)
      {
        v18 = 0;
        v17 = 0;
LABEL_111:
        if (v151 && v150 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v150])(&v129, &v149);
        goto LABEL_114;
      }
      v26 = 1;
      v23 = v127;
      v24 = v128;
LABEL_61:
      if (v23 == v24)
      {
        if (!v154 || !v151)
          goto LABEL_320;
        LOBYTE(v129) = 0;
        v131 = -1;
        v27 = v144;
        if (v144 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, uint64_t *))off_1E339C470[v144])(v116, &v129, &v142);
          v131 = v27;
        }
        v132[0] = 0;
        v133 = -1;
        v28 = v153;
        if (v153 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v153])(v116, v132, &v152);
          v133 = v28;
        }
        v134[0] = 0;
        v135 = -1;
        v29 = v150;
        if (v150 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BFD0[v150])(v116, v134, &v149);
          v135 = v29;
        }
        v136[0] = 0;
        v138 = 0;
        if (v148)
        {
          v137 = -1;
          v30 = v147;
          if (v147 != -1)
          {
            ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BFD0[v147])(v116, v136, &v146);
            v137 = v30;
          }
          v138 = 1;
        }
        v139 = *(_DWORD *)(a3 + 8);
        v162 = 0;
        v165 = &v162;
        if (v131 == -1)
          goto LABEL_349;
        *(_QWORD *)&v155 = &v165;
        ((void (*)(WTF **__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C420[v131])(v116, &v155, &v129);
        v161 = 0;
        v165 = &v161;
        if (v133 == -1
          || (*(_QWORD *)&v155 = &v165,
              v31 = &off_1E339BF48,
              v32 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v133))(&v155, v132),
              v160 = 0,
              v165 = &v160,
              v135 == -1))
        {
LABEL_349:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v34 = v32;
        v35 = v33;
        *(_QWORD *)&v155 = &v165;
        v37 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v135))(&v155, v134);
        v38 = v36;
        v159 = 0;
        if (v138)
        {
          v165 = &v159;
          if (v137 == -1)
            goto LABEL_349;
          *(_QWORD *)&v155 = &v165;
          v39 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v137))(&v155, v136);
          v31 = v36;
          v40 = v39 & 0xFFFFFFFFFFFFFF00;
          v41 = v39;
          v155 = *(_OWORD *)v116;
          v156 = v117;
          if (v159)
          {
            v111 = v39;
            v115 = v39 & 0xFFFFFFFFFFFFFF00;
            WTF::fastFree((WTF *)(v159 - 8), v36);
            v41 = v111;
            v40 = v115;
          }
          v42 = 1;
        }
        else
        {
          v42 = 0;
          v40 = 0;
          v41 = 0;
          v155 = *(_OWORD *)v116;
          v156 = v117;
        }
        if (v160)
        {
          v108 = v41;
          v112 = v40;
          v105 = v42;
          WTF::fastFree((WTF *)(v160 - 8), v36);
          v42 = v105;
          v41 = v108;
          v40 = v112;
        }
        if (v161)
        {
          v109 = v41;
          v113 = v40;
          v106 = v42;
          WTF::fastFree((WTF *)(v161 - 8), v36);
          v42 = v106;
          v41 = v109;
          v40 = v113;
        }
        if (v162)
        {
          v110 = v41;
          v114 = v40;
          v107 = v42;
          WTF::fastFree((WTF *)(v162 - 8), v36);
          v42 = v107;
          v41 = v110;
          v40 = v114;
        }
        *(_OWORD *)v116 = v155;
        v117 = v156;
        v118 = v34;
        v119 = v35;
        v120 = v37;
        v121 = v38;
        v122 = v41 | v40;
        v123 = v31;
        LOBYTE(v124) = v42;
        *(_DWORD *)((char *)&v124 + 1) = (_DWORD)v161;
        HIDWORD(v124) = *(_DWORD *)((char *)&v161 + 3);
        WebCore::convertToTypedColor<WebCore::HWBFunction>((uint64_t)v116);
        v46 = v45;
        v47 = v43;
        v48 = v44;
        v50 = v49;
        v162 = (unsigned __int16 *)__PAIR64__(LODWORD(v43), v45);
        v163 = v44;
        v164 = v49;
        if (v43 >= 0.0 && v43 <= 100.0 && v44 >= 0.0 && v44 <= 100.0 && v139 < 2)
        {
          LODWORD(v165) = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v162);
          HIDWORD(v165) = v52;
          v166 = v53;
          v167 = v54;
          v55 = llroundf(WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((int8x8_t *)&v165)* 255.0);
          v59 = 255;
          if (v55 >= 255)
            v55 = 255;
          v60 = v55 & ~(v55 >> 63);
          v61 = llroundf(v56 * 255.0);
          if (v61 >= 255)
            v61 = 255;
          v62 = v61 & ~(v61 >> 63);
          v63 = llroundf(v57 * 255.0);
          if (v63 >= 255)
            v63 = 255;
          v64 = llroundf(v58 * 255.0);
          v65 = v63 & ~(v63 >> 63);
          if (v64 < 255)
            v59 = v64;
          v18 = bswap32((v65 << 16) | ((v59 & ~(v59 >> 63)) << 24) | (v62 << 8) | v60) | 0x1104000000000000;
        }
        else
        {
          v51 = WTF::fastMalloc((WTF *)0x14);
          *(_DWORD *)v51 = 1;
          *(_DWORD *)(v51 + 4) = v46;
          *(float *)(v51 + 8) = v47;
          v18 = v51 | 0x90C000000000000;
          *(float *)(v51 + 12) = v48;
          *(_DWORD *)(v51 + 16) = v50;
        }
        if (v138)
        {
          if (v137 != -1)
            ((void (*)(WTF **, char *))off_1E339BEF8[v137])(v116, v136);
          v137 = -1;
        }
        if (v135 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v135])(v116, v134);
        v135 = -1;
        if (v133 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v133])(v116, v132);
        v133 = -1;
        if (v131 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339C448[v131])(v116, &v129);
        v17 = 1;
        if (!v148)
          goto LABEL_111;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        if (!v26)
          goto LABEL_111;
      }
      if (v147 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v147])(&v129, &v146);
      goto LABEL_111;
    }
    if (v147 == -1)
    {
      if (LODWORD(v116[1]) == -1)
        goto LABEL_296;
    }
    else if (LODWORD(v116[1]) == -1)
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v147])(&v129, &v146);
      v147 = -1;
LABEL_296:
      if ((_BYTE)v117 && LODWORD(v116[1]) != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v116[1])])(&v129, v116);
      goto LABEL_299;
    }
    v129 = &v146;
    ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BF20[LODWORD(v116[1])])(&v129, &v146, v116);
    goto LABEL_296;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v127, v5);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)&v129, (WebCore::CSSPropertyParserHelpers *)&v127);
  if (!v141)
  {
    LOBYTE(v116[0]) = 0;
    v126 = 0;
    goto LABEL_274;
  }
  LOWORD(v168) = 834;
  BYTE2(v168) = 1;
  WORD2(v168) = 837;
  BYTE6(v168) = 1;
  LOWORD(v169) = 833;
  BYTE2(v169) = 1;
  v170 = 126;
  v171[0] = 1;
  v162 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v162, &v168, (_BYTE *)&v168 + 2, (uint64_t)v116);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v162, (_WORD *)&v168 + 2, (_BYTE *)&v168 + 6, (uint64_t)v116);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v162, &v169, (_BYTE *)&v169 + 2, (uint64_t)v116);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v162, &v170, v171, (uint64_t)v116);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v161, &v162);
  v20 = *(unsigned __int8 *)(a3 + 4);
  v21 = v161;
  v161 = 0;
  v152 = (unsigned __int16 **)v21;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v116, (uint64_t)&v127, (unsigned __int16 **)&v152, v20 | 0x10100000000);
  if (v152)
    WTF::fastFree((WTF *)(v152 - 2), v15);
  if ((_BYTE)v118)
  {
    if ((_DWORD)v117 == -1)
      goto LABEL_349;
    *(_QWORD *)&v155 = &v149;
    ((void (*)(WTF **__return_ptr, __int128 *, WTF **))off_1E339C498[v117])(&v168, &v155, v116);
    LOBYTE(v155) = 0;
    LODWORD(v156) = -1;
    v22 = v172;
    if (v172 == -1)
    {
      v157 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **, __int128 *, WTF **))off_1E339C1A8[v172])(&v149, &v155, &v168);
      LODWORD(v156) = v22;
      v157 = 1;
      if (v172 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339C098[v172])(&v149, &v168);
    }
    if ((_BYTE)v118 && (_DWORD)v117 != -1)
      ((void (*)(WTF **, WTF **))off_1E339C098[v117])(&v168, v116);
  }
  else
  {
    LOBYTE(v155) = 0;
    v157 = 0;
  }
  if (v161)
    WTF::fastFree((WTF *)(v161 - 8), v15);
  if (!v157)
  {
    LOBYTE(v116[0]) = 0;
    v126 = 0;
    goto LABEL_269;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v160, &v162);
  v66 = *(unsigned __int8 *)(a3 + 4);
  v67 = v160;
  v160 = 0;
  v149 = v67;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v116, (uint64_t)&v127, &v149, v66 | 0x10100000000);
  if (v149)
    WTF::fastFree((WTF *)(v149 - 8), v15);
  if ((_BYTE)v117)
  {
    if (LODWORD(v116[1]) == -1)
      goto LABEL_349;
    v152 = &v146;
    ((void (*)(WTF **__return_ptr, unsigned __int16 ***, WTF **))off_1E339C4C8[LODWORD(v116[1])])(&v168, &v152, v116);
    LOBYTE(v152) = 0;
    v153 = -1;
    v68 = v169;
    if (v169 == -1)
    {
      v154 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 ***, WTF **))off_1E339BB90[v169])(&v146, &v152, &v168);
      v153 = v68;
      v154 = 1;
      if (v169 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339BB60[v169])(&v146, &v168);
    }
    if ((_BYTE)v117 && LODWORD(v116[1]) != -1)
      ((void (*)(WTF **, WTF **))off_1E339BB60[LODWORD(v116[1])])(&v168, v116);
  }
  else
  {
    LOBYTE(v152) = 0;
    v154 = 0;
  }
  if (v160)
    WTF::fastFree((WTF *)(v160 - 8), v15);
  if (!v154)
  {
    LOBYTE(v116[0]) = 0;
    v126 = 0;
    goto LABEL_266;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v159, &v162);
  v69 = *(unsigned __int8 *)(a3 + 4);
  v70 = v159;
  v159 = 0;
  v146 = v70;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v116, (uint64_t)&v127, &v146, v69 | 0x10100000000);
  if (v146)
    WTF::fastFree((WTF *)(v146 - 8), v15);
  if ((_BYTE)v117)
  {
    if (LODWORD(v116[1]) == -1)
      goto LABEL_349;
    v149 = (unsigned __int16 *)&v142;
    ((void (*)(WTF **__return_ptr, unsigned __int16 **, WTF **))off_1E339C4F8[LODWORD(v116[1])])(&v168, &v149, v116);
    LOBYTE(v149) = 0;
    v150 = -1;
    v71 = v169;
    if (v169 == -1)
    {
      v151 = 1;
    }
    else
    {
      ((void (*)(uint64_t *, unsigned __int16 **, WTF **))off_1E339BB90[v169])(&v142, &v149, &v168);
      v150 = v71;
      v151 = 1;
      if (v169 != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[v169])(&v142, &v168);
    }
    if ((_BYTE)v117 && LODWORD(v116[1]) != -1)
      ((void (*)(WTF **, WTF **))off_1E339BB60[LODWORD(v116[1])])(&v168, v116);
  }
  else
  {
    LOBYTE(v149) = 0;
    v151 = 0;
  }
  if (v159)
    WTF::fastFree((WTF *)(v159 - 8), v15);
  if (!v151)
  {
    LOBYTE(v116[0]) = 0;
    v126 = 0;
    goto LABEL_263;
  }
  LOBYTE(v146) = 0;
  v148 = 0;
  v78 = v127;
  v79 = v128;
  v80 = v127;
  if (v127 >= v128)
  {
    v80 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v81 = 0;
  if ((*(_DWORD *)v80 & 0x3F) == 6 && *((_WORD *)v80 + 8) == 47)
  {
    if (v127 == v128)
    {
      v98 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v97 = 1;
      {
        v98 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v98;
      }
    }
    else
    {
      v78 = (__int128 *)((char *)v127 + 24);
      v127 = (__int128 *)((char *)v127 + 24);
      v98 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v78 < v128 || (v97 & 1) != 0)
      {
        v99 = v78 >= v128 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v78;
        v100 = *(_DWORD *)v99;
      }
      else
      {
        v98 = v98 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v98;
        v97 = 1;
        LOBYTE(v100) = v98;
      }
      if ((v100 & 0x3F) != 0x10)
        break;
      v78 = (__int128 *)((char *)v78 + 24);
      v127 = v78;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v145, &v162);
    v101 = *(unsigned __int8 *)(a3 + 4);
    v102 = v145;
    v145 = 0;
    v165 = (unsigned __int16 **)v102;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v116, (uint64_t)&v127, (unsigned __int16 **)&v165, v101 | 0x10100000000);
    if (v165)
      WTF::fastFree((WTF *)(v165 - 2), v15);
    if (!(_BYTE)v117)
      goto LABEL_321;
    if (LODWORD(v116[1]) != -1)
    {
      v168 = (WTF *)&v158;
      ((void (*)(uint64_t *__return_ptr, WTF **, WTF **))off_1E339C528[LODWORD(v116[1])])(&v142, &v168, v116);
      LOBYTE(v168) = 0;
      v169 = -1;
      v103 = v143;
      if (v143 == -1)
      {
        LOBYTE(v172) = 1;
      }
      else
      {
        ((void (*)(char *, WTF **, uint64_t *))off_1E339BB90[v143])(&v158, &v168, &v142);
        v169 = v103;
        LOBYTE(v172) = 1;
        if (v143 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v143])(&v158, &v142);
      }
      if ((_BYTE)v117 && LODWORD(v116[1]) != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[LODWORD(v116[1])])(&v142, v116);
      goto LABEL_326;
    }
    goto LABEL_349;
  }
  while (1)
  {
    if (v78 != v79)
    {
      LOBYTE(v116[0]) = 0;
      v126 = 0;
      goto LABEL_257;
    }
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v168, (uint64_t)&v129);
    if (v157)
    {
      if (v154 && v151)
        break;
    }
LABEL_320:
    __break(1u);
LABEL_321:
    LOBYTE(v168) = 0;
    LOBYTE(v172) = 0;
LABEL_326:
    if (v148 != v172)
    {
      if (v148)
      {
        if (v147 != -1)
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v147])(v116, &v146);
        v147 = -1;
        v148 = 0;
      }
      else
      {
        LOBYTE(v146) = 0;
        v147 = -1;
        v104 = v169;
        if (v169 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 **, WTF **))off_1E339BB90[v169])(v116, &v146, &v168);
          v147 = v104;
        }
        v148 = 1;
      }
      goto LABEL_340;
    }
    if (!v148)
      goto LABEL_344;
    if (v147 == -1)
    {
      if (v169 == -1)
        goto LABEL_340;
    }
    else if (v169 == -1)
    {
      ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v147])(v116, &v146);
      v147 = -1;
      goto LABEL_340;
    }
    v116[0] = (WTF *)&v146;
    ((void (*)(WTF **, unsigned __int16 **, WTF **))off_1E339BC80[v169])(v116, &v146, &v168);
LABEL_340:
    if ((_BYTE)v172)
    {
      if (v169 != -1)
        ((void (*)(WTF **, WTF **))off_1E339BB60[v169])(v116, &v168);
      v169 = -1;
    }
LABEL_344:
    if (v145)
      WTF::fastFree((WTF *)(*(_QWORD *)&v145 - 16), v15);
    if (!v148)
    {
      LOBYTE(v116[0]) = 0;
      v126 = 0;
      goto LABEL_260;
    }
    v81 = 1;
    v78 = v127;
    v79 = v128;
  }
  LOBYTE(v169) = 0;
  v173 = -1;
  v82 = v156;
  if ((_DWORD)v156 != -1)
  {
    ((void (*)(WTF **, int *, __int128 *))off_1E339C1A8[v156])(v116, &v169, &v155);
    v173 = v82;
  }
  v174[0] = 0;
  v175 = -1;
  v83 = v153;
  if (v153 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BB90[v153])(v116, v174, &v152);
    v175 = v83;
  }
  v176[0] = 0;
  v177 = -1;
  v84 = v150;
  if (v150 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v150])(v116, v176, &v149);
    v177 = v84;
  }
  v178[0] = 0;
  v180 = 0;
  if (v148)
  {
    v179 = -1;
    v85 = v147;
    if (v147 != -1)
    {
      ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v147])(v116, v178, &v146);
      v179 = v85;
    }
    v180 = 1;
  }
  v86 = v168;
  v168 = 0;
  v116[0] = v86;
  LOBYTE(v116[1]) = 0;
  LODWORD(v118) = -1;
  v87 = v173;
  if (v173 != -1)
  {
    ((void (*)(uint64_t *, WTF **, int *))off_1E339C1A8[v173])(&v142, &v116[1], &v169);
    LODWORD(v118) = v87;
  }
  LOBYTE(v119) = 0;
  LODWORD(v120) = -1;
  v88 = v175;
  if (v175 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, char *))off_1E339BB90[v175])(&v142, &v119, v174);
    LODWORD(v120) = v88;
  }
  LOBYTE(v121) = 0;
  LODWORD(v122) = -1;
  v89 = v177;
  if (v177 != -1)
  {
    ((void (*)(uint64_t *, uint64_t (***)(), char *))off_1E339BB90[v177])(&v142, &v121, v176);
    LODWORD(v122) = v89;
  }
  LOBYTE(v123) = 0;
  v125 = 0;
  if (v180)
  {
    LODWORD(v124) = -1;
    v90 = v179;
    if (v179 == -1)
    {
      v125 = 1;
      v126 = 1;
      goto LABEL_245;
    }
    ((void (*)(uint64_t *, uint64_t (***)(), char *))off_1E339BB90[v179])(&v142, &v123, v178);
    LODWORD(v124) = v90;
    v125 = 1;
    v126 = 1;
    if (v180)
    {
      if (v179 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v179])(&v142, v178);
LABEL_245:
      v179 = -1;
    }
  }
  else
  {
    v126 = 1;
  }
  if (v177 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v177])(&v142, v176);
  v177 = -1;
  if (v175 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v175])(&v142, v174);
  v175 = -1;
  if (v173 != -1)
    ((void (*)(uint64_t *, int *))off_1E339C098[v173])(&v142, &v169);
  v173 = -1;
  v92 = (unsigned int *)v168;
  v168 = 0;
  if (v92)
  {
    v93 = v92[22];
    if ((_DWORD)v93 != -1)
      ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v93])(&v142, v92);
    v92[22] = -1;
    WTF::fastFree((WTF *)v92, v15);
  }
  v81 = v148;
LABEL_257:
  if (v81 && v147 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v147])(&v168, &v146);
LABEL_260:
  if (v151 && v150 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v150])(&v168, &v149);
LABEL_263:
  if (v154 && v153 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v153])(&v168, &v152);
LABEL_266:
  if (v157 && (_DWORD)v156 != -1)
    ((void (*)(WTF **, __int128 *))off_1E339C098[v156])(&v168, &v155);
LABEL_269:
  if (v162)
    WTF::fastFree((WTF *)(v162 - 8), v15);
  if (v141 && v140 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v140])(&v168, &v129);
LABEL_274:
  if (!v126)
    goto LABEL_292;
  std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)&v129, (uint64_t *)v116);
  v140 = 7;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(a1, (uint64_t *)&v129);
  *(_DWORD *)(a1 + 88) = 7;
  *(_BYTE *)(a1 + 96) = 1;
  if (v140 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v140])(&v168, &v129);
  if (v126)
  {
    if (v125)
    {
      if ((_DWORD)v124 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t (***)()))off_1E339BB60[v124])(&v129, &v123);
      LODWORD(v124) = -1;
    }
    if ((_DWORD)v122 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t (***)()))off_1E339BB60[v122])(&v129, &v121);
    LODWORD(v122) = -1;
    if ((_DWORD)v120 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v120])(&v129, &v119);
    LODWORD(v120) = -1;
    if ((_DWORD)v118 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339C098[v118])(&v129, &v116[1]);
    LODWORD(v118) = -1;
    v95 = (unsigned int *)v116[0];
    v116[0] = 0;
    if (v95)
    {
      v96 = v95[22];
      if ((_DWORD)v96 != -1)
        ((void (*)(unsigned __int16 ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v96])(&v129, v95);
      v95[22] = -1;
      WTF::fastFree((WTF *)v95, v94);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::LabFunction>(uint64_t a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  int v57;
  uint64_t v58;
  unsigned __int16 *v59;
  int v60;
  char v61;
  unsigned int v62;
  __int128 *v63;
  int v64;
  uint64_t v65;
  int v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  WTF *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int *v81;
  uint64_t v82;
  void *v83;
  unsigned int *v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  __int128 *v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  char v105;
  __int128 *v106;
  __int128 *v107;
  unsigned __int16 **v108;
  unsigned int v109;
  char v110[8];
  unsigned int v111;
  char v112[8];
  unsigned int v113;
  char v114[8];
  unsigned int v115;
  char v116;
  int v117;
  int v118;
  char v119;
  unsigned __int16 *v120;
  unsigned __int16 **v121;
  int v122;
  unsigned __int8 v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  int v126;
  char v127;
  unsigned __int16 **v128;
  int v129;
  unsigned __int8 v130;
  unsigned __int16 **v131;
  int v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  unsigned __int16 *v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  unsigned __int16 *v140;
  unsigned __int16 **v141;
  int v142;
  __int16 v143;
  char v144[2];
  int v145;
  char v146[8];
  int v147;
  char v148[8];
  int v149;
  char v150[8];
  int v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v106 = v6;
  v107 = (__int128 *)v5;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 779)
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(a3 + 4);
    v131 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v131, v7 | 0x10100000000);
    if (v131)
      WTF::fastFree((WTF *)(v131 - 2), v8);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v141 = (unsigned __int16 **)&v128;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C6B8[v109])(&v95, &v141, &v108);
      LOBYTE(v125) = 0;
      v126 = -1;
      v9 = v96;
      if ((_DWORD)v96 == -1)
      {
        v127 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[v96])(&v141, &v125, &v95);
        v126 = v9;
        v127 = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v141, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v125) = 0;
      v127 = 0;
    }
    if (!v127)
    {
LABEL_277:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    }
    LOBYTE(v134) = 0;
    v135 = -1;
    v10 = v126;
    if (v126 != -1)
    {
      ((void (*)(unsigned __int16 ***, uint64_t *, unsigned __int16 **))off_1E339BFD0[v126])(&v108, &v134, &v125);
      v135 = v10;
    }
    v11 = *(unsigned __int8 *)(a3 + 4);
    v131 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v131, v11 | 0x10100000000);
    if (v131)
      WTF::fastFree((WTF *)(v131 - 2), v12);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v141 = (unsigned __int16 **)&v128;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C6E0[v109])(&v95, &v141, &v108);
      LOBYTE(v141) = 0;
      v142 = -1;
      v13 = v96;
      if ((_DWORD)v96 == -1)
      {
        LOBYTE(v145) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v128, &v141, &v95);
        v142 = v13;
        LOBYTE(v145) = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v128, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v141) = 0;
      LOBYTE(v145) = 0;
    }
    if (!(_BYTE)v145)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_111;
    }
    v14 = *(unsigned __int8 *)(a3 + 4);
    v128 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v128, v14 | 0x10100000000);
    if (v128)
      WTF::fastFree((WTF *)(v128 - 2), v15);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v131 = (unsigned __int16 **)&v121;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C708[v109])(&v95, &v131, &v108);
      LOBYTE(v131) = 0;
      v132 = -1;
      v16 = v96;
      if ((_DWORD)v96 == -1)
      {
        v133 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v121, &v131, &v95);
        v132 = v16;
        v133 = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v121, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v131) = 0;
      v133 = 0;
    }
    if (!v133)
    {
      v17 = 0;
      v18 = 0;
LABEL_108:
      if ((_BYTE)v145 && v142 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v142])(&v108, &v141);
LABEL_111:
      if (v135 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BEF8[v135])(&v108, &v134);
      v135 = -1;
      if (v127)
      {
        if (v126 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v126])(&v108, &v125);
      }
      if (v17)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 88) = 0;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_277;
    }
    LOBYTE(v128) = 0;
    v130 = 0;
    v23 = v106;
    v24 = v107;
    v25 = v106;
    if (v106 >= v107)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v26 = 0;
    if ((*(_DWORD *)v25 & 0x3F) != 6 || *((_WORD *)v25 + 8) != 47)
      goto LABEL_61;
    if (v106 == v107)
    {
      v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v61 = 1;
      {
        v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v62;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v106 + 24);
      v106 = (__int128 *)((char *)v106 + 24);
      v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v23 < v107 || (v61 & 1) != 0)
      {
        v63 = v23 >= v107 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v64 = *(_DWORD *)v63;
      }
      else
      {
        v62 = v62 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v62;
        v61 = 1;
        LOBYTE(v64) = v62;
      }
      if ((v64 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v106 = v23;
    }
    v65 = *(unsigned __int8 *)(a3 + 4);
    v140 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, &v140, v65 | 0x10100000000);
    if (v140)
      WTF::fastFree((WTF *)(v140 - 8), v15);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v95 = (WTF *)&v139;
      ((void (*)(unsigned __int16 ***__return_ptr, WTF **, unsigned __int16 ***))off_1E339C730[v109])(&v121, &v95, &v108);
      LOBYTE(v95) = 0;
      LODWORD(v96) = -1;
      v66 = v122;
      if (v122 == -1)
      {
        LOBYTE(v97) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, WTF **, unsigned __int16 ***))off_1E339BFD0[v122])(&v139, &v95, &v121);
        LODWORD(v96) = v66;
        LOBYTE(v97) = 1;
        if (v122 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339BEF8[v122])(&v139, &v121);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v109])(&v121, &v108);
    }
    else
    {
      LOBYTE(v95) = 0;
      LOBYTE(v97) = 0;
    }
    if (v130 != v97)
    {
      if (v130)
      {
        if (v129 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
        v129 = -1;
        v130 = 0;
      }
      else
      {
        LOBYTE(v128) = 0;
        v129 = -1;
        v80 = v96;
        if ((_DWORD)v96 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v108, &v128, &v95);
          v129 = v80;
        }
        v130 = 1;
      }
      goto LABEL_281;
    }
    if (!v130)
    {
LABEL_284:
      if (!v130)
      {
        v18 = 0;
        v17 = 0;
LABEL_105:
        if (v133 && v132 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v132])(&v108, &v131);
        goto LABEL_108;
      }
      v26 = 1;
      v23 = v106;
      v24 = v107;
LABEL_61:
      if (v23 == v24)
      {
        if (!(_BYTE)v145 || !v133)
          goto LABEL_305;
        LOBYTE(v108) = 0;
        v109 = -1;
        v27 = v135;
        if (v135 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, uint64_t *))off_1E339BFD0[v135])(&v95, &v108, &v134);
          v109 = v27;
        }
        v28 = v110;
        v110[0] = 0;
        v111 = -1;
        v29 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v142])(&v95, v110, &v141);
          v111 = v29;
        }
        v112[0] = 0;
        v113 = -1;
        v30 = v132;
        if (v132 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v132])(&v95, v112, &v131);
          v113 = v30;
        }
        v114[0] = 0;
        v116 = 0;
        if (v130)
        {
          v115 = -1;
          v31 = v129;
          if (v129 != -1)
          {
            ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v129])(&v95, v114, &v128);
            v115 = v31;
          }
          v116 = 1;
        }
        v117 = *(_DWORD *)(a3 + 8);
        v140 = 0;
        v121 = &v140;
        if (v109 == -1)
          goto LABEL_334;
        v95 = (WTF *)&v121;
        v32 = ((uint64_t (*)(WTF **, unsigned __int16 ***))*(&off_1E339BF48 + v109))(&v95, &v108);
        v139 = 0;
        v121 = &v139;
        if (v111 == -1
          || (v34 = (WTF *)v32,
              v94 = v33,
              v95 = (WTF *)&v121,
              v35 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v111))(&v95, v110),
              v138 = 0,
              v121 = &v138,
              v113 == -1))
        {
LABEL_334:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v37 = v35;
        v38 = v36;
        v95 = (WTF *)&v121;
        v40 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v113))(&v95, v112);
        v41 = v39;
        v137 = 0;
        if (v116)
        {
          v121 = &v137;
          if (v115 == -1)
            goto LABEL_334;
          v95 = (WTF *)&v121;
          v42 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v115))(&v95, v114);
          v28 = v39;
          v43 = v42 & 0xFFFFFFFFFFFFFF00;
          v44 = v42;
          if (v137)
            WTF::fastFree((WTF *)(v137 - 8), v39);
          v45 = 1;
        }
        else
        {
          v45 = 0;
          v43 = 0;
          v44 = 0;
        }
        if (v138)
          WTF::fastFree((WTF *)(v138 - 8), v39);
        if (v139)
          WTF::fastFree((WTF *)(v139 - 8), v39);
        if (v140)
          WTF::fastFree((WTF *)(v140 - 8), v39);
        v95 = v34;
        v96 = v94;
        v97 = v37;
        v98 = v38;
        v99 = v40;
        v100 = v41;
        v101 = v44 | v43;
        v102 = v28;
        LOBYTE(v103) = v45;
        *(_DWORD *)((char *)&v103 + 1) = (_DWORD)v121;
        HIDWORD(v103) = *(_DWORD *)((char *)&v121 + 3);
        WebCore::convertToTypedColor<WebCore::LabFunction>((uint64_t)&v95);
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v53 = v52;
        v54 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v54 = 1;
        *(_DWORD *)(v54 + 4) = v47;
        *(_DWORD *)(v54 + 8) = v49;
        *(_DWORD *)(v54 + 12) = v51;
        *(_DWORD *)(v54 + 16) = v53;
        if (v116)
        {
          if (v115 != -1)
            ((void (*)(WTF **, char *))off_1E339BEF8[v115])(&v95, v114);
          v115 = -1;
        }
        if (v113 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v113])(&v95, v112);
        v113 = -1;
        if (v111 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v111])(&v95, v110);
        v18 = v54 | 0xB0C000000000000;
        v111 = -1;
        if (v109 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
        v17 = 1;
        if (!v130)
          goto LABEL_105;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        if (!v26)
          goto LABEL_105;
      }
      if (v129 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
      goto LABEL_105;
    }
    if (v129 == -1)
    {
      if ((_DWORD)v96 == -1)
        goto LABEL_281;
    }
    else if ((_DWORD)v96 == -1)
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
      v129 = -1;
LABEL_281:
      if ((_BYTE)v97 && (_DWORD)v96 != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v108, &v95);
      goto LABEL_284;
    }
    v108 = (unsigned __int16 **)&v128;
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BF20[v96])(&v108, &v128, &v95);
    goto LABEL_281;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v106, v5);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)&v108, (WebCore::CSSPropertyParserHelpers *)&v106);
  if (!v119)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_259;
  }
  LOWORD(v141) = 836;
  BYTE2(v141) = 1;
  WORD2(v141) = 838;
  BYTE6(v141) = 1;
  LOWORD(v142) = 833;
  BYTE2(v142) = 1;
  v143 = 126;
  v144[0] = 1;
  v139 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v141, (_BYTE *)&v141 + 2, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, (_WORD *)&v141 + 2, (_BYTE *)&v141 + 6, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v142, (_BYTE *)&v142 + 2, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v143, v144, (uint64_t)&v95);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v138, &v139);
  v20 = *(unsigned __int8 *)(a3 + 4);
  v21 = v138;
  v138 = 0;
  v128 = (unsigned __int16 **)v21;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, (unsigned __int16 **)&v128, v20 | 0x10100000000);
  if (v128)
    WTF::fastFree((WTF *)(v128 - 2), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v131 = &v125;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339C5F8[v96])(&v141, &v131, &v95);
    LOBYTE(v131) = 0;
    v132 = -1;
    v22 = v142;
    if (v142 == -1)
    {
      v133 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v125, &v131, &v141);
      v132 = v22;
      v133 = 1;
      if (v142 != -1)
        ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339BB60[v142])(&v125, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v131) = 0;
    v133 = 0;
  }
  if (v138)
    WTF::fastFree((WTF *)(v138 - 8), v15);
  if (!v133)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_254;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v137, &v139);
  v55 = *(unsigned __int8 *)(a3 + 4);
  v56 = v137;
  v137 = 0;
  v125 = v56;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, &v125, v55 | 0x10100000000);
  if (v125)
    WTF::fastFree((WTF *)(v125 - 8), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v128 = (unsigned __int16 **)&v121;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339C628[v96])(&v141, &v128, &v95);
    LOBYTE(v128) = 0;
    v129 = -1;
    v57 = v142;
    if (v142 == -1)
    {
      v130 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v121, &v128, &v141);
      v129 = v57;
      v130 = 1;
      if (v142 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v142])(&v121, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v128) = 0;
    v130 = 0;
  }
  if (v137)
    WTF::fastFree((WTF *)(v137 - 8), v15);
  if (!v130)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_251;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v124, &v139);
  v58 = *(unsigned __int8 *)(a3 + 4);
  v59 = v124;
  v124 = 0;
  v121 = (unsigned __int16 **)v59;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, (unsigned __int16 **)&v121, v58 | 0x10100000000);
  if (v121)
    WTF::fastFree((WTF *)(v121 - 2), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v125 = (unsigned __int16 *)&v134;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 **, WTF **))off_1E339C658[v96])(&v141, &v125, &v95);
    LOBYTE(v125) = 0;
    v126 = -1;
    v60 = v142;
    if (v142 == -1)
    {
      v127 = 1;
    }
    else
    {
      ((void (*)(uint64_t *, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v142])(&v134, &v125, &v141);
      v126 = v60;
      v127 = 1;
      if (v142 != -1)
        ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BB60[v142])(&v134, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v125) = 0;
    v127 = 0;
  }
  if (v124)
    WTF::fastFree((WTF *)(v124 - 8), v15);
  if (!v127)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_248;
  }
  LOBYTE(v121) = 0;
  v123 = 0;
  v67 = v106;
  v68 = v107;
  v69 = v106;
  if (v106 >= v107)
  {
    v69 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v70 = 0;
  if ((*(_DWORD *)v69 & 0x3F) == 6 && *((_WORD *)v69 + 8) == 47)
  {
    if (v106 == v107)
    {
      v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v86 = 1;
      {
        v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v87;
      }
    }
    else
    {
      v67 = (__int128 *)((char *)v106 + 24);
      v106 = (__int128 *)((char *)v106 + 24);
      v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v67 < v107 || (v86 & 1) != 0)
      {
        v88 = v67 >= v107 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v67;
        v89 = *(_DWORD *)v88;
      }
      else
      {
        v87 = v87 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v87;
        v86 = 1;
        LOBYTE(v89) = v87;
      }
      if ((v89 & 0x3F) != 0x10)
        break;
      v67 = (__int128 *)((char *)v67 + 24);
      v106 = v67;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v120, &v139);
    v90 = *(unsigned __int8 *)(a3 + 4);
    v91 = v120;
    v120 = 0;
    v140 = v91;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, &v140, v90 | 0x10100000000);
    if (v140)
      WTF::fastFree((WTF *)(v140 - 8), v15);
    if (!(_BYTE)v97)
      goto LABEL_306;
    if ((_DWORD)v96 != -1)
    {
      v141 = (unsigned __int16 **)&v136;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 ***, WTF **))off_1E339C688[v96])(&v134, &v141, &v95);
      LOBYTE(v141) = 0;
      v142 = -1;
      v92 = v135;
      if (v135 == -1)
      {
        LOBYTE(v145) = 1;
      }
      else
      {
        ((void (*)(char *, unsigned __int16 ***, uint64_t *))off_1E339BB90[v135])(&v136, &v141, &v134);
        v142 = v92;
        LOBYTE(v145) = 1;
        if (v135 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v135])(&v136, &v134);
      }
      if ((_BYTE)v97 && (_DWORD)v96 != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[v96])(&v134, &v95);
      goto LABEL_311;
    }
    goto LABEL_334;
  }
  while (1)
  {
    if (v67 != v68)
    {
      LOBYTE(v95) = 0;
      v105 = 0;
      goto LABEL_242;
    }
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v141, (uint64_t)&v108);
    if (v133)
    {
      if (v130 && v127)
        break;
    }
LABEL_305:
    __break(1u);
LABEL_306:
    LOBYTE(v141) = 0;
    LOBYTE(v145) = 0;
LABEL_311:
    if (v123 != v145)
    {
      if (v123)
      {
        if (v122 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v122])(&v95, &v121);
        v122 = -1;
        v123 = 0;
      }
      else
      {
        LOBYTE(v121) = 0;
        v122 = -1;
        v93 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v95, &v121, &v141);
          v122 = v93;
        }
        v123 = 1;
      }
      goto LABEL_325;
    }
    if (!v123)
      goto LABEL_329;
    if (v122 == -1)
    {
      if (v142 == -1)
        goto LABEL_325;
    }
    else if (v142 == -1)
    {
      ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v122])(&v95, &v121);
      v122 = -1;
      goto LABEL_325;
    }
    v95 = (WTF *)&v121;
    ((void (*)(WTF **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BC80[v142])(&v95, &v121, &v141);
LABEL_325:
    if ((_BYTE)v145)
    {
      if (v142 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v142])(&v95, &v141);
      v142 = -1;
    }
LABEL_329:
    if (v120)
      WTF::fastFree((WTF *)(v120 - 8), v15);
    if (!v123)
    {
      LOBYTE(v95) = 0;
      v105 = 0;
      goto LABEL_245;
    }
    v70 = 1;
    v67 = v106;
    v68 = v107;
  }
  LOBYTE(v142) = 0;
  v145 = -1;
  v71 = v132;
  if (v132 != -1)
  {
    ((void (*)(WTF **, int *, unsigned __int16 ***))off_1E339BB90[v132])(&v95, &v142, &v131);
    v145 = v71;
  }
  v146[0] = 0;
  v147 = -1;
  v72 = v129;
  if (v129 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BB90[v129])(&v95, v146, &v128);
    v147 = v72;
  }
  v148[0] = 0;
  v149 = -1;
  v73 = v126;
  if (v126 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v126])(&v95, v148, &v125);
    v149 = v73;
  }
  v150[0] = 0;
  v152 = 0;
  if (v123)
  {
    v151 = -1;
    v74 = v122;
    if (v122 != -1)
    {
      ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BB90[v122])(&v95, v150, &v121);
      v151 = v74;
    }
    v152 = 1;
  }
  v75 = (WTF *)v141;
  v141 = 0;
  v95 = v75;
  LOBYTE(v96) = 0;
  LODWORD(v97) = -1;
  v76 = v145;
  if (v145 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, int *))off_1E339BB90[v145])(&v134, &v96, &v142);
    LODWORD(v97) = v76;
  }
  LOBYTE(v98) = 0;
  LODWORD(v99) = -1;
  v77 = v147;
  if (v147 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, char *))off_1E339BB90[v147])(&v134, &v98, v146);
    LODWORD(v99) = v77;
  }
  LOBYTE(v100) = 0;
  LODWORD(v101) = -1;
  v78 = v149;
  if (v149 != -1)
  {
    ((void (*)(uint64_t *, _BYTE **, char *))off_1E339BB90[v149])(&v134, &v100, v148);
    LODWORD(v101) = v78;
  }
  LOBYTE(v102) = 0;
  v104 = 0;
  if (v152)
  {
    LODWORD(v103) = -1;
    v79 = v151;
    if (v151 == -1)
    {
      v104 = 1;
      v105 = 1;
      goto LABEL_230;
    }
    ((void (*)(uint64_t *, char **, char *))off_1E339BB90[v151])(&v134, &v102, v150);
    LODWORD(v103) = v79;
    v104 = 1;
    v105 = 1;
    if (v152)
    {
      if (v151 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v151])(&v134, v150);
LABEL_230:
      v151 = -1;
    }
  }
  else
  {
    v105 = 1;
  }
  if (v149 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v149])(&v134, v148);
  v149 = -1;
  if (v147 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v147])(&v134, v146);
  v147 = -1;
  if (v145 != -1)
    ((void (*)(uint64_t *, int *))off_1E339BB60[v145])(&v134, &v142);
  v145 = -1;
  v81 = (unsigned int *)v141;
  v141 = 0;
  if (v81)
  {
    v82 = v81[22];
    if ((_DWORD)v82 != -1)
      ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v82])(&v134, v81);
    v81[22] = -1;
    WTF::fastFree((WTF *)v81, v15);
  }
  v70 = v123;
LABEL_242:
  if (v70 && v122 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v122])(&v141, &v121);
LABEL_245:
  if (v127 && v126 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v126])(&v141, &v125);
LABEL_248:
  if (v130 && v129 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v129])(&v141, &v128);
LABEL_251:
  if (v133 && v132 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v132])(&v141, &v131);
LABEL_254:
  if (v139)
    WTF::fastFree((WTF *)(v139 - 8), v15);
  if (v119 && v118 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v118])(&v141, &v108);
LABEL_259:
  if (!v105)
    goto LABEL_277;
  std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v108, (uint64_t *)&v95);
  v118 = 8;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v108);
  *(_DWORD *)(a1 + 88) = 8;
  *(_BYTE *)(a1 + 96) = 1;
  if (v118 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v118])(&v141, &v108);
  if (v105)
  {
    if (v104)
    {
      if ((_DWORD)v103 != -1)
        ((void (*)(unsigned __int16 ***, char **))off_1E339BB60[v103])(&v108, &v102);
      LODWORD(v103) = -1;
    }
    if ((_DWORD)v101 != -1)
      ((void (*)(unsigned __int16 ***, _BYTE **))off_1E339BB60[v101])(&v108, &v100);
    LODWORD(v101) = -1;
    if ((_DWORD)v99 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v99])(&v108, &v98);
    LODWORD(v99) = -1;
    if ((_DWORD)v97 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v97])(&v108, &v96);
    LODWORD(v97) = -1;
    v84 = (unsigned int *)v95;
    v95 = 0;
    if (v84)
    {
      v85 = v84[22];
      if ((_DWORD)v85 != -1)
        ((void (*)(unsigned __int16 ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v85])(&v108, v84);
      v84[22] = -1;
      WTF::fastFree((WTF *)v84, v83);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::LCHFunction>(uint64_t a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  char v59;
  unsigned int v60;
  __int128 *v61;
  int v62;
  uint64_t v63;
  int v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  WTF *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int *v79;
  uint64_t v80;
  void *v81;
  unsigned int *v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  __int128 *v86;
  int v87;
  uint64_t v88;
  unsigned __int16 *v89;
  int v90;
  int v91;
  WTF *v92;
  WTF *v93[2];
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 *v103;
  __int128 *v104;
  unsigned __int16 **v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  _BYTE v109[16];
  int v110;
  char v111[8];
  unsigned int v112;
  char v113;
  int v114;
  int v115;
  char v116;
  unsigned __int16 *v117;
  unsigned __int16 *v118;
  int v119;
  unsigned __int8 v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  unsigned __int16 *v124;
  int v125;
  unsigned __int8 v126;
  char v127[8];
  int v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  unsigned __int16 *v133;
  unsigned __int16 *v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unsigned __int16 **v138;
  int v139;
  __int16 v140;
  char v141[2];
  int v142;
  char v143[8];
  int v144;
  _BYTE v145[16];
  int v146;
  char v147[8];
  int v148;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v103 = v6;
  v104 = (__int128 *)v5;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 779)
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, (unsigned __int16 **)&v121, v7 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v8);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v138 = (unsigned __int16 **)v127;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C818[v106])(v93, &v138, &v105);
      LOBYTE(v118) = 0;
      v119 = -1;
      v9 = (int)v93[1];
      if (LODWORD(v93[1]) == -1)
      {
        v120 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v138, &v118, v93);
        v119 = v9;
        v120 = 1;
        if (LODWORD(v93[1]) != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v138, v93);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
    }
    else
    {
      LOBYTE(v118) = 0;
      v120 = 0;
    }
    if (!v120)
    {
LABEL_277:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    }
    LOBYTE(v130) = 0;
    v131 = -1;
    v10 = v119;
    if (v119 != -1)
    {
      ((void (*)(unsigned __int16 ***, uint64_t *, unsigned __int16 **))off_1E339BFD0[v119])(&v105, &v130, &v118);
      v131 = v10;
    }
    v11 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, (unsigned __int16 **)&v121, v11 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v12);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v138 = (unsigned __int16 **)v127;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C840[v106])(v93, &v138, &v105);
      v127[0] = 0;
      v128 = -1;
      v13 = (int)v93[1];
      if (LODWORD(v93[1]) == -1)
      {
        v129 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, char *, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v138, v127, v93);
        v128 = v13;
        v129 = 1;
        if (LODWORD(v93[1]) != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v138, v93);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
    }
    else
    {
      v127[0] = 0;
      v129 = 0;
    }
    if (!v129)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_111;
    }
    v14 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, &v103, (unsigned __int16 **)&v121, v14 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v15);
    if ((_BYTE)v108)
    {
      if (v107 == -1)
        goto LABEL_334;
      v138 = &v124;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C868[v107])(v93, &v138, &v105);
      LOBYTE(v138) = 0;
      v142 = -1;
      v16 = v94;
      if ((_DWORD)v94 == -1)
      {
        v143[0] = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, WTF **))off_1E339C470[v94])(&v124, &v138, v93);
        v142 = v16;
        v143[0] = 1;
        if ((_DWORD)v94 != -1)
          ((void (*)(unsigned __int16 **, WTF **))off_1E339C448[v94])(&v124, v93);
      }
      if ((_BYTE)v108 && v107 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339C448[v107])(v93, &v105);
    }
    else
    {
      LOBYTE(v138) = 0;
      v143[0] = 0;
    }
    if (!v143[0])
    {
      v17 = 0;
      v18 = 0;
LABEL_108:
      if (v129 && v128 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E339BEF8[v128])(&v105, v127);
LABEL_111:
      if (v131 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BEF8[v131])(&v105, &v130);
      v131 = -1;
      if (v120)
      {
        if (v119 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v119])(&v105, &v118);
      }
      if (v17)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 88) = 0;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_277;
    }
    LOBYTE(v124) = 0;
    v126 = 0;
    v23 = v103;
    v24 = v104;
    v25 = v103;
    if (v103 >= v104)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v26 = 0;
    if ((*(_DWORD *)v25 & 0x3F) != 6 || *((_WORD *)v25 + 8) != 47)
      goto LABEL_61;
    if (v103 == v104)
    {
      v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v59 = 1;
      {
        v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v60;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v103 + 24);
      v103 = (__int128 *)((char *)v103 + 24);
      v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v23 < v104 || (v59 & 1) != 0)
      {
        v61 = v23 >= v104 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v62 = *(_DWORD *)v61;
      }
      else
      {
        v60 = v60 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v60;
        v59 = 1;
        LOBYTE(v62) = v60;
      }
      if ((v62 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v103 = v23;
    }
    v63 = *(unsigned __int8 *)(a3 + 4);
    v137 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, &v137, v63 | 0x10100000000);
    if (v137)
      WTF::fastFree((WTF *)(v137 - 8), v15);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v93[0] = (WTF *)&v136;
      ((void (*)(__int128 *__return_ptr, WTF **, unsigned __int16 ***))off_1E339C890[v106])(&v121, v93, &v105);
      LOBYTE(v93[0]) = 0;
      LODWORD(v93[1]) = -1;
      v64 = DWORD2(v121);
      if (DWORD2(v121) == -1)
      {
        LOBYTE(v94) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, WTF **, __int128 *))off_1E339BFD0[DWORD2(v121)])(&v136, v93, &v121);
        LODWORD(v93[1]) = v64;
        LOBYTE(v94) = 1;
        if (DWORD2(v121) != -1)
          ((void (*)(unsigned __int16 **, __int128 *))off_1E339BEF8[DWORD2(v121)])(&v136, &v121);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BEF8[v106])(&v121, &v105);
    }
    else
    {
      LOBYTE(v93[0]) = 0;
      LOBYTE(v94) = 0;
    }
    if (v126 != v94)
    {
      if (v126)
      {
        if (v125 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
        v125 = -1;
        v126 = 0;
      }
      else
      {
        LOBYTE(v124) = 0;
        v125 = -1;
        v78 = (int)v93[1];
        if (LODWORD(v93[1]) != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v105, &v124, v93);
          v125 = v78;
        }
        v126 = 1;
      }
      goto LABEL_281;
    }
    if (!v126)
    {
LABEL_284:
      if (!v126)
      {
        v18 = 0;
        v17 = 0;
LABEL_105:
        if (v143[0] && v142 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339C448[v142])(&v105, &v138);
        goto LABEL_108;
      }
      v26 = 1;
      v23 = v103;
      v24 = v104;
LABEL_61:
      if (v23 == v24)
      {
        if (!v129 || !v143[0])
          goto LABEL_305;
        LOBYTE(v105) = 0;
        v106 = -1;
        v27 = v131;
        if (v131 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, uint64_t *))off_1E339BFD0[v131])(v93, &v105, &v130);
          v106 = v27;
        }
        LOBYTE(v107) = 0;
        v108 = -1;
        v28 = v128;
        if (v128 != -1)
        {
          ((void (*)(WTF **, int *, char *))off_1E339BFD0[v128])(v93, &v107, v127);
          v108 = v28;
        }
        v109[0] = 0;
        v110 = -1;
        v29 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, _BYTE *, unsigned __int16 ***))off_1E339C470[v142])(v93, v109, &v138);
          v110 = v29;
        }
        v30 = v111;
        v111[0] = 0;
        v113 = 0;
        if (v126)
        {
          v112 = -1;
          v31 = v125;
          if (v125 != -1)
          {
            ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BFD0[v125])(v93, v111, &v124);
            v112 = v31;
          }
          v113 = 1;
        }
        v114 = *(_DWORD *)(a3 + 8);
        v136 = 0;
        *(_QWORD *)&v121 = &v136;
        if (v106 == -1)
          goto LABEL_334;
        v93[0] = (WTF *)&v121;
        v32 = ((uint64_t (*)(WTF **, unsigned __int16 ***))*(&off_1E339BF48 + v106))(v93, &v105);
        v135 = 0;
        *(_QWORD *)&v121 = &v135;
        if (v108 == -1
          || (v34 = (WTF *)v32,
              v92 = v33,
              v93[0] = (WTF *)&v121,
              v35 = ((uint64_t (*)(WTF **, int *))*(&off_1E339BF48 + v108))(v93, &v107),
              v134 = 0,
              v137 = (unsigned __int16 *)&v134,
              v110 == -1))
        {
LABEL_334:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v37 = v35;
        v38 = v36;
        *(_QWORD *)&v121 = &v137;
        ((void (*)(WTF **__return_ptr, __int128 *, _BYTE *))off_1E339C420[v110])(v93, &v121, v109);
        v133 = 0;
        if (v113)
        {
          v137 = (unsigned __int16 *)&v133;
          if (v112 == -1)
            goto LABEL_334;
          *(_QWORD *)&v121 = &v137;
          v40 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v112))(&v121, v111);
          v30 = v39;
          v41 = v40 & 0xFFFFFFFFFFFFFF00;
          v42 = v40;
          v121 = *(_OWORD *)v93;
          v122 = v94;
          if (v133)
            WTF::fastFree((WTF *)(v133 - 8), v39);
          v43 = 1;
        }
        else
        {
          v43 = 0;
          v41 = 0;
          v42 = 0;
          v121 = *(_OWORD *)v93;
          v122 = v94;
        }
        if (v134)
          WTF::fastFree((WTF *)(v134 - 8), v39);
        if (v135)
          WTF::fastFree((WTF *)(v135 - 8), v39);
        if (v136)
          WTF::fastFree((WTF *)(v136 - 8), v39);
        v93[0] = v34;
        v93[1] = v92;
        v94 = v37;
        v95 = v38;
        v96 = v121;
        v97 = v122;
        v98 = v42 | v41;
        v99 = v30;
        LOBYTE(v100) = v43;
        *(_DWORD *)((char *)&v100 + 1) = (_DWORD)v137;
        HIDWORD(v100) = *(_DWORD *)((char *)&v137 + 3);
        WebCore::convertToTypedColor<WebCore::LCHFunction>((uint64_t)v93);
        v45 = v44;
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v52 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v52 = 1;
        *(_DWORD *)(v52 + 4) = v45;
        *(_DWORD *)(v52 + 8) = v47;
        *(_DWORD *)(v52 + 12) = v49;
        *(_DWORD *)(v52 + 16) = v51;
        if (v113)
        {
          if (v112 != -1)
            ((void (*)(WTF **, char *))off_1E339BEF8[v112])(v93, v111);
          v112 = -1;
        }
        if (v110 != -1)
          ((void (*)(WTF **, _BYTE *))off_1E339C448[v110])(v93, v109);
        v110 = -1;
        if (v108 != -1)
          ((void (*)(WTF **, int *))off_1E339BEF8[v108])(v93, &v107);
        v18 = v52 | 0xA0C000000000000;
        v108 = -1;
        if (v106 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
        v17 = 1;
        if (!v126)
          goto LABEL_105;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        if (!v26)
          goto LABEL_105;
      }
      if (v125 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
      goto LABEL_105;
    }
    if (v125 == -1)
    {
      if (LODWORD(v93[1]) == -1)
        goto LABEL_281;
    }
    else if (LODWORD(v93[1]) == -1)
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
      v125 = -1;
LABEL_281:
      if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v105, v93);
      goto LABEL_284;
    }
    v105 = &v124;
    ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BF20[LODWORD(v93[1])])(&v105, &v124, v93);
    goto LABEL_281;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v103, v5);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)&v105, (WebCore::CSSPropertyParserHelpers *)&v103);
  if (!v116)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_259;
  }
  LOWORD(v138) = 836;
  BYTE2(v138) = 1;
  WORD2(v138) = 839;
  BYTE6(v138) = 1;
  LOWORD(v139) = 834;
  BYTE2(v139) = 1;
  v140 = 126;
  v141[0] = 1;
  v136 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v138, (_BYTE *)&v138 + 2, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, (_WORD *)&v138 + 2, (_BYTE *)&v138 + 6, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v139, (_BYTE *)&v139 + 2, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v140, v141, (uint64_t)v93);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v135, &v136);
  v20 = *(unsigned __int8 *)(a3 + 4);
  v21 = v135;
  v135 = 0;
  v124 = v21;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v124, v20 | 0x10100000000);
  if (v124)
    WTF::fastFree((WTF *)(v124 - 8), v15);
  if ((_BYTE)v94)
  {
    if (LODWORD(v93[1]) == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = v127;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339C758[LODWORD(v93[1])])(&v138, &v121, v93);
    v127[0] = 0;
    v128 = -1;
    v22 = v139;
    if (v139 == -1)
    {
      v129 = 1;
    }
    else
    {
      ((void (*)(__int128 *, char *, unsigned __int16 ***))off_1E339BB90[v139])(&v121, v127, &v138);
      v128 = v22;
      v129 = 1;
      if (v139 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BB60[v139])(&v121, &v138);
    }
    if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v138, v93);
  }
  else
  {
    v127[0] = 0;
    v129 = 0;
  }
  if (v135)
    WTF::fastFree((WTF *)(v135 - 8), v15);
  if (!v129)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_254;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v134, &v136);
  v53 = *(unsigned __int8 *)(a3 + 4);
  v54 = v134;
  v134 = 0;
  v118 = v54;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v118, v53 | 0x10100000000);
  if (v118)
    WTF::fastFree((WTF *)(v118 - 8), v15);
  if ((_BYTE)v94)
  {
    if (LODWORD(v93[1]) == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = &v124;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339C788[LODWORD(v93[1])])(&v138, &v121, v93);
    LOBYTE(v124) = 0;
    v125 = -1;
    v55 = v139;
    if (v139 == -1)
    {
      v126 = 1;
    }
    else
    {
      ((void (*)(__int128 *, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v139])(&v121, &v124, &v138);
      v125 = v55;
      v126 = 1;
      if (v139 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BB60[v139])(&v121, &v138);
    }
    if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v138, v93);
  }
  else
  {
    LOBYTE(v124) = 0;
    v126 = 0;
  }
  if (v134)
    WTF::fastFree((WTF *)(v134 - 8), v15);
  if (!v126)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_251;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v133, &v136);
  v56 = *(unsigned __int8 *)(a3 + 4);
  v57 = v133;
  v133 = 0;
  v118 = v57;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v118, v56 | 0x10100000000);
  if (v118)
    WTF::fastFree((WTF *)(v118 - 8), v15);
  if ((_BYTE)v95)
  {
    if ((_DWORD)v94 == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = &v130;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339C7B8[v94])(&v138, &v121, v93);
    LOBYTE(v121) = 0;
    LODWORD(v122) = -1;
    v58 = v142;
    if (v142 == -1)
    {
      v123 = 1;
    }
    else
    {
      ((void (*)(uint64_t *, __int128 *, unsigned __int16 ***))off_1E339C1A8[v142])(&v130, &v121, &v138);
      LODWORD(v122) = v58;
      v123 = 1;
      if (v142 != -1)
        ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339C098[v142])(&v130, &v138);
    }
    if ((_BYTE)v95 && (_DWORD)v94 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339C098[v94])(&v138, v93);
  }
  else
  {
    LOBYTE(v121) = 0;
    v123 = 0;
  }
  if (v133)
    WTF::fastFree((WTF *)(v133 - 8), v15);
  if (!v123)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_248;
  }
  LOBYTE(v118) = 0;
  v120 = 0;
  v65 = v103;
  v66 = v104;
  v67 = v103;
  if (v103 >= v104)
  {
    v67 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v68 = 0;
  if ((*(_DWORD *)v67 & 0x3F) == 6 && *((_WORD *)v67 + 8) == 47)
  {
    if (v103 == v104)
    {
      v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v84 = 1;
      {
        v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v85;
      }
    }
    else
    {
      v65 = (__int128 *)((char *)v103 + 24);
      v103 = (__int128 *)((char *)v103 + 24);
      v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v65 < v104 || (v84 & 1) != 0)
      {
        v86 = v65 >= v104 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v65;
        v87 = *(_DWORD *)v86;
      }
      else
      {
        v85 = v85 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v85;
        v84 = 1;
        LOBYTE(v87) = v85;
      }
      if ((v87 & 0x3F) != 0x10)
        break;
      v65 = (__int128 *)((char *)v65 + 24);
      v103 = v65;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v117, &v136);
    v88 = *(unsigned __int8 *)(a3 + 4);
    v89 = v117;
    v117 = 0;
    v137 = v89;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v137, v88 | 0x10100000000);
    if (v137)
      WTF::fastFree((WTF *)(v137 - 8), v15);
    if (!(_BYTE)v94)
      goto LABEL_306;
    if (LODWORD(v93[1]) != -1)
    {
      v138 = (unsigned __int16 **)&v132;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 ***, WTF **))off_1E339C7E8[LODWORD(v93[1])])(&v130, &v138, v93);
      LOBYTE(v138) = 0;
      v139 = -1;
      v90 = v131;
      if (v131 == -1)
      {
        LOBYTE(v142) = 1;
      }
      else
      {
        ((void (*)(char *, unsigned __int16 ***, uint64_t *))off_1E339BB90[v131])(&v132, &v138, &v130);
        v139 = v90;
        LOBYTE(v142) = 1;
        if (v131 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v131])(&v132, &v130);
      }
      if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v130, v93);
      goto LABEL_311;
    }
    goto LABEL_334;
  }
  while (1)
  {
    if (v65 != v66)
    {
      LOBYTE(v93[0]) = 0;
      v102 = 0;
      goto LABEL_242;
    }
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v138, (uint64_t)&v105);
    if (v129)
    {
      if (v126 && v123)
        break;
    }
LABEL_305:
    __break(1u);
LABEL_306:
    LOBYTE(v138) = 0;
    LOBYTE(v142) = 0;
LABEL_311:
    if (v120 != v142)
    {
      if (v120)
      {
        if (v119 != -1)
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v119])(v93, &v118);
        v119 = -1;
        v120 = 0;
      }
      else
      {
        LOBYTE(v118) = 0;
        v119 = -1;
        v91 = v139;
        if (v139 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v139])(v93, &v118, &v138);
          v119 = v91;
        }
        v120 = 1;
      }
      goto LABEL_325;
    }
    if (!v120)
      goto LABEL_329;
    if (v119 == -1)
    {
      if (v139 == -1)
        goto LABEL_325;
    }
    else if (v139 == -1)
    {
      ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v119])(v93, &v118);
      v119 = -1;
      goto LABEL_325;
    }
    v93[0] = (WTF *)&v118;
    ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 ***))off_1E339BC80[v139])(v93, &v118, &v138);
LABEL_325:
    if ((_BYTE)v142)
    {
      if (v139 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v139])(v93, &v138);
      v139 = -1;
    }
LABEL_329:
    if (v117)
      WTF::fastFree((WTF *)(v117 - 8), v15);
    if (!v120)
    {
      LOBYTE(v93[0]) = 0;
      v102 = 0;
      goto LABEL_245;
    }
    v68 = 1;
    v65 = v103;
    v66 = v104;
  }
  LOBYTE(v139) = 0;
  v142 = -1;
  v69 = v128;
  if (v128 != -1)
  {
    ((void (*)(WTF **, int *, char *))off_1E339BB90[v128])(v93, &v139, v127);
    v142 = v69;
  }
  v143[0] = 0;
  v144 = -1;
  v70 = v125;
  if (v125 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v125])(v93, v143, &v124);
    v144 = v70;
  }
  v145[0] = 0;
  v146 = -1;
  v71 = v122;
  if ((_DWORD)v122 != -1)
  {
    ((void (*)(WTF **, _BYTE *, __int128 *))off_1E339C1A8[v122])(v93, v145, &v121);
    v146 = v71;
  }
  v147[0] = 0;
  v149 = 0;
  if (v120)
  {
    v148 = -1;
    v72 = v119;
    if (v119 != -1)
    {
      ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v119])(v93, v147, &v118);
      v148 = v72;
    }
    v149 = 1;
  }
  v73 = (WTF *)v138;
  v138 = 0;
  v93[0] = v73;
  LOBYTE(v93[1]) = 0;
  LODWORD(v94) = -1;
  v74 = v142;
  if (v142 != -1)
  {
    ((void (*)(uint64_t *, WTF **, int *))off_1E339BB90[v142])(&v130, &v93[1], &v139);
    LODWORD(v94) = v74;
  }
  LOBYTE(v95) = 0;
  LODWORD(v96) = -1;
  v75 = v144;
  if (v144 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, char *))off_1E339BB90[v144])(&v130, &v95, v143);
    LODWORD(v96) = v75;
  }
  BYTE8(v96) = 0;
  LODWORD(v98) = -1;
  v76 = v146;
  if (v146 != -1)
  {
    ((void (*)(uint64_t *, char *, _BYTE *))off_1E339C1A8[v146])(&v130, (char *)&v96 + 8, v145);
    LODWORD(v98) = v76;
  }
  LOBYTE(v99) = 0;
  v101 = 0;
  if (v149)
  {
    LODWORD(v100) = -1;
    v77 = v148;
    if (v148 == -1)
    {
      v101 = 1;
      v102 = 1;
      goto LABEL_230;
    }
    ((void (*)(uint64_t *, char **, char *))off_1E339BB90[v148])(&v130, &v99, v147);
    LODWORD(v100) = v77;
    v101 = 1;
    v102 = 1;
    if (v149)
    {
      if (v148 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v148])(&v130, v147);
LABEL_230:
      v148 = -1;
    }
  }
  else
  {
    v102 = 1;
  }
  if (v146 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E339C098[v146])(&v130, v145);
  v146 = -1;
  if (v144 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v144])(&v130, v143);
  v144 = -1;
  if (v142 != -1)
    ((void (*)(uint64_t *, int *))off_1E339BB60[v142])(&v130, &v139);
  v142 = -1;
  v79 = (unsigned int *)v138;
  v138 = 0;
  if (v79)
  {
    v80 = v79[22];
    if ((_DWORD)v80 != -1)
      ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v80])(&v130, v79);
    v79[22] = -1;
    WTF::fastFree((WTF *)v79, v15);
  }
  v68 = v120;
LABEL_242:
  if (v68 && v119 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v119])(&v138, &v118);
LABEL_245:
  if (v123 && (_DWORD)v122 != -1)
    ((void (*)(unsigned __int16 ***, __int128 *))off_1E339C098[v122])(&v138, &v121);
LABEL_248:
  if (v126 && v125 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v125])(&v138, &v124);
LABEL_251:
  if (v129 && v128 != -1)
    ((void (*)(unsigned __int16 ***, char *))off_1E339BB60[v128])(&v138, v127);
LABEL_254:
  if (v136)
    WTF::fastFree((WTF *)(v136 - 8), v15);
  if (v116 && v115 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v115])(&v138, &v105);
LABEL_259:
  if (!v102)
    goto LABEL_277;
  std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>((uint64_t)&v105, (uint64_t *)v93);
  v115 = 9;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(a1, (uint64_t *)&v105);
  *(_DWORD *)(a1 + 88) = 9;
  *(_BYTE *)(a1 + 96) = 1;
  if (v115 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v115])(&v138, &v105);
  if (v102)
  {
    if (v101)
    {
      if ((_DWORD)v100 != -1)
        ((void (*)(unsigned __int16 ***, char **))off_1E339BB60[v100])(&v105, &v99);
      LODWORD(v100) = -1;
    }
    if ((_DWORD)v98 != -1)
      ((void (*)(unsigned __int16 ***, char *))off_1E339C098[v98])(&v105, (char *)&v96 + 8);
    LODWORD(v98) = -1;
    if ((_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v96])(&v105, &v95);
    LODWORD(v96) = -1;
    if ((_DWORD)v94 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v94])(&v105, &v93[1]);
    LODWORD(v94) = -1;
    v82 = (unsigned int *)v93[0];
    v93[0] = 0;
    if (v82)
    {
      v83 = v82[22];
      if ((_DWORD)v83 != -1)
        ((void (*)(unsigned __int16 ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v83])(&v105, v82);
      v82[22] = -1;
      WTF::fastFree((WTF *)v82, v81);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::OKLabFunction>(uint64_t a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  int v57;
  uint64_t v58;
  unsigned __int16 *v59;
  int v60;
  char v61;
  unsigned int v62;
  __int128 *v63;
  int v64;
  uint64_t v65;
  int v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  WTF *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int *v81;
  uint64_t v82;
  void *v83;
  unsigned int *v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  __int128 *v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  char v105;
  __int128 *v106;
  __int128 *v107;
  unsigned __int16 **v108;
  unsigned int v109;
  char v110[8];
  unsigned int v111;
  char v112[8];
  unsigned int v113;
  char v114[8];
  unsigned int v115;
  char v116;
  int v117;
  int v118;
  char v119;
  unsigned __int16 *v120;
  unsigned __int16 **v121;
  int v122;
  unsigned __int8 v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  int v126;
  char v127;
  unsigned __int16 **v128;
  int v129;
  unsigned __int8 v130;
  unsigned __int16 **v131;
  int v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  unsigned __int16 *v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  unsigned __int16 *v140;
  unsigned __int16 **v141;
  int v142;
  __int16 v143;
  char v144[2];
  int v145;
  char v146[8];
  int v147;
  char v148[8];
  int v149;
  char v150[8];
  int v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v106 = v6;
  v107 = (__int128 *)v5;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 779)
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(a3 + 4);
    v131 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v131, v7 | 0x10100000000);
    if (v131)
      WTF::fastFree((WTF *)(v131 - 2), v8);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v141 = (unsigned __int16 **)&v128;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C978[v109])(&v95, &v141, &v108);
      LOBYTE(v125) = 0;
      v126 = -1;
      v9 = v96;
      if ((_DWORD)v96 == -1)
      {
        v127 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[v96])(&v141, &v125, &v95);
        v126 = v9;
        v127 = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v141, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v125) = 0;
      v127 = 0;
    }
    if (!v127)
    {
LABEL_277:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    }
    LOBYTE(v134) = 0;
    v135 = -1;
    v10 = v126;
    if (v126 != -1)
    {
      ((void (*)(unsigned __int16 ***, uint64_t *, unsigned __int16 **))off_1E339BFD0[v126])(&v108, &v134, &v125);
      v135 = v10;
    }
    v11 = *(unsigned __int8 *)(a3 + 4);
    v131 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v131, v11 | 0x10100000000);
    if (v131)
      WTF::fastFree((WTF *)(v131 - 2), v12);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v141 = (unsigned __int16 **)&v128;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C9A0[v109])(&v95, &v141, &v108);
      LOBYTE(v141) = 0;
      v142 = -1;
      v13 = v96;
      if ((_DWORD)v96 == -1)
      {
        LOBYTE(v145) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v128, &v141, &v95);
        v142 = v13;
        LOBYTE(v145) = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v128, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v141) = 0;
      LOBYTE(v145) = 0;
    }
    if (!(_BYTE)v145)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_111;
    }
    v14 = *(unsigned __int8 *)(a3 + 4);
    v128 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, (unsigned __int16 **)&v128, v14 | 0x10100000000);
    if (v128)
      WTF::fastFree((WTF *)(v128 - 2), v15);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v131 = (unsigned __int16 **)&v121;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339C9C8[v109])(&v95, &v131, &v108);
      LOBYTE(v131) = 0;
      v132 = -1;
      v16 = v96;
      if ((_DWORD)v96 == -1)
      {
        v133 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v121, &v131, &v95);
        v132 = v16;
        v133 = 1;
        if ((_DWORD)v96 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v121, &v95);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
    }
    else
    {
      LOBYTE(v131) = 0;
      v133 = 0;
    }
    if (!v133)
    {
      v17 = 0;
      v18 = 0;
LABEL_108:
      if ((_BYTE)v145 && v142 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v142])(&v108, &v141);
LABEL_111:
      if (v135 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BEF8[v135])(&v108, &v134);
      v135 = -1;
      if (v127)
      {
        if (v126 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v126])(&v108, &v125);
      }
      if (v17)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 88) = 0;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_277;
    }
    LOBYTE(v128) = 0;
    v130 = 0;
    v23 = v106;
    v24 = v107;
    v25 = v106;
    if (v106 >= v107)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v26 = 0;
    if ((*(_DWORD *)v25 & 0x3F) != 6 || *((_WORD *)v25 + 8) != 47)
      goto LABEL_61;
    if (v106 == v107)
    {
      v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v61 = 1;
      {
        v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v62;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v106 + 24);
      v106 = (__int128 *)((char *)v106 + 24);
      v62 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v23 < v107 || (v61 & 1) != 0)
      {
        v63 = v23 >= v107 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v64 = *(_DWORD *)v63;
      }
      else
      {
        v62 = v62 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v62;
        v61 = 1;
        LOBYTE(v64) = v62;
      }
      if ((v64 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v106 = v23;
    }
    v65 = *(unsigned __int8 *)(a3 + 4);
    v140 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v108, (uint64_t)&v106, &v140, v65 | 0x10100000000);
    if (v140)
      WTF::fastFree((WTF *)(v140 - 8), v15);
    if (v110[0])
    {
      if (v109 == -1)
        goto LABEL_334;
      v95 = (WTF *)&v139;
      ((void (*)(unsigned __int16 ***__return_ptr, WTF **, unsigned __int16 ***))off_1E339C9F0[v109])(&v121, &v95, &v108);
      LOBYTE(v95) = 0;
      LODWORD(v96) = -1;
      v66 = v122;
      if (v122 == -1)
      {
        LOBYTE(v97) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, WTF **, unsigned __int16 ***))off_1E339BFD0[v122])(&v139, &v95, &v121);
        LODWORD(v96) = v66;
        LOBYTE(v97) = 1;
        if (v122 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339BEF8[v122])(&v139, &v121);
      }
      if (v110[0] && v109 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v109])(&v121, &v108);
    }
    else
    {
      LOBYTE(v95) = 0;
      LOBYTE(v97) = 0;
    }
    if (v130 != v97)
    {
      if (v130)
      {
        if (v129 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
        v129 = -1;
        v130 = 0;
      }
      else
      {
        LOBYTE(v128) = 0;
        v129 = -1;
        v80 = v96;
        if ((_DWORD)v96 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BFD0[v96])(&v108, &v128, &v95);
          v129 = v80;
        }
        v130 = 1;
      }
      goto LABEL_281;
    }
    if (!v130)
    {
LABEL_284:
      if (!v130)
      {
        v18 = 0;
        v17 = 0;
LABEL_105:
        if (v133 && v132 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v132])(&v108, &v131);
        goto LABEL_108;
      }
      v26 = 1;
      v23 = v106;
      v24 = v107;
LABEL_61:
      if (v23 == v24)
      {
        if (!(_BYTE)v145 || !v133)
          goto LABEL_305;
        LOBYTE(v108) = 0;
        v109 = -1;
        v27 = v135;
        if (v135 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, uint64_t *))off_1E339BFD0[v135])(&v95, &v108, &v134);
          v109 = v27;
        }
        v28 = v110;
        v110[0] = 0;
        v111 = -1;
        v29 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v142])(&v95, v110, &v141);
          v111 = v29;
        }
        v112[0] = 0;
        v113 = -1;
        v30 = v132;
        if (v132 != -1)
        {
          ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v132])(&v95, v112, &v131);
          v113 = v30;
        }
        v114[0] = 0;
        v116 = 0;
        if (v130)
        {
          v115 = -1;
          v31 = v129;
          if (v129 != -1)
          {
            ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BFD0[v129])(&v95, v114, &v128);
            v115 = v31;
          }
          v116 = 1;
        }
        v117 = *(_DWORD *)(a3 + 8);
        v140 = 0;
        v121 = &v140;
        if (v109 == -1)
          goto LABEL_334;
        v95 = (WTF *)&v121;
        v32 = ((uint64_t (*)(WTF **, unsigned __int16 ***))*(&off_1E339BF48 + v109))(&v95, &v108);
        v139 = 0;
        v121 = &v139;
        if (v111 == -1
          || (v34 = (WTF *)v32,
              v94 = v33,
              v95 = (WTF *)&v121,
              v35 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v111))(&v95, v110),
              v138 = 0,
              v121 = &v138,
              v113 == -1))
        {
LABEL_334:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v37 = v35;
        v38 = v36;
        v95 = (WTF *)&v121;
        v40 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v113))(&v95, v112);
        v41 = v39;
        v137 = 0;
        if (v116)
        {
          v121 = &v137;
          if (v115 == -1)
            goto LABEL_334;
          v95 = (WTF *)&v121;
          v42 = ((uint64_t (*)(WTF **, char *))*(&off_1E339BF48 + v115))(&v95, v114);
          v28 = v39;
          v43 = v42 & 0xFFFFFFFFFFFFFF00;
          v44 = v42;
          if (v137)
            WTF::fastFree((WTF *)(v137 - 8), v39);
          v45 = 1;
        }
        else
        {
          v45 = 0;
          v43 = 0;
          v44 = 0;
        }
        if (v138)
          WTF::fastFree((WTF *)(v138 - 8), v39);
        if (v139)
          WTF::fastFree((WTF *)(v139 - 8), v39);
        if (v140)
          WTF::fastFree((WTF *)(v140 - 8), v39);
        v95 = v34;
        v96 = v94;
        v97 = v37;
        v98 = v38;
        v99 = v40;
        v100 = v41;
        v101 = v44 | v43;
        v102 = v28;
        LOBYTE(v103) = v45;
        *(_DWORD *)((char *)&v103 + 1) = (_DWORD)v121;
        HIDWORD(v103) = *(_DWORD *)((char *)&v121 + 3);
        WebCore::convertToTypedColor<WebCore::OKLabFunction>((uint64_t)&v95);
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v53 = v52;
        v54 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v54 = 1;
        *(_DWORD *)(v54 + 4) = v47;
        *(_DWORD *)(v54 + 8) = v49;
        *(_DWORD *)(v54 + 12) = v51;
        *(_DWORD *)(v54 + 16) = v53;
        if (v116)
        {
          if (v115 != -1)
            ((void (*)(WTF **, char *))off_1E339BEF8[v115])(&v95, v114);
          v115 = -1;
        }
        if (v113 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v113])(&v95, v112);
        v113 = -1;
        if (v111 != -1)
          ((void (*)(WTF **, char *))off_1E339BEF8[v111])(&v95, v110);
        v18 = v54 | 0xE0C000000000000;
        v111 = -1;
        if (v109 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v109])(&v95, &v108);
        v17 = 1;
        if (!v130)
          goto LABEL_105;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        if (!v26)
          goto LABEL_105;
      }
      if (v129 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
      goto LABEL_105;
    }
    if (v129 == -1)
    {
      if ((_DWORD)v96 == -1)
        goto LABEL_281;
    }
    else if ((_DWORD)v96 == -1)
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v129])(&v108, &v128);
      v129 = -1;
LABEL_281:
      if ((_BYTE)v97 && (_DWORD)v96 != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[v96])(&v108, &v95);
      goto LABEL_284;
    }
    v108 = (unsigned __int16 **)&v128;
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***, WTF **))off_1E339BF20[v96])(&v108, &v128, &v95);
    goto LABEL_281;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v106, v5);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)&v108, (WebCore::CSSPropertyParserHelpers *)&v106);
  if (!v119)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_259;
  }
  LOWORD(v141) = 836;
  BYTE2(v141) = 1;
  WORD2(v141) = 838;
  BYTE6(v141) = 1;
  LOWORD(v142) = 833;
  BYTE2(v142) = 1;
  v143 = 126;
  v144[0] = 1;
  v139 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v141, (_BYTE *)&v141 + 2, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, (_WORD *)&v141 + 2, (_BYTE *)&v141 + 6, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v142, (_BYTE *)&v142 + 2, (uint64_t)&v95);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v139, &v143, v144, (uint64_t)&v95);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v138, &v139);
  v20 = *(unsigned __int8 *)(a3 + 4);
  v21 = v138;
  v138 = 0;
  v128 = (unsigned __int16 **)v21;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, (unsigned __int16 **)&v128, v20 | 0x10100000000);
  if (v128)
    WTF::fastFree((WTF *)(v128 - 2), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v131 = &v125;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339C8B8[v96])(&v141, &v131, &v95);
    LOBYTE(v131) = 0;
    v132 = -1;
    v22 = v142;
    if (v142 == -1)
    {
      v133 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v125, &v131, &v141);
      v132 = v22;
      v133 = 1;
      if (v142 != -1)
        ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339BB60[v142])(&v125, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v131) = 0;
    v133 = 0;
  }
  if (v138)
    WTF::fastFree((WTF *)(v138 - 8), v15);
  if (!v133)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_254;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v137, &v139);
  v55 = *(unsigned __int8 *)(a3 + 4);
  v56 = v137;
  v137 = 0;
  v125 = v56;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, &v125, v55 | 0x10100000000);
  if (v125)
    WTF::fastFree((WTF *)(v125 - 8), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v128 = (unsigned __int16 **)&v121;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339C8E8[v96])(&v141, &v128, &v95);
    LOBYTE(v128) = 0;
    v129 = -1;
    v57 = v142;
    if (v142 == -1)
    {
      v130 = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v121, &v128, &v141);
      v129 = v57;
      v130 = 1;
      if (v142 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v142])(&v121, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v128) = 0;
    v130 = 0;
  }
  if (v137)
    WTF::fastFree((WTF *)(v137 - 8), v15);
  if (!v130)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_251;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v124, &v139);
  v58 = *(unsigned __int8 *)(a3 + 4);
  v59 = v124;
  v124 = 0;
  v121 = (unsigned __int16 **)v59;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, (unsigned __int16 **)&v121, v58 | 0x10100000000);
  if (v121)
    WTF::fastFree((WTF *)(v121 - 2), v15);
  if ((_BYTE)v97)
  {
    if ((_DWORD)v96 == -1)
      goto LABEL_334;
    v125 = (unsigned __int16 *)&v134;
    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 **, WTF **))off_1E339C918[v96])(&v141, &v125, &v95);
    LOBYTE(v125) = 0;
    v126 = -1;
    v60 = v142;
    if (v142 == -1)
    {
      v127 = 1;
    }
    else
    {
      ((void (*)(uint64_t *, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v142])(&v134, &v125, &v141);
      v126 = v60;
      v127 = 1;
      if (v142 != -1)
        ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BB60[v142])(&v134, &v141);
    }
    if ((_BYTE)v97 && (_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v96])(&v141, &v95);
  }
  else
  {
    LOBYTE(v125) = 0;
    v127 = 0;
  }
  if (v124)
    WTF::fastFree((WTF *)(v124 - 8), v15);
  if (!v127)
  {
    LOBYTE(v95) = 0;
    v105 = 0;
    goto LABEL_248;
  }
  LOBYTE(v121) = 0;
  v123 = 0;
  v67 = v106;
  v68 = v107;
  v69 = v106;
  if (v106 >= v107)
  {
    v69 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v70 = 0;
  if ((*(_DWORD *)v69 & 0x3F) == 6 && *((_WORD *)v69 + 8) == 47)
  {
    if (v106 == v107)
    {
      v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v86 = 1;
      {
        v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v87;
      }
    }
    else
    {
      v67 = (__int128 *)((char *)v106 + 24);
      v106 = (__int128 *)((char *)v106 + 24);
      v87 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v67 < v107 || (v86 & 1) != 0)
      {
        v88 = v67 >= v107 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v67;
        v89 = *(_DWORD *)v88;
      }
      else
      {
        v87 = v87 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v87;
        v86 = 1;
        LOBYTE(v89) = v87;
      }
      if ((v89 & 0x3F) != 0x10)
        break;
      v67 = (__int128 *)((char *)v67 + 24);
      v106 = v67;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v120, &v139);
    v90 = *(unsigned __int8 *)(a3 + 4);
    v91 = v120;
    v120 = 0;
    v140 = v91;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v95, (uint64_t)&v106, &v140, v90 | 0x10100000000);
    if (v140)
      WTF::fastFree((WTF *)(v140 - 8), v15);
    if (!(_BYTE)v97)
      goto LABEL_306;
    if ((_DWORD)v96 != -1)
    {
      v141 = (unsigned __int16 **)&v136;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 ***, WTF **))off_1E339C948[v96])(&v134, &v141, &v95);
      LOBYTE(v141) = 0;
      v142 = -1;
      v92 = v135;
      if (v135 == -1)
      {
        LOBYTE(v145) = 1;
      }
      else
      {
        ((void (*)(char *, unsigned __int16 ***, uint64_t *))off_1E339BB90[v135])(&v136, &v141, &v134);
        v142 = v92;
        LOBYTE(v145) = 1;
        if (v135 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v135])(&v136, &v134);
      }
      if ((_BYTE)v97 && (_DWORD)v96 != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[v96])(&v134, &v95);
      goto LABEL_311;
    }
    goto LABEL_334;
  }
  while (1)
  {
    if (v67 != v68)
    {
      LOBYTE(v95) = 0;
      v105 = 0;
      goto LABEL_242;
    }
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v141, (uint64_t)&v108);
    if (v133)
    {
      if (v130 && v127)
        break;
    }
LABEL_305:
    __break(1u);
LABEL_306:
    LOBYTE(v141) = 0;
    LOBYTE(v145) = 0;
LABEL_311:
    if (v123 != v145)
    {
      if (v123)
      {
        if (v122 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v122])(&v95, &v121);
        v122 = -1;
        v123 = 0;
      }
      else
      {
        LOBYTE(v121) = 0;
        v122 = -1;
        v93 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v142])(&v95, &v121, &v141);
          v122 = v93;
        }
        v123 = 1;
      }
      goto LABEL_325;
    }
    if (!v123)
      goto LABEL_329;
    if (v122 == -1)
    {
      if (v142 == -1)
        goto LABEL_325;
    }
    else if (v142 == -1)
    {
      ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v122])(&v95, &v121);
      v122 = -1;
      goto LABEL_325;
    }
    v95 = (WTF *)&v121;
    ((void (*)(WTF **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BC80[v142])(&v95, &v121, &v141);
LABEL_325:
    if ((_BYTE)v145)
    {
      if (v142 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v142])(&v95, &v141);
      v142 = -1;
    }
LABEL_329:
    if (v120)
      WTF::fastFree((WTF *)(v120 - 8), v15);
    if (!v123)
    {
      LOBYTE(v95) = 0;
      v105 = 0;
      goto LABEL_245;
    }
    v70 = 1;
    v67 = v106;
    v68 = v107;
  }
  LOBYTE(v142) = 0;
  v145 = -1;
  v71 = v132;
  if (v132 != -1)
  {
    ((void (*)(WTF **, int *, unsigned __int16 ***))off_1E339BB90[v132])(&v95, &v142, &v131);
    v145 = v71;
  }
  v146[0] = 0;
  v147 = -1;
  v72 = v129;
  if (v129 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BB90[v129])(&v95, v146, &v128);
    v147 = v72;
  }
  v148[0] = 0;
  v149 = -1;
  v73 = v126;
  if (v126 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v126])(&v95, v148, &v125);
    v149 = v73;
  }
  v150[0] = 0;
  v152 = 0;
  if (v123)
  {
    v151 = -1;
    v74 = v122;
    if (v122 != -1)
    {
      ((void (*)(WTF **, char *, unsigned __int16 ***))off_1E339BB90[v122])(&v95, v150, &v121);
      v151 = v74;
    }
    v152 = 1;
  }
  v75 = (WTF *)v141;
  v141 = 0;
  v95 = v75;
  LOBYTE(v96) = 0;
  LODWORD(v97) = -1;
  v76 = v145;
  if (v145 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, int *))off_1E339BB90[v145])(&v134, &v96, &v142);
    LODWORD(v97) = v76;
  }
  LOBYTE(v98) = 0;
  LODWORD(v99) = -1;
  v77 = v147;
  if (v147 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, char *))off_1E339BB90[v147])(&v134, &v98, v146);
    LODWORD(v99) = v77;
  }
  LOBYTE(v100) = 0;
  LODWORD(v101) = -1;
  v78 = v149;
  if (v149 != -1)
  {
    ((void (*)(uint64_t *, _BYTE **, char *))off_1E339BB90[v149])(&v134, &v100, v148);
    LODWORD(v101) = v78;
  }
  LOBYTE(v102) = 0;
  v104 = 0;
  if (v152)
  {
    LODWORD(v103) = -1;
    v79 = v151;
    if (v151 == -1)
    {
      v104 = 1;
      v105 = 1;
      goto LABEL_230;
    }
    ((void (*)(uint64_t *, char **, char *))off_1E339BB90[v151])(&v134, &v102, v150);
    LODWORD(v103) = v79;
    v104 = 1;
    v105 = 1;
    if (v152)
    {
      if (v151 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v151])(&v134, v150);
LABEL_230:
      v151 = -1;
    }
  }
  else
  {
    v105 = 1;
  }
  if (v149 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v149])(&v134, v148);
  v149 = -1;
  if (v147 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v147])(&v134, v146);
  v147 = -1;
  if (v145 != -1)
    ((void (*)(uint64_t *, int *))off_1E339BB60[v145])(&v134, &v142);
  v145 = -1;
  v81 = (unsigned int *)v141;
  v141 = 0;
  if (v81)
  {
    v82 = v81[22];
    if ((_DWORD)v82 != -1)
      ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v82])(&v134, v81);
    v81[22] = -1;
    WTF::fastFree((WTF *)v81, v15);
  }
  v70 = v123;
LABEL_242:
  if (v70 && v122 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v122])(&v141, &v121);
LABEL_245:
  if (v127 && v126 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v126])(&v141, &v125);
LABEL_248:
  if (v130 && v129 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v129])(&v141, &v128);
LABEL_251:
  if (v133 && v132 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BB60[v132])(&v141, &v131);
LABEL_254:
  if (v139)
    WTF::fastFree((WTF *)(v139 - 8), v15);
  if (v119 && v118 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v118])(&v141, &v108);
LABEL_259:
  if (!v105)
    goto LABEL_277;
  std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v108, (uint64_t *)&v95);
  v118 = 10;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v108);
  *(_DWORD *)(a1 + 88) = 10;
  *(_BYTE *)(a1 + 96) = 1;
  if (v118 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v118])(&v141, &v108);
  if (v105)
  {
    if (v104)
    {
      if ((_DWORD)v103 != -1)
        ((void (*)(unsigned __int16 ***, char **))off_1E339BB60[v103])(&v108, &v102);
      LODWORD(v103) = -1;
    }
    if ((_DWORD)v101 != -1)
      ((void (*)(unsigned __int16 ***, _BYTE **))off_1E339BB60[v101])(&v108, &v100);
    LODWORD(v101) = -1;
    if ((_DWORD)v99 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v99])(&v108, &v98);
    LODWORD(v99) = -1;
    if ((_DWORD)v97 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v97])(&v108, &v96);
    LODWORD(v97) = -1;
    v84 = (unsigned int *)v95;
    v95 = 0;
    if (v84)
    {
      v85 = v84[22];
      if ((_DWORD)v85 != -1)
        ((void (*)(unsigned __int16 ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v85])(&v108, v84);
      v84[22] = -1;
      WTF::fastFree((WTF *)v84, v83);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeGenericFunction<WebCore::OKLCHFunction>(uint64_t a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  char v59;
  unsigned int v60;
  __int128 *v61;
  int v62;
  uint64_t v63;
  int v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  WTF *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int *v79;
  uint64_t v80;
  void *v81;
  unsigned int *v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  __int128 *v86;
  int v87;
  uint64_t v88;
  unsigned __int16 *v89;
  int v90;
  int v91;
  WTF *v92;
  WTF *v93[2];
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 *v103;
  __int128 *v104;
  unsigned __int16 **v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  _BYTE v109[16];
  int v110;
  char v111[8];
  unsigned int v112;
  char v113;
  int v114;
  int v115;
  char v116;
  unsigned __int16 *v117;
  unsigned __int16 *v118;
  int v119;
  unsigned __int8 v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  unsigned __int16 *v124;
  int v125;
  unsigned __int8 v126;
  char v127[8];
  int v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  unsigned __int16 *v133;
  unsigned __int16 *v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unsigned __int16 **v138;
  int v139;
  __int16 v140;
  char v141[2];
  int v142;
  char v143[8];
  int v144;
  _BYTE v145[16];
  int v146;
  char v147[8];
  int v148;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v103 = v6;
  v104 = (__int128 *)v5;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 779)
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, (unsigned __int16 **)&v121, v7 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v8);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v138 = (unsigned __int16 **)v127;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339CAD8[v106])(v93, &v138, &v105);
      LOBYTE(v118) = 0;
      v119 = -1;
      v9 = (int)v93[1];
      if (LODWORD(v93[1]) == -1)
      {
        v120 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v138, &v118, v93);
        v119 = v9;
        v120 = 1;
        if (LODWORD(v93[1]) != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v138, v93);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
    }
    else
    {
      LOBYTE(v118) = 0;
      v120 = 0;
    }
    if (!v120)
    {
LABEL_277:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    }
    LOBYTE(v130) = 0;
    v131 = -1;
    v10 = v119;
    if (v119 != -1)
    {
      ((void (*)(unsigned __int16 ***, uint64_t *, unsigned __int16 **))off_1E339BFD0[v119])(&v105, &v130, &v118);
      v131 = v10;
    }
    v11 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, (unsigned __int16 **)&v121, v11 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v12);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v138 = (unsigned __int16 **)v127;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339CB00[v106])(v93, &v138, &v105);
      v127[0] = 0;
      v128 = -1;
      v13 = (int)v93[1];
      if (LODWORD(v93[1]) == -1)
      {
        v129 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, char *, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v138, v127, v93);
        v128 = v13;
        v129 = 1;
        if (LODWORD(v93[1]) != -1)
          ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v138, v93);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
    }
    else
    {
      v127[0] = 0;
      v129 = 0;
    }
    if (!v129)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_111;
    }
    v14 = *(unsigned __int8 *)(a3 + 4);
    *(_QWORD *)&v121 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, &v103, (unsigned __int16 **)&v121, v14 | 0x10100000000);
    if ((_QWORD)v121)
      WTF::fastFree((WTF *)(v121 - 16), v15);
    if ((_BYTE)v108)
    {
      if (v107 == -1)
        goto LABEL_334;
      v138 = &v124;
      ((void (*)(WTF **__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339CB28[v107])(v93, &v138, &v105);
      LOBYTE(v138) = 0;
      v142 = -1;
      v16 = v94;
      if ((_DWORD)v94 == -1)
      {
        v143[0] = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, WTF **))off_1E339C470[v94])(&v124, &v138, v93);
        v142 = v16;
        v143[0] = 1;
        if ((_DWORD)v94 != -1)
          ((void (*)(unsigned __int16 **, WTF **))off_1E339C448[v94])(&v124, v93);
      }
      if ((_BYTE)v108 && v107 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339C448[v107])(v93, &v105);
    }
    else
    {
      LOBYTE(v138) = 0;
      v143[0] = 0;
    }
    if (!v143[0])
    {
      v17 = 0;
      v18 = 0;
LABEL_108:
      if (v129 && v128 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E339BEF8[v128])(&v105, v127);
LABEL_111:
      if (v131 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BEF8[v131])(&v105, &v130);
      v131 = -1;
      if (v120)
      {
        if (v119 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v119])(&v105, &v118);
      }
      if (v17)
      {
        *(_QWORD *)a1 = v18;
        *(_DWORD *)(a1 + 88) = 0;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_277;
    }
    LOBYTE(v124) = 0;
    v126 = 0;
    v23 = v103;
    v24 = v104;
    v25 = v103;
    if (v103 >= v104)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v26 = 0;
    if ((*(_DWORD *)v25 & 0x3F) != 6 || *((_WORD *)v25 + 8) != 47)
      goto LABEL_61;
    if (v103 == v104)
    {
      v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v59 = 1;
      {
        v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v60;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v103 + 24);
      v103 = (__int128 *)((char *)v103 + 24);
      v60 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v23 < v104 || (v59 & 1) != 0)
      {
        v61 = v23 >= v104 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v62 = *(_DWORD *)v61;
      }
      else
      {
        v60 = v60 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v60;
        v59 = 1;
        LOBYTE(v62) = v60;
      }
      if ((v62 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v103 = v23;
    }
    v63 = *(unsigned __int8 *)(a3 + 4);
    v137 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v105, (uint64_t)&v103, &v137, v63 | 0x10100000000);
    if (v137)
      WTF::fastFree((WTF *)(v137 - 8), v15);
    if ((_BYTE)v107)
    {
      if (v106 == -1)
        goto LABEL_334;
      v93[0] = (WTF *)&v136;
      ((void (*)(__int128 *__return_ptr, WTF **, unsigned __int16 ***))off_1E339CB50[v106])(&v121, v93, &v105);
      LOBYTE(v93[0]) = 0;
      LODWORD(v93[1]) = -1;
      v64 = DWORD2(v121);
      if (DWORD2(v121) == -1)
      {
        LOBYTE(v94) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, WTF **, __int128 *))off_1E339BFD0[DWORD2(v121)])(&v136, v93, &v121);
        LODWORD(v93[1]) = v64;
        LOBYTE(v94) = 1;
        if (DWORD2(v121) != -1)
          ((void (*)(unsigned __int16 **, __int128 *))off_1E339BEF8[DWORD2(v121)])(&v136, &v121);
      }
      if ((_BYTE)v107 && v106 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BEF8[v106])(&v121, &v105);
    }
    else
    {
      LOBYTE(v93[0]) = 0;
      LOBYTE(v94) = 0;
    }
    if (v126 != v94)
    {
      if (v126)
      {
        if (v125 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
        v125 = -1;
        v126 = 0;
      }
      else
      {
        LOBYTE(v124) = 0;
        v125 = -1;
        v78 = (int)v93[1];
        if (LODWORD(v93[1]) != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BFD0[LODWORD(v93[1])])(&v105, &v124, v93);
          v125 = v78;
        }
        v126 = 1;
      }
      goto LABEL_281;
    }
    if (!v126)
    {
LABEL_284:
      if (!v126)
      {
        v18 = 0;
        v17 = 0;
LABEL_105:
        if (v143[0] && v142 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339C448[v142])(&v105, &v138);
        goto LABEL_108;
      }
      v26 = 1;
      v23 = v103;
      v24 = v104;
LABEL_61:
      if (v23 == v24)
      {
        if (!v129 || !v143[0])
          goto LABEL_305;
        LOBYTE(v105) = 0;
        v106 = -1;
        v27 = v131;
        if (v131 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 ***, uint64_t *))off_1E339BFD0[v131])(v93, &v105, &v130);
          v106 = v27;
        }
        LOBYTE(v107) = 0;
        v108 = -1;
        v28 = v128;
        if (v128 != -1)
        {
          ((void (*)(WTF **, int *, char *))off_1E339BFD0[v128])(v93, &v107, v127);
          v108 = v28;
        }
        v109[0] = 0;
        v110 = -1;
        v29 = v142;
        if (v142 != -1)
        {
          ((void (*)(WTF **, _BYTE *, unsigned __int16 ***))off_1E339C470[v142])(v93, v109, &v138);
          v110 = v29;
        }
        v30 = v111;
        v111[0] = 0;
        v113 = 0;
        if (v126)
        {
          v112 = -1;
          v31 = v125;
          if (v125 != -1)
          {
            ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BFD0[v125])(v93, v111, &v124);
            v112 = v31;
          }
          v113 = 1;
        }
        v114 = *(_DWORD *)(a3 + 8);
        v136 = 0;
        *(_QWORD *)&v121 = &v136;
        if (v106 == -1)
          goto LABEL_334;
        v93[0] = (WTF *)&v121;
        v32 = ((uint64_t (*)(WTF **, unsigned __int16 ***))*(&off_1E339BF48 + v106))(v93, &v105);
        v135 = 0;
        *(_QWORD *)&v121 = &v135;
        if (v108 == -1
          || (v34 = (WTF *)v32,
              v92 = v33,
              v93[0] = (WTF *)&v121,
              v35 = ((uint64_t (*)(WTF **, int *))*(&off_1E339BF48 + v108))(v93, &v107),
              v134 = 0,
              v137 = (unsigned __int16 *)&v134,
              v110 == -1))
        {
LABEL_334:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        v37 = v35;
        v38 = v36;
        *(_QWORD *)&v121 = &v137;
        ((void (*)(WTF **__return_ptr, __int128 *, _BYTE *))off_1E339C420[v110])(v93, &v121, v109);
        v133 = 0;
        if (v113)
        {
          v137 = (unsigned __int16 *)&v133;
          if (v112 == -1)
            goto LABEL_334;
          *(_QWORD *)&v121 = &v137;
          v40 = ((uint64_t (*)(__int128 *, char *))*(&off_1E339BF48 + v112))(&v121, v111);
          v30 = v39;
          v41 = v40 & 0xFFFFFFFFFFFFFF00;
          v42 = v40;
          v121 = *(_OWORD *)v93;
          v122 = v94;
          if (v133)
            WTF::fastFree((WTF *)(v133 - 8), v39);
          v43 = 1;
        }
        else
        {
          v43 = 0;
          v41 = 0;
          v42 = 0;
          v121 = *(_OWORD *)v93;
          v122 = v94;
        }
        if (v134)
          WTF::fastFree((WTF *)(v134 - 8), v39);
        if (v135)
          WTF::fastFree((WTF *)(v135 - 8), v39);
        if (v136)
          WTF::fastFree((WTF *)(v136 - 8), v39);
        v93[0] = v34;
        v93[1] = v92;
        v94 = v37;
        v95 = v38;
        v96 = v121;
        v97 = v122;
        v98 = v42 | v41;
        v99 = v30;
        LOBYTE(v100) = v43;
        *(_DWORD *)((char *)&v100 + 1) = (_DWORD)v137;
        HIDWORD(v100) = *(_DWORD *)((char *)&v137 + 3);
        WebCore::convertToTypedColor<WebCore::OKLCHFunction>((uint64_t)v93);
        v45 = v44;
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v52 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v52 = 1;
        *(_DWORD *)(v52 + 4) = v45;
        *(_DWORD *)(v52 + 8) = v47;
        *(_DWORD *)(v52 + 12) = v49;
        *(_DWORD *)(v52 + 16) = v51;
        if (v113)
        {
          if (v112 != -1)
            ((void (*)(WTF **, char *))off_1E339BEF8[v112])(v93, v111);
          v112 = -1;
        }
        if (v110 != -1)
          ((void (*)(WTF **, _BYTE *))off_1E339C448[v110])(v93, v109);
        v110 = -1;
        if (v108 != -1)
          ((void (*)(WTF **, int *))off_1E339BEF8[v108])(v93, &v107);
        v18 = v52 | 0xD0C000000000000;
        v108 = -1;
        if (v106 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BEF8[v106])(v93, &v105);
        v17 = 1;
        if (!v126)
          goto LABEL_105;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        if (!v26)
          goto LABEL_105;
      }
      if (v125 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
      goto LABEL_105;
    }
    if (v125 == -1)
    {
      if (LODWORD(v93[1]) == -1)
        goto LABEL_281;
    }
    else if (LODWORD(v93[1]) == -1)
    {
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v125])(&v105, &v124);
      v125 = -1;
LABEL_281:
      if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BEF8[LODWORD(v93[1])])(&v105, v93);
      goto LABEL_284;
    }
    v105 = &v124;
    ((void (*)(unsigned __int16 ***, unsigned __int16 **, WTF **))off_1E339BF20[LODWORD(v93[1])])(&v105, &v124, v93);
    goto LABEL_281;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v103, v5);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)&v105, (WebCore::CSSPropertyParserHelpers *)&v103);
  if (!v116)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_259;
  }
  LOWORD(v138) = 836;
  BYTE2(v138) = 1;
  WORD2(v138) = 839;
  BYTE6(v138) = 1;
  LOWORD(v139) = 834;
  BYTE2(v139) = 1;
  v140 = 126;
  v141[0] = 1;
  v136 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v138, (_BYTE *)&v138 + 2, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, (_WORD *)&v138 + 2, (_BYTE *)&v138 + 6, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v139, (_BYTE *)&v139 + 2, (uint64_t)v93);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v136, &v140, v141, (uint64_t)v93);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v135, &v136);
  v20 = *(unsigned __int8 *)(a3 + 4);
  v21 = v135;
  v135 = 0;
  v124 = v21;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v124, v20 | 0x10100000000);
  if (v124)
    WTF::fastFree((WTF *)(v124 - 8), v15);
  if ((_BYTE)v94)
  {
    if (LODWORD(v93[1]) == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = v127;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339CA18[LODWORD(v93[1])])(&v138, &v121, v93);
    v127[0] = 0;
    v128 = -1;
    v22 = v139;
    if (v139 == -1)
    {
      v129 = 1;
    }
    else
    {
      ((void (*)(__int128 *, char *, unsigned __int16 ***))off_1E339BB90[v139])(&v121, v127, &v138);
      v128 = v22;
      v129 = 1;
      if (v139 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BB60[v139])(&v121, &v138);
    }
    if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v138, v93);
  }
  else
  {
    v127[0] = 0;
    v129 = 0;
  }
  if (v135)
    WTF::fastFree((WTF *)(v135 - 8), v15);
  if (!v129)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_254;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v134, &v136);
  v53 = *(unsigned __int8 *)(a3 + 4);
  v54 = v134;
  v134 = 0;
  v118 = v54;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v118, v53 | 0x10100000000);
  if (v118)
    WTF::fastFree((WTF *)(v118 - 8), v15);
  if ((_BYTE)v94)
  {
    if (LODWORD(v93[1]) == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = &v124;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339CA48[LODWORD(v93[1])])(&v138, &v121, v93);
    LOBYTE(v124) = 0;
    v125 = -1;
    v55 = v139;
    if (v139 == -1)
    {
      v126 = 1;
    }
    else
    {
      ((void (*)(__int128 *, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v139])(&v121, &v124, &v138);
      v125 = v55;
      v126 = 1;
      if (v139 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BB60[v139])(&v121, &v138);
    }
    if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v138, v93);
  }
  else
  {
    LOBYTE(v124) = 0;
    v126 = 0;
  }
  if (v134)
    WTF::fastFree((WTF *)(v134 - 8), v15);
  if (!v126)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_251;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v133, &v136);
  v56 = *(unsigned __int8 *)(a3 + 4);
  v57 = v133;
  v133 = 0;
  v118 = v57;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v118, v56 | 0x10100000000);
  if (v118)
    WTF::fastFree((WTF *)(v118 - 8), v15);
  if ((_BYTE)v95)
  {
    if ((_DWORD)v94 == -1)
      goto LABEL_334;
    *(_QWORD *)&v121 = &v130;
    ((void (*)(unsigned __int16 ***__return_ptr, __int128 *, WTF **))off_1E339CA78[v94])(&v138, &v121, v93);
    LOBYTE(v121) = 0;
    LODWORD(v122) = -1;
    v58 = v142;
    if (v142 == -1)
    {
      v123 = 1;
    }
    else
    {
      ((void (*)(uint64_t *, __int128 *, unsigned __int16 ***))off_1E339C1A8[v142])(&v130, &v121, &v138);
      LODWORD(v122) = v58;
      v123 = 1;
      if (v142 != -1)
        ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339C098[v142])(&v130, &v138);
    }
    if ((_BYTE)v95 && (_DWORD)v94 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339C098[v94])(&v138, v93);
  }
  else
  {
    LOBYTE(v121) = 0;
    v123 = 0;
  }
  if (v133)
    WTF::fastFree((WTF *)(v133 - 8), v15);
  if (!v123)
  {
    LOBYTE(v93[0]) = 0;
    v102 = 0;
    goto LABEL_248;
  }
  LOBYTE(v118) = 0;
  v120 = 0;
  v65 = v103;
  v66 = v104;
  v67 = v103;
  if (v103 >= v104)
  {
    v67 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v68 = 0;
  if ((*(_DWORD *)v67 & 0x3F) == 6 && *((_WORD *)v67 + 8) == 47)
  {
    if (v103 == v104)
    {
      v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v84 = 1;
      {
        v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v85;
      }
    }
    else
    {
      v65 = (__int128 *)((char *)v103 + 24);
      v103 = (__int128 *)((char *)v103 + 24);
      v85 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v65 < v104 || (v84 & 1) != 0)
      {
        v86 = v65 >= v104 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v65;
        v87 = *(_DWORD *)v86;
      }
      else
      {
        v85 = v85 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v85;
        v84 = 1;
        LOBYTE(v87) = v85;
      }
      if ((v87 & 0x3F) != 0x10)
        break;
      v65 = (__int128 *)((char *)v65 + 24);
      v103 = v65;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v117, &v136);
    v88 = *(unsigned __int8 *)(a3 + 4);
    v89 = v117;
    v117 = 0;
    v137 = v89;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)v93, (uint64_t)&v103, &v137, v88 | 0x10100000000);
    if (v137)
      WTF::fastFree((WTF *)(v137 - 8), v15);
    if (!(_BYTE)v94)
      goto LABEL_306;
    if (LODWORD(v93[1]) != -1)
    {
      v138 = (unsigned __int16 **)&v132;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 ***, WTF **))off_1E339CAA8[LODWORD(v93[1])])(&v130, &v138, v93);
      LOBYTE(v138) = 0;
      v139 = -1;
      v90 = v131;
      if (v131 == -1)
      {
        LOBYTE(v142) = 1;
      }
      else
      {
        ((void (*)(char *, unsigned __int16 ***, uint64_t *))off_1E339BB90[v131])(&v132, &v138, &v130);
        v139 = v90;
        LOBYTE(v142) = 1;
        if (v131 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v131])(&v132, &v130);
      }
      if ((_BYTE)v94 && LODWORD(v93[1]) != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[LODWORD(v93[1])])(&v130, v93);
      goto LABEL_311;
    }
    goto LABEL_334;
  }
  while (1)
  {
    if (v65 != v66)
    {
      LOBYTE(v93[0]) = 0;
      v102 = 0;
      goto LABEL_242;
    }
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v138, (uint64_t)&v105);
    if (v129)
    {
      if (v126 && v123)
        break;
    }
LABEL_305:
    __break(1u);
LABEL_306:
    LOBYTE(v138) = 0;
    LOBYTE(v142) = 0;
LABEL_311:
    if (v120 != v142)
    {
      if (v120)
      {
        if (v119 != -1)
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v119])(v93, &v118);
        v119 = -1;
        v120 = 0;
      }
      else
      {
        LOBYTE(v118) = 0;
        v119 = -1;
        v91 = v139;
        if (v139 != -1)
        {
          ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 ***))off_1E339BB90[v139])(v93, &v118, &v138);
          v119 = v91;
        }
        v120 = 1;
      }
      goto LABEL_325;
    }
    if (!v120)
      goto LABEL_329;
    if (v119 == -1)
    {
      if (v139 == -1)
        goto LABEL_325;
    }
    else if (v139 == -1)
    {
      ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v119])(v93, &v118);
      v119 = -1;
      goto LABEL_325;
    }
    v93[0] = (WTF *)&v118;
    ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 ***))off_1E339BC80[v139])(v93, &v118, &v138);
LABEL_325:
    if ((_BYTE)v142)
    {
      if (v139 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v139])(v93, &v138);
      v139 = -1;
    }
LABEL_329:
    if (v117)
      WTF::fastFree((WTF *)(v117 - 8), v15);
    if (!v120)
    {
      LOBYTE(v93[0]) = 0;
      v102 = 0;
      goto LABEL_245;
    }
    v68 = 1;
    v65 = v103;
    v66 = v104;
  }
  LOBYTE(v139) = 0;
  v142 = -1;
  v69 = v128;
  if (v128 != -1)
  {
    ((void (*)(WTF **, int *, char *))off_1E339BB90[v128])(v93, &v139, v127);
    v142 = v69;
  }
  v143[0] = 0;
  v144 = -1;
  v70 = v125;
  if (v125 != -1)
  {
    ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v125])(v93, v143, &v124);
    v144 = v70;
  }
  v145[0] = 0;
  v146 = -1;
  v71 = v122;
  if ((_DWORD)v122 != -1)
  {
    ((void (*)(WTF **, _BYTE *, __int128 *))off_1E339C1A8[v122])(v93, v145, &v121);
    v146 = v71;
  }
  v147[0] = 0;
  v149 = 0;
  if (v120)
  {
    v148 = -1;
    v72 = v119;
    if (v119 != -1)
    {
      ((void (*)(WTF **, char *, unsigned __int16 **))off_1E339BB90[v119])(v93, v147, &v118);
      v148 = v72;
    }
    v149 = 1;
  }
  v73 = (WTF *)v138;
  v138 = 0;
  v93[0] = v73;
  LOBYTE(v93[1]) = 0;
  LODWORD(v94) = -1;
  v74 = v142;
  if (v142 != -1)
  {
    ((void (*)(uint64_t *, WTF **, int *))off_1E339BB90[v142])(&v130, &v93[1], &v139);
    LODWORD(v94) = v74;
  }
  LOBYTE(v95) = 0;
  LODWORD(v96) = -1;
  v75 = v144;
  if (v144 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *, char *))off_1E339BB90[v144])(&v130, &v95, v143);
    LODWORD(v96) = v75;
  }
  BYTE8(v96) = 0;
  LODWORD(v98) = -1;
  v76 = v146;
  if (v146 != -1)
  {
    ((void (*)(uint64_t *, char *, _BYTE *))off_1E339C1A8[v146])(&v130, (char *)&v96 + 8, v145);
    LODWORD(v98) = v76;
  }
  LOBYTE(v99) = 0;
  v101 = 0;
  if (v149)
  {
    LODWORD(v100) = -1;
    v77 = v148;
    if (v148 == -1)
    {
      v101 = 1;
      v102 = 1;
      goto LABEL_230;
    }
    ((void (*)(uint64_t *, char **, char *))off_1E339BB90[v148])(&v130, &v99, v147);
    LODWORD(v100) = v77;
    v101 = 1;
    v102 = 1;
    if (v149)
    {
      if (v148 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v148])(&v130, v147);
LABEL_230:
      v148 = -1;
    }
  }
  else
  {
    v102 = 1;
  }
  if (v146 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E339C098[v146])(&v130, v145);
  v146 = -1;
  if (v144 != -1)
    ((void (*)(uint64_t *, char *))off_1E339BB60[v144])(&v130, v143);
  v144 = -1;
  if (v142 != -1)
    ((void (*)(uint64_t *, int *))off_1E339BB60[v142])(&v130, &v139);
  v142 = -1;
  v79 = (unsigned int *)v138;
  v138 = 0;
  if (v79)
  {
    v80 = v79[22];
    if ((_DWORD)v80 != -1)
      ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v80])(&v130, v79);
    v79[22] = -1;
    WTF::fastFree((WTF *)v79, v15);
  }
  v68 = v120;
LABEL_242:
  if (v68 && v119 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v119])(&v138, &v118);
LABEL_245:
  if (v123 && (_DWORD)v122 != -1)
    ((void (*)(unsigned __int16 ***, __int128 *))off_1E339C098[v122])(&v138, &v121);
LABEL_248:
  if (v126 && v125 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BB60[v125])(&v138, &v124);
LABEL_251:
  if (v129 && v128 != -1)
    ((void (*)(unsigned __int16 ***, char *))off_1E339BB60[v128])(&v138, v127);
LABEL_254:
  if (v136)
    WTF::fastFree((WTF *)(v136 - 8), v15);
  if (v116 && v115 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v115])(&v138, &v105);
LABEL_259:
  if (!v102)
    goto LABEL_277;
  std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>((uint64_t)&v105, (uint64_t *)v93);
  v115 = 11;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(a1, (uint64_t *)&v105);
  *(_DWORD *)(a1 + 88) = 11;
  *(_BYTE *)(a1 + 96) = 1;
  if (v115 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v115])(&v138, &v105);
  if (v102)
  {
    if (v101)
    {
      if ((_DWORD)v100 != -1)
        ((void (*)(unsigned __int16 ***, char **))off_1E339BB60[v100])(&v105, &v99);
      LODWORD(v100) = -1;
    }
    if ((_DWORD)v98 != -1)
      ((void (*)(unsigned __int16 ***, char *))off_1E339C098[v98])(&v105, (char *)&v96 + 8);
    LODWORD(v98) = -1;
    if ((_DWORD)v96 != -1)
      ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BB60[v96])(&v105, &v95);
    LODWORD(v96) = -1;
    if ((_DWORD)v94 != -1)
      ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v94])(&v105, &v93[1]);
    LODWORD(v94) = -1;
    v82 = (unsigned int *)v93[0];
    v93[0] = 0;
    if (v82)
    {
      v83 = v82[22];
      if ((_DWORD)v83 != -1)
        ((void (*)(unsigned __int16 ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v83])(&v105, v82);
      v82[22] = -1;
      WTF::fastFree((WTF *)v82, v81);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeColorFunction(_BYTE *a1, __int128 **this, uint64_t a3)
{
  WebCore::CSSParserTokenRange *v5;
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  __int128 *v8;
  int v9;
  int v10;
  __int128 *v11;
  int v12;
  __int128 **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[11];
  int v17;
  char v18;
  __int128 *v19;
  unint64_t v20;
  _QWORD v21[2];

  v6 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v7 = v5;
  v19 = v6;
  v20 = (unint64_t)v5;
  v8 = v6;
  if (v5 <= (WebCore::CSSParserTokenRange *)v6)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v10 = *((_DWORD *)v8 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v10;
  }
  if ((unsigned __int16)v10 != 779)
  {
LABEL_3:
    v13 = &v19;
    v14 = a3;
    if (v7 <= (WebCore::CSSParserTokenRange *)v6)
    {
      v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v6 & 0x3F) != 0)
    {
      LOWORD(v9) = 0;
    }
    else
    {
      v9 = *((_DWORD *)v6 + 4);
      if (v9 < 0)
      {
        v9 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
        *((_DWORD *)v6 + 4) = v9;
      }
    }
    v16[0] = &v19;
    v16[1] = &v13;
    _ZN7WebCore24CSSPropertyParserHelpersL21callWithColorFunctionIZNS0_L17consumeColorSpaceIZNS0_L20consumeColorFunctionERNS_19CSSParserTokenRangeERNS0_16ColorParserStateEE3__1EEDTcldtfp0_onclINS_16ColorRGBFunctionINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEEEEES4_OT_EUlTyvE_EESD_NS_10CSSValueIDESF_((uint64_t)a1, (WebCore::CSSParserTokenRange *)(unsigned __int16)v9, (uint64_t)v16);
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v19, v5);
    WebCore::CSSPropertyParserHelpers::consumeColor((int)v16, (WebCore::CSSPropertyParserHelpers *)&v19);
    if (v18)
    {
      v13 = &v19;
      v14 = a3;
      v15 = v16;
      v11 = v19;
      if ((unint64_t)v19 >= v20)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) != 0)
      {
        LOWORD(v12) = 0;
      }
      else
      {
        v12 = *((_DWORD *)v11 + 4);
        if (v12 < 0)
        {
          v12 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
          *((_DWORD *)v11 + 4) = v12;
        }
      }
      v21[0] = &v19;
      v21[1] = &v13;
      _ZN7WebCore24CSSPropertyParserHelpersL21callWithColorFunctionIZNS0_L17consumeColorSpaceIZNS0_L20consumeColorFunctionERNS_19CSSParserTokenRangeERNS0_16ColorParserStateEE3__0EEDTcldtfp0_onclINS_16ColorRGBFunctionINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEEEEES4_OT_EUlTyvE_EESD_NS_10CSSValueIDESF_((uint64_t)a1, (WebCore::CSSParserTokenRange *)(unsigned __int16)v12, (uint64_t)v21);
      if (v18 && v17 != -1)
        ((void (*)(__int128 ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v17])(&v13, v16);
    }
    else
    {
      *a1 = 0;
      a1[96] = 0;
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeColorContrastFunction(uint64_t a1, __int128 **this, uint64_t a3)
{
  __int128 *v5;
  void *v6;
  __int128 *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  __int128 *v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  WTF *v25;
  __int128 *v26;
  unsigned int v27;
  __int128 *v28;
  __int128 *v29;
  char v30;
  unsigned int v31;
  __int128 *v32;
  int v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  unsigned int v38;
  __int128 *v39;
  int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  WTF *v46;
  __int128 *v47;
  __int128 *v48;
  unint64_t v49;
  double v50;
  double v51;
  WebCore::Color *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unsigned int v61;
  uint64_t v62;
  double v63;
  double v64;
  WTF *v65;
  uint64_t v66;
  double v67;
  WebCore::Color *v68;
  double v69;
  double v70;
  double v71;
  char v72;
  __int128 *v73;
  char v74;
  unsigned int v75;
  __int128 *v76;
  unsigned int v77;
  WTF *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  void *v83;
  void *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;

  if (!*(_BYTE *)(a3 + 2))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    return;
  }
  v88 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v89 = v5;
  WebCore::CSSPropertyParserHelpers::consumeColorRawForLegacyColorContrast(&v87, (WebCore::CSSPropertyParserHelpers *)&v88, a3);
  if ((v87 & 0x4000000000000) == 0)
    goto LABEL_6;
  v7 = v88;
  if (v88 < v89)
  {
    v8 = *(_DWORD *)v88;
    if ((*(_DWORD *)v88 & 0x3F) == 0)
      goto LABEL_5;
LABEL_6:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    goto LABEL_7;
  }
  v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  {
    v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
  }
  if ((v8 & 0x3F) != 0)
    goto LABEL_6;
  v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_5:
  if ((v8 & 0x3F) != 0)
    goto LABEL_6;
  v12 = *((_DWORD *)v7 + 4);
  if (v12 < 0)
  {
    v12 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((v8 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v12;
  }
  if ((unsigned __int16)v12 != 945)
    goto LABEL_6;
  v13 = v88;
  if (v88 == v89)
  {
    v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v15 = 1;
    {
      v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
    }
    v14 = v88;
    v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v14 = (__int128 *)((char *)v88 + 24);
    v88 = (__int128 *)((char *)v88 + 24);
    v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  while (1)
  {
    if (v14 < v89 || (v15 & 1) != 0)
    {
      v17 = v14 >= v89 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v14;
      v18 = *(_DWORD *)v17;
    }
    else
    {
      v16 = v16 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      v15 = 1;
      LOBYTE(v18) = v16;
    }
    if ((v18 & 0x3F) != 0x10)
      break;
    v14 = (__int128 *)((char *)v14 + 24);
    v88 = v14;
  }
  if ((*(_DWORD *)v13 & 0x3F) == 0 && (v13[1] & 0x80000000) != 0)
    *((_DWORD *)v13 + 4) = WebCore::cssValueKeywordID(*((_QWORD *)v13 + 1), *((unsigned int *)v13 + 1) | ((unint64_t)((*(_DWORD *)v13 >> 22) & 1) << 32));
  v19 = 0;
  v85 = 0;
  v86 = 0;
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeColorRawForLegacyColorContrast(&v91, (WebCore::CSSPropertyParserHelpers *)&v88, a3);
    v20 = v91;
    if ((v91 & 0x4000000000000) != 0)
    {
      v22 = HIDWORD(v86);
      if (HIDWORD(v86) == (_DWORD)v86)
      {
        v23 = (_QWORD *)WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, HIDWORD(v86) + 1, (unint64_t)&v91);
        v22 = HIDWORD(v86);
        v24 = v85;
        *((_QWORD *)v85 + HIDWORD(v86)) = 0;
        if (*v23)
        {
          *((_QWORD *)v24 + v22) = *v23;
          *v23 = 0;
        }
      }
      else
      {
        v25 = v85;
        *((_QWORD *)v85 + HIDWORD(v86)) = 0;
        if (v91)
        {
          *((_QWORD *)v25 + v22) = v91;
          v91 = 0;
        }
      }
      HIDWORD(v86) = v22 + 1;
      v26 = v88;
      if (v88 >= v89)
      {
        v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
        }
        if ((v27 & 0x3F) != 0)
          goto LABEL_45;
        v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v27 = *(_DWORD *)v88;
        if ((*(_DWORD *)v88 & 0x3F) != 0)
          goto LABEL_45;
      }
      if ((v27 & 0x3F) == 0)
      {
        v34 = *((_DWORD *)v26 + 4);
        if (v34 < 0)
        {
          v34 = WebCore::cssValueKeywordID(*((_QWORD *)v26 + 1), *((unsigned int *)v26 + 1) | ((unint64_t)((v27 >> 22) & 1) << 32));
          *((_DWORD *)v26 + 4) = v34;
        }
        if ((unsigned __int16)v34 == 780)
        {
          v35 = v88;
          if (v88 == v89)
          {
            v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v37 = 1;
            {
              v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
            }
            v36 = v88;
            v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v36 = (__int128 *)((char *)v88 + 24);
            v88 = (__int128 *)((char *)v88 + 24);
            v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          while (1)
          {
            if (v36 < v89 || (v37 & 1) != 0)
            {
              v39 = v36 >= v89 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v36;
              v40 = *(_DWORD *)v39;
            }
            else
            {
              v38 = v38 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
              v37 = 1;
              LOBYTE(v40) = v38;
            }
            if ((v40 & 0x3F) != 0x10)
              break;
            v36 = (__int128 *)((char *)v36 + 24);
            v88 = v36;
          }
          if ((*(_DWORD *)v35 & 0x3F) == 0 && (v35[1] & 0x80000000) != 0)
            *((_DWORD *)v35 + 4) = WebCore::cssValueKeywordID(*((_QWORD *)v35 + 1), *((unsigned int *)v35 + 1) | ((unint64_t)((*(_DWORD *)v35 >> 22) & 1) << 32));
          v21 = 2;
          v19 = 1;
          goto LABEL_46;
        }
      }
LABEL_45:
      v21 = 0;
LABEL_46:
      v20 = v91;
      goto LABEL_47;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    v21 = 1;
LABEL_47:
    if ((v20 & 0x8000000000000) != 0)
    {
      v41 = v21;
      v42 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v43 = __ldaxr(v42);
        v44 = --v43 == 0;
      }
      while (__stlxr(v43, v42));
      v21 = v41;
      if (v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v6);
        v21 = v41;
      }
    }
    if (v21)
      break;
    v28 = v88;
    v29 = v88;
    if (v88 >= v89)
    {
      v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v29 & 0x3F) != 0x15)
      goto LABEL_97;
    if (v88 == v89)
    {
      v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v30 = 1;
      {
        v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
      }
    }
    else
    {
      v28 = (__int128 *)((char *)v88 + 24);
      v88 = (__int128 *)((char *)v88 + 24);
      v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v28 < v89 || (v30 & 1) != 0)
      {
        v32 = v28 >= v89 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v28;
        v33 = *(_DWORD *)v32;
      }
      else
      {
        v31 = v31 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
        v30 = 1;
        LOBYTE(v33) = v31;
      }
      if ((v33 & 0x3F) != 0x10)
        break;
      v28 = (__int128 *)((char *)v28 + 24);
      v88 = v28;
    }
  }
  if (v21 != 2)
    goto LABEL_161;
LABEL_97:
  v45 = HIDWORD(v86);
  if (HIDWORD(v86) == 1)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    v46 = v85;
    goto LABEL_162;
  }
  v47 = v88;
  if ((v19 & 1) == 0)
  {
    if (v88 == v89)
    {
      v63 = WebCore::Color::luminance((WebCore::Color *)&v87);
      if (!HIDWORD(v86))
      {
        __break(0xC471u);
        JUMPOUT(0x1958A12A8);
      }
      v64 = v63;
      v65 = v85;
      v66 = 8 * HIDWORD(v86);
      v67 = 0.0;
      v68 = v85;
      do
      {
        v69 = WebCore::Color::luminance(v68);
        if (v64 >= v69)
          v70 = v64;
        else
          v70 = v69;
        if (v64 < v69)
          v69 = v64;
        v71 = (v70 + 0.05) / (v69 + 0.05);
        if (v71 > v67)
        {
          v67 = v71;
          v65 = v68;
        }
        v68 = (WebCore::Color *)((char *)v68 + 8);
        v66 -= 8;
      }
      while (v66);
      v62 = *(_QWORD *)v65;
      if (*(_QWORD *)v65)
        *(_QWORD *)v65 = 0;
      goto LABEL_144;
    }
    goto LABEL_159;
  }
  v48 = v88;
  if (v88 >= v89)
  {
    v48 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v48 & 0x3F) == 0)
  {
    if (v88 == v89)
    {
      v75 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v74 = 1;
      {
        v75 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v75;
      }
      v73 = v88;
      v47 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v73 = (__int128 *)((char *)v88 + 24);
      v88 = (__int128 *)((char *)v88 + 24);
      v75 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v73 < v89 || (v74 & 1) != 0)
      {
        v76 = v73 >= v89 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v73;
        v77 = *(_DWORD *)v76;
      }
      else
      {
        v77 = v75 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v77;
        v74 = 1;
        v75 = v77;
      }
      if ((v77 & 0x3F) != 0x10)
        break;
      v73 = (__int128 *)((char *)v73 + 24);
      v88 = v73;
    }
    if ((*(_DWORD *)v47 & 0x3F) == 0)
    {
      v82 = *((_DWORD *)v47 + 4);
      if (v82 < 0)
      {
        v82 = WebCore::cssValueKeywordID(*((_QWORD *)v47 + 1), *((unsigned int *)v47 + 1) | ((unint64_t)((*(_DWORD *)v47 >> 22) & 1) << 32));
        *((_DWORD *)v47 + 4) = v82;
      }
      if ((unsigned __int16)(v82 - 946) <= 3u)
      {
        v49 = WebCore::CSSPropertyParserHelpers::consumeColorContrastFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0::operator() const(void)::targetContrastMappings[2 * (unsigned __int16)(v82 - 946) + 1];
        goto LABEL_107;
      }
    }
    goto LABEL_159;
  }
  v90 = 0;
  v91 = 0;
  v49 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v88, &v91, (uint64_t)&v90, 0x10100000000);
  if (v90)
  {
    v83 = v6;
    WTF::fastFree((WTF *)(v90 - 16), v6);
    v6 = v83;
  }
  if (v91)
  {
    v84 = v6;
    WTF::fastFree((WTF *)(v91 - 16), v6);
    v6 = v84;
  }
  if (!(_BYTE)v6)
  {
LABEL_159:
    v72 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_160;
  }
LABEL_107:
  if (v88 != v89)
    goto LABEL_159;
  v50 = WebCore::Color::luminance((WebCore::Color *)&v87);
  if (HIDWORD(v86))
  {
    v51 = *(double *)&v49;
    v52 = v85;
    v53 = 8 * HIDWORD(v86);
    while (1)
    {
      v54 = WebCore::Color::luminance(v52);
      if (v50 >= v54)
        v55 = v50;
      else
        v55 = v54;
      if (v50 < v54)
        v54 = v50;
      if ((v55 + 0.05) / (v54 + 0.05) >= v51)
        break;
      v52 = (WebCore::Color *)((char *)v52 + 8);
      v53 -= 8;
      if (!v53)
        goto LABEL_117;
    }
    v62 = *(_QWORD *)v52;
    if (*(_QWORD *)v52)
      *(_QWORD *)v52 = 0;
  }
  else
  {
LABEL_117:
    v56 = 0.05;
    v57 = 1.05;
    if (v50 >= 1.0)
      v58 = v50 + 0.05;
    else
      v58 = 1.05;
    if (v50 < 1.0)
      v57 = v50 + 0.05;
    v59 = v58 / v57;
    if (v50 >= 0.0)
      v60 = v50 + 0.05;
    else
      v60 = 0.05;
    if (v50 < 0.0)
      v56 = v50 + 0.05;
    if (v59 > v60 / v56)
      v61 = -1;
    else
      v61 = -16777216;
    v62 = bswap32(v61) | 0x1104000000000000;
  }
LABEL_144:
  *(_QWORD *)a1 = v62;
  *(_DWORD *)(a1 + 88) = 0;
  v72 = 1;
LABEL_160:
  *(_BYTE *)(a1 + 96) = v72;
LABEL_161:
  v45 = HIDWORD(v86);
  v46 = v85;
  if (!HIDWORD(v86))
    goto LABEL_170;
LABEL_162:
  v78 = (WTF *)((char *)v46 + 8 * v45);
  do
  {
    if ((*(_QWORD *)v46 & 0x8000000000000) != 0)
    {
      v79 = (unsigned int *)(*(_QWORD *)v46 & 0xFFFFFFFFFFFFLL);
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, v6);
      }
    }
    v46 = (WTF *)((char *)v46 + 8);
  }
  while (v46 != v78);
  v46 = v85;
LABEL_170:
  if (v46)
  {
    v85 = 0;
    LODWORD(v86) = 0;
    WTF::fastFree(v46, v6);
  }
LABEL_7:
  if ((v87 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
}

void WebCore::CSSPropertyParserHelpers::consumeColorMixFunction(uint64_t a1, __int128 **this)
{
  __int128 *v3;
  __int128 *v4;
  WebCore::CSSParserTokenRange *v5;
  unint64_t v6;
  WebCore::CSSParserTokenRange *v7;
  uint64_t v8;
  char v9;
  WebCore::CSSParserTokenRange *v10;
  const WebCore::CSSUnresolvedColorMix::Component *v11;
  const WebCore::CSSUnresolvedColorMix::Component *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[88];
  unsigned int v21;
  uint64_t v22[4];
  char v23;
  uint64_t v24[4];
  char v25;
  __int128 *v26;
  __int128 *v27;
  char v28;

  v3 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this);
  v26 = v3;
  v27 = v4;
  if (v4 <= v3)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id((unsigned int *)v3) != 952
    || (v6 = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(&v26, v5),
        ((unint64_t)v7 & 0xFF00000000) == 0)
    || (v8 = v6, v9 = (char)v7, !WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v26, v7)))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    return;
  }
  WebCore::CSSPropertyParserHelpers::consumeColorMixComponent(v24, (WebCore::CSSCalcValue *)&v26);
  if (!v25 || !WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v26, v10))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    goto LABEL_18;
  }
  WebCore::CSSPropertyParserHelpers::consumeColorMixComponent(v22, (WebCore::CSSCalcValue *)&v26);
  if (!v23 || v26 != v27)
    goto LABEL_27;
  if (!v25)
  {
LABEL_28:
    __break(1u);
    return;
  }
  if (!WebCore::CSSPropertyParserHelpers::hasNonCalculatedZeroPercentage((WebCore::CSSPropertyParserHelpers *)v24, v11))
    goto LABEL_11;
  if (!v23)
    goto LABEL_28;
  if (!WebCore::CSSPropertyParserHelpers::hasNonCalculatedZeroPercentage((WebCore::CSSPropertyParserHelpers *)v22, v12))
  {
LABEL_11:
    v16 = v8;
    v17 = v9;
    if (v25)
    {
      WebCore::CSSUnresolvedColorMix::Component::Component((uint64_t)&v18, v24);
      if (v23)
      {
        WebCore::CSSUnresolvedColorMix::Component::Component((uint64_t)&v19, v22);
        WebCore::CSSUnresolvedColor::CSSUnresolvedColor<WebCore::CSSUnresolvedColorMix>((uint64_t)v20, &v16);
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        v14 = v21;
        if (v21 == -1)
        {
          *(_BYTE *)(a1 + 96) = 1;
        }
        else
        {
          ((void (*)(char *, uint64_t, _BYTE *))off_1E339D698[v21])(&v28, a1, v20);
          *(_DWORD *)(a1 + 88) = v14;
          v15 = v21;
          *(_BYTE *)(a1 + 96) = 1;
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v15])(&v28, v20);
        }
        v21 = -1;
        WebCore::CSSUnresolvedColorMix::~CSSUnresolvedColorMix((WebCore::CSSUnresolvedColorMix *)&v16, v13);
        goto LABEL_17;
      }
    }
    goto LABEL_28;
  }
LABEL_27:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 96) = 0;
LABEL_17:
  std::optional<WebCore::CSSUnresolvedColorMix::Component>::~optional((uint64_t)v22, v11);
LABEL_18:
  std::optional<WebCore::CSSUnresolvedColorMix::Component>::~optional((uint64_t)v24, v10);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLightDarkFunction(uint64_t result, __int128 **this, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  char v7;
  unsigned int v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  _BYTE v12[88];
  int v13;
  char v14;
  _BYTE v15[88];
  int v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  v3 = result;
  if (!*(_BYTE *)(a3 + 3)
    || (v18 = WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)this),
        v19 = v4,
        result = WebCore::CSSPropertyParserHelpers::consumeColor((int)v15, (WebCore::CSSPropertyParserHelpers *)&v18),
        !v17))
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 96) = 0;
    return result;
  }
  v5 = (__int128 *)v18;
  v6 = (__int128 *)v18;
  if (v18 >= v19)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0x15)
  {
    if (v18 == v19)
    {
      v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v7 = 1;
      {
        v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
      }
    }
    else
    {
      v5 = (__int128 *)(v18 + 24);
      v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    do
    {
      if ((unint64_t)v5 < v19 || (v7 & 1) != 0)
      {
        if ((unint64_t)v5 >= v19)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v10 = v5;
        v9 = *(_DWORD *)v10;
      }
      else
      {
        v8 = v8 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
        v7 = 1;
        LOBYTE(v9) = v8;
      }
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while ((v9 & 0x3F) == 0x10);
    v18 = (unint64_t)v5 - 24;
    result = WebCore::CSSPropertyParserHelpers::consumeColor((int)v12, (WebCore::CSSPropertyParserHelpers *)&v18);
    if (!v14)
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 96) = 0;
      goto LABEL_30;
    }
    if (v18 == v19)
    {
      if (!v17
        || (result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v11, (uint64_t)v15), !v14))
      {
        __break(1u);
        return result;
      }
      result = WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v11 + 1, (uint64_t)v12);
      *(_OWORD *)v3 = v11;
      *(_DWORD *)(v3 + 88) = 4;
      *(_BYTE *)(v3 + 96) = 1;
      if (!v14)
      {
LABEL_30:
        if (!v17)
          return result;
        goto LABEL_31;
      }
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 96) = 0;
    }
    if (v13 != -1)
      result = ((uint64_t (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v13])(&v11, v12);
    goto LABEL_30;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 96) = 0;
LABEL_31:
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v16])(v12, v15);
  return result;
}

_BYTE *WebCore::CSSPropertyParserHelpers::makeCSSUnresolvedColor<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3[11];
  int v4;
  char v5;

  v2 = (uint64_t)result;
  if (*(_BYTE *)(a2 + 80))
  {
    std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)v3, (uint64_t *)a2);
    v4 = 5;
    *(_BYTE *)v2 = 0;
    *(_DWORD *)(v2 + 88) = -1;
    result = (_BYTE *)std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v2, v3);
    *(_DWORD *)(v2 + 88) = 5;
    *(_BYTE *)(v2 + 96) = 1;
    if (v4 != -1)
      return (_BYTE *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v4])(&v5, v3);
  }
  else
  {
    *result = 0;
    result[96] = 0;
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeRelativeFunctionParameters<WebCore::RGBFunctionModernRelative>(uint64_t a1, __int128 **this, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 *v7;
  void *v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  WTF *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  _BYTE v40[88];
  int v41;
  char v42;
  WTF *v43;
  int v44;
  int v45;
  char v46[8];
  int v47;
  char v48[8];
  int v49;
  char v50[8];
  int v51;
  unsigned __int8 v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  int v55;
  char v56;
  unsigned __int16 *v57;
  int v58;
  char v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  int v62;
  char v63;
  unsigned __int16 *v64;
  unsigned __int16 **v65;
  int v66;
  char v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  uint64_t v70;
  int v71;
  unsigned __int16 *v72;
  char v73;
  unsigned __int16 **v74;
  int v75;
  __int16 v76;
  char v77[2];
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, (WebCore::CSSParserTokenRange *)this);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)v40, (WebCore::CSSPropertyParserHelpers *)this);
  if (!v42)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
    return;
  }
  LOWORD(v74) = 831;
  BYTE2(v74) = 1;
  WORD2(v74) = 832;
  BYTE6(v74) = 1;
  LOWORD(v75) = 833;
  BYTE2(v75) = 1;
  v76 = 126;
  v77[0] = 1;
  v69 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v69, &v74, (_BYTE *)&v74 + 2, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v69, (_WORD *)&v74 + 2, (_BYTE *)&v74 + 6, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v69, &v75, (_BYTE *)&v75 + 2, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v69, &v76, v77, (uint64_t)&v43);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v68, &v69);
  v6 = *(unsigned __int8 *)(a3 + 4);
  v7 = v68;
  v68 = 0;
  v61 = v7;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v61, v6 | 0x10100000000);
  v9 = v61;
  if (v61)
    goto LABEL_161;
  while (1)
  {
    if ((_BYTE)v45)
    {
      if (v44 == -1)
        goto LABEL_160;
      v74 = &v57;
      ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339BBC0[v44])(&v65, &v74, &v43);
      LOBYTE(v74) = 0;
      v75 = -1;
      v10 = v66;
      if (v66 == -1)
      {
        v78 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ***))off_1E339BB90[v66])(&v57, &v74, &v65);
        v75 = v10;
        v78 = 1;
        if (v66 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339BB60[v66])(&v57, &v65);
      }
      if ((_BYTE)v45 && v44 != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339BB60[v44])(&v65, &v43);
    }
    else
    {
      LOBYTE(v74) = 0;
      v78 = 0;
    }
    if (v68)
      WTF::fastFree((WTF *)(v68 - 8), v8);
    if (!v78)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 80) = 0;
      goto LABEL_108;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v64, &v69);
    v11 = *(unsigned __int8 *)(a3 + 4);
    v12 = v64;
    v64 = 0;
    v57 = v12;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v57, v11 | 0x10100000000);
    if (v57)
      WTF::fastFree((WTF *)(v57 - 8), v8);
    if ((_BYTE)v45)
    {
      if (v44 == -1)
        goto LABEL_160;
      v65 = &v54;
      ((void (*)(unsigned __int16 **__return_ptr, unsigned __int16 ***, WTF **))off_1E339BBF0[v44])(&v61, &v65, &v43);
      LOBYTE(v65) = 0;
      v66 = -1;
      v13 = v62;
      if (v62 == -1)
      {
        v67 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 **))off_1E339BB90[v62])(&v54, &v65, &v61);
        v66 = v13;
        v67 = 1;
        if (v62 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 **))off_1E339BB60[v62])(&v54, &v61);
      }
      if ((_BYTE)v45 && v44 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339BB60[v44])(&v61, &v43);
    }
    else
    {
      LOBYTE(v65) = 0;
      v67 = 0;
    }
    if (v64)
      WTF::fastFree((WTF *)(v64 - 8), v8);
    if (!v67)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 80) = 0;
      goto LABEL_105;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v60, &v69);
    v14 = *(unsigned __int8 *)(a3 + 4);
    v15 = v60;
    v60 = 0;
    v54 = v15;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v54, v14 | 0x10100000000);
    if (v54)
      WTF::fastFree((WTF *)(v54 - 8), v8);
    if ((_BYTE)v45)
    {
      if (v44 == -1)
        goto LABEL_160;
      v61 = (unsigned __int16 *)&v70;
      ((void (*)(unsigned __int16 **__return_ptr, unsigned __int16 **, WTF **))off_1E339BC20[v44])(&v57, &v61, &v43);
      LOBYTE(v61) = 0;
      v62 = -1;
      v16 = v58;
      if (v58 == -1)
      {
        v63 = 1;
      }
      else
      {
        ((void (*)(uint64_t *, unsigned __int16 **, unsigned __int16 **))off_1E339BB90[v58])(&v70, &v61, &v57);
        v62 = v16;
        v63 = 1;
        if (v58 != -1)
          ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BB60[v58])(&v70, &v57);
      }
      if ((_BYTE)v45 && v44 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339BB60[v44])(&v57, &v43);
    }
    else
    {
      LOBYTE(v61) = 0;
      v63 = 0;
    }
    if (v60)
      WTF::fastFree((WTF *)(v60 - 8), v8);
    if (!v63)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 80) = 0;
      goto LABEL_102;
    }
    LOBYTE(v57) = 0;
    v59 = 0;
    v18 = *this;
    v17 = this[1];
    if (*this >= v17)
    {
      v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v19 = 0;
    if ((*(_DWORD *)v18 & 0x3F) != 6 || *((_WORD *)v18 + 8) != 47)
      goto LABEL_52;
    v32 = *this;
    if (*this == v17)
    {
      v34 = 1;
      v33 = v17;
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v33 = *this;
      }
    }
    else
    {
      v33 = (__int128 *)((char *)v32 + 24);
      *this = (__int128 *)((char *)v32 + 24);
    }
    while (1)
    {
      if (v33 < v17 || (v34 & 1) != 0)
      {
        if (v33 >= v17)
          v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v35 = *(_DWORD *)v33;
      }
      else
      {
        v35 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
        v34 = 1;
      }
      if ((v35 & 0x3F) != 0x10)
        break;
      v33 = (__int128 *)((char *)*this + 24);
      *this = v33;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v53, &v69);
    v36 = *(unsigned __int8 *)(a3 + 4);
    v37 = v53;
    v53 = 0;
    v72 = v37;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v72, v36 | 0x10100000000);
    if (v72)
      WTF::fastFree((WTF *)(v72 - 8), v8);
    if (!(_BYTE)v45)
    {
      LOBYTE(v54) = 0;
      v56 = 0;
      goto LABEL_136;
    }
    if (v44 != -1)
      break;
LABEL_160:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_161:
    WTF::fastFree((WTF *)(v9 - 8), v8);
  }
  v54 = (unsigned __int16 *)&v73;
  ((void (*)(uint64_t *__return_ptr, unsigned __int16 **, WTF **))off_1E339BC50[v44])(&v70, &v54, &v43);
  LOBYTE(v54) = 0;
  v55 = -1;
  v38 = v71;
  if (v71 == -1)
  {
    v56 = 1;
  }
  else
  {
    ((void (*)(char *, unsigned __int16 **, uint64_t *))off_1E339BB90[v71])(&v73, &v54, &v70);
    v55 = v38;
    v56 = 1;
    if (v71 != -1)
      ((void (*)(char *, uint64_t *))off_1E339BB60[v71])(&v73, &v70);
  }
  if ((_BYTE)v45 && v44 != -1)
    ((void (*)(uint64_t *, WTF **))off_1E339BB60[v44])(&v70, &v43);
LABEL_136:
  if (v59 == v56)
  {
    if (v59)
    {
      if (v58 == -1)
      {
        if (v55 == -1)
          goto LABEL_150;
      }
      else if (v55 == -1)
      {
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v58])(&v43, &v57);
        v58 = -1;
        goto LABEL_150;
      }
      v43 = (WTF *)&v57;
      ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 **))off_1E339BC80[v55])(&v43, &v57, &v54);
      goto LABEL_150;
    }
  }
  else
  {
    if (v59)
    {
      if (v58 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v58])(&v43, &v57);
      v58 = -1;
      v59 = 0;
    }
    else
    {
      LOBYTE(v57) = 0;
      v58 = -1;
      v39 = v55;
      if (v55 != -1)
      {
        ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 **))off_1E339BB90[v55])(&v43, &v57, &v54);
        v58 = v39;
      }
      v59 = 1;
    }
LABEL_150:
    if (v56)
    {
      if (v55 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v55])(&v43, &v54);
      v55 = -1;
    }
  }
  if (v53)
    WTF::fastFree((WTF *)(v53 - 8), v8);
  if (!v59)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
    goto LABEL_99;
  }
  v17 = this[1];
  v19 = 1;
LABEL_52:
  if (*this == v17)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v43, (uint64_t)v40);
    if (!v78 || !v67 || !v63)
      __break(1u);
    LOBYTE(v44) = 0;
    v45 = -1;
    v20 = v75;
    if (v75 != -1)
    {
      ((void (*)(unsigned __int16 **, int *, unsigned __int16 ***))off_1E339BB90[v75])(&v54, &v44, &v74);
      v45 = v20;
    }
    v46[0] = 0;
    v47 = -1;
    v21 = v66;
    if (v66 != -1)
    {
      ((void (*)(unsigned __int16 **, char *, unsigned __int16 ***))off_1E339BB90[v66])(&v54, v46, &v65);
      v47 = v21;
    }
    v48[0] = 0;
    v49 = -1;
    v22 = v62;
    if (v62 != -1)
    {
      ((void (*)(unsigned __int16 **, char *, unsigned __int16 **))off_1E339BB90[v62])(&v54, v48, &v61);
      v49 = v22;
    }
    v50[0] = 0;
    v52 = 0;
    if (v59)
    {
      v51 = -1;
      v23 = v58;
      if (v58 != -1)
      {
        ((void (*)(unsigned __int16 **, char *, unsigned __int16 **))off_1E339BB90[v58])(&v54, v50, &v57);
        v51 = v23;
      }
      v52 = 1;
    }
    v24 = v43;
    v43 = 0;
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v25 = v45;
    if (v45 != -1)
    {
      ((void (*)(unsigned __int16 **, uint64_t, int *))off_1E339BB90[v45])(&v54, a1 + 8, &v44);
      *(_DWORD *)(a1 + 16) = v25;
    }
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = -1;
    v26 = v47;
    if (v47 != -1)
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v47])(&v54);
      *(_DWORD *)(a1 + 32) = v26;
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = -1;
    v27 = v49;
    if (v49 != -1)
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v49])(&v54);
      *(_DWORD *)(a1 + 48) = v27;
    }
    *(_BYTE *)(a1 + 56) = 0;
    v8 = (void *)(a1 + 56);
    *(_BYTE *)(a1 + 72) = 0;
    if (!v52)
    {
      *(_BYTE *)(a1 + 80) = 1;
      goto LABEL_86;
    }
    *(_DWORD *)(a1 + 64) = -1;
    v28 = v51;
    if (v51 == -1)
    {
      *(_BYTE *)(a1 + 72) = 1;
      *(_BYTE *)(a1 + 80) = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v51])(&v54);
      *(_DWORD *)(a1 + 64) = v28;
      v29 = v52;
      *(_BYTE *)(a1 + 72) = 1;
      *(_BYTE *)(a1 + 80) = 1;
      if (!v29)
        goto LABEL_86;
    }
    if (v51 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v51])(&v54, v50);
    v51 = -1;
LABEL_86:
    if (v49 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v49])(&v54, v48);
    v49 = -1;
    if (v47 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v47])(&v54, v46);
    v47 = -1;
    if (v45 != -1)
      ((void (*)(unsigned __int16 **, int *))off_1E339BB60[v45])(&v54, &v44);
    v45 = -1;
    v30 = (unsigned int *)v43;
    v43 = 0;
    if (v30)
    {
      v31 = v30[22];
      if ((_DWORD)v31 != -1)
        ((void (*)(unsigned __int16 **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v31])(&v54, v30);
      v30[22] = -1;
      WTF::fastFree((WTF *)v30, v8);
    }
    if (v59)
      goto LABEL_97;
    goto LABEL_99;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (!v19)
    goto LABEL_99;
LABEL_97:
  if (v58 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v58])(&v43, &v57);
LABEL_99:
  if (v63 && v62 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v62])(&v43, &v61);
LABEL_102:
  if (v67 && v66 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v66])(&v43, &v65);
LABEL_105:
  if (v78 && v75 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v75])(&v43, &v74);
LABEL_108:
  if (v69)
    WTF::fastFree((WTF *)(v69 - 8), v8);
  if (v42)
  {
    if (v41 != -1)
      ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v41])(&v43, v40);
  }
}

void WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionModernAbsolute>(_BYTE *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned __int16 ****v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 ****v20;
  unsigned __int16 ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 *v51;
  __int128 *v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  int v57;
  unsigned int v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  unsigned __int16 ****v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 **v68;
  unsigned int v69;
  char v70[8];
  unsigned int v71;
  char v72[8];
  unsigned int v73;
  char v74[8];
  unsigned int v75;
  char v76;
  unsigned int v77;
  unsigned __int16 *v78;
  unsigned int v79;
  unsigned __int8 v80;
  unsigned __int16 ***v81;
  unsigned int v82;
  char v83;
  unsigned __int16 **v84;
  unsigned int v85;
  char v86;
  unsigned __int16 **v87;
  int v88;
  unsigned __int16 ***v89;
  unsigned __int16 ****v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  void *v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102[2];

  v5 = (unsigned __int16 ****)a3;
  v6 = a2;
  v8 = *(unsigned __int8 *)(a3 + 4);
  v81 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v68, a2, (unsigned __int16 **)&v81, v8 | 0x10100000000);
  v10 = (unsigned __int16 *)v81;
  if (v81)
    goto LABEL_147;
  while (1)
  {
    if (v70[0])
    {
      if (v69 == -1)
        goto LABEL_146;
      v84 = &v78;
      ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339BE80[v69])(&v89, &v84, &v68);
      LOBYTE(v84) = 0;
      v85 = -1;
      v11 = v90;
      if ((_DWORD)v90 == -1)
      {
        v86 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v90])(&v78, &v84, &v89);
        v85 = v11;
        v86 = 1;
        if ((_DWORD)v90 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v90])(&v78, &v89);
      }
      if (v70[0] && v69 != -1)
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v69])(&v89, &v68);
    }
    else
    {
      LOBYTE(v84) = 0;
      v86 = 0;
    }
    if (!v86)
    {
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v12 = *((unsigned __int8 *)v5 + 4);
    v78 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v68, v6, &v78, v12 | 0x10100000000);
    if (v78)
      WTF::fastFree((WTF *)(v78 - 8), v13);
    if (v70[0])
    {
      if (v69 == -1)
        goto LABEL_146;
      v81 = &v87;
      ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339BEA8[v69])(&v89, &v81, &v68);
      LOBYTE(v81) = 0;
      v82 = -1;
      v14 = v90;
      if ((_DWORD)v90 == -1)
      {
        v83 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v90])(&v87, &v81, &v89);
        v82 = v14;
        v83 = 1;
        if ((_DWORD)v90 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v90])(&v87, &v89);
      }
      if (v70[0] && v69 != -1)
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v69])(&v89, &v68);
    }
    else
    {
      LOBYTE(v81) = 0;
      v83 = 0;
    }
    if (!v83)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_99;
    }
    LOBYTE(v78) = 0;
    v80 = 0;
    v16 = *(__int128 **)v6;
    v15 = *(__int128 **)(v6 + 8);
    if (*(_QWORD *)v6 >= (unint64_t)v15)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v17 = 0;
    if ((*(_DWORD *)v16 & 0x3F) == 6 && *((_WORD *)v16 + 8) == 47)
    {
      v51 = *(__int128 **)v6;
      if (*(__int128 **)v6 == v15)
      {
        v53 = 1;
        v52 = v15;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v52 = *(__int128 **)v6;
        }
      }
      else
      {
        v52 = (__int128 *)((char *)v51 + 24);
        *(_QWORD *)v6 = (char *)v51 + 24;
      }
      while (1)
      {
        if (v52 < v15 || (v53 & 1) != 0)
        {
          if (v52 >= v15)
            v52 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v54 = *(_DWORD *)v52;
        }
        else
        {
          v54 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v54;
          v53 = 1;
        }
        if ((v54 & 0x3F) != 0x10)
          break;
        v52 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v52;
      }
      v55 = *((unsigned __int8 *)v5 + 4);
      v102[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v68, v6, v102, v55 | 0x10100000000);
      if (v102[0])
        WTF::fastFree((WTF *)(v102[0] - 8), v56);
      if (v70[0])
      {
        if (v69 == -1)
          goto LABEL_146;
        v89 = (unsigned __int16 ***)&v101;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339BED0[v69])(&v87, &v89, &v68);
        LOBYTE(v89) = 0;
        LODWORD(v90) = -1;
        v57 = v88;
        if (v88 == -1)
        {
          LOBYTE(v91) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v88])(&v101, &v89, &v87);
          LODWORD(v90) = v57;
          LOBYTE(v91) = 1;
          if (v88 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v88])(&v101, &v87);
        }
        if (v70[0] && v69 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v69])(&v87, &v68);
      }
      else
      {
        LOBYTE(v89) = 0;
        LOBYTE(v91) = 0;
      }
      if (v80 != v91)
      {
        if (v80)
        {
          if (v79 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v79])(&v68, &v78);
          v79 = -1;
          v80 = 0;
        }
        else
        {
          LOBYTE(v78) = 0;
          v79 = -1;
          v58 = v90;
          if ((_DWORD)v90 != -1)
          {
            ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v90])(&v68, &v78, &v89);
            v79 = v58;
          }
          v80 = 1;
        }
        goto LABEL_139;
      }
      if (!v80)
      {
LABEL_142:
        if (!v80)
        {
          *a1 = 0;
          a1[8] = 0;
          goto LABEL_96;
        }
        v15 = *(__int128 **)(v6 + 8);
        v17 = 1;
        goto LABEL_30;
      }
      if (v79 == -1)
      {
        if ((_DWORD)v90 == -1)
          goto LABEL_139;
      }
      else if ((_DWORD)v90 == -1)
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v79])(&v68, &v78);
        v79 = -1;
LABEL_139:
        if ((_BYTE)v91 && (_DWORD)v90 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v90])(&v68, &v89);
        goto LABEL_142;
      }
      v68 = &v78;
      ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v90])(&v68, &v78, &v89);
      goto LABEL_139;
    }
LABEL_30:
    if (*(__int128 **)v6 != v15)
    {
      *a1 = 0;
      a1[8] = 0;
      if (!v17)
        goto LABEL_96;
      goto LABEL_94;
    }
    if (!v86 || !v83)
    {
      __break(1u);
      goto LABEL_146;
    }
    LOBYTE(v68) = 0;
    v69 = -1;
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(unsigned __int16 ****, unsigned __int16 ***, unint64_t))off_1E339BFD0[v18])(&v89, &v68, a4);
      v69 = v18;
    }
    v70[0] = 0;
    v71 = -1;
    v6 = v85;
    if (v85 != -1)
    {
      ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v85])(&v89, v70, &v84);
      v71 = v6;
    }
    v72[0] = 0;
    v73 = -1;
    a4 = v82;
    if (v82 != -1)
    {
      ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v82])(&v89, v72, &v81);
      v73 = a4;
    }
    v74[0] = 0;
    v76 = 0;
    if (v80)
    {
      v75 = -1;
      a4 = v79;
      if (v79 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v79])(&v89, v74, &v78);
        v75 = a4;
      }
      v76 = 1;
    }
    v77 = *((_DWORD *)v5 + 2);
    v102[0] = 0;
    v87 = v102;
    if (v69 == -1)
      goto LABEL_146;
    v6 = (uint64_t)&v87;
    v89 = &v87;
    a4 = (unint64_t)&off_1E339BF48;
    v19 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v69))(&v89, &v68);
    v101 = 0;
    v87 = (unsigned __int16 **)&v101;
    if (v71 == -1)
      goto LABEL_146;
    v21 = (unsigned __int16 ***)v19;
    v5 = v20;
    v89 = &v87;
    v22 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v71))(&v89, v70);
    v100 = 0;
    v87 = (unsigned __int16 **)&v100;
    if (v73 == -1)
      goto LABEL_146;
    v6 = v22;
    v24 = v23;
    v89 = &v87;
    v25 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v73))(&v89, v72);
    v27 = v26;
    v99 = 0;
    v67 = v24;
    if (v76)
    {
      v63 = v5;
      v87 = (unsigned __int16 **)&v99;
      if (v75 == -1)
        goto LABEL_146;
      v28 = v26;
      v29 = v25;
      v30 = v6;
      v89 = &v87;
      v31 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v75))(&v89, v74);
      a4 = v31 & 0xFFFFFFFFFFFFFF00;
      v6 = v31;
      if (v99)
      {
        v61 = v26;
        WTF::fastFree((WTF *)(v99 - 16), v26);
        v26 = v61;
      }
      v32 = 1;
      v25 = v29;
      v27 = v28;
      v5 = v63;
    }
    else
    {
      v30 = v6;
      v32 = 0;
      a4 = 0;
      v6 = 0;
    }
    if (v100)
    {
      v64 = v25;
      v59 = v26;
      WTF::fastFree((WTF *)(v100 - 16), v26);
      v26 = v59;
      v25 = v64;
    }
    if (v101)
    {
      v65 = v25;
      v60 = v26;
      WTF::fastFree((WTF *)(v101 - 16), v26);
      v26 = v60;
      v25 = v65;
    }
    if (v102[0])
    {
      v62 = v26;
      v66 = v25;
      WTF::fastFree((WTF *)(v102[0] - 8), v26);
      v26 = v62;
      v25 = v66;
    }
    v89 = v21;
    v90 = v5;
    v91 = v30;
    v92 = v67;
    v93 = v25;
    v94 = v27;
    v95 = v6 | a4;
    v96 = v26;
    v97 = v32;
    *(_DWORD *)v98 = v102[0];
    *(_DWORD *)&v98[3] = *(_DWORD *)((char *)v102 + 3);
    if (v5 == 0xFFFFFFFFLL)
      goto LABEL_146;
    a4 = (unint64_t)&v101;
    v87 = (unsigned __int16 **)&v101;
    ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BF70[v5])(&v87, &v89);
    v6 = (uint64_t)v70;
    if ((_DWORD)v92 == -1)
      goto LABEL_146;
    v34 = v33;
    v5 = &v89;
    v87 = (unsigned __int16 **)&v101;
    ((void (*)(unsigned __int16 ***, uint64_t *))off_1E339BF88[v92])(&v87, &v91);
    a4 = (unint64_t)v72;
    if ((_DWORD)v94 == -1)
      goto LABEL_146;
    v36 = v35;
    v87 = (unsigned __int16 **)&v101;
    v37 = ((float (*)(unsigned __int16 ***, uint64_t *))off_1E339BFA0[v94])(&v87, &v93);
    if (!v97)
      break;
    if ((_DWORD)v96 != -1)
    {
      v87 = (unsigned __int16 **)&v101;
      v38 = ((float (*)(unsigned __int16 ***, unint64_t *))off_1E339BFB8[v96])(&v87, &v95);
      goto LABEL_68;
    }
LABEL_146:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_147:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v38 = 1.0;
LABEL_68:
  if (v77 < 2)
  {
    v41 = llroundf(v34 * 255.0);
    v42 = 255;
    if (v41 >= 255)
      v41 = 255;
    v43 = llroundf(v36 * 255.0);
    v44 = v41 & ~(v41 >> 63);
    if (v43 >= 255)
      v45 = 255;
    else
      v45 = v43;
    v46 = llroundf(v37 * 255.0);
    v47 = v45 & ~(v45 >> 63);
    if (v46 >= 255)
      v48 = 255;
    else
      v48 = v46;
    v49 = llroundf(v38 * 255.0);
    v50 = v48 & ~(v48 >> 63);
    if (v49 < 255)
      v42 = v49;
    v40 = bswap32(((v42 & ~(v42 >> 63)) << 24) | (v50 << 16) | (v47 << 8) | v44) | 0x1104000000000000;
  }
  else
  {
    v39 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v39 = 1;
    *(float *)(v39 + 4) = v34;
    *(float *)(v39 + 8) = v36;
    v40 = v39 | 0x110C000000000000;
    *(float *)(v39 + 12) = v37;
    *(float *)(v39 + 16) = v38;
  }
  *(_QWORD *)a1 = v40;
  a1[8] = 1;
  if (v76)
  {
    if (v75 != -1)
      ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v75])(&v89, v74);
    v75 = -1;
  }
  if (v73 != -1)
    ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v73])(&v89, v72);
  v73 = -1;
  if (v71 != -1)
    ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v71])(&v89, v70);
  v71 = -1;
  if (v69 != -1)
    ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v69])(&v89, &v68);
  if (v80)
  {
LABEL_94:
    if (v79 != -1)
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v79])(&v68, &v78);
  }
LABEL_96:
  if (v83 && v82 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v82])(&v68, &v81);
LABEL_99:
  if (v86)
  {
    if (v85 != -1)
      ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v85])(&v68, &v84);
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  __int16 v4;
  __int128 *v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *v11;
  int v12;
  unsigned __int16 v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  WebCore::CSSCalcValue *v24;
  int v25;
  WebCore::CSSCalcValue *v26;
  unsigned __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::CSSCalcValue *v32;
  __int128 v33;

  v4 = a4;
  v28 = a4;
  v29 = WORD2(a4);
  v8 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v8 & 0x3F)
  {
    case 0:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v33, a3);
      v13 = WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(a2);
      if ((_QWORD)v33)
      {
        v27 = v13;
        WTF::fastFree((WTF *)(v33 - 16), v14);
        v13 = v27;
      }
      if (v13 >= 0x100u)
      {
        *(_BYTE *)a1 = 0;
        v17 = 4;
        goto LABEL_27;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v33, a3);
      v16 = WebCore::CSSPropertyParserHelpers::SymbolKnownTokenTypeIdentConsumer::consume(a2, (uint64_t *)&v33);
      if ((_QWORD)v33)
        WTF::fastFree((WTF *)(v33 - 16), v15);
      if ((v16 & 0xFF0000) != 0)
      {
        *(_WORD *)a1 = v16;
        v17 = 5;
        goto LABEL_27;
      }
      goto LABEL_23;
    case 1:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v30, a3);
      v33 = *(_OWORD *)a2;
      v9 = v30;
      v30 = 0;
      v31 = v9;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v33, 2, &v31, v4, &v32);
      if (v31)
        WTF::fastFree((WTF *)(v31 - 16), v10);
      v11 = v32;
      if (v32)
        *(_OWORD *)a2 = v33;
      if (v30)
      {
        v26 = v11;
        WTF::fastFree((WTF *)(v30 - 16), v10);
        v11 = v26;
        if (v26)
        {
LABEL_10:
          v12 = *(_DWORD *)v11;
          *(_DWORD *)v11 += 2;
          *(_QWORD *)a1 = v11;
          *(_DWORD *)(a1 + 8) = 1;
          *(_BYTE *)(a1 + 16) = 1;
          if (v12)
          {
            *(_DWORD *)v11 = v12;
            return;
          }
          goto LABEL_40;
        }
      }
      else if (v11)
      {
        goto LABEL_10;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v30, a3);
      v33 = *(_OWORD *)a2;
      v23 = v30;
      v30 = 0;
      v31 = v23;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v33, 0, &v31, v4, &v32);
      if (v31)
        WTF::fastFree((WTF *)(v31 - 16), v10);
      v24 = v32;
      if (v32)
        *(_OWORD *)a2 = v33;
      if (v30)
      {
        WTF::fastFree((WTF *)(v30 - 16), v10);
        if (v24)
          goto LABEL_37;
LABEL_3:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        return;
      }
      if (!v24)
        goto LABEL_3;
LABEL_37:
      v25 = *(_DWORD *)v24;
      *(_DWORD *)v24 += 2;
      *(_QWORD *)a1 = v24;
      *(_DWORD *)(a1 + 8) = 3;
      *(_BYTE *)(a1 + 16) = 1;
      if (v25)
      {
        *(_DWORD *)v24 = v25;
        return;
      }
      v11 = v24;
LABEL_40:
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
      return;
    case 7:
      v18 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v28);
      if (!v19)
        goto LABEL_23;
      *(_QWORD *)a1 = v18;
      v17 = 2;
LABEL_27:
      *(_DWORD *)(a1 + 8) = v17;
      goto LABEL_28;
    case 8:
      v20 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v28);
      if (v21)
      {
        *(_QWORD *)a1 = v20;
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v22 = 1;
      }
      else
      {
LABEL_23:
        v22 = 0;
        *(_BYTE *)a1 = 0;
      }
      *(_BYTE *)(a1 + 16) = v22;
      return;
    default:
      goto LABEL_3;
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  uint64_t v8;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v8, a2);
  WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeFunctionConsumer::consume(a1, &v8, *a3, a4);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v7);
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(__int128 **a1, unsigned __int16 **a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int16 v28;
  unsigned __int16 *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 **v34;
  _DWORD *v35;
  _DWORD *v36;

  if (!*a2)
  {
    v3 = 0;
    goto LABEL_3;
  }
  v34 = a1;
  v35 = a3;
  v6 = *((unsigned int *)*a2 - 3);
  if ((_DWORD)v6)
  {
    v7 = (v6 - 1) | ((v6 - 1) >> 1) | ((((_DWORD)v6 - 1) | ((v6 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = (v8 | HIWORD(v8)) + 1;
    if (v9 > 0x400)
    {
      if (v9 > 2 * v6)
        goto LABEL_34;
    }
    else if (3 * v9 > 4 * v6)
    {
LABEL_10:
      v10 = (double)v6;
      v11 = (double)v9;
      v12 = 0.604166667;
      goto LABEL_11;
    }
    LODWORD(v9) = 2 * v9;
    if (v9 <= 0x400)
      goto LABEL_10;
LABEL_34:
    v10 = (double)v6;
    v11 = (double)v9;
    v12 = 0.416666667;
LABEL_11:
    if (v11 * v12 <= v10)
      LODWORD(v9) = 2 * v9;
    if (v9 <= 8)
      v13 = 8;
    else
      v13 = v9;
    v14 = 4 * v13;
    v15 = (_DWORD *)WTF::fastMalloc((WTF *)(v14 + 16));
    v16 = 0;
    v3 = v15 + 4;
    do
    {
      v17 = &v15[v16 / 4];
      *((_WORD *)v17 + 8) = -1;
      *((_BYTE *)v17 + 18) = 0;
      v16 += 4;
    }
    while (v14 != v16);
    v36 = v15 + 4;
    v15[2] = v13 - 1;
    v15[3] = v13;
    *v15 = 0;
    v15[1] = v6;
    v18 = *a2;
    if (*a2)
    {
      v20 = *((unsigned int *)v18 - 1);
      v21 = &v18[2 * v20];
      if (*((_DWORD *)v18 - 3))
      {
        v19 = *a2;
        if ((_DWORD)v20)
        {
          v32 = 4 * v20;
          v19 = *a2;
          while (*v19 >= 0xFFFEu)
          {
            v19 += 2;
            v32 -= 4;
            if (!v32)
            {
              v19 = v21;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      v19 = &v18[2 * v20];
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v21 = &v18[2 * v20];
LABEL_21:
    if (v18)
      v18 += 2 * *((unsigned int *)v18 - 1);
    while (v19 != v18)
    {
      v22 = 0;
      v23 = ~(*v19 << 15) + *v19;
      v24 = (9 * (v23 ^ (v23 >> 10))) ^ ((9 * (v23 ^ (v23 >> 10))) >> 6);
      v25 = (v24 + ~(v24 << 11)) ^ ((v24 + ~(v24 << 11)) >> 16);
      do
      {
        v26 = v25 & (v13 - 1);
        v25 = ++v22 + v26;
      }
      while (SLOWORD(v3[v26]) != -1);
      v27 = &v3[v26];
      v28 = *v19;
      *((_BYTE *)v27 + 2) = *((_BYTE *)v19 + 2);
      *(_WORD *)v27 = v28;
      v29 = v19 + 2;
      v19 = v21;
      if (v29 != v21)
      {
        v19 = v29;
        while (*v19 >= 0xFFFEu)
        {
          v19 += 2;
          if (v19 == v21)
          {
            v19 = v21;
            break;
          }
        }
      }
    }
    goto LABEL_32;
  }
  v3 = 0;
LABEL_32:
  a1 = v34;
  a3 = v35;
LABEL_3:
  result = WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume(a1, (uint64_t)&v36, *a3);
  if (v3)
  {
    v30 = (WTF *)(v3 - 4);
    v31 = result;
    WTF::fastFree(v30, v5);
    return v31;
  }
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(__int128 **a1, unsigned __int16 **a2, _DWORD *a3)
{
  _DWORD *v3;
  unint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int16 v28;
  unsigned __int16 *v29;
  WTF *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 **v34;
  _DWORD *v35;
  _DWORD *v36;

  if (!*a2)
  {
    v3 = 0;
    goto LABEL_3;
  }
  v34 = a1;
  v35 = a3;
  v6 = *((unsigned int *)*a2 - 3);
  if ((_DWORD)v6)
  {
    v7 = (v6 - 1) | ((v6 - 1) >> 1) | ((((_DWORD)v6 - 1) | ((v6 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = (v8 | HIWORD(v8)) + 1;
    if (v9 > 0x400)
    {
      if (v9 > 2 * v6)
        goto LABEL_34;
    }
    else if (3 * v9 > 4 * v6)
    {
LABEL_10:
      v10 = (double)v6;
      v11 = (double)v9;
      v12 = 0.604166667;
      goto LABEL_11;
    }
    LODWORD(v9) = 2 * v9;
    if (v9 <= 0x400)
      goto LABEL_10;
LABEL_34:
    v10 = (double)v6;
    v11 = (double)v9;
    v12 = 0.416666667;
LABEL_11:
    if (v11 * v12 <= v10)
      LODWORD(v9) = 2 * v9;
    if (v9 <= 8)
      v13 = 8;
    else
      v13 = v9;
    v14 = 4 * v13;
    v15 = (_DWORD *)WTF::fastMalloc((WTF *)(v14 + 16));
    v16 = 0;
    v3 = v15 + 4;
    do
    {
      v17 = &v15[v16 / 4];
      *((_WORD *)v17 + 8) = -1;
      *((_BYTE *)v17 + 18) = 0;
      v16 += 4;
    }
    while (v14 != v16);
    v36 = v15 + 4;
    v15[2] = v13 - 1;
    v15[3] = v13;
    *v15 = 0;
    v15[1] = v6;
    v18 = *a2;
    if (*a2)
    {
      v20 = *((unsigned int *)v18 - 1);
      v21 = &v18[2 * v20];
      if (*((_DWORD *)v18 - 3))
      {
        v19 = *a2;
        if ((_DWORD)v20)
        {
          v32 = 4 * v20;
          v19 = *a2;
          while (*v19 >= 0xFFFEu)
          {
            v19 += 2;
            v32 -= 4;
            if (!v32)
            {
              v19 = v21;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      v19 = &v18[2 * v20];
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v21 = &v18[2 * v20];
LABEL_21:
    if (v18)
      v18 += 2 * *((unsigned int *)v18 - 1);
    while (v19 != v18)
    {
      v22 = 0;
      v23 = ~(*v19 << 15) + *v19;
      v24 = (9 * (v23 ^ (v23 >> 10))) ^ ((9 * (v23 ^ (v23 >> 10))) >> 6);
      v25 = (v24 + ~(v24 << 11)) ^ ((v24 + ~(v24 << 11)) >> 16);
      do
      {
        v26 = v25 & (v13 - 1);
        v25 = ++v22 + v26;
      }
      while (SLOWORD(v3[v26]) != -1);
      v27 = &v3[v26];
      v28 = *v19;
      *((_BYTE *)v27 + 2) = *((_BYTE *)v19 + 2);
      *(_WORD *)v27 = v28;
      v29 = v19 + 2;
      v19 = v21;
      if (v29 != v21)
      {
        v19 = v29;
        while (*v19 >= 0xFFFEu)
        {
          v19 += 2;
          if (v19 == v21)
          {
            v19 = v21;
            break;
          }
        }
      }
    }
    goto LABEL_32;
  }
  v3 = 0;
LABEL_32:
  a1 = v34;
  a3 = v35;
LABEL_3:
  result = WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypePercentConsumer::consume(a1, (uint64_t)&v36, *a3);
  if (v3)
  {
    v30 = (WTF *)(v3 - 4);
    v31 = result;
    WTF::fastFree(v30, v5);
    return v31;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

_QWORD *WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(_QWORD *result, unsigned __int16 **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 *v26;
  uint64_t v27;
  _QWORD *v29;

  *result = 0;
  if (!*a2)
    return result;
  v2 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v2)
    return result;
  v29 = result;
  v3 = (v2 - 1) | ((v2 - 1) >> 1) | ((((_DWORD)v2 - 1) | ((v2 - 1) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  v5 = (v4 | HIWORD(v4)) + 1;
  if (v5 > 0x400)
  {
    if (v5 > 2 * v2)
      goto LABEL_34;
  }
  else if (3 * v5 > 4 * v2)
  {
LABEL_7:
    v6 = (double)v2;
    v7 = (double)v5;
    v8 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v5) = 2 * v5;
  if (v5 <= 0x400)
    goto LABEL_7;
LABEL_34:
  v6 = (double)v2;
  v7 = (double)v5;
  v8 = 0.416666667;
LABEL_8:
  if (v7 * v8 <= v6)
    LODWORD(v5) = 2 * v5;
  if (v5 <= 8)
    v9 = 8;
  else
    v9 = v5;
  v10 = WTF::fastMalloc((WTF *)(4 * v9 + 16));
  v11 = (_BYTE *)(v10 + 18);
  v12 = v9;
  do
  {
    *((_WORD *)v11 - 1) = -1;
    *v11 = 0;
    v11 += 4;
    --v12;
  }
  while (v12);
  *v29 = v10 + 16;
  *(_DWORD *)(v10 + 12) = v9;
  *(_DWORD *)(*v29 - 8) = v9 - 1;
  *(_DWORD *)(*v29 - 12) = v2;
  *(_DWORD *)(*v29 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v15 = *((unsigned int *)v13 - 1);
    v16 = &v13[2 * v15];
    if (*((_DWORD *)v13 - 3))
    {
      v14 = *a2;
      if ((_DWORD)v15)
      {
        v27 = 4 * v15;
        v14 = *a2;
        while (*v14 >= 0xFFFEu)
        {
          v14 += 2;
          v27 -= 4;
          if (!v27)
          {
            v14 = v16;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v14 = &v13[2 * v15];
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = &v13[2 * v15];
LABEL_18:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  for (result = v29; v14 != v13; result = v29)
  {
    v17 = *result;
    if (*result)
      v18 = *(_DWORD *)(v17 - 8);
    else
      v18 = 0;
    v19 = 0;
    v20 = ~(*v14 << 15) + *v14;
    v21 = (9 * (v20 ^ (v20 >> 10))) ^ ((9 * (v20 ^ (v20 >> 10))) >> 6);
    v22 = (v21 + ~(v21 << 11)) ^ ((v21 + ~(v21 << 11)) >> 16);
    do
    {
      v23 = v22 & v18;
      v22 = ++v19 + v23;
    }
    while (*(__int16 *)(v17 + 4 * v23) != -1);
    v24 = v17 + 4 * v23;
    v25 = *v14;
    *(_BYTE *)(v24 + 2) = *((_BYTE *)v14 + 2);
    *(_WORD *)v24 = v25;
    v26 = v14 + 2;
    v14 = v16;
    if (v26 != v16)
    {
      v14 = v26;
      while (*v14 >= 0xFFFEu)
      {
        v14 += 2;
        if (v14 == v16)
        {
          v14 = v16;
          break;
        }
      }
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::RGBFunctionModernRelative,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::RGBFunctionModernRelative,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::RGBFunctionModernRelative&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BB60[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 5;
  return result;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = WTF::fastMalloc((WTF *)0x60);
  v5 = result;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 88) = -1;
  v6 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E339D698[v6])(&v7, result, a2);
    *(_DWORD *)(v5 + 88) = v6;
  }
  *a1 = v5;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E339BB60[v3])(&v10, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
    }
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E339BB60[v4])(&v11, a1 + 40);
    *(_DWORD *)(a1 + 48) = -1;
    v5 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E339BB60[v5])(&v12, a1 + 24);
    *(_DWORD *)(a1 + 32) = -1;
    v6 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_1E339BB60[v6])(&v13, a1 + 8);
    *(_DWORD *)(a1 + 16) = -1;
    v7 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      v8 = v7[22];
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v8])(&v14, v7);
      v7[22] = -1;
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  __int128 *v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  int v12;
  __int16 v13;

  v12 = a4;
  v13 = WORD2(a4);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v6 = *(_DWORD *)v5 & 0x3F;
  if (v6 == 7)
  {
    v7 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v12);
    if (v8)
    {
      *(_QWORD *)a1 = v7;
      *(_DWORD *)(a1 + 8) = 2;
LABEL_5:
      v9 = 1;
    }
    else
    {
LABEL_16:
      v9 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    switch(v6)
    {
      case 0:
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)0,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, a2, a3);
        break;
      case 1:
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, (__int128 *)a2, a3, &v12);
        break;
      case 8:
        v10 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v12);
        if (!v11)
          goto LABEL_16;
        *(_QWORD *)a1 = v10;
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_5;
      default:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        break;
    }
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *v11;
  int v12;
  int v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  int v16;
  WebCore::CSSCalcValue *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::CSSCalcValue *v20;
  __int128 v21;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v18, a3);
  v8 = *a4;
  v21 = *a2;
  v9 = v18;
  v18 = 0;
  v19 = v9;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v21, 2, &v19, v8, &v20);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), v10);
  v11 = v20;
  if (v20)
    *a2 = v21;
  if (v18)
  {
    v17 = v11;
    WTF::fastFree((WTF *)(v18 - 16), v10);
    v11 = v17;
    if (v17)
    {
LABEL_7:
      v12 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 8) = 1;
      *(_BYTE *)(a1 + 16) = 1;
      if (v12)
      {
        *(_DWORD *)v11 = v12;
        return;
      }
LABEL_19:
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
      return;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v18, a3);
  v13 = *a4;
  v21 = *a2;
  v14 = v18;
  v18 = 0;
  v19 = v14;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v21, 0, &v19, v13, &v20);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), v10);
  v15 = v20;
  if (v20)
    *a2 = v21;
  if (v18)
  {
    WTF::fastFree((WTF *)(v18 - 16), v10);
    if (v15)
      goto LABEL_16;
  }
  else if (v15)
  {
LABEL_16:
    v16 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    *(_QWORD *)a1 = v15;
    *(_DWORD *)(a1 + 8) = 3;
    *(_BYTE *)(a1 + 16) = 1;
    if (v16)
    {
      *(_DWORD *)v15 = v16;
      return;
    }
    v11 = v15;
    goto LABEL_19;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)0,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, uint64_t a2, unsigned __int16 **a3)
{
  uint64_t result;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v9, a3);
  result = WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(a2);
  if (v9)
  {
    v8 = result;
    WTF::fastFree((WTF *)(v9 - 16), v6);
    result = v8;
  }
  if ((unsigned __int16)result >= 0x100u)
  {
    *(_DWORD *)(a1 + 8) = 4;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = v7;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(WebCore::CSSCalcValue ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::CSSCalcValue *v5;
  unsigned __int8 *v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *a2;
  v5 = **a1;
  v6 = (unsigned __int8 *)(*a1)[1];
  v8 = v4;
  v9 = 0;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>>(&v10, v5, v6, &v8);
  v7 = v11;
  if (v11)
  {
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 88) = 0;
    v7 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v7;
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E339BD10[v9])(&v12, &v8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::CSSCalcValue *v6;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *a1;
  v5 = *a2;
  *a2 = 0;
  v6 = *(WebCore::CSSCalcValue **)(v4 + 16);
  v7 = *(unsigned __int8 **)(v4 + 24);
  v9 = v5;
  v10 = 1;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>>(&v11, v6, v7, &v9);
  v8 = v12;
  if (v12)
  {
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 88) = 0;
    v8 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v8;
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E339BD10[v10])(&v13, &v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(__int128 ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *a2;
  v5 = **a1;
  v6 = (uint64_t)(*a1)[1];
  v8 = v4;
  v9 = 0;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>>(&v10, v5, v6, (char *)&v8);
  v7 = v11;
  if (v11)
  {
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 88) = 0;
    v7 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v7;
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E339BE10[v9])(&v12, &v8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 **v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *a1;
  v5 = *a2;
  *a2 = 0;
  v6 = *(__int128 ***)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v9 = v5;
  v10 = 1;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>>(&v11, v6, v7, (char *)&v9);
  v8 = v12;
  if (v12)
  {
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 88) = 0;
    v8 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v8;
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E339BE10[v10])(&v13, &v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1,WebCore::CSSPropertyParserHelpers::consumeRGBFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[96] = 0;
}

void WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>>(_BYTE *a1, WebCore::CSSCalcValue *a2, unsigned __int8 *a3, _BYTE *a4)
{
  void *v5;
  __int128 **v6;
  uint64_t v8;
  void *v9;
  unsigned __int16 *v10;
  int v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  void *v35;
  double v36;
  int v37;
  uint64_t v38;
  char v39;
  float v40;
  double v41;
  double v42;
  float v43;
  float64x2_t v44;
  float64x2_t v45;
  float32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  double v70;
  double v71;
  float32x2_t v72;
  unsigned __int16 **v73;
  unsigned int v74;
  _BYTE v75[8];
  unsigned int v76;
  _BYTE v77[8];
  unsigned int v78;
  _BYTE v79[8];
  int v80;
  unsigned __int8 v81;
  unsigned int v82;
  unsigned __int16 *v83;
  int v84;
  unsigned __int8 v85;
  unsigned __int16 ***v86;
  int v87;
  unsigned __int8 v88;
  unsigned __int16 **v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int16 **v92;
  unsigned int v93;
  double v94;
  double v95;
  double v96;
  _QWORD v97[2];
  char v98;
  _BYTE v99[7];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;

  v5 = a3;
  v6 = (__int128 **)a2;
  v8 = a3[4];
  v86 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>(a2, (unsigned __int16 **)&v86, v8 | 0x10100000000, (uint64_t)&v73);
  v10 = (unsigned __int16 *)v86;
  if (v86)
    goto LABEL_165;
  while (1)
  {
    if (!v75[0])
    {
      LOBYTE(v89) = 0;
      v91 = 0;
      goto LABEL_12;
    }
    if (v74 != -1)
      break;
LABEL_164:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_165:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v89 = &v83;
  ((void (*)(double *__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339BD00[v74])(&v94, &v89, &v73);
  LOBYTE(v89) = 0;
  v90 = -1;
  v11 = LODWORD(v95);
  if (LODWORD(v95) == -1)
  {
    v91 = 1;
  }
  else
  {
    ((void (*)(unsigned __int16 **, unsigned __int16 ***, double *))off_1E339BD20[LODWORD(v95)])(&v83, &v89, &v94);
    v90 = v11;
    v91 = 1;
    if (LODWORD(v95) != -1)
      ((void (*)(unsigned __int16 **, double *))off_1E339BD10[LODWORD(v95)])(&v83, &v94);
  }
  if (v75[0] && v74 != -1)
    ((void (*)(double *, unsigned __int16 ***))off_1E339BD10[v74])(&v94, &v73);
LABEL_12:
  if (!v91)
  {
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v13 = *v6;
  v12 = v6[1];
  v14 = (unint64_t)&dword_1ECE90000;
  if (*v6 >= v12)
  {
    v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v13 & 0x3F) != 0x15)
  {
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_153;
  }
  v15 = *v6;
  if (*v6 != v12)
  {
    v16 = (__int128 *)((char *)v15 + 24);
    *v6 = (__int128 *)((char *)v15 + 24);
    goto LABEL_17;
  }
  while (1)
  {
    v17 = 1;
    if ((*(_BYTE *)(v14 + 1248) & 1) != 0)
    {
      v16 = v12;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      *(_BYTE *)(v14 + 1248) = 1;
      v16 = *v6;
    }
    while (1)
    {
LABEL_17:
      if (v16 < v12 || (v17 & 1) != 0)
      {
        if (v16 >= v12)
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v18 = *(_DWORD *)v16;
      }
      else
      {
        v18 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
        v17 = 1;
        *(_BYTE *)(v14 + 1248) = 1;
      }
      if ((v18 & 0x3F) != 0x10)
        break;
      v16 = (__int128 *)((char *)*v6 + 24);
      *v6 = v16;
    }
    v19 = *((unsigned __int8 *)v5 + 4);
    v83 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>((WebCore::CSSCalcValue *)v6, &v83, v19 | 0x10100000000, (uint64_t)&v73);
    if (v83)
      WTF::fastFree((WTF *)(v83 - 8), v20);
    if (v75[0])
    {
      if (v74 == -1)
        goto LABEL_164;
      v86 = &v92;
      ((void (*)(double *__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339BD30[v74])(&v94, &v86, &v73);
      LOBYTE(v86) = 0;
      v87 = -1;
      v21 = LODWORD(v95);
      if (LODWORD(v95) == -1)
      {
        v88 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****, double *))off_1E339BD20[LODWORD(v95)])(&v92, &v86, &v94);
        v87 = v21;
        v88 = 1;
        if (LODWORD(v95) != -1)
          ((void (*)(unsigned __int16 ***, double *))off_1E339BD10[LODWORD(v95)])(&v92, &v94);
      }
      if (v75[0] && v74 != -1)
        ((void (*)(double *, unsigned __int16 ***))off_1E339BD10[v74])(&v94, &v73);
    }
    else
    {
      LOBYTE(v86) = 0;
      v88 = 0;
    }
    if (!v88)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_152;
    }
    LOBYTE(v83) = 0;
    v85 = 0;
    v23 = *v6;
    v22 = v6[1];
    if (*v6 >= v22)
    {
      v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((*(_BYTE *)(v14 + 1248) & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        *(_BYTE *)(v14 + 1248) = 1;
      }
    }
    if ((*(_DWORD *)v23 & 0x3F) != 0x15)
    {
      v30 = 0;
      goto LABEL_87;
    }
    v24 = *v6;
    if (*v6 == v22)
    {
      v26 = 1;
      v25 = v22;
      if ((*(_BYTE *)(v14 + 1248) & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        *(_BYTE *)(v14 + 1248) = 1;
        v25 = *v6;
      }
    }
    else
    {
      v25 = (__int128 *)((char *)v24 + 24);
      *v6 = (__int128 *)((char *)v24 + 24);
      v26 = *(_BYTE *)(v14 + 1248);
    }
    while (1)
    {
      if (v25 < v22 || (v26 & 1) != 0)
      {
        if (v25 >= v22)
          v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v27 = *(_DWORD *)v25;
      }
      else
      {
        v27 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
        v26 = 1;
        *(_BYTE *)(v14 + 1248) = 1;
      }
      if ((v27 & 0x3F) != 0x10)
        break;
      v25 = (__int128 *)((char *)*v6 + 24);
      *v6 = v25;
    }
    v28 = *((unsigned __int8 *)v5 + 4);
    v103 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw>::consume<>((uint64_t)v6, &v103, v28 | 0x10100000000, (uint64_t)&v73);
    if (v103)
      WTF::fastFree((WTF *)(v103 - 8), v29);
    if (v75[0])
    {
      if (v74 == -1)
        goto LABEL_164;
      v94 = COERCE_DOUBLE(&v102);
      ((void (*)(unsigned __int16 ***__return_ptr, double *, unsigned __int16 ***))off_1E339BD40[v74])(&v92, &v94, &v73);
      LOBYTE(v94) = 0;
      LODWORD(v95) = -1;
      v14 = v93;
      if (v93 == -1)
      {
        LOBYTE(v96) = 1;
      }
      else
      {
        ((void (*)(uint64_t *, double *, unsigned __int16 ***))off_1E339BD80[v93])(&v102, &v94, &v92);
        LODWORD(v95) = v14;
        LOBYTE(v96) = 1;
        if (v93 != -1)
          ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BD60[v93])(&v102, &v92);
      }
      if (v75[0] && v74 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BD60[v74])(&v92, &v73);
    }
    else
    {
      LOBYTE(v94) = 0;
      LOBYTE(v96) = 0;
    }
    if (v85 != LOBYTE(v96))
    {
      if (v85)
      {
        if (v84 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v84])(&v73, &v83);
        v84 = -1;
        v85 = 0;
      }
      else
      {
        LOBYTE(v83) = 0;
        v84 = -1;
        v14 = LODWORD(v95);
        if (LODWORD(v95) != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, double *))off_1E339BD80[LODWORD(v95)])(&v73, &v83, &v94);
          v84 = v14;
        }
        v85 = 1;
      }
      goto LABEL_82;
    }
    if (v85)
    {
      if (v84 == -1)
      {
        if (LODWORD(v95) == -1)
          goto LABEL_82;
      }
      else if (LODWORD(v95) == -1)
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v84])(&v73, &v83);
        v84 = -1;
LABEL_82:
        if (LOBYTE(v96) && LODWORD(v95) != -1)
          ((void (*)(unsigned __int16 ***, double *))off_1E339BD60[LODWORD(v95)])(&v73, &v94);
        goto LABEL_85;
      }
      v73 = &v83;
      ((void (*)(unsigned __int16 ***, unsigned __int16 **, double *))off_1E339BDA0[LODWORD(v95)])(&v73, &v83, &v94);
      goto LABEL_82;
    }
LABEL_85:
    if (!v85)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_149;
    }
    v22 = v6[1];
    v30 = 1;
LABEL_87:
    if (*v6 != v22)
    {
      *a1 = 0;
      a1[8] = 0;
      if (!v30)
        goto LABEL_149;
      goto LABEL_147;
    }
    v12 = (__int128 *)v91;
    if (v91)
    {
      v12 = (__int128 *)v88;
      if (v88)
        break;
    }
    __break(1u);
  }
  LOBYTE(v73) = 0;
  v74 = -1;
  v31 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v31 != -1)
  {
    ((void (*)(double *, unsigned __int16 ***, _BYTE *))off_1E339BD20[v31])(&v94, &v73, a4);
    v74 = v31;
  }
  a4 = v75;
  v75[0] = 0;
  v76 = -1;
  v32 = v90;
  if (v90 != -1)
  {
    ((void (*)(double *, _BYTE *, unsigned __int16 ***))off_1E339BD20[v90])(&v94, v75, &v89);
    v76 = v32;
  }
  v6 = (__int128 **)v77;
  v77[0] = 0;
  v78 = -1;
  v33 = v87;
  if (v87 != -1)
  {
    ((void (*)(double *, _BYTE *, unsigned __int16 ****))off_1E339BD20[v87])(&v94, v77, &v86);
    v78 = v33;
  }
  v79[0] = 0;
  v81 = 0;
  if (v85)
  {
    v80 = -1;
    v34 = v84;
    if (v84 != -1)
    {
      ((void (*)(double *, _BYTE *, unsigned __int16 **))off_1E339BD80[v84])(&v94, v79, &v83);
      v80 = v34;
    }
    v81 = 1;
  }
  v82 = *((_DWORD *)v5 + 2);
  v103 = 0;
  v92 = &v103;
  if (v74 == -1)
    goto LABEL_164;
  v94 = COERCE_DOUBLE(&v92);
  v5 = &unk_1E339BDC0;
  v71 = (*((double (**)(double *, unsigned __int16 ***))&unk_1E339BDC0 + v74))(&v94, &v73);
  v102 = 0;
  v92 = (unsigned __int16 **)&v102;
  if (v76 == -1)
    goto LABEL_164;
  v94 = COERCE_DOUBLE(&v92);
  v70 = (*((double (**)(double *, _BYTE *))&unk_1E339BDC0 + v76))(&v94, v75);
  v101 = 0;
  v92 = (unsigned __int16 **)&v101;
  if (v78 == -1)
    goto LABEL_164;
  v94 = COERCE_DOUBLE(&v92);
  v36 = (*((double (**)(double *, _BYTE *))&unk_1E339BDC0 + v78))(&v94, v77);
  v100 = 0;
  v37 = v81;
  if (v81)
  {
    v92 = (unsigned __int16 **)&v100;
    if (v80 == -1)
      goto LABEL_164;
    v94 = COERCE_DOUBLE(&v92);
    v38 = ((uint64_t (*)(double *, _BYTE *))off_1E339BDD0[v80])(&v94, v79);
    v5 = v35;
    if (v100)
    {
      v66 = v38;
      WTF::fastFree((WTF *)(v100 - 16), v35);
      v38 = v66;
    }
    v39 = 1;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  if (v101)
  {
    v67 = v39;
    v63 = v38;
    WTF::fastFree((WTF *)(v101 - 16), v35);
    v39 = v67;
    v38 = v63;
  }
  if (v102)
  {
    v68 = v39;
    v64 = v38;
    WTF::fastFree((WTF *)(v102 - 16), v35);
    v39 = v68;
    v38 = v64;
  }
  if (v103)
  {
    v69 = v39;
    v65 = v38;
    WTF::fastFree((WTF *)(v103 - 8), v35);
    v39 = v69;
    v38 = v65;
  }
  v94 = v71;
  v95 = v70;
  v96 = v36;
  v97[0] = v38;
  v97[1] = v5;
  v98 = v39;
  *(_DWORD *)v99 = (_DWORD)v103;
  *(_DWORD *)&v99[3] = *(_DWORD *)((char *)&v103 + 3);
  if (v37)
  {
    if (v5 == 0xFFFFFFFFLL)
      goto LABEL_164;
    v92 = (unsigned __int16 **)&v102;
    v40 = ((float (*)(unsigned __int16 ***, _QWORD *))off_1E339BDF0[v5])(&v92, v97);
  }
  else
  {
    v40 = 1.0;
  }
  v41 = 1.0;
  if (v36 * 0.01 <= 1.0)
    v41 = v36 * 0.01;
  v42 = 0.0;
  if (v36 * 0.01 >= 0.0)
    v42 = v41;
  v43 = v42;
  v44.f64[0] = v71;
  v44.f64[1] = v70;
  v45 = vmulq_f64(v44, (float64x2_t)vdupq_n_s64(0x3F847AE147AE147BuLL));
  __asm { FMOV            V2.2D, #1.0 }
  v51 = vcvt_f32_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v45, _Q2), (int8x16_t)_Q2, (int8x16_t)v45), (int8x16_t)vcltzq_f64(v45)));
  if (v82 < 2)
  {
    v54 = vmuls_lane_f32(255.0, v51, 1);
    v55 = llroundf(255.0 * v51.f32[0]);
    v56 = 255;
    if (v55 >= 255)
      v55 = 255;
    v57 = v55 & ~(v55 >> 63);
    v58 = llroundf(v54);
    if (v58 >= 255)
      v58 = 255;
    v59 = v58 & ~(v58 >> 63);
    v60 = llroundf(v43 * 255.0);
    if (v60 >= 255)
      v60 = 255;
    v61 = llroundf(v40 * 255.0);
    v62 = v60 & ~(v60 >> 63);
    if (v61 < 255)
      v56 = v61;
    v53 = bswap32(((v56 & ~(v56 >> 63)) << 24) | (v62 << 16) | (v59 << 8) | v57) | 0x1104000000000000;
  }
  else
  {
    v72 = v51;
    v52 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v52 = 1;
    *(float32x2_t *)(v52 + 4) = v72;
    *(float *)(v52 + 12) = v43;
    *(float *)(v52 + 16) = v40;
    v53 = v52 | 0x110C000000000000;
  }
  *(_QWORD *)a1 = v53;
  a1[8] = 1;
  if (v81)
  {
    if (v80 != -1)
      ((void (*)(double *, _BYTE *))off_1E339BD60[v80])(&v94, v79);
    v80 = -1;
  }
  if (v78 != -1)
    ((void (*)(double *, _BYTE *))off_1E339BD10[v78])(&v94, v77);
  v78 = -1;
  if (v76 != -1)
    ((void (*)(double *, _BYTE *))off_1E339BD10[v76])(&v94, v75);
  v76 = -1;
  if (v74 != -1)
    ((void (*)(double *, unsigned __int16 ***))off_1E339BD10[v74])(&v94, &v73);
  if (v85)
  {
LABEL_147:
    if (v84 != -1)
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v84])(&v73, &v83);
  }
LABEL_149:
  if (v88 && v87 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BD10[v87])(&v73, &v86);
LABEL_152:
  if (!v91)
    return;
LABEL_153:
  if (v90 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BD10[v90])(&v73, &v89);
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>@<X0>(WebCore::CSSCalcValue *result@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v5;
  int v6;
  char v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned __int16 v35;
  unsigned __int16 *v36;
  unint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  __int128 **v41;
  int v42;
  __int16 v43;
  _DWORD *v44;

  v42 = a3;
  v43 = WORD2(a3);
  v5 = *(__int128 **)result;
  if (*(_QWORD *)result >= *((_QWORD *)result + 1))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v6 = *(_DWORD *)v5 & 0x3F;
  if (v6 != 8)
  {
    if (v6 == 1)
      return WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)result, a2, &v42, a4);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }
  if (*a2)
  {
    v9 = a3;
    v41 = (__int128 **)result;
    v10 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v10)
    {
      v12 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
      v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
      v14 = (v13 | HIWORD(v13)) + 1;
      if (v14 > 0x400)
      {
        if (v14 > 2 * v10)
          goto LABEL_42;
      }
      else if (3 * v14 > 4 * v10)
      {
LABEL_18:
        v15 = (double)v10;
        v16 = (double)v14;
        v17 = 0.604166667;
        goto LABEL_19;
      }
      LODWORD(v14) = 2 * v14;
      if (v14 <= 0x400)
        goto LABEL_18;
LABEL_42:
      v15 = (double)v10;
      v16 = (double)v14;
      v17 = 0.416666667;
LABEL_19:
      if (v16 * v17 <= v15)
        LODWORD(v14) = 2 * v14;
      if (v14 <= 8)
        v18 = 8;
      else
        v18 = v14;
      v19 = 4 * v18;
      v20 = (WTF *)WTF::fastMalloc((WTF *)(v19 + 16));
      v21 = v20;
      v22 = 0;
      v23 = (_DWORD *)((char *)v20 + 16);
      do
      {
        v24 = (_DWORD *)((char *)v20 + v22);
        *((_WORD *)v24 + 8) = -1;
        *((_BYTE *)v24 + 18) = 0;
        v22 += 4;
      }
      while (v19 != v22);
      v44 = (_DWORD *)((char *)v20 + 16);
      *((_DWORD *)v20 + 2) = v18 - 1;
      *((_DWORD *)v20 + 3) = v18;
      *(_DWORD *)v20 = 0;
      *((_DWORD *)v20 + 1) = v10;
      v25 = *a2;
      if (*a2)
      {
        v27 = *((unsigned int *)v25 - 1);
        v28 = &v25[2 * v27];
        if (*((_DWORD *)v25 - 3))
        {
          v26 = *a2;
          if ((_DWORD)v27)
          {
            v40 = 4 * v27;
            v26 = *a2;
            while (*v26 >= 0xFFFEu)
            {
              v26 += 2;
              v40 -= 4;
              if (!v40)
              {
                v26 = v28;
                goto LABEL_29;
              }
            }
          }
          goto LABEL_29;
        }
        v26 = &v25[2 * v27];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
      v28 = &v25[2 * v27];
LABEL_29:
      if (v25)
        v25 += 2 * *((unsigned int *)v25 - 1);
      while (v26 != v25)
      {
        v29 = 0;
        v30 = ~(*v26 << 15) + *v26;
        v31 = (9 * (v30 ^ (v30 >> 10))) ^ ((9 * (v30 ^ (v30 >> 10))) >> 6);
        v32 = (v31 + ~(v31 << 11)) ^ ((v31 + ~(v31 << 11)) >> 16);
        do
        {
          v33 = v32 & (v18 - 1);
          v32 = ++v29 + v33;
        }
        while (SLOWORD(v23[v33]) != -1);
        v34 = &v23[v33];
        v35 = *v26;
        *((_BYTE *)v34 + 2) = *((_BYTE *)v26 + 2);
        *(_WORD *)v34 = v35;
        v36 = v26 + 2;
        v26 = v28;
        if (v36 != v28)
        {
          v26 = v36;
          while (*v26 >= 0xFFFEu)
          {
            v26 += 2;
            if (v26 == v28)
            {
              v26 = v28;
              break;
            }
          }
        }
      }
      v37 = WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypePercentConsumer::consume(v41, (uint64_t)&v44, v9);
      v39 = (char)v38;
      WTF::fastFree(v21, v38);
      v7 = v39;
      result = (WebCore::CSSCalcValue *)v37;
      goto LABEL_5;
    }
  }
  result = (WebCore::CSSCalcValue *)WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypePercentConsumer::consume((__int128 **)result, (uint64_t)&v44, a3);
LABEL_5:
  if (v7)
  {
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 8) = 0;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v8;
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>@<X0>(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *result;
  int v11;
  WebCore::CSSCalcValue *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  __int128 v16;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v13, a2);
  v7 = *a3;
  v16 = *a1;
  v8 = v13;
  v13 = 0;
  v14 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v16, 2, &v14, v7, &v15);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v9);
  result = v15;
  if (v15)
    *a1 = v16;
  if (!v13)
  {
    if (result)
      goto LABEL_7;
LABEL_11:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }
  v12 = result;
  WTF::fastFree((WTF *)(v13 - 16), v9);
  result = v12;
  if (!v12)
    goto LABEL_11;
LABEL_7:
  v11 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 16) = 1;
  if (!v11)
    return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v9);
  *(_DWORD *)result = v11;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw>::consume<>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned __int16 v34;
  unsigned __int16 *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char v40;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  __int16 v45;
  _DWORD *v46;

  v44 = a3;
  v45 = WORD2(a3);
  v5 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v6 = *(_DWORD *)v5 & 0x3F;
  if (v6 == 7)
  {
    if (!*a2)
    {
      v7 = WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume((__int128 **)a1, (uint64_t)&v46, a3);
LABEL_5:
      if (v8)
      {
        *(_QWORD *)a4 = v7;
        *(_DWORD *)(a4 + 8) = 2;
LABEL_7:
        v9 = 1;
      }
      else
      {
LABEL_16:
        v9 = 0;
        *(_BYTE *)a4 = 0;
      }
      *(_BYTE *)(a4 + 16) = v9;
      return;
    }
    v12 = *((unsigned int *)*a2 - 3);
    if (!(_DWORD)v12)
    {
      v43 = 0;
LABEL_44:
      v36 = WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume((__int128 **)a1, (uint64_t)&v46, v44);
      v40 = (char)v37;
      v42 = v36;
      if (v43)
        WTF::fastFree((WTF *)(v43 - 4), v37);
      v8 = v40;
      v7 = v42;
      goto LABEL_5;
    }
    v13 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
    v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    v15 = (v14 | HIWORD(v14)) + 1;
    if (v15 > 0x400)
    {
      if (v15 > 2 * v12)
        goto LABEL_48;
    }
    else if (3 * v15 > 4 * v12)
    {
LABEL_22:
      v16 = (double)v12;
      v17 = (double)v15;
      v18 = 0.604166667;
      goto LABEL_23;
    }
    LODWORD(v15) = 2 * v15;
    if (v15 <= 0x400)
      goto LABEL_22;
LABEL_48:
    v16 = (double)v12;
    v17 = (double)v15;
    v18 = 0.416666667;
LABEL_23:
    if (v17 * v18 <= v16)
      LODWORD(v15) = 2 * v15;
    if (v15 <= 8)
      v19 = 8;
    else
      v19 = v15;
    v20 = 4 * v19;
    v21 = (_DWORD *)WTF::fastMalloc((WTF *)(v20 + 16));
    v22 = 0;
    v43 = v21 + 4;
    do
    {
      v23 = &v21[v22 / 4];
      *((_WORD *)v23 + 8) = -1;
      *((_BYTE *)v23 + 18) = 0;
      v22 += 4;
    }
    while (v20 != v22);
    v46 = v21 + 4;
    v21[2] = v19 - 1;
    v21[3] = v19;
    *v21 = 0;
    v21[1] = v12;
    v24 = *a2;
    if (*a2)
    {
      v26 = *((unsigned int *)v24 - 1);
      v27 = &v24[2 * v26];
      if (*((_DWORD *)v24 - 3))
      {
        v25 = *a2;
        if ((_DWORD)v26)
        {
          v38 = 4 * v26;
          v25 = *a2;
          while (*v25 >= 0xFFFEu)
          {
            v25 += 2;
            v38 -= 4;
            if (!v38)
            {
              v25 = v27;
              goto LABEL_33;
            }
          }
        }
        goto LABEL_33;
      }
      v25 = &v24[2 * v26];
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v27 = &v24[2 * v26];
LABEL_33:
    if (v24)
      v24 += 2 * *((unsigned int *)v24 - 1);
    while (v25 != v24)
    {
      v28 = 0;
      v29 = ~(*v25 << 15) + *v25;
      v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
      v31 = (v30 + ~(v30 << 11)) ^ ((v30 + ~(v30 << 11)) >> 16);
      do
      {
        v32 = v31 & (v19 - 1);
        v31 = ++v28 + v32;
      }
      while (SLOWORD(v43[v32]) != -1);
      v33 = &v43[v32];
      v34 = *v25;
      *((_BYTE *)v33 + 2) = *((_BYTE *)v25 + 2);
      *(_WORD *)v33 = v34;
      v35 = v25 + 2;
      v25 = v27;
      if (v35 != v27)
      {
        v25 = v35;
        while (*v25 >= 0xFFFEu)
        {
          v25 += 2;
          if (v25 == v27)
          {
            v25 = v27;
            break;
          }
        }
      }
    }
    goto LABEL_44;
  }
  switch(v6)
  {
    case 1:
      WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>>,WebCore::PercentRaw,WebCore::NumberRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)a1, a2, &v44, a4);
      break;
    case 8:
      v10 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a1, a2, &v44);
      if (!v11)
        goto LABEL_16;
      *(_QWORD *)a4 = v10;
      *(_DWORD *)(a4 + 8) = 0;
      goto LABEL_7;
    default:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
      break;
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>>,WebCore::PercentRaw,WebCore::NumberRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *v11;
  int v12;
  WebCore::CSSCalcValue *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::CSSCalcValue *v16;
  __int128 v17;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v14, a2);
  v8 = *a3;
  v17 = *a1;
  v9 = v14;
  v14 = 0;
  v15 = v9;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v17, 2, &v15, v8, &v16);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v10);
  v11 = v16;
  if (v16)
    *a1 = v17;
  if (v14)
  {
    v13 = v11;
    WTF::fastFree((WTF *)(v14 - 16), v10);
    v11 = v13;
    if (v13)
    {
LABEL_7:
      v12 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(_QWORD *)a4 = v11;
      *(_DWORD *)(a4 + 8) = 1;
      *(_BYTE *)(a4 + 16) = 1;
      if (v12)
      {
LABEL_8:
        *(_DWORD *)v11 = v12;
        return;
      }
      goto LABEL_12;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, a2, a3, (uint64_t)&v17);
  if (BYTE8(v17))
  {
    v11 = (WebCore::CSSCalcValue *)v17;
    v12 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a4 + 8) = 3;
    *(_BYTE *)(a4 + 16) = 1;
    *(_QWORD *)&v17 = 0;
    if (v12)
      goto LABEL_8;
LABEL_12:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
    return;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,std::__variant_detail::_Trait<WebCore::UnevaluatedCalc<WebCore::PercentRaw>>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,std::__variant_detail::_Trait<WebCore::UnevaluatedCalc<WebCore::PercentRaw>>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,std::__variant_detail::_Trait<WebCore::UnevaluatedCalc<WebCore::PercentRaw>>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::PercentRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::PercentRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,std::__variant_detail::_Trait<WebCore::UnevaluatedCalc<WebCore::PercentRaw>>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD60[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD60[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD60[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD60[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;
  _DWORD *v6;
  _DWORD *v8;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v8 = v3;
  v5 = WebCore::evaluateCalc((uint64_t *)&v8, *v2);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v4);
    else
      *v6 -= 2;
  }
  return *(_QWORD *)&v5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_10PercentRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return *(_QWORD *)&v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17RGBFunctionLegacyINSA_10PercentRawEEELj3EJSD_NSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17RGBFunctionLegacyINSA_10PercentRawEEELj3EJSD_NSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

void WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>>(_BYTE *a1, __int128 **a2, uint64_t a3, char *a4)
{
  float64_t *v4;
  unsigned __int16 ***v5;
  int *v6;
  double v7;
  uint64_t (**v9)();
  __int128 **v10;
  __int16 v12;
  void *v13;
  uint64_t (**v14)();
  int v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  __int16 v22;
  void *v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t (**v37)();
  uint64_t v38;
  float64x2_t v39;
  double v40;
  uint64_t v41;
  float v42;
  double v43;
  double v44;
  float v45;
  float64x2_t v46;
  float32x2_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  float32x2_t v71;
  uint64_t *v72;
  int v73;
  char v74[8];
  int v75;
  char v76[8];
  int v77;
  char v78[8];
  int v79;
  unsigned __int8 v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned __int8 v84;
  unsigned __int16 ***v85;
  int v86;
  char v87;
  uint64_t *v88;
  int v89;
  char v90;
  unsigned __int16 **v91;
  int v92;
  float64_t v93;
  double v94;
  double v95;
  _QWORD v96[2];
  char v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102[2];

  v9 = (uint64_t (**)())a3;
  v10 = a2;
  v12 = *(unsigned __int8 *)(a3 + 4);
  v85 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(a2, &v85, v12, (uint64_t)&v72);
  if (v85)
    WTF::fastFree((WTF *)(v85 - 2), v13);
  v14 = off_1E339BE20;
  if (!v74[0])
    goto LABEL_153;
  if (v73 == -1)
    goto LABEL_163;
  v88 = &v82;
  ((void (*)(float64_t *__return_ptr, uint64_t **, uint64_t **))off_1E339BE00[v73])(&v93, &v88, &v72);
  LOBYTE(v88) = 0;
  v89 = -1;
  v15 = LODWORD(v94);
  if (LODWORD(v94) == -1)
  {
    v90 = 1;
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, float64_t *))off_1E339BE20[LODWORD(v94)])(&v82, &v88, &v93);
    v89 = v15;
    v90 = 1;
    if (LODWORD(v94) != -1)
      ((void (*)(uint64_t *, float64_t *))off_1E339BE10[LODWORD(v94)])(&v82, &v93);
  }
  if (v74[0] && v73 != -1)
    ((void (*)(float64_t *, uint64_t **))off_1E339BE10[v73])(&v93, &v72);
  while (1)
  {
    if (!v90)
    {
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v17 = *v10;
    v16 = v10[1];
    v6 = &dword_1ECE90000;
    if (*v10 >= v16)
    {
      v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v17 & 0x3F) != 0x15)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_127;
    }
    v18 = *v10;
    if (*v10 == v16)
    {
      v20 = 1;
      {
        v19 = v16;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v19 = *v10;
      }
    }
    else
    {
      v19 = (__int128 *)((char *)v18 + 24);
      *v10 = (__int128 *)((char *)v18 + 24);
    }
    v4 = &v93;
    while (1)
    {
      if (v19 < v16 || (v20 & 1) != 0)
      {
        if (v19 >= v16)
          v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v21 = *(_DWORD *)v19;
      }
      else
      {
        v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
        v20 = 1;
      }
      if ((v21 & 0x3F) != 0x10)
        break;
      v19 = (__int128 *)((char *)*v10 + 24);
      *v10 = v19;
    }
    v22 = *((unsigned __int8 *)v9 + 4);
    v82 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(v10, &v82, v22, (uint64_t)&v72);
    if (v82)
      WTF::fastFree((WTF *)(v82 - 16), v23);
    if (v74[0])
    {
      if (v73 == -1)
        goto LABEL_163;
      v85 = &v91;
      ((void (*)(float64_t *__return_ptr, unsigned __int16 ****, uint64_t **))off_1E339BE30[v73])(&v93, &v85, &v72);
      LOBYTE(v85) = 0;
      v86 = -1;
      v24 = LODWORD(v94);
      if (LODWORD(v94) == -1)
      {
        v87 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****, float64_t *))off_1E339BE20[LODWORD(v94)])(&v91, &v85, &v93);
        v86 = v24;
        v87 = 1;
        if (LODWORD(v94) != -1)
          ((void (*)(unsigned __int16 ***, float64_t *))off_1E339BE10[LODWORD(v94)])(&v91, &v93);
      }
      if (v74[0] && v73 != -1)
        ((void (*)(float64_t *, uint64_t **))off_1E339BE10[v73])(&v93, &v72);
    }
    else
    {
      LOBYTE(v85) = 0;
      v87 = 0;
    }
    if (!v87)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_126;
    }
    LOBYTE(v82) = 0;
    v84 = 0;
    v26 = *v10;
    v25 = v10[1];
    if (*v10 >= v25)
    {
      v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v5 = (unsigned __int16 ***)off_1E339BD80;
    if ((*(_DWORD *)v26 & 0x3F) != 0x15)
    {
      v34 = 0;
      goto LABEL_68;
    }
    v27 = *v10;
    if (*v10 == v25)
    {
      v29 = 1;
      v28 = v25;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v28 = *v10;
      }
    }
    else
    {
      v28 = (__int128 *)((char *)v27 + 24);
      *v10 = (__int128 *)((char *)v27 + 24);
    }
    while (1)
    {
      if (v28 < v25 || (v29 & 1) != 0)
      {
        if (v28 >= v25)
          v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v30 = *(_DWORD *)v28;
      }
      else
      {
        v30 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
        v29 = 1;
      }
      if ((v30 & 0x3F) != 0x10)
        break;
      v28 = (__int128 *)((char *)*v10 + 24);
      *v10 = v28;
    }
    v31 = *((unsigned __int8 *)v9 + 4);
    v102[0] = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw>::consume<>((uint64_t)v10, v102, v31 | 0x10100000000, (uint64_t)&v72);
    if (v102[0])
      WTF::fastFree((WTF *)(v102[0] - 8), v32);
    if (v74[0])
    {
      if (v73 == -1)
        goto LABEL_163;
      v93 = COERCE_DOUBLE(&v101);
      ((void (*)(unsigned __int16 ***__return_ptr, float64_t *, uint64_t **))off_1E339BE40[v73])(&v91, &v93, &v72);
      LOBYTE(v93) = 0;
      LODWORD(v94) = -1;
      v33 = v92;
      if (v92 == -1)
      {
        LOBYTE(v95) = 1;
      }
      else
      {
        ((void (*)(uint64_t *, float64_t *, unsigned __int16 ***))off_1E339BD80[v92])(&v101, &v93, &v91);
        LODWORD(v94) = v33;
        LOBYTE(v95) = 1;
        if (v92 != -1)
          ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BD60[v92])(&v101, &v91);
      }
      if (v74[0] && v73 != -1)
        ((void (*)(unsigned __int16 ***, uint64_t **))off_1E339BD60[v73])(&v91, &v72);
    }
    else
    {
      LOBYTE(v93) = 0;
      LOBYTE(v95) = 0;
    }
    if (v84 != LOBYTE(v95))
    {
      if (v84)
      {
        if (v83 != -1)
          ((void (*)(uint64_t **, uint64_t *))off_1E339BD60[v83])(&v72, &v82);
        v83 = -1;
        v84 = 0;
      }
      else
      {
        LOBYTE(v82) = 0;
        v83 = -1;
        v63 = LODWORD(v94);
        if (LODWORD(v94) != -1)
        {
          ((void (*)(uint64_t **, uint64_t *, float64_t *))off_1E339BD80[LODWORD(v94)])(&v72, &v82, &v93);
          v83 = v63;
        }
        v84 = 1;
      }
      goto LABEL_63;
    }
    if (v84)
    {
      if (v83 == -1)
      {
        if (LODWORD(v94) == -1)
          goto LABEL_63;
      }
      else if (LODWORD(v94) == -1)
      {
        ((void (*)(uint64_t **, uint64_t *))off_1E339BD60[v83])(&v72, &v82);
        v83 = -1;
        goto LABEL_63;
      }
      v72 = &v82;
      ((void (*)(uint64_t **, uint64_t *, float64_t *))off_1E339BDA0[LODWORD(v94)])(&v72, &v82, &v93);
LABEL_63:
      if (LOBYTE(v95) && LODWORD(v94) != -1)
        ((void (*)(uint64_t **, float64_t *))off_1E339BD60[LODWORD(v94)])(&v72, &v93);
    }
    if (!v84)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_123;
    }
    v25 = v10[1];
    v34 = 1;
LABEL_68:
    if (*v10 != v25)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_120;
    }
    if (v90 && v87)
      break;
    __break(1u);
LABEL_153:
    LOBYTE(v88) = 0;
    v90 = 0;
  }
  LOBYTE(v72) = 0;
  v73 = -1;
  v35 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v35 != -1)
  {
    ((void (*)(float64_t *, uint64_t **, char *))off_1E339BE20[v35])(&v93, &v72, a4);
    v73 = v35;
  }
  a4 = v74;
  v74[0] = 0;
  v75 = -1;
  v36 = v89;
  if (v89 != -1)
  {
    ((void (*)(float64_t *, char *, uint64_t **))off_1E339BE20[v89])(&v93, v74, &v88);
    v75 = v36;
  }
  v10 = (__int128 **)v76;
  v76[0] = 0;
  v77 = -1;
  LODWORD(v6) = v86;
  if (v86 != -1)
  {
    ((void (*)(float64_t *, char *, unsigned __int16 ****))off_1E339BE20[v86])(&v93, v76, &v85);
    v77 = (int)v6;
  }
  v14 = (uint64_t (**)())v78;
  v78[0] = 0;
  v80 = 0;
  if (v84)
  {
    v79 = -1;
    LODWORD(v6) = v83;
    if (v83 != -1)
    {
      ((void (*)(float64_t *, char *, uint64_t *))off_1E339BD80[v83])(&v93, v78, &v82);
      v79 = (int)v6;
    }
    v80 = 1;
  }
  v81 = *((_DWORD *)v9 + 2);
  v102[0] = 0;
  v91 = v102;
  if (v73 == -1)
    goto LABEL_163;
  v5 = &v91;
  v93 = COERCE_DOUBLE(&v91);
  v9 = off_1E339BE60;
  v70 = ((double (*)(float64_t *, uint64_t **))off_1E339BE60[v73])(&v93, &v72);
  v101 = 0;
  v91 = (unsigned __int16 **)&v101;
  if (v75 == -1)
    goto LABEL_163;
  v93 = COERCE_DOUBLE(&v91);
  v69 = ((double (*)(float64_t *, char *))off_1E339BE60[v75])(&v93, v74);
  v100 = 0;
  v91 = (unsigned __int16 **)&v100;
  if (v77 == -1)
    goto LABEL_163;
  v93 = COERCE_DOUBLE(&v91);
  v7 = ((double (*)(float64_t *, char *))off_1E339BE60[v77])(&v93, v76);
  v99 = 0;
  LODWORD(v5) = v80;
  if (v80)
  {
    v91 = (unsigned __int16 **)&v99;
    if (v79 == -1)
      goto LABEL_163;
    v93 = COERCE_DOUBLE(&v91);
    v38 = ((uint64_t (*)(float64_t *, char *))off_1E339BDD0[v79])(&v93, v78);
    v9 = v37;
    if (v99)
    {
      v68 = v38;
      WTF::fastFree((WTF *)(v99 - 16), v37);
      v38 = v68;
    }
    LOBYTE(v6) = 1;
  }
  else
  {
    v38 = 0;
    LOBYTE(v6) = 0;
  }
  v40 = v69;
  v39.f64[0] = v70;
  v41 = v100;
  if (v100)
    goto LABEL_164;
  while (1)
  {
    if (v101)
    {
      v66 = v38;
      WTF::fastFree((WTF *)(v101 - 16), v37);
      v40 = v69;
      v39.f64[0] = v70;
      v38 = v66;
    }
    if (v102[0])
    {
      v67 = v38;
      WTF::fastFree((WTF *)(v102[0] - 8), v37);
      v40 = v69;
      v39.f64[0] = v70;
      v38 = v67;
    }
    v93 = v39.f64[0];
    v94 = v40;
    v95 = v7;
    v96[0] = v38;
    v96[1] = v9;
    v97 = (char)v6;
    *(_DWORD *)((char *)v4 + 41) = v102[0];
    v98 = *(_DWORD *)((char *)v4 + 75);
    v42 = 1.0;
    if (!(_DWORD)v5)
      break;
    if (v9 != 0xFFFFFFFFLL)
    {
      v91 = (unsigned __int16 **)&v101;
      v42 = ((float (*)(unsigned __int16 ***, _QWORD *))off_1E339BE70[v9])(&v91, v96);
      v40 = v69;
      v39.f64[0] = v70;
      break;
    }
LABEL_163:
    v38 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_164:
    v65 = v38;
    WTF::fastFree((WTF *)(v41 - 16), v37);
    v40 = v69;
    v39.f64[0] = v70;
    v38 = v65;
  }
  v43 = 1.0;
  if (v7 * 0.00392156863 <= 1.0)
    v43 = v7 * 0.00392156863;
  v44 = 0.0;
  if (v7 * 0.00392156863 >= 0.0)
    v44 = v43;
  v45 = v44;
  v39.f64[1] = v40;
  v46 = vmulq_f64(v39, (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL));
  __asm { FMOV            V2.2D, #1.0 }
  v52 = vcvt_f32_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v46, _Q2), (int8x16_t)_Q2, (int8x16_t)v46), (int8x16_t)vcltzq_f64(v46)));
  if (v81 >= 2)
  {
    v71 = v52;
    v64 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v64 = 1;
    *(float32x2_t *)(v64 + 4) = v71;
    *(float *)(v64 + 12) = v45;
    *(float *)(v64 + 16) = v42;
    v62 = v64 | 0x110C000000000000;
  }
  else
  {
    v53 = vmuls_lane_f32(255.0, v52, 1);
    v54 = llroundf(255.0 * v52.f32[0]);
    v55 = 255;
    if (v54 >= 255)
      v54 = 255;
    v56 = v54 & ~(v54 >> 63);
    v57 = llroundf(v53);
    if (v57 >= 255)
      v57 = 255;
    v58 = v57 & ~(v57 >> 63);
    v59 = llroundf(v45 * 255.0);
    if (v59 >= 255)
      v59 = 255;
    v60 = llroundf(v42 * 255.0);
    v61 = v59 & ~(v59 >> 63);
    if (v60 < 255)
      v55 = v60;
    v62 = bswap32(((v55 & ~(v55 >> 63)) << 24) | (v61 << 16) | (v58 << 8) | v56) | 0x1104000000000000;
  }
  *(_QWORD *)a1 = v62;
  a1[8] = 1;
  if (v80)
  {
    if (v79 != -1)
      ((void (*)(float64_t *, uint64_t (**)()))off_1E339BD60[v79])(&v93, v14);
    v79 = -1;
  }
  if (v77 != -1)
    ((void (*)(float64_t *, __int128 **))off_1E339BE10[v77])(&v93, v10);
  v77 = -1;
  if (v75 != -1)
    ((void (*)(float64_t *, char *))off_1E339BE10[v75])(&v93, a4);
  v75 = -1;
  if (v73 != -1)
    ((void (*)(float64_t *, uint64_t **))off_1E339BE10[v73])(&v93, &v72);
  v34 = v84;
LABEL_120:
  if (v34 && v83 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E339BD60[v83])(&v72, &v82);
LABEL_123:
  if (v87 && v86 != -1)
    ((void (*)(uint64_t **, unsigned __int16 ****))off_1E339BE10[v86])(&v72, &v85);
LABEL_126:
  if (!v90)
    return;
LABEL_127:
  if (v89 != -1)
    ((void (*)(uint64_t **, uint64_t **))off_1E339BE10[v89])(&v72, &v88);
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(__int128 **a1@<X0>, _QWORD *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *v7;
  int *v8;
  int v9;
  _DWORD *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  uint64_t v20;
  void *v21;
  WebCore::CSSCalcValue *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned __int16 v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  WebCore::CSSCalcValue *v52;
  __int128 v53;

  v7 = *a1;
  v8 = &dword_1ECE90000;
  if (*a1 >= a1[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v9 = *(_DWORD *)v7 & 0x3F;
  if (v9 == 7)
  {
    v10 = (_DWORD *)*a2;
    if (!*a2)
      goto LABEL_4;
    v24 = *(v10 - 3);
    if (!(_DWORD)v24)
    {
      v10 = 0;
LABEL_4:
      v12 = *a1;
      v11 = a1[1];
      if (*a1 >= v11)
      {
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v8[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v8 + 1248) = 1;
        }
      }
      if ((a3 & 0xFF00) == 0x100 && *((double *)v12 + 2) < 0.0)
      {
        v13 = 0;
        v18 = 1;
      }
      else
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *a1;
        if (*a1 == v11)
        {
          v16 = 1;
          if ((v8[312] & 1) != 0)
          {
            v15 = v11;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            *((_BYTE *)v8 + 1248) = 1;
            v15 = *a1;
          }
        }
        else
        {
          v15 = (__int128 *)((char *)v14 + 24);
          *a1 = (__int128 *)((char *)v14 + 24);
          v16 = *((_BYTE *)v8 + 1248);
        }
        while (1)
        {
          if (v15 < v11 || (v16 & 1) != 0)
          {
            if (v15 >= v11)
              v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v17 = *(_DWORD *)v15;
          }
          else
          {
            v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
            v16 = 1;
            *((_BYTE *)v8 + 1248) = 1;
          }
          if ((v17 & 0x3F) != 0x10)
            break;
          v15 = (__int128 *)((char *)*a1 + 24);
          *a1 = v15;
        }
        v18 = 0;
      }
      if (v10)
        WTF::fastFree((WTF *)(v10 - 4), a2);
      if ((v18 & 1) != 0)
      {
        v19 = 0;
        *(_BYTE *)a4 = 0;
      }
      else
      {
        *(_QWORD *)a4 = v13;
        *(_DWORD *)(a4 + 8) = 0;
        v19 = 1;
      }
      *(_BYTE *)(a4 + 16) = v19;
      return;
    }
    v25 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
    v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
    v27 = (v26 | HIWORD(v26)) + 1;
    if (v27 > 0x400)
    {
      if (v27 > 2 * v24)
        goto LABEL_71;
    }
    else if (3 * v27 > 4 * v24)
    {
LABEL_46:
      v28 = (double)v24;
      v29 = (double)v27;
      v30 = 0.604166667;
      goto LABEL_47;
    }
    LODWORD(v27) = 2 * v27;
    if (v27 <= 0x400)
      goto LABEL_46;
LABEL_71:
    v28 = (double)v24;
    v29 = (double)v27;
    v30 = 0.416666667;
LABEL_47:
    if (v29 * v30 <= v28)
      LODWORD(v27) = 2 * v27;
    if (v27 <= 8)
      v31 = 8;
    else
      v31 = v27;
    v32 = 4 * v31;
    v33 = (_DWORD *)WTF::fastMalloc((WTF *)(v32 + 16));
    v34 = 0;
    v10 = v33 + 4;
    do
    {
      v35 = &v33[v34 / 4];
      *((_WORD *)v35 + 8) = -1;
      *((_BYTE *)v35 + 18) = 0;
      v34 += 4;
    }
    while (v32 != v34);
    v33[2] = v31 - 1;
    v33[3] = v31;
    *v33 = 0;
    v33[1] = v24;
    v36 = (unsigned __int16 *)*a2;
    if (*a2)
    {
      v38 = *((unsigned int *)v36 - 1);
      v39 = &v36[2 * v38];
      if (*((_DWORD *)v36 - 3))
      {
        v37 = (unsigned __int16 *)*a2;
        if ((_DWORD)v38)
        {
          v48 = 4 * v38;
          v37 = (unsigned __int16 *)*a2;
          while (*v37 >= 0xFFFEu)
          {
            v37 += 2;
            v48 -= 4;
            if (!v48)
            {
              v37 = v39;
              goto LABEL_57;
            }
          }
        }
        goto LABEL_57;
      }
      v37 = &v36[2 * v38];
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v39 = &v36[2 * v38];
LABEL_57:
    if (v36)
      v36 += 2 * *((unsigned int *)v36 - 1);
    while (v37 != v36)
    {
      v40 = 0;
      v41 = ~(*v37 << 15) + *v37;
      v42 = (9 * (v41 ^ (v41 >> 10))) ^ ((9 * (v41 ^ (v41 >> 10))) >> 6);
      v43 = (v42 + ~(v42 << 11)) ^ ((v42 + ~(v42 << 11)) >> 16);
      do
      {
        v44 = v43 & (v31 - 1);
        v43 = ++v40 + v44;
      }
      while (SLOWORD(v10[v44]) != -1);
      v45 = &v10[v44];
      v46 = *v37;
      *((_BYTE *)v45 + 2) = *((_BYTE *)v37 + 2);
      *(_WORD *)v45 = v46;
      v47 = v37 + 2;
      v37 = v39;
      if (v47 != v39)
      {
        v37 = v47;
        while (*v37 >= 0xFFFEu)
        {
          v37 += 2;
          if (v37 == v39)
          {
            v37 = v39;
            break;
          }
        }
      }
    }
    v8 = &dword_1ECE90000;
    goto LABEL_4;
  }
  if (v9 != 1)
    goto LABEL_26;
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v50, (unsigned __int16 **)a2);
  v53 = *(_OWORD *)a1;
  v20 = v50;
  v50 = 0;
  v51 = v20;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v53, 0, &v51, a3, &v52);
  if (v51)
    WTF::fastFree((WTF *)(v51 - 16), v21);
  v22 = v52;
  if (v52)
    *(_OWORD *)a1 = v53;
  if (v50)
    WTF::fastFree((WTF *)(v50 - 16), v21);
  if (v22)
  {
    v23 = *(_DWORD *)v22;
    *(_DWORD *)v22 += 2;
    *(_QWORD *)a4 = v22;
    *(_DWORD *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 1;
    if (v23)
      *(_DWORD *)v22 = v23;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)v21);
  }
  else
  {
LABEL_26:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore9NumberRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore9NumberRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::NumberRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::NumberRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::NumberRaw>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionLegacy<WebCore::NumberRaw>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionLegacy<WebCore::NumberRaw>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::NumberRaw>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17RGBFunctionLegacyINSA_9NumberRawEEELj3EJNSA_10PercentRawESD_EEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSF_SD_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17RGBFunctionLegacyINSA_9NumberRawEEELj3EJNSA_10PercentRawESD_EEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSF_SD_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::RGBFunctionModernAbsolute,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::RGBFunctionModernAbsolute,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::RGBFunctionModernAbsolute&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BEF8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BEF8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BEF8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BEF8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BEF8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 4;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.00392156863;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.00392156863;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj0EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.00392156863;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.00392156863;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj1EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.00392156863;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.00392156863;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj2EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_25RGBFunctionModernAbsoluteELj3EJNSA_10PercentRawENSA_9NumberRawENSA_7NoneRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_SF_EEEEEEDcSM_DpT0_()
{
  return NAN;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))off_1E339BFF8[v5])(&v14, v4);
LABEL_11:
    *(_QWORD *)v4 = 0;
    if (*a3)
    {
      *(_QWORD *)v4 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v4 + 88) = 0;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v14 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v13 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v12 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
      a2 = v12;
      v6 = *v12;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v9 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v9;
    }
  }
  *a2 = *a3;
  *a3 = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BFF8[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 88) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E339BFF8[v5])(&v6, v4);
  }
  v4[22] = -1;
  *v4 = *a3;
  v4[22] = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v7 = *a3;
      *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
      *(_QWORD *)a2 = v7;
      WebCore::CSSUnresolvedColorMix::Component::operator=(a2 + 16, a3 + 2);
      return WebCore::CSSUnresolvedColorMix::Component::operator=(a2 + 48, a3 + 6);
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BFF8[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  v8 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v8;
  v9 = a3[2];
  a3[2] = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v9;
  *(_BYTE *)(v4 + 40) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *(_DWORD *)(v4 + 32) = -1;
    v10 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E339BD20[v10])(&v14);
      *(_DWORD *)(v4 + 32) = v10;
    }
    *(_BYTE *)(v4 + 40) = 1;
  }
  v11 = a3[6];
  a3[6] = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 48) = v11;
  *(_BYTE *)(v4 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    *(_DWORD *)(v4 + 64) = -1;
    v12 = *((unsigned int *)a3 + 16);
    if ((_DWORD)v12 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E339BD20[v12])(&v15);
      *(_DWORD *)(v4 + 64) = v12;
    }
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_DWORD *)(v4 + 88) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  char v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 4)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BFF8[v5])(&v15, v4);
LABEL_12:
    v13 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v13;
    v14 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v14;
    *(_DWORD *)(v4 + 88) = 4;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v16, v8);
    v8[22] = -1;
    result = WTF::fastFree((WTF *)v8, a2);
  }
  v10 = a3[1];
  a3[1] = 0;
  v11 = a2[1];
  a2[1] = v10;
  if (v11)
  {
    v12 = v11[22];
    if ((_DWORD)v12 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v12])(&v17, v11);
    v11[22] = -1;
    return WTF::fastFree((WTF *)v11, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 5)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 5;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 6)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 6;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 7)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 7;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 8;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 9)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 9;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 10)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 10;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 11)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 11;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 12)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 12;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 13)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 13;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 14)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 14;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 15)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 15;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 16)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 16;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 17)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 17;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 18)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 18;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS1S_LNS0_6_TraitE1EEEEEvOT_EUlRS1Y_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS26_EEEDcS1Y_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 19)
  {
    ((void (*)(char *, uint64_t))off_1E339BFF8[v5])(&v11, v4);
LABEL_9:
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(v4, a3);
    *(_DWORD *)(v4 + 88) = 19;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    v9 = v8[22];
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v9])(&v12, v8);
    v8[22] = -1;
    WTF::fastFree((WTF *)v8, a2);
  }
  return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t WebCore::CSSUnresolvedColorMix::Component::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = *a2;
  *a2 = 0;
  v5 = *(unsigned int **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    v6 = v5[22];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v6])(&v18, v5);
    v5[22] = -1;
    WTF::fastFree((WTF *)v5, a2);
  }
  v7 = a1 + 8;
  v8 = a2 + 1;
  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v9 = *(unsigned int *)(a1 + 16);
      v10 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v9 == -1)
      {
        if ((_DWORD)v10 == -1)
          return a1;
      }
      else if ((_DWORD)v10 == -1)
      {
        ((void (*)(char *, uint64_t, _QWORD *))off_1E339BD10[v9])(&v15, v7, v8);
        *(_DWORD *)(a1 + 16) = -1;
        return a1;
      }
      v14 = a1 + 8;
      ((void (*)(uint64_t *))off_1E339C168[v10])(&v14);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t, _QWORD *))off_1E339BD10[v11])(&v16, v7, v8);
    *(_DWORD *)(a1 + 16) = -1;
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v12 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))off_1E339BD20[v12])(&v17, v7, v8);
      *(_DWORD *)(a1 + 16) = v12;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD10[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD10[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSUnresolvedColorMix::Component::Component(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v4 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E339BD20[v4])(&v6, a1 + 8, a2 + 1);
      *(_DWORD *)(a1 + 16) = v4;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E339BD20[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E339D688[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v4])(&v16, result);
    *(_DWORD *)(v3 + 8) = -1;
    goto LABEL_6;
  }
  v16 = result;
  result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BC80[v5])(&v16, result, a2);
LABEL_6:
  v6 = *(unsigned int *)(v3 + 24);
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_11;
  }
  else if ((_DWORD)v7 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v6])(&v16, v3 + 16);
    *(_DWORD *)(v3 + 24) = -1;
    goto LABEL_11;
  }
  v16 = v3 + 16;
  result = ((uint64_t (*)(uint64_t *))off_1E339BC80[v7])(&v16);
LABEL_11:
  v8 = *(unsigned int *)(v3 + 40);
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v8])(&v16, v3 + 32);
    *(_DWORD *)(v3 + 40) = -1;
    goto LABEL_16;
  }
  v16 = v3 + 32;
  result = ((uint64_t (*)(uint64_t *))off_1E339BC80[v9])(&v16);
LABEL_16:
  v10 = a2 + 48;
  v11 = v3 + 48;
  if (*(unsigned __int8 *)(v3 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (!*(_BYTE *)(v3 + 64))
      return result;
    v12 = *(unsigned int *)(v3 + 56);
    v13 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v12 == -1)
    {
      if ((_DWORD)v13 == -1)
        return result;
    }
    else if ((_DWORD)v13 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v12])(&v16, v11, v10);
      *(_DWORD *)(v3 + 56) = -1;
      return result;
    }
    v16 = v3 + 48;
    return ((uint64_t (*)(uint64_t *))off_1E339BC80[v13])(&v16);
  }
  else if (*(_BYTE *)(v3 + 64))
  {
    v14 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v14 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v14])(&v16, v11, v10);
    *(_DWORD *)(v3 + 56) = -1;
    *(_BYTE *)(v3 + 64) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = -1;
    v15 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v15 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB90[v15])(&v16, v11, v10);
      *(_DWORD *)(v3 + 56) = v15;
    }
    *(_BYTE *)(v3 + 64) = 1;
  }
  return result;
}

uint64_t std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339C098[v4])(&v16, result);
    *(_DWORD *)(v3 + 16) = -1;
    goto LABEL_6;
  }
  v16 = result;
  result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339C178[v5])(&v16, result, a2);
LABEL_6:
  v6 = *(unsigned int *)(v3 + 32);
  v7 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_11;
  }
  else if ((_DWORD)v7 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v6])(&v16, v3 + 24);
    *(_DWORD *)(v3 + 32) = -1;
    goto LABEL_11;
  }
  v16 = v3 + 24;
  result = ((uint64_t (*)(uint64_t *))off_1E339BC80[v7])(&v16);
LABEL_11:
  v8 = *(unsigned int *)(v3 + 48);
  v9 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v8])(&v16, v3 + 40);
    *(_DWORD *)(v3 + 48) = -1;
    goto LABEL_16;
  }
  v16 = v3 + 40;
  result = ((uint64_t (*)(uint64_t *))off_1E339BC80[v9])(&v16);
LABEL_16:
  v10 = a2 + 56;
  v11 = v3 + 56;
  if (*(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (!*(_BYTE *)(v3 + 72))
      return result;
    v12 = *(unsigned int *)(v3 + 64);
    v13 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v12 == -1)
    {
      if ((_DWORD)v13 == -1)
        return result;
    }
    else if ((_DWORD)v13 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v12])(&v16, v11, v10);
      *(_DWORD *)(v3 + 64) = -1;
      return result;
    }
    v16 = v3 + 56;
    return ((uint64_t (*)(uint64_t *))off_1E339BC80[v13])(&v16);
  }
  else if (*(_BYTE *)(v3 + 72))
  {
    v14 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v14 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v14])(&v16, v11, v10);
    *(_DWORD *)(v3 + 64) = -1;
    *(_BYTE *)(v3 + 72) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 64) = -1;
    v15 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v15 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB90[v15])(&v16, v11, v10);
      *(_DWORD *)(v3 + 64) = v15;
    }
    *(_BYTE *)(v3 + 72) = 1;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E339C098[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339C098[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339C098[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339C098[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339C098[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339C098[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t std::__memberwise_forward_assign[abi:sn180100]<std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::tuple<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>,std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw,WebCore::SymbolRaw>>,0ul,1ul,2ul,3ul>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v4])(&v16, result);
    *(_DWORD *)(v3 + 8) = -1;
    goto LABEL_6;
  }
  v16 = result;
  result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BC80[v5])(&v16, result, a2);
LABEL_6:
  v6 = *(unsigned int *)(v3 + 24);
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_11;
  }
  else if ((_DWORD)v7 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339BB60[v6])(&v16, v3 + 16);
    *(_DWORD *)(v3 + 24) = -1;
    goto LABEL_11;
  }
  v16 = v3 + 16;
  result = ((uint64_t (*)(uint64_t *))off_1E339BC80[v7])(&v16);
LABEL_11:
  v8 = *(unsigned int *)(v3 + 48);
  v9 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E339C098[v8])(&v16, v3 + 32);
    *(_DWORD *)(v3 + 48) = -1;
    goto LABEL_16;
  }
  v16 = v3 + 32;
  result = ((uint64_t (*)(uint64_t *))off_1E339C178[v9])(&v16);
LABEL_16:
  v10 = a2 + 56;
  v11 = v3 + 56;
  if (*(unsigned __int8 *)(v3 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (!*(_BYTE *)(v3 + 72))
      return result;
    v12 = *(unsigned int *)(v3 + 64);
    v13 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v12 == -1)
    {
      if ((_DWORD)v13 == -1)
        return result;
    }
    else if ((_DWORD)v13 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v12])(&v16, v11, v10);
      *(_DWORD *)(v3 + 64) = -1;
      return result;
    }
    v16 = v3 + 56;
    return ((uint64_t (*)(uint64_t *))off_1E339BC80[v13])(&v16);
  }
  else if (*(_BYTE *)(v3 + 72))
  {
    v14 = *(unsigned int *)(v3 + 64);
    if ((_DWORD)v14 != -1)
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB60[v14])(&v16, v11, v10);
    *(_DWORD *)(v3 + 64) = -1;
    *(_BYTE *)(v3 + 72) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 64) = -1;
    v15 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v15 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E339BB90[v15])(&v16, v11, v10);
      *(_DWORD *)(v3 + 64) = v15;
    }
    *(_BYTE *)(v3 + 72) = 1;
  }
  return result;
}

_BYTE *WebCore::CSSPropertyParserHelpers::makeCSSUnresolvedColor<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3[11];
  int v4;
  char v5;

  v2 = (uint64_t)result;
  if (*(_BYTE *)(a2 + 88))
  {
    std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>((uint64_t)v3, (uint64_t *)a2);
    v4 = 6;
    *(_BYTE *)v2 = 0;
    *(_DWORD *)(v2 + 88) = -1;
    result = (_BYTE *)std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(v2, v3);
    *(_DWORD *)(v2 + 88) = 6;
    *(_BYTE *)(v2 + 96) = 1;
    if (v4 != -1)
      return (_BYTE *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v4])(&v5, v3);
  }
  else
  {
    *result = 0;
    result[96] = 0;
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeRelativeFunctionParameters<WebCore::HSLFunctionModern>(uint64_t a1, __int128 **this, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 *v7;
  void *v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  WTF *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  _BYTE v40[88];
  int v41;
  char v42;
  WTF *v43;
  int v44;
  int v45;
  int v46;
  char v47[8];
  int v48;
  char v49[8];
  int v50;
  char v51[8];
  int v52;
  unsigned __int8 v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  int v56;
  char v57;
  unsigned __int16 *v58;
  int v59;
  char v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  int v63;
  char v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unsigned __int16 **v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned __int16 *v73;
  char v74;
  unsigned __int16 **v75;
  __int16 v76;
  char v77[2];
  __int16 v78;
  char v79[2];
  int v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, (WebCore::CSSParserTokenRange *)this);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)v40, (WebCore::CSSPropertyParserHelpers *)this);
  if (!v42)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
    return;
  }
  LOWORD(v75) = 834;
  BYTE2(v75) = 1;
  WORD2(v75) = 835;
  BYTE6(v75) = 1;
  v76 = 836;
  v77[0] = 1;
  v78 = 126;
  v79[0] = 1;
  v67 = 0;
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v67, &v75, (_BYTE *)&v75 + 2, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v67, (_WORD *)&v75 + 2, (_BYTE *)&v75 + 6, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v67, &v76, v77, (uint64_t)&v43);
  WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v67, &v78, v79, (uint64_t)&v43);
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v66, &v67);
  v6 = *(unsigned __int8 *)(a3 + 4);
  v7 = v66;
  v66 = 0;
  v62 = v7;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v62, v6 | 0x10100000000);
  v9 = v62;
  if (v62)
    goto LABEL_161;
  while (1)
  {
    if ((_BYTE)v46)
    {
      if (v45 == -1)
        goto LABEL_160;
      v75 = &v58;
      ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ***, WTF **))off_1E339C1D8[v45])(&v68, &v75, &v43);
      LOBYTE(v75) = 0;
      v80 = -1;
      v10 = v70;
      if (v70 == -1)
      {
        v81 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ***))off_1E339C1A8[v70])(&v58, &v75, &v68);
        v80 = v10;
        v81 = 1;
        if (v70 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339C098[v70])(&v58, &v68);
      }
      if ((_BYTE)v46 && v45 != -1)
        ((void (*)(unsigned __int16 ***, WTF **))off_1E339C098[v45])(&v68, &v43);
    }
    else
    {
      LOBYTE(v75) = 0;
      v81 = 0;
    }
    if (v66)
      WTF::fastFree((WTF *)(v66 - 8), v8);
    if (!v81)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 88) = 0;
      goto LABEL_108;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v65, &v67);
    v11 = *(unsigned __int8 *)(a3 + 4);
    v12 = v65;
    v65 = 0;
    v58 = v12;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v58, v11 | 0x10100000000);
    if (v58)
      WTF::fastFree((WTF *)(v58 - 8), v8);
    if ((_BYTE)v45)
    {
      if (v44 == -1)
        goto LABEL_160;
      v68 = &v55;
      ((void (*)(unsigned __int16 **__return_ptr, unsigned __int16 ***, WTF **))off_1E339C208[v44])(&v62, &v68, &v43);
      LOBYTE(v68) = 0;
      v69 = -1;
      v13 = v63;
      if (v63 == -1)
      {
        LOBYTE(v70) = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 **))off_1E339BB90[v63])(&v55, &v68, &v62);
        v69 = v13;
        LOBYTE(v70) = 1;
        if (v63 != -1)
          ((void (*)(unsigned __int16 **, unsigned __int16 **))off_1E339BB60[v63])(&v55, &v62);
      }
      if ((_BYTE)v45 && v44 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339BB60[v44])(&v62, &v43);
    }
    else
    {
      LOBYTE(v68) = 0;
      LOBYTE(v70) = 0;
    }
    if (v65)
      WTF::fastFree((WTF *)(v65 - 8), v8);
    if (!(_BYTE)v70)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 88) = 0;
      goto LABEL_105;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v61, &v67);
    v14 = *(unsigned __int8 *)(a3 + 4);
    v15 = v61;
    v61 = 0;
    v55 = v15;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v55, v14 | 0x10100000000);
    if (v55)
      WTF::fastFree((WTF *)(v55 - 8), v8);
    if ((_BYTE)v45)
    {
      if (v44 == -1)
        goto LABEL_160;
      v62 = (unsigned __int16 *)&v71;
      ((void (*)(unsigned __int16 **__return_ptr, unsigned __int16 **, WTF **))off_1E339C238[v44])(&v58, &v62, &v43);
      LOBYTE(v62) = 0;
      v63 = -1;
      v16 = v59;
      if (v59 == -1)
      {
        v64 = 1;
      }
      else
      {
        ((void (*)(uint64_t *, unsigned __int16 **, unsigned __int16 **))off_1E339BB90[v59])(&v71, &v62, &v58);
        v63 = v16;
        v64 = 1;
        if (v59 != -1)
          ((void (*)(uint64_t *, unsigned __int16 **))off_1E339BB60[v59])(&v71, &v58);
      }
      if ((_BYTE)v45 && v44 != -1)
        ((void (*)(unsigned __int16 **, WTF **))off_1E339BB60[v44])(&v58, &v43);
    }
    else
    {
      LOBYTE(v62) = 0;
      v64 = 0;
    }
    if (v61)
      WTF::fastFree((WTF *)(v61 - 8), v8);
    if (!v64)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 88) = 0;
      goto LABEL_102;
    }
    LOBYTE(v58) = 0;
    v60 = 0;
    v18 = *this;
    v17 = this[1];
    if (*this >= v17)
    {
      v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v19 = 0;
    if ((*(_DWORD *)v18 & 0x3F) != 6 || *((_WORD *)v18 + 8) != 47)
      goto LABEL_52;
    v32 = *this;
    if (*this == v17)
    {
      v34 = 1;
      v33 = v17;
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v33 = *this;
      }
    }
    else
    {
      v33 = (__int128 *)((char *)v32 + 24);
      *this = (__int128 *)((char *)v32 + 24);
    }
    while (1)
    {
      if (v33 < v17 || (v34 & 1) != 0)
      {
        if (v33 >= v17)
          v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v35 = *(_DWORD *)v33;
      }
      else
      {
        v35 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
        v34 = 1;
      }
      if ((v35 & 0x3F) != 0x10)
        break;
      v33 = (__int128 *)((char *)*this + 24);
      *this = v33;
    }
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v54, &v67);
    v36 = *(unsigned __int8 *)(a3 + 4);
    v37 = v54;
    v54 = 0;
    v73 = v37;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v43, (uint64_t)this, &v73, v36 | 0x10100000000);
    if (v73)
      WTF::fastFree((WTF *)(v73 - 8), v8);
    if (!(_BYTE)v45)
    {
      LOBYTE(v55) = 0;
      v57 = 0;
      goto LABEL_136;
    }
    if (v44 != -1)
      break;
LABEL_160:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_161:
    WTF::fastFree((WTF *)(v9 - 8), v8);
  }
  v55 = (unsigned __int16 *)&v74;
  ((void (*)(uint64_t *__return_ptr, unsigned __int16 **, WTF **))off_1E339C268[v44])(&v71, &v55, &v43);
  LOBYTE(v55) = 0;
  v56 = -1;
  v38 = v72;
  if (v72 == -1)
  {
    v57 = 1;
  }
  else
  {
    ((void (*)(char *, unsigned __int16 **, uint64_t *))off_1E339BB90[v72])(&v74, &v55, &v71);
    v56 = v38;
    v57 = 1;
    if (v72 != -1)
      ((void (*)(char *, uint64_t *))off_1E339BB60[v72])(&v74, &v71);
  }
  if ((_BYTE)v45 && v44 != -1)
    ((void (*)(uint64_t *, WTF **))off_1E339BB60[v44])(&v71, &v43);
LABEL_136:
  if (v60 == v57)
  {
    if (v60)
    {
      if (v59 == -1)
      {
        if (v56 == -1)
          goto LABEL_150;
      }
      else if (v56 == -1)
      {
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v59])(&v43, &v58);
        v59 = -1;
        goto LABEL_150;
      }
      v43 = (WTF *)&v58;
      ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 **))off_1E339BC80[v56])(&v43, &v58, &v55);
      goto LABEL_150;
    }
  }
  else
  {
    if (v60)
    {
      if (v59 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v59])(&v43, &v58);
      v59 = -1;
      v60 = 0;
    }
    else
    {
      LOBYTE(v58) = 0;
      v59 = -1;
      v39 = v56;
      if (v56 != -1)
      {
        ((void (*)(WTF **, unsigned __int16 **, unsigned __int16 **))off_1E339BB90[v56])(&v43, &v58, &v55);
        v59 = v39;
      }
      v60 = 1;
    }
LABEL_150:
    if (v57)
    {
      if (v56 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v56])(&v43, &v55);
      v56 = -1;
    }
  }
  if (v54)
    WTF::fastFree((WTF *)(v54 - 8), v8);
  if (!v60)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
    goto LABEL_99;
  }
  v17 = this[1];
  v19 = 1;
LABEL_52:
  if (*this == v17)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v43, (uint64_t)v40);
    if (!v81 || !(_BYTE)v70 || !v64)
      __break(1u);
    LOBYTE(v44) = 0;
    v46 = -1;
    v20 = v80;
    if (v80 != -1)
    {
      ((void (*)(unsigned __int16 **, int *, unsigned __int16 ***))off_1E339C1A8[v80])(&v55, &v44, &v75);
      v46 = v20;
    }
    v47[0] = 0;
    v48 = -1;
    v21 = v69;
    if (v69 != -1)
    {
      ((void (*)(unsigned __int16 **, char *, unsigned __int16 ***))off_1E339BB90[v69])(&v55, v47, &v68);
      v48 = v21;
    }
    v49[0] = 0;
    v50 = -1;
    v22 = v63;
    if (v63 != -1)
    {
      ((void (*)(unsigned __int16 **, char *, unsigned __int16 **))off_1E339BB90[v63])(&v55, v49, &v62);
      v50 = v22;
    }
    v51[0] = 0;
    v53 = 0;
    if (v60)
    {
      v52 = -1;
      v23 = v59;
      if (v59 != -1)
      {
        ((void (*)(unsigned __int16 **, char *, unsigned __int16 **))off_1E339BB90[v59])(&v55, v51, &v58);
        v52 = v23;
      }
      v53 = 1;
    }
    v24 = v43;
    v43 = 0;
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v25 = v46;
    if (v46 != -1)
    {
      ((void (*)(unsigned __int16 **, uint64_t, int *))off_1E339C1A8[v46])(&v55, a1 + 8, &v44);
      *(_DWORD *)(a1 + 24) = v25;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v26 = v48;
    if (v48 != -1)
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v48])(&v55);
      *(_DWORD *)(a1 + 40) = v26;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = -1;
    v27 = v50;
    if (v50 != -1)
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v50])(&v55);
      *(_DWORD *)(a1 + 56) = v27;
    }
    *(_BYTE *)(a1 + 64) = 0;
    v8 = (void *)(a1 + 64);
    *(_BYTE *)(a1 + 80) = 0;
    if (!v53)
    {
      *(_BYTE *)(a1 + 88) = 1;
      goto LABEL_86;
    }
    *(_DWORD *)(a1 + 72) = -1;
    v28 = v52;
    if (v52 == -1)
    {
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 88) = 1;
    }
    else
    {
      ((void (*)(unsigned __int16 **))off_1E339BB90[v52])(&v55);
      *(_DWORD *)(a1 + 72) = v28;
      v29 = v53;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 88) = 1;
      if (!v29)
        goto LABEL_86;
    }
    if (v52 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v52])(&v55, v51);
    v52 = -1;
LABEL_86:
    if (v50 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v50])(&v55, v49);
    v50 = -1;
    if (v48 != -1)
      ((void (*)(unsigned __int16 **, char *))off_1E339BB60[v48])(&v55, v47);
    v48 = -1;
    if (v46 != -1)
      ((void (*)(unsigned __int16 **, int *))off_1E339C098[v46])(&v55, &v44);
    v46 = -1;
    v30 = (unsigned int *)v43;
    v43 = 0;
    if (v30)
    {
      v31 = v30[22];
      if ((_DWORD)v31 != -1)
        ((void (*)(unsigned __int16 **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v31])(&v55, v30);
      v30[22] = -1;
      WTF::fastFree((WTF *)v30, v8);
    }
    if (v60)
      goto LABEL_97;
    goto LABEL_99;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (!v19)
    goto LABEL_99;
LABEL_97:
  if (v59 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v59])(&v43, &v58);
LABEL_99:
  if (v64 && v63 != -1)
    ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v63])(&v43, &v62);
LABEL_102:
  if ((_BYTE)v70 && v69 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v69])(&v43, &v68);
LABEL_105:
  if (v81 && v80 != -1)
    ((void (*)(WTF **, unsigned __int16 ***))off_1E339C098[v80])(&v43, &v75);
LABEL_108:
  if (v67)
    WTF::fastFree((WTF *)(v67 - 8), v8);
  if (v42)
  {
    if (v41 != -1)
      ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v41])(&v43, v40);
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  __int16 v4;
  __int128 *v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *v11;
  int v12;
  unsigned __int16 v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  double v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  char v25;
  unsigned int v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  WebCore::CSSCalcValue *v31;
  int v32;
  unsigned __int16 v33;
  double v34;
  unsigned int v35;
  __int16 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::CSSCalcValue *v41;

  v4 = a4;
  v35 = a4;
  v36 = WORD2(a4);
  v8 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v8 & 0x3F)
  {
    case 0:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v37, a3);
      v13 = WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(a2);
      if ((_QWORD)v37)
      {
        v33 = v13;
        WTF::fastFree((WTF *)(v37 - 16), v14);
        v13 = v33;
      }
      if (v13 >= 0x100u)
      {
        *(_BYTE *)a1 = 0;
        v17 = 4;
        goto LABEL_43;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v37, a3);
      v16 = WebCore::CSSPropertyParserHelpers::SymbolKnownTokenTypeIdentConsumer::consume(a2, (uint64_t *)&v37);
      if ((_QWORD)v37)
        WTF::fastFree((WTF *)(v37 - 16), v15);
      if ((v16 & 0xFF0000) != 0)
      {
        *(_WORD *)a1 = v16;
        v17 = 5;
        goto LABEL_43;
      }
      goto LABEL_60;
    case 1:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v39, a3);
      v37 = *(_OWORD *)a2;
      v9 = v39;
      v39 = 0;
      v40 = v9;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v37, 5, &v40, v4, &v41);
      if (v40)
        WTF::fastFree((WTF *)(v40 - 16), v10);
      v11 = v41;
      if (v41)
        *(_OWORD *)a2 = v37;
      if (v39)
      {
        WTF::fastFree((WTF *)(v39 - 16), v10);
        if (v11)
          goto LABEL_10;
      }
      else if (v11)
      {
LABEL_10:
        v12 = *(_DWORD *)v11;
        *(_DWORD *)v11 += 2;
        *(_QWORD *)a1 = v11;
        *(_DWORD *)(a1 + 16) = 1;
        *(_BYTE *)(a1 + 24) = 1;
        if (v12)
        {
          *(_DWORD *)v11 = v12;
          return;
        }
        v31 = v11;
        goto LABEL_58;
      }
      WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)a2, a3, &v35, (uint64_t)&v37);
      if (!BYTE8(v37))
      {
LABEL_3:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
        return;
      }
      v31 = (WebCore::CSSCalcValue *)v37;
      v32 = *(_DWORD *)v37;
      *(_DWORD *)v37 += 2;
      *(_QWORD *)a1 = v31;
      *(_DWORD *)(a1 + 16) = 3;
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)&v37 = 0;
      if (v32)
      {
        *(_DWORD *)v31 = v32;
        return;
      }
LABEL_58:
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)v10);
      return;
    case 7:
      WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v37, (__int128 **)a2, a3, &v35);
      if (v38)
      {
        *(_OWORD *)a1 = v37;
        *(_DWORD *)(a1 + 16) = 0;
      }
      else
      {
        v29 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v35);
        if (!v30)
          goto LABEL_60;
        *(_QWORD *)a1 = v29;
        v17 = 2;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v17;
      }
      v28 = 1;
      goto LABEL_61;
    case 9:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v37, a3);
      v21 = *(__int128 **)a2;
      v20 = *(__int128 **)(a2 + 8);
      if (*(_QWORD *)a2 >= (unint64_t)v20)
      {
        v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v22 = (*(_DWORD *)v21 >> 11) & 0x7F;
      if (((v22 - 12) < 3 || (_DWORD)v22 == 64)
        && ((v19 = *((double *)v21 + 2), (v4 & 0xFF00) != 0x100) || v19 >= 0.0))
      {
        v23 = *(__int128 **)a2;
        if (*(__int128 **)a2 == v20)
        {
          v25 = 1;
          {
            v24 = v20;
          }
          else
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v24 = *(__int128 **)a2;
          }
        }
        else
        {
          v24 = (__int128 *)((char *)v23 + 24);
          *(_QWORD *)a2 = (char *)v23 + 24;
        }
        while (1)
        {
          if (v24 < v20 || (v25 & 1) != 0)
          {
            if (v24 >= v20)
              v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v26 = *(_DWORD *)v24;
          }
          else
          {
            v26 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v26;
            v25 = 1;
          }
          if ((v26 & 0x3F) != 0x10)
            break;
          v24 = (__int128 *)(*(_QWORD *)a2 + 24);
          *(_QWORD *)a2 = v24;
        }
        v27 = 0;
      }
      else
      {
        v22 = 0;
        v27 = 1;
      }
      if ((_QWORD)v37)
      {
        v34 = v19;
        WTF::fastFree((WTF *)(v37 - 16), v18);
        v19 = v34;
        if ((v27 & 1) == 0)
          goto LABEL_37;
      }
      else if ((v27 & 1) == 0)
      {
LABEL_37:
        *(_QWORD *)a1 = v22;
        *(double *)(a1 + 8) = v19;
        v28 = 1;
        *(_DWORD *)(a1 + 16) = 0;
        goto LABEL_61;
      }
LABEL_60:
      v28 = 0;
      *(_BYTE *)a1 = 0;
LABEL_61:
      *(_BYTE *)(a1 + 24) = v28;
      return;
    default:
      goto LABEL_3;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t result, __int128 **a2, unsigned __int16 **a3, unsigned int *a4)
{
  unsigned __int16 *v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  double v8;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 v36;
  unsigned __int16 *v37;
  uint64_t v38;
  __int128 **v40;
  uint64_t v41;
  unsigned int *v42;

  v4 = *a3;
  if (*a3)
  {
    v40 = a2;
    v41 = result;
    v42 = a4;
    v14 = *((unsigned int *)v4 - 3);
    if (!(_DWORD)v14)
    {
      v4 = 0;
LABEL_58:
      a2 = v40;
      result = v41;
      a4 = v42;
      goto LABEL_2;
    }
    v15 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v17 = (v16 | HIWORD(v16)) + 1;
    if (v17 > 0x400)
    {
      if (v17 > 2 * v14)
        goto LABEL_61;
    }
    else if (3 * v17 > 4 * v14)
    {
LABEL_36:
      v18 = (double)v14;
      v19 = (double)v17;
      v20 = 0.604166667;
      goto LABEL_37;
    }
    LODWORD(v17) = 2 * v17;
    if (v17 <= 0x400)
      goto LABEL_36;
LABEL_61:
    v18 = (double)v14;
    v19 = (double)v17;
    v20 = 0.416666667;
LABEL_37:
    if (v19 * v20 <= v18)
      LODWORD(v17) = 2 * v17;
    if (v17 <= 8)
      v21 = 8;
    else
      v21 = v17;
    v22 = 4 * v21;
    v23 = (_DWORD *)WTF::fastMalloc((WTF *)(v22 + 16));
    v24 = 0;
    v4 = (unsigned __int16 *)(v23 + 4);
    do
    {
      v25 = &v23[v24 / 4];
      *((_WORD *)v25 + 8) = -1;
      *((_BYTE *)v25 + 18) = 0;
      v24 += 4;
    }
    while (v22 != v24);
    v23[2] = v21 - 1;
    v23[3] = v21;
    *v23 = 0;
    v23[1] = v14;
    v26 = *a3;
    if (*a3)
    {
      v28 = *((unsigned int *)v26 - 1);
      v29 = &v26[2 * v28];
      if (*((_DWORD *)v26 - 3))
      {
        v27 = *a3;
        if ((_DWORD)v28)
        {
          v38 = 4 * v28;
          v27 = *a3;
          while (*v27 >= 0xFFFEu)
          {
            v27 += 2;
            v38 -= 4;
            if (!v38)
            {
              v27 = v29;
              goto LABEL_47;
            }
          }
        }
        goto LABEL_47;
      }
      v27 = &v26[2 * v28];
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v29 = &v26[2 * v28];
LABEL_47:
    if (v26)
      v26 += 2 * *((unsigned int *)v26 - 1);
    while (v27 != v26)
    {
      v30 = 0;
      v31 = ~(*v27 << 15) + *v27;
      v32 = (9 * (v31 ^ (v31 >> 10))) ^ ((9 * (v31 ^ (v31 >> 10))) >> 6);
      v33 = (v32 + ~(v32 << 11)) ^ ((v32 + ~(v32 << 11)) >> 16);
      do
      {
        v34 = v33 & (v21 - 1);
        v33 = ++v30 + v34;
      }
      while ((__int16)v4[2 * v34] != -1);
      v35 = &v4[2 * v34];
      v36 = *v27;
      *((_BYTE *)v35 + 2) = *((_BYTE *)v27 + 2);
      *v35 = v36;
      v37 = v27 + 2;
      v27 = v29;
      if (v37 != v29)
      {
        v27 = v37;
        while (*v27 >= 0xFFFEu)
        {
          v27 += 2;
          if (v27 == v29)
          {
            v27 = v29;
            break;
          }
        }
      }
    }
    goto LABEL_58;
  }
LABEL_2:
  v5 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  v7 = *a2;
  v6 = a2[1];
  if (*a2 >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v8 = *((double *)v7 + 2);
  if (v8 == 0.0)
  {
    if (v5 == 2 || (v5 & 0x10000000000) == 0)
      goto LABEL_16;
  }
  else if (v5 == 2)
  {
    goto LABEL_16;
  }
  if (v5 != 1 || (v5 & 0x100000000) != 0)
    goto LABEL_6;
LABEL_16:
  if ((v5 & 0xFF00) == 0x100 && v8 < 0.0)
  {
LABEL_6:
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
    goto LABEL_7;
  }
  *(_QWORD *)result = 12;
  *(double *)(result + 8) = v8;
  *(_BYTE *)(result + 16) = 1;
  v10 = *a2;
  if (*a2 == v6)
  {
    v12 = 1;
    {
      v11 = v6;
    }
    else
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v11 = *a2;
    }
  }
  else
  {
    v11 = (__int128 *)((char *)v10 + 24);
    *a2 = (__int128 *)((char *)v10 + 24);
  }
  while (1)
  {
    if (v11 < v6 || (v12 & 1) != 0)
    {
      if (v11 >= v6)
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v13 = *(_DWORD *)v11;
    }
    else
    {
      v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v12 = 1;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)*a2 + 24);
    *a2 = v11;
  }
LABEL_7:
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 8), a2);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)9,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 **a2, unsigned __int16 **a3, _DWORD *a4)
{
  uint64_t result;
  void *v8;
  uint64_t v9;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v9, a3);
  result = WebCore::CSSPropertyParserHelpers::AngleKnownTokenTypeDimensionConsumer::consume(a1, a2, *a4);
  if (v9)
    return WTF::fastFree((WTF *)(v9 - 16), v8);
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

uint64_t std::__optional_destruct_base<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v3 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E339BB60[v3])(&v10, a1 + 64);
      *(_DWORD *)(a1 + 72) = -1;
    }
    v4 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E339BB60[v4])(&v11, a1 + 48);
    *(_DWORD *)(a1 + 56) = -1;
    v5 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E339BB60[v5])(&v12, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_1E339C098[v6])(&v13, a1 + 8);
    *(_DWORD *)(a1 + 24) = -1;
    v7 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      v8 = v7[22];
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v8])(&v14, v7);
      v7[22] = -1;
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>(uint64_t a1, __int128 **a2, unsigned __int16 **a3, uint64_t a4)
{
  __int128 **v4;
  __int128 *v6;
  int v7;
  unsigned __int16 *v8;
  __int128 *v9;
  __int128 *v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 **v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned __int16 **v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned __int16 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned __int16 v73;
  unsigned __int16 *v74;
  uint64_t v75;
  void *v76;
  char v77;
  __int128 **v78;
  unsigned __int16 **v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 **v83;
  __int16 v84;
  double v85;
  int v86;
  __int16 v87;
  _DWORD *v88;

  v4 = a2;
  v86 = a4;
  v87 = WORD2(a4);
  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = *(_DWORD *)v6 & 0x3F;
  if (v7 == 7)
  {
    v8 = *a3;
    if (!*a3)
    {
LABEL_4:
      v10 = *v4;
      v9 = v4[1];
      if (*v4 >= v9)
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v11 = *((double *)v10 + 2);
      if (v11 == 0.0)
      {
        if (a4 != 2 && (a4 & 0x10000000000) != 0)
        {
LABEL_7:
          if (a4 != 1 || (a4 & 0x100000000) != 0)
            goto LABEL_8;
        }
      }
      else if (a4 != 2)
      {
        goto LABEL_7;
      }
      if ((a4 & 0xFF00) != 0x100 || v11 >= 0.0)
      {
        v17 = *v4;
        if (*v4 == v9)
        {
          v19 = 1;
          {
            v18 = v9;
          }
          else
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v18 = *v4;
          }
        }
        else
        {
          v18 = (__int128 *)((char *)v17 + 24);
          *v4 = (__int128 *)((char *)v17 + 24);
        }
        v12 = 12;
        while (1)
        {
          if (v18 < v9 || (v19 & 1) != 0)
          {
            if (v18 >= v9)
              v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v20 = *(_DWORD *)v18;
          }
          else
          {
            v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
            v19 = 1;
          }
          if ((v20 & 0x3F) != 0x10)
            break;
          v18 = (__int128 *)((char *)*v4 + 24);
          *v4 = v18;
        }
        v13 = 0;
LABEL_9:
        if (v8)
        {
          v78 = v4;
          v79 = a3;
          v80 = a4;
          v85 = v11;
          WTF::fastFree((WTF *)(v8 - 8), a2);
          v11 = v85;
          LOWORD(a4) = v80;
          a3 = v79;
          v4 = v78;
        }
        if ((v13 & 1) == 0)
        {
          *(_QWORD *)a1 = v12;
          *(double *)(a1 + 8) = v11;
          v16 = 1;
          *(_DWORD *)(a1 + 16) = 0;
LABEL_16:
          *(_BYTE *)(a1 + 24) = v16;
          return;
        }
        if (!*a3 || (v48 = *((unsigned int *)*a3 - 3), !(_DWORD)v48))
        {
          v14 = WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume(v4, (uint64_t)&v88, a4);
LABEL_14:
          if (v15)
          {
            *(_QWORD *)a1 = v14;
            *(_DWORD *)(a1 + 16) = 2;
            v16 = 1;
          }
          else
          {
            v16 = 0;
            *(_BYTE *)a1 = 0;
          }
          goto LABEL_16;
        }
        v83 = v4;
        v84 = a4;
        v49 = a3;
        v50 = (v48 - 1) | ((v48 - 1) >> 1) | ((((_DWORD)v48 - 1) | ((v48 - 1) >> 1)) >> 2);
        v51 = v50 | (v50 >> 4) | ((v50 | (v50 >> 4)) >> 8);
        v52 = (v51 | HIWORD(v51)) + 1;
        if (v52 > 0x400)
        {
          if (v52 > 2 * v48)
            goto LABEL_106;
        }
        else if (3 * v52 > 4 * v48)
        {
LABEL_80:
          v53 = (double)v48;
          v54 = (double)v52;
          v55 = 0.604166667;
          goto LABEL_81;
        }
        LODWORD(v52) = 2 * v52;
        if (v52 <= 0x400)
          goto LABEL_80;
LABEL_106:
        v53 = (double)v48;
        v54 = (double)v52;
        v55 = 0.416666667;
LABEL_81:
        if (v54 * v55 <= v53)
          LODWORD(v52) = 2 * v52;
        if (v52 <= 8)
          v56 = 8;
        else
          v56 = v52;
        v57 = 4 * v56;
        v58 = (WTF *)WTF::fastMalloc((WTF *)(v57 + 16));
        v59 = v58;
        v60 = 0;
        v61 = (_DWORD *)((char *)v58 + 16);
        do
        {
          v62 = (_DWORD *)((char *)v58 + v60);
          *((_WORD *)v62 + 8) = -1;
          *((_BYTE *)v62 + 18) = 0;
          v60 += 4;
        }
        while (v57 != v60);
        v88 = (_DWORD *)((char *)v58 + 16);
        *((_DWORD *)v58 + 2) = v56 - 1;
        *((_DWORD *)v58 + 3) = v56;
        *(_DWORD *)v58 = 0;
        *((_DWORD *)v58 + 1) = v48;
        v63 = *v49;
        if (*v49)
        {
          v65 = *((unsigned int *)v63 - 1);
          v66 = &v63[2 * v65];
          if (*((_DWORD *)v63 - 3))
          {
            v64 = *v49;
            if ((_DWORD)v65)
            {
              v82 = 4 * v65;
              v64 = *v49;
              while (*v64 >= 0xFFFEu)
              {
                v64 += 2;
                v82 -= 4;
                if (!v82)
                {
                  v64 = v66;
                  goto LABEL_91;
                }
              }
            }
            goto LABEL_91;
          }
          v64 = &v63[2 * v65];
        }
        else
        {
          v64 = 0;
          v65 = 0;
        }
        v66 = &v63[2 * v65];
LABEL_91:
        if (v63)
          v63 += 2 * *((unsigned int *)v63 - 1);
        while (v64 != v63)
        {
          v67 = 0;
          v68 = ~(*v64 << 15) + *v64;
          v69 = (9 * (v68 ^ (v68 >> 10))) ^ ((9 * (v68 ^ (v68 >> 10))) >> 6);
          v70 = (v69 + ~(v69 << 11)) ^ ((v69 + ~(v69 << 11)) >> 16);
          do
          {
            v71 = v70 & (v56 - 1);
            v70 = ++v67 + v71;
          }
          while (SLOWORD(v61[v71]) != -1);
          v72 = &v61[v71];
          v73 = *v64;
          *((_BYTE *)v72 + 2) = *((_BYTE *)v64 + 2);
          *(_WORD *)v72 = v73;
          v74 = v64 + 2;
          v64 = v66;
          if (v74 != v66)
          {
            v64 = v74;
            while (*v64 >= 0xFFFEu)
            {
              v64 += 2;
              if (v64 == v66)
              {
                v64 = v66;
                break;
              }
            }
          }
        }
        v75 = WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume(v83, (uint64_t)&v88, v84);
        v77 = (char)v76;
        WTF::fastFree(v59, v76);
        v15 = v77;
        v14 = v75;
        goto LABEL_14;
      }
LABEL_8:
      v12 = 0;
      v13 = 1;
      goto LABEL_9;
    }
    v21 = a4;
    v22 = a3;
    v24 = *((unsigned int *)v8 - 3);
    if (!(_DWORD)v24)
    {
      v8 = 0;
LABEL_75:
      v4 = a2;
      a3 = v22;
      a4 = v21;
      goto LABEL_4;
    }
    v25 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
    v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
    v27 = (v26 | HIWORD(v26)) + 1;
    if (v27 > 0x400)
    {
      if (v27 > 2 * v24)
        goto LABEL_104;
    }
    else if (3 * v27 > 4 * v24)
    {
LABEL_53:
      v28 = (double)v24;
      v29 = (double)v27;
      v30 = 0.604166667;
      goto LABEL_54;
    }
    LODWORD(v27) = 2 * v27;
    if (v27 <= 0x400)
      goto LABEL_53;
LABEL_104:
    v28 = (double)v24;
    v29 = (double)v27;
    v30 = 0.416666667;
LABEL_54:
    if (v29 * v30 <= v28)
      LODWORD(v27) = 2 * v27;
    if (v27 <= 8)
      v31 = 8;
    else
      v31 = v27;
    v32 = 4 * v31;
    v33 = (_DWORD *)WTF::fastMalloc((WTF *)(v32 + 16));
    v34 = 0;
    v8 = (unsigned __int16 *)(v33 + 4);
    do
    {
      v35 = &v33[v34 / 4];
      *((_WORD *)v35 + 8) = -1;
      *((_BYTE *)v35 + 18) = 0;
      v34 += 4;
    }
    while (v32 != v34);
    v33[2] = v31 - 1;
    v33[3] = v31;
    *v33 = 0;
    v33[1] = v24;
    v36 = *v22;
    if (*v22)
    {
      v38 = *((unsigned int *)v36 - 1);
      v39 = &v36[2 * v38];
      if (*((_DWORD *)v36 - 3))
      {
        v37 = *v22;
        if ((_DWORD)v38)
        {
          v81 = 4 * v38;
          v37 = *v22;
          while (*v37 >= 0xFFFEu)
          {
            v37 += 2;
            v81 -= 4;
            if (!v81)
            {
              v37 = v39;
              goto LABEL_64;
            }
          }
        }
        goto LABEL_64;
      }
      v37 = &v36[2 * v38];
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v39 = &v36[2 * v38];
LABEL_64:
    if (v36)
      v36 += 2 * *((unsigned int *)v36 - 1);
    while (v37 != v36)
    {
      v40 = 0;
      v41 = ~(*v37 << 15) + *v37;
      v42 = (9 * (v41 ^ (v41 >> 10))) ^ ((9 * (v41 ^ (v41 >> 10))) >> 6);
      v43 = (v42 + ~(v42 << 11)) ^ ((v42 + ~(v42 << 11)) >> 16);
      do
      {
        v44 = v43 & (v31 - 1);
        v43 = ++v40 + v44;
      }
      while ((__int16)v8[2 * v44] != -1);
      v45 = &v8[2 * v44];
      v46 = *v37;
      *((_BYTE *)v45 + 2) = *((_BYTE *)v37 + 2);
      *v45 = v46;
      v47 = v37 + 2;
      v37 = v39;
      if (v47 != v39)
      {
        v37 = v47;
        while (*v37 >= 0xFFFEu)
        {
          v37 += 2;
          if (v37 == v39)
          {
            v37 = v39;
            break;
          }
        }
      }
    }
    goto LABEL_75;
  }
  switch(v7)
  {
    case 0:
      WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)0,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, (uint64_t)a2, a3);
      break;
    case 1:
      WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, (__int128 *)a2, a3, &v86);
      break;
    case 9:
      WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)9,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, a2, a3, &v86);
      break;
    default:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      break;
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *v11;
  int v12;
  WebCore::CSSCalcValue *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::CSSCalcValue *v16;
  __int128 v17;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v14, a3);
  v8 = *a4;
  v17 = *a2;
  v9 = v14;
  v14 = 0;
  v15 = v9;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v17, 5, &v15, v8, &v16);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v10);
  v11 = v16;
  if (v16)
    *a2 = v17;
  if (v14)
  {
    v13 = v11;
    WTF::fastFree((WTF *)(v14 - 16), v10);
    v11 = v13;
    if (v13)
    {
LABEL_7:
      v12 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 16) = 1;
      *(_BYTE *)(a1 + 24) = 1;
      if (v12)
      {
LABEL_8:
        *(_DWORD *)v11 = v12;
        return;
      }
      goto LABEL_12;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::NumberRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a2, a3, a4, (uint64_t)&v17);
  if (BYTE8(v17))
  {
    v11 = (WebCore::CSSCalcValue *)v17;
    v12 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 16) = 3;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)&v17 = 0;
    if (v12)
      goto LABEL_8;
LABEL_12:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v10);
    return;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)9,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 **a2, unsigned __int16 **a3, int *a4)
{
  uint64_t result;
  void *v8;
  double v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  double v20;
  uint64_t v21;

  result = (uint64_t)WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v21, a3);
  v10 = *a4;
  v12 = *a2;
  v11 = a2[1];
  if (*a2 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v13 = (*(_DWORD *)v12 >> 11) & 0x7F;
  if (((v13 - 12) < 3 || (_DWORD)v13 == 64)
    && ((v9 = *((double *)v12 + 2), (v10 & 0xFF00) != 0x100) || v9 >= 0.0))
  {
    v14 = *a2;
    if (*a2 == v11)
    {
      v16 = 1;
      {
        v15 = v11;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v15 = *a2;
      }
    }
    else
    {
      v15 = (__int128 *)((char *)v14 + 24);
      *a2 = (__int128 *)((char *)v14 + 24);
    }
    while (1)
    {
      if (v15 < v11 || (v16 & 1) != 0)
      {
        if (v15 >= v11)
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v17 = *(_DWORD *)v15;
      }
      else
      {
        v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
        v16 = 1;
      }
      if ((v17 & 0x3F) != 0x10)
        break;
      v15 = (__int128 *)((char *)*a2 + 24);
      *a2 = v15;
    }
    v18 = 0;
  }
  else
  {
    v13 = 0;
    v18 = 1;
  }
  if (v21)
  {
    v20 = v9;
    result = WTF::fastFree((WTF *)(v21 - 16), v8);
    v9 = v20;
    if ((v18 & 1) != 0)
      goto LABEL_17;
LABEL_27:
    *(_QWORD *)a1 = v13;
    *(double *)(a1 + 8) = v9;
    v19 = 1;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_28;
  }
  if ((v18 & 1) == 0)
    goto LABEL_27;
LABEL_17:
  v19 = 0;
  *(_BYTE *)a1 = 0;
LABEL_28:
  *(_BYTE *)(a1 + 24) = v19;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)0,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>,WebCore::NoneRaw>,WebCore::AngleRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, uint64_t a2, unsigned __int16 **a3)
{
  uint64_t result;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v9, a3);
  result = WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(a2);
  if (v9)
  {
    v8 = result;
    WTF::fastFree((WTF *)(v9 - 16), v6);
    result = v8;
  }
  if ((unsigned __int16)result >= 0x100u)
  {
    *(_DWORD *)(a1 + 16) = 4;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = v7;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(__int128 ****a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 **v5;
  char v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;

  v5 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v7 = *a2;
  v8 = 0;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::HSLFunctionLegacy>(&v9, v5, v4, (char *)&v7);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 88) = 0;
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v6;
  if (v8 != -1)
    ((void (*)(char *, __int128 *))off_1E339C368[v8])(&v11, &v7);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 **v6;
  uint64_t v7;
  char v8;
  char v9[16];
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *a1;
  v5 = *a2;
  *a2 = 0;
  v6 = *(__int128 ***)v4;
  v7 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)v9 = v5;
  v10 = 1;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::HSLFunctionLegacy>(&v11, v6, v7, v9);
  v8 = v12;
  if (v12)
  {
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 88) = 0;
    v8 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v8;
  if (v10 != -1)
    ((void (*)(char *, char *))off_1E339C368[v10])(&v13, v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(__int128 ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 **v5;
  uint64_t v6;
  char v7;
  char v8[16];
  int v9;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *a2;
  v5 = **a1;
  v6 = (uint64_t)(*a1)[1];
  *(_QWORD *)v8 = v4;
  v9 = 2;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::HSLFunctionLegacy>(&v10, v5, v6, v8);
  v7 = v11;
  if (v11)
  {
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 88) = 0;
    v7 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v7;
  if (v9 != -1)
    ((void (*)(char *, char *))off_1E339C368[v9])(&v12, v8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 **v6;
  uint64_t v7;
  char v8;
  char v9[16];
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *a1;
  v5 = *a2;
  *a2 = 0;
  v6 = *(__int128 ***)v4;
  v7 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)v9 = v5;
  v10 = 3;
  WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::HSLFunctionLegacy>(&v11, v6, v7, v9);
  v8 = v12;
  if (v12)
  {
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 88) = 0;
    v8 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 96) = v8;
  if (v10 != -1)
    ((void (*)(char *, char *))off_1E339C368[v10])(&v13, v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_0,WebCore::CSSPropertyParserHelpers::consumeHSLFunction(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &&>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[96] = 0;
}

void WebCore::CSSPropertyParserHelpers::consumeAbsoluteFunctionParameters<WebCore::HSLFunctionLegacy>(_BYTE *a1, __int128 **a2, uint64_t a3, char *a4)
{
  __int128 *v4;
  uint64_t (**v5)();
  unsigned __int16 **v7;
  __int128 **v8;
  int v10;
  __int128 *v11;
  __int128 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  double v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  char v22;
  uint64_t (**v23)();
  unsigned int v24;
  unsigned int *v25;
  __int128 *v26;
  __int128 *v27;
  unsigned int *v28;
  char v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  char v33;
  int v34;
  uint64_t v35;
  char v36;
  double v37;
  __int128 *v38;
  unint64_t v39;
  char v40;
  unsigned int *v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  unsigned int *v45;
  __int128 *v46;
  __int128 *v47;
  unsigned int *v48;
  char v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  int v53;
  BOOL v54;
  char v55;
  char v56;
  int v57;
  __int128 *v58;
  uint64_t v59;
  char v60;
  unsigned __int16 **v61;
  unsigned int *v62;
  char v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  unsigned int v67;
  double v68;
  double v69;
  int *v70;
  double v71;
  int v72;
  float v73;
  double v74;
  double v75;
  float v76;
  float v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  unint64_t v116;
  float v117;
  unsigned __int16 **v118;
  int v119;
  int v120;
  char v121[8];
  unsigned int v122;
  char v123[8];
  unsigned int v124;
  char v125[8];
  int v126;
  char v127;
  unsigned int v128;
  unsigned __int16 *v129;
  unsigned int v130;
  unsigned __int8 v131;
  unsigned __int16 *v132;
  unsigned int v133;
  char v134;
  char v135[8];
  unsigned int v136;
  char v137;
  __int128 v138;
  uint64_t v139;
  double v140;
  double v141;
  unsigned __int16 **v142;
  int *v143;
  char v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  unsigned __int16 *v152[3];

  v7 = (unsigned __int16 **)a3;
  v8 = a2;
  v10 = *(unsigned __int8 *)(a3 + 4);
  v132 = 0;
  WORD2(v138) = 257;
  LODWORD(v138) = v10;
  v12 = *a2;
  v11 = a2[1];
  v13 = &dword_1ECE90000;
  if (*a2 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v14 = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v15 = *(_DWORD *)v12 & 0x3F;
  if (v15 != 8)
    goto LABEL_246;
  v16 = *a2;
  if (*a2 >= v11)
  {
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v17 = *((double *)v16 + 2);
  if (fabs(v17) == INFINITY)
    goto LABEL_247;
  v18 = *a2;
  if (*a2 == v11)
  {
    v20 = 1;
    {
      v19 = v11;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v19 = *a2;
    }
  }
  else
  {
    v19 = (__int128 *)((char *)v18 + 24);
    *a2 = (__int128 *)((char *)v18 + 24);
  }
  while (1)
  {
    if (v19 < v11 || (v20 & 1) != 0)
    {
      if (v19 >= v11)
        v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v21 = *(_DWORD *)v19;
    }
    else
    {
      v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
      v20 = 1;
    }
    if ((v21 & 0x3F) != 0x10)
      break;
    v19 = (__int128 *)((char *)*a2 + 24);
    *a2 = v19;
  }
  v118 = *(unsigned __int16 ***)&v17;
  v119 = 0;
  v22 = 1;
LABEL_14:
  LOBYTE(v120) = v22;
  while (1)
  {
    v23 = off_1E339BD20;
    if (!(_BYTE)v120)
    {
      v135[0] = 0;
      v137 = 0;
      goto LABEL_23;
    }
    if (v119 != -1)
    {
      *(_QWORD *)&v150 = v135;
      ((void (*)(__int128 *__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C2E8[v119])(&v138, &v150, &v118);
      v135[0] = 0;
      v136 = -1;
      v24 = DWORD2(v138);
      if (DWORD2(v138) == -1)
      {
        v137 = 1;
      }
      else
      {
        ((void (*)(__int128 *, char *, __int128 *))off_1E339BD20[DWORD2(v138)])(&v150, v135, &v138);
        v136 = v24;
        v137 = 1;
        if (DWORD2(v138) != -1)
          ((void (*)(__int128 *, __int128 *))off_1E339BD10[DWORD2(v138)])(&v150, &v138);
      }
      if ((_BYTE)v120 && v119 != -1)
        ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BD10[v119])(&v138, &v118);
LABEL_23:
      if (!v137)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v26 = *v8;
      v25 = (unsigned int *)v8[1];
      if (*v8 >= (__int128 *)v25)
      {
        v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v13[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v13 + 1248) = 1;
        }
      }
      if ((*(_DWORD *)v26 & 0x3F) != 0x15)
      {
        *a1 = 0;
        a1[8] = 0;
        goto LABEL_216;
      }
      v27 = *v8;
      if (*v8 == (__int128 *)v25)
      {
        v29 = 1;
        v28 = v25;
        if ((v13[312] & 1) == 0)
        {
          *(_DWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
          *(_DWORD *)(v14 + 4) = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *((_BYTE *)v13 + 1248) = 1;
          v28 = (unsigned int *)*v8;
        }
      }
      else
      {
        v28 = (unsigned int *)v27 + 6;
        *v8 = (__int128 *)((char *)v27 + 24);
        v29 = *((_BYTE *)v13 + 1248);
      }
      v4 = &v138;
      while (1)
      {
        if (v28 < v25 || (v29 & 1) != 0)
        {
          if (v28 >= v25)
            v28 = (unsigned int *)v14;
          v30 = *v28;
        }
        else
        {
          v30 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
          *(_QWORD *)v14 = v30;
          *(_QWORD *)(v14 + 8) = 0;
          v29 = 1;
          *((_BYTE *)v13 + 1248) = 1;
        }
        if ((v30 & 0x3F) != 0x10)
          break;
        v28 = (unsigned int *)*v8 + 6;
        *v8 = (__int128 *)v28;
      }
      v31 = *((unsigned __int8 *)v7 + 4);
      v129 = 0;
      WORD2(v138) = 257;
      LODWORD(v138) = v31;
      v32 = *v8;
      if (*v8 >= (__int128 *)v25)
        v32 = (_DWORD *)v14;
      if ((*v8 < (__int128 *)v25) | v29 & 1)
      {
        v33 = (*v8 >= (__int128 *)v25) | v29;
      }
      else
      {
        *(_DWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
        *(_DWORD *)(v14 + 4) = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v33 = 1;
        *((_BYTE *)v13 + 1248) = 1;
        v32 = (_DWORD *)v14;
      }
      v34 = *v32 & 0x3F;
      if (v34 == 8)
      {
        v35 = (uint64_t)*v8;
        if (*v8 >= (__int128 *)v25)
          v35 = v14;
        if ((*v8 < (__int128 *)v25) | v33 & 1)
        {
          v36 = (*v8 >= (__int128 *)v25) | v33;
        }
        else
        {
          *(_QWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1Eu;
          *(_QWORD *)(v14 + 8) = 0;
          v36 = 1;
          *((_BYTE *)v13 + 1248) = 1;
          v35 = v14;
        }
        v37 = *(double *)(v35 + 16);
        if (fabs(v37) != INFINITY)
        {
          v38 = *v8;
          if (*v8 == (__int128 *)v25)
          {
            v40 = 1;
            v39 = (unint64_t)v25;
            if ((v36 & 1) == 0)
            {
              *(_QWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1Eu;
              *(_QWORD *)(v14 + 8) = 0;
              *((_BYTE *)v13 + 1248) = 1;
              v39 = (unint64_t)*v8;
            }
          }
          else
          {
            v39 = (unint64_t)v38 + 24;
            *v8 = (__int128 *)((char *)v38 + 24);
            v40 = v36;
          }
          while (1)
          {
            if (v39 < (unint64_t)v25 || (v40 & 1) != 0)
            {
              v41 = (unsigned int *)(v39 >= (unint64_t)v25 ? v14 : v39);
              v42 = *v41;
            }
            else
            {
              v42 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
              *(_QWORD *)v14 = v42;
              *(_QWORD *)(v14 + 8) = 0;
              v40 = 1;
              *((_BYTE *)v13 + 1248) = 1;
            }
            if ((v42 & 0x3F) != 0x10)
              break;
            v39 = (unint64_t)*v8 + 24;
            *v8 = (__int128 *)v39;
          }
          v118 = *(unsigned __int16 ***)&v37;
          v119 = 0;
          v43 = 1;
          goto LABEL_55;
        }
      }
      else if (v34 == 1)
      {
        WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)v8, &v129, (int *)&v138, (uint64_t)&v118);
        if (v129)
          WTF::fastFree((WTF *)(v129 - 8), a2);
        goto LABEL_56;
      }
      v43 = 0;
      LOBYTE(v118) = 0;
LABEL_55:
      LOBYTE(v120) = v43;
LABEL_56:
      if ((_BYTE)v120)
      {
        if (v119 == -1)
          goto LABEL_260;
        *(_QWORD *)&v150 = &v132;
        ((void (*)(__int128 *__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C2F8[v119])(&v138, &v150, &v118);
        LOBYTE(v132) = 0;
        v133 = -1;
        v44 = DWORD2(v138);
        if (DWORD2(v138) == -1)
        {
          v134 = 1;
        }
        else
        {
          ((void (*)(__int128 *, unsigned __int16 **, __int128 *))off_1E339BD20[DWORD2(v138)])(&v150, &v132, &v138);
          v133 = v44;
          v134 = 1;
          if (DWORD2(v138) != -1)
            ((void (*)(__int128 *, __int128 *))off_1E339BD10[DWORD2(v138)])(&v150, &v138);
        }
        if ((_BYTE)v120 && v119 != -1)
          ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BD10[v119])(&v138, &v118);
      }
      else
      {
        LOBYTE(v132) = 0;
        v134 = 0;
      }
      if (!v134)
      {
        *a1 = 0;
        a1[8] = 0;
        goto LABEL_215;
      }
      LOBYTE(v129) = 0;
      v131 = 0;
      v46 = *v8;
      v45 = (unsigned int *)v8[1];
      if (*v8 >= (__int128 *)v45)
      {
        v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v13[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v13 + 1248) = 1;
        }
      }
      v5 = off_1E339BD80;
      if ((*(_DWORD *)v46 & 0x3F) == 0x15)
      {
        v47 = *v8;
        if (*v8 == (__int128 *)v45)
        {
          v49 = 1;
          v48 = v45;
          if ((v13[312] & 1) == 0)
          {
            *(_DWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
            *(_DWORD *)(v14 + 4) = 0;
            *(_QWORD *)(v14 + 8) = 0;
            *((_BYTE *)v13 + 1248) = 1;
            v48 = (unsigned int *)*v8;
          }
        }
        else
        {
          v48 = (unsigned int *)v47 + 6;
          *v8 = (__int128 *)((char *)v47 + 24);
          v49 = *((_BYTE *)v13 + 1248);
        }
        while (1)
        {
          if (v48 < v45 || (v49 & 1) != 0)
          {
            if (v48 >= v45)
              v48 = (unsigned int *)v14;
            v50 = *v48;
          }
          else
          {
            v50 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
            *(_QWORD *)v14 = v50;
            *(_QWORD *)(v14 + 8) = 0;
            v49 = 1;
            *((_BYTE *)v13 + 1248) = 1;
          }
          v51 = v50 & 0x3F;
          v52 = (unsigned int *)*v8;
          if (v51 != 16)
            break;
          v48 = v52 + 6;
          *v8 = (__int128 *)v48;
        }
        v53 = *((unsigned __int8 *)v7 + 4);
        v152[0] = 0;
        WORD2(v138) = 257;
        LODWORD(v138) = v53;
        v54 = v52 >= v45;
        v55 = (v52 < v45) | v49;
        if (v52 >= v45)
          v52 = (unsigned int *)v14;
        if ((v55 & 1) != 0)
        {
          v56 = v54 | v49;
        }
        else
        {
          *(_DWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
          *(_DWORD *)(v14 + 4) = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v56 = 1;
          *((_BYTE *)v13 + 1248) = 1;
          v52 = (unsigned int *)v14;
        }
        v57 = *v52 & 0x3F;
        if (v57 == 7)
        {
          v58 = *v8;
          if (*v8 >= (__int128 *)v45)
            v59 = v14;
          else
            v59 = (uint64_t)*v8;
          if ((*v8 < (__int128 *)v45) | v56 & 1)
          {
            v60 = (*v8 >= (__int128 *)v45) | v56;
          }
          else
          {
            *(_QWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1Eu;
            *(_QWORD *)(v14 + 8) = 0;
            v60 = 1;
            *((_BYTE *)v13 + 1248) = 1;
            v58 = *v8;
            v59 = v14;
          }
          v61 = *(unsigned __int16 ***)(v59 + 16);
          if (v58 == (__int128 *)v45)
          {
            v63 = 1;
            v62 = v45;
            if ((v60 & 1) == 0)
            {
              *(_DWORD *)v14 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
              *(_DWORD *)(v14 + 4) = 0;
              *(_QWORD *)(v14 + 8) = 0;
              *((_BYTE *)v13 + 1248) = 1;
              v62 = (unsigned int *)*v8;
            }
          }
          else
          {
            v62 = (unsigned int *)v58 + 6;
            *v8 = (__int128 *)((char *)v58 + 24);
            v63 = v60;
          }
          while (1)
          {
            if (v62 < v45 || (v63 & 1) != 0)
            {
              if (v62 >= v45)
                v62 = (unsigned int *)v14;
              v64 = *v62;
            }
            else
            {
              v64 = (*(unsigned __int8 *)(v14 + 3) << 24) | 0x1E;
              *(_QWORD *)v14 = v64;
              *(_QWORD *)(v14 + 8) = 0;
              v63 = 1;
              *((_BYTE *)v13 + 1248) = 1;
            }
            if ((v64 & 0x3F) != 0x10)
              break;
            v62 = (unsigned int *)*v8 + 6;
            *v8 = (__int128 *)v62;
          }
          v118 = v61;
          v119 = 2;
LABEL_94:
          v65 = 1;
LABEL_95:
          LOBYTE(v120) = v65;
          goto LABEL_96;
        }
        goto LABEL_261;
      }
      v15 = 0;
      goto LABEL_120;
    }
    do
    {
LABEL_260:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_261:
      switch(v57)
      {
        case 1:
          WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>,WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>>,WebCore::PercentRaw,WebCore::NumberRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)v8, v152, (int *)&v138, (uint64_t)&v118);
          break;
        case 8:
          v116 = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(v8, v152, &v138);
          if ((_BYTE)a2)
          {
            v118 = (unsigned __int16 **)v116;
            v119 = 0;
            goto LABEL_94;
          }
          v65 = 0;
          LOBYTE(v118) = 0;
          goto LABEL_95;
        default:
          LOBYTE(v118) = 0;
          LOBYTE(v120) = 0;
          break;
      }
LABEL_96:
      if (v152[0])
        WTF::fastFree((WTF *)(v152[0] - 8), a2);
      if (!(_BYTE)v120)
      {
        LOBYTE(v138) = 0;
        LOBYTE(v139) = 0;
        goto LABEL_106;
      }
    }
    while (v119 == -1);
    *(_QWORD *)&v138 = &v149;
    ((void (*)(__int128 *__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C308[v119])(&v150, &v138, &v118);
    LOBYTE(v138) = 0;
    DWORD2(v138) = -1;
    v13 = (int *)DWORD2(v150);
    if (DWORD2(v150) == -1)
    {
      LOBYTE(v139) = 1;
    }
    else
    {
      ((void (*)(uint64_t *, __int128 *, __int128 *))v5[DWORD2(v150)])(&v149, &v138, &v150);
      DWORD2(v138) = (_DWORD)v13;
      LOBYTE(v139) = 1;
      if (DWORD2(v150) != -1)
        ((void (*)(uint64_t *, __int128 *))off_1E339BD60[DWORD2(v150)])(&v149, &v150);
    }
    if ((_BYTE)v120 && v119 != -1)
      ((void (*)(__int128 *, unsigned __int16 ***))off_1E339BD60[v119])(&v150, &v118);
LABEL_106:
    if (v131 != v139)
    {
      if (v131)
      {
        if (v130 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v130])(&v118, &v129);
        v130 = -1;
        v131 = 0;
      }
      else
      {
        LOBYTE(v129) = 0;
        v130 = -1;
        v13 = (int *)DWORD2(v138);
        if (DWORD2(v138) != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, __int128 *))v5[DWORD2(v138)])(&v118, &v129, &v138);
          v130 = v13;
        }
        v131 = 1;
      }
      goto LABEL_115;
    }
    if (v131)
    {
      if (v130 == -1)
      {
        if (DWORD2(v138) == -1)
          goto LABEL_115;
      }
      else if (DWORD2(v138) == -1)
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v130])(&v118, &v129);
        v130 = -1;
        goto LABEL_115;
      }
      v118 = &v129;
      ((void (*)(unsigned __int16 ***, unsigned __int16 **, __int128 *))off_1E339BDA0[DWORD2(v138)])(&v118, &v129, &v138);
LABEL_115:
      if ((_BYTE)v139 && DWORD2(v138) != -1)
        ((void (*)(unsigned __int16 ***, __int128 *))off_1E339BD60[DWORD2(v138)])(&v118, &v138);
    }
    if (!v131)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_212;
    }
    v45 = (unsigned int *)v8[1];
    v15 = 1;
LABEL_120:
    if (*v8 != (__int128 *)v45)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_209;
    }
    if (v137 && v134)
      break;
    __break(1u);
LABEL_246:
    if (v15 != 1)
    {
LABEL_247:
      v22 = 0;
      LOBYTE(v118) = 0;
      goto LABEL_14;
    }
    WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)v8, &v132, (int *)&v138, (uint64_t)&v118);
    if (v132)
      WTF::fastFree((WTF *)(v132 - 8), a2);
  }
  LOBYTE(v118) = 0;
  v120 = -1;
  v66 = *((unsigned int *)a4 + 4);
  if ((_DWORD)v66 != -1)
  {
    ((void (*)(__int128 *, unsigned __int16 ***, char *))off_1E339C388[v66])(&v138, &v118, a4);
    v120 = v66;
  }
  a4 = v121;
  v121[0] = 0;
  v122 = -1;
  v67 = v136;
  if (v136 != -1)
  {
    ((void (*)(__int128 *, char *, char *))v23[v136])(&v138, v121, v135);
    v122 = v67;
  }
  v8 = (__int128 **)v123;
  v123[0] = 0;
  v124 = -1;
  v13 = (int *)v133;
  if (v133 != -1)
  {
    ((void (*)(__int128 *, char *, unsigned __int16 **))v23[v133])(&v138, v123, &v132);
    v124 = v13;
  }
  v23 = (uint64_t (**)())v125;
  v125[0] = 0;
  v127 = 0;
  if (v131)
  {
    v126 = -1;
    v13 = (int *)v130;
    if (v130 != -1)
    {
      ((void (*)(__int128 *, char *, unsigned __int16 **))v5[v130])(&v138, v125, &v129);
      v126 = (int)v13;
    }
    v127 = 1;
  }
  v128 = *((_DWORD *)v7 + 2);
  v149 = 0;
  v152[0] = (unsigned __int16 *)&v149;
  if (v120 == -1)
    goto LABEL_260;
  v7 = v152;
  *(_QWORD *)&v150 = v152;
  ((void (*)(__int128 *__return_ptr, __int128 *, unsigned __int16 ***))off_1E339C328[v120])(&v138, &v150, &v118);
  v148 = 0;
  v152[0] = (unsigned __int16 *)&v148;
  if (v122 == -1)
    goto LABEL_260;
  *(_QWORD *)&v150 = v152;
  v7 = (unsigned __int16 **)&unk_1E339BDC0;
  (*((void (**)(__int128 *, char *))&unk_1E339BDC0 + v122))(&v150, v121);
  v147 = 0;
  v152[0] = (unsigned __int16 *)&v147;
  if (v124 == -1)
    goto LABEL_260;
  v69 = v68;
  *(_QWORD *)&v150 = v152;
  v71 = (*((double (**)(__int128 *, char *))&unk_1E339BDC0 + v124))(&v150, v123);
  v146 = 0;
  if (v127)
  {
    v152[0] = (unsigned __int16 *)&v146;
    if (v126 == -1)
      goto LABEL_260;
    *(_QWORD *)&v150 = v152;
    v7 = (unsigned __int16 **)((uint64_t (*)(__int128 *, char *))off_1E339BDD0[v126])(&v150, v125);
    v13 = v70;
    v150 = v138;
    v151 = v139;
    if (v146)
      WTF::fastFree((WTF *)(v146 - 16), v70);
    v14 = 1;
  }
  else
  {
    v7 = 0;
    v14 = 0;
    v150 = v138;
    v151 = v139;
  }
  if (v147)
    WTF::fastFree((WTF *)(v147 - 16), v70);
  if (v148)
    WTF::fastFree((WTF *)(v148 - 16), v70);
  if (v149)
    WTF::fastFree((WTF *)(v149 - 16), v70);
  v138 = v150;
  v139 = v151;
  v72 = v151;
  v140 = v69;
  v141 = v71;
  v142 = v7;
  v143 = v13;
  v144 = v14;
  *(_DWORD *)((char *)v4 + 57) = v149;
  v145 = *(_DWORD *)((char *)v4 + 91);
  if (v72 == -1)
    goto LABEL_260;
  v152[0] = (unsigned __int16 *)&v148;
  v73 = ((float (*)(unsigned __int16 **, __int128 *))off_1E339C348[v72])(v152, &v138);
  v74 = v140;
  v75 = v141;
  if (v144)
  {
    if ((_DWORD)v143 == -1)
      goto LABEL_260;
    v152[0] = (unsigned __int16 *)&v148;
    v76 = ((float (*)(unsigned __int16 **, unsigned __int16 ***))off_1E339C358[v143])(v152, &v142);
  }
  else
  {
    v76 = 1.0;
  }
  v77 = v75;
  v78 = 0.0;
  if (v74 >= 0.0)
    v78 = v74;
  v79 = v78;
  if (v79 > 100.0 || v77 < 0.0 || v77 > 100.0 || v128 >= 2)
  {
    v114 = v79;
    v115 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v115 = 1;
    *(float *)(v115 + 4) = v73;
    *(float *)(v115 + 8) = v114;
    v113 = v115 | 0x80C000000000000;
    *(float *)(v115 + 12) = v77;
    *(float *)(v115 + 16) = v76;
  }
  else
  {
    v117 = v76 * 255.0;
    v80 = v73 / 30.0;
    v81 = v79 * 0.01;
    v82 = v77 * 0.01;
    if ((float)(1.0 - v82) >= v82)
      v83 = v77 * 0.01;
    else
      v83 = 1.0 - v82;
    v84 = fmodf(v80 + 0.0, 12.0);
    v85 = v84 + -3.0;
    v86 = 9.0 - v84;
    if (v86 >= v85)
      v86 = v85;
    if (v86 > 1.0)
      v86 = 1.0;
    v87 = -(float)(v81 * v83);
    v88 = v82 + (float)(v87 * fmaxf(v86, -1.0));
    v89 = fmodf(v80 + 8.0, 12.0);
    v90 = v89 + -3.0;
    v91 = 9.0 - v89;
    if (v91 >= v90)
      v91 = v90;
    if (v91 > 1.0)
      v91 = 1.0;
    v92 = v82 + (float)(v87 * fmaxf(v91, -1.0));
    v93 = fmodf(v80 + 4.0, 12.0);
    v94 = v93 + -3.0;
    v95 = 9.0 - v93;
    if (v95 >= v94)
      v95 = v94;
    if (v95 > 1.0)
      v95 = 1.0;
    v96 = v82 + (float)(v87 * fmaxf(v95, -1.0));
    v97 = v88 * 255.0;
    if (v88 > 1.0)
      v97 = 255.0;
    v98 = v92 * 255.0;
    if (v92 > 1.0)
      v98 = 255.0;
    v99 = v96 * 255.0;
    if (v96 > 1.0)
      v99 = 255.0;
    if (v88 >= 0.0)
      v100 = v97;
    else
      v100 = 0.0;
    if (v92 >= 0.0)
      v101 = v98;
    else
      v101 = 0.0;
    if (v96 >= 0.0)
      v102 = v99;
    else
      v102 = 0.0;
    v103 = llroundf(v100);
    v104 = 255;
    if (v103 >= 255)
      v103 = 255;
    v105 = llroundf(v101);
    v106 = v103 & ~(v103 >> 63);
    if (v105 >= 255)
      v107 = 255;
    else
      v107 = v105;
    v108 = llroundf(v102);
    v109 = v107 & ~(v107 >> 63);
    if (v108 >= 255)
      v110 = 255;
    else
      v110 = v108;
    v111 = llroundf(v117);
    v112 = v110 & ~(v110 >> 63);
    if (v111 < 255)
      v104 = v111;
    v113 = bswap32(((v104 & ~(v104 >> 63)) << 24) | (v112 << 16) | (v109 << 8) | v106) | 0x1104000000000000;
  }
  *(_QWORD *)a1 = v113;
  a1[8] = 1;
  if (v127)
  {
    if (v126 != -1)
      ((void (*)(__int128 *, char *))off_1E339BD60[v126])(&v138, v125);
    v126 = -1;
  }
  if (v124 != -1)
    ((void (*)(__int128 *, char *))off_1E339BD10[v124])(&v138, v123);
  v124 = -1;
  if (v122 != -1)
    ((void (*)(__int128 *, char *))off_1E339BD10[v122])(&v138, v121);
  v122 = -1;
  if (v120 != -1)
    ((void (*)(__int128 *, unsigned __int16 ***))off_1E339C368[v120])(&v138, &v118);
  v15 = v131;
LABEL_209:
  if (v15 && v130 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD60[v130])(&v118, &v129);
LABEL_212:
  if (v134 && v133 != -1)
    ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BD10[v133])(&v118, &v132);
LABEL_215:
  if (!v137)
    return;
LABEL_216:
  if (v136 != -1)
    ((void (*)(unsigned __int16 ***, char *))off_1E339BD10[v136])(&v118, v135);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionLegacy,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionLegacy,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionLegacy&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  double v9;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = *v4;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 1) + 72))(*((_QWORD *)v5 + 1));
  v9 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, v6);
  *(_QWORD *)a3 = v7;
  *(double *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v8);
  else
    *v5 -= 2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_8AngleRawENSA_15UnevaluatedCalcISC_EENSA_9NumberRawENSD_ISF_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSL_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_SF_SG_EEEEEEDcSW_DpT0_(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  *(double *)a3 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, *v4);
  *(_DWORD *)(a3 + 16) = 1;
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v6);
  else
    *v5 -= 2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionLegacyELj0EJNSA_8AngleRawENSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_EEEEEEDcSL_DpT0_(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  long double v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = fmod(v3, 360.0);
  return fmod(v4 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionLegacyELj0EJNSA_8AngleRawENSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_EEEEEEDcSL_DpT0_(uint64_t a1, long double *a2)
{
  long double v2;

  v2 = fmod(*a2, 360.0);
  return fmod(v2 + 360.0, 360.0);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionLegacyELj3EJNSA_10PercentRawENSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_EEEEEEDcSL_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;

  v2 = *a2 * 0.01;
  v3 = 1.0;
  if (v2 <= 1.0)
    v3 = *a2 * 0.01;
  v4 = v2 < 0.0;
  v5 = 0.0;
  if (!v4)
    return v3;
  return v5;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore18normalizeComponentINSA_17HSLFunctionLegacyELj3EJNSA_10PercentRawENSA_9NumberRawEEEEfRKNS_7variantIJDpT1_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSD_SE_EEEEEEDcSL_DpT0_(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = 1.0;
  if (*a2 <= 1.0)
    v2 = *a2;
  v3 = 0.0;
  if (*a2 >= 0.0)
    return v2;
  return v3;
}

uint64_t WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::HSLA<float>>(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v1 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert(a1);
  v5 = 255.0;
  v6 = v1 * 255.0;
  if (v1 > 1.0)
    v6 = 255.0;
  v7 = v2 * 255.0;
  if (v2 > 1.0)
    v7 = 255.0;
  if (v3 <= 1.0)
    v5 = v3 * 255.0;
  if (v1 >= 0.0)
    v8 = v6;
  else
    v8 = 0.0;
  if (v2 >= 0.0)
    v9 = v7;
  else
    v9 = 0.0;
  if (v3 >= 0.0)
    v10 = v5;
  else
    v10 = 0.0;
  v11 = v4 * 255.0;
  v12 = llroundf(v8);
  v13 = 255;
  if (v12 >= 255)
    v12 = 255;
  v14 = v12 & ~(v12 >> 63);
  v15 = llroundf(v9);
  if (v15 >= 255)
    v15 = 255;
  v16 = v15 & ~(v15 >> 63);
  v17 = llroundf(v10);
  if (v17 >= 255)
    v17 = 255;
  v18 = v17 & ~(v17 >> 63);
  v19 = llroundf(v11);
  if (v19 < 255)
    v13 = v19;
  return (v18 << 16) | ((v13 & ~(v13 >> 63)) << 24) | (v16 << 8) | v14;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HSLFunctionModern,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HSLFunctionModern,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HSLFunctionModern&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::HWBFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::HWBFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::HWBFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::LCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::LCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::LCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLabFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLabFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLabFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::AngleRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::OKLCHFunction,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::OKLCHFunction,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::OKLCHFunction&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void _ZN7WebCore24CSSPropertyParserHelpersL21callWithColorFunctionIZNS0_L17consumeColorSpaceIZNS0_L20consumeColorFunctionERNS_19CSSParserTokenRangeERNS0_16ColorParserStateEE3__0EEDTcldtfp0_onclINS_16ColorRGBFunctionINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEEEEES4_OT_EUlTyvE_EESD_NS_10CSSValueIDESF_(uint64_t a1, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  WTF **v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  __int128 **v9;
  uint64_t v10;
  unsigned __int16 *v11;
  void *v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  void *v16;
  int v17;
  __int128 **v18;
  uint64_t v19;
  unsigned __int16 *v20;
  void *v21;
  int v22;
  __int128 **v23;
  uint64_t v24;
  unsigned __int16 *v25;
  void *v26;
  int v27;
  __int128 **v28;
  uint64_t v29;
  unsigned __int16 *v30;
  void *v31;
  int v32;
  __int128 **v33;
  uint64_t v34;
  unsigned __int16 *v35;
  void *v36;
  int v37;
  __int128 **v38;
  uint64_t v39;
  unsigned __int16 *v40;
  void *v41;
  int v42;
  __int128 **v43;
  uint64_t v44;
  unsigned __int16 *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  uint64_t v51;
  unsigned __int16 *v52;
  int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  int v56;
  uint64_t v57;
  unsigned __int16 *v58;
  int v59;
  uint64_t v60;
  unsigned __int16 *v61;
  int v62;
  uint64_t v63;
  unsigned __int16 *v64;
  int v65;
  uint64_t v66;
  unsigned __int16 *v67;
  int v68;
  uint64_t v69;
  unsigned __int16 *v70;
  int v71;
  uint64_t v72;
  unsigned __int16 *v73;
  int v74;
  __int128 *v75;
  __int128 *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  WTF *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  uint64_t v93;
  unsigned __int16 *v94;
  int v95;
  uint64_t v96;
  unsigned __int16 *v97;
  int v98;
  uint64_t v99;
  unsigned __int16 *v100;
  int v101;
  uint64_t v102;
  unsigned __int16 *v103;
  int v104;
  uint64_t v105;
  unsigned __int16 *v106;
  int v107;
  __int128 *v108;
  int v109;
  __int128 *v110;
  __int128 *v111;
  int v112;
  __int128 *v113;
  __int128 *v114;
  int v115;
  __int128 *v116;
  __int128 *v117;
  int v118;
  __int128 *v119;
  __int128 *v120;
  int v121;
  __int128 *v122;
  __int128 *v123;
  int v124;
  __int128 *v125;
  __int128 *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  WTF *v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  WTF *v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  WTF *v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  WTF *v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  WTF *v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  WTF *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  WTF *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int *v191;
  uint64_t v192;
  int v193;
  void *v194;
  unsigned int *v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  unsigned int *v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  __int128 *v211;
  __int128 *v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  unsigned __int16 *v216;
  int v217;
  WTF *v218;
  __int128 *v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  unsigned __int16 *v223;
  int v224;
  __int128 *v225;
  __int128 *v226;
  char v227;
  unsigned int v228;
  uint64_t v229;
  unsigned __int16 *v230;
  int v231;
  __int128 *v232;
  __int128 *v233;
  char v234;
  unsigned int v235;
  uint64_t v236;
  unsigned __int16 *v237;
  int v238;
  __int128 *v239;
  __int128 *v240;
  char v241;
  unsigned int v242;
  __int128 *v243;
  __int128 *v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  unsigned __int16 *v248;
  int v249;
  uint64_t v250;
  unsigned __int16 *v251;
  int v252;
  __int128 *v253;
  __int128 *v254;
  char v255;
  unsigned int v256;
  uint64_t v257;
  unsigned __int16 *v258;
  int v259;
  __int128 *v260;
  __int128 *v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  unsigned __int16 *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unsigned __int16 *v275;
  unsigned __int16 *v276;
  int v277;
  unsigned __int8 v278;
  unsigned __int16 *v279;
  unsigned __int16 *v280;
  int v281;
  unsigned __int8 v282;
  unsigned __int16 *v283;
  unsigned __int16 **v284;
  int v285;
  unsigned __int8 v286;
  unsigned __int16 *v287;
  unsigned __int16 **v288;
  int v289;
  unsigned __int8 v290;
  unsigned __int16 *v291;
  uint64_t v292;
  int v293;
  unsigned __int16 *v294;
  char v295;
  WTF *v296;
  int v297;
  int v298;
  char v299[8];
  int v300;
  char v301[8];
  int v302;
  char v303[8];
  int v304;
  char v305;
  int v306;
  unsigned int *v307;
  int v308;
  __int16 v309;
  _BYTE v310[2];
  int v311;
  char v312[8];
  int v313;
  char v314[8];
  int v315;
  char v316[8];
  int v317;
  char v318;
  char v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  switch((int)a2)
  {
    case 935:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v28 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v29 = *(unsigned __int8 *)(v4 + 4);
      v30 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v30;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v28, (unsigned __int16 **)&v284, v29 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v31);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CDB8[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v32 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v32;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v31);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_793:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v31);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 15;
        v306 = 15;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
LABEL_890:
        *(_DWORD *)(a1 + 88) = v193;
        *(_BYTE *)(a1 + 96) = 1;
        if (v306 != -1)
          ((void (*)(unsigned __int16 ***, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v306])(&v288, &v296);
        if (v319)
        {
          if (v318)
          {
            if (v317 != -1)
              ((void (*)(WTF **, char *))off_1E339BB60[v317])(&v296, v316);
            v317 = -1;
          }
          if (v315 != -1)
            ((void (*)(WTF **, char *))off_1E339BB60[v315])(&v296, v314);
          v315 = -1;
          if (v313 != -1)
            ((void (*)(WTF **, char *))off_1E339BB60[v313])(&v296, v312);
          v313 = -1;
          if (v311 != -1)
            ((void (*)(WTF **, int *))off_1E339BB60[v311])(&v296, &v308);
          v311 = -1;
          v209 = v307;
          v307 = 0;
          if (v209)
          {
            v210 = v209[22];
            if ((_DWORD)v210 != -1)
              ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v210])(&v296, v209);
            v209[22] = -1;
            WTF::fastFree((WTF *)v209, v194);
          }
        }
        return;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v63 = *(unsigned __int8 *)(v4 + 4);
      v64 = v283;
      v283 = 0;
      v280 = v64;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v28, &v280, v63 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v31);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CDE8[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v65 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v65;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v31);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_790:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_793;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v96 = *(unsigned __int8 *)(v4 + 4);
      v97 = v279;
      v279 = 0;
      v276 = v97;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v28, &v276, v96 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v31);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CE18[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v98 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v98;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v31);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_787:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_790;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v117 = *v28;
      v116 = v28[1];
      if (*v28 >= v116)
      {
        v117 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v118 = 0;
      if ((*(_DWORD *)v117 & 0x3F) != 6 || *((_WORD *)v117 + 8) != 47)
        goto LABEL_415;
      v239 = *v28;
      if (*v28 == v116)
      {
        v241 = 1;
        v240 = v116;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v240 = *v28;
        }
      }
      else
      {
        v240 = (__int128 *)((char *)v239 + 24);
        *v28 = (__int128 *)((char *)v239 + 24);
      }
      while (1)
      {
        if (v240 < v116 || (v241 & 1) != 0)
        {
          if (v240 >= v116)
            v240 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v242 = *(_DWORD *)v240;
        }
        else
        {
          v242 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v242;
          v241 = 1;
        }
        if ((v242 & 0x3F) != 0x10)
          break;
        v240 = (__int128 *)((char *)*v28 + 24);
        *v28 = v240;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v247 = *(unsigned __int8 *)(v4 + 4);
      v248 = v275;
      v275 = 0;
      v294 = v248;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v28, &v294, v247 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v31);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1124;
      }
      if (v297 == -1)
        goto LABEL_1270;
      v307 = (unsigned int *)&v295;
      ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CE48[v297])(&v292, &v307, &v296);
      LOBYTE(v307) = 0;
      v308 = -1;
      v249 = v293;
      if (v293 == -1)
      {
        LOBYTE(v311) = 1;
      }
      else
      {
        ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
        v308 = v249;
        LOBYTE(v311) = 1;
        if (v293 != -1)
          ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
      }
      if ((_BYTE)v298 && v297 != -1)
        ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1124:
      if (v278 != v311)
      {
        if (v278)
        {
          if (v277 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          v278 = 0;
        }
        else
        {
          LOBYTE(v276) = 0;
          v277 = -1;
          v271 = v308;
          if (v308 != -1)
          {
            ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
            v277 = v271;
          }
          v278 = 1;
        }
        goto LABEL_1228;
      }
      if (v278)
      {
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1228;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1228;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1228:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
      }
      if (v275)
        WTF::fastFree((WTF *)(v275 - 8), v31);
      if (!v278)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_784:
        if (v282 && v281 != -1)
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
        goto LABEL_787;
      }
      v116 = v28[1];
      v118 = 1;
LABEL_415:
      if (*v28 != v116)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_781:
        if (v118 && v277 != -1)
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
        goto LABEL_784;
      }
      v3 = &v296;
      WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
      v7 = v290;
      if (v290)
      {
        v7 = v286;
        if (v286)
        {
          v7 = v282;
          if (v282)
          {
            LOBYTE(v297) = 0;
            v298 = -1;
            v155 = v289;
            if (v289 != -1)
            {
              ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
              v298 = v155;
            }
            v299[0] = 0;
            v300 = -1;
            v156 = v285;
            if (v285 != -1)
            {
              ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
              v300 = v156;
            }
            v301[0] = 0;
            v302 = -1;
            v157 = v281;
            if (v281 != -1)
            {
              ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
              v302 = v157;
            }
            v303[0] = 0;
            v305 = 0;
            if (v278)
            {
              v304 = -1;
              v158 = v277;
              if (v277 != -1)
              {
                ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
                v304 = v158;
              }
              v305 = 1;
            }
            v159 = v296;
            v296 = 0;
            v307 = (unsigned int *)v159;
            LOBYTE(v308) = 0;
            v311 = -1;
            v160 = v298;
            if (v298 != -1)
            {
              ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
              v311 = v160;
            }
            v312[0] = 0;
            v313 = -1;
            v161 = v300;
            if (v300 != -1)
            {
              ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
              v313 = v161;
            }
            v314[0] = 0;
            v315 = -1;
            v162 = v302;
            if (v302 != -1)
            {
              ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
              v315 = v162;
            }
            v316[0] = 0;
            v318 = 0;
            if (v305)
            {
              v317 = -1;
              v163 = v304;
              if (v304 == -1)
              {
                v318 = 1;
                v319 = 1;
              }
              else
              {
                ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
                v317 = v163;
                v318 = 1;
                v319 = 1;
                if (!v305)
                  goto LABEL_770;
              }
              if (v304 != -1)
                ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
              v304 = -1;
              goto LABEL_770;
            }
            v319 = 1;
LABEL_770:
            if (v302 != -1)
              ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
            v302 = -1;
            if (v300 != -1)
              ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
            v300 = -1;
            if (v298 != -1)
              ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
            v298 = -1;
            v201 = (unsigned int *)v296;
            v296 = 0;
            if (v201)
            {
              v202 = v201[22];
              if ((_DWORD)v202 != -1)
                ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v202])(&v292, v201);
              v201[22] = -1;
              WTF::fastFree((WTF *)v201, v31);
            }
            v118 = v278;
            goto LABEL_781;
          }
        }
      }
      while (1)
      {
LABEL_926:
        __break(1u);
LABEL_927:
        v218 = *v3;
        if (*v3 == (WTF *)v7)
        {
          v220 = 1;
          v219 = (__int128 *)v7;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v219 = (__int128 *)*v3;
          }
        }
        else
        {
          v219 = (__int128 *)((char *)v218 + 24);
          *v3 = (WTF *)((char *)v218 + 24);
        }
        while (1)
        {
          if ((unint64_t)v219 < v7 || (v220 & 1) != 0)
          {
            if ((unint64_t)v219 >= v7)
              v219 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v221 = *(_DWORD *)v219;
          }
          else
          {
            v221 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v221;
            v220 = 1;
          }
          if ((v221 & 0x3F) != 0x10)
            break;
          v219 = (__int128 *)((char *)*v3 + 24);
          *v3 = (WTF *)v219;
        }
        WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
        v222 = *(unsigned __int8 *)(v4 + 4);
        v223 = v275;
        v275 = 0;
        v294 = v223;
        WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v3, &v294, v222 | 0x10100000000);
        if (v294)
          WTF::fastFree((WTF *)(v294 - 8), v16);
        if ((_BYTE)v298)
        {
          if (v297 == -1)
            goto LABEL_1270;
          v307 = (unsigned int *)&v295;
          ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CD88[v297])(&v292, &v307, &v296);
          LOBYTE(v307) = 0;
          v308 = -1;
          v224 = v293;
          if (v293 == -1)
          {
            LOBYTE(v311) = 1;
          }
          else
          {
            ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
            v308 = v224;
            LOBYTE(v311) = 1;
            if (v293 != -1)
              ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
          }
          if ((_BYTE)v298 && v297 != -1)
            ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
        }
        else
        {
          LOBYTE(v307) = 0;
          LOBYTE(v311) = 0;
        }
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v268 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v268;
            }
            v278 = 1;
          }
          goto LABEL_1195;
        }
        if (!v278)
          goto LABEL_1199;
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1195;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1195;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1195:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
LABEL_1199:
        if (v275)
          WTF::fastFree((WTF *)(v275 - 8), v16);
        if (!v278)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
          goto LABEL_691;
        }
        v7 = (unint64_t)v3[1];
        v109 = 1;
LABEL_376:
        if (*v3 != (WTF *)v7)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
          goto LABEL_688;
        }
        v3 = &v296;
        WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
        v7 = v290;
        if (v290)
        {
          v7 = v286;
          if (v286)
          {
            v7 = v282;
            if (v282)
              break;
          }
        }
      }
      LOBYTE(v297) = 0;
      v298 = -1;
      v128 = v289;
      if (v289 != -1)
      {
        ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
        v298 = v128;
      }
      v299[0] = 0;
      v300 = -1;
      v129 = v285;
      if (v285 != -1)
      {
        ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
        v300 = v129;
      }
      v301[0] = 0;
      v302 = -1;
      v130 = v281;
      if (v281 != -1)
      {
        ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
        v302 = v130;
      }
      v303[0] = 0;
      v305 = 0;
      if (v278)
      {
        v304 = -1;
        v131 = v277;
        if (v277 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
          v304 = v131;
        }
        v305 = 1;
      }
      v132 = v296;
      v296 = 0;
      v307 = (unsigned int *)v132;
      LOBYTE(v308) = 0;
      v311 = -1;
      v133 = v298;
      if (v298 != -1)
      {
        ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
        v311 = v133;
      }
      v312[0] = 0;
      v313 = -1;
      v134 = v300;
      if (v300 != -1)
      {
        ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
        v313 = v134;
      }
      v314[0] = 0;
      v315 = -1;
      v135 = v302;
      if (v302 != -1)
      {
        ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
        v315 = v135;
      }
      v316[0] = 0;
      v318 = 0;
      if (v305)
      {
        v317 = -1;
        v136 = v304;
        if (v304 == -1)
        {
          v318 = 1;
          v319 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
          v317 = v136;
          v318 = 1;
          v319 = 1;
          if (!v305)
            goto LABEL_677;
        }
        if (v304 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
        v304 = -1;
        goto LABEL_677;
      }
      v319 = 1;
LABEL_677:
      if (v302 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
      v302 = -1;
      if (v300 != -1)
        ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
      v300 = -1;
      if (v298 != -1)
        ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
      v298 = -1;
      v195 = (unsigned int *)v296;
      v296 = 0;
      if (v195)
      {
        v196 = v195[22];
        if ((_DWORD)v196 != -1)
          ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v196])(&v292, v195);
        v195[22] = -1;
        WTF::fastFree((WTF *)v195, v16);
      }
      v109 = v278;
LABEL_688:
      if (v109 && v277 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
LABEL_691:
      if (v282 && v281 != -1)
        ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
LABEL_694:
      if (v286 && v285 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
LABEL_697:
      if (v290 && v289 != -1)
        ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
LABEL_700:
      if (v291)
        WTF::fastFree((WTF *)(v291 - 8), v16);
      if (v319)
      {
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 14;
        v306 = 14;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
LABEL_907:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      return;
    case 936:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v33 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v34 = *(unsigned __int8 *)(v4 + 4);
      v35 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v35;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v33, (unsigned __int16 **)&v284, v34 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v36);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CE78[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v37 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v37;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v36);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_824:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v36);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 16;
        v306 = 16;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v66 = *(unsigned __int8 *)(v4 + 4);
      v67 = v283;
      v283 = 0;
      v280 = v67;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v33, &v280, v66 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v36);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CEA8[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v68 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v68;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v36);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_821:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_824;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v99 = *(unsigned __int8 *)(v4 + 4);
      v100 = v279;
      v279 = 0;
      v276 = v100;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v33, &v276, v99 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v36);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CED8[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v101 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v101;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v36);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_818:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_821;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v120 = *v33;
      v119 = v33[1];
      if (*v33 >= v119)
      {
        v120 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v121 = 0;
      if ((*(_DWORD *)v120 & 0x3F) != 6 || *((_WORD *)v120 + 8) != 47)
        goto LABEL_428;
      v243 = *v33;
      if (*v33 == v119)
      {
        v245 = 1;
        v244 = v119;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v244 = *v33;
        }
      }
      else
      {
        v244 = (__int128 *)((char *)v243 + 24);
        *v33 = (__int128 *)((char *)v243 + 24);
      }
      while (1)
      {
        if (v244 < v119 || (v245 & 1) != 0)
        {
          if (v244 >= v119)
            v244 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v246 = *(_DWORD *)v244;
        }
        else
        {
          v246 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v246;
          v245 = 1;
        }
        if ((v246 & 0x3F) != 0x10)
          break;
        v244 = (__int128 *)((char *)*v33 + 24);
        *v33 = v244;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v250 = *(unsigned __int8 *)(v4 + 4);
      v251 = v275;
      v275 = 0;
      v294 = v251;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v33, &v294, v250 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v36);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1137;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CF08[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v252 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v252;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1137:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v272 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v272;
            }
            v278 = 1;
          }
          goto LABEL_1239;
        }
        if (!v278)
        {
LABEL_1243:
          if (v275)
            WTF::fastFree((WTF *)(v275 - 8), v36);
          if (!v278)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_815:
            if (v282 && v281 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
            goto LABEL_818;
          }
          v119 = v33[1];
          v121 = 1;
LABEL_428:
          if (*v33 != v119)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_812:
            if (v121 && v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            goto LABEL_815;
          }
          v3 = &v296;
          WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
          v7 = v290;
          if (!v290)
            goto LABEL_926;
          v7 = v286;
          if (!v286)
            goto LABEL_926;
          v7 = v282;
          if (!v282)
            goto LABEL_926;
          LOBYTE(v297) = 0;
          v298 = -1;
          v164 = v289;
          if (v289 != -1)
          {
            ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
            v298 = v164;
          }
          v299[0] = 0;
          v300 = -1;
          v165 = v285;
          if (v285 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
            v300 = v165;
          }
          v301[0] = 0;
          v302 = -1;
          v166 = v281;
          if (v281 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
            v302 = v166;
          }
          v303[0] = 0;
          v305 = 0;
          if (v278)
          {
            v304 = -1;
            v167 = v277;
            if (v277 != -1)
            {
              ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
              v304 = v167;
            }
            v305 = 1;
          }
          v168 = v296;
          v296 = 0;
          v307 = (unsigned int *)v168;
          LOBYTE(v308) = 0;
          v311 = -1;
          v169 = v298;
          if (v298 != -1)
          {
            ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
            v311 = v169;
          }
          v312[0] = 0;
          v313 = -1;
          v170 = v300;
          if (v300 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
            v313 = v170;
          }
          v314[0] = 0;
          v315 = -1;
          v171 = v302;
          if (v302 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
            v315 = v171;
          }
          v316[0] = 0;
          v318 = 0;
          if (v305)
          {
            v317 = -1;
            v172 = v304;
            if (v304 == -1)
            {
              v318 = 1;
              v319 = 1;
            }
            else
            {
              ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
              v317 = v172;
              v318 = 1;
              v319 = 1;
              if (!v305)
                goto LABEL_801;
            }
            if (v304 != -1)
              ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
            v304 = -1;
            goto LABEL_801;
          }
          v319 = 1;
LABEL_801:
          if (v302 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
          v302 = -1;
          if (v300 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
          v300 = -1;
          if (v298 != -1)
            ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
          v298 = -1;
          v203 = (unsigned int *)v296;
          v296 = 0;
          if (v203)
          {
            v204 = v203[22];
            if ((_DWORD)v204 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v204])(&v292, v203);
            v203[22] = -1;
            WTF::fastFree((WTF *)v203, v36);
          }
          v121 = v278;
          goto LABEL_812;
        }
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1239;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1239;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1239:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
        goto LABEL_1243;
      }
      goto LABEL_1270;
    case 937:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v18 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v19 = *(unsigned __int8 *)(v4 + 4);
      v20 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v20;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v18, (unsigned __int16 **)&v284, v19 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v21);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CB78[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v22 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v22;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v21);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_731:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v21);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 12;
        v306 = 12;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v57 = *(unsigned __int8 *)(v4 + 4);
      v58 = v283;
      v283 = 0;
      v280 = v58;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v18, &v280, v57 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v21);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CBA8[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v59 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v59;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v21);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_728:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_731;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v90 = *(unsigned __int8 *)(v4 + 4);
      v91 = v279;
      v279 = 0;
      v276 = v91;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v18, &v276, v90 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v21);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CBD8[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v92 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v92;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v21);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_725:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_728;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v111 = *v18;
      v110 = v18[1];
      if (*v18 >= v110)
      {
        v111 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v112 = 0;
      if ((*(_DWORD *)v111 & 0x3F) != 6 || *((_WORD *)v111 + 8) != 47)
        goto LABEL_389;
      v225 = *v18;
      if (*v18 == v110)
      {
        v227 = 1;
        v226 = v110;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v226 = *v18;
        }
      }
      else
      {
        v226 = (__int128 *)((char *)v225 + 24);
        *v18 = (__int128 *)((char *)v225 + 24);
      }
      while (1)
      {
        if (v226 < v110 || (v227 & 1) != 0)
        {
          if (v226 >= v110)
            v226 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v228 = *(_DWORD *)v226;
        }
        else
        {
          v228 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v228;
          v227 = 1;
        }
        if ((v228 & 0x3F) != 0x10)
          break;
        v226 = (__int128 *)((char *)*v18 + 24);
        *v18 = v226;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v229 = *(unsigned __int8 *)(v4 + 4);
      v230 = v275;
      v275 = 0;
      v294 = v230;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v18, &v294, v229 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v21);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1098;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CC08[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v231 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v231;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1098:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v269 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v269;
            }
            v278 = 1;
          }
          goto LABEL_1206;
        }
        if (!v278)
          goto LABEL_1210;
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1206;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1206;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1206:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
LABEL_1210:
        if (v275)
          WTF::fastFree((WTF *)(v275 - 8), v21);
        if (!v278)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_722:
          if (v282 && v281 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
          goto LABEL_725;
        }
        v110 = v18[1];
        v112 = 1;
LABEL_389:
        if (*v18 != v110)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_719:
          if (v112 && v277 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          goto LABEL_722;
        }
        v3 = &v296;
        WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
        v7 = v290;
        if (!v290)
          goto LABEL_926;
        v7 = v286;
        if (!v286)
          goto LABEL_926;
        v7 = v282;
        if (!v282)
          goto LABEL_926;
        LOBYTE(v297) = 0;
        v298 = -1;
        v137 = v289;
        if (v289 != -1)
        {
          ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
          v298 = v137;
        }
        v299[0] = 0;
        v300 = -1;
        v138 = v285;
        if (v285 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
          v300 = v138;
        }
        v301[0] = 0;
        v302 = -1;
        v139 = v281;
        if (v281 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
          v302 = v139;
        }
        v303[0] = 0;
        v305 = 0;
        if (v278)
        {
          v304 = -1;
          v140 = v277;
          if (v277 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
            v304 = v140;
          }
          v305 = 1;
        }
        v141 = v296;
        v296 = 0;
        v307 = (unsigned int *)v141;
        LOBYTE(v308) = 0;
        v311 = -1;
        v142 = v298;
        if (v298 != -1)
        {
          ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
          v311 = v142;
        }
        v312[0] = 0;
        v313 = -1;
        v143 = v300;
        if (v300 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
          v313 = v143;
        }
        v314[0] = 0;
        v315 = -1;
        v144 = v302;
        if (v302 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
          v315 = v144;
        }
        v316[0] = 0;
        v318 = 0;
        if (v305)
        {
          v317 = -1;
          v145 = v304;
          if (v304 == -1)
          {
            v318 = 1;
            v319 = 1;
          }
          else
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
            v317 = v145;
            v318 = 1;
            v319 = 1;
            if (!v305)
              goto LABEL_708;
          }
          if (v304 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
          v304 = -1;
          goto LABEL_708;
        }
        v319 = 1;
LABEL_708:
        if (v302 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
        v302 = -1;
        if (v300 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
        v300 = -1;
        if (v298 != -1)
          ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
        v298 = -1;
        v197 = (unsigned int *)v296;
        v296 = 0;
        if (v197)
        {
          v198 = v197[22];
          if ((_DWORD)v198 != -1)
            ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v198])(&v292, v197);
          v197[22] = -1;
          WTF::fastFree((WTF *)v197, v21);
        }
        v112 = v278;
        goto LABEL_719;
      }
      goto LABEL_1270;
    case 938:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v23 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v24 = *(unsigned __int8 *)(v4 + 4);
      v25 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v25;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v23, (unsigned __int16 **)&v284, v24 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v26);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CC38[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v27 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v27;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v26);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_762:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v26);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 13;
        v306 = 13;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v60 = *(unsigned __int8 *)(v4 + 4);
      v61 = v283;
      v283 = 0;
      v280 = v61;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v23, &v280, v60 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v26);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CC68[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v62 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v62;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v26);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_759:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_762;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v93 = *(unsigned __int8 *)(v4 + 4);
      v94 = v279;
      v279 = 0;
      v276 = v94;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v23, &v276, v93 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v26);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CC98[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v95 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v95;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v26);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_756:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_759;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v114 = *v23;
      v113 = v23[1];
      if (*v23 >= v113)
      {
        v114 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v115 = 0;
      if ((*(_DWORD *)v114 & 0x3F) != 6 || *((_WORD *)v114 + 8) != 47)
        goto LABEL_402;
      v232 = *v23;
      if (*v23 == v113)
      {
        v234 = 1;
        v233 = v113;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v233 = *v23;
        }
      }
      else
      {
        v233 = (__int128 *)((char *)v232 + 24);
        *v23 = (__int128 *)((char *)v232 + 24);
      }
      while (1)
      {
        if (v233 < v113 || (v234 & 1) != 0)
        {
          if (v233 >= v113)
            v233 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v235 = *(_DWORD *)v233;
        }
        else
        {
          v235 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v235;
          v234 = 1;
        }
        if ((v235 & 0x3F) != 0x10)
          break;
        v233 = (__int128 *)((char *)*v23 + 24);
        *v23 = v233;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v236 = *(unsigned __int8 *)(v4 + 4);
      v237 = v275;
      v275 = 0;
      v294 = v237;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v23, &v294, v236 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v26);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1111;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CCC8[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v238 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v238;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1111:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v270 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v270;
            }
            v278 = 1;
          }
          goto LABEL_1217;
        }
        if (!v278)
          goto LABEL_1221;
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1217;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1217;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1217:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
LABEL_1221:
        if (v275)
          WTF::fastFree((WTF *)(v275 - 8), v26);
        if (!v278)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_753:
          if (v282 && v281 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
          goto LABEL_756;
        }
        v113 = v23[1];
        v115 = 1;
LABEL_402:
        if (*v23 != v113)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_750:
          if (v115 && v277 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          goto LABEL_753;
        }
        v3 = &v296;
        WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
        v7 = v290;
        if (!v290)
          goto LABEL_926;
        v7 = v286;
        if (!v286)
          goto LABEL_926;
        v7 = v282;
        if (!v282)
          goto LABEL_926;
        LOBYTE(v297) = 0;
        v298 = -1;
        v146 = v289;
        if (v289 != -1)
        {
          ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
          v298 = v146;
        }
        v299[0] = 0;
        v300 = -1;
        v147 = v285;
        if (v285 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
          v300 = v147;
        }
        v301[0] = 0;
        v302 = -1;
        v148 = v281;
        if (v281 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
          v302 = v148;
        }
        v303[0] = 0;
        v305 = 0;
        if (v278)
        {
          v304 = -1;
          v149 = v277;
          if (v277 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
            v304 = v149;
          }
          v305 = 1;
        }
        v150 = v296;
        v296 = 0;
        v307 = (unsigned int *)v150;
        LOBYTE(v308) = 0;
        v311 = -1;
        v151 = v298;
        if (v298 != -1)
        {
          ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
          v311 = v151;
        }
        v312[0] = 0;
        v313 = -1;
        v152 = v300;
        if (v300 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
          v313 = v152;
        }
        v314[0] = 0;
        v315 = -1;
        v153 = v302;
        if (v302 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
          v315 = v153;
        }
        v316[0] = 0;
        v318 = 0;
        if (v305)
        {
          v317 = -1;
          v154 = v304;
          if (v304 == -1)
          {
            v318 = 1;
            v319 = 1;
          }
          else
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
            v317 = v154;
            v318 = 1;
            v319 = 1;
            if (!v305)
              goto LABEL_739;
          }
          if (v304 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
          v304 = -1;
          goto LABEL_739;
        }
        v319 = 1;
LABEL_739:
        if (v302 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
        v302 = -1;
        if (v300 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
        v300 = -1;
        if (v298 != -1)
          ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
        v298 = -1;
        v199 = (unsigned int *)v296;
        v296 = 0;
        if (v199)
        {
          v200 = v199[22];
          if ((_DWORD)v200 != -1)
            ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v200])(&v292, v199);
          v199[22] = -1;
          WTF::fastFree((WTF *)v199, v26);
        }
        v115 = v278;
        goto LABEL_750;
      }
      goto LABEL_1270;
    case 939:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v3 = *(WTF ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v14 = *(unsigned __int8 *)(v4 + 4);
      v15 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v15;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v3, (unsigned __int16 **)&v284, v14 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v16);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CCF8[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v17 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v17;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v16);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
        goto LABEL_700;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v54 = *(unsigned __int8 *)(v4 + 4);
      v55 = v283;
      v283 = 0;
      v280 = v55;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v3, &v280, v54 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v16);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CD28[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v56 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v56;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v16);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
        goto LABEL_697;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v87 = *(unsigned __int8 *)(v4 + 4);
      v88 = v279;
      v279 = 0;
      v276 = v88;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v3, &v276, v87 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v16);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CD58[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v89 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v89;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v16);
      if (v282)
      {
        LOBYTE(v276) = 0;
        v278 = 0;
        v108 = (__int128 *)*v3;
        v7 = (unint64_t)v3[1];
        if ((unint64_t)*v3 >= v7)
        {
          v108 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        v109 = 0;
        if ((*(_DWORD *)v108 & 0x3F) == 6 && *((_WORD *)v108 + 8) == 47)
          goto LABEL_927;
        goto LABEL_376;
      }
      LOBYTE(v307) = 0;
      v319 = 0;
      goto LABEL_694;
    case 940:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v38 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 831;
      BYTE2(v307) = 1;
      WORD2(v307) = 832;
      BYTE6(v307) = 1;
      LOWORD(v308) = 833;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v39 = *(unsigned __int8 *)(v4 + 4);
      v40 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v40;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v38, (unsigned __int16 **)&v284, v39 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v41);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CF38[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v42 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v42;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v41);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_855:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v41);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 17;
        v306 = 17;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v69 = *(unsigned __int8 *)(v4 + 4);
      v70 = v283;
      v283 = 0;
      v280 = v70;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v38, &v280, v69 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v41);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CF68[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v71 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v71;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v41);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_852:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_855;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v102 = *(unsigned __int8 *)(v4 + 4);
      v103 = v279;
      v279 = 0;
      v276 = v103;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v38, &v276, v102 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v41);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339CF98[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v104 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v104;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v41);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_849:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_852;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v123 = *v38;
      v122 = v38[1];
      if (*v38 >= v122)
      {
        v123 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v124 = 0;
      if ((*(_DWORD *)v123 & 0x3F) != 6 || *((_WORD *)v123 + 8) != 47)
        goto LABEL_441;
      v253 = *v38;
      if (*v38 == v122)
      {
        v255 = 1;
        v254 = v122;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v254 = *v38;
        }
      }
      else
      {
        v254 = (__int128 *)((char *)v253 + 24);
        *v38 = (__int128 *)((char *)v253 + 24);
      }
      while (1)
      {
        if (v254 < v122 || (v255 & 1) != 0)
        {
          if (v254 >= v122)
            v254 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v256 = *(_DWORD *)v254;
        }
        else
        {
          v256 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v256;
          v255 = 1;
        }
        if ((v256 & 0x3F) != 0x10)
          break;
        v254 = (__int128 *)((char *)*v38 + 24);
        *v38 = v254;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v257 = *(unsigned __int8 *)(v4 + 4);
      v258 = v275;
      v275 = 0;
      v294 = v258;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v38, &v294, v257 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v41);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1150;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339CFC8[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v259 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v259;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1150:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v273 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v273;
            }
            v278 = 1;
          }
          goto LABEL_1250;
        }
        if (!v278)
        {
LABEL_1254:
          if (v275)
            WTF::fastFree((WTF *)(v275 - 8), v41);
          if (!v278)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_846:
            if (v282 && v281 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
            goto LABEL_849;
          }
          v122 = v38[1];
          v124 = 1;
LABEL_441:
          if (*v38 != v122)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_843:
            if (v124 && v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            goto LABEL_846;
          }
          v3 = &v296;
          WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
          v7 = v290;
          if (!v290)
            goto LABEL_926;
          v7 = v286;
          if (!v286)
            goto LABEL_926;
          v7 = v282;
          if (!v282)
            goto LABEL_926;
          LOBYTE(v297) = 0;
          v298 = -1;
          v173 = v289;
          if (v289 != -1)
          {
            ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
            v298 = v173;
          }
          v299[0] = 0;
          v300 = -1;
          v174 = v285;
          if (v285 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
            v300 = v174;
          }
          v301[0] = 0;
          v302 = -1;
          v175 = v281;
          if (v281 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
            v302 = v175;
          }
          v303[0] = 0;
          v305 = 0;
          if (v278)
          {
            v304 = -1;
            v176 = v277;
            if (v277 != -1)
            {
              ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
              v304 = v176;
            }
            v305 = 1;
          }
          v177 = v296;
          v296 = 0;
          v307 = (unsigned int *)v177;
          LOBYTE(v308) = 0;
          v311 = -1;
          v178 = v298;
          if (v298 != -1)
          {
            ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
            v311 = v178;
          }
          v312[0] = 0;
          v313 = -1;
          v179 = v300;
          if (v300 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
            v313 = v179;
          }
          v314[0] = 0;
          v315 = -1;
          v180 = v302;
          if (v302 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
            v315 = v180;
          }
          v316[0] = 0;
          v318 = 0;
          if (v305)
          {
            v317 = -1;
            v181 = v304;
            if (v304 == -1)
            {
              v318 = 1;
              v319 = 1;
            }
            else
            {
              ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
              v317 = v181;
              v318 = 1;
              v319 = 1;
              if (!v305)
                goto LABEL_832;
            }
            if (v304 != -1)
              ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
            v304 = -1;
            goto LABEL_832;
          }
          v319 = 1;
LABEL_832:
          if (v302 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
          v302 = -1;
          if (v300 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
          v300 = -1;
          if (v298 != -1)
            ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
          v298 = -1;
          v205 = (unsigned int *)v296;
          v296 = 0;
          if (v205)
          {
            v206 = v205[22];
            if ((_DWORD)v206 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v206])(&v292, v205);
            v205[22] = -1;
            WTF::fastFree((WTF *)v205, v41);
          }
          v124 = v278;
          goto LABEL_843;
        }
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1250;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1250;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1250:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
        goto LABEL_1254;
      }
      goto LABEL_1270;
    case 941:
    case 943:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v9 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 998;
      BYTE2(v307) = 1;
      WORD2(v307) = 999;
      BYTE6(v307) = 1;
      LOWORD(v308) = 1000;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v10 = *(unsigned __int8 *)(v4 + 4);
      v11 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v11;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v9, (unsigned __int16 **)&v284, v10 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v12);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339D0B8[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v13 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v13;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v12);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
        goto LABEL_648;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v48 = *(unsigned __int8 *)(v4 + 4);
      v49 = v283;
      v283 = 0;
      v280 = v49;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v9, &v280, v48 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v12);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339D0E8[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v50 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v50;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v12);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_645:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
LABEL_648:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v12);
        if (v319)
        {
          std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
          v193 = 19;
          v306 = 19;
          *(_BYTE *)a1 = 0;
          *(_DWORD *)(a1 + 88) = -1;
          std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
          goto LABEL_890;
        }
        goto LABEL_907;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v51 = *(unsigned __int8 *)(v4 + 4);
      v52 = v279;
      v279 = 0;
      v276 = v52;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v9, &v276, v51 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v12);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339D118[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v53 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v53;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v12);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_642:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_645;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v76 = *v9;
      v75 = v9[1];
      if (*v9 >= v75)
      {
        v76 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v77 = 0;
      if ((*(_DWORD *)v76 & 0x3F) != 6 || *((_WORD *)v76 + 8) != 47)
        goto LABEL_228;
      v211 = *v9;
      if (*v9 == v75)
      {
        v213 = 1;
        v212 = v75;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v212 = *v9;
        }
      }
      else
      {
        v212 = (__int128 *)((char *)v211 + 24);
        *v9 = (__int128 *)((char *)v211 + 24);
      }
      while (1)
      {
        if (v212 < v75 || (v213 & 1) != 0)
        {
          if (v212 >= v75)
            v212 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v214 = *(_DWORD *)v212;
        }
        else
        {
          v214 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v214;
          v213 = 1;
        }
        if ((v214 & 0x3F) != 0x10)
          break;
        v212 = (__int128 *)((char *)*v9 + 24);
        *v9 = v212;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v215 = *(unsigned __int8 *)(v4 + 4);
      v216 = v275;
      v275 = 0;
      v294 = v216;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v9, &v294, v215 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v12);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1051;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339D148[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v217 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v217;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1051:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v267 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v267;
            }
            v278 = 1;
          }
          goto LABEL_1072;
        }
        if (!v278)
          goto LABEL_1076;
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1072;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1072;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1072:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
LABEL_1076:
        if (v275)
          WTF::fastFree((WTF *)(v275 - 8), v12);
        if (!v278)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_639:
          if (v282 && v281 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
          goto LABEL_642;
        }
        v75 = v9[1];
        v77 = 1;
LABEL_228:
        if (*v9 != v75)
        {
          LOBYTE(v307) = 0;
          v319 = 0;
LABEL_636:
          if (v77 && v277 != -1)
            ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          goto LABEL_639;
        }
        v3 = &v296;
        WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
        v7 = v290;
        if (!v290)
          goto LABEL_926;
        v7 = v286;
        if (!v286)
          goto LABEL_926;
        v7 = v282;
        if (!v282)
          goto LABEL_926;
        LOBYTE(v297) = 0;
        v298 = -1;
        v78 = v289;
        if (v289 != -1)
        {
          ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
          v298 = v78;
        }
        v299[0] = 0;
        v300 = -1;
        v79 = v285;
        if (v285 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
          v300 = v79;
        }
        v301[0] = 0;
        v302 = -1;
        v80 = v281;
        if (v281 != -1)
        {
          ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
          v302 = v80;
        }
        v303[0] = 0;
        v305 = 0;
        if (v278)
        {
          v304 = -1;
          v81 = v277;
          if (v277 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
            v304 = v81;
          }
          v305 = 1;
        }
        v82 = v296;
        v296 = 0;
        v307 = (unsigned int *)v82;
        LOBYTE(v308) = 0;
        v311 = -1;
        v83 = v298;
        if (v298 != -1)
        {
          ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
          v311 = v83;
        }
        v312[0] = 0;
        v313 = -1;
        v84 = v300;
        if (v300 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
          v313 = v84;
        }
        v314[0] = 0;
        v315 = -1;
        v85 = v302;
        if (v302 != -1)
        {
          ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
          v315 = v85;
        }
        v316[0] = 0;
        v318 = 0;
        if (v305)
        {
          v317 = -1;
          v86 = v304;
          if (v304 == -1)
          {
            v318 = 1;
            v319 = 1;
          }
          else
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
            v317 = v86;
            v318 = 1;
            v319 = 1;
            if (!v305)
              goto LABEL_625;
          }
          if (v304 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
          v304 = -1;
          goto LABEL_625;
        }
        v319 = 1;
LABEL_625:
        if (v302 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
        v302 = -1;
        if (v300 != -1)
          ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
        v300 = -1;
        if (v298 != -1)
          ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
        v298 = -1;
        v191 = (unsigned int *)v296;
        v296 = 0;
        if (v191)
        {
          v192 = v191[22];
          if ((_DWORD)v192 != -1)
            ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v192])(&v292, v191);
          v191[22] = -1;
          WTF::fastFree((WTF *)v191, v12);
        }
        v77 = v278;
        goto LABEL_636;
      }
      goto LABEL_1270;
    case 942:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (!*(_BYTE *)(v8 + 96))
        goto LABEL_926;
      v43 = *(__int128 ***)v7;
      v4 = *(_QWORD *)(v7 + 8);
      LOWORD(v307) = 998;
      BYTE2(v307) = 1;
      WORD2(v307) = 999;
      BYTE6(v307) = 1;
      LOWORD(v308) = 1000;
      BYTE2(v308) = 1;
      v309 = 126;
      v310[0] = 1;
      v291 = 0;
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v307, (_BYTE *)&v307 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, (_WORD *)&v307 + 2, (_BYTE *)&v307 + 6, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v308, (_BYTE *)&v308 + 2, (uint64_t)&v296);
      WTF::HashMap<WebCore::CSSValueID,WebCore::CSSUnitType,WTF::DefaultHash<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSValueID>,WTF::HashTraits<WebCore::CSSUnitType>,WTF::HashTableTraits>::add<WebCore::CSSUnitType const&>((uint64_t *)&v291, &v309, v310, (uint64_t)&v296);
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v287, &v291);
      v44 = *(unsigned __int8 *)(v4 + 4);
      v45 = v287;
      v287 = 0;
      v284 = (unsigned __int16 **)v45;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v43, (unsigned __int16 **)&v284, v44 | 0x10100000000);
      if (v284)
        WTF::fastFree((WTF *)(v284 - 2), v46);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v288 = &v280;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339CFF8[v297])(&v307, &v288, &v296);
        LOBYTE(v288) = 0;
        v289 = -1;
        v47 = v308;
        if (v308 == -1)
        {
          v290 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v280, &v288, &v307);
          v289 = v47;
          v290 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v280, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v288) = 0;
        v290 = 0;
      }
      if (v287)
        WTF::fastFree((WTF *)(v287 - 8), v46);
      if (!v290)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_886:
        if (v291)
          WTF::fastFree((WTF *)(v291 - 8), v46);
        if (!v319)
          goto LABEL_907;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>((uint64_t)&v296, (uint64_t *)&v307);
        v193 = 18;
        v306 = 18;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 88) = -1;
        std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a1, (uint64_t *)&v296);
        goto LABEL_890;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v283, &v291);
      v72 = *(unsigned __int8 *)(v4 + 4);
      v73 = v283;
      v283 = 0;
      v280 = v73;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v43, &v280, v72 | 0x10100000000);
      if (v280)
        WTF::fastFree((WTF *)(v280 - 8), v46);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v284 = &v276;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 ***, WTF **))off_1E339D028[v297])(&v307, &v284, &v296);
        LOBYTE(v284) = 0;
        v285 = -1;
        v74 = v308;
        if (v308 == -1)
        {
          v286 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned int **))off_1E339BB90[v308])(&v276, &v284, &v307);
          v285 = v74;
          v286 = 1;
          if (v308 != -1)
            ((void (*)(unsigned __int16 **, unsigned int **))off_1E339BB60[v308])(&v276, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v284) = 0;
        v286 = 0;
      }
      if (v283)
        WTF::fastFree((WTF *)(v283 - 8), v46);
      if (!v286)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_883:
        if (v290 && v289 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v289])(&v296, &v288);
        goto LABEL_886;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v279, &v291);
      v105 = *(unsigned __int8 *)(v4 + 4);
      v106 = v279;
      v279 = 0;
      v276 = v106;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v43, &v276, v105 | 0x10100000000);
      if (v276)
        WTF::fastFree((WTF *)(v276 - 8), v46);
      if ((_BYTE)v298)
      {
        if (v297 == -1)
          goto LABEL_1270;
        v280 = (unsigned __int16 *)&v292;
        ((void (*)(unsigned int **__return_ptr, unsigned __int16 **, WTF **))off_1E339D058[v297])(&v307, &v280, &v296);
        LOBYTE(v280) = 0;
        v281 = -1;
        v107 = v308;
        if (v308 == -1)
        {
          v282 = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v292, &v280, &v307);
          v281 = v107;
          v282 = 1;
          if (v308 != -1)
            ((void (*)(uint64_t *, unsigned int **))off_1E339BB60[v308])(&v292, &v307);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(unsigned int **, WTF **))off_1E339BB60[v297])(&v307, &v296);
      }
      else
      {
        LOBYTE(v280) = 0;
        v282 = 0;
      }
      if (v279)
        WTF::fastFree((WTF *)(v279 - 8), v46);
      if (!v282)
      {
        LOBYTE(v307) = 0;
        v319 = 0;
LABEL_880:
        if (v286 && v285 != -1)
          ((void (*)(WTF **, unsigned __int16 ***))off_1E339BB60[v285])(&v296, &v284);
        goto LABEL_883;
      }
      LOBYTE(v276) = 0;
      v278 = 0;
      v126 = *v43;
      v125 = v43[1];
      if (*v43 >= v125)
      {
        v126 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v127 = 0;
      if ((*(_DWORD *)v126 & 0x3F) != 6 || *((_WORD *)v126 + 8) != 47)
        goto LABEL_454;
      v260 = *v43;
      if (*v43 == v125)
      {
        v262 = 1;
        v261 = v125;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v261 = *v43;
        }
      }
      else
      {
        v261 = (__int128 *)((char *)v260 + 24);
        *v43 = (__int128 *)((char *)v260 + 24);
      }
      while (1)
      {
        if (v261 < v125 || (v262 & 1) != 0)
        {
          if (v261 >= v125)
            v261 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v263 = *(_DWORD *)v261;
        }
        else
        {
          v263 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v263;
          v262 = 1;
        }
        if ((v263 & 0x3F) != 0x10)
          break;
        v261 = (__int128 *)((char *)*v43 + 24);
        *v43 = v261;
      }
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v275, &v291);
      v264 = *(unsigned __int8 *)(v4 + 4);
      v265 = v275;
      v275 = 0;
      v294 = v265;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw,WebCore::SymbolRaw>::consume<>((uint64_t)&v296, (uint64_t)v43, &v294, v264 | 0x10100000000);
      if (v294)
        WTF::fastFree((WTF *)(v294 - 8), v46);
      if (!(_BYTE)v298)
      {
        LOBYTE(v307) = 0;
        LOBYTE(v311) = 0;
        goto LABEL_1163;
      }
      if (v297 != -1)
      {
        v307 = (unsigned int *)&v295;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, WTF **))off_1E339D088[v297])(&v292, &v307, &v296);
        LOBYTE(v307) = 0;
        v308 = -1;
        v266 = v293;
        if (v293 == -1)
        {
          LOBYTE(v311) = 1;
        }
        else
        {
          ((void (*)(char *, unsigned int **, uint64_t *))off_1E339BB90[v293])(&v295, &v307, &v292);
          v308 = v266;
          LOBYTE(v311) = 1;
          if (v293 != -1)
            ((void (*)(char *, uint64_t *))off_1E339BB60[v293])(&v295, &v292);
        }
        if ((_BYTE)v298 && v297 != -1)
          ((void (*)(uint64_t *, WTF **))off_1E339BB60[v297])(&v292, &v296);
LABEL_1163:
        if (v278 != v311)
        {
          if (v278)
          {
            if (v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            v277 = -1;
            v278 = 0;
          }
          else
          {
            LOBYTE(v276) = 0;
            v277 = -1;
            v274 = v308;
            if (v308 != -1)
            {
              ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BB90[v308])(&v296, &v276, &v307);
              v277 = v274;
            }
            v278 = 1;
          }
          goto LABEL_1261;
        }
        if (!v278)
        {
LABEL_1265:
          if (v275)
            WTF::fastFree((WTF *)(v275 - 8), v46);
          if (!v278)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_877:
            if (v282 && v281 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v281])(&v296, &v280);
            goto LABEL_880;
          }
          v125 = v43[1];
          v127 = 1;
LABEL_454:
          if (*v43 != v125)
          {
            LOBYTE(v307) = 0;
            v319 = 0;
LABEL_874:
            if (v127 && v277 != -1)
              ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
            goto LABEL_877;
          }
          v3 = &v296;
          WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v296, v8);
          v7 = v290;
          if (!v290)
            goto LABEL_926;
          v7 = v286;
          if (!v286)
            goto LABEL_926;
          v7 = v282;
          if (!v282)
            goto LABEL_926;
          LOBYTE(v297) = 0;
          v298 = -1;
          v182 = v289;
          if (v289 != -1)
          {
            ((void (*)(unsigned int **, int *, unsigned __int16 ***))off_1E339BB90[v289])(&v307, &v297, &v288);
            v298 = v182;
          }
          v299[0] = 0;
          v300 = -1;
          v183 = v285;
          if (v285 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 ***))off_1E339BB90[v285])(&v307, v299, &v284);
            v300 = v183;
          }
          v301[0] = 0;
          v302 = -1;
          v184 = v281;
          if (v281 != -1)
          {
            ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v281])(&v307, v301, &v280);
            v302 = v184;
          }
          v303[0] = 0;
          v305 = 0;
          if (v278)
          {
            v304 = -1;
            v185 = v277;
            if (v277 != -1)
            {
              ((void (*)(unsigned int **, char *, unsigned __int16 **))off_1E339BB90[v277])(&v307, v303, &v276);
              v304 = v185;
            }
            v305 = 1;
          }
          v186 = v296;
          v296 = 0;
          v307 = (unsigned int *)v186;
          LOBYTE(v308) = 0;
          v311 = -1;
          v187 = v298;
          if (v298 != -1)
          {
            ((void (*)(uint64_t *, int *, int *))off_1E339BB90[v298])(&v292, &v308, &v297);
            v311 = v187;
          }
          v312[0] = 0;
          v313 = -1;
          v188 = v300;
          if (v300 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v300])(&v292, v312, v299);
            v313 = v188;
          }
          v314[0] = 0;
          v315 = -1;
          v189 = v302;
          if (v302 != -1)
          {
            ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v302])(&v292, v314, v301);
            v315 = v189;
          }
          v316[0] = 0;
          v318 = 0;
          if (v305)
          {
            v317 = -1;
            v190 = v304;
            if (v304 == -1)
            {
              v318 = 1;
              v319 = 1;
            }
            else
            {
              ((void (*)(uint64_t *, char *, char *))off_1E339BB90[v304])(&v292, v316, v303);
              v317 = v190;
              v318 = 1;
              v319 = 1;
              if (!v305)
                goto LABEL_863;
            }
            if (v304 != -1)
              ((void (*)(uint64_t *, char *))off_1E339BB60[v304])(&v292, v303);
            v304 = -1;
            goto LABEL_863;
          }
          v319 = 1;
LABEL_863:
          if (v302 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v302])(&v292, v301);
          v302 = -1;
          if (v300 != -1)
            ((void (*)(uint64_t *, char *))off_1E339BB60[v300])(&v292, v299);
          v300 = -1;
          if (v298 != -1)
            ((void (*)(uint64_t *, int *))off_1E339BB60[v298])(&v292, &v297);
          v298 = -1;
          v207 = (unsigned int *)v296;
          v296 = 0;
          if (v207)
          {
            v208 = v207[22];
            if ((_DWORD)v208 != -1)
              ((void (*)(uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v208])(&v292, v207);
            v207[22] = -1;
            WTF::fastFree((WTF *)v207, v46);
          }
          v127 = v278;
          goto LABEL_874;
        }
        if (v277 == -1)
        {
          if (v308 == -1)
            goto LABEL_1261;
        }
        else if (v308 == -1)
        {
          ((void (*)(WTF **, unsigned __int16 **))off_1E339BB60[v277])(&v296, &v276);
          v277 = -1;
          goto LABEL_1261;
        }
        v296 = (WTF *)&v276;
        ((void (*)(WTF **, unsigned __int16 **, unsigned int **))off_1E339BC80[v308])(&v296, &v276, &v307);
LABEL_1261:
        if ((_BYTE)v311)
        {
          if (v308 != -1)
            ((void (*)(WTF **, unsigned int **))off_1E339BB60[v308])(&v296, &v307);
          v308 = -1;
        }
        goto LABEL_1265;
      }
LABEL_1270:
      std::__throw_bad_variant_access[abi:sn180100]();
      return;
    default:
      goto LABEL_907;
  }
}

