uint64_t WebCore::Document::setContextDocument(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  v5 = v3;
  if (v3)
  {
    do
      v6 = __ldaxr(v3);
    while (__stlxr(v6 + 1, v3));
  }
  result = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      v10 = *(unsigned int *)(result + 28);
      if ((_DWORD)v10)
      {
        v13 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
        result = v13;
      }
      v11 = *(WTF **)(result + 16);
      if (v11)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v12 = result;
        WTF::fastFree(v11, v4);
        result = v12;
      }
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebCore::DOMImplementation::createCSSStyleSheet@<X0>(unsigned int **a1@<X1>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::CSSTokenizer *v16;
  WTF *v17;
  void *v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  WebCore::StyleSheetContents **v31;
  WTF::StringImpl **v32;

  v25 = 0;
  WTF::URL::invalidate((WTF::URL *)&v25);
  v6 = v25;
  if (v25)
    *(_DWORD *)v25 += 2;
  v28 = v26;
  v29 = v27;
  v7 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v7 != -1)
  {
    v32 = (WTF::StringImpl **)&v30;
    v31 = (WebCore::StyleSheetContents **)&v32;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v8 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)v8 = 1;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  v9 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v8 + 112) = v9;
  *(_WORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 122) = 1;
  *(_QWORD *)(v8 + 123) = 0;
  *(_BYTE *)(v8 + 131) = 0;
  if (v6)
    *(_DWORD *)v6 += 2;
  *(_QWORD *)(v8 + 136) = v6;
  v10 = v29;
  *(_OWORD *)(v8 + 144) = v28;
  *(_OWORD *)(v8 + 160) = v10;
  *(_QWORD *)(v8 + 200) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_WORD *)(v8 + 192) = 0;
  v32 = (WTF::StringImpl **)v8;
  v11 = WTF::fastMalloc((WTF *)0x98);
  *a2 = WebCore::CSSStyleSheet::CSSStyleSheet(v11, (uint64_t *)&v32, 0);
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v32, v12);
      WTF::fastFree(v23, v24);
      if (!v6)
        goto LABEL_15;
      goto LABEL_13;
    }
    --*(_DWORD *)v32;
  }
  if (!v6)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v12);
  else
    *(_DWORD *)v6 -= 2;
LABEL_15:
  v13 = v25;
  v25 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  LOWORD(v31) = 0;
  BYTE2(v31) = 0;
  WebCore::CSSTokenizer::tryCreate(a1, (uint64_t *)&v32);
  if (v32)
  {
    v15 = (uint64_t)v32[6] + 24 * *((unsigned int *)v32 + 15);
    v25 = v32[6];
    *(_QWORD *)&v26 = v15;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v25, (WebCore::CSSParserTokenRange *)&v31, (uint64_t)&v28);
    v16 = (WebCore::CSSTokenizer *)v32;
    v32 = 0;
    if (v16)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }
  else
  {
    v28 = 0uLL;
  }
  v19 = *(_DWORD *)(v11 + 60);
  if (v19)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v11 + 48), (WTF::StringImpl *)(*(_QWORD *)(v11 + 48) + 56 * v19));
  v20 = *(WTF **)(v11 + 48);
  if (v20)
  {
    *(_QWORD *)(v11 + 48) = 0;
    *(_DWORD *)(v11 + 56) = 0;
    WTF::fastFree(v20, v14);
  }
  *(_QWORD *)(v11 + 48) = v28;
  v21 = *((_QWORD *)&v28 + 1);
  v28 = 0uLL;
  *(_QWORD *)(v11 + 56) = v21;
  return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v14);
}

WTF::StringImpl *WebCore::DOMImplementation::createHTMLDocument@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::Document *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  WTF::StringImpl *v31[5];
  WebCore::Node *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 680);
  ++v6[57];
  v31[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v31);
  v33 = 0uLL;
  v34 = 0;
  WebCore::HTMLDocument::create(a3, 0, (uint64_t)v6, (uint64_t)v31, &v33);
  v8 = v31[0];
  v31[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v6[57] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
  else
    --v6[57];
  v9 = (WebCore::Document *)*a3;
  *((_BYTE *)v9 + 712) = 1;
  WebCore::Document::open((uint64_t)v9, 0, (uint64_t)v30);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v30, v10);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::FixedVector<WTF::String>::FixedVector(v31, (uint64_t)&v32, 1);
  WebCore::Document::write(v9, 0, (unsigned int **)v31, (uint64_t)v29);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v29, v11);
  WTF::FixedVector<WTF::String>::~FixedVector(v31, v12);
  v14 = v32;
  v32 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*a2)
  {
    WebCore::HTMLTitleElement::create((_DWORD **)&WebCore::HTMLNames::titleTag, (uint64_t)v9, (uint64_t *)v31);
    v15 = v31[0];
    WebCore::Document::createTextNode((uint64_t)v9, a2, (uint64_t *)&v32);
    WebCore::ContainerNode::appendChild((uint64_t)v15, v32, (uint64_t)v28);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v28, v16);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v32);
    WebCore::Document::protectedHead(v9, &v32);
    WebCore::ContainerNode::appendChild((uint64_t)v32, v31[0], (uint64_t)v27);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v27, v17);
    v19 = v32;
    v32 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)v31);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v21 = *(_QWORD *)(v20 + 704);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      v20 = v22;
  }
  *(_DWORD *)(v20 + 24) += 2;
  v31[0] = (WTF::StringImpl *)v20;
  WebCore::Document::setContextDocument((uint64_t)v9, v20);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v31);
  v23 = (uint64_t)v9 + 192;
  v24 = (WTF::StringImpl *)WebCore::SecurityContext::securityOriginPolicy((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 192));
  if (v24)
    ++*(_DWORD *)v24;
  v31[0] = v24;
  WebCore::SecurityContext::setSecurityOriginPolicy(v23, (WTF::StringImpl *)v31);
  result = v31[0];
  if (v31[0])
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref((uint64_t)v31[0], v25);
  return result;
}

uint64_t WebCore::HTMLDocument::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  int v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = bmalloc::api::isoAllocate();
  v11 = a5[1];
  v20[0] = *a5;
  v20[1] = v11;
  v12 = WebCore::Document::Document(v10, a2, a3, a4, 1, 0, v20);
  *(_QWORD *)v12 = off_1E33BA1B0;
  *(_QWORD *)(v12 + 192) = &unk_1E33BA500;
  v14 = v12 + 192;
  *(_QWORD *)(v12 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v12 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v12 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v12 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v12 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v12 + 3512) = 0u;
  v15 = *(WTF::StringImpl **)(v12 + 1704);
  *(_QWORD *)(v10 + 1704) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *a1 = v10;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_7;
  }
  if (__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_6;
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v19 = v14;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v10 + 416), &v19, (uint64_t)v20);
  v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v18 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

WTF **WTF::FixedVector<WTF::String>::~FixedVector(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v5 = (WTF::StringImpl **)((char *)v3 + 8);
    v4 = *(unsigned int *)v3;
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::TextDocument::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  int v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = bmalloc::api::isoAllocate();
  v11 = a5[1];
  v20[0] = *a5;
  v20[1] = v11;
  v12 = WebCore::Document::Document(v10, a2, a3, a4, 65, 0, v20);
  *(_QWORD *)v12 = off_1E33BA1B0;
  *(_QWORD *)(v12 + 192) = &unk_1E33BA500;
  v14 = v12 + 192;
  *(_QWORD *)(v12 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v12 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v12 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v12 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v12 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v12 + 3512) = 0u;
  v15 = *(WTF::StringImpl **)(v12 + 1704);
  *(_QWORD *)(v10 + 1704) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)v10 = off_1E33D94D8;
  *(_QWORD *)(v10 + 192) = &unk_1E33D9828;
  *(_QWORD *)(v10 + 288) = &unk_1E33D99E8;
  *(_QWORD *)(v10 + 504) = &unk_1E33D9A10;
  *(_QWORD *)(v10 + 512) = &unk_1E33D9A38;
  *(_QWORD *)(v10 + 544) = &unk_1E33D9A68;
  *(_QWORD *)(v10 + 552) = &unk_1E33D9A90;
  WebCore::Document::setCompatibilityMode(v10, (void *)1);
  *(_BYTE *)(v10 + 3385) = 1;
  *a1 = v10;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v19 = v14;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v10 + 416), &v19, (uint64_t)v20);
  v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v18 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

uint64_t WebCore::ImageDocument::create(WebCore::ImageDocument *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  WebCore::ImageDocument *v6;
  WebCore::ImageDocument *v7;
  uint64_t v8;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (WebCore::ImageDocument *)bmalloc::api::isoAllocate();
  v7 = WebCore::ImageDocument::ImageDocument(v6, a2, a3);
  *(_QWORD *)this = v7;
  v8 = (uint64_t)v7 + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = v8;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)v6 + 52, &v13, (uint64_t)&v12);
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

uint64_t WebCore::MediaDocument::create(WebCore::MediaDocument *this, uint64_t **a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  uint64_t v8;
  WebCore::MediaDocument *v9;
  uint64_t v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v8 = bmalloc::api::isoAllocate();
  v9 = WebCore::MediaDocument::MediaDocument((WTF::StringImpl **)v8, a2, a3, a4);
  *(_QWORD *)this = v9;
  v10 = (uint64_t)v9 + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = v10;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v8 + 416), &v15, (uint64_t)&v14);
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

uint64_t WebCore::ModelDocument::create(WebCore::ModelDocument *this, uint64_t **a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  uint64_t v8;
  WebCore::ModelDocument *v9;
  uint64_t v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v8 = bmalloc::api::isoAllocate();
  v9 = WebCore::ModelDocument::ModelDocument((WTF::StringImpl **)v8, a2, a3, a4);
  *(_QWORD *)this = v9;
  v10 = (uint64_t)v9 + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = v10;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v8 + 416), &v15, (uint64_t)&v14);
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

uint64_t WebCore::FTPDirectoryDocument::create(WebCore::FTPDirectoryDocument *this, WebCore::LocalFrame *a2, const WebCore::Settings *a3, const WTF::URL *a4)
{
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)bmalloc::api::isoAllocate();
  v18 = 0;
  v17 = 0u;
  v9 = WebCore::Document::Document(v8, a2, a3, a4, 1, 0, &v17);
  *(_QWORD *)v9 = off_1E33BA1B0;
  *(_QWORD *)(v9 + 192) = &unk_1E33BA500;
  v11 = v9 + 192;
  *(_QWORD *)(v9 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v9 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v9 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v9 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v9 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v9 + 3512) = 0u;
  v12 = *(WTF::StringImpl **)(v9 + 1704);
  v8[213] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *v8 = off_1E33B1B28;
  v8[24] = &unk_1E33B1E78;
  v8[36] = &unk_1E33B2038;
  v8[63] = &unk_1E33B2060;
  v8[64] = &unk_1E33B2088;
  v8[68] = &unk_1E33B20B8;
  v8[69] = &unk_1E33B20E0;
  *(_QWORD *)this = v8;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v16 = v11;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, v8 + 52, &v16, (uint64_t)&v17);
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

uint64_t WebCore::PluginDocument::create(WebCore::PluginDocument *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = bmalloc::api::isoAllocate();
  v7 = *((_QWORD *)a2 + 17);
  v17 = 0;
  v16 = 0u;
  v8 = WebCore::Document::Document(v6, a2, v7, a3, 9, 0, &v16);
  *(_QWORD *)v8 = off_1E33BA1B0;
  *(_QWORD *)(v8 + 192) = &unk_1E33BA500;
  v10 = v8 + 192;
  *(_QWORD *)(v8 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v8 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v8 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v8 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v8 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v8 + 3512) = 0u;
  v11 = *(WTF::StringImpl **)(v8 + 1704);
  *(_QWORD *)(v6 + 1704) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)v6 = off_1E33D7988;
  *(_QWORD *)(v6 + 192) = &unk_1E33D7CD8;
  *(_QWORD *)(v6 + 288) = &unk_1E33D7E98;
  *(_QWORD *)(v6 + 504) = &unk_1E33D7EC0;
  *(_QWORD *)(v6 + 512) = &unk_1E33D7EE8;
  *(_QWORD *)(v6 + 544) = &unk_1E33D7F18;
  *(_QWORD *)(v6 + 552) = &unk_1E33D7F40;
  *(_QWORD *)(v6 + 3528) = 0;
  *(_BYTE *)(v6 + 3536) = 1;
  WebCore::Document::setCompatibilityMode(v6, (void *)1);
  *(_BYTE *)(v6 + 3385) = 1;
  *(_QWORD *)this = v6;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = v10;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v6 + 416), &v15, (uint64_t)&v16);
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

uint64_t WebCore::SVGDocument::create@<X0>(WebCore::SVGDocument *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::Settings *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::SVGDocument *v9;
  uint64_t v10;

  v9 = (WebCore::SVGDocument *)WebCore::SVGDocument::operator new(3520);
  v10 = WebCore::SVGDocument::SVGDocument(v9, this, a2, a3);
  *a4 = v10;
  return WebCore::ScriptExecutionContext::addToContextsMap((WebCore::ScriptExecutionContext *)(v10 + 192));
}

uint64_t WebCore::XMLDocument::create@<X0>(WebCore::XMLDocument *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::Settings *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v9 = bmalloc::api::isoAllocate();
  v10 = WebCore::XMLDocument::XMLDocument(v9, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0x80u);
  *a4 = v10;
  v11 = (uint64_t)(v10 + 24);
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v16 = v11;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v9 + 416), &v16, (uint64_t)&v15);
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

void *WebCore::DOMPointReadOnly::bisoHeap(WebCore::DOMPointReadOnly *this)
{
  return &WebCore::DOMPointReadOnly::bisoHeap(void)::heap;
}

uint64_t WebCore::DOMPointReadOnly::operator new(uint64_t this)
{
  if (this == 48)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::DOMPointReadOnly::matrixTransform@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  float64x2_t *v7;
  double v8;
  double v9;
  float64x2_t v10;
  void *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t *v18;
  uint64_t v19;
  int v20;
  char v21;

  result = WebCore::DOMMatrixReadOnly::fromMatrixHelper<WebCore::DOMMatrix>(a2, (uint64_t)&v18);
  if (v20)
  {
    if (v20 != 1)
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::DOMRectList::DOMRectList(v12);
    }
    v6 = v19;
    v19 = 0;
    *(_BYTE *)a3 = (_BYTE)v18;
    *(_QWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v7 = v18;
    v18 = 0;
    v14 = a1[2];
    v13 = a1[3];
    v15 = a1[4];
    v16 = a1[5];
    if (WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)&v7[1]))
    {
      v8 = v14 + v7[7].f64[0];
      v9 = v13 + v7[7].f64[1];
      v10.f64[0] = v15 + v7[8].f64[0];
      v10.f64[1] = v16;
    }
    else
    {
      v8 = v13 * v7[3].f64[0] + v14 * v7[1].f64[0] + v15 * v7[5].f64[0] + v16 * v7[7].f64[0];
      v9 = v13 * v7[3].f64[1] + v14 * v7[1].f64[1] + v15 * v7[5].f64[1] + v16 * v7[7].f64[1];
      v10 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v7[4], v13), v7[2], v14), v7[6], v15), v7[8], v16);
    }
    v17 = v10;
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 1;
    *(double *)(result + 16) = v8;
    *(double *)(result + 24) = v9;
    *(float64x2_t *)(result + 32) = v17;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 0;
    if (LODWORD(v7->f64[1]) == 1)
    {
      if (*(_QWORD *)&v7->f64[0])
      {
        *(_QWORD *)(*(_QWORD *)&v7->f64[0] + 8) = 3;
        v7->f64[0] = 0.0;
      }
      result = bmalloc::api::isoDeallocate((bmalloc::api *)v7, v11);
    }
    else
    {
      --LODWORD(v7->f64[1]);
    }
  }
  if (v20 != -1)
    return ((uint64_t (*)(char *, float64x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17DOMMatrixReadOnlyENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v20])(&v21, &v18);
  return result;
}

uint64_t WebCore::DOMRectList::DOMRectList(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;
  float v29;
  float v31;
  float v32;
  uint64_t v33;

  v2 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 8) = v5;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = v5;
      v7 = 0;
      v8 = 28;
      do
      {
        v9 = (float *)(*(_QWORD *)a2 + v8);
        v10 = *(v9 - 2);
        v11 = *(v9 - 1);
        v12 = *(v9 - 4);
        v13 = *(v9 - 3);
        if (v11 >= v13)
          v14 = *(v9 - 3);
        else
          v14 = *(v9 - 1);
        v16 = *(v9 - 7);
        v15 = *(v9 - 6);
        v17 = *(v9 - 5);
        if (v17 >= v16)
          v18 = *(v9 - 7);
        else
          v18 = *(v9 - 5);
        if (v14 >= v18)
          v14 = v18;
        v19 = fabsf(v14);
        if (v19 != INFINITY && v19 <= 2147500000.0)
          v21 = v14;
        else
          v21 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
        if (*v9 >= v10)
          v22 = *(v9 - 2);
        else
          v22 = *v9;
        if (v12 >= v15)
          v23 = *(v9 - 6);
        else
          v23 = *(v9 - 4);
        if (v22 >= v23)
          v24 = v23;
        else
          v24 = v22;
        v25 = fabsf(v24);
        if (v25 == INFINITY || v25 > 2147500000.0)
          v24 = (float)((SLODWORD(v24) >> 31) ^ 0x7FFFFFFF);
        if (v16 < v17)
          v16 = *(v9 - 5);
        if (v13 >= v11)
          v11 = *(v9 - 3);
        if (v16 >= v11)
          v11 = v16;
        v27 = fabsf(v11);
        if (v27 == INFINITY || v27 > 2147500000.0)
          v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
        if (v15 < v12)
          v15 = *(v9 - 4);
        if (v10 < *v9)
          v10 = *v9;
        if (v15 >= v10)
          v10 = v15;
        v29 = fabsf(v10);
        if (v29 == INFINITY || v29 > 2147500000.0)
          v10 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
        v31 = v11 - v21;
        v32 = v10 - v24;
        v33 = bmalloc::api::isoAllocate();
        *(_QWORD *)v33 = 0;
        *(_DWORD *)(v33 + 8) = 1;
        *(double *)(v33 + 16) = v21;
        *(double *)(v33 + 24) = v24;
        *(double *)(v33 + 32) = v31;
        *(double *)(v33 + 40) = v32;
        *(_QWORD *)(v6 + 8 * v7) = v33;
        *(_DWORD *)(v2 + 20) = v7 + 1;
        v8 += 32;
        ++v7;
      }
      while (v7 < *(unsigned int *)(a2 + 12));
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;
  float v29;
  float v31;
  float v32;
  uint64_t v33;

  v2 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 8) = v5;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = v5;
      v7 = 0;
      v8 = 28;
      do
      {
        v9 = (float *)(*(_QWORD *)a2 + v8);
        v10 = *(v9 - 2);
        v11 = *(v9 - 1);
        v12 = *(v9 - 4);
        v13 = *(v9 - 3);
        if (v11 >= v13)
          v14 = *(v9 - 3);
        else
          v14 = *(v9 - 1);
        v16 = *(v9 - 7);
        v15 = *(v9 - 6);
        v17 = *(v9 - 5);
        if (v17 >= v16)
          v18 = *(v9 - 7);
        else
          v18 = *(v9 - 5);
        if (v14 >= v18)
          v14 = v18;
        v19 = fabsf(v14);
        if (v19 != INFINITY && v19 <= 2147500000.0)
          v21 = v14;
        else
          v21 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
        if (*v9 >= v10)
          v22 = *(v9 - 2);
        else
          v22 = *v9;
        if (v12 >= v15)
          v23 = *(v9 - 6);
        else
          v23 = *(v9 - 4);
        if (v22 >= v23)
          v24 = v23;
        else
          v24 = v22;
        v25 = fabsf(v24);
        if (v25 == INFINITY || v25 > 2147500000.0)
          v24 = (float)((SLODWORD(v24) >> 31) ^ 0x7FFFFFFF);
        if (v16 < v17)
          v16 = *(v9 - 5);
        if (v13 >= v11)
          v11 = *(v9 - 3);
        if (v16 >= v11)
          v11 = v16;
        v27 = fabsf(v11);
        if (v27 == INFINITY || v27 > 2147500000.0)
          v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
        if (v15 < v12)
          v15 = *(v9 - 4);
        if (v10 < *v9)
          v10 = *v9;
        if (v15 >= v10)
          v10 = v15;
        v29 = fabsf(v10);
        if (v29 == INFINITY || v29 > 2147500000.0)
          v10 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
        v31 = v11 - v21;
        v32 = v10 - v24;
        v33 = bmalloc::api::isoAllocate();
        *(_QWORD *)v33 = 0;
        *(_DWORD *)(v33 + 8) = 1;
        *(double *)(v33 + 16) = v21;
        *(double *)(v33 + 24) = v24;
        *(double *)(v33 + 32) = v31;
        *(double *)(v33 + 40) = v32;
        *(_QWORD *)(v6 + 8 * v7) = v33;
        *(_DWORD *)(v2 + 20) = v7 + 1;
        v8 += 32;
        ++v7;
      }
      while (v7 < *(unsigned int *)(a2 + 12));
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;

  v2 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 8) = v5;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (float32x2_t *)(*(_QWORD *)a2 + v7);
        v11 = vcvtq_f64_f32(*v9);
        v12 = vcvtq_f64_f32(v9[1]);
        v10 = bmalloc::api::isoAllocate();
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 1;
        *(float64x2_t *)(v10 + 16) = v11;
        *(float64x2_t *)(v10 + 32) = v12;
        *(_QWORD *)(v6 + 8 * v8) = v10;
        *(_DWORD *)(v2 + 20) = v8 + 1;
        v7 += 16;
        ++v8;
      }
      while (v8 < *(unsigned int *)(a2 + 12));
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;

  v2 = result;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 8) = v5;
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (float32x2_t *)(*(_QWORD *)a2 + v7);
        v11 = vcvtq_f64_f32(*v9);
        v12 = vcvtq_f64_f32(v9[1]);
        v10 = bmalloc::api::isoAllocate();
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 1;
        *(float64x2_t *)(v10 + 16) = v11;
        *(float64x2_t *)(v10 + 32) = v12;
        *(_QWORD *)(v6 + 8 * v8) = v10;
        *(_DWORD *)(v2 + 20) = v8 + 1;
        v7 += 16;
        ++v8;
      }
      while (v8 < *(unsigned int *)(a2 + 12));
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::DOMRectList::~DOMRectList(WebCore::DOMRectList *this, void *a2)
{
  uint64_t v3;
  bmalloc::api **v4;
  uint64_t v5;
  bmalloc::api *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (bmalloc::api **)*((_QWORD *)this + 1);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 2) == 1)
        {
          if (*(_QWORD *)v6)
          {
            *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
            *(_QWORD *)v6 = 0;
          }
          bmalloc::api::isoDeallocate(v6, a2);
        }
        else
        {
          --*((_DWORD *)v6 + 2);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

{
  uint64_t v3;
  bmalloc::api **v4;
  uint64_t v5;
  bmalloc::api *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (bmalloc::api **)*((_QWORD *)this + 1);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 2) == 1)
        {
          if (*(_QWORD *)v6)
          {
            *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
            *(_QWORD *)v6 = 0;
          }
          bmalloc::api::isoDeallocate(v6, a2);
        }
        else
        {
          --*((_DWORD *)v6 + 2);
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

void *WebCore::DOMRectReadOnly::bisoHeap(WebCore::DOMRectReadOnly *this)
{
  return &WebCore::DOMRectReadOnly::bisoHeap(void)::heap;
}

uint64_t WebCore::DOMRectReadOnly::operator new(uint64_t this)
{
  if (this == 48)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::DataTransfer::createForCopyAndPaste@<X0>(WebCore::Document *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = *a3;
  *a3 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = v14;
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v8 + 64) = v14;
  *(_QWORD *)(v8 + 72) = v10;
  *(_BYTE *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 84) = 0;
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *a4 = v8;
  WebCore::Document::originIdentifierForPasteboard(a1, v11, &v14);
  result = *(WTF::StringImpl **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v14;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::DataTransfer::~DataTransfer(WebCore::DataTransfer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CachedResource *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WebCore::DataTransferItemList *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;

  v3 = *((_QWORD *)this + 14);
  if (!v3)
  {
    *((_QWORD *)this + 14) = 0;
    goto LABEL_17;
  }
  v4 = *((_QWORD *)this + 12);
  if (v4 && (v5 = *(WebCore::CachedResource **)(v4 + 8)) != 0)
  {
    WebCore::CachedResource::removeClient(v5, (unsigned int **)v3);
    v3 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (!v3)
      goto LABEL_17;
  }
  else
  {
    *((_QWORD *)this + 14) = 0;
  }
  v6 = *(unsigned int **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)v3 = &off_1E33F87C8;
  v9 = *(_QWORD *)(v3 + 8);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(WTF **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 8) = 0;
  }
  WTF::fastFree((WTF *)v3, a2);
LABEL_17:
  v11 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 12, a2);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      v25 = v15[7];
      if ((_DWORD)v25)
      {
        v26 = (_DWORD **)*((_QWORD *)v15 + 2);
        v27 = 8 * v25;
        do
        {
          v28 = *v26;
          *v26 = 0;
          if (v28)
          {
            if (v28[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[4];
          }
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
      v29 = (WTF *)*((_QWORD *)v15 + 2);
      if (v29)
      {
        *((_QWORD *)v15 + 2) = 0;
        v15[6] = 0;
        WTF::fastFree(v29, v12);
      }
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)(*(_QWORD *)v15 + 8) = 3;
        *(_QWORD *)v15 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v15, v12);
    }
    else
    {
      --v15[2];
    }
  }
  v16 = (WebCore::DataTransferItemList *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    WebCore::DataTransferItemList::~DataTransferItemList(v16, v12);
    bmalloc::api::isoDeallocate(v17, v18);
  }
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v12);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v12);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::normalizeType(uint64_t this, const WTF::String *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = (WTF::StringImpl **)this;
  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  WTF::String::trim();
  WTF::String::convertToASCIILowercase((WTF::String *)&v11);
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = MEMORY[0x19AEA53F4](v10, "text", 4);
  v7 = (WTF::StringImpl *)WebCore::textPlainContentTypeAtomData;
  if ((v5 & 1) != 0)
  {
LABEL_10:
    if (!v7)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!WebCore::textPlainContentTypeAtomData)
  {
    if (!v10)
    {
      v7 = 0;
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v10)
  {
LABEL_8:
    if (WTF::StringImpl::startsWith())
    {
      v7 = (WTF::StringImpl *)WebCore::textPlainContentTypeAtomData;
      goto LABEL_10;
    }
    v8 = v10;
    goto LABEL_18;
  }
  if (!*(_DWORD *)(WebCore::textPlainContentTypeAtomData + 4))
    goto LABEL_11;
  v8 = 0;
LABEL_18:
  if ((MEMORY[0x19AEA53F4](v8, "url", 3) & 1) != 0)
  {
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v11;
    goto LABEL_12;
  }
  this = (uint64_t)v10;
  if (!v10)
  {
    v9 = 0;
    goto LABEL_30;
  }
  if (WTF::StringImpl::startsWith())
    goto LABEL_21;
  this = WTF::StringImpl::startsWith();
  if ((this & 1) == 0)
  {
    v9 = v10;
LABEL_30:
    *v2 = v9;
    return this;
  }
  v7 = (WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData;
  if (WebCore::textHTMLContentTypeAtomData)
LABEL_11:
    *(_DWORD *)v7 += 2;
LABEL_12:
  *v2 = v7;
  this = (uint64_t)v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::DataTransfer::getDataForItem@<X0>(WTF::StringImpl *this@<X0>, WebCore::Document *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WebCore::Document *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if ((*((_DWORD *)this + 6) - 1) >= 2)
  {
    *a3 = 0;
    return this;
  }
  v6 = this;
  WTF::String::trim();
  WTF::String::convertToASCIILowercase((WTF::String *)&v21);
  v8 = v21;
  v21 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (*((_DWORD *)v6 + 14) != 2)
  {
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
      goto LABEL_23;
    }
    if (!byte_1ECE90A55)
      goto LABEL_23;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v6 + 4) + 184))(*((_QWORD *)v6 + 4)) != 2)
  {
LABEL_23:
    v15 = a3;
    v16 = (uint64_t)v6;
    v17 = a2;
    v18 = 0;
    goto LABEL_24;
  }
  if (MEMORY[0x19AEA53F4](v22, "text/uri-list", 13))
  {
    v10 = *((_QWORD *)a2 + 66);
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 24)) != 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = 0;
    v19 = *((_QWORD *)v6 + 4);
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E33A2218;
    v21 = v20;
    WebCore::readURLsFromPasteboardAsString((uint64_t)a3, v13, v19, &v21);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    goto LABEL_25;
  }
  if (WTF::equal(v22, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v9))
  {
    {
      if (byte_1ECE90A55)
      {
        v15 = a3;
        v16 = (uint64_t)v6;
        v17 = a2;
        v18 = 1;
LABEL_24:
        WebCore::DataTransfer::readStringFromPasteboard(v15, v16, (uint64_t)v17, &v22, v18);
        goto LABEL_25;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
  }
  *a3 = 0;
LABEL_25:
  this = v22;
  v22 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::readURLsFromPasteboardAsString(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  unint64_t i;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF *v17;
  int v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WTF **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)a3 + 72))(&v32, a3, &v35);
  result = v35;
  v35 = 0;
  if (!result)
  {
LABEL_4:
    if (a2)
      goto LABEL_5;
    goto LABEL_19;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_4;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (a2)
  {
LABEL_5:
    v9 = v34;
    if (v34)
    {
      if (v34 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v34));
      if (v34)
      {
        v11 = 0;
        for (i = 0; i < v34; ++i)
        {
          WebCore::Page::applyLinkDecorationFiltering(a2, (WTF::StringImpl **)((char *)v32 + v11), &v35);
          *(_QWORD *)((char *)v10 + v11) = v35;
          v11 += 8;
        }
        if (v34)
        {
          v13 = v32;
          v14 = 8 * v34;
          do
          {
            v15 = *(WTF::StringImpl **)v13;
            *(_QWORD *)v13 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v7);
              else
                *(_DWORD *)v15 -= 2;
            }
            v13 = (WTF *)((char *)v13 + 8);
            v14 -= 8;
          }
          while (v14);
        }
        goto LABEL_22;
      }
    }
    else
    {
      v10 = 0;
    }
    LODWORD(i) = 0;
LABEL_22:
    v16 = v32;
    if (v32)
    {
      v32 = 0;
      v33 = 0;
      WTF::fastFree(v16, v7);
    }
    v32 = v10;
    v33 = v9;
    v34 = i;
    goto LABEL_25;
  }
LABEL_19:
  v10 = v32;
  LODWORD(i) = v34;
LABEL_25:
  v17 = (WTF *)((char *)v10 + 8 * i);
  if ((_DWORD)i)
  {
    v18 = 0;
    v19 = v10;
    v20 = (WTF *)((char *)v10 + 8 * i);
    v21 = v20;
    do
    {
      if (((*(uint64_t (**)(_QWORD, WTF *))(*(_QWORD *)*a4 + 16))(*a4, v10) & 1) != 0)
      {
        v23 = v21;
      }
      else
      {
        v23 = v10;
        if (v21 != (WTF *)((char *)v32 + 8 * v34))
        {
          if (v10 == v20)
          {
            v23 = v21;
          }
          else
          {
            memmove(v21, v20, v19 - v20);
            v23 = (WTF *)((char *)v21 + v19 - v20);
          }
        }
        v24 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        v20 = (WTF *)((char *)v10 + 8);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v22);
          else
            *(_DWORD *)v24 -= 2;
        }
        ++v18;
        v21 = v23;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v19 = (WTF *)((char *)v19 + 8);
    }
    while (v10 < v17);
    v10 = v32;
    v25 = v34;
    v17 = v23;
  }
  else
  {
    v25 = 0;
    v18 = 0;
    v20 = v10;
  }
  v26 = (WTF *)((char *)v10 + 8 * v25);
  if (v20 != v26)
  {
    memmove(v17, v20, v26 - v20);
    v25 = v34;
  }
  v34 = v25 - v18;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::makeStringByJoining();
  v28 = v35;
  v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v34)
  {
    v29 = v32;
    v30 = 8 * v34;
    do
    {
      v31 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v27);
        else
          *(_DWORD *)v31 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  result = v32;
  if (v32)
  {
    v32 = 0;
    v33 = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, v27);
  }
  return result;
}

uint64_t WebCore::DataTransfer::readStringFromPasteboard(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, WTF **a4, uint64_t a5)
{
  uint64_t v8;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t result;
  const WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int *v54;
  WTF::StringImpl *v55;
  _QWORD *v56;

  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    unk_1ECE90A5B = 0;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    v8 = **(_QWORD **)(a2 + 32);
    return (*(uint64_t (**)(void))(v8 + 56))();
  }
  v8 = **(_QWORD **)(a2 + 32);
  if (!byte_1ECE90A55)
    return (*(uint64_t (**)(void))(v8 + 56))();
  if (((*(uint64_t (**)(void))(v8 + 16))() & 1) == 0)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_11;
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 32) + 48))(&v52);
    v14 = WTF::equal(*(WTF **)(a2 + 16), v52, v12);
    v15 = v52;
    v52 = 0;
    if (!v15)
      goto LABEL_8;
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
LABEL_8:
      if (!v14)
        goto LABEL_11;
      goto LABEL_9;
    }
    WTF::StringImpl::destroy(v15, v13);
    if (!v14)
      goto LABEL_11;
  }
LABEL_9:
  result = (*(uint64_t (**)(_QWORD, WTF **))(**(_QWORD **)(a2 + 32) + 64))(*(_QWORD *)(a2 + 32), a4);
  if (*a1)
    return result;
  *a1 = 0;
LABEL_11:
  if ((WTF::equal(*a4, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v11) & 1) == 0
    && (WTF::equal(*a4, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v17) & 1) == 0)
  {
    result = MEMORY[0x19AEA53F4](*a4, "text/uri-list", 13);
    if ((result & 1) == 0)
      goto LABEL_48;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32)) & 1) == 0)
  {
    result = WTF::equal(*a4, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v18);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)(a3 + 528);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          v21 = (unsigned int *)(v20 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
          v52 = (WTF::StringImpl *)off_1E327FAD8;
          v53 = 0;
          if (!*(_QWORD *)(v20 + 16))
          {
            v46 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v46 = 1;
            *(_QWORD *)(v46 + 8) = v20;
            v47 = *(unsigned int **)(v20 + 16);
            *(_QWORD *)(v20 + 16) = v46;
            if (v47)
            {
              do
              {
                v48 = __ldaxr(v47);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, v47));
              if (!v49)
              {
                atomic_store(1u, v47);
                WTF::fastFree((WTF *)v47, v45);
              }
            }
          }
          v23 = *(unsigned int **)(v20 + 16);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          v54 = v23;
          v55 = 0;
          v52 = (WTF::StringImpl *)&off_1E3283A28;
          do
          {
            v25 = __ldaxr(v21);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v21));
          if (!v26)
          {
            atomic_store(1u, v21);
            v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v50 = off_1E31FE290;
            v50[1] = v21;
            v56 = v50;
            WTF::ensureOnMainThread();
            v51 = v56;
            v56 = 0;
            if (v51)
              (*(void (**)(_QWORD *))(*v51 + 8))(v51);
          }
          (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 32) + 112))(*(_QWORD *)(a2 + 32), &v52, a5, 0, 0);
          v28 = v54;
          *a1 = v55;
          v52 = (WTF::StringImpl *)off_1E327FAD8;
          v54 = 0;
          v55 = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v27);
            }
          }
          result = v53;
          v52 = (WTF::StringImpl *)off_1E327FB48;
          v53 = 0;
          if (!result)
            return result;
LABEL_46:
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v27);
          *(_DWORD *)result -= 2;
          return result;
        }
      }
LABEL_48:
      *a1 = 0;
      return result;
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32)) & 1) != 0
    || !MEMORY[0x19AEA53F4](*a4, "text/uri-list", 13))
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF **))(**(_QWORD **)(a2 + 32)
                                                                                                + 56))(&v52, *(_QWORD *)(a2 + 32), a4);
    v35 = *(_QWORD *)(a3 + 528);
    if (!v35
      || (v36 = *(_QWORD *)(v35 + 8)) == 0
      || (v37 = *(_QWORD *)(v36 + 24)) == 0
      || (v38 = *(_DWORD **)(v37 + 8)) == 0)
    {
      *a1 = v52;
      return result;
    }
    ++*v38;
    WebCore::Page::applyLinkDecorationFiltering((uint64_t)v38, &v52, a1);
    if (*v38 == 1)
    {
      WebCore::Page::~Page((uint64_t)v38);
      WTF::fastFree(v41, v42);
    }
    else
    {
      --*v38;
    }
    result = (uint64_t)v52;
    v52 = 0;
    if (result)
      goto LABEL_46;
  }
  else
  {
    v31 = *(_QWORD *)(a3 + 528);
    if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0 && (v33 = *(_QWORD *)(v32 + 24)) != 0)
    {
      v34 = *(_DWORD **)(v33 + 8);
      if (v34)
        ++*v34;
    }
    else
    {
      v34 = 0;
    }
    v39 = *(_QWORD *)(a2 + 32);
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v40 = off_1E33A2240;
    v52 = v40;
    WebCore::readURLsFromPasteboardAsString((uint64_t)a1, (uint64_t)v34, v39, &v52);
    result = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
    if (v34)
    {
      if (*v34 == 1)
      {
        WebCore::Page::~Page((uint64_t)v34);
        return WTF::fastFree(v43, v44);
      }
      else
      {
        --*v34;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::setData(WTF::StringImpl *this, WebCore::Document *a2, const WTF::String *a3, unsigned int **a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*((_DWORD *)this + 6) != 1)
    return this;
  v7 = this;
  if (*((_DWORD *)this + 14) == 2)
    goto LABEL_5;
  {
    if (byte_1ECE90A55)
    {
LABEL_5:
      this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 184))(*((_QWORD *)this + 4));
      if ((_DWORD)this == 2)
        return this;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  WebCore::normalizeType((uint64_t)&v10, a3);
  WebCore::DataTransfer::setDataFromItemList(v7, a2, &v10, a4);
  v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
  if (v9)
    WebCore::DataTransferItemList::didSetStringData(v9, (const WTF::String *)&v10);
  this = v10;
  v10 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::DataTransfer::setDataFromItemList(WebCore::DataTransfer *this, WebCore::Document *a2, WTF::StringImpl **a3, unsigned int **a4)
{
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int *v28;
  WTF::StringImpl *v29;
  uint64_t result;
  const WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  const WTF::StringImpl *v38;
  WebCore::PasteboardCustomData *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43[5];
  WTF::StringImpl *v44;
  char v45;
  uint64_t v46;
  char v47;
  WTF::StringImpl *v48;

  v7 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19596CDFCLL);
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
LABEL_65:
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v7 + 88, a3, v8, (uint64_t)&v44);
    v39 = (WebCore::PasteboardCustomData *)(v7 + 64);
    v40 = *a4;
    if (*a4)
      *v40 += 2;
    result = WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v39, a3, v38);
    v41 = result;
    v42 = *(unsigned int *)(result + 24);
    if ((_DWORD)v42 != -1)
    {
      v32 = (WTF::StringImpl *)(result + 16);
      if (!(_DWORD)v42)
      {
        result = *(_QWORD *)v32;
        *(_QWORD *)v32 = v40;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            return result;
          }
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
        }
        return result;
      }
      result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v42])(&v44, v32);
    }
    *(_QWORD *)(v41 + 16) = v40;
    *(_DWORD *)(v41 + 24) = 0;
    return result;
  }
  if (!byte_1ECE90A55)
    goto LABEL_65;
  v48 = 0;
  if (MEMORY[0x19AEA53F4](*a3, "text/html", 9))
  {
    LOBYTE(v46) = 0;
    v47 = 0;
    WebCore::sanitizeMarkup(a4, 1, &v46, &v44);
    v9 = v44;
    v48 = v44;
    v44 = 0;
    if (v47)
    {
      v10 = v46;
      v46 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  else if (MEMORY[0x19AEA53F4](*a3, "text/uri-list", 13))
  {
    v43[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v43);
    MEMORY[0x19AEA52F8](&v44, v43, a4, 0);
    v13 = v43[0];
    v43[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v44;
    if ((v45 & 1) != 0)
    {
      if (v44)
        *(_DWORD *)v44 += 2;
      v48 = v14;
      v9 = v14;
    }
    else
    {
      v9 = 0;
    }
    v44 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else if (WTF::equal(*a3, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v11))
  {
    v9 = (WTF::StringImpl *)*a4;
    if (*a4)
      *(_DWORD *)v9 += 2;
    v48 = v9;
  }
  else
  {
    v9 = 0;
  }
  if ((MEMORY[0x19AEA53F4](*a3, "text/uri-list", 13) & 1) != 0
    || WTF::equal(*a3, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v15))
  {
    v16 = *((_QWORD *)a2 + 66);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 24);
        if (v18)
        {
          v19 = *(_DWORD **)(v18 + 8);
          if (v19)
          {
            ++*v19;
            WebCore::Page::applyLinkDecorationFiltering((uint64_t)v19, &v48, &v44);
            v21 = v44;
            v44 = 0;
            v48 = v21;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v20);
              else
                *(_DWORD *)v9 -= 2;
            }
            if (*v19 == 1)
            {
              WebCore::Page::~Page((uint64_t)v19);
              WTF::fastFree(v36, v37);
            }
            else
            {
              --*v19;
            }
          }
        }
      }
    }
  }
  v22 = v48;
  if ((WTF::equal(v48, (const WTF::StringImpl *)*a4, v15) & 1) == 0)
  {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v7 + 88, a3, v23, (uint64_t)&v44);
    v25 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)(v7 + 64), a3, v24);
    v27 = v25;
    v28 = *a4;
    if (*a4)
      *v28 += 2;
    v29 = *(WTF::StringImpl **)(v25 + 8);
    *(_QWORD *)(v27 + 8) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  result = WTF::equal(*a3, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v23);
  if ((result & 1) != 0
    || (result = WTF::equal(*a3, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v31), (result & 1) != 0)
    || (result = MEMORY[0x19AEA53F4](*a3, "text/uri-list", 13), (_DWORD)result))
  {
    if (v22)
    {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v7 + 88, a3, v31, (uint64_t)&v44);
      *(_DWORD *)v22 += 2;
      result = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)(v7 + 64), a3, v33);
      v34 = result;
      v35 = *(unsigned int *)(result + 24);
      if ((_DWORD)v35 != -1)
      {
        v32 = (WTF::StringImpl *)(result + 16);
        if (!(_DWORD)v35)
        {
          result = *(_QWORD *)v32;
          *(_QWORD *)v32 = v22;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_54;
        }
        result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v35])(&v44, v32);
      }
      *(_QWORD *)(v34 + 16) = v22;
      *(_DWORD *)(v34 + 24) = 0;
LABEL_54:
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
        return result;
      }
      result = (uint64_t)v22;
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
    }
  }
  else if (v22)
  {
    goto LABEL_54;
  }
  return result;
}

void WebCore::DataTransfer::filesFromPasteboardAndItemList(WebCore::DataTransfer *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*((_DWORD *)this + 14) != 1
    && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 184))(*((_QWORD *)this + 4)))
  {
    v20[0] = off_1E33AE3D8;
    if (a2)
    {
      v6 = *((unsigned __int8 *)a2 + 274);
      if (*((_BYTE *)a2 + 274))
      {
        if (v6 == 1 || v6 == 2)
          ++*((_DWORD *)a2 + 78);
      }
      else
      {
        *((_DWORD *)a2 - 42) += 2;
      }
    }
    v21 = 0;
    v22 = 0;
    v20[1] = a2;
    (*(void (**)(_QWORD, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4), v20, 0, 0);
    *(_QWORD *)a3 = v21;
    v7 = v22;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    WebCore::WebCorePasteboardFileReader::~WebCorePasteboardFileReader((WebCore::WebCorePasteboardFileReader *)v20, v8);
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 56))
    {
      v10 = *(unsigned int *)(v9 + 52);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v9 + 40);
        v12 = 8 * v10;
        do
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 24);
          if (v13)
          {
            ++*(_DWORD *)(v13 + 16);
            v20[0] = v13;
            v14 = *(unsigned int *)(a3 + 12);
            if ((_DWORD)v14 == *(_DWORD *)(a3 + 8))
            {
              v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v14 + 1, (unint64_t)v20);
              v14 = *(unsigned int *)(a3 + 12);
              v16 = *(char **)a3;
              v17 = *(_QWORD *)v15;
              *(_QWORD *)v15 = 0;
              *(_QWORD *)&v16[8 * v14] = v17;
            }
            else
            {
              v18 = *(char **)a3;
              v20[0] = 0;
              *(_QWORD *)&v18[8 * v14] = v13;
            }
            *(_DWORD *)(a3 + 12) = v14 + 1;
            v19 = (_DWORD *)v20[0];
            v20[0] = 0;
            if (v19)
            {
              if (v19[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
              else
                --v19[4];
            }
          }
          v11 += 8;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
}

uint64_t WebCore::DataTransfer::didAddFileToItemList(uint64_t this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(this + 48);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(this + 40);
  if (!*(_BYTE *)(v3 + 56))
  {
    __break(1u);
LABEL_18:
    v5 = MEMORY[0x10];
    goto LABEL_6;
  }
  v4 = *(unsigned int *)(v3 + 52);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    return this;
  }
  v1 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v4 - 8) + 24);
  if (!v1)
    goto LABEL_18;
  v5 = v1[4] + 1;
LABEL_6:
  v1[4] = v5 + 1;
  v11 = (uint64_t)v1;
  v6 = (char **)(v2 + 16);
  v7 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(v2 + 24))
  {
    v8 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v2 + 28);
    v9 = (char *)(*(_QWORD *)(v2 + 16) + 8 * v7);
    v10 = *(_DWORD **)v8;
  }
  else
  {
    v9 = &(*v6)[8 * v7];
    v8 = (char *)&v11;
    v10 = v1;
  }
  *(_QWORD *)v8 = 0;
  *(_QWORD *)v9 = v10;
  *(_DWORD *)(v2 + 28) = v7 + 1;
  this = v11;
  v11 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 16) == 1)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 16);
  }
  if (v1[4] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  --v1[4];
  return this;
}

uint64_t WebCore::DataTransfer::items(WebCore::DataTransfer *this, WebCore::Document *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::DataTransferItemList *v12;
  bmalloc::api *v13;
  void *v14;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
  {
    v2 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_1E33A18C0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v2, (WebCore::Document *)((char *)a2 + 192));
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)v2 = &off_1E33A2A88;
    if (!*((_QWORD *)this + 1))
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 8) = this;
      v7 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v6;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v5);
        }
      }
    }
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)(v2 + 32) = v10;
    *(_BYTE *)(v2 + 40) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    v12 = (WebCore::DataTransferItemList *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v2;
    if (v12)
    {
      WebCore::DataTransferItemList::~DataTransferItemList(v12, (WTF::StringImpl *)v5);
      bmalloc::api::isoDeallocate(v13, v14);
      return *((_QWORD *)this + 5);
    }
  }
  return v2;
}

uint64_t WebCore::DataTransfer::types@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  BOOL v14;
  BOOL v15;
  void *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  const WTF::StringImpl *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  const char *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;

  v4 = *(_DWORD *)(result + 24);
  if ((v4 - 1) >= 3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v6 = result;
  v7 = v4 != 1 && *(_DWORD *)(result + 56) == 1;
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_92;
  }
  if (!byte_1ECE90A55)
  {
LABEL_92:
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 40))(*(_QWORD *)(result + 32));
    if (!v7)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 32) + 184))(*(_QWORD *)(v6 + 32));
      if ((_DWORD)result && a2 != 0)
      {
        v58 = (WTF *)"Files";
        v59 = 6;
        v53 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v53 == *(_DWORD *)(a3 + 8))
        {
          return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a3, (uint64_t)&v58);
        }
        else
        {
          v54 = *(_QWORD **)a3;
          result = WTF::StringImpl::createWithoutCopyingNonEmpty();
          v55 = *(_DWORD *)(a3 + 12);
          v54[v53] = v56;
          *(_DWORD *)(a3 + 12) = v55 + 1;
        }
      }
    }
    return result;
  }
  (*(void (**)(WTF **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(result + 32) + 32))(&v58, *(_QWORD *)(result + 32), result + 16);
  v8 = *(_QWORD *)(v6 + 40);
  if (v8 && *(_BYTE *)(v8 + 56) && (v9 = *(unsigned int *)(v8 + 52), (_DWORD)v9))
  {
    v10 = *(uint64_t **)(v8 + 40);
    v11 = v9 - 1;
    do
    {
      v12 = *v10++;
      if (*(_QWORD *)(v12 + 24))
        v13 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v13 = 0;
      v14 = v13 != 0;
      if (v13)
        v15 = 1;
      else
        v15 = v11 == 0;
      --v11;
    }
    while (!v15);
  }
  else
  {
    v14 = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 32) + 184))(*(_QWORD *)(v6 + 32));
  v17 = result;
  if (!v14 && !(_DWORD)result)
  {
    *(_QWORD *)a3 = v58;
    v18 = v59;
    v58 = 0;
    v59 = 0;
    *(_QWORD *)(a3 + 8) = v18;
    goto LABEL_73;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (!v7 && a2)
  {
    v56 = "Files";
    v57 = 6;
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a3, (uint64_t)&v56);
  }
  if (v17 == 2)
  {
    if (HIDWORD(v59))
    {
      v19 = 0;
      while (1)
      {
        result = MEMORY[0x19AEA53F4](*((_QWORD *)v58 + v19), "text/uri-list", 13);
        if ((result & 1) != 0)
          break;
        ++v19;
        v21 = HIDWORD(v59);
        if (v19 >= HIDWORD(v59))
          goto LABEL_51;
      }
      v56 = "text/uri-list";
      v57 = 14;
      v35 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v35 == *(_DWORD *)(a3 + 8))
      {
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a3, (uint64_t)&v56);
      }
      else
      {
        v36 = *(_QWORD **)a3;
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v37 = *(_DWORD *)(a3 + 12);
        v36[v35] = v60;
        *(_DWORD *)(a3 + 12) = v37 + 1;
      }
      v21 = HIDWORD(v59);
LABEL_51:
      if (v21)
      {
        v38 = 0;
        while (1)
        {
          result = WTF::equal(*((WTF **)v58 + v38), (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v20);
          if ((result & 1) != 0)
            break;
          if (++v38 >= (unint64_t)HIDWORD(v59))
            goto LABEL_73;
        }
        {
          WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
          *(_OWORD *)&byte_1ECE90A50 = 0u;
          qword_1ECE90A60 = 0;
          LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
          *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
          *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
          byte_1ECE90A56 = 1;
          *(_DWORD *)&algn_1ECE90A57 = 0;
          unk_1ECE90A5B = 0;
          byte_1ECE90A5D = 1;
          byte_1ECE90A5F = 1;
          goto LABEL_73;
        }
        if (!byte_1ECE90A55)
          goto LABEL_73;
        v39 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(a3 + 8))
        {
          v40 = v39 + (v39 >> 2);
          if (v40 >= 0x10)
            v41 = v40 + 1;
          else
            v41 = 16;
          if (v41 <= v39 + 1)
            v42 = v39 + 1;
          else
            v42 = v41;
          if (!(v42 >> 29))
          {
            v43 = *(_QWORD **)a3;
            v44 = (void *)WTF::fastMalloc((WTF *)(8 * v42));
            *(_DWORD *)(a3 + 8) = v42;
            *(_QWORD *)a3 = v44;
            result = (uint64_t)memcpy(v44, v43, 8 * v39);
            if (v43)
            {
              if (*(_QWORD **)a3 == v43)
              {
                *(_QWORD *)a3 = 0;
                *(_DWORD *)(a3 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v43, v16);
            }
            v45 = *(unsigned int *)(a3 + 12);
            v46 = *(_QWORD **)a3;
            v47 = WebCore::textHTMLContentTypeAtomData;
            if (WebCore::textHTMLContentTypeAtomData)
              *(_DWORD *)WebCore::textHTMLContentTypeAtomData += 2;
            v46[v45] = v47;
            *(_DWORD *)(a3 + 12) = v45 + 1;
            goto LABEL_73;
          }
LABEL_102:
          __break(0xC471u);
          JUMPOUT(0x19596D7CCLL);
        }
        v48 = *(_QWORD **)a3;
        v49 = WebCore::textHTMLContentTypeAtomData;
        if (WebCore::textHTMLContentTypeAtomData)
          *(_DWORD *)WebCore::textHTMLContentTypeAtomData += 2;
        v48[v39] = v49;
        *(_DWORD *)(a3 + 12) = v39 + 1;
      }
    }
  }
  else
  {
    v22 = *(unsigned int *)(a3 + 8);
    v23 = *(unsigned int *)(a3 + 12);
    v24 = HIDWORD(v59) + v23;
    if (v24 > v22)
    {
      v25 = v22 + (v22 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v24)
        v27 = HIDWORD(v59) + v23;
      else
        v27 = v26;
      if (v27 >> 29)
        goto LABEL_102;
      v28 = *(_QWORD **)a3;
      v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
      *(_DWORD *)(a3 + 8) = v27;
      *(_QWORD *)a3 = v29;
      result = (uint64_t)memcpy(v29, v28, 8 * v23);
      if (v28)
      {
        if (*(_QWORD **)a3 == v28)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v28, v16);
      }
    }
    if (HIDWORD(v59))
    {
      v30 = v58;
      v31 = *(_DWORD *)(a3 + 12);
      v32 = 8 * HIDWORD(v59);
      do
      {
        v33 = *(_QWORD **)a3;
        v34 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        v30 = (WTF *)((char *)v30 + 8);
        v33[v31++] = v34;
        v32 -= 8;
      }
      while (v32);
      *(_DWORD *)(a3 + 12) = v31;
    }
  }
LABEL_73:
  v50 = v58;
  if (HIDWORD(v59))
  {
    v51 = 8 * HIDWORD(v59);
    do
    {
      result = *(_QWORD *)v50;
      *(_QWORD *)v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)result -= 2;
      }
      v50 = (WTF *)((char *)v50 + 8);
      v51 -= 8;
    }
    while (v51);
    v50 = v58;
    if (v58)
      goto LABEL_75;
  }
  else if (v58)
  {
LABEL_75:
    v58 = 0;
    LODWORD(v59) = 0;
    return WTF::fastFree(v50, v16);
  }
  return result;
}

uint64_t WebCore::DataTransfer::files(WebCore::DataTransfer *this, WebCore::Document *a2)
{
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;

  v3 = *((_QWORD *)this + 6);
  if ((*((_DWORD *)this + 6) - 1) < 2)
  {
    if (v3)
      return *((_QWORD *)this + 6);
    v4 = a2 ? (WebCore::Document *)((char *)a2 + 192) : 0;
    WebCore::DataTransfer::filesFromPasteboardAndItemList(this, v4, (uint64_t)&v31);
    v5 = bmalloc::api::isoAllocate();
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)(v5 + 16) = v31;
    v7 = v32;
    v31 = 0;
    v32 = 0;
    *(_QWORD *)(v5 + 24) = v7;
    v8 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v5;
    if (!v8)
      return *((_QWORD *)this + 6);
    v9 = *(_DWORD *)(v8 + 8) - 1;
    if (*(_DWORD *)(v8 + 8) == 1)
    {
      v10 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD ***)(v8 + 16);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (v13[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            else
              --v13[4];
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v22 = *(WTF **)(v8 + 16);
      if (v22)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v22, v6);
      }
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
        *(_QWORD *)v8 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v8, v6);
      v23 = v31;
      if (HIDWORD(v32))
      {
        v24 = 8 * HIDWORD(v32);
        do
        {
          v25 = *(_DWORD **)v23;
          *(_QWORD *)v23 = 0;
          if (v25)
          {
            if (v25[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            else
              --v25[4];
          }
          v23 = (WTF *)((char *)v23 + 8);
          v24 -= 8;
        }
        while (v24);
        v23 = v31;
      }
      if (v23)
      {
        v31 = 0;
        LODWORD(v32) = 0;
        v20 = v23;
        goto LABEL_31;
      }
      return *((_QWORD *)this + 6);
    }
LABEL_28:
    *(_DWORD *)(v8 + 8) = v9;
    return *((_QWORD *)this + 6);
  }
  if (!v3)
  {
    v18 = bmalloc::api::isoAllocate();
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 1;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    v8 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v18;
    if (!v8)
      return *((_QWORD *)this + 6);
    v9 = *(_DWORD *)(v8 + 8) - 1;
    if (*(_DWORD *)(v8 + 8) == 1)
    {
      v26 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v26)
      {
        v27 = *(_DWORD ***)(v8 + 16);
        v28 = 8 * v26;
        do
        {
          v29 = *v27;
          *v27 = 0;
          if (v29)
          {
            if (v29[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[4];
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      v30 = *(WTF **)(v8 + 16);
      if (v30)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v30, v19);
      }
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
        *(_QWORD *)v8 = 0;
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v8, v19);
      return *((_QWORD *)this + 6);
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)(v3 + 24))
  {
    v14 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v14)
    {
      v15 = *(_DWORD ***)(v3 + 16);
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (v17[4] == 1)
            (*(void (**)(_DWORD *, WebCore::Document *))(*(_QWORD *)v17 + 8))(v17, a2);
          else
            --v17[4];
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
      *(_DWORD *)(v3 + 28) = 0;
    }
    v20 = *(WTF **)(v3 + 16);
    if (v20)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
LABEL_31:
      WTF::fastFree(v20, a2);
    }
  }
  return *((_QWORD *)this + 6);
}

void WebCore::PasteboardFileTypeReader::~PasteboardFileTypeReader(WebCore::PasteboardFileTypeReader *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::DataTransfer::hasStringOfType(WebCore::DataTransfer *this, const WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  unint64_t i;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v12;
  int v13;
  unsigned int v14;

  if (!*a2)
    return 0;
  WebCore::DataTransfer::types((uint64_t)this, 1, (uint64_t)&v12);
  if (v14)
  {
    for (i = 0; i < v14; ++i)
    {
      v6 = WTF::equal(*((WTF **)v12 + i), *a2, v4);
      if ((v6 & 1) != 0)
        break;
    }
    if (v14)
    {
      v7 = v12;
      v8 = 8 * v14;
      do
      {
        v9 = *(WTF::StringImpl **)v7;
        *(_QWORD *)v7 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v3);
          else
            *(_DWORD *)v9 -= 2;
        }
        v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = v12;
  if (v12)
  {
    v12 = 0;
    v13 = 0;
    WTF::fastFree(v10, v3);
  }
  return v6;
}

uint64_t WebCore::DataTransfer::createForInputEvent@<X0>(WebCore::DataTransfer *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  WebCore::PasteboardCustomData *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[3];

  v7 = WTF::fastMalloc((WTF *)0x78);
  *(_BYTE *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)v7 = off_1E3407000;
  *(_QWORD *)(v7 + 8) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  v8 = (WebCore::PasteboardCustomData *)(v7 + 64);
  *(_BYTE *)(v7 + 112) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 93) = 0u;
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v7 + 88, (WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, v9, (uint64_t)v28);
  v11 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v11 += 2;
  v12 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v8, (const WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, v10);
  v14 = v12;
  v15 = *(unsigned int *)(v12 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_9;
  v16 = (WTF::StringImpl *)(v12 + 16);
  if ((_DWORD)v15)
  {
    ((void (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v15])(v28, v16);
LABEL_9:
    *(_QWORD *)(v14 + 16) = v11;
    *(_DWORD *)(v14 + 24) = 0;
    goto LABEL_10;
  }
  v17 = *(WTF::StringImpl **)v16;
  *(_QWORD *)v16 = v11;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_10:
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v7 + 88, (WTF::StringImpl **)&WebCore::textHTMLContentTypeAtomData, v13, (uint64_t)v28);
  v19 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v19 += 2;
  v20 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v8, (const WTF::StringImpl **)&WebCore::textHTMLContentTypeAtomData, v18);
  v21 = v20;
  v22 = *(unsigned int *)(v20 + 24);
  if ((_DWORD)v22 == -1)
    goto LABEL_18;
  v23 = (WTF::StringImpl *)(v20 + 16);
  if ((_DWORD)v22)
  {
    ((void (*)(_QWORD *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v22])(v28, v23);
LABEL_18:
    *(_QWORD *)(v21 + 16) = v19;
    *(_DWORD *)(v21 + 24) = 0;
    goto LABEL_19;
  }
  v24 = *(WTF::StringImpl **)v23;
  *(_QWORD *)v23 = v19;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_19:
  v25 = WTF::fastMalloc((WTF *)0x78);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v28[0];
  *(_DWORD *)v25 = 1;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_DWORD *)(v25 + 24) = 2;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = v7;
  *(_DWORD *)(v25 + 56) = 3;
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v25 + 64) = v28[0];
  *(_QWORD *)(v25 + 72) = v26;
  *(_BYTE *)(v25 + 80) = 0;
  *(_DWORD *)(v25 + 84) = 0;
  *(_DWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 104) = 0;
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 96) = 0;
  *a3 = v25;
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::commitToPasteboard(WebCore::DataTransfer *this, WebCore::Pasteboard *a2)
{
  WebCore::StaticPasteboard *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  uint64_t (***v23)();
  uint64_t (**v24)();
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t (***v30)();
  uint64_t (**v31)();
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF *v44;
  int v45;
  unsigned int v46;
  char v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = (WebCore::StaticPasteboard *)*((_QWORD *)this + 4);
  if (((*(uint64_t (**)(WebCore::StaticPasteboard *))(*(_QWORD *)v4 + 16))(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19596E0D4);
  }
  if (!*((_DWORD *)v4 + 25))
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 88))(a2);
  WebCore::StaticPasteboard::takeCustomData(v4, (uint64_t)&v43);
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_49;
  }
  if (!byte_1ECE90A55)
  {
LABEL_49:
    (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 88))(a2);
    v23 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
    v24 = off_1E33A2268;
    *v23 = off_1E33A2268;
    v23[1] = (uint64_t (**)())a2;
    if (v46)
    {
      v25 = v44;
      v26 = 32 * v46;
      do
      {
        if (!*((_DWORD *)v25 + 6))
        {
          v27 = (WTF::StringImpl *)*((_QWORD *)v25 + 2);
          if (v27)
          {
            *(_DWORD *)v27 += 2;
            v48 = v27;
            ((void (*)(uint64_t (***)(), WTF *, WTF::StringImpl **))(*v23)[2])(v23, v25, &v48);
            v29 = v48;
            v48 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v28);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
        }
        v25 = (WTF *)((char *)v25 + 32);
        v26 -= 32;
      }
      while (v26);
      v24 = *v23;
    }
    ((void (*)(uint64_t (***)()))v24[1])(v23);
    v30 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
    v31 = off_1E33A2290;
    *v30 = off_1E33A2290;
    v30[1] = (uint64_t (**)())a2;
    if (v46)
    {
      v32 = 32 * v46;
      v33 = (_QWORD *)((char *)v44 + 8);
      do
      {
        if (*v33)
          ((void (*)(uint64_t (***)(), _QWORD *, _QWORD *))(*v30)[2])(v30, v33 - 1, v33);
        v33 += 4;
        v32 -= 32;
      }
      while (v32);
      v31 = *v30;
    }
    ((void (*)(uint64_t (***)()))v31[1])(v30);
    goto LABEL_66;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = v43;
  v43 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      v6 = v43;
      if (!v43)
        goto LABEL_12;
      goto LABEL_11;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v6)
LABEL_11:
    *(_DWORD *)v6 += 2;
LABEL_12:
  v48 = v6;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v49, (uint64_t *)&v44);
  v8 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  v41 = 1;
  v40 = v8;
  v9 = v48;
  if (v48)
    *(_DWORD *)v48 += 2;
  *(_QWORD *)v8 = v9;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v8 + 8, (uint64_t *)&v49);
  v42 = 1;
  (*(void (**)(WebCore::Pasteboard *, WTF **))(*(_QWORD *)a2 + 176))(a2, &v40);
  if (v42)
  {
    v11 = (char *)v40 + 8;
    v12 = 24 * v42;
    do
    {
      WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
      v13 = (WTF::StringImpl *)*((_QWORD *)v11 - 1);
      *((_QWORD *)v11 - 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  v14 = v40;
  if (v40)
  {
    v40 = 0;
    v41 = 0;
    WTF::fastFree(v14, v10);
  }
  if (v51)
  {
    v15 = 32 * v51;
    v16 = (char *)v49 + 16;
    do
    {
      v17 = *((unsigned int *)v16 + 2);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v17])(&v47, v16);
      *((_DWORD *)v16 + 2) = -1;
      v18 = (WTF::StringImpl *)*((_QWORD *)v16 - 1);
      *((_QWORD *)v16 - 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v10);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = (WTF::StringImpl *)*((_QWORD *)v16 - 2);
      *((_QWORD *)v16 - 2) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v10);
        else
          *(_DWORD *)v19 -= 2;
      }
      v16 += 32;
      v15 -= 32;
    }
    while (v15);
  }
  v20 = v49;
  if (v49)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree(v20, v10);
  }
  v21 = v48;
  v48 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v10);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_66:
  if (v46)
  {
    v34 = 32 * v46;
    v35 = (char *)v44 + 16;
    do
    {
      v36 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v36 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v36])(&v48, v35);
      *((_DWORD *)v35 + 2) = -1;
      v37 = (WTF::StringImpl *)*((_QWORD *)v35 - 1);
      *((_QWORD *)v35 - 1) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v10);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (WTF::StringImpl *)*((_QWORD *)v35 - 2);
      *((_QWORD *)v35 - 2) = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v10);
        else
          *(_DWORD *)v38 -= 2;
      }
      v35 += 32;
      v34 -= 32;
    }
    while (v34);
  }
  v39 = v44;
  if (v44)
  {
    v44 = 0;
    v45 = 0;
    WTF::fastFree(v39, v10);
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DataTransfer::createForDrag@<X0>(WebCore::DataTransfer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = WTF::fastMalloc((WTF *)0x78);
  v6 = *((_QWORD *)this + 66);
  v7 = 0uLL;
  if (v6 && (v8 = *(_QWORD *)(v6 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0)
  {
    v10 = *(int8x16_t **)(v9 + 8);
    v11 = 0uLL;
    if (v10)
    {
      v12 = v10[2];
      v13.i64[0] = -256;
      v13.i64[1] = -256;
      v11 = vandq_s8(v12, v13);
      v14.i64[0] = 255;
      v14.i64[1] = 255;
      v7 = vandq_s8(v12, v14);
    }
  }
  else
  {
    v11 = 0uLL;
  }
  v19 = vorrq_s8(v7, v11);
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v15 = off_1E327FAB0;
  *(int8x16_t *)(v15 + 8) = v19;
  v20 = v15;
  WebCore::Pasteboard::createForDragAndDrop(&v20, &v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v21;
  v17 = v22;
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = v16;
  *(_DWORD *)(v5 + 56) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v5 + 64) = v22;
  *(_QWORD *)(v5 + 72) = v17;
  *(_BYTE *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 84) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *a2 = v5;
  result = v20;
  if (v20)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::createForDragStartEvent@<X0>(WebCore::DataTransfer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  v5 = WTF::fastMalloc((WTF *)0x78);
  v6 = WTF::fastMalloc((WTF *)0x78);
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E3407000;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 93) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v11;
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = v6;
  *(_DWORD *)(v5 + 56) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v5 + 64) = v11;
  *(_QWORD *)(v5 + 72) = v7;
  *(_BYTE *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 84) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *a2 = v5;
  WebCore::Document::originIdentifierForPasteboard(this, v8, &v11);
  result = *(WTF::StringImpl **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::createForDrop@<X0>(WebCore::Document *a1@<X0>, uint64_t *a2@<X1>, int a3@<W3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = *a2;
  *a2 = 0;
  if (a3)
    v10 = 2;
  else
    v10 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = v15;
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 2;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 56) = v10;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v8 + 64) = v15;
  *(_QWORD *)(v8 + 72) = v11;
  *(_BYTE *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 84) = 0;
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *a4 = v8;
  WebCore::DataTransfer::setSourceOperationMask(v8);
  WebCore::Document::originIdentifierForPasteboard(a1, v12, &v15);
  result = *(WTF::StringImpl **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v15;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::setSourceOperationMask(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  uint64_t v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DataTransfer::createForUpdatingDropTarget@<X0>(WebCore::Document *a1@<X0>, uint64_t *a2@<X1>, int a3@<W3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = *a2;
  *a2 = 0;
  if (a3)
    v10 = 2;
  else
    v10 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = v15;
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 3;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 56) = v10;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v8 + 64) = v15;
  *(_QWORD *)(v8 + 72) = v11;
  *(_BYTE *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 84) = 0;
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *a4 = v8;
  WebCore::DataTransfer::setSourceOperationMask(v8);
  WebCore::Document::originIdentifierForPasteboard(a1, v12, &v15);
  result = *(WTF::StringImpl **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v15;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::DataTransfer::setDragImage(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  WebCore::CachedResource *v10;
  unsigned int **v11;
  uint64_t v12;
  WebCore::CachedResource *v13;
  uint64_t v14;
  WebCore::CachedResource *v15;
  void *v16;
  WebCore::CachedResourceClient *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  WebCore::CachedResource *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;

  if ((*(_DWORD *)(a1 + 56) - 1) <= 1 && *(_DWORD *)(a1 + 24) == 1)
  {
    v35 = 0;
    v8 = *a2;
    if ((*(_WORD *)(*a2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && (*(_BYTE *)(v8 + 22) & 8) == 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 176) + 24);
      if (v9)
        v10 = *(WebCore::CachedResource **)(v9 + 8);
      else
        v10 = 0;
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v35, v10);
    }
    *(_QWORD *)(a1 + 84) = a3 | (unint64_t)(a4 << 32);
    v11 = *(unsigned int ***)(a1 + 112);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 96);
      if (v12)
      {
        v13 = *(WebCore::CachedResource **)(v12 + 8);
        if (v13)
          WebCore::CachedResource::removeClient(v13, v11);
      }
    }
    v14 = a1 + 96;
    if (v35)
      v15 = (WebCore::CachedResource *)*((_QWORD *)v35 + 1);
    else
      v15 = 0;
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 96), v15);
    if (*(_QWORD *)v14 && *(_QWORD *)(*(_QWORD *)v14 + 8))
    {
      v17 = *(WebCore::CachedResourceClient **)(a1 + 112);
      if (!v17)
      {
        v17 = (WebCore::CachedResourceClient *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v17 = off_1E33A1C08;
        *((_QWORD *)v17 + 1) = 0;
        if (!*(_QWORD *)(a1 + 8))
        {
          v19 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v19 = 1;
          *(_QWORD *)(v19 + 8) = a1;
          v20 = *(unsigned int **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v19;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v18);
            }
          }
        }
        v23 = *(unsigned int **)(a1 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        *((_QWORD *)v17 + 2) = v23;
        v25 = *(WTF **)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v17;
        if (v25)
        {
          v26 = (unsigned int *)*((_QWORD *)v25 + 2);
          *((_QWORD *)v25 + 2) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v18);
            }
          }
          *(_QWORD *)v25 = &off_1E33F87C8;
          v29 = *((_QWORD *)v25 + 1);
          if (v29)
          {
            *(_QWORD *)(v29 + 8) = 0;
            v30 = (WTF *)*((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, v18);
              else
                --*(_DWORD *)v30;
            }
          }
          else
          {
            *((_QWORD *)v25 + 1) = 0;
          }
          WTF::fastFree(v25, v18);
          v17 = *(WebCore::CachedResourceClient **)(a1 + 112);
        }
      }
      if (*(_QWORD *)v14)
        v31 = *(WebCore::CachedResource **)(*(_QWORD *)v14 + 8);
      else
        v31 = 0;
      if (WebCore::CachedResource::addClientToSet(v31, v17))
        (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v31 + 88))(v31, v17);
    }
    if (v35 && *((_QWORD *)v35 + 1))
    {
      v32 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      if (!v32)
        goto LABEL_46;
    }
    else
    {
      v33 = *a2;
      *a2 = 0;
      v32 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v33;
      if (!v32)
      {
LABEL_46:
        WebCore::DataTransfer::updateDragImage((WebCore::DataTransfer *)a1);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v35, v34);
        return;
      }
    }
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v16);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
    goto LABEL_46;
  }
}

void WebCore::DataTransfer::updateDragImage(WebCore::DataTransfer *this)
{
  void *v2;
  CFTypeRef v3;
  uint64_t v4;
  void *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint64_t v11;
  char v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  CFTypeRef v18;
  _BYTE v19[112];
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 80))
  {
    v11 = 0;
    WebCore::DataTransfer::createDragImage(this, (WebCore::IntPoint *)&v11, &cf);
    v18 = cf;
    if (cf)
    {
      CFRetain(cf);
      v3 = cf;
      v19[0] = 0;
      v20 = 0;
      v21 = 0;
      v24 = 0;
      cf = 0;
      if (v3)
        CFRelease(v3);
      v4 = *((_QWORD *)this + 4);
      WebCore::DragImage::DragImage((uint64_t)&v13, (uint64_t)&v18);
      (*(void (**)(uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)v4 + 216))(v4, &v13, &v11);
      v6 = v13;
      if (v13)
      {
        CFRetain(v13);
        CFRelease(v6);
      }
      if (v17)
      {
        if (v16 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v16])(&v12, &v15);
        v16 = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
      v7 = v13;
      v13 = 0;
      if (v7)
        CFRelease(v7);
      v8 = v18;
      if (v18)
      {
        CFRetain(v18);
        CFRelease(v8);
      }
      if (v24)
      {
        if (v23 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v23])(&v12, &v22);
        v23 = -1;
      }
    }
    else
    {
      v19[0] = 0;
      v20 = 0;
      v21 = 0;
      v24 = 0;
      cf = 0;
    }
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v2);
    v9 = v18;
    v18 = 0;
    if (v9)
      CFRelease(v9);
  }
}

void WebCore::DataTransfer::createDragImage(WebCore::DataTransfer *this@<X0>, WebCore::IntPoint *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::CachedImage *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;

  *(_QWORD *)a2 = *(_QWORD *)((char *)this + 84);
  v4 = *((_QWORD *)this + 12);
  if (v4 && (v5 = *(WebCore::CachedImage **)(v4 + 8)) != 0)
  {
    WebCore::CachedImage::protectedImage(v5, &v18);
    v6 = v18;
    WebCore::createDragImageFromImage((uint64_t)v18, 1, a3);
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 13);
    if (v7
      && (v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528)) != 0
      && (v9 = *(WebCore **)(v8 + 8)) != 0)
    {
      v10 = (unsigned int *)((char *)v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *((_QWORD *)this + 13);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      WebCore::createDragImageForNode(v9, (WebCore::LocalFrame *)v12, a3);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
      do
      {
        v14 = __ldaxr(v10);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v10));
      if (!v15)
      {
        atomic_store(1u, v10);
        v16 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v16 = off_1E31FE290;
        *(_QWORD *)(v16 + 8) = v10;
        v18 = (unsigned int *)v16;
        WTF::ensureOnMainThread();
        v17 = v18;
        v18 = 0;
        if (v17)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    else
    {
      *a3 = 0;
    }
  }
}

void WebCore::DragImageLoader::imageChanged(WebCore::DragImageLoader *this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  WebCore::DataTransfer::updateDragImage(*(WebCore::DataTransfer **)(*((_QWORD *)this + 2) + 8));
}

uint64_t WebCore::dragOpFromIEOp(WebCore *this, const WTF::String *a2)
{
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "uninitialized", 13) & 1) != 0)
    return 63;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "none", 4) & 1) != 0)
    return 0;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "copy", 4) & 1) != 0)
    return 1;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "link", 4) & 1) != 0)
    return 2;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "move", 4) & 1) != 0)
    return 20;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "copyLink", 8) & 1) != 0)
    return 3;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "copyMove", 8) & 1) != 0)
    return 21;
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "linkMove", 8) & 1) != 0)
    return 22;
  if (MEMORY[0x19AEA53F4](*(_QWORD *)this, "all", 3))
    return 63;
  return 8;
}

WTF::StringImpl *WebCore::DataTransfer::setDestinationOperationMask(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  uint64_t v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DataTransfer::setDropEffect(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  if ((*(_DWORD *)(this + 56) - 1) <= 1)
  {
    v3 = this;
    this = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "none", 4);
    if ((this & 1) != 0
      || (this = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "copy", 4), (this & 1) != 0)
      || (this = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "link", 4), (this & 1) != 0)
      || (this = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "move", 4), (_DWORD)this))
    {
      if ((*(_DWORD *)(v3 + 24) - 1) <= 2)
      {
        v5 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v5 += 2;
        this = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v3 + 64) = v5;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::DataTransfer::moveDragState(uint64_t a1, WebCore::DataTransfer **a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::CachedResource *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)*a2 + 4) + 16))(*((_QWORD *)*a2 + 4)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19596F51CLL);
  }
  WebCore::DataTransfer::commitToPasteboard(*a2, *(WebCore::Pasteboard **)(a1 + 32));
  v5 = (_DWORD *)*((_QWORD *)*a2 + 8);
  if (v5)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (_DWORD *)*((_QWORD *)*a2 + 9);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_QWORD *)(a1 + 84) = *(_QWORD *)((char *)*a2 + 84);
  v9 = *((_QWORD *)*a2 + 12);
  if (v9)
    v10 = *(WebCore::CachedResource **)(v9 + 8);
  else
    v10 = 0;
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 96), v10);
  v12 = *((_QWORD *)*a2 + 13);
  *((_QWORD *)*a2 + 13) = 0;
  result = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v12;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  v14 = *((_QWORD *)*a2 + 14);
  *((_QWORD *)*a2 + 14) = 0;
  v15 = *(WTF **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  if (v15)
  {
    v16 = (unsigned int *)*((_QWORD *)v15 + 2);
    *((_QWORD *)v15 + 2) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v11);
      }
    }
    *(_QWORD *)v15 = &off_1E33F87C8;
    v19 = *((_QWORD *)v15 + 1);
    if (v19)
    {
      *(_QWORD *)(v19 + 8) = 0;
      v20 = (WTF *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v11);
        else
          --*(_DWORD *)v20;
      }
    }
    else
    {
      *((_QWORD *)v15 + 1) = 0;
    }
    result = WTF::fastFree(v15, v11);
    v14 = *(_QWORD *)(a1 + 112);
  }
  if (v14)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = a1;
      v22 = *(unsigned int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v21;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v11);
        }
      }
    }
    v25 = *(unsigned int **)(a1 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    result = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v25;
    if (result)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)result);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)result));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v11);
      }
    }
  }
  v29 = *((_QWORD *)*a2 + 6);
  *((_QWORD *)*a2 + 6) = 0;
  v30 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;
  if (v30)
  {
    if (v30[2] == 1)
    {
      v31 = v30[7];
      if ((_DWORD)v31)
      {
        v32 = (_DWORD **)*((_QWORD *)v30 + 2);
        v33 = 8 * v31;
        do
        {
          v34 = *v32;
          *v32 = 0;
          if (v34)
          {
            if (v34[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
            else
              --v34[4];
          }
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      v35 = (WTF *)*((_QWORD *)v30 + 2);
      if (v35)
      {
        *((_QWORD *)v30 + 2) = 0;
        v30[6] = 0;
        WTF::fastFree(v35, v11);
      }
      if (*(_QWORD *)v30)
      {
        *(_QWORD *)(*(_QWORD *)v30 + 8) = 3;
        *(_QWORD *)v30 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v30, v11);
    }
    else
    {
      --v30[2];
    }
  }
  return result;
}

void WebCore::DragImageLoader::~DragImageLoader(WebCore::DragImageLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringESA_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringESA_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::XMLDocument::XMLDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  _QWORD *result;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  memset(v6, 0, 24);
  result = (_QWORD *)WebCore::Document::Document(a1, a2, a3, a4, a5 | 0x80, 0, v6);
  *result = off_1E33A22B8;
  result[24] = &unk_1E33A2608;
  result[36] = &unk_1E33A27C8;
  result[63] = &unk_1E33A27F0;
  result[64] = &unk_1E33A2818;
  result[68] = &unk_1E33A2848;
  result[69] = &unk_1E33A2870;
  return result;
}

void WebCore::XMLDocument::~XMLDocument(WebCore::XMLDocument *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::Document::canContainRangeEndPoint(WebCore::Document *this)
{
  return 1;
}

uint64_t WebCore::Document::isFrameSet(WebCore::Document *this)
{
  return 0;
}

uint64_t WebCore::Document::settingsValues(WebCore::Document *this)
{
  return *((_QWORD *)this + 85) + 232;
}

uint64_t WebCore::Document::url(WebCore::Document *this)
{
  return (uint64_t)this + 736;
}

uint64_t WebCore::Document::isJSExecutionForbidden(WebCore::Document *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::XMLDocument::~XMLDocument(WebCore::XMLDocument *this, void *a2)
{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 192), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 504), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 512), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 544), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 552), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::XMLDocument *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::Document::isJSExecutionForbidden(WebCore::Document *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::Document::url(WebCore::Document *this)
{
  return (uint64_t)this + 544;
}

uint64_t `non-virtual thunk to'WebCore::Document::settingsValues(WebCore::Document *this)
{
  return *((_QWORD *)this + 61) + 232;
}

uint64_t WebCore::PasteboardFileReader::shouldReadBuffer(WebCore::PasteboardFileReader *this, const WTF::String *a2)
{
  return 1;
}

WTF::StringImpl *WebCore::PasteboardFileTypeReader::readFilename(WebCore::PasteboardFileTypeReader *this, const WTF::String *a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11[3];
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v11[0] = 0;
  v5 = (uint64_t *)((char *)this + 8);
  v12 = 0;
  v13 = 0;
  WebCore::File::computeNameAndContentType(a2, &v13, v11, &v12, a5);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v12, v5, (uint64_t)v11);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::PasteboardFileTypeReader::readBuffer(uint64_t a1, int a2, WTF::ASCIICaseInsensitiveHash *this)
{
  _BYTE v4[24];

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(this, (uint64_t *)(a1 + 8), (uint64_t)v4);
}

uint64_t WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref(uint64_t result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(result + 8), a2);
    return WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::FixedVector<WTF::String>::FixedVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;

  if (a3)
  {
    v5 = a3;
    v7 = 8 * a3;
    v8 = (8 * a3) & 0x7FFFFFFF8;
    v9 = (_DWORD *)WTF::fastMalloc((WTF *)(v8 + 8));
    *v9 = v5;
    bzero(v9 + 2, v8);
    v14 = 0;
    *a1 = v9;
    WTF::FixedVector<WTF::String>::~FixedVector(&v14, v10);
    v11 = 0;
    v12 = -1;
    while (*(_DWORD *)*a1 > ++v12)
    {
      v13 = v11 + 8;
      WTF::String::operator=((uint64_t *)(*a1 + v11 + 8), (WTF::StringImpl **)(a2 + v11));
      v11 = v13;
      if (v7 == v13)
        return (uint64_t)a1;
    }
    result = 146;
    __break(0xC471u);
  }
  else
  {
    *a1 = 0;
    return (uint64_t)a1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataTransfer::getDataForItem(WebCore::Document &,WTF::String const&)::$_0,BOOL,WTF::String const&>::call(int a1, WebCore::Pasteboard *this)
{
  return WebCore::Pasteboard::canExposeURLToDOMWhenPasteboardContainsFiles(this, this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataTransfer::readStringFromPasteboard(WebCore::Document &,WTF::String const&,WebCore::WebContentReadingPolicy)::$_0,BOOL,WTF::String const&>::call()
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataTransfer::commitToPasteboard(WebCore::Pasteboard &)::$_0,void,WTF::String const&,WTF::String const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataTransfer::commitToPasteboard(WebCore::Pasteboard &)::$_1,void,WTF::String const&,WTF::String const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WebCore::DataTransferItem::getAsString(WTF::StringImpl *result, WebCore::Document *a2, WebCore::StringCallback **a3)
{
  WebCore::StringCallback *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  WebCore::ScriptExecutionContext *v8;
  WTF *v9;
  void *v10;
  WTF::StringImpl *v11;

  v3 = *a3;
  if (*a3)
  {
    v4 = *((_QWORD *)result + 1);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (!*((_QWORD *)result + 3))
        {
          v6 = *(int **)(*(_QWORD *)(v5 + 32) + 8);
          v7 = (*v6)++;
          if ((v6[6] - 1) <= 1)
          {
            v8 = (WebCore::Document *)((char *)a2 + 192);
            WebCore::DataTransfer::getDataForItem((WTF::StringImpl *)v6, a2, &v11);
            WebCore::StringCallback::scheduleCallback(v3, v8, &v11);
            result = v11;
            v11 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v7 = *v6 - 1;
          }
          if (v7)
          {
            *v6 = v7;
          }
          else
          {
            WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v6, a2);
            return (WTF::StringImpl *)WTF::fastFree(v9, v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DataTransferItem::getAsEntry@<X0>(uint64_t this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  bmalloc::api *v11;
  void *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(this + 8);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) - 1) <= 1
    && (v6 = *(_DWORD **)(this + 24)) != 0)
  {
    v6[4] += 2;
    v8 = bmalloc::api::isoAllocate();
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 1;
    WTF::createVersion4UUIDString((WTF *)v8);
    *(_QWORD *)(v8 + 24) = v6;
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)(v6 + 32), v9);
    WTF::WorkQueue::create();
    this = (uint64_t)WebCore::DOMFileSystem::fileAsEntry((WebCore::DOMFileSystem *)v8, a2, &v13);
    if (*(_DWORD *)(v8 + 8) == 1)
    {
      WebCore::DOMFileSystem::~DOMFileSystem((WebCore::DOMFileSystem *)v8, v10);
      this = bmalloc::api::isoDeallocate(v11, v12);
    }
    else
    {
      --*(_DWORD *)(v8 + 8);
    }
    *a3 = v13;
    if (v6[4] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void WebCore::DataTransferItemList::~DataTransferItemList(WebCore::DataTransferItemList *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  if (*((_BYTE *)this + 56))
  {
    v3 = *((unsigned int *)this + 13);
    if ((_DWORD)v3)
    {
      v4 = (WTF **)*((_QWORD *)this + 5);
      v5 = 8 * v3;
      do
      {
        v4 = WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(v4, a2)+ 1;
        v5 -= 8;
      }
      while (v5);
    }
    v6 = (WTF *)*((_QWORD *)this + 5);
    if (v6)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DataTransferItemList::~DataTransferItemList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::DataTransferItemList::ensureItems(WebCore::DataTransferItemList *this)
{
  WTF ***v1;
  WebCore::DataTransfer *v3;
  WTF::StringImpl *v4;
  WTF::String *v5;
  int v6;
  char *v7;
  WTF::String *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  WTF **v45;
  uint64_t v46;
  WTF *v47;
  uint64_t result;
  WTF *v49;
  void *v50;
  WTF ***v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  int v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;

  v1 = (WTF ***)((char *)this + 40);
  if (*((_BYTE *)this + 56))
    return (uint64_t)v1;
  v51 = (WTF ***)((char *)this + 40);
  v3 = *(WebCore::DataTransfer **)(*((_QWORD *)this + 4) + 8);
  ++*(_DWORD *)v3;
  v57 = 0;
  v58 = 0;
  WebCore::DataTransfer::types((uint64_t)v3, 0, (uint64_t)&v54);
  v5 = v54;
  if (!v56)
  {
    v6 = 0;
    v7 = 0;
LABEL_38:
    if (v5)
      goto LABEL_73;
    goto LABEL_39;
  }
  v6 = 0;
  v7 = 0;
  v8 = (WTF *)((char *)v54 + 8 * v56);
  do
  {
    WTF::String::convertToASCIILowercase(v5);
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
LABEL_6:
      if ((WTF::equal(v53, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v9) & 1) == 0
        && (WTF::equal(v53, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v10) & 1) == 0
        && !MEMORY[0x19AEA53F4](v53, "text/uri-list", 13))
      {
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    if (!byte_1ECE90A55)
      goto LABEL_6;
LABEL_9:
    v11 = *((_QWORD *)this + 3);
    if (v11)
      goto LABEL_77;
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = this;
    v13 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (!v13)
      goto LABEL_77;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
    v11 = *((_QWORD *)this + 3);
    if (v11)
    {
LABEL_77:
      do
        v16 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v16 + 1, (unsigned int *)v11));
    }
    v17 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v17 = 1;
    *((_QWORD *)v17 + 1) = v11;
    v19 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    *((_QWORD *)v17 + 2) = v19;
    *((_QWORD *)v17 + 3) = 0;
    v52 = v17;
    LODWORD(v19) = HIDWORD(v58);
    if (HIDWORD(v58) == (_DWORD)v58)
    {
      v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v57, HIDWORD(v58) + 1, (unint64_t)&v52);
      v19 = (WTF::StringImpl *)HIDWORD(v58);
      v7 = v57;
      v21 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)&v7[8 * (_QWORD)v19] = v21;
    }
    else
    {
      v7 = v57;
      v52 = 0;
      *(_QWORD *)&v57[8 * HIDWORD(v58)] = v17;
    }
    v6 = (_DWORD)v19 + 1;
    HIDWORD(v58) = (_DWORD)v19 + 1;
    WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v52, v18);
LABEL_22:
    v22 = v53;
    v53 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v4);
      else
        *(_DWORD *)v22 -= 2;
    }
    v5 = (WTF::String *)((char *)v5 + 8);
  }
  while (v5 != v8);
  v5 = v54;
  if (!v56)
    goto LABEL_38;
  v23 = 8 * v56;
  do
  {
    v24 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v4);
      else
        *(_DWORD *)v24 -= 2;
    }
    v5 = (WTF::String *)((char *)v5 + 8);
    v23 -= 8;
  }
  while (v23);
  v5 = v54;
  if (v54)
  {
LABEL_73:
    v54 = 0;
    v55 = 0;
    WTF::fastFree(v5, v4);
  }
LABEL_39:
  v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(_BYTE *)(v25 + 178))
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v26 = (_DWORD *)(v25 - 264);
    *(_DWORD *)(v25 - 264) += 2;
    v27 = WebCore::DataTransfer::files(v3, (WebCore::Document *)(v25 - 288));
    v29 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v29)
    {
      v30 = *(uint64_t **)(v27 + 16);
      v31 = &v30[v29];
      do
      {
        v32 = *((_QWORD *)this + 3);
        if (v32)
          goto LABEL_78;
        v32 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 8) = this;
        v34 = (unsigned int *)*((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v32;
        if (!v34)
          goto LABEL_78;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, v33);
        }
        v32 = *((_QWORD *)this + 3);
        if (v32)
        {
LABEL_78:
          do
            v37 = __ldaxr((unsigned int *)v32);
          while (__stlxr(v37 + 1, (unsigned int *)v32));
        }
        v38 = *v30;
        ++*(_DWORD *)(*v30 + 16);
        v39 = (WTF *)WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)v39 = 1;
        *((_QWORD *)v39 + 1) = v32;
        v41 = *(_QWORD *)(v38 + 48);
        if (v41)
          *(_DWORD *)v41 += 2;
        *((_QWORD *)v39 + 2) = v41;
        *((_QWORD *)v39 + 3) = v38;
        v54 = v39;
        LODWORD(v41) = HIDWORD(v58);
        if (HIDWORD(v58) == (_DWORD)v58)
        {
          v42 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v57, HIDWORD(v58) + 1, (unint64_t)&v54);
          v41 = HIDWORD(v58);
          v7 = v57;
          v43 = *(_QWORD *)v42;
          *(_QWORD *)v42 = 0;
          *(_QWORD *)&v7[8 * v41] = v43;
        }
        else
        {
          v7 = v57;
          v54 = 0;
          *(_QWORD *)&v57[8 * HIDWORD(v58)] = v39;
        }
        v6 = v41 + 1;
        HIDWORD(v58) = v41 + 1;
        WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v54, v40);
        ++v30;
      }
      while (v30 != v31);
    }
    if (*((_BYTE *)this + 56))
    {
      v44 = *((unsigned int *)this + 13);
      v1 = v51;
      if ((_DWORD)v44)
      {
        v45 = *v51;
        v46 = 8 * v44;
        do
        {
          v45 = WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(v45, v28)+ 1;
          v46 -= 8;
        }
        while (v46);
      }
      v47 = (WTF *)*v51;
      if (*v51)
      {
        *((_QWORD *)this + 5) = 0;
        *((_DWORD *)this + 12) = 0;
        WTF::fastFree(v47, v28);
      }
      *((_QWORD *)this + 5) = v7;
      *((_DWORD *)this + 12) = v58;
      *((_DWORD *)this + 13) = v6;
      if (!*((_BYTE *)this + 56))
      {
        __break(1u);
        goto LABEL_63;
      }
    }
    else
    {
LABEL_63:
      *((_QWORD *)this + 5) = v7;
      *((_DWORD *)this + 12) = v58;
      *((_DWORD *)this + 13) = v6;
      *((_BYTE *)this + 56) = 1;
      v1 = v51;
    }
    if (*v26 == 2)
    {
      if ((*(_WORD *)(v25 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v25 - 288), v28);
    }
    else
    {
      *v26 -= 2;
    }
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, v28);
      WTF::fastFree(v49, v50);
    }
    else
    {
      --*(_DWORD *)v3;
    }
    return (uint64_t)v1;
  }
  return result;
}

uint64_t WebCore::DataTransferItemList::add@<X0>(uint64_t this@<X0>, WebCore::Document *a2@<X1>, unsigned int **a3@<X2>, const WTF::StringImpl **a4@<X3>, uint64_t a5@<X8>)
{
  WebCore::DataTransfer *v6;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  WTF *v18;
  char v19;
  const WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  void *v38;
  WTF *v40;
  WTF::StringImpl *v41;

  v6 = *(WebCore::DataTransfer **)(*(_QWORD *)(this + 32) + 8);
  ++*(_DWORD *)v6;
  if (*((_DWORD *)v6 + 6) != 1)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 0;
    goto LABEL_44;
  }
  v9 = this;
  v10 = WebCore::DataTransferItemList::ensureItems((WebCore::DataTransferItemList *)this);
  v12 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)v10;
    for (i = 8 * v12; i; i -= 8)
    {
      v15 = *v13;
      if (*(_QWORD *)(*v13 + 24))
        v16 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v16 = 0;
      if (!v16)
      {
        v17 = *(_QWORD *)(v15 + 8);
        if (v17 && *(_QWORD *)(v17 + 8) && (v18 = *(WTF **)(v15 + 16)) != 0)
        {
          *(_DWORD *)v18 += 2;
          this = WTF::equalIgnoringASCIICase(v18, *a4, v11);
          v19 = this;
          if (*(_DWORD *)v18 == 2)
          {
            this = WTF::StringImpl::destroy(v18, a2);
            if ((v19 & 1) != 0)
            {
LABEL_18:
              *(_BYTE *)a5 = 6;
              *(_QWORD *)(a5 + 8) = 0;
              *(_DWORD *)(a5 + 16) = 1;
              goto LABEL_44;
            }
          }
          else
          {
            *(_DWORD *)v18 -= 2;
            if ((_DWORD)this)
              goto LABEL_18;
          }
        }
        else
        {
          this = WTF::equalIgnoringASCIICase(0, *a4, v11);
          if ((this & 1) != 0)
            goto LABEL_18;
        }
      }
      ++v13;
    }
  }
  WTF::String::convertToASCIILowercase((WTF::String *)a4);
  {
    if (byte_1ECE90A55)
      goto LABEL_25;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  if ((WTF::equal(v41, (const WTF::StringImpl *)WebCore::textPlainContentTypeAtomData, v20) & 1) == 0
    && (WTF::equal(v41, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v21) & 1) == 0
    && !MEMORY[0x19AEA53F4](v41, "text/uri-list", 13))
  {
    v36 = 0;
    goto LABEL_41;
  }
LABEL_25:
  this = WebCore::DataTransfer::setDataFromItemList(v6, a2, &v41, a3);
  if (!*(_BYTE *)(v9 + 56))
    goto LABEL_49;
  v22 = *(_QWORD *)(v9 + 24);
  if (v22)
    goto LABEL_31;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = v9;
  this = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v22;
  if (!this)
    goto LABEL_31;
  do
  {
    v23 = __ldaxr((unsigned int *)this);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)this));
  if (!v24)
    goto LABEL_50;
  while (1)
  {
    v22 = *(_QWORD *)(v9 + 24);
    if (v22)
    {
      do
LABEL_31:
        v25 = __ldaxr((unsigned int *)v22);
      while (__stlxr(v25 + 1, (unsigned int *)v22));
    }
    v26 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v26 = 1;
    *((_QWORD *)v26 + 1) = v22;
    v28 = v41;
    if (v41)
      *(_DWORD *)v41 += 2;
    v29 = (uint64_t *)(v9 + 40);
    *((_QWORD *)v26 + 2) = v28;
    *((_QWORD *)v26 + 3) = 0;
    v40 = v26;
    v30 = *(unsigned int *)(v9 + 52);
    if ((_DWORD)v30 == *(_DWORD *)(v9 + 48))
    {
      v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 40), v30 + 1, (unint64_t)&v40);
      v30 = *(unsigned int *)(v9 + 52);
      v32 = *(_QWORD *)(v9 + 40);
      v33 = *(_QWORD *)v31;
      *(_QWORD *)v31 = 0;
      *(_QWORD *)(v32 + 8 * v30) = v33;
    }
    else
    {
      v34 = *v29;
      v40 = 0;
      *(_QWORD *)(v34 + 8 * v30) = v26;
    }
    *(_DWORD *)(v9 + 52) = v30 + 1;
    this = (uint64_t)WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v40, v27);
    if (*(_BYTE *)(v9 + 56))
      break;
LABEL_49:
    __break(1u);
LABEL_50:
    atomic_store(1u, (unsigned int *)this);
    WTF::fastFree((WTF *)this, a2);
  }
  v35 = *(unsigned int *)(v9 + 52);
  if (!(_DWORD)v35)
  {
    __break(0xC471u);
    return this;
  }
  v36 = *(_DWORD **)(*v29 + 8 * v35 - 8);
  if (v36)
    ++*v36;
LABEL_41:
  *(_QWORD *)a5 = v36;
  *(_DWORD *)(a5 + 16) = 0;
  this = (uint64_t)v41;
  v41 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_44:
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::DataTransfer::~DataTransfer(v6, a2);
    return WTF::fastFree(v37, v38);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return this;
}

WebCore::DataTransferItemList *WebCore::DataTransferItemList::add@<X0>(WebCore::DataTransferItemList *result@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  int v5;
  _DWORD *v6;
  WebCore::DataTransferItemList *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WTF *v25;

  v4 = *(int **)(*((_QWORD *)result + 4) + 8);
  v5 = (*v4)++;
  if (v4[6] == 1)
  {
    v6 = a2;
    v7 = result;
    v8 = WebCore::DataTransferItemList::ensureItems(result);
    v9 = *((_QWORD *)v7 + 3);
    if (v9)
      goto LABEL_7;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v7;
    result = (WebCore::DataTransferItemList *)*((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 3) = v9;
    if (!result)
      goto LABEL_7;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
      goto LABEL_22;
    while (1)
    {
      v9 = *((_QWORD *)v7 + 3);
      if (v9)
      {
        do
LABEL_7:
          v12 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v12 + 1, (unsigned int *)v9));
      }
      v6 = *(_DWORD **)v6;
      ++v6[4];
      v13 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = v9;
      v15 = (_DWORD *)*((_QWORD *)v6 + 6);
      if (v15)
        *v15 += 2;
      *((_QWORD *)v13 + 2) = v15;
      *((_QWORD *)v13 + 3) = v6;
      v25 = v13;
      v16 = *(unsigned int *)(v8 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(v8 + 8))
      {
        v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v8, v16 + 1, (unint64_t)&v25);
        v16 = *(unsigned int *)(v8 + 12);
        v18 = *(char **)v8;
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)&v18[8 * v16] = v19;
      }
      else
      {
        v21 = *(char **)v8;
        v25 = 0;
        *(_QWORD *)&v21[8 * v16] = v13;
      }
      *(_DWORD *)(v8 + 12) = v16 + 1;
      WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v25, v14);
      result = (WebCore::DataTransferItemList *)WebCore::DataTransfer::didAddFileToItemList((uint64_t)v4);
      if (*((_BYTE *)v7 + 56))
        break;
      __break(1u);
LABEL_22:
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree(result, a2);
    }
    v22 = *((unsigned int *)v7 + 13);
    if (!(_DWORD)v22)
    {
      __break(0xC471u);
      return result;
    }
    v20 = *(_DWORD **)(*((_QWORD *)v7 + 5) + 8 * v22 - 8);
    ++*v20;
    v5 = *v4 - 1;
  }
  else
  {
    v20 = 0;
  }
  *a3 = v20;
  if (v5)
  {
    *v4 = v5;
  }
  else
  {
    WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v4, a2);
    return (WebCore::DataTransferItemList *)WTF::fastFree(v23, v24);
  }
  return result;
}

WTF **WebCore::DataTransferItemList::remove@<X0>(WTF **this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  WTF **v6;
  WTF **v7;
  WTF *v8;
  uint64_t (*v9)();
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF **v16;
  void *v17;
  uint64_t (*v18)();
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *v28;
  int v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WTF::StringImpl *v33[2];

  v4 = *((_QWORD *)this[4] + 1);
  ++*(_DWORD *)v4;
  if (*(_DWORD *)(v4 + 24) == 1)
  {
    v5 = a2;
    v6 = this;
    this = (WTF **)WebCore::DataTransferItemList::ensureItems((WebCore::DataTransferItemList *)this);
    if (*((_DWORD *)this + 3) <= v5)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    else
    {
      v7 = this;
      v8 = (WTF *)*((_QWORD *)*this + v5);
      ++*(_DWORD *)v8;
      v32 = v8;
      if (*((_QWORD *)v8 + 3))
        v9 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v9 = 0;
      if (!v9)
      {
        v10 = *(_QWORD *)(v4 + 32);
        v11 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
        if (v11)
        {
          v11 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
          if (v11)
          {
            v11 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
            if (v11)
              *(_DWORD *)v11 += 2;
          }
        }
        v33[0] = v11;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 96))(v10, v33);
        v12 = v33[0];
        v33[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      v13 = (unsigned int *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
        }
      }
      v16 = WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref((WTF **)*v7 + v5, a2);
      memmove(v16, v16 + 1, (WTF *)((char *)*v7 + 8 * *((unsigned int *)v7 + 3)) - (WTF *)(v16 + 1));
      --*((_DWORD *)v7 + 3);
      if (*((_QWORD *)v32 + 3))
        v18 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v18 = 0;
      if (v18)
      {
        v19 = v6[1];
        if (v19 && (v20 = *((_QWORD *)v19 + 1)) != 0)
        {
          v21 = v20 - 96;
          v22 = *(unsigned __int8 *)(v20 + 178);
          if (*(_BYTE *)(v20 + 178))
          {
            if (v22 == 1 || v22 == 2)
              ++*(_DWORD *)(v20 + 216);
          }
          else
          {
            *(_DWORD *)(v20 - 264) += 2;
          }
        }
        else
        {
          v21 = 0;
        }
        WebCore::DataTransfer::filesFromPasteboardAndItemList((WebCore::DataTransfer *)v4, (WebCore::ScriptExecutionContext *)v21, (uint64_t)v33);
        v23 = *(_QWORD *)(v4 + 48);
        v24 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v24)
        {
          v25 = *(_DWORD ***)(v23 + 16);
          v26 = 8 * v24;
          do
          {
            v27 = *v25;
            *v25 = 0;
            if (v27)
            {
              if (v27[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
              else
                --v27[4];
            }
            ++v25;
            v26 -= 8;
          }
          while (v26);
        }
        v28 = *(WTF **)(v23 + 16);
        if (v28)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          WTF::fastFree(v28, v17);
        }
        *(WTF::StringImpl **)(v23 + 16) = v33[0];
        *(WTF::StringImpl **)(v23 + 24) = v33[1];
        if (v21)
        {
          v29 = *(unsigned __int8 *)(v21 + 274);
          if (*(_BYTE *)(v21 + 274))
          {
            if (v29 == 1)
            {
              if (*(_DWORD *)(v21 + 312) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
              else
                --*(_DWORD *)(v21 + 312);
            }
            else if (v29 == 2)
            {
              WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v21 + 312));
            }
          }
          else if (*(_DWORD *)(v21 - 168) == 2)
          {
            if ((*(_WORD *)(v21 - 162) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v21 - 192), v17);
          }
          else
          {
            *(_DWORD *)(v21 - 168) -= 2;
          }
        }
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      this = WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v32, (WTF::StringImpl *)v17);
    }
  }
  else
  {
    *(_BYTE *)a3 = 8;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v4, a2);
    return (WTF **)WTF::fastFree(v30, v31);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return this;
}

unsigned int *WebCore::DataTransferItemList::clear(WebCore::DataTransferItemList *this)
{
  uint64_t v2;
  unsigned int *result;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)();
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  WTF *v26;
  void *v27;
  _QWORD v28[2];

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  ++*(_DWORD *)v2;
  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 88))(*(_QWORD *)(v2 + 32));
  if (!*((_BYTE *)this + 56))
    goto LABEL_42;
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)*((_QWORD *)this + 5);
    v8 = &v7[v5];
    do
    {
      v9 = *v7;
      if (*(_QWORD *)(*v7 + 24))
        v10 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v10 = 0;
      v11 = v10 != 0;
      result = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (result)
      {
        do
        {
          v12 = __ldaxr(result);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, result));
        if (!v13)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
        }
      }
      v6 |= v11;
      ++v7;
    }
    while (v7 != v8);
    if (*((_BYTE *)this + 56))
      goto LABEL_15;
    __break(1u);
  }
  v6 = 0;
LABEL_15:
  if (*((_DWORD *)this + 12))
  {
    v14 = *((unsigned int *)this + 13);
    result = (unsigned int *)*((_QWORD *)this + 5);
    if ((_DWORD)v14)
    {
      v15 = 8 * v14;
      do
      {
        result = (unsigned int *)(WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref((WTF **)result, (WTF::StringImpl *)v4)+ 1);
        v15 -= 8;
      }
      while (v15);
      *((_DWORD *)this + 13) = 0;
      result = (unsigned int *)*((_QWORD *)this + 5);
    }
    if (result)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  if ((v6 & 1) != 0)
  {
    v16 = *((_QWORD *)this + 1);
    if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0)
    {
      v18 = v17 - 96;
      v19 = *(unsigned __int8 *)(v17 + 178);
      if (*(_BYTE *)(v17 + 178))
      {
        if (v19 == 1 || v19 == 2)
          ++*(_DWORD *)(v17 + 216);
      }
      else
      {
        *(_DWORD *)(v17 - 264) += 2;
      }
    }
    else
    {
      v18 = 0;
    }
    WebCore::DataTransfer::filesFromPasteboardAndItemList((WebCore::DataTransfer *)v2, (WebCore::ScriptExecutionContext *)v18, (uint64_t)v28);
    v20 = *(_QWORD *)(v2 + 48);
    v21 = *(unsigned int *)(v20 + 28);
    if ((_DWORD)v21)
    {
      v22 = *(_DWORD ***)(v20 + 16);
      v23 = 8 * v21;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
        {
          if (v24[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
          else
            --v24[4];
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    result = *(unsigned int **)(v20 + 16);
    if (result)
    {
      *(_QWORD *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 24) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
    *(_QWORD *)(v20 + 16) = v28[0];
    *(_QWORD *)(v20 + 24) = v28[1];
    if (v18)
    {
      v25 = *(unsigned __int8 *)(v18 + 274);
      if (*(_BYTE *)(v18 + 274))
      {
        if (v25 == 1)
        {
          if (*(_DWORD *)(v18 + 312) == 1)
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          else
            --*(_DWORD *)(v18 + 312);
        }
        else if (v25 == 2)
        {
          result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v18 + 312));
        }
      }
      else if (*(_DWORD *)(v18 - 168) == 2)
      {
        if ((*(_WORD *)(v18 - 162) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)(v18 - 192), v4);
      }
      else
      {
        *(_DWORD *)(v18 - 168) -= 2;
      }
    }
  }
LABEL_42:
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v2, v4);
    return (unsigned int *)WTF::fastFree(v26, v27);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::DataTransferItemList::didClearStringData(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t (*v9)();
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int v13;
  uint64_t v14;
  WTF **v15;
  WTF **v16;
  uint64_t (*v17)();
  WTF **v18;
  WTF **v19;
  WTF::StringImpl *v20;

  if (*(_BYTE *)(this + 56))
  {
    v2 = this;
    if (*(_QWORD *)a2)
    {
      WTF::String::convertToASCIILowercase(a2);
      WebCore::removeStringItemOfLowercasedType(v2 + 40, v20, v3);
      this = (uint64_t)v20;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          return WTF::StringImpl::destroy(v20, v4);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    else
    {
      v5 = *(WTF ***)(this + 40);
      v6 = *(unsigned int *)(this + 52);
      if ((_DWORD)v6)
      {
        v7 = &v5[v6];
        do
        {
          v8 = *v5;
          if (*((_QWORD *)*v5 + 3))
            v9 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
          else
            v9 = 0;
          if (!v9)
          {
            this = *((_QWORD *)v8 + 1);
            *((_QWORD *)v8 + 1) = 0;
            if (this)
            {
              do
              {
                v10 = __ldaxr((unsigned int *)this);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, (unsigned int *)this));
              if (!v11)
              {
                atomic_store(1u, (unsigned int *)this);
                this = WTF::fastFree((WTF *)this, a2);
              }
            }
          }
          ++v5;
        }
        while (v5 != v7);
        v5 = *(WTF ***)(v2 + 40);
        v6 = *(unsigned int *)(v2 + 52);
        v12 = &v5[v6];
        v13 = 0;
        if ((_DWORD)v6)
        {
          v14 = *(_QWORD *)(v2 + 40);
          v15 = &v5[v6];
          v16 = v15;
          do
          {
            if (*((_QWORD *)*v5 + 3))
              v17 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
            else
              v17 = 0;
            if (!v17)
            {
              v18 = v5;
              if (v16 != (WTF **)(*(_QWORD *)(v2 + 40) + 8 * *(unsigned int *)(v2 + 52)))
              {
                if (v5 == v15)
                {
                  v18 = v16;
                }
                else
                {
                  memmove(v16, v15, v14 - (_QWORD)v15);
                  v18 = (WTF **)((char *)v16 + v14 - (_QWORD)v15);
                }
              }
              v15 = v5 + 1;
              this = (uint64_t)WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(v5, a2);
              ++v13;
              v16 = v18;
            }
            ++v5;
            v14 += 8;
          }
          while (v5 < v12);
          v5 = *(WTF ***)(v2 + 40);
          LODWORD(v6) = *(_DWORD *)(v2 + 52);
          v12 = v16;
        }
        else
        {
          v15 = &v5[v6];
        }
      }
      else
      {
        v13 = 0;
        v12 = *(WTF ***)(this + 40);
        v15 = v12;
      }
      v19 = &v5[v6];
      if (v15 != v19)
      {
        this = (uint64_t)memmove(v12, v15, (char *)v19 - (char *)v15);
        LODWORD(v6) = *(_DWORD *)(v2 + 52);
      }
      *(_DWORD *)(v2 + 52) = v6 - v13;
    }
  }
  return this;
}

uint64_t WebCore::removeStringItemOfLowercasedType(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unint64_t i;
  _QWORD *v6;
  uint64_t (*v7)();
  uint64_t v8;
  WTF *v9;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF **v15;

  v4 = result;
  if (a2)
    *(_DWORD *)a2 += 2;
  if (*(_DWORD *)(result + 12))
  {
    for (i = 0; i < *(unsigned int *)(v4 + 12); ++i)
    {
      v6 = *(_QWORD **)(*(_QWORD *)v4 + 8 * i);
      if (v6[3])
        v7 = WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>::unspecifiedBoolTypeInstance;
      else
        v7 = 0;
      if (!v7)
      {
        v8 = v6[1];
        if (v8 && *(_QWORD *)(v8 + 8) && (v9 = (WTF *)v6[2]) != 0)
        {
          *(_DWORD *)v9 += 2;
          result = WTF::equal(v9, a2, a3);
          v10 = result;
          if (*(_DWORD *)v9 == 2)
          {
            result = WTF::StringImpl::destroy(v9, a2);
            if ((v10 & 1) != 0)
              goto LABEL_21;
          }
          else
          {
            *(_DWORD *)v9 -= 2;
            if ((result & 1) != 0)
              goto LABEL_21;
          }
        }
        else
        {
          result = WTF::equal(0, a2, a3);
          if ((result & 1) != 0)
            goto LABEL_21;
        }
      }
    }
  }
  i = -1;
LABEL_21:
  if (a2)
  {
    if (*(_DWORD *)a2 == 2)
      result = WTF::StringImpl::destroy(a2, a2);
    else
      *(_DWORD *)a2 -= 2;
  }
  if (i != -1)
  {
    if (i >= *(unsigned int *)(v4 + 12))
    {
      __break(0xC471u);
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)v4 + 8 * i);
      v12 = *(unsigned int **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      v15 = WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref((WTF **)(*(_QWORD *)v4 + 8 * i), a2);
      result = (uint64_t)memmove(v15, v15 + 1, *(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 12) - (_QWORD)(v15 + 1));
      --*(_DWORD *)(v4 + 12);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DataTransferItemList::didSetStringData(WTF::StringImpl *this, const WTF::String *a2)
{
  char **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (!*((_BYTE *)this + 56))
    return this;
  v4 = this;
  v5 = (WTF::StringImpl *)WTF::String::convertToASCIILowercase(a2);
  if (!*((_BYTE *)v4 + 56))
    goto LABEL_24;
  v2 = (char **)((char *)v4 + 40);
  WTF::String::convertToASCIILowercase(a2);
  WebCore::removeStringItemOfLowercasedType((uint64_t)v4 + 40, v21, v7);
  v5 = v21;
  v21 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*((_BYTE *)v4 + 56))
  {
    v8 = *((_QWORD *)v4 + 3);
    if (v8)
      goto LABEL_12;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v4;
    v5 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = v8;
    if (!v5)
      goto LABEL_12;
    do
    {
      v9 = __ldaxr((unsigned int *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v5));
    if (v10)
      goto LABEL_11;
  }
  else
  {
LABEL_24:
    __break(1u);
  }
  atomic_store(1u, (unsigned int *)v5);
  WTF::fastFree(v5, v6);
LABEL_11:
  v8 = *((_QWORD *)v4 + 3);
  if (v8)
  {
    do
LABEL_12:
      v11 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v11 + 1, (unsigned int *)v8));
  }
  v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v12 = 1;
  *((_QWORD *)v12 + 1) = v8;
  v14 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  *((_QWORD *)v12 + 2) = v14;
  *((_QWORD *)v12 + 3) = 0;
  v21 = v12;
  v15 = *((unsigned int *)v4 + 13);
  if ((_DWORD)v15 == *((_DWORD *)v4 + 12))
  {
    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v15 + 1, (unint64_t)&v21);
    v15 = *((unsigned int *)v4 + 13);
    v17 = *((_QWORD *)v4 + 5);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v17 + 8 * v15) = v18;
  }
  else
  {
    v19 = *v2;
    v21 = 0;
    *(_QWORD *)&v19[8 * v15] = v12;
  }
  *((_DWORD *)v4 + 13) = v15 + 1;
  WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(&v21, v13);
  this = v22;
  v22 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v20);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::DatasetDOMStringMap::isSupportedPropertyName(WebCore::DatasetDOMStringMap *this, const WTF::String *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v18;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6)
    goto LABEL_16;
  if ((*(_BYTE *)(v6 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v5, (unsigned __int8 *)a2, a5, a3, a4);
  if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    goto LABEL_16;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) == 0)
  {
    if (v9 >= 0x20)
    {
      v10 = v8 + 32;
      v11 = v9 >> 5;
      goto LABEL_12;
    }
LABEL_16:
    v14 = 0;
LABEL_17:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return v14;
  }
  v11 = *(_DWORD *)(v8 + 52);
  if (!v11)
    goto LABEL_16;
  v10 = *(_QWORD *)(v8 + 40);
LABEL_12:
  if (v11 == 1)
  {
    WebCore::convertAttributeNameToPropertyName((WebCore *)&v18, (const WTF::String *)(*(_QWORD *)v10 + 24));
    v12 = v18;
    v14 = WTF::equal(v18, *(const WTF::StringImpl **)a2, v13);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    goto LABEL_17;
  }
  WebCore::convertPropertyNameToAttributeName((WTF *)&v18, *(const WTF::String **)a2);
  if (v11)
  {
    v15 = 0;
    while (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 16 * v15) + 24) != v18)
    {
      v16 = v15 + 1;
      v15 = (v15 + 1);
      if (v11 == v16)
        goto LABEL_23;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    v14 = 1;
    if (v5)
      goto LABEL_17;
  }
  else
  {
LABEL_23:
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    v14 = 0;
    if (v5)
      goto LABEL_17;
  }
  return v14;
}

WTF *WebCore::convertPropertyNameToAttributeName(WTF *this, const WTF::String *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  char v15;
  _DWORD *v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  WTF *v20;
  uint64_t v21;
  _BYTE v22[32];
  uint64_t v23;

  v2 = this;
  if (!a2)
  {
    v16 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v16 += 2;
    *(_QWORD *)this = v16;
    return this;
  }
  if ((*((_BYTE *)a2 + 16) & 4) == 0)
    return WebCore::convertPropertyNameToAttributeName<char16_t>(this, (uint64_t)a2);
  v20 = (WTF *)v22;
  v21 = 32;
  v4 = *((unsigned int *)a2 + 1);
  if (v4 >= 0x1C)
  {
    if (v4 >= 0xFFFFFFFB)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    v17 = v4 + 5;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(v4 + 5));
    LODWORD(v21) = v17;
    v20 = v7;
    v5 = HIDWORD(v21);
    v6 = v17;
  }
  else
  {
    v5 = 0;
    v6 = 32;
    v7 = (WTF *)v22;
  }
  v8 = v5 + 5;
  if (v5 + 5 > v6)
  {
    v18 = v5 + 5;
    WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)&v20, (WTF *)(v5 + 5));
    v8 = v18;
    v5 = HIDWORD(v21);
    if (v18 >= HIDWORD(v21))
    {
      v7 = v20;
      goto LABEL_6;
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x1959717A0);
  }
LABEL_6:
  v9 = (char *)v7 + v5;
  v9[4] = 45;
  *(_DWORD *)v9 = 1635017060;
  HIDWORD(v21) = v8;
  v10 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v10)
  {
    v11 = (_BYTE *)*((_QWORD *)a2 + 1);
    v12 = MEMORY[0x1E0CBF868];
    do
    {
      LOBYTE(v23) = *v11;
      if (v23 - 65 <= 0x19)
      {
        v19 = 45;
        if (HIDWORD(v21) == (_DWORD)v21)
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)&v20, &v19);
          v14 = HIDWORD(v21);
        }
        else
        {
          *((_BYTE *)v20 + HIDWORD(v21)) = 45;
          v14 = ++HIDWORD(v21);
        }
        v15 = *(_BYTE *)(v12 + v23);
        v19 = v15;
        if (v14 == (_DWORD)v21)
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char>((uint64_t)&v20, (unint64_t)&v19);
          goto LABEL_12;
        }
        *((_BYTE *)v20 + v14) = v15;
      }
      else
      {
        if (HIDWORD(v21) == (_DWORD)v21)
        {
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>((uint64_t)&v20, (unint64_t)&v23);
          goto LABEL_12;
        }
        *((_BYTE *)v20 + HIDWORD(v21)) = v23;
      }
      ++HIDWORD(v21);
LABEL_12:
      ++v11;
      --v10;
    }
    while (v10);
  }
  WTF::AtomStringImpl::add();
  *(_QWORD *)v2 = v23;
  this = v20;
  if (v22 != (_BYTE *)v20)
  {
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      return (WTF *)WTF::fastFree(this, v13);
    }
  }
  return this;
}

unsigned int *WebCore::DatasetDOMStringMap::supportedPropertyNames@<X0>(unsigned int *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 104);
  if (!v8)
    goto LABEL_36;
  if ((*(_BYTE *)(v8 + 4) & 8) != 0)
    this = (unsigned int *)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v7, a2, a6, a3, a4);
  if ((*(_WORD *)(v7 + 28) & 0x20) != 0)
    this = (unsigned int *)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v7);
  v9 = *(_QWORD *)(v7 + 104);
  if (!v9)
    goto LABEL_36;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) != 0)
  {
    v12 = *(_DWORD *)(v9 + 52);
    if (!v12)
    {
LABEL_36:
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      return this;
    }
    v11 = *(_QWORD *)(v9 + 40);
  }
  else
  {
    if (v10 < 0x20)
      goto LABEL_36;
    v11 = v9 + 32;
    v12 = v10 >> 5;
    if (!(v10 >> 5))
      goto LABEL_36;
  }
  v13 = 0;
  do
  {
    v14 = (uint64_t *)(v11 + 16 * v13);
    v15 = *v14;
    this = *(unsigned int **)(*v14 + 24);
    if (this)
    {
      this = (unsigned int *)WTF::StringImpl::startsWith();
      if ((_DWORD)this)
      {
        v16 = *(_QWORD *)(v15 + 24);
        if (v16 && (v17 = *(unsigned int *)(v16 + 4), v17 >= 6))
        {
          v18 = 5;
          while (1)
          {
            if (v18 < v17)
            {
              v19 = *(_QWORD *)(v16 + 8);
              v20 = (*(_BYTE *)(v16 + 16) & 4) != 0
                  ? *(unsigned __int8 *)(v19 + v18)
                  : *(unsigned __int16 *)(v19 + 2 * v18);
              if ((v20 - 65) < 0x1A)
                break;
            }
            if (v17 == ++v18)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          WebCore::convertAttributeNameToPropertyName((WebCore *)&v26, (const WTF::String *)(*v14 + 24));
          v21 = *(unsigned int *)(a5 + 12);
          if ((_DWORD)v21 == *(_DWORD *)(a5 + 8))
          {
            v25 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v21 + 1, (unint64_t)&v26);
            v21 = *(unsigned int *)(a5 + 12);
            v22 = *(_QWORD *)a5;
            v23 = *v25;
            *v25 = 0;
          }
          else
          {
            v22 = *(_QWORD *)a5;
            v23 = v26;
            v26 = 0;
          }
          *(_QWORD *)(v22 + 8 * v21) = v23;
          *(_DWORD *)(a5 + 12) = v21 + 1;
          this = (unsigned int *)v26;
          v26 = 0;
          if (this)
          {
            if (*this == 2)
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
            else
              *this -= 2;
          }
        }
      }
    }
    v24 = v13 + 1;
    v13 = (v13 + 1);
  }
  while (v12 != v24);
  if (v7)
    goto LABEL_36;
  return this;
}

unsigned int *WebCore::DatasetDOMStringMap::setNamedItem@<X0>(unsigned int *this@<X0>, const WTF::String *a2@<X1>, const WTF::AtomString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  WTF::String *v17;
  int32x4_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  int v23;
  char v24;

  v6 = *(_QWORD *)a2;
  if (!v6)
    goto LABEL_20;
  v7 = *(unsigned int *)(v6 + 4);
  if (!(_DWORD)v7)
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v9 + 1;
      v12 = *(_BYTE *)(v8 + v9) != 45 || v11 >= v7;
      if (!v12 && *(unsigned __int8 *)(v8 + v9 + 1) - 97 < 0x1A)
        break;
      v10 = v11 >= v7;
      ++v9;
    }
    while (v7 != v11);
  }
  else
  {
    v13 = 0;
    v10 = 0;
    do
    {
      v14 = v13 + 1;
      v15 = *(_WORD *)(v8 + 2 * v13) != 45 || v14 >= v7;
      if (!v15 && *(unsigned __int16 *)(v8 + 2 * v13 + 2) - 97 < 0x1A)
        break;
      v10 = v14 >= v7;
      ++v13;
    }
    while (v7 != v14);
  }
  if (!v10)
  {
    *(_BYTE *)a4 = 9;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
LABEL_20:
    v16 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v16 + 24) += 2;
    WebCore::convertPropertyNameToAttributeName((WTF *)&v21, (const WTF::String *)v6);
    v19 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v19 += 2;
    v22 = v19;
    v23 = 3;
    WebCore::Element::setAttribute((WebCore::Element *)v16, (WTF::AtomString *)&v21, (uint64_t)&v22, v17, a4, v18);
    if (v23 != -1)
      ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v23])(&v24, &v22);
    this = (unsigned int *)v21;
    v21 = 0;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *this -= 2;
    }
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v16, v20);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::DecodedDataDocumentParser::appendBytes(WTF::StringImpl *result, WebCore::DocumentWriter *this, const char *a3, size_t a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (!a4)
    return result;
  v7 = result;
  v8 = WebCore::DocumentWriter::decoder(this);
  WebCore::TextResourceDecoder::decode(v8, a3, a4, &v12);
  result = v12;
  if (!v12)
    return result;
  if (!*((_DWORD *)v12 + 1))
  {
    v12 = 0;
LABEL_9:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    *(_DWORD *)result -= 2;
    return result;
  }
  WebCore::DocumentWriter::reportDataReceived((unsigned int *)this, (const char *)v9);
  v11 = v12;
  v12 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v7 + 56))(v7, &v11);
  v10 = v11;
  v11 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
    goto LABEL_9;
  return result;
}

uint64_t WebCore::DeviceMotionController::didChangeDeviceMotion(WebCore::DeviceMotionController *this, WebCore::DeviceMotionData *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t result;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x48200 | (*(_QWORD *)(v6 + 608) != 0);
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = v9;
  v10 = *(_DWORD **)(v6 + 608);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)v7 = off_1E33A28E0;
  if (a2)
    ++*(_DWORD *)a2;
  *(_QWORD *)(v7 + 72) = a2;
  result = WebCore::DeviceController::dispatchDeviceEvent((uint64_t)this, (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

BOOL WebCore::DeviceMotionController::hasLastData(WebCore::DeviceMotionController *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8)) != 0;
}

uint64_t WebCore::DeviceMotionController::getLastEvent@<X0>(WebCore::DeviceMotionController *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore *v3;
  WTF **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;

  v3 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8));
  v4 = (WTF **)v3;
  if (v3)
    ++*(_DWORD *)v3;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v3);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v12 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x48200 | (*(_QWORD *)(v7 + 608) != 0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v12;
  v13 = *(_DWORD **)(v7 + 608);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v11;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = off_1E33A28E0;
  if (v4)
  {
    ++*(_DWORD *)v4;
    *(_QWORD *)(v8 + 72) = v4;
    result = (uint64_t)WTF::RefCounted<WebCore::DeviceMotionData>::deref(v4, v10);
  }
  else
  {
    *(_QWORD *)(v8 + 72) = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t WebCore::DeviceMotionData::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 32) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::DeviceMotionData::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  v13 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v13;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v14;
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v15;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a5;
  *a6 = result;
  return result;
}

void WebCore::DeviceMotionEvent::~DeviceMotionEvent(WebCore::DeviceMotionEvent *this, void *a2)
{
  WTF **v3;

  v3 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::RefCounted<WebCore::DeviceMotionData>::deref(v3, a2);
  WebCore::Event::~Event(this, a2);
}

{
  WTF **v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    WTF::RefCounted<WebCore::DeviceMotionData>::deref(v3, a2);
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

WTF **WebCore::DeviceMotionEvent::initDeviceMotionEvent(WTF **result, const WTF::AtomString *a2, int a3, int a4, __int128 *a5, __int128 *a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WTF **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if ((*((_BYTE *)result + 21) & 0x30) == 0)
  {
    v13 = result;
    WebCore::Event::initEvent((uint64_t)result, a2, a3, a4);
    if (*((_BYTE *)a5 + 48) && (*((_BYTE *)a5 + 8) || *((_BYTE *)a5 + 24) || *((_BYTE *)a5 + 40)))
    {
      v25 = a5[1];
      v28 = *a5;
      v15 = *((_QWORD *)a5 + 4);
      v16 = *((_QWORD *)a5 + 5);
      v14 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v14 = 1;
      *(_OWORD *)(v14 + 8) = v28;
      *(_OWORD *)(v14 + 24) = v25;
      *(_QWORD *)(v14 + 40) = v15;
      *(_QWORD *)(v14 + 48) = v16;
    }
    else
    {
      v14 = 0;
    }
    if (*((_BYTE *)a6 + 48) && (*((_BYTE *)a6 + 8) || *((_BYTE *)a6 + 24) || *((_BYTE *)a6 + 40)))
    {
      v26 = a6[1];
      v29 = *a6;
      v18 = *((_QWORD *)a6 + 4);
      v19 = *((_QWORD *)a6 + 5);
      v17 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v17 = 1;
      *(_OWORD *)(v17 + 8) = v29;
      *(_OWORD *)(v17 + 24) = v26;
      *(_QWORD *)(v17 + 40) = v18;
      *(_QWORD *)(v17 + 48) = v19;
    }
    else
    {
      v17 = 0;
    }
    if (*((_BYTE *)a7 + 48) && (*((_BYTE *)a7 + 8) || *((_BYTE *)a7 + 24) || *((_BYTE *)a7 + 40)))
    {
      v27 = a7[1];
      v30 = *a7;
      v21 = *((_QWORD *)a7 + 4);
      v22 = *((_QWORD *)a7 + 5);
      v20 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v20 = 1;
      *(_OWORD *)(v20 + 8) = v30;
      *(_OWORD *)(v20 + 24) = v27;
      *(_QWORD *)(v20 + 40) = v21;
      *(_QWORD *)(v20 + 48) = v22;
    }
    else
    {
      v20 = 0;
    }
    v24 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v14;
    *(_QWORD *)(v24 + 16) = v17;
    *(_QWORD *)(v24 + 24) = v20;
    *(_QWORD *)(v24 + 32) = a9;
    *(_QWORD *)(v24 + 40) = a10;
    result = (WTF **)v13[9];
    v13[9] = (WTF *)v24;
    if (result)
      return WTF::RefCounted<WebCore::DeviceMotionData>::deref(result, v23);
  }
  return result;
}

WTF::StringImpl *WebCore::DeviceMotionEvent::requestPermission(WebCore::Document *a1, uint64_t *a2)
{
  WebCore::LocalDOMWindow *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::DeviceOrientationAndMotionAccessController *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  objc_class *v26;

  v3 = (WebCore::LocalDOMWindow *)*((_QWORD *)a1 + 87);
  if (v3
    && (++*((_DWORD *)v3 + 6), (v5 = *((_QWORD *)a1 + 66)) != 0)
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && *(_QWORD *)(v7 + 8))
  {
    v24 = 0;
    if ((WebCore::LocalDOMWindow::isAllowedToUseDeviceMotion(v3, (WTF::String *)&v24) & 1) != 0)
    {
      v8 = (WebCore::DeviceOrientationAndMotionAccessController *)WebCore::Document::deviceOrientationAndMotionAccessController(a1);
      v9 = *a2;
      *a2 = 0;
      v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v10 = &off_1E33A29E8;
      *((_QWORD *)v10 + 1) = v9;
      v22 = v10;
      WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(v8, a1, &v22);
      result = v22;
      if (v22)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      v13 = v24;
    }
    else
    {
      v13 = v24;
      if (v24)
        *(_DWORD *)v24 += 2;
      v21 = v13;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Call to requestPermission() failed, reason: ", 45, (uint64_t *)&v21, 46, &v22);
      WebCore::Document::addConsoleMessage(a1, 1, 1, &v22, 0);
      v19 = v22;
      v22 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v21;
      v21 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>>(*a2, (WTF::StringImpl *)1);
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = *a2;
    LOBYTE(v22) = 8;
    v26 = 0;
    LOBYTE(v24) = 8;
    v15 = v23;
    if (v23)
      *(_DWORD *)v23 += 2;
    v25 = v15;
    WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v24, 0, &v26);
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        if (!v3)
          return result;
        goto LABEL_32;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v3)
      return result;
  }
LABEL_32:
  if (*((_DWORD *)v3 + 6) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v3 + 72))(v3);
  --*((_DWORD *)v3 + 6);
  return result;
}

uint64_t WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(WebCore::DeviceOrientationAndMotionAccessController *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  uint64_t isValidForDocument;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  WTF *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;

  v4 = a2[66];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_49;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
  {
LABEL_49:
    v37 = 1;
    goto LABEL_36;
  }
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v10 = (unsigned int *)(v5 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (WTF *)WebCore::DeviceOrientationAndMotionAccessController::accessState(a1, (const WebCore::Document *)a2);
      if ((_DWORD)v12 != 2)
      {
        result = (*(uint64_t (**)(_QWORD, WTF *))(*(_QWORD *)*a3 + 16))(*a3, v12);
        do
LABEL_42:
          v40 = __ldaxr(v10);
        while (__stlxr(v40 - 1, v10));
        if (v40 != 1)
        {
LABEL_44:
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page(v7);
            return WTF::fastFree(v41, v42);
          }
          else
          {
            --*(_DWORD *)v7;
          }
          return result;
        }
        v39 = 0;
        goto LABEL_52;
      }
      if (!WTF::isMainThread(v12))
        goto LABEL_11;
      {
        isValidForDocument = 0;
        WebCore::currentToken(void)::token = 0;
        goto LABEL_12;
      }
      if (WebCore::currentToken(void)::token
        && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
        && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
      {
        isValidForDocument = WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, (const WebCore::Document *)a2);
      }
      else
      {
LABEL_11:
        isValidForDocument = 0;
      }
LABEL_12:
      v15 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16);
      v16 = a2[66];
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
        {
          v18 = (unsigned int *)(v17 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
      }
      else
      {
        v17 = 0;
      }
      v20 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        goto LABEL_62;
      v20 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = a1;
      v21 = *(unsigned int **)a1;
      *(_QWORD *)a1 = v20;
      if (!v21)
        goto LABEL_62;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v13);
      }
      v20 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
LABEL_62:
        do
          v24 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v24 + 1, (unsigned int *)v20));
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24), (WTF::StringImpl *)v13);
      v26 = v25;
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 + 1, v25));
      v28 = *a3;
      *a3 = 0;
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v29 = off_1E33A2A40;
      v29[1] = a1;
      v29[2] = v20;
      v29[3] = v26;
      v29[4] = v28;
      v44 = v29;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v15 + 1640))(v15, v17, isValidForDocument, &v44);
      result = (uint64_t)v44;
      v44 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (v17)
      {
        v31 = (unsigned int *)(v17 + 8);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v34 = off_1E31FE290;
          v34[1] = v31;
          v44 = v34;
          WTF::ensureOnMainThread();
          result = (uint64_t)v44;
          v44 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      goto LABEL_42;
    }
  }
  v35 = (unsigned int *)(v5 + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 + 1, v35));
  v37 = 0;
LABEL_36:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 1);
  if ((v37 & 1) != 0)
    return result;
  v10 = (unsigned int *)(v5 + 8);
  do
    v38 = __ldaxr(v10);
  while (__stlxr(v38 - 1, v10));
  if (v38 != 1)
    return result;
  v7 = 0;
  v39 = 1;
LABEL_52:
  atomic_store(1u, v10);
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v43 = off_1E31FE290;
  v43[1] = v10;
  v44 = v43;
  WTF::ensureOnMainThread();
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if ((v39 & 1) == 0)
    goto LABEL_44;
  return result;
}

uint64_t WebCore::DeviceOrientationAndMotionAccessController::accessState(WebCore::DeviceOrientationAndMotionAccessController *this, const WebCore::Document *a2)
{
  const WebCore::Document *v2;
  WebCore::SecurityContext *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  WebCore::SecurityOrigin *v23;
  WebCore::SecurityOrigin *v24;
  WTF::StringImpl *v25;
  const WebCore::SecurityOrigin *v26;
  uint64_t (*v27)();
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  char *v34;
  unsigned int v36;
  unsigned int v37;
  WebCore::DeviceOrientationAndMotionAccessController *v38;
  const WebCore::Document *v39;
  WebCore::SecurityContext *v40;
  char v41;
  char *v42;

  v2 = a2;
  v4 = (const WebCore::Document *)((char *)a2 + 192);
  WebCore::SecurityContext::securityOrigin((const WebCore::Document *)((char *)a2 + 192), a2);
  v7 = *((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_27;
  v8 = v5;
  v38 = this;
  v39 = v2;
  v40 = v4;
  v9 = v5 + 8;
  v10 = *(_DWORD *)(v7 - 8);
  v11 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v5 + 8) & v10;
  v12 = v7 + 40 * v11;
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12) & 1) != 0)
  {
LABEL_22:
    this = v38;
    v2 = v39;
    v22 = *((_QWORD *)v38 + 2);
    v4 = v40;
    if (v22)
    {
      v12 = v22 + 40 * *(unsigned int *)(v22 - 4);
LABEL_24:
      v22 += 40 * *(unsigned int *)(v22 - 4);
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  v13 = 1;
  v2 = (const WebCore::Document *)&v41;
  v14 = off_1E33A2A20;
  while (1)
  {
    v15 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v15 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_53;
    }
    v42 = &v41;
    if ((((uint64_t (*)(char **, uint64_t))off_1E33A2A20[v15])(&v42, v12) & 1) != 0)
      goto LABEL_21;
    if (v12 == v9)
      break;
    v16 = *(unsigned int *)(v12 + 24);
    v17 = *(_DWORD *)(v8 + 32);
    v19 = v17 == (_DWORD)v16 && v17 != -1;
    if ((_DWORD)v16 == -1 || !v19)
    {
      v20 = v17 == -1;
      if ((_DWORD)v16 == -1)
        v21 = v20;
      else
        v21 = v19;
      if ((v21 & 1) != 0)
        goto LABEL_49;
    }
    else
    {
      v42 = &v41;
      if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v16])(&v42, v12, v9) & 1) != 0)goto LABEL_49;
    }
LABEL_21:
    v11 = (v11 + v13) & v10;
    v12 = v7 + 40 * v11;
    v13 = (v13 + 1);
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12))
      goto LABEL_22;
  }
  v12 = v9;
LABEL_49:
  this = v38;
  v22 = *((_QWORD *)v38 + 2);
  if (v22)
  {
    v2 = v39;
    v4 = v40;
    goto LABEL_24;
  }
  v2 = v39;
  v4 = v40;
LABEL_25:
  if (v22 != v12)
  {
    LOBYTE(v2) = *(_BYTE *)(v12 + 32);
    return v2;
  }
LABEL_27:
  v14 = *(uint64_t (***)())(*((_QWORD *)this + 1) + 8);
  *((_DWORD *)v14 + 6) += 2;
  if (v14 != (uint64_t (**)())v2
    && (WebCore::SecurityContext::securityOrigin(v4, v6),
        v24 = v23,
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 + 24), v25),
        !WebCore::SecurityOrigin::isSameOriginAs(v24, v26))
    || (v27 = v14[66]) == 0
    || (v28 = *((_QWORD *)v27 + 1)) == 0)
  {
LABEL_41:
    LOBYTE(v2) = 2;
    goto LABEL_42;
  }
  v12 = v28 + 8;
  do
    v29 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v29 + 1, (unsigned int *)v12));
  v13 = *(_QWORD *)(*(_QWORD *)(v28 + 280) + 88);
  if (!v13)
  {
    do
    {
LABEL_53:
      v36 = __ldaxr((unsigned int *)v12);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v12));
    if (!v37)
    {
LABEL_38:
      atomic_store(1u, (unsigned int *)v12);
      v33 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = off_1E31FE290;
      *((_QWORD *)v33 + 1) = v12;
      v42 = v33;
      WTF::ensureOnMainThread();
      v34 = v42;
      v42 = 0;
      if (v34)
        (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
      if (v13)
        goto LABEL_42;
    }
    goto LABEL_41;
  }
  v30 = *(_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v30 + 1;
  LOBYTE(v2) = *(_BYTE *)(v13 + 3512);
  if (v30)
    *(_DWORD *)(v13 + 24) = v30;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  do
  {
    v31 = __ldaxr((unsigned int *)v12);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, (unsigned int *)v12));
  if (!v32)
    goto LABEL_38;
LABEL_42:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v6);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
  return v2;
}

uint64_t WebCore::DocumentParser::asScriptableDocumentParser(WebCore::DocumentParser *this)
{
  return 0;
}

uint64_t WebCore::DocumentParser::hasInsertionPoint(WebCore::DocumentParser *this)
{
  return 1;
}

uint64_t WebCore::DocumentParser::appendSynchronously(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t WebCore::DocumentParser::processingData(WebCore::DocumentParser *this)
{
  return 0;
}

void WebCore::DeviceMotionController::~DeviceMotionController(WebCore::DeviceMotionController *this)
{
  uint64_t v1;
  void *v2;

  WebCore::DeviceController::~DeviceController(this);
  if (*(_DWORD *)(v1 + 8))
  {
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

WTF *WebCore::convertPropertyNameToAttributeName<char16_t>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  _WORD *v26;
  _WORD *v27;
  void *v28;
  WTF *result;
  __int16 v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;

  v31 = (WTF *)v33;
  v32 = 32;
  v4 = *(unsigned int *)(a2 + 4);
  if (v4 >= 0x1C)
  {
    if (v4 >= 0x7FFFFFFB)
    {
      __break(0xC471u);
      goto LABEL_41;
    }
    v8 = v4 + 5;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(2 * (v4 + 5)));
    LODWORD(v32) = v8;
    v31 = v7;
    v5 = HIDWORD(v32);
    v6 = v8;
  }
  else
  {
    v5 = 0;
    v6 = 32;
    v7 = (WTF *)v33;
  }
  v9 = v5 + 5;
  if (v5 + 5 <= v6)
    goto LABEL_14;
  v10 = v6 + (v6 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9)
    v12 = v9;
  else
    v12 = v11;
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v12);
  v5 = HIDWORD(v32);
  if (v9 < HIDWORD(v32))
  {
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x195972CD0);
  }
  v7 = v31;
LABEL_14:
  v13 = (char *)v7 + 2 * v5;
  *(_QWORD *)v13 = *(_QWORD *)L"data-";
  *((_WORD *)v13 + 4) = 45;
  v14 = v9;
  HIDWORD(v32) = v9;
  v15 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v15)
  {
    v16 = *(_WORD **)(a2 + 8);
    v17 = 2 * v15;
    do
    {
      LOWORD(v34) = *v16;
      v18 = v14;
      v19 = v32;
      if ((unsigned __int16)v34 - 65 > 0x19)
      {
        if (v14 == (_DWORD)v32)
        {
          v27 = (_WORD *)WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v14 + 1, (unint64_t)&v34);
          v14 = HIDWORD(v32) + 1;
          *((_WORD *)v31 + HIDWORD(v32)) = *v27;
        }
        else
        {
          ++v14;
          *((_WORD *)v31 + v18) = v34;
        }
      }
      else
      {
        if (v14 == (_DWORD)v32)
        {
          v20 = v14 + 1;
          v21 = v14 + ((unint64_t)v14 >> 2);
          if (v21 >= 0x10)
            v22 = v21 + 1;
          else
            v22 = 16;
          if (v22 <= v20)
            v23 = v18 + 1;
          else
            v23 = v22;
          WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v23);
          v14 = HIDWORD(v32);
          v24 = v31;
          *((_WORD *)v31 + HIDWORD(v32)) = 45;
          v19 = v32;
        }
        else
        {
          v24 = v31;
          *((_WORD *)v31 + v14) = 45;
        }
        v25 = v14 + 1;
        HIDWORD(v32) = v25;
        v30 = v34 | (32 * ((unsigned __int16)v34 - 65 < 0x1A));
        if ((_DWORD)v25 == v19)
        {
          v26 = (_WORD *)WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v25 + 1, (unint64_t)&v30);
          LODWORD(v25) = HIDWORD(v32);
          *((_WORD *)v31 + HIDWORD(v32)) = *v26;
        }
        else
        {
          *((_WORD *)v24 + v25) = v34 | (32 * ((unsigned __int16)v34 - 65 < 0x1A));
        }
        v14 = v25 + 1;
      }
      HIDWORD(v32) = v14;
      ++v16;
      v17 -= 2;
    }
    while (v17);
  }
  WTF::AtomStringImpl::add();
  *a1 = v34;
  result = v31;
  if (v33 != (_BYTE *)v31)
  {
    if (v31)
    {
      v31 = 0;
      LODWORD(v32) = 0;
      return (WTF *)WTF::fastFree(result, v28);
    }
  }
  return result;
}

void **WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(void **result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  size_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x21)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 32;
    }
    else
    {
      if (HIDWORD(v5))
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    *(_BYTE *)(*(_QWORD *)v3 + (*(_DWORD *)(v3 + 12))++) = *a2;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x21)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
    goto LABEL_12;
  }
  if (!HIDWORD(v8))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;

  result = (_BYTE *)WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 0x21)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195973070);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(uint64_t a1, unint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 2 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF **WTF::Ref<WebCore::DataTransferItem,WTF::RawPtrTraits<WebCore::DataTransferItem>,WTF::DefaultRefDerefTraits<WebCore::DataTransferItem>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  _DWORD *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (_DWORD *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v5)
      {
        if (v5[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[4];
      }
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::DeviceOrientationOrMotionPermissionState>(v6[7], a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeviceMotionEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33A29E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeviceMotionEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A29E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeviceMotionEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unsigned __int8 v8[8];
  WTF::StringImpl *v9;
  objc_class *v10;

  if ((_DWORD)a2 != 2)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>>(*(_QWORD *)(a1 + 8), a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)(a1 + 8);
  v10 = 0;
  v8[0] = 31;
  if (v7)
    *(_DWORD *)v7 += 2;
  v9 = v7;
  WebCore::DeferredPromise::reject(v3, v8, 0, &v10);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  unsigned int *v15;
  unsigned int **v16;

  v13 = 0;
  v14 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  v15 = &v12;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v12 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(WebCore::Document const&,WTF::Function<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(v11);
  }
  else
  {
    v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1E33A2A00[v1])(&v16, a1);
    v5 = v12;
    if (v14)
    {
      v10 = (v12 + v13) ^ ((v12 + v13) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(WebCore::Document const&,WTF::Function<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E33A2A40;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 3, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(WebCore::Document const&,WTF::Function<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = (uint64_t)off_1E33A2A40;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 3, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WebCore *WTF::Detail::CallableWrapper<WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(WebCore::Document const&,WTF::Function<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::call(WebCore *result, uint64_t a2)
{
  uint64_t v2;
  WebCore *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  WebCore *v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  WebCore *v57;
  WebCore *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  WebCore *v62;
  unsigned int v63;
  uint64_t *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int16 v70;
  char v71;
  unsigned int *v72;
  WebCore *v73;

  v2 = *((_QWORD *)result + 2);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 1);
  v6 = (uint64_t *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *((_QWORD *)result + 3);
  if (v7
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v6, 8u, 0), (v7 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v70 = 0;
  v71 = 0;
  v10 = *(unsigned int *)(v8 + 32);
  v72 = &v69;
  if ((_DWORD)v10 == -1)
    v11 = -1;
  else
    v11 = v10;
  v12 = (v11 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v11 - 1640531527) << 16) ^ ((unsigned __int16)v11
                                                                                             - 1640531527);
  v13 = (v11 >> 37) & 0x7FFF800 ^ ((v12 + WORD2(v11) + (v12 >> 11)) << 16) ^ (v12 + WORD2(v11) + (v12 >> 11));
  v69 = v13 + (v13 >> 11);
  if ((_DWORD)v10 == -1)
  {
LABEL_103:
    v64 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v64, v65, v66);
  }
  v68 = v8;
  v14 = v8 + 8;
  v73 = (WebCore *)&v72;
  ((void (*)(WebCore **, uint64_t))off_1E33A2A00[v10])(&v73, v8 + 8);
  v15 = v69;
  if (v71)
  {
    v63 = (v69 + v70) ^ ((v69 + v70) << 11);
    v15 = v63 + (v63 >> 17);
  }
  v16 = (v15 ^ (8 * v15)) + ((v15 ^ (8 * v15)) >> 5);
  v17 = (v16 ^ (4 * v16)) + ((v16 ^ (4 * v16)) >> 15);
  v18 = v17 ^ (v17 << 10);
  if (!v18)
    v18 = 0x800000;
  v19 = v18 & v9;
  v20 = v7 + 40 * v19;
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v20) & 1) == 0)
  {
    v67 = v5;
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = *(unsigned int *)(v20 + 24);
      if ((_DWORD)v23 == -1)
        goto LABEL_103;
      v73 = (WebCore *)&v72;
      if ((((uint64_t (*)(WebCore **, uint64_t))off_1E33A2A20[v23])(&v73, v20) & 1) != 0)
      {
        v21 = v20;
      }
      else
      {
        if (v20 == v14)
          goto LABEL_52;
        v24 = *(unsigned int *)(v20 + 24);
        v25 = *(_DWORD *)(v68 + 32);
        v27 = v25 == (_DWORD)v24 && v25 != -1;
        if ((_DWORD)v24 == -1 || !v27)
        {
          v28 = v25 == -1;
          if ((_DWORD)v24 == -1)
            v29 = v28;
          else
            v29 = v27;
          if (v29)
          {
LABEL_52:
            a2 = a2;
            *(_BYTE *)(v7 + 40 * v19 + 32) = a2;
            v5 = v67;
            goto LABEL_56;
          }
        }
        else
        {
          v73 = (WebCore *)&v72;
          if ((((uint64_t (*)(WebCore **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v24])(&v73, v20, v14) & 1) != 0)goto LABEL_52;
        }
      }
      v19 = ((_DWORD)v19 + v22) & v9;
      v20 = v7 + 40 * v19;
      ++v22;
    }
    while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v20));
    a2 = a2;
    v5 = v67;
    if (v21)
    {
      *(_BYTE *)(v21 + 32) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      --*(_DWORD *)(*v6 - 16);
      v20 = v21;
    }
  }
  v30 = *(unsigned int *)(v20 + 24);
  v31 = *(unsigned int *)(v68 + 32);
  if ((_DWORD)v30 == -1)
  {
    if ((_DWORD)v31 == -1)
      goto LABEL_42;
  }
  else if ((_DWORD)v31 == -1)
  {
    ((void (*)(WebCore **, uint64_t))off_1E33A2998[v30])(&v73, v20);
    *(_DWORD *)(v20 + 24) = -1;
    goto LABEL_42;
  }
  v73 = (WebCore *)v20;
  ((void (*)(WebCore **, uint64_t, uint64_t))off_1E33A2A68[v31])(&v73, v20, v14);
LABEL_42:
  *(_BYTE *)(v20 + 32) = a2;
  v32 = *v6;
  if (*v6)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v6;
  if (*v6)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 <= 0x400)
  {
    if (3 * v37 > 4 * v36)
      goto LABEL_56;
    if (!(_DWORD)v37)
    {
      v38 = 8;
      goto LABEL_55;
    }
LABEL_51:
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_55:
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v6, v38, v20);
    goto LABEL_56;
  }
  if (v37 <= 2 * v36)
    goto LABEL_51;
LABEL_56:
  result = (WebCore *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v4 + 4) + 16))(*((_QWORD *)v4 + 4), a2);
  v39 = *((_QWORD *)v4 + 2);
  if (!v39)
    return result;
  if ((_DWORD)a2)
    return result;
  if (!*(_QWORD *)(v39 + 8))
    return result;
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 528);
  if (!v40)
    return result;
  v41 = *(_QWORD *)(v40 + 8);
  if (!v41)
    return result;
  v42 = (unsigned int *)(v41 + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + 1, v42));
  while (1)
  {
    v44 = (unsigned int *)(v41 + 8);
    result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 128))(v41);
    if (!result)
      break;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    if (*(_BYTE *)(v41 + 144))
    {
      do
      {
        v59 = __ldaxr(v44);
        v49 = --v59 == 0;
      }
      while (__stlxr(v59, v44));
    }
    else
    {
      v46 = *(_QWORD *)(v41 + 296);
      if (v46 && (v47 = *(WebCore **)(v46 + 696)) != 0)
      {
        ++*((_DWORD *)v47 + 6);
        WebCore::LocalDOMWindow::startListeningForDeviceOrientationIfNecessary(v47);
        result = WebCore::LocalDOMWindow::startListeningForDeviceMotionIfNecessary(v47);
        if (*((_DWORD *)v47 + 6) == 1)
          result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v47 + 72))(v47);
        else
          --*((_DWORD *)v47 + 6);
      }
      else
      {
        WebCore::LocalDOMWindow::startListeningForDeviceOrientationIfNecessary(0);
        result = WebCore::LocalDOMWindow::startListeningForDeviceMotionIfNecessary(0);
      }
      do
      {
        v48 = __ldaxr(v44);
        v49 = --v48 == 0;
      }
      while (__stlxr(v48, v44));
    }
    if (v49)
    {
      atomic_store(1u, v44);
      v57 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v57 = off_1E31FE290;
      *((_QWORD *)v57 + 1) = v44;
      v73 = v57;
      WTF::ensureOnMainThread();
      result = v73;
      v73 = 0;
      if (result)
        result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
    }
    if (*(_QWORD *)(v41 + 88))
    {
      v41 = *(_QWORD *)(v41 + 88);
    }
    else
    {
      v50 = *(_QWORD *)(*(_QWORD *)(v41 + 48) + 8);
      if (!v50)
        goto LABEL_79;
      v41 = *(_QWORD *)(v41 + 72);
      if (!v41)
      {
        while (1)
        {
          v51 = *(_QWORD *)(v50 + 56);
          if (!v51)
            break;
          v50 = *(_QWORD *)(v51 + 8);
          if (!v50)
            break;
          v41 = *(_QWORD *)(v50 + 72);
          if (v41)
            goto LABEL_81;
        }
LABEL_79:
        v41 = 0;
        v52 = 1;
        goto LABEL_84;
      }
    }
LABEL_81:
    v53 = (unsigned int *)(v41 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 + 1, v53));
    v52 = 0;
    do
    {
LABEL_84:
      v55 = __ldaxr(v44);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v44));
    if (!v56)
    {
      atomic_store(1u, v44);
      v58 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = off_1E31FE290;
      *((_QWORD *)v58 + 1) = v44;
      v73 = v58;
      WTF::ensureOnMainThread();
      result = v73;
      v73 = 0;
      if (result)
        result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
    }
    if (v52)
      return result;
  }
  do
  {
    v60 = __ldaxr(v44);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v44));
  if (!v61)
  {
    atomic_store(1u, v44);
    v62 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v62 = off_1E31FE290;
    *((_QWORD *)v62 + 1) = v44;
    v73 = v62;
    WTF::ensureOnMainThread();
    result = v73;
    v73 = 0;
    if (result)
      return (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  char v33;
  char *v34;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = result + 16;
    do
    {
      *(_BYTE *)(v10 + 32) = 0;
      *(_OWORD *)v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      v10 += 40;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v28 = v5;
    v29 = v4;
    while (1)
    {
      v13 = v4 + 40 * v11;
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14 == -1)
        break;
      v34 = &v33;
      if ((((uint64_t (*)(char **, uint64_t))off_1E33A2A20[v14])(&v34, v4 + 40 * v11) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 40 * v11)))
        {
          v16 = *a1;
          v32 = v12;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WebCore::DeviceOrientationOrMotionPermissionState,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::DeviceOrientationOrMotionPermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v4 + 40 * v11);
          v19 = 0;
          while (1)
          {
            v20 = v18 & v17;
            v12 = v16 + 40 * (v18 & v17);
            v21 = *(unsigned int *)(v12 + 24);
            if ((_DWORD)v21 == -1)
              goto LABEL_35;
            v34 = &v33;
            v22 = ((uint64_t (*)(char **, uint64_t))off_1E33A2A10[v21])(&v34, v16 + 40 * v20);
            v18 = ++v19 + v20;
            if (v22)
            {
              v23 = *(unsigned int *)(v12 + 24);
              if ((_DWORD)v23 != -1)
                ((void (*)(char **, uint64_t))off_1E33A2998[v23])(&v34, v16 + 40 * v20);
              *(_BYTE *)v12 = 0;
              *(_DWORD *)(v12 + 24) = -1;
              v24 = *(unsigned int *)(v13 + 24);
              if ((_DWORD)v24 == -1)
              {
                v4 = v29;
                *(_BYTE *)(v16 + 40 * v20 + 32) = *(_BYTE *)(v29 + 40 * v11 + 32);
              }
              else
              {
                ((void (*)(char **, uint64_t, uint64_t))off_1E33A2A58[v24])(&v34, v16 + 40 * v20, v13);
                *(_DWORD *)(v12 + 24) = v24;
                v25 = *(unsigned int *)(v13 + 24);
                v4 = v29;
                *(_BYTE *)(v16 + 40 * v20 + 32) = *(_BYTE *)(v29 + 40 * v11 + 32);
                if ((_DWORD)v25 != -1)
                  ((void (*)(char **, uint64_t))off_1E33A2998[v25])(&v34, v13);
              }
              *(_DWORD *)(v13 + 24) = -1;
              if (v13 != a3)
                v12 = v32;
              v5 = v28;
              goto LABEL_30;
            }
          }
        }
        v15 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v15 != -1)
          ((void (*)(char **, uint64_t))off_1E33A2998[v15])(&v34, v4 + 40 * v11);
        *(_DWORD *)(v13 + 24) = -1;
      }
LABEL_30:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
LABEL_35:
    v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DeviceOrientationController::didChangeDeviceOrientation(v26, v27);
  }
  else if (v4)
  {
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WebCore::DeviceOrientationController::didChangeDeviceOrientation(WebCore *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t result;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(a1);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x50200 | (*(_QWORD *)(v6 + 616) != 0);
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = v9;
  v10 = *(_DWORD **)(v6 + 616);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)v7 = off_1E33A2AE0;
  if (a2)
    ++*a2;
  *(_QWORD *)(v7 + 72) = a2;
  result = WebCore::DeviceController::dispatchDeviceEvent((uint64_t)a1, (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t WebCore::DeviceOrientationData::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7;
  *(_QWORD *)(result + 64) = a8;
  *(_QWORD *)(result + 72) = a10;
  *(_QWORD *)(result + 80) = a11;
  *a9 = result;
  return result;
}

void WebCore::DeviceOrientationEvent::~DeviceOrientationEvent(WebCore::DeviceOrientationEvent *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

WTF::StringImpl *WebCore::DeviceOrientationEvent::requestPermission(WebCore::Document *a1, uint64_t *a2)
{
  WebCore::LocalDOMWindow *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::DeviceOrientationAndMotionAccessController *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  objc_class *v26;

  v3 = (WebCore::LocalDOMWindow *)*((_QWORD *)a1 + 87);
  if (v3
    && (++*((_DWORD *)v3 + 6), (v5 = *((_QWORD *)a1 + 66)) != 0)
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && *(_QWORD *)(v7 + 8))
  {
    v24 = 0;
    if ((WebCore::LocalDOMWindow::isAllowedToUseDeviceOrientation(v3, (WTF::String *)&v24) & 1) != 0)
    {
      v8 = (WebCore::DeviceOrientationAndMotionAccessController *)WebCore::Document::deviceOrientationAndMotionAccessController(a1);
      v9 = *a2;
      *a2 = 0;
      v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v10 = &off_1E33A35A8;
      *((_QWORD *)v10 + 1) = v9;
      v22 = v10;
      WebCore::DeviceOrientationAndMotionAccessController::shouldAllowAccess(v8, a1, &v22);
      result = v22;
      v22 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      v13 = v24;
    }
    else
    {
      v13 = v24;
      if (v24)
        *(_DWORD *)v24 += 2;
      v21 = v13;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Call to requestPermission() failed, reason: ", 45, (uint64_t *)&v21, 46, &v22);
      WebCore::Document::addConsoleMessage(a1, 1, 1, &v22, 0);
      v19 = v22;
      v22 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v21;
      v21 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>>(*a2, (WTF::StringImpl *)1);
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = *a2;
    LOBYTE(v22) = 8;
    v26 = 0;
    LOBYTE(v24) = 8;
    v15 = v23;
    if (v23)
      *(_DWORD *)v23 += 2;
    v25 = v15;
    WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v24, 0, &v26);
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        if (!v3)
          return result;
        goto LABEL_32;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v3)
      return result;
  }
LABEL_32:
  if (*((_DWORD *)v3 + 6) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v3 + 72))(v3);
  --*((_DWORD *)v3 + 6);
  return result;
}

uint64_t WebCore::Document::addConsoleMessage(_QWORD *a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  WebCore::StringCallback *v15;
  uint64_t v16[2];

  result = WTF::isMainThread((WTF *)a1);
  if ((result & 1) != 0)
  {
    v11 = a1[66];
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(uint64_t ***)(v13 + 8);
          if (v14)
          {
            ++*(_DWORD *)v14;
            WebCore::PageConsoleClient::addMessage(v14[99], a2, a3, (uint64_t)a4, a5, (WebCore::Document *)a1);
            result = (uint64_t)WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v14);
          }
        }
      }
    }
    v15 = (WebCore::StringCallback *)a1[365];
    if (v15)
    {
      ++*((_DWORD *)v15 + 4);
      result = WebCore::StringCallback::scheduleCallback(v15, (WebCore::ScriptExecutionContext *)(a1 + 24), a4);
      if (*((_DWORD *)v15 + 4) == 1)
        return (*(uint64_t (**)(WebCore::StringCallback *))(*(_QWORD *)v15 + 16))(v15);
      else
        --*((_DWORD *)v15 + 4);
    }
  }
  else
  {
    WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask((uint64_t)v16, a2, a3);
    WebCore::Document::postTask((uint64_t)a1, v16);
    result = v16[0];
    v16[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WebCore::Document::deviceOrientationAndMotionAccessController(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Document *v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  void *v24;
  unsigned int v25;
  WebCore::DeviceOrientationAndMotionAccessController *v26;
  WTF *v27;
  void *v28;

  while (1)
  {
    while (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
    {
      v2 = *((_QWORD *)this + 66);
      if (!v2)
        goto LABEL_36;
      v3 = *(_QWORD *)(v2 + 8);
      if (!v3)
        goto LABEL_36;
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
      if (!v4 || *(_BYTE *)(v4 + 144) != 0)
        goto LABEL_36;
      v6 = *(WebCore::Document **)(v4 + 296);
      if (!v6 || v6 == this)
        goto LABEL_36;
      v8 = 0;
LABEL_27:
      if (!v8)
      {
        v17 = *(WebCore::Document **)(v4 + 296);
        if (v17)
          this = v17;
      }
    }
    v9 = *((_QWORD *)this + 66);
    if (!v9)
      break;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      break;
    v11 = *(_QWORD *)(v10 + 120);
    if (!v11)
      break;
    v12 = *(_QWORD *)(v11 + 8);
    for (i = this; v12; v12 = *(_QWORD *)(v16 + 8))
    {
      i = *(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8);
      v14 = *((_QWORD *)i + 66);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 120);
      if (!v16)
        break;
    }
    if (i == this)
      break;
    if (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
      v8 = *(unsigned __int8 *)(v4 + 144);
      goto LABEL_27;
    }
    for (j = *(_QWORD *)(v11 + 8); j; j = *(_QWORD *)(v21 + 8))
    {
      this = *(WebCore::Document **)(*(_QWORD *)(j + 40) + 8);
      v19 = *((_QWORD *)this + 66);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 120);
      if (!v21)
        break;
    }
  }
LABEL_36:
  v22 = (_QWORD *)*((_QWORD *)this + 297);
  if (!v22)
  {
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = 0;
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 + 1, v23));
    v22[1] = v23;
    v22[2] = 0;
    v26 = (WebCore::DeviceOrientationAndMotionAccessController *)*((_QWORD *)this + 297);
    *((_QWORD *)this + 297) = v22;
    if (v26)
    {
      WebCore::DeviceOrientationAndMotionAccessController::~DeviceOrientationAndMotionAccessController(v26, v24);
      WTF::fastFree(v27, v28);
      return (_QWORD *)*((_QWORD *)this + 297);
    }
  }
  return v22;
}

void *WebCore::Document::bisoHeap(WebCore::Document *this)
{
  return &WebCore::Document::bisoHeap(void)::heap;
}

uint64_t WebCore::Document::operator new(uint64_t this)
{
  if (this == 3520)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::Document::sharedLogger(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v10;
  _QWORD v11[5];

  if (WebCore::staticSharedLogger(void)::logger)
    return WebCore::staticSharedLogger(void)::logger;
  {
    v1 = WebCore::sharedLoggerOwner(void)::owner;
  }
  else
  {
    v1 = WTF::cryptographicallyRandomNumber<unsigned int>();
    WebCore::sharedLoggerOwner(void)::owner = v1;
  }
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E335DEC0;
  *(_BYTE *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 16) = v1;
  WebCore::staticSharedLogger(void)::logger = v2;
  {
    if (WebCore::Document::allDocumentsMap(void)::documents
      && *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12))
    {
      v3 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(&WebCore::Document::allDocumentsMap(void)::documents);
      if (WebCore::Document::allDocumentsMap(void)::documents)
      {
        v5 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
        v6 = WebCore::Document::allDocumentsMap(void)::documents + 48 * v5;
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
      v11[0] = &WebCore::Document::allDocumentsMap(void)::documents;
      v11[1] = v3;
      v11[2] = v4;
      v11[3] = v6;
      v11[4] = WebCore::Document::allDocumentsMap(void)::documents + 48 * v5;
      v7 = WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WebCore::Document::configureSharedLogger(void)::$_0>(v11);
      goto LABEL_14;
    }
  }
  else
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  v7 = 0;
LABEL_14:
  {
    v8 = WebCore::sharedLoggerOwner(void)::owner;
  }
  else
  {
    v10 = v7;
    LODWORD(v8) = WTF::cryptographicallyRandomNumber<unsigned int>();
    v7 = v10;
    v8 = v8;
    WebCore::sharedLoggerOwner(void)::owner = v8;
  }
  if (*(_QWORD *)(v2 + 16) == v8)
    *(_BYTE *)(v2 + 12) = v7;
  return WebCore::staticSharedLogger(void)::logger;
}

uint64_t *WebCore::Document::allDocumentsMap(WebCore::Document *this)
{
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  return &WebCore::Document::allDocumentsMap(void)::documents;
}

uint64_t WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WebCore::Document::configureSharedLogger(void)::$_0>(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;

  v1 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[3];
  if (v1 == v2)
    return 1;
  v3 = (_QWORD *)a1[2];
  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1[4] + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(WebCore::Page **)(v6 + 8);
          if (v7)
          {
            v8 = (*(_DWORD *)v7)++;
            v9 = *((_QWORD *)v7 + 126);
            if ((v9 & 0x8000000000000000) == 0)
            {
              if (v8)
              {
                *(_DWORD *)v7 = v8;
              }
              else
              {
                WebCore::Page::~Page(v7);
                WTF::fastFree(v12, v13);
              }
              goto LABEL_10;
            }
            if (v8)
            {
              *(_DWORD *)v7 = v8;
            }
            else
            {
              WebCore::Page::~Page(v7);
              WTF::fastFree(v14, v15);
            }
            if (v9 != -1)
              return 0;
          }
        }
      }
    }
LABEL_10:
    while (1)
    {
      v1 += 6;
      if (v1 == v3)
        break;
      v10 = v1[2];
      if (*v1 | v1[1] | v10)
        v11 = v10 == -1;
      else
        v11 = 1;
      if (!v11)
        goto LABEL_15;
    }
    v1 = v3;
LABEL_15:
    if (v1 == v2)
      return 1;
  }
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(a1);
  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = v6 + 48 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *a2 = a1;
  a2[1] = result;
  a2[2] = v5;
  a2[3] = (uint64_t *)v8;
  a2[4] = (uint64_t *)(v6 + 48 * v7);
  return result;
}

uint64_t WebCore::Document::applyPendingXSLTransformsTimerFired(uint64_t this)
{
  WebCore::Node *v1;
  WTF::StringImpl *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD **v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  id **v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::Node *v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;

  if (!*(_BYTE *)(this + 3389))
  {
    v1 = (WebCore::Node *)this;
    *(_BYTE *)(this + 3438) = 0;
    this = WebCore::Style::Scope::collectXSLTransforms(*(_QWORD *)(this + 1328), &v31);
    v3 = v31;
    if (v33)
    {
      v4 = (WTF *)((char *)v31 + 8 * v33);
      while (1)
      {
        this = *((_QWORD *)v1 + 204);
        if (this)
          break;
        if (*(_QWORD *)(*(_QWORD *)v3 + 144))
        {
          v5 = *((_QWORD *)v1 + 66);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              if (!*(_BYTE *)(v6 + 604))
              {
                v26 = v4;
                v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *(_DWORD *)v7 = 1;
                v7[1] = 0;
                v8 = (_DWORD **)(v7 + 1);
                v7[2] = 0;
                v7[3] = 0;
                v9 = *(_DWORD **)(*(_QWORD *)v3 + 144);
                if (v9)
                {
                  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 120))(*(_QWORD *)(*(_QWORD *)v3 + 144)) & 1) == 0)
                  {
                    this = 105;
                    __break(0xC471u);
                    return this;
                  }
                  ++v9[2];
                  v10 = *v8;
                  *v8 = v9;
                  if (v10)
                  {
                    if (v10[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
                    else
                      --v10[2];
                  }
                }
                v29 = 0;
                v30 = 0;
                v28 = 0;
                if (WebCore::XSLTProcessor::transformToString((WebCore::XSLTProcessor *)v7, v1, &v30, &v29, &v28))
                {
                  v11 = *((_QWORD *)v1 + 66);
                  if (v11)
                  {
                    v12 = *(id ***)(v11 + 8);
                    if (v12)
                    {
                      v13 = (unsigned int *)(v12 + 1);
                      do
                        v14 = __ldaxr(v13);
                      while (__stlxr(v14 + 1, v13));
                    }
                  }
                  else
                  {
                    v12 = 0;
                  }
                  WebCore::XSLTProcessor::createDocumentFromSource(&v29, (const WTF::String *)&v28, &v30, v1, v12, &v27);
                  v15 = v27;
                  v27 = 0;
                  if (v15)
                  {
                    if (*((_DWORD *)v15 + 6) == 2)
                    {
                      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v15);
                    }
                    else
                    {
                      *((_DWORD *)v15 + 6) -= 2;
                    }
                  }
                  if (v12)
                  {
                    v16 = (unsigned int *)(v12 + 1);
                    do
                      v17 = __ldaxr(v16);
                    while (__stlxr(v17 - 1, v16));
                    if (v17 == 1)
                    {
                      atomic_store(1u, v16);
                      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v22 = off_1E31FE290;
                      v22[1] = v16;
                      v34 = v22;
                      WTF::ensureOnMainThread();
                      v23 = v34;
                      v34 = 0;
                      if (v23)
                        (*(void (**)(_QWORD *))(*v23 + 8))(v23);
                    }
                  }
                }
                v18 = v28;
                v28 = 0;
                if (v18)
                {
                  if (*(_DWORD *)v18 == 2)
                    WTF::StringImpl::destroy(v18, v2);
                  else
                    *(_DWORD *)v18 -= 2;
                }
                v19 = v29;
                v29 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, v2);
                  else
                    *(_DWORD *)v19 -= 2;
                }
                this = (uint64_t)v30;
                v30 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v2);
                  else
                    *(_DWORD *)this -= 2;
                }
                if (*(_DWORD *)v7 == 1)
                {
                  WebCore::XSLTProcessor::~XSLTProcessor((WebCore::XSLTProcessor *)v7, v2);
                  this = WTF::fastFree(v20, v21);
                }
                else
                {
                  --*(_DWORD *)v7;
                }
                v4 = v26;
                v3 = (WTF *)((char *)v3 + 8);
                if (v3 != v26)
                  continue;
              }
            }
          }
        }
        goto LABEL_51;
      }
      v24 = *(_DWORD *)(this + 24);
      *(_DWORD *)(this + 24) = v24 + 2;
      if (v24)
      {
        *(_DWORD *)(this + 24) = v24;
      }
      else if ((*(_WORD *)(this + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
LABEL_51:
      v3 = v31;
      if (v33)
      {
        v25 = 8 * v33;
        do
        {
          this = *(_QWORD *)v3;
          *(_QWORD *)v3 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 2)
            {
              if ((*(_WORD *)(this + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)this);
            }
            else
            {
              *(_DWORD *)(this + 24) -= 2;
            }
          }
          v3 = (WTF *)((char *)v3 + 8);
          v25 -= 8;
        }
        while (v25);
        v3 = v31;
      }
    }
    if (v3)
    {
      v31 = 0;
      v32 = 0;
      return WTF::fastFree(v3, v2);
    }
  }
  return this;
}

uint64_t WebCore::Document::intersectionObserversInitialUpdateTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  WTF *v6;
  void *v7;

  v1 = this;
  if ((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2032));
  }
  v2 = *(_QWORD *)(v1 + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(WebCore::Page **)(v4 + 8);
        if (v5)
        {
          ++*(_DWORD *)v5;
          this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v5, 256);
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Page::~Page(v5);
            return WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::pendingTasksTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = this;
  *(_DWORD *)(this + 24) += 2;
  v3 = *(WTF **)(this + 2440);
  v4 = *(unsigned int *)(this + 2452);
  *(_OWORD *)(this + 2440) = 0u;
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = 16 * v4;
    v7 = v3;
    do
    {
      v8 = *(_QWORD *)v7;
      v7 = (WTF *)((char *)v7 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v2 + 192);
      v6 -= 16;
    }
    while (v6);
    v9 = (uint64_t *)v3;
    do
    {
      this = *v9;
      *v9 = 0;
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      v9 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (v3)
  {
    this = WTF::fastFree(v3, a2);
    if (!v2)
      return this;
  }
  else if (!v2)
  {
    return this;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return this;
}

void WebCore::Document::visualUpdatesSuppressionTimerFired(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 66);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0 || (v3 = *(_QWORD *)(v2 + 288)) == 0 || *(_BYTE *)(v3 + 1382))
    WebCore::Document::setVisualUpdatesAllowed(this);
}

uint64_t WebCore::Document::clearSharedObjectPool(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v3;
  WebCore::ElementData **v4;
  uint64_t v5;
  WebCore::ElementData **v6;
  WebCore::ElementData *v7;

  v2 = this;
  v3 = *(WTF **)(this + 2608);
  *(_QWORD *)(this + 2608) = 0;
  if (v3)
  {
    v4 = *(WebCore::ElementData ***)v3;
    if (*(_QWORD *)v3)
    {
      v5 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v5)
      {
        v6 = *(WebCore::ElementData ***)v3;
        do
        {
          v7 = *v6;
          if (*v6 != (WebCore::ElementData *)-1)
          {
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 1)
                WebCore::ElementData::destroy(v7, a2);
              else
                --*(_DWORD *)v7;
            }
          }
          ++v6;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 2), a2);
    }
    this = WTF::fastFree(v3, a2);
  }
  if ((*(_QWORD *)(v2 + 2584) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 2552));
  return this;
}

uint64_t WebCore::Document::didAssociateFormControlsTimerFired(WebCore::Document *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13[2];
  uint64_t v14[2];
  _BYTE v15[12];
  int v16;

  v13[0] = 0;
  v13[1] = 0;
  std::exchange[abi:sn180100]<WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(v14, (uint64_t *)this + 361, v13);
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::Document::didAssociateFormControlsTimerFired(void)::$_0,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v15, (uint64_t)v14);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v14, v2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v13, v3);
  v5 = *((_QWORD *)this + 66);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(WebCore::Page **)(v7 + 8);
        if (v8)
        {
          ++*(_DWORD *)v8;
          if (v16)
          {
            v9 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 16);
            v10 = (unsigned int *)(v6 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
            v14[0] = v6;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 1408))(v9, v15);
            WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(v14);
          }
          WTF::RefCounted<WebCore::Page>::deref(v8);
        }
      }
    }
  }
  return WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v4);
}

unint64_t WebCore::Document::createNewIdentifier(WebCore::Document *this)
{
  WebCore::Document::removeFromDocumentsMap((uint64_t)this);
  WebCore::ScriptExecutionContext::regenerateIdentifier((WebCore::Document *)((char *)this + 192));
  return WebCore::Document::addToDocumentsMap((unint64_t)this);
}

void WebCore::Document::create(WebCore::Document *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t IdentifierInternal;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  unsigned __int8 *v10;
  unint64_t v12;
  int v13;
  unsigned int *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35[5];
  char v36;
  WTF::StringImpl **v37;
  uint64_t v38[6];

  v38[5] = *MEMORY[0x1E0C80C00];
  IdentifierInternal = bmalloc::api::isoAllocate();
  v6 = *((_QWORD *)this + 85);
  v35[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v35);
  memset(v38, 0, 24);
  WebCore::Document::Document(IdentifierInternal, 0, v6, (uint64_t)v35, 0, 0, v38);
  *(_QWORD *)a2 = IdentifierInternal;
  v8 = v35[0];
  v35[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl **)(IdentifierInternal + 192);
  v10 = WebCore::allScriptExecutionContextsMapLock;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  v12 = (unint64_t)&webThreadDelegateMessageScopeCount;
    goto LABEL_49;
  while (1)
  {
    v37 = v9;
    WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(IdentifierInternal + 416), (uint64_t *)&v37, (uint64_t)v35);
    v13 = __ldxr(v10);
    if (v13 != 1)
    {
      __clrex();
LABEL_13:
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
      goto LABEL_14;
    }
    if (__stlxr(0, v10))
      goto LABEL_13;
LABEL_14:
    *((_DWORD *)this + 6) += 2;
    v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    v16 = v14;
    if (v14)
    {
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 + 1, v14));
    }
    v18 = *(_QWORD *)(IdentifierInternal + 704);
    *(_QWORD *)(IdentifierInternal + 704) = v16;
    if (v18)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v18);
        v30 = *(unsigned int *)(v18 + 28);
        if ((_DWORD)v30)
        {
          v34 = v18;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v30));
          v18 = v34;
        }
        v31 = *(WTF **)(v18 + 16);
        if (v31)
        {
          *(_QWORD *)(v18 + 16) = 0;
          *(_DWORD *)(v18 + 24) = 0;
          v33 = v18;
          WTF::fastFree(v31, v15);
          v18 = v33;
        }
        WTF::fastFree((WTF *)v18, v15);
      }
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, v15);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
    v10 = *(unsigned __int8 **)a2;
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 25);
    if (v21)
      goto LABEL_22;
    if (!*((_BYTE *)this + 280))
    {
      v21 = 0;
      goto LABEL_23;
    }
    a2 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)a2 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v25 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v25 != -1)
    {
      v35[0] = (WTF::StringImpl *)&v36;
      v37 = v35;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    v12 = WebCore::Process::globalIdentifier;
    if ((WebCore::Process::globalIdentifier & 1) != 0)
      break;
    __break(1u);
LABEL_49:
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    *(_BYTE *)(v12 + 2080) = 1;
  }
  v26 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(a2 + 8) = IdentifierInternal;
  *(_QWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 32) = 1;
  v27 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v27 += 2;
  *(_QWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 54) = 0;
  *(_WORD *)(a2 + 62) = 1;
  v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  *((_QWORD *)v21 + 1) = a2;
  v29 = (uint64_t *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v21;
  if (!v29)
    goto LABEL_22;
  if (*(_DWORD *)v29 != 1)
  {
    --*(_DWORD *)v29;
LABEL_22:
    ++*(_DWORD *)v21;
    goto LABEL_23;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v29 + 1, v28);
  WTF::fastFree((WTF *)v29, v32);
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  if (v21)
    goto LABEL_22;
LABEL_23:
  v35[0] = v21;
  WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)(v10 + 192), (WTF::StringImpl *)v35);
  v23 = v35[0];
  if (v35[0])
  {
    if (*(_DWORD *)v35[0] == 1)
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v35[0] + 1, v22);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v35[0];
    }
  }
}

uint64_t WebCore::Document::createNonRenderedPlaceholder@<X0>(WebCore::Document *this@<X0>, WebCore::LocalFrame *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[6];

  v16[5] = *MEMORY[0x1E0C80C00];
  v7 = bmalloc::api::isoAllocate();
  v8 = *((_QWORD *)this + 17);
  memset(v16, 0, 24);
  v9 = WebCore::Document::Document(v7, (uint64_t)this, v8, (uint64_t)a2, 0, 2, v16);
  *a3 = v9;
  v10 = v9 + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = v10;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v7 + 416), &v15, (uint64_t)&v14);
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

uint64_t WTF::Logger::removeObserver(WTF::Logger *a1)
{
  WTF::Logger *v1;
  unsigned __int8 *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;

  v1 = a1;
  v2 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  if (__ldaxr(MEMORY[0x1E0CBF890]))
  {
    __clrex();
  }
  else if (!__stxr(1u, MEMORY[0x1E0CBF890]))
  {
    goto LABEL_5;
  }
  a1 = (WTF::Logger *)MEMORY[0x19AEA534C](MEMORY[0x1E0CBF890]);
LABEL_5:
  result = WTF::Logger::observers(a1);
  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    result = *(_QWORD *)result;
    v7 = 8 * v5 - 8;
    while (*(WTF::Logger **)result != v1)
    {
      result += 8;
      v7 -= 8;
      if (v7 == -8)
        goto LABEL_11;
    }
    result = (uint64_t)memmove((void *)result, (const void *)(result + 8), v7);
    --*(_DWORD *)(v6 + 12);
  }
LABEL_11:
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 12);
    if ((_DWORD)v3)
    {
      WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)result, (void *)(*(_QWORD *)result + 8 * v3));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::DocumentFontLoader::stopLoadingAndClearFonts(uint64_t this, void *a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  WebCore::CachedResourceLoader *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  WebCore::CSSFontSelector *v15;
  WTF *v16;
  void *v17;

  if (*(_BYTE *)(this + 81))
    return this;
  v2 = this;
  if ((*(_QWORD *)(this + 40) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 8));
  v3 = *(WebCore::Document **)(*(_QWORD *)v2 + 8);
  v4 = (WebCore::CachedResourceLoader *)*((_QWORD *)v3 + 90);
  if (!v4)
    v4 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v3, a2);
  ++*(_DWORD *)v4;
  this = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned int *)(v2 + 76);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = *(uint64_t **)(v2 + 64);
    do
    {
      v9 = *v8;
      if (*v8)
        v9 = *(_QWORD *)(v9 + 8);
      if ((*(_WORD *)(v9 + 557) & 0x4000) == 0)
      {
        v10 = *(_BYTE *)(v9 + 556) & 0x1F;
        v11 = v10 > 0xD;
        v12 = (1 << v10) & 0x2F01;
        if (v11 || v12 == 0)
          --*((_DWORD *)v4 + 22);
      }
      ++v8;
      v7 -= 8;
    }
    while (v7);
    if (!*(_DWORD *)(v2 + 72))
      goto LABEL_24;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this, a2);
      this = v14 + 8;
      v6 -= 8;
    }
    while (v6);
    *(_DWORD *)(v2 + 76) = 0;
    this = *(_QWORD *)(v2 + 64);
    goto LABEL_22;
  }
  if (*(_DWORD *)(v2 + 72))
  {
LABEL_22:
    if (this)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
LABEL_24:
  v15 = *(WebCore::CSSFontSelector **)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 2648);
  if (v15)
  {
    ++*((_DWORD *)v15 + 2);
    this = WebCore::CSSFontSelector::clearFonts(v15, a2);
    if (*((_DWORD *)v15 + 2) == 1)
      this = (*(uint64_t (**)(WebCore::CSSFontSelector *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
  }
  *(_WORD *)(v2 + 80) = 257;
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v4, a2);
    return WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return this;
}

uint64_t *std::unique_ptr<WebCore::Document::PendingScrollEventTargetList>::~unique_ptr[abi:sn180100](uint64_t *a1, WebCore::EventTarget *a2)
{
  uint64_t v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF *)WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          {
            v9 = v7;
            v10 = v6;
            WebCore::Node::removedLastRef((WebCore::Node *)v8);
            v7 = v9;
            v6 = v10;
          }
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::LazyLoadImageObserver>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WebCore::IntersectionObserver *v4;
  bmalloc::api *v6;
  void *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(WebCore::IntersectionObserver **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v4);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::Style::Update **std::unique_ptr<WebCore::Style::Update>::~unique_ptr[abi:sn180100](WebCore::Style::Update **a1, void *a2)
{
  WebCore::Style::Update *v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::Style::Update::~Update(v3, a2);
    if (*(_DWORD *)v4)
    {
      *(_QWORD *)(v4 + 80) = 0;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)v4 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v4, v5);
    }
  }
  return a1;
}

WebCore::AXObjectCache **std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](WebCore::AXObjectCache **a1)
{
  WebCore::AXObjectCache *v2;
  _DWORD *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::AXObjectCache::~AXObjectCache(v2);
    if (v3[2])
      bzero(v3, 0x318uLL);
    else
      WTF::fastFree((WTF *)v3, v4);
  }
  return a1;
}

bmalloc::api **std::unique_ptr<WebCore::DOMImplementation>::~unique_ptr[abi:sn180100](bmalloc::api **a1, void *a2)
{
  bmalloc::api *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        v12 = v3;
        atomic_store(1u, (unsigned int *)v4);
        v8 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v8)
        {
          v11 = v4;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
          v4 = v11;
        }
        v9 = *(WTF **)(v4 + 16);
        if (v9)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          v10 = v4;
          WTF::fastFree(v9, a2);
          v4 = v10;
        }
        WTF::fastFree((WTF *)v4, a2);
        v3 = v12;
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::Document::~Document(WebCore::Document *this, void *a2)
{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 192), a2);
}

{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 288), a2);
}

{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 504), a2);
}

{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 512), a2);
}

{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 544), a2);
}

{
  WebCore::Document::~Document((WebCore::Document *)((char *)this - 552), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 192), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 504), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 512), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 544), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Document::~Document((WebCore::Document *)((char *)this - 552), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::ScriptRunner *WebCore::Document::scriptRunner(WebCore::Document *this)
{
  WebCore::ScriptRunner *result;
  WebCore::ScriptRunner *v3;
  uint64_t v4;

  result = (WebCore::ScriptRunner *)*((_QWORD *)this + 199);
  if (!result)
  {
    v3 = (WebCore::ScriptRunner *)WTF::fastMalloc((WTF *)0x78);
    result = WebCore::ScriptRunner::ScriptRunner(v3, this);
    v4 = *((_QWORD *)this + 199);
    *((_QWORD *)this + 199) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (WebCore::ScriptRunner *)*((_QWORD *)this + 199);
    }
  }
  return result;
}

uint64_t WebCore::Document::ensureExtensionStyleSheets(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  WebCore::ExtensionStyleSheets *v6;
  uint64_t v7;
  void *v8;

  v2 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)v2 = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 + 1, v3));
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 157) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 133) = 0;
  v6 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = v2;
  if (v6)
  {
    WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v6, v4);
    if (*(_DWORD *)v7)
    {
      *(_QWORD *)(v7 + 160) = 0;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v7, v8);
    }
  }
  return *((_QWORD *)this + 167);
}

uint64_t WebCore::Document::ensureMarkers(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  WebCore::DocumentMarkerController *v12;
  WTF *v13;
  void *v14;

  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v6 = *(unsigned int **)(StatusReg + 736);
  if (!v6)
    v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(v2 + 72) = v6;
  *(_QWORD *)(v2 + 32) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33A3BC0;
  v8[1] = WebCore::DocumentMarkerController::fadeAnimationTimerFired;
  v8[2] = 0;
  v8[3] = v2;
  *(_QWORD *)(v2 + 80) = v8;
  *(_QWORD *)(v2 + 88) = off_1E3407128;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(v2 + 128) = v9;
  *(_QWORD *)(v2 + 88) = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33A3BC0;
  v11[1] = WebCore::DocumentMarkerController::writingToolsTextSuggestionAnimationTimerFired;
  v11[2] = 0;
  v11[3] = v2;
  *(_QWORD *)(v2 + 136) = v11;
  v12 = (WebCore::DocumentMarkerController *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = v2;
  if (v12)
  {
    WebCore::DocumentMarkerController::~DocumentMarkerController(v12);
    if (*(_DWORD *)v13)
    {
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 5) = 0u;
      *((_OWORD *)v13 + 6) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
      *((_OWORD *)v13 + 4) = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      *((_OWORD *)v13 + 2) = 0u;
      *(_OWORD *)v13 = 0u;
    }
    else
    {
      WTF::fastFree(v13, v14);
    }
  }
  return *((_QWORD *)this + 187);
}

uint64_t WebCore::Document::ensureVisitedLinkState(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF *v5;

  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v2 = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = 0;
  v5 = (WTF *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = v2;
  if (v5)
  {
    WebCore::VisitedLinkState::operator delete(v5, (void *)0x18);
    return *((_QWORD *)this + 180);
  }
  return v2;
}

void WebCore::Document::protectedTopOrigin(WebCore::Document *this@<X0>, WTF::StringImpl *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;

  WebCore::Document::topOrigin(this, a2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a3 = v4;
}

void WebCore::Document::topOrigin(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Page *v23;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 0x2000000000) != 0)
  {
    v11 = *((_QWORD *)this + 66);
    if (!v11)
    {
      WebCore::SecurityOrigin::opaqueOrigin(this);
      return;
    }
    v12 = this;
    v13 = *(_QWORD *)(v11 + 8);
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
      if (!*(_BYTE *)(v16 + 144))
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v19 = *(_QWORD *)(v16 + 296);
        if (v19)
        {
          *(_DWORD *)(v19 + 24) += 2;
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v19 + 192), a2);
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
          goto LABEL_31;
        }
        this = (WebCore::Document *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 8));
      }
    }
    v20 = *((_QWORD *)v12 + 66);
    if (v20
      && (v21 = *(_QWORD *)(v20 + 8)) != 0
      && (v22 = *(_QWORD *)(v21 + 24)) != 0
      && (v23 = *(WebCore::Page **)(v22 + 8)) != 0)
    {
      ++*(_DWORD *)v23;
      WebCore::Page::mainFrameOrigin(v23);
      WTF::RefCounted<WebCore::Page>::deref(v23);
      if (!v13)
        return;
    }
    else
    {
      WebCore::SecurityOrigin::opaqueOrigin(this);
      if (!v13)
        return;
    }
LABEL_31:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
    return;
  }
  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    while (1)
    {
      v7 = *((_QWORD *)this + 66);
      if (!v7)
        break;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 120);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 8);
      if (!v10)
        break;
      this = *(WebCore::Document **)(*(_QWORD *)(v10 + 40) + 8);
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 66);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
        if (v4)
          v5 = *(_BYTE *)(v4 + 144) == 0;
        else
          v5 = 0;
        if (v5)
        {
          v6 = *(WebCore::Document **)(v4 + 296);
          if (v6)
            this = v6;
        }
      }
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
}

void `non-virtual thunk to'WebCore::Document::topOrigin(WebCore::Document *this, WTF::StringImpl *a2)
{
  WebCore::Document::topOrigin((WebCore::Document *)((char *)this - 192), a2);
}

uint64_t WebCore::Document::cssFontSelector(WebCore::Document *this)
{
  uint64_t result;
  WebCore::CSSFontSelector *v3;
  _DWORD *v4;
  WebCore::CSSFontSelector *v5[3];
  uint64_t v6;

  result = *((_QWORD *)this + 331);
  if (!result)
  {
    WebCore::CSSFontSelector::create((WebCore::Document *)((char *)this + 192), v5);
    v3 = v5[0];
    v4 = (_DWORD *)*((_QWORD *)this + 331);
    *((WebCore::CSSFontSelector **)this + 331) = v5[0];
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        v3 = (WebCore::CSSFontSelector *)*((_QWORD *)this + 331);
      }
      else
      {
        --v4[2];
      }
    }
    v6 = (uint64_t)this + 504;
    WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add((uint64_t *)v3 + 13, &v6, (uint64_t)v5);
    return *((_QWORD *)this + 331);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::cssFontSelector(WebCore::Document *this)
{
  uint64_t result;
  uint64_t *v3;
  WebCore::CSSFontSelector *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = *((_QWORD *)this + 307);
  if (!result)
  {
    v3 = (uint64_t *)WTF::fastMalloc((WTF *)0xC0);
    v4 = WebCore::CSSFontSelector::CSSFontSelector((WebCore::CSSFontSelector *)v3, this);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v4 + 5);
    v5 = (_DWORD *)*((_QWORD *)this + 307);
    *((_QWORD *)this + 307) = v3;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v3 = (uint64_t *)*((_QWORD *)this + 307);
      }
      else
      {
        --v5[2];
      }
    }
    v7 = (uint64_t)this + 312;
    WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add(v3 + 13, &v7, (uint64_t)&v6);
    return *((_QWORD *)this + 307);
  }
  return result;
}

uint64_t WebCore::Document::ensureUndoManager(WebCore::Document *this)
{
  uint64_t result;
  void *v3;
  WebCore::UndoManager *v4;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = this;
  *(_QWORD *)(result + 24) = 0;
  v4 = (WebCore::UndoManager *)*((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = result;
  if (v4)
  {
    WTF::RefCounted<WebCore::UndoManager>::deref(v4, v3);
    return *((_QWORD *)this + 381);
  }
  return result;
}

WebCore::Editor *WebCore::Document::ensureEditor(WebCore::Editor **this)
{
  WebCore::Editor *v2;
  void *v3;
  WebCore::Editor *v4;
  uint64_t v5;
  void *v6;

  v2 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
  WebCore::Editor::Editor(v2, (WebCore::Document *)this);
  v4 = this[382];
  this[382] = v2;
  if (v4)
  {
    WebCore::Editor::~Editor(v4, v3);
    if (*(_DWORD *)v5)
    {
      *(_QWORD *)(v5 + 496) = 0;
      *(_OWORD *)(v5 + 464) = 0u;
      *(_OWORD *)(v5 + 480) = 0u;
      *(_OWORD *)(v5 + 432) = 0u;
      *(_OWORD *)(v5 + 448) = 0u;
      *(_OWORD *)(v5 + 400) = 0u;
      *(_OWORD *)(v5 + 416) = 0u;
      *(_OWORD *)(v5 + 368) = 0u;
      *(_OWORD *)(v5 + 384) = 0u;
      *(_OWORD *)(v5 + 336) = 0u;
      *(_OWORD *)(v5 + 352) = 0u;
      *(_OWORD *)(v5 + 304) = 0u;
      *(_OWORD *)(v5 + 320) = 0u;
      *(_OWORD *)(v5 + 272) = 0u;
      *(_OWORD *)(v5 + 288) = 0u;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_OWORD *)(v5 + 208) = 0u;
      *(_OWORD *)(v5 + 224) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 192) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v5, v6);
    }
  }
  return this[382];
}

WebCore::Editor *WebCore::Document::editor(WebCore::Document *this)
{
  if (*((_QWORD *)this + 382))
    return (WebCore::Editor *)*((_QWORD *)this + 382);
  else
    return WebCore::Document::ensureEditor((WebCore::Editor **)this);
}

uint64_t WebCore::Document::ensureReportingScope(WebCore::Document *this)
{
  WebCore::ScriptExecutionContext *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::ReportingScope *v5;
  bmalloc::api *v7;
  void *v8;

  v2 = (WebCore::Document *)((char *)this + 192);
  v3 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v3 + 16) = 1;
  *(_QWORD *)v3 = &off_1E33A18C0;
  *(_QWORD *)(v3 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v3, v2);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_1E33662E0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 93) = 0u;
  v5 = (WebCore::ReportingScope *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = v3;
  if (v5)
  {
    if (*((_DWORD *)v5 + 4) == 1)
    {
      WebCore::ReportingScope::~ReportingScope(v5, v4);
      bmalloc::api::isoDeallocate(v7, v8);
      return *((_QWORD *)this + 398);
    }
    else
    {
      --*((_DWORD *)v5 + 4);
    }
  }
  return v3;
}

char *WebCore::Document::setMarkupUnsafe(uint64_t a1, WebCore::Node **a2, char a3)
{
  char v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  unsigned int v22;
  char *result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WebCore::Node *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  _BYTE v50[8];
  WTF::StringImpl *v51;
  char v52;
  _QWORD v53[3];
  _BYTE v54[8];
  WTF::StringImpl *v55;
  char v56;
  _BYTE v57[8];
  WTF::StringImpl *v58;
  char v59;
  _BYTE v60[8];
  WTF::StringImpl *v61;
  char v62;
  WebCore::Node *v63;

  v5 = a3 | 1;
  *(_BYTE *)(a1 + 712) = a3 | 1;
  WebCore::Document::contentType(a1, &v63);
  v8 = WTF::equal(v63, (const WTF::StringImpl *)WebCore::textHTMLContentTypeAtomData, v6);
  v9 = v63;
  v63 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (!v8)
    goto LABEL_47;
  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x101C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  v12 = a1 + 96;
  *(_QWORD *)(v10 + 40) = a1 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v13 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v10 + 96) = v13;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33BF070;
  WebCore::ContainerNode::appendChild(a1, (WebCore::Node *)v10, (uint64_t)v60);
  if (v62)
  {
    v15 = v61;
    v61 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = bmalloc::api::isoAllocate();
  v17 = v16;
  *(_OWORD *)(v16 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v16 + 24) = 0x101C00000002;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v12;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  v18 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v16 + 96) = v18;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)v16 = off_1E33B5118;
  WebCore::ContainerNode::appendChild(v11, (WebCore::Node *)v16, (uint64_t)v57);
  if (v59)
  {
    v20 = v58;
    v58 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  *(_WORD *)(v17 + 30) |= 2u;
  v21 = *a2;
  if (!*a2)
  {
    result = 0;
    LODWORD(v26) = -1;
    v25 = 0x100000000;
    goto LABEL_27;
  }
  v22 = *((_DWORD *)v21 + 4);
  result = (char *)*((_QWORD *)v21 + 1);
  v24 = *((unsigned int *)v21 + 1);
  v25 = v24 | ((unint64_t)((v22 >> 2) & 1) << 32);
  if ((v22 & 4) != 0)
  {
    if ((_DWORD)v24)
    {
      v26 = 0;
      do
      {
        v27 = result[v26];
        v28 = v27 > 0x20;
        v29 = (1 << v27) & 0x100003600;
        if (v28 || v29 == 0)
          goto LABEL_27;
      }
      while (v24 != ++v26);
    }
LABEL_26:
    LODWORD(v26) = -1;
    goto LABEL_27;
  }
  if (!(_DWORD)v24)
    goto LABEL_26;
  v26 = 0;
  while (1)
  {
    v44 = *(unsigned __int16 *)&result[2 * v26];
    v28 = v44 > 0x20;
    v45 = (1 << v44) & 0x100003600;
    if (v28 || v45 == 0)
      break;
    if (v24 == ++v26)
      goto LABEL_26;
  }
LABEL_27:
  if (v25 <= v26)
  {
    v31 = 0x100000000;
    result = "";
  }
  else
  {
    if (!(_DWORD)v26)
    {
      v31 = v25;
      goto LABEL_30;
    }
    v31 = (v25 - v26);
    v47 = v26;
    v48 = v25 - (unint64_t)v26;
    if ((v25 & 0x100000000) != 0)
    {
      if (v48 >= v31)
      {
        result += v47;
        v31 |= 0x100000000uLL;
        goto LABEL_30;
      }
LABEL_93:
      __break(1u);
      return result;
    }
    if (v48 < v31)
      goto LABEL_93;
    result += 2 * v47;
  }
LABEL_30:
  v32 = WebCore::tryFastParsingHTMLFragment((WTF::StringImpl *)result, v31, a1, v17, v17, v5);
  v33 = v32;
  if (v32)
  {
    WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v17);
    v34 = bmalloc::api::isoAllocate();
    v35 = v34;
    *(_OWORD *)(v34 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v34 + 24) = 0x101C00000002;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 40) = v12;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    *(_QWORD *)(v34 + 80) = 0;
    *(_QWORD *)(v34 + 88) = 0;
    v36 = WebCore::HTMLNames::headTag;
    if (WebCore::HTMLNames::headTag)
      ++*(_DWORD *)WebCore::HTMLNames::headTag;
    *(_QWORD *)(v34 + 96) = v36;
    *(_QWORD *)(v34 + 104) = 0;
    *(_QWORD *)v34 = off_1E33BDFC0;
    *(_DWORD *)(v17 + 24) += 2;
    v63 = (WebCore::Node *)v17;
    WebCore::ContainerNode::insertBefore(v11, (uint64_t *)v34, &v63, (uint64_t)v54);
    if (v56)
    {
      v38 = v55;
      v55 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    result = (char *)v63;
    v63 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (char *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        result = (char *)WebCore::Node::removedLastRef((WebCore::Node *)v35);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Node::remove((WebCore::ContainerNode *)v11, v53);
    result = (char *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v53, v49);
  }
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      result = (char *)WebCore::Node::removedLastRef((WebCore::Node *)v17);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = (char *)WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if ((v33 & 1) == 0)
  {
LABEL_47:
    WebCore::Document::open(a1, 0, (uint64_t)v50);
    if (v52 && v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v39);
      else
        *(_DWORD *)v51 -= 2;
    }
    v40 = *(_DWORD **)(a1 + 728);
    if (v40)
      ++v40[2];
    v41 = *a2;
    if (*a2)
      *(_DWORD *)v41 += 2;
    v63 = v41;
    (*(void (**)(_DWORD *, WebCore::Node **))(*(_QWORD *)v40 + 64))(v40, &v63);
    v43 = v63;
    v63 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
    return WebCore::Document::close((WebCore::Document *)a1);
  }
  return result;
}

uint64_t WebCore::Document::contentType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_DWORD **)(this + 1192);
  if (v2)
    goto LABEL_16;
  v3 = *(_QWORD *)(this + 528);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (v5 = *(_QWORD *)(*(_QWORD *)(v4 + 280) + 88)) == 0
    || *(_QWORD *)(v4 + 296) != this)
  {
    v8 = *(_WORD *)(this + 3358);
    if ((v8 & 2) != 0)
    {
      v2 = (_DWORD *)WebCore::applicationXHTMLContentTypeAtomData;
      if (WebCore::applicationXHTMLContentTypeAtomData)
        goto LABEL_16;
    }
    else if ((v8 & 0x20) != 0)
    {
      v2 = (_DWORD *)WebCore::imageSVGContentTypeAtomData;
      if (WebCore::imageSVGContentTypeAtomData)
        goto LABEL_16;
    }
    else if (*(_BYTE *)(this + 3369) == 1)
    {
      v2 = (_DWORD *)WebCore::textXMLContentTypeAtomData;
      if (WebCore::textXMLContentTypeAtomData)
        goto LABEL_16;
    }
    else if ((v8 & 1) != 0)
    {
      v2 = (_DWORD *)WebCore::textHTMLContentTypeAtomData;
      if (WebCore::textHTMLContentTypeAtomData)
      {
LABEL_16:
        *v2 += 2;
        *a2 = v2;
        return this;
      }
    }
    else if (v3)
    {
      v9 = *(_QWORD *)(v3 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 88);
        if (v10)
        {
          if (*(_QWORD *)(v9 + 296) == this)
          {
            v11 = a2;
            this = WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v10 + 1272));
            a2 = v11;
            v2 = *(_DWORD **)this;
            if (*(_QWORD *)this)
              goto LABEL_16;
          }
        }
      }
    }
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_DWORD **)(v5 + 120);
  if (v7)
    *v7 += 2;
  *a2 = v7;
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_DWORD *)(v5 + 24) = v6;
  return this;
}

uint64_t WebCore::Document::open@<X0>(uint64_t this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::SecurityOrigin *v6;
  WebCore::SecurityOrigin *v7;
  WTF::StringImpl *v8;
  const WebCore::SecurityOrigin *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  const WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  WebCore::FrameLoader *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;

  v4 = this;
  if (a2)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), a2);
    v7 = v6;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), v8);
    this = WebCore::SecurityOrigin::isSameOriginAs(v7, v9);
    if ((this & 1) == 0)
    {
      *(_BYTE *)a3 = 14;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
      return this;
    }
  }
  if (*(_DWORD *)(v4 + 3340) || *(_BYTE *)(v4 + 3374))
    goto LABEL_53;
  v10 = *(_QWORD *)(v4 + 528);
  if (!v10)
    goto LABEL_21;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_21;
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *(_QWORD *)(v4 + 728);
  if (v14)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    if (v15)
    {
      v16 = (_DWORD *)v15;
      ++*(_DWORD *)(v15 + 8);
      if (!*(_BYTE *)(v15 + 12))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 160))(v15);
        if ((this & 1) != 0
          || !*((_BYTE *)v16 + 24)
          && (this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16), (this & 1) != 0))
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          if (v16[2] == 1)
          {
            this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            --v16[2];
          }
          goto LABEL_18;
        }
      }
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
  }
  v17 = *(_QWORD *)(v11 + 280);
  this = *(_QWORD *)(v17 + 24);
  if (*(_BYTE *)(this + 24))
  {
    this = WebCore::PolicyChecker::stopCheck((WebCore::PolicyChecker *)this);
    goto LABEL_67;
  }
  if (!*(_BYTE *)(v17 + 80) || (v18 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 72)) != 0 && *(double *)(v18 + 8) == 0.0)
  {
LABEL_67:
    v41 = *(_QWORD *)(v4 + 528);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 8);
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        v45 = *(_DWORD **)(v42 + 280);
        ++*v45;
        WebCore::FrameLoader::stopAllLoaders((uint64_t)v45, 1, 0);
        if (!*v45)
        {
          __break(0xC471u);
          goto LABEL_85;
        }
        --*v45;
        this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v43);
      }
    }
  }
  v19 = 1;
  do
  {
LABEL_18:
    v20 = __ldaxr(v12);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v12));
  if (!v21)
  {
    atomic_store(1u, v12);
    v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v48 = off_1E31FE290;
    *((_QWORD *)v48 + 1) = v12;
    v54 = v48;
    WTF::ensureOnMainThread();
    this = (uint64_t)v54;
    v54 = 0;
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  if (v19)
  {
LABEL_21:
    WebCore::Document::removeAllEventListeners((WebCore::Document *)v4, a2);
    if (a2 && WebCore::Document::isFullyActive((WebCore::Document *)v4))
    {
      v23 = (WTF::StringImpl *)*((_QWORD *)a2 + 92);
      if (v23)
        *(_DWORD *)v23 += 2;
      v54 = v23;
      v24 = *(_OWORD *)((char *)a2 + 760);
      v55 = *(_OWORD *)((char *)a2 + 744);
      v56 = v24;
      if (a2 == (WebCore::Document *)v4)
      {
        WebCore::Document::setURL(a2, &v54, v22);
        v46 = (WTF::StringImpl *)*((_QWORD *)a2 + 121);
        if (v46)
          *(_DWORD *)v46 += 2;
        v51 = v46;
        v47 = *((_OWORD *)a2 + 62);
        v52 = *((_OWORD *)a2 + 61);
        v53 = v47;
      }
      else
      {
        WTF::URL::removeFragmentIdentifier((WTF::URL *)&v54);
        WebCore::Document::setURL((WebCore::Document *)v4, &v54, v25);
        v26 = (WTF::StringImpl *)*((_QWORD *)a2 + 121);
        if (v26)
          *(_DWORD *)v26 += 2;
        v51 = v26;
        v27 = *((_OWORD *)a2 + 62);
        v52 = *((_OWORD *)a2 + 61);
        v53 = v27;
        WTF::URL::removeFragmentIdentifier((WTF::URL *)&v51);
      }
      WebCore::Document::setCookieURL((WebCore::Document *)v4, (const WTF::URL *)&v51, v28);
      v29 = (_DWORD *)WebCore::SecurityContext::securityOriginPolicy((WebCore::Document *)((char *)a2 + 192));
      if (v29)
        ++*v29;
      v50 = v29;
      WebCore::SecurityContext::setSecurityOriginPolicy(v4 + 192, (WTF::StringImpl *)&v50);
      if (v50)
        WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref((uint64_t)v50, v30);
      v31 = v51;
      v51 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v54;
      v54 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v30);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    WebCore::Document::implicitOpen((WebCore::Document *)v4);
    this = *(_QWORD *)(v4 + 728);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
      if (this)
      {
        v33 = *(_DWORD *)(this + 8);
        *(_DWORD *)(this + 8) = v33 + 1;
        *(_BYTE *)(this + 24) = 1;
        if (v33)
          *(_DWORD *)(this + 8) = v33;
        else
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
    v34 = *(_QWORD *)(v4 + 528);
    if (!v34)
      goto LABEL_53;
    v35 = *(_QWORD *)(v34 + 8);
    if (!v35)
      goto LABEL_53;
    v36 = (unsigned int *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v38 = *(WebCore::FrameLoader **)(v35 + 280);
    ++*(_DWORD *)v38;
    if ((*((_DWORD *)v38 + 16) - 1) <= 1)
      *((_DWORD *)v38 + 16) = 3;
    this = (uint64_t)WebCore::FrameLoader::didExplicitOpen(v38);
    if (*(_DWORD *)v38)
    {
      --*(_DWORD *)v38;
      do
      {
        v39 = __ldaxr(v36);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v36));
      if (!v40)
      {
        atomic_store(1u, v36);
        v49 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v49 = off_1E31FE290;
        *((_QWORD *)v49 + 1) = v36;
        v54 = v49;
        WTF::ensureOnMainThread();
        this = (uint64_t)v54;
        v54 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
LABEL_53:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return this;
    }
    __break(0xC471u);
LABEL_85:
    JUMPOUT(0x195976E3CLL);
  }
  return this;
}

_BYTE *WebCore::Document::close(WebCore::Document *this)
{
  _BYTE *result;
  _DWORD *v3;
  uint64_t v4;

  result = (_BYTE *)*((_QWORD *)this + 91);
  if (result)
  {
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
    if (result)
    {
      result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 16))(*((_QWORD *)this + 91));
      if (result[24])
      {
        result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 16))(*((_QWORD *)this + 91));
        if (!result[12])
        {
          v3 = (_DWORD *)*((_QWORD *)this + 91);
          if (v3)
          {
            ++v3[2];
            (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
            if (v3[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
            else
              --v3[2];
          }
          v4 = *((_QWORD *)this + 66);
          if (v4 && *(_QWORD *)(v4 + 8))
          {
            return (_BYTE *)WebCore::Document::checkCompleted((uint64_t)this);
          }
          else
          {
            WebCore::Document::setReadyState((os_signpost_id_t)this, 2);
            return (_BYTE *)WebCore::Document::implicitClose(this);
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Document::parseHTMLUnsafe@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27[5];
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(_QWORD *)(v6 + 704);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v6 = v8;
  }
  v9 = (WTF::StringImpl *)(v6 + 192);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27[0] = v9;
  v27[1] = (WTF::StringImpl *)&v31;
  v10 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_46;
  *(_QWORD *)&v32 = v27;
  ((void (*)(WTF::StringImpl **__return_ptr, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore26trustedTypeCompliantStringERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_11TrustedHTMLENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENS6_6StringEEEERKSJ_E3__0JZNS8_26trustedTypeCompliantStringESA_SL_SN_E3__1EEEEEJNS0_6__implIJSI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v28, &v32, a2);
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  if (v30)
  {
    if (v30 == 1)
    {
      v13 = v29;
      v29 = 0;
      *(_BYTE *)a3 = (_BYTE)v28;
      *(_QWORD *)(a3 + 8) = v13;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_36;
    }
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v14 = *(_DWORD **)(a1 + 680);
  ++v14[57];
  v27[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  v33 = 0;
  v32 = 0u;
  v15 = bmalloc::api::isoAllocate();
  v16 = WebCore::Document::Document(v15, 0, (uint64_t)v14, (uint64_t)v27, 1, 0, (uint64_t *)&v32);
  *(_QWORD *)v16 = off_1E33BA1B0;
  *(_QWORD *)(v16 + 192) = &unk_1E33BA500;
  v18 = (WTF::StringImpl *)(v16 + 192);
  *(_QWORD *)(v16 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v16 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v16 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v16 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v16 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v16 + 3512) = 0u;
  v19 = *(WTF::StringImpl **)(v16 + 1704);
  *(_QWORD *)(v15 + 1704) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_18:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v31 = v18;
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v15 + 416), (uint64_t *)&v31, (uint64_t)&v32);
  v22 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v23 = v27[0];
  v27[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v14[57] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
  else
    --v14[57];
  if (v30)
    goto LABEL_46;
  v24 = v28;
  v28 = 0;
  v27[0] = v24;
  result = (WTF::StringImpl *)WebCore::Document::setMarkupUnsafe(v15, v27, 4);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  v26 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v26 + 2;
  *(_QWORD *)a3 = v15;
  *(_DWORD *)(a3 + 16) = 0;
  if (v26)
  {
    *(_DWORD *)(v15 + 24) = v26;
  }
  else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
  {
    result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v15, v25);
  }
LABEL_36:
  if (v30 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33A33B0[v30])(v27, &v28);
  return result;
}

uint64_t WebCore::Document::protectedSettings@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 680);
  ++*(_DWORD *)(v2 + 228);
  *a2 = v2;
  return this;
}

uint64_t WebCore::Document::elementForAccessKey(WebCore::Document *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  v6 = (uint64_t *)*((_QWORD *)this + 241);
  if (!v6)
  {
    WebCore::Document::buildAccessKeyCache(this, (uint64_t)a2);
    v6 = (uint64_t *)*((_QWORD *)this + 241);
  }
  v7 = *v6;
  if (!*v6)
    return 0;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = WTF::ASCIICaseInsensitiveHash::hash(a2, a2);
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v8;
    v12 = (uint64_t *)(v7 + 16 * v11);
    if (*v12 != -1)
    {
      if (!*v12)
        return 0;
      if (WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v12, (uint64_t *)a2))
      {
        break;
      }
    }
  }
  v14 = *(_QWORD *)(v7 + 16 * v11 + 8);
  if (!v14)
    return 0;
  do
    v15 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v15 + 1, (unsigned int *)v14));
  v2 = *(_QWORD *)(v14 + 8);
  do
  {
    v16 = __ldaxr((unsigned int *)v14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v14);
    v20 = (WTF *)v14;
    v18 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v18)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v18));
    v19 = (WTF *)*((_QWORD *)v20 + 2);
    if (v19)
    {
      *((_QWORD *)v20 + 2) = 0;
      *((_DWORD *)v20 + 6) = 0;
      WTF::fastFree(v19, v13);
    }
    WTF::fastFree(v20, v13);
  }
  return v2;
}

_QWORD *WebCore::Document::buildAccessKeyCache(WebCore::Document *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  char *v6;
  WTF *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::ASCIICaseInsensitiveHash *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  WTF *v61;
  WTF *v63;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  WTF *v70;
  WTF *v72;
  _QWORD *result;
  void *v75;
  uint64_t *v76;
  uint64_t v77;
  __int16 v78;
  WTF *v79;
  uint64_t v80;
  _QWORD v81[3];
  _DWORD v82[66];
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  _DWORD v86[66];
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  int v90;
  unsigned int v91;
  uint64_t v92;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v77 = 0;
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)&v88, v2);
  v78 = 0;
  v79 = (WTF *)v81;
  v81[0] = 0;
  v81[1] = v82;
  v81[2] = 16;
  v82[64] = 0;
  v83 = 0;
  v84 = v86;
  v85 = 16;
  v86[64] = 0;
  v87 = -1;
  v80 = 0x100000008;
  v4 = v91;
  if (!v91)
    goto LABEL_129;
  v5 = (WTF::ASCIICaseInsensitiveHash *)MEMORY[0x1E0CBF2F8];
LABEL_3:
  if (!HIDWORD(v80))
    goto LABEL_129;
  v6 = (char *)v89 + 584 * v4 - 584;
  v7 = v79;
  v8 = *(_QWORD *)v6;
  if (*(_QWORD *)v6 != *((_QWORD *)v79 + 73 * HIDWORD(v80) - 73)
    && (*((_DWORD *)v6 + 70) || *((_DWORD *)v79 + 146 * HIDWORD(v80) - 76)))
  {
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 8) == 0;
    else
      v9 = 1;
    if (v9)
      goto LABEL_24;
    v10 = *(_QWORD *)(v8 + 104);
    if (!v10)
      goto LABEL_22;
    v11 = *(unsigned int *)(v10 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v10 + 40);
      v13 = *(unsigned int *)(v10 + 52);
      if (!v13)
      {
LABEL_22:
        v14 = v5;
        goto LABEL_23;
      }
    }
    else
    {
      v12 = v10 + 32;
      v13 = v11 >> 5;
      if (!(v11 >> 5))
        goto LABEL_22;
    }
    v14 = (WTF::ASCIICaseInsensitiveHash *)(v12 + 8);
    while (1)
    {
      v15 = *((_QWORD *)v14 - 1);
      if (v15 == WebCore::HTMLNames::accesskeyAttr
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 24)
        && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::accesskeyAttr + 32))
      {
        break;
      }
      v14 = (WTF::ASCIICaseInsensitiveHash *)((char *)v14 + 16);
      if (!--v13)
        goto LABEL_22;
    }
LABEL_23:
    if (!*(_QWORD *)v14 || !*(_DWORD *)(*(_QWORD *)v14 + 4))
      goto LABEL_24;
    v16 = v77;
    if (v77
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v77, 8u), (v16 = v77) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = WTF::ASCIICaseInsensitiveHash::hash(v14, (const WTF::String *)v3);
    v19 = 0;
    v20 = 0;
    v21 = *(_QWORD *)v14;
    while (1)
    {
      v22 = v18 & v17;
      v23 = (uint64_t *)(v16 + 16 * (v18 & v17));
      v24 = *v23;
      if (*v23 == -1)
      {
        v19 = (uint64_t *)(v16 + 16 * v22);
      }
      else
      {
        if (!v24)
        {
          if (v19)
          {
            *v19 = 0;
            v19[1] = 0;
            --*(_DWORD *)(v77 - 16);
            v21 = *(_QWORD *)v14;
            v23 = v19;
          }
          if (v21)
            *(_DWORD *)v21 += 2;
          *v23 = v21;
          v46 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
          if (v46)
          {
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 + 1, v46));
          }
          v48 = v23[1];
          v23[1] = (uint64_t)v46;
          if (v48)
          {
            do
            {
              v49 = __ldaxr((unsigned int *)v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, (unsigned int *)v48));
            if (!v50)
            {
              atomic_store(1u, (unsigned int *)v48);
              v56 = *(unsigned int *)(v48 + 28);
              if ((_DWORD)v56)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v48 + 16), (WTF::StringImpl *)(*(_QWORD *)(v48 + 16) + 32 * v56));
              v57 = *(WTF **)(v48 + 16);
              if (v57)
              {
                *(_QWORD *)(v48 + 16) = 0;
                *(_DWORD *)(v48 + 24) = 0;
                WTF::fastFree(v57, (void *)v3);
              }
              WTF::fastFree((WTF *)v48, (void *)v3);
            }
          }
          v51 = v77;
          if (v77)
            v52 = *(_DWORD *)(v77 - 12) + 1;
          else
            v52 = 1;
          *(_DWORD *)(v77 - 12) = v52;
          v53 = (*(_DWORD *)(v51 - 16) + v52);
          v54 = *(unsigned int *)(v51 - 4);
          if (v54 > 0x400)
          {
            if (v54 > 2 * v53)
              goto LABEL_24;
LABEL_79:
            v55 = (_DWORD)v54 << (6 * v52 >= (2 * v54));
          }
          else
          {
            if (3 * v54 > 4 * v53)
              goto LABEL_24;
            if ((_DWORD)v54)
              goto LABEL_79;
            v55 = 8;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v77, v55);
          goto LABEL_24;
        }
        v25 = *(unsigned int *)(v24 + 4);
        if ((_DWORD)v25 == *(_DWORD *)(v21 + 4))
        {
          v26 = *(_DWORD *)(v21 + 16);
          v27 = *(unsigned __int8 **)(v24 + 8);
          v28 = *(unsigned __int8 **)(v21 + 8);
          if ((*(_BYTE *)(v24 + 16) & 4) != 0)
          {
            if ((v26 & 4) != 0)
            {
              if (!(_DWORD)v25)
                goto LABEL_24;
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v27) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v28))
              {
                v29 = 0;
                v42 = v28 + 1;
                v43 = v27 + 1;
                while (v25 - 1 != v29)
                {
                  v3 = MEMORY[0x1E0CBF868];
                  v44 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v43[v29]);
                  v45 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v42[v29++]);
                  if (v44 != v45)
                  {
LABEL_62:
                    if (v29 < v25)
                      goto LABEL_43;
                    break;
                  }
                }
LABEL_24:
                WebCore::ComposedTreeIterator::operator++((uint64_t)&v88, (WebCore::ShadowRoot *)v3);
                v4 = v91;
                if (!v91)
                {
LABEL_129:
                  __break(0xC471u);
                  JUMPOUT(0x195977B3CLL);
                }
                goto LABEL_3;
              }
            }
            else
            {
              if (!(_DWORD)v25)
                goto LABEL_24;
              if ((*(unsigned __int16 *)v28 | (32 * (*(unsigned __int16 *)v28 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v27))
              {
                v29 = 0;
                v34 = v28 + 2;
                v35 = v27 + 1;
                while (v25 - 1 != v29)
                {
                  v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[v29]);
                  v37 = *(unsigned __int16 *)&v34[2 * v29];
                  v3 = (v37 - 65) < 0x1A;
                  ++v29;
                  if ((v37 | (32 * (_DWORD)v3)) != v36)
                    goto LABEL_62;
                }
                goto LABEL_24;
              }
            }
          }
          else if ((v26 & 4) != 0)
          {
            if (!(_DWORD)v25)
              goto LABEL_24;
            if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v28))
            {
              v29 = 0;
              v38 = v28 + 1;
              v39 = v27 + 2;
              while (v25 - 1 != v29)
              {
                v40 = *(unsigned __int16 *)&v39[2 * v29] | (32
                                                          * (*(unsigned __int16 *)&v39[2 * v29] - 65 < 0x1A));
                v3 = MEMORY[0x1E0CBF868];
                v41 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v38[v29++]);
                if (v40 != v41)
                  goto LABEL_62;
              }
              goto LABEL_24;
            }
          }
          else
          {
            if (!(_DWORD)v25)
              goto LABEL_24;
            if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) == (*(unsigned __int16 *)v28 | (32 * (*(unsigned __int16 *)v28 - 65 < 0x1A))))
            {
              v29 = 0;
              v30 = v28 + 2;
              v31 = v27 + 2;
              while (v25 - 1 != v29)
              {
                v32 = *(unsigned __int16 *)&v31[2 * v29] | (32
                                                          * (*(unsigned __int16 *)&v31[2 * v29] - 65 < 0x1A));
                v33 = *(unsigned __int16 *)&v30[2 * v29];
                v3 = (v33 - 65) < 0x1A;
                ++v29;
                if (v32 != (v33 | (32 * (_DWORD)v3)))
                  goto LABEL_62;
              }
              goto LABEL_24;
            }
          }
        }
      }
LABEL_43:
      ++v20;
      v18 = v22 + v20;
    }
  }
  v58 = 0;
  v59 = 584 * HIDWORD(v80);
  do
  {
    v60 = (char *)v7 + v58;
    v61 = *(WTF **)((char *)v7 + v58 + 296);
    if ((WTF *)((char *)v7 + v58 + 312) != v61 && v61 != 0)
    {
      *((_QWORD *)v60 + 37) = 0;
      *((_DWORD *)v60 + 76) = 0;
      WTF::fastFree(v61, (void *)v3);
    }
    v63 = (WTF *)*((_QWORD *)v60 + 1);
    if (v60 + 24 != (char *)v63 && v63 != 0)
    {
      *((_QWORD *)v60 + 1) = 0;
      *(_DWORD *)((char *)v7 + v58 + 16) = 0;
      WTF::fastFree(v63, (void *)v3);
    }
    v58 += 584;
  }
  while (v59 != v58);
  v65 = v79;
  if (v81 != (_QWORD *)v79 && v79)
  {
    v79 = 0;
    LODWORD(v80) = 0;
    WTF::fastFree(v65, (void *)v3);
  }
  v66 = v89;
  if (v91)
  {
    v67 = 0;
    v68 = 584 * v91;
    do
    {
      v69 = (char *)v66 + v67;
      v70 = *(WTF **)((char *)v66 + v67 + 296);
      if ((WTF *)((char *)v66 + v67 + 312) != v70 && v70 != 0)
      {
        *((_QWORD *)v69 + 37) = 0;
        *((_DWORD *)v69 + 76) = 0;
        WTF::fastFree(v70, (void *)v3);
      }
      v72 = (WTF *)*((_QWORD *)v69 + 1);
      if (v69 + 24 != (char *)v72 && v72 != 0)
      {
        *((_QWORD *)v69 + 1) = 0;
        *(_DWORD *)((char *)v66 + v67 + 16) = 0;
        WTF::fastFree(v72, (void *)v3);
      }
      v67 += 584;
    }
    while (v68 != v67);
    v66 = v89;
  }
  if (&v92 != (uint64_t *)v66 && v66)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree(v66, (void *)v3);
  }
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = v77;
  v76 = *(uint64_t **)(v2 + 1928);
  *(_QWORD *)(v2 + 1928) = result;
  if (v76)
  {
    if (*v76)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v76, v75);
    return (_QWORD *)WTF::fastFree((WTF *)v76, v75);
  }
  return result;
}

uint64_t WebCore::Document::invalidateAccessKeyCacheSlowCase(uint64_t this, void *a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(this + 1928);
  *(_QWORD *)(this + 1928) = 0;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WebCore::Document::resultForSelectorAll@<X0>(uint64_t this@<X0>, WebCore::ContainerNode *a2@<X1>, const WTF::StringImpl **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 2);
  if ((v5 & 0x40000000000000) == 0)
    goto LABEL_15;
  ++*(_DWORD *)(this + 2184);
  v6 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_16;
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8))
    goto LABEL_15;
  v7 = *(_QWORD *)(this + 2176);
  if (!v7)
    goto LABEL_15;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = (v6 + ~(v5 << 32)) ^ ((unint64_t)(v6 + ~(v5 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; ++i)
  {
    v15 = v13;
    v16 = *(_QWORD *)(v7 + 16 * v13);
    if (v16 != -1)
    {
      if (!v16)
        goto LABEL_15;
      if (v16 == v6)
        break;
    }
    v13 = (v15 + i) & v9;
  }
  v6 = *(_QWORD *)(v7 + 16 * v15 + 8);
  if (v6)
  {
    v17 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)v6 + 8;
      v19 = 24 * v17;
      while (1)
      {
        this = WTF::equal(*(WTF **)(v18 - 8), *a3, (const WTF::StringImpl *)a3);
        if ((_DWORD)this)
          break;
        v6 = 0;
        v18 += 24;
        v19 -= 24;
        if (!v19)
          goto LABEL_16;
      }
      v6 = *(_QWORD *)v18;
      ++*(_DWORD *)(*(_QWORD *)v18 + 16);
      goto LABEL_16;
    }
LABEL_15:
    v6 = 0;
  }
LABEL_16:
  *a4 = v6;
  return this;
}

WTF::StringImpl *WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)a1 + 24 * (_QWORD)a2;
  WebCore::QuerySelectorAllResults::Entry::~Entry((WebCore::QuerySelectorAllResults::Entry *)v3, a2);
  result = WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::moveOverlapping((WTF::StringImpl *)(v3 + 24), (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12)), (WTF::StringImpl **)v3);
  --*(_DWORD *)(a1 + 12);
  return result;
}

void WebCore::QuerySelectorAllResults::Entry::~Entry(WebCore::QuerySelectorAllResults::Entry *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::Document::invalidateQuerySelectorAllResultsForClassAttributeChange(uint64_t a1, WebCore::Node *this, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WebCore::Node **v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int i;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  char v30[8];
  WebCore::Node *v31;

  result = *(_QWORD *)(a1 + 2176);
  if (!result || !*(_DWORD *)(result - 12))
    return result;
  v8 = this;
  v9 = *(unsigned int *)(result - 4);
  v10 = (uint64_t *)result;
  if ((_DWORD)v9)
  {
    v11 = 16 * v9;
    v10 = (uint64_t *)result;
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_51;
    }
  }
  v12 = (uint64_t *)(result + 16 * v9);
  if (v10 == v12)
  {
LABEL_51:
    *(_QWORD *)(a1 + 2176) = 0;
    result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, this);
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 2176);
    *(_DWORD *)(a1 + 2184) = 0;
    if (v28)
    {
      v27 = *(_DWORD *)(v28 - 12);
      if (v27 > 0x7FFFFFFE)
        v27 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 2188) = 2 * v27;
    return result;
  }
  v13 = *v10;
  while (!*(_QWORD *)(v13 + 8))
  {
    do
    {
      v10 += 2;
      if (v10 == v12)
        goto LABEL_51;
      v13 = *v10;
    }
    while ((unint64_t)(*v10 + 1) <= 1);
    if (v10 == v12)
      goto LABEL_51;
  }
  v14 = (WebCore::Node **)(a1 + 2176);
  *((_DWORD *)this + 6) += 2;
  do
  {
    v15 = v8;
    if ((*((_BYTE *)v8 + 22) & 0x40) == 0)
      goto LABEL_14;
    result = WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::find(a1 + 2176, (uint64_t)v8, (uint64_t)v30);
    v16 = *v14;
    if (*v14)
      v16 = (WebCore::Node *)((char *)v16 + 16 * *((unsigned int *)v16 - 1));
    this = v31;
    if (v31 == v16)
      goto LABEL_14;
    v17 = *((_QWORD *)v31 + 1);
    v18 = *(_DWORD *)(v17 + 12);
    if (!v18)
      goto LABEL_43;
    this = 0;
    for (i = 0; i < v18; this = (WebCore::Node *)i)
    {
      v20 = *(_QWORD *)(*(_QWORD *)v17 + 24 * (_QWORD)this + 16);
      if (!v20)
      {
LABEL_35:
        ++i;
        continue;
      }
      v21 = *a3;
      if (*a3)
      {
        v22 = 0;
        do
        {
          v23 = *(_QWORD *)(v21 + 16 + 8 * v22) == v20;
          if (*(_QWORD *)(v21 + 16 + 8 * v22) == v20)
            break;
          ++v22;
        }
        while (v22 < *(unsigned int *)(v21 + 12));
      }
      else
      {
        v23 = 0;
      }
      v24 = *a4;
      if (*a4)
      {
        v25 = 0;
        while (*(_QWORD *)(v24 + 16 + 8 * v25) != v20)
        {
          if (++v25 >= (unint64_t)*(unsigned int *)(v24 + 12))
            goto LABEL_34;
        }
        if (v23)
          goto LABEL_35;
      }
      else
      {
LABEL_34:
        if (!v23)
          goto LABEL_35;
      }
      v29 = i;
      result = (uint64_t)WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v17, this);
      i = v29;
      v18 = *(_DWORD *)(v17 + 12);
    }
    if (!v18)
    {
      this = v31;
LABEL_43:
      result = WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 2176), this);
      v26 = *(_DWORD *)(a1 + 2184);
      *(_DWORD *)(a1 + 2184) = v26 + 1;
      if (v26 > *(_DWORD *)(a1 + 2188))
        result = WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1 + 2176, this);
      *((_QWORD *)v15 + 2) &= ~0x40000000000000uLL;
    }
LABEL_14:
    v8 = (WebCore::Node *)*((_QWORD *)v15 + 4);
    if (v8)
      *((_DWORD *)v8 + 6) += 2;
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v15, this);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  while (v8);
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::find@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  ++*(_DWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 8))
    return WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end(a3, (uint64_t *)result);
  v5 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    v14 = 0;
    v16 = 0;
    v18 = 0;
    v15 = 0;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = 0;
    v17 = (uint64_t *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (v4 + ~(v3 << 32)) ^ ((unint64_t)(v4 + ~(v3 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  for (i = 1; ; ++i)
  {
    v12 = v10;
    v13 = *(_QWORD *)(v5 + 16 * v10);
    if (v13 == -1)
      goto LABEL_14;
    if (!v13)
      break;
    if (v13 == v4)
    {
      v14 = v5 + 16 * v12;
      v15 = *(unsigned int *)(v5 - 4);
      v16 = v5 + 16 * v15;
      goto LABEL_9;
    }
LABEL_14:
    v10 = (v12 + i) & v6;
  }
  v15 = *(unsigned int *)(v5 - 4);
  v14 = v5 + 16 * v15;
  v16 = v14;
LABEL_9:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v14;
  v17 = (uint64_t *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = v16;
  v18 = v5 + 16 * v15;
LABEL_10:
  *(_QWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 32) = v5 + 16 * v15;
  *(_DWORD *)(a3 + 40) = 0;
LABEL_11:
  while (v14 != v18 && !*(_QWORD *)(*(_QWORD *)v14 + 8))
  {
    v19 = v14 + 16;
    *v17 = v14 + 16;
    v14 = v16;
    if (v19 != v16)
    {
      v14 = v19;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 += 16;
        *v17 = v14;
        if (v14 == v16)
        {
          v14 = v16;
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2 + 16 * v3;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

WTF::StringImpl *WebCore::Document::selectorQueryForString@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int16x8_t a4@<Q0>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v5 = *a2;
  if (!*a2)
  {
LABEL_2:
    v17 = v5;
    WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(39, (uint64_t *)&v17, (int8x16_t *)"' is not a valid selector.", 27, &v18);
    result = v17;
    v8 = v18;
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = 1;
    v17 = 0;
    v18 = 0;
    if (!result)
      return result;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  }
  if (!*((_DWORD *)v5 + 1))
  {
    *(_DWORD *)v5 += 2;
    goto LABEL_2;
  }
  {
    WebCore::SelectorQueryCache::singleton(void)::cache = 0;
  }
  result = (WTF::StringImpl *)WebCore::SelectorQueryCache::add((WebCore::SelectorQueryCache *)&WebCore::SelectorQueryCache::singleton(void)::cache, (const WTF::String *)a2, this, a4);
  if (result)
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v10 = (uint64_t)*a2;
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)v10 += 2;
    if (v11 < 0)
    {
LABEL_26:
      v16 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 26);
  v13 = v11 + 26;
  if (v12 || __OFADD__(v13, 1))
    goto LABEL_26;
  v14 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v13 + 1), v14, 39, v10, (int8x16_t *)"' is not a valid selector.", 0x1Au, &v16);
  v15 = v16;
  if (!v16)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1959783CCLL);
  }
  *(_BYTE *)a3 = 9;
  *(_QWORD *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 16) = 1;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      return result;
    }
    result = (WTF::StringImpl *)v10;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  }
  return result;
}

WebCore::MediaQueryMatcher *WebCore::Document::mediaQueryMatcher(WebCore::Document *this)
{
  WebCore::MediaQueryMatcher *result;
  WebCore::MediaQueryMatcher *v3;
  void *v4;
  WebCore::MediaQueryMatcher *v5;

  result = (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 286);
  if (!result)
  {
    v3 = (WebCore::MediaQueryMatcher *)WTF::fastMalloc((WTF *)0x28);
    result = WebCore::MediaQueryMatcher::MediaQueryMatcher(v3, this);
    v5 = (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 286);
    *((_QWORD *)this + 286) = result;
    if (v5)
    {
      WTF::RefCounted<WebCore::MediaQueryMatcher>::deref(v5, v4);
      return (WebCore::MediaQueryMatcher *)*((_QWORD *)this + 286);
    }
  }
  return result;
}

uint64_t WebCore::Document::compatMode@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v4;
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WebCore::Document *WebCore::Document::visitedLinkColor@<X0>(WebCore::Document *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (**v6)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 178);
  if ((v4 & 0x4000000000000) != 0)
  {
    *a3 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v5 = WebCore::Document::styleColorOptions(this, a2) | 1u;
    {
      v6 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v10 = v5;
      v7 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      v5 = v10;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      v6 = &off_1E335BC30;
      *(_QWORD *)v7 = &off_1E335BC30;
    }
    return (WebCore::Document *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v6[34])(&WebCore::RenderTheme::singleton(void)::theme, 228, v5);
  }
  return this;
}

WebCore::Document *WebCore::Document::activeLinkColor@<X0>(WebCore::Document *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (**v6)(WebCore::RenderThemeIOS *__hidden);
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 179);
  if ((v4 & 0x4000000000000) != 0)
  {
    *a3 = v4;
    if ((v4 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  else
  {
    v5 = WebCore::Document::styleColorOptions(this, a2);
    {
      v6 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v10 = v5;
      v9 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      v5 = v10;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      v6 = &off_1E335BC30;
      *(_QWORD *)v9 = &off_1E335BC30;
    }
    return (WebCore::Document *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v6[34])(&WebCore::RenderTheme::singleton(void)::theme, 227, v5);
  }
  return this;
}

uint64_t WebCore::Document::resetLinkColor(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 1416);
  if (v2)
  {
    v3 = this;
    if ((v2 & 0x8000000000000) != 0)
    {
      v6 = this;
      this = v2 & 0xFFFFFFFFFFFFLL;
      do
      {
        v4 = __ldaxr((unsigned int *)this);
        v5 = --v4 == 0;
      }
      while (__stlxr(v4, (unsigned int *)this));
      v3 = v6;
      if (v5)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
        v3 = v6;
      }
    }
    *(_QWORD *)(v3 + 1416) = 0;
  }
  return this;
}

uint64_t WebCore::Document::resetVisitedLinkColor(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 1424);
  if (v2)
  {
    v3 = this;
    if ((v2 & 0x8000000000000) != 0)
    {
      v6 = this;
      this = v2 & 0xFFFFFFFFFFFFLL;
      do
      {
        v4 = __ldaxr((unsigned int *)this);
        v5 = --v4 == 0;
      }
      while (__stlxr(v4, (unsigned int *)this));
      v3 = v6;
      if (v5)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
        v3 = v6;
      }
    }
    *(_QWORD *)(v3 + 1424) = 0;
  }
  return this;
}

uint64_t WebCore::Document::resetActiveLinkColor(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 1432);
  if (v2)
  {
    v3 = this;
    if ((v2 & 0x8000000000000) != 0)
    {
      v6 = this;
      this = v2 & 0xFFFFFFFFFFFFLL;
      do
      {
        v4 = __ldaxr((unsigned int *)this);
        v5 = --v4 == 0;
      }
      while (__stlxr(v4, (unsigned int *)this));
      v3 = v6;
      if (v5)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
        v3 = v6;
      }
    }
    *(_QWORD *)(v3 + 1432) = 0;
  }
  return this;
}

uint64_t WebCore::Document::implementation(WebCore::Document *this)
{
  uint64_t result;
  WebCore::DOMImplementation *v3;
  void *v4;
  bmalloc::api *v5;

  result = *((_QWORD *)this + 150);
  if (!result)
  {
    v3 = (WebCore::DOMImplementation *)WebCore::DOMImplementation::operator new(16);
    v5 = WebCore::DOMImplementation::DOMImplementation(v3, this);
    std::unique_ptr<WebCore::DOMImplementation>::operator=[abi:sn180100]((bmalloc::api **)this + 150, &v5);
    std::unique_ptr<WebCore::DOMImplementation>::~unique_ptr[abi:sn180100](&v5, v4);
    return *((_QWORD *)this + 150);
  }
  return result;
}

bmalloc::api **std::unique_ptr<WebCore::DOMImplementation>::operator=[abi:sn180100](bmalloc::api **a1, bmalloc::api **a2)
{
  bmalloc::api *v3;
  bmalloc::api *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  bmalloc::api *v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v13 = v4;
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, a2);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, a2);
        v4 = v13;
      }
    }
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
      *(_QWORD *)v4 = 0;
    }
    bmalloc::api::isoDeallocate(v4, a2);
  }
  return a1;
}

uint64_t WebCore::Document::doctype(WebCore::Document *this)
{
  uint64_t result;

  for (result = *((_QWORD *)this + 10); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0xF000) == 0xA000)
      break;
  }
  return result;
}

void WebCore::Document::createElementForBindings(WebCore::Document *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  __int16 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::Node *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::Node *v16;

  v6 = *((_WORD *)this + 1679);
  if ((v6 & 1) != 0)
  {
    WTF::AtomString::convertToASCIILowercase(a2);
    WebCore::createHTMLElementWithNameValidation<WTF::AtomString>(a3, this, (WebCore::HTMLElementFactory *)&v16);
    v8 = v16;
    v16 = 0;
    if (!v8)
      return;
    goto LABEL_3;
  }
  if ((v6 & 2) != 0)
  {
    WebCore::createHTMLElementWithNameValidation<WTF::AtomString>(a3, this, a2);
    return;
  }
  if ((WebCore::Document::isValidName(a2, a2, a4) & 1) != 0)
  {
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v13, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)a2, MEMORY[0x1E0CBF2F8]);
    WebCore::Document::createElement(this, (const WebCore::QualifiedName *)&v13, 0, &v16);
    v9 = v16;
    v16 = 0;
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v16);
    WebCore::QualifiedName::~QualifiedName(&v13);
    return;
  }
  v10 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v14 = v10;
  WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>("Invalid qualified name: '", 26, (uint64_t *)&v14, 39, &v15);
  v8 = v14;
  v11 = v15;
  *(_BYTE *)a3 = 3;
  *(_QWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 16) = 1;
  v14 = 0;
  v15 = 0;
  if (v8)
  {
LABEL_3:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::createHTMLElementWithNameValidation<WTF::AtomString>(uint64_t a1, const WTF::AtomString *a2, WebCore::HTMLElementFactory *this)
{
  void *v6;
  int32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int i;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _WORD *v20;
  int v21;
  BOOL v22;
  unint64_t j;
  int v24;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::Element *v33;
  char v34;
  int v35;
  BOOL v36;
  WebCore::Element *v37;
  WTF::StringImpl **v38;
  WebCore::Node *v39;
  int v40;
  char *v41;
  char *v42;
  WebCore::Element *v43;
  char v44;
  int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  int32x4_t v56;
  WebCore::Node *v57;
  WebCore::QualifiedName::QualifiedNameImpl *v58;
  WebCore::Element *v59[2];
  char v60;

  WebCore::HTMLElementFactory::createKnownElement(this, a2, 0, 0, (uint64_t *)&v57);
  if (v57)
  {
    *(_QWORD *)a1 = v57;
    *(_DWORD *)(a1 + 16) = 0;
    return;
  }
  v8 = *((_QWORD *)a2 + 87);
  if (v8)
  {
    ++*(_DWORD *)(v8 + 24);
    v9 = *(_QWORD *)(v8 + 264);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = v10 + 1;
      v11 = *(_QWORD *)(v9 + 32);
      if (v11)
      {
        v12 = 0;
        for (i = *(_DWORD *)(*(_QWORD *)this + 16) >> 8; ; i = v12 + v14)
        {
          v14 = i & *(_DWORD *)(v11 - 8);
          v15 = *(_QWORD *)(v11 + 16 * v14);
          if (!v15)
            break;
          if (v15 != -1 && v15 == *(_QWORD *)this)
          {
            v17 = *(_DWORD **)(v11 + 16 * v14 + 8);
            if (!v17)
              break;
            ++v17[4];
            WebCore::JSCustomElementInterface::constructElementWithFallback((uint64_t)v17, (uint64_t)a2, (WTF::StringImpl **)this, 0, v59);
            *(WebCore::Element **)a1 = v59[0];
            *(_DWORD *)(a1 + 16) = 0;
            if (v17[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
            else
              --v17[4];
            if (*(_DWORD *)(v9 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
            else
              --*(_DWORD *)(v9 + 16);
            if (*(_DWORD *)(v8 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
            else
              --*(_DWORD *)(v8 + 24);
            goto LABEL_61;
          }
          ++v12;
        }
      }
      if (v10)
        *(_DWORD *)(v9 + 16) = v10;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    if (*(_DWORD *)(v8 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    else
      --*(_DWORD *)(v8 + 24);
  }
  v18 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_105;
  v19 = *(unsigned int *)(v18 + 4);
  if (!(_DWORD)v19)
    goto LABEL_105;
  v20 = *(_WORD **)(v18 + 8);
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    v21 = *(unsigned __int8 *)v20;
    if ((v21 | 0x20u) - 97 >= 0x1A && v21 != 95 && v21 != 58)
      goto LABEL_104;
    if (v19 >= 2)
    {
      v22 = 0;
      for (j = 1; j != v19; v22 = j >= v19)
      {
        v24 = *((unsigned __int8 *)v20 + j);
        if ((v24 | 0x20u) - 97 >= 0x1A && (v24 - 48) >= 0xA)
        {
          v26 = v24 - 45;
          v27 = v26 > 0x32;
          v28 = (1 << v26) & 0x4000000002003;
          if (v27 || v28 == 0)
            break;
        }
        ++j;
      }
      if (!v22)
      {
LABEL_104:
        if ((WebCore::isValidNameNonASCII((uint64_t)v20, v19, v7) & 1) == 0)
          goto LABEL_105;
      }
    }
LABEL_42:
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v58, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)this, (WTF::StringImpl **)&WebCore::HTMLNames::xhtmlNamespaceURI);
    v30 = *((_QWORD *)v58 + 3);
    if (v30)
    {
      v31 = *(unsigned int *)(v30 + 4);
      if ((_DWORD)v31)
      {
        v32 = *(_DWORD *)(v30 + 16);
        v33 = *(WebCore::Element **)(v30 + 8);
        if ((v32 & 4) != 0)
        {
          if (*(unsigned __int8 *)v33 - 97 <= 0x19)
          {
            v34 = 0;
            do
            {
              v35 = WebCore::customElementNameCharacterKind(unsigned char)::table[*(unsigned __int8 *)v33];
              if (v35 == 2)
              {
                v34 = 1;
              }
              else
              {
                if (WebCore::customElementNameCharacterKind(unsigned char)::table[*(unsigned __int8 *)v33])
                  v36 = v35 == 3;
                else
                  v36 = 1;
                if (v36)
                  goto LABEL_94;
              }
              v33 = (WebCore::Element *)((char *)v33 + 1);
              --v31;
            }
            while (v31);
            if ((v34 & 1) != 0)
            {
LABEL_56:
              WebCore::HTMLMaybeFormAssociatedCustomElement::create((_DWORD **)&v58, (uint64_t)a2, (uint64_t *)v59);
              v37 = v59[0];
              WebCore::Element::setIsCustomElementUpgradeCandidate(v59[0]);
LABEL_57:
              v38 = (WTF::StringImpl **)v58;
              v58 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v38);
                  WTF::fastFree(v54, v55);
                }
                else
                {
                  --*(_DWORD *)v38;
                }
              }
              *(_QWORD *)a1 = v37;
              *(_DWORD *)(a1 + 16) = 0;
              goto LABEL_61;
            }
          }
        }
        else if (*(unsigned __int16 *)v33 - 97 < 0x1A)
        {
          v40 = (v32 >> 2) & 1;
          v60 = v40;
          v41 = (char *)v33 + v31;
          v42 = (char *)v33 + 2 * v31;
          v43 = (WebCore::Element *)(v40 ? v41 : v42);
          v59[0] = v33;
          v59[1] = v43;
          if (v33 != v43)
          {
            v44 = 0;
            v45 = v40;
            while (1)
            {
              v46 = WTF::StringView::CodePoints::Iterator::operator*((uint64_t)v59);
              if (v46 - 65 < 0x1A)
                break;
              v47 = (unsigned __int16 *)&WebCore::isPotentialCustomElementNameCharacter(char32_t)::ranges;
              v48 = 17;
              do
              {
                v49 = v48 >> 1;
                v50 = &v47[4 * (v48 >> 1)];
                v51 = *((_DWORD *)v50 + 1);
                v52 = v50 + 4;
                v48 += ~(v48 >> 1);
                if (v51 < v46)
                  v47 = v52;
                else
                  v48 = v49;
              }
              while (v48);
              if (v47 == word_1969F0640 || *(_DWORD *)v47 > v46)
                break;
              if (v45)
              {
                v33 = (WebCore::Element *)((char *)v33 + 1);
              }
              else
              {
                if ((*(_WORD *)v33 & 0xFC00) != 0xD800 || v43 - v33 == 2)
                {
                  v53 = 1;
                }
                else
                {
                  v53 = 1;
                  if ((*((_WORD *)v33 + 1) & 0xFC00) == 0xDC00)
                    v53 = 2;
                }
                v33 = (WebCore::Element *)((char *)v33 + 2 * v53);
              }
              v44 |= v46 == 45;
              v59[0] = v33;
              if (v33 == v43)
              {
                if ((v44 & 1) != 0)
                  goto LABEL_56;
                break;
              }
            }
          }
        }
      }
    }
LABEL_94:
    WebCore::HTMLUnknownElement::create((_DWORD **)&v58, (uint64_t)a2, (uint64_t *)v59);
    v37 = v59[0];
    v59[0] = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v59);
    goto LABEL_57;
  }
  if ((WebCore::isValidNameASCII<char16_t>(v20, v19) & 1) != 0
    || (WebCore::isValidNameNonASCII((uint64_t)v20, v19, v56) & 1) != 0)
  {
    goto LABEL_42;
  }
LABEL_105:
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
LABEL_61:
  v39 = v57;
  v57 = 0;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v6);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
}

uint64_t WebCore::Document::isValidName(WebCore::Document *this, const WTF::String *a2, int32x4_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _WORD *v5;
  int v6;
  BOOL v7;
  unint64_t i;
  int v9;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int32x4_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(_WORD **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    v6 = *(unsigned __int8 *)v5;
    if ((v6 | 0x20u) - 97 >= 0x1A && v6 != 95 && v6 != 58)
      return WebCore::isValidNameNonASCII((uint64_t)v5, v4, a3);
    if (v4 >= 2)
    {
      v7 = 0;
      for (i = 1; i != v4; v7 = i >= v4)
      {
        v9 = *((unsigned __int8 *)v5 + i);
        if ((v9 | 0x20u) - 97 >= 0x1A && (v9 - 48) >= 0xA)
        {
          v11 = v9 - 45;
          v12 = v11 > 0x32;
          v13 = (1 << v11) & 0x4000000002003;
          if (v12 || v13 == 0)
            break;
        }
        ++i;
      }
      if (!v7)
        return WebCore::isValidNameNonASCII((uint64_t)v5, v4, a3);
    }
  }
  else
  {
    v17 = *(_QWORD *)(v3 + 8);
    v18 = *(unsigned int *)(v3 + 4);
    if ((WebCore::isValidNameASCII<char16_t>(v5, v4) & 1) == 0)
      return WebCore::isValidNameNonASCII(v17, v18, v16);
  }
  return 1;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  uint64_t result;

  if (a2)
  {
    v6 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
  }
  v7 = *a3;
  if (*a3)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 < 0)
    {
LABEL_14:
      *a5 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9 || __OFADD__(v6, v10))
    goto LABEL_14;
  v11 = !v7 || (*(_BYTE *)(v7 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(v6 + v10, v11, a1, v6, v7, a4, a5);
  if (!*a5)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195979138);
  }
  return result;
}

WebCore::Document *WebCore::Document::createElement@<X0>(WebCore::Document *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::HTMLFormElement *a3@<X2>, WebCore::Node **a4@<X8>)
{
  WebCore::Document *v5;
  uint64_t v7;
  uint64_t v8;
  WebCore::SVGAnimationElement *v9;
  unsigned int v10;
  WebCore::Node *v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;

  v5 = this;
  v18 = 0;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (v8 == WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    v12 = *(unsigned __int16 *)(v7 + 10);
    v13 = v12 - 245;
    if (v12 >= 0xF5)
    {
      if (v13 > 0x19)
        v12 = 0;
      else
        v12 = word_1969F0640[(__int16)v13];
    }
    WebCore::HTMLElementFactory::createKnownElementWithName(a2, v5, 0, a3, v12, &v19);
    this = v18;
    v14 = v19;
    v18 = v19;
    v19 = 0;
    if (!v14)
    {
      WebCore::createFallbackHTMLElement((uint64_t)&v19, v5, a2);
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v18, (uint64_t *)&v19);
      this = (WebCore::Document *)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v19);
    }
    goto LABEL_7;
  }
  if (v8 != WebCore::SVGNames::svgNamespaceURI)
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 85) + 712) & 0x200) != 0 && v8 == WebCore::MathMLNames::mathmlNamespaceURI)
    {
      WebCore::MathMLElementFactory::createElement((_DWORD **)a2, (uint64_t)this, (uint64_t *)&v19);
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v18, (uint64_t *)&v19);
      this = (WebCore::Document *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
    }
LABEL_7:
    v11 = v18;
    goto LABEL_8;
  }
  v9 = (WebCore::SVGAnimationElement *)*(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_20;
  v10 = (_DWORD)v9 - 245;
  if (v9 >= 0xF5)
  {
    if (v10 > 0x19)
      v9 = 0;
    else
      v9 = (WebCore::SVGAnimationElement *)word_1969F0640[(__int16)v10];
  }
  WebCore::SVGElementFactory::createKnownElementWithName(a2, v5, v9, a3, &v19);
  v11 = v19;
  if (!v19)
  {
LABEL_20:
    WebCore::SVGUnknownElement::create((_DWORD **)a2, (uint64_t)v5, &v19);
    v15 = v19;
    v19 = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
    v11 = v15;
  }
  this = v18;
  v18 = v11;
LABEL_8:
  if (v11)
  {
    *((_BYTE *)v5 + 3402) = 1;
  }
  else
  {
    v16 = *(_QWORD *)(*((_QWORD *)v5 + 5) + 8);
    *(_DWORD *)(v16 + 24) += 2;
    v17 = v16;
    WebCore::Element::create((_DWORD **)a2, v16, (uint64_t *)&v19);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v18, (uint64_t *)&v19);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
    this = (WebCore::Document *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v17);
    v11 = v18;
  }
  *a4 = v11;
  return this;
}

double WebCore::Document::createDocumentFragment@<D0>(WebCore::Document *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  double result;

  v4 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v4 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v4 + 24) = 0xB00400000002;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = (char *)this + 96;
  if (!this)
    v5 = 0;
  *(_QWORD *)(v4 + 40) = v5;
  result = 0.0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)v4 = off_1E33A31A0;
  *a2 = v4;
  return result;
}

double WebCore::DocumentFragment::create@<D0>(WebCore::DocumentFragment *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0xB00400000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  result = 0.0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)v5 = off_1E33A31A0;
  *a2 = v5;
  return result;
}

uint64_t WebCore::Document::createTextNode@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x300300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v7 = *a2;
  if (*a2 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  *(_QWORD *)result = off_1E33A8078;
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::createComment@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x800100000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v7 = *a2;
  if (*a2 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  *(_QWORD *)result = off_1E33A15C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::createCDATASection@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;

  if ((*(_WORD *)(result + 3358) & 1) != 0)
  {
    *(_BYTE *)a3 = 6;
LABEL_8:
    *(_QWORD *)(a3 + 8) = 0;
    v7 = 1;
    goto LABEL_9;
  }
  v5 = result;
  if (*a2)
  {
    result = WTF::StringImpl::find();
    if (result != -1)
    {
      *(_BYTE *)a3 = 3;
      goto LABEL_8;
    }
  }
  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x400300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v5 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(v5 + 3324);
  v6 = (_DWORD *)*a2;
  if (*a2 || (v6 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v6 += 2;
  v7 = 0;
  *(_QWORD *)(result + 80) = v6;
  *(_QWORD *)result = off_1E33A0DB8;
  *(_QWORD *)a3 = result;
LABEL_9:
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t WebCore::Document::createProcessingInstruction@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>, int32x4_t a5@<Q0>)
{
  uint64_t v6;
  unint64_t v7;
  _WORD *v11;
  unsigned int v12;
  BOOL v13;
  unint64_t i;
  int v15;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unint64_t j;
  int v27;
  unsigned int v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _WORD *v35;
  unint64_t v36;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 isValidNameStart;
  int32x4_t v47;
  int isValidNamePart;
  int32x4_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *a2;
  if (!*a2)
  {
LABEL_70:
    v55 = v6;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Invalid qualified name: '", 26, &v55, 39, &v56);
    result = v55;
    v54 = v56;
    *(_BYTE *)a4 = 3;
    *(_QWORD *)(a4 + 8) = v54;
    *(_DWORD *)(a4 + 16) = 1;
    v55 = 0;
    v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v7 = *(unsigned int *)(v6 + 4);
  if (!(_DWORD)v7)
  {
LABEL_69:
    *(_DWORD *)v6 += 2;
    goto LABEL_70;
  }
  v11 = *(_WORD **)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    v12 = *(unsigned __int8 *)v11;
    if ((v12 | 0x20) - 97 >= 0x1A && v12 != 95 && v12 != 58)
      goto LABEL_77;
    if (v7 >= 2)
    {
      v13 = 0;
      for (i = 1; i != v7; v13 = i >= v7)
      {
        v15 = *((unsigned __int8 *)v11 + i);
        if ((v15 | 0x20u) - 97 >= 0x1A && (v15 - 48) >= 0xA)
        {
          v17 = v15 - 45;
          v18 = v17 > 0x32;
          v19 = (1 << v17) & 0x4000000002003;
          if (v18 || v19 == 0)
            break;
        }
        ++i;
      }
      if (!v13)
      {
LABEL_77:
        v43 = *a2;
        v44 = *(unsigned int *)(v6 + 4);
        v45 = *(_QWORD *)(v6 + 8);
        isValidNameStart = WebCore::isValidNameStart(v12, a5);
        v6 = v43;
        if (!isValidNameStart)
          goto LABEL_69;
        if (v44 >= 2)
        {
          isValidNamePart = WebCore::isValidNamePart(*(unsigned __int8 *)(v45 + 1), v47);
          v6 = v43;
          if (!isValidNamePart)
            goto LABEL_69;
          v50 = 2;
          do
          {
            v51 = v50;
            if (v44 == v50)
              break;
            v52 = WebCore::isValidNamePart(*(unsigned __int8 *)(v45 + v50), v49);
            v50 = v51 + 1;
          }
          while ((v52 & 1) != 0);
          v6 = v43;
          if (v51 < v44)
            goto LABEL_69;
        }
      }
    }
  }
  else
  {
    if ((unsigned __int16)((*v11 | 0x20) - 97) >= 0x1Au)
    {
      v24 = (unsigned __int16)*v11;
      if (v24 != 95 && v24 != 58)
        goto LABEL_42;
    }
    if (v7 >= 2)
    {
      v25 = 0;
      for (j = 1; j != v7; v25 = j >= v7)
      {
        v27 = (unsigned __int16)v11[j];
        if ((v27 | 0x20u) - 97 >= 0x1A && (v27 - 48) >= 0xA)
        {
          v29 = v27 - 45;
          v18 = v29 > 0x32;
          v30 = (1 << v29) & 0x4000000002003;
          if (v18 || v30 == 0)
            break;
        }
        ++j;
      }
      if (!v25)
      {
LABEL_42:
        v32 = 0;
        do
        {
          v33 = v6;
          v34 = v32 + 1;
          v35 = v11;
          result = (unsigned __int16)v11[v32];
          v36 = v7;
          if ((result & 0xFC00) == 0xD800 && v34 != v7)
          {
            if (v34 >= v7)
            {
              __break(1u);
              return result;
            }
            v38 = (unsigned __int16)v11[v34];
            v39 = (v38 & 0xFC00) == 56320;
            v40 = v38 + ((_DWORD)result << 10) - 56613888;
            if (v39)
              v34 = v32 + 2;
            else
              v34 = v32 + 1;
            if (v39)
              LODWORD(result) = v40;
          }
          if (v32)
          {
            v41 = WebCore::isValidNamePart(result, a5);
            v6 = v33;
            v7 = v36;
            v11 = v35;
            if (!v41)
              goto LABEL_69;
          }
          else
          {
            v42 = WebCore::isValidNameStart(result, a5);
            v6 = v33;
            v7 = v36;
            v11 = v35;
            if (!v42)
              goto LABEL_69;
          }
          v32 = v34;
        }
        while (v34 < v7);
      }
    }
  }
  if (!*a3 || (result = WTF::StringImpl::find(), result == -1))
  {
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0x700100000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = a1 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    v22 = *a3;
    if (*a3 || (v22 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
      *v22 += 2;
    *(_QWORD *)result = off_1E33A6788;
    *(_QWORD *)(result + 80) = v22;
    *(_QWORD *)(result + 88) = &unk_1E33A6928;
    *(_QWORD *)(result + 96) = 0;
    v23 = *a2;
    *a2 = 0;
    *(_QWORD *)(result + 104) = v23;
    *(_OWORD *)(result + 112) = 0uLL;
    *(_OWORD *)(result + 128) = 0uLL;
    *(_OWORD *)(result + 141) = 0uLL;
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 3;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::Document::createEditingTextNode@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x320300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v7 = *a2;
  if (*a2 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  *(_QWORD *)result = off_1E33A8078;
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::createCSSStyleDeclaration@<X0>(void (****a1)(WebCore::PropertySetCSSStyleDeclaration *__hidden this)@<X8>)
{
  uint64_t v3;
  void (***v4)(WebCore::PropertySetCSSStyleDeclaration *__hidden);
  void (**v5)(WebCore::PropertySetCSSStyleDeclaration *__hidden);
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v15;

  v3 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3 = 0x900000001;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = v3 + 32;
  *(_QWORD *)(v3 + 24) = 4;
  v4 = (void (***)(WebCore::PropertySetCSSStyleDeclaration *__hidden))bmalloc::api::isoAllocate();
  v5 = off_1E3399C18;
  *v4 = off_1E3399C18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = (void (**)(WebCore::PropertySetCSSStyleDeclaration *__hidden))v3;
  v4[4] = 0;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4 = *(void (****)(WebCore::PropertySetCSSStyleDeclaration *__hidden))(v3 + 8);
    v5 = *v4;
  }
  result = ((uint64_t (*)(_QWORD *))v5[2])(v4);
  *a1 = v4;
  if (*(_DWORD *)v3 == 1)
  {
    v9 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v9)
    {
      v10 = 16 * v9;
      v11 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v8);
          else
            *v12 -= 2;
        }
        v11 += 2;
        v10 -= 16;
      }
      while (v10);
    }
    v13 = *(WTF **)(v3 + 16);
    if ((WTF *)(v3 + 32) != v13 && v13 != 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v13, v8);
    }
    v15 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WTF::fastFree((WTF *)v3, v8);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

WTF::StringImpl *WebCore::Document::importNode@<X0>(WTF::StringImpl *this@<X0>, WebCore::Node *a2@<X1>, int a3@<W2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *((unsigned __int16 *)a2 + 14);
  v8 = v7 >> 12;
  if (v7 >> 12 == 11)
  {
    if ((v7 & 0x80) == 0)
    {
LABEL_3:
      if (a3)
        v9 = 2;
      else
        v9 = 0;
      this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Node *, _QWORD, uint64_t))(*(_QWORD *)a2 + 136))(a2, *(_QWORD *)(*((_QWORD *)this + 5) + 8), v9);
      *(_DWORD *)(a5 + 16) = 0;
      return this;
    }
    goto LABEL_11;
  }
  if (v8 > 8)
    goto LABEL_11;
  if (((1 << v8) & 0x19A) != 0)
    goto LABEL_3;
  if (v8 != 2)
  {
LABEL_11:
    *(_BYTE *)a5 = 6;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
    return this;
  }
  v10 = (_DWORD **)((char *)a2 + 88);
  v11 = (uint64_t)this;
  WebCore::Attr::value((uint64_t)a2, a4, &v14, a6);
  WebCore::Attr::create(v11, v10, (_DWORD **)&v14, &v15);
  v12 = v15;
  v15 = 0;
  v16 = 0;
  *(_QWORD *)a5 = v12;
  *(_DWORD *)(a5 + 16) = 0;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v16);
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v15);
  this = v14;
  v14 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::Document::adoptNode@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X2>, WebCore::TreeScope *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  WebCore::Node *v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::FrameTree *v21;
  uint64_t v22;
  const WebCore::Frame *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v6 = a2;
  v7 = this;
  {
    v9 = qword_1EE2F5808;
  }
  else
  {
    v9 = 0;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0;
  }
  LODWORD(qword_1EE2F5808) = v9 + 1;
  v10 = *((unsigned __int16 *)a2 + 14);
  if (v10 >> 12 != 2)
  {
    if (v10 >> 12 == 9)
    {
      *(_BYTE *)a5 = 6;
      *(_QWORD *)(a5 + 8) = 0;
LABEL_45:
      *(_DWORD *)(a5 + 16) = 1;
      goto LABEL_16;
    }
    if ((v10 & 0x80) != 0
      || (this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 192))(a2), (_DWORD)this)
      && (v19 = *(_QWORD *)(v7 + 528)) != 0
      && (v20 = *(_QWORD *)(v19 + 8)) != 0
      && ((v21 = (WebCore::FrameTree *)(v20 + 48), (v22 = *((_QWORD *)v6 + 14)) != 0)
        ? (v23 = *(const WebCore::Frame **)(v22 + 8))
        : (v23 = 0),
          this = WebCore::FrameTree::isDescendantOf(v21, v23),
          (_DWORD)this))
    {
      *(_BYTE *)a5 = 1;
      *(_QWORD *)(a5 + 8) = 0;
      goto LABEL_45;
    }
    v11 = *((_QWORD *)v6 + 4);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      this = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v11, v6, &v30);
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        v14 = *(_WORD *)(v11 + 30);
        if ((v14 & 0x400) == 0)
        {
          v15 = *(_WORD *)(v11 + 28);
          if ((v15 & 0xF000) == 0x9000)
          {
            this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v11, a2);
          }
          else
          {
            if ((v15 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
              v14 = *(_WORD *)(v11 + 30);
            }
            *(_WORD *)(v11 + 30) = v14 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
          }
        }
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
    }
    if ((_BYTE)v32)
    {
      v24 = v31;
      *(_BYTE *)a5 = v30;
      *(_QWORD *)(a5 + 8) = v24;
      goto LABEL_45;
    }
    if ((*((_BYTE *)v6 + 22) & 8) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195979FA4);
    }
    if (*((_QWORD *)v6 + 4))
    {
      __break(0xC471u);
      JUMPOUT(0x195979FC4);
    }
LABEL_13:
    a2 = (WebCore::Node *)*((_QWORD *)v6 + 5);
    if (a2 != (WebCore::Node *)(v7 + 96))
      this = WebCore::Node::moveTreeToNewScope((uint64_t)v6, a2, (WebCore::TreeScope *)(v7 + 96), a4);
    *((_DWORD *)v6 + 6) += 2;
    *(_QWORD *)a5 = v6;
    *(_DWORD *)(a5 + 16) = 0;
    goto LABEL_16;
  }
  v16 = *((_QWORD *)a2 + 10);
  if (!v16)
    goto LABEL_13;
  this = *(_QWORD *)(v16 + 8);
  if (!this)
    goto LABEL_13;
  *(_DWORD *)(this + 24) += 2;
  v17 = this;
  this = WebCore::Element::removeAttributeNode(this, a2, a3, a4, (uint64_t)&v30, a6);
  if (!(_DWORD)v32)
  {
    this = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)&v33, &v30);
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, v25);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    goto LABEL_13;
  }
  if ((_DWORD)v32 != 1)
  {
    v29 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Document::hasValidNamespaceForElements(v29);
  }
  v18 = v31;
  *(_BYTE *)a5 = v30;
  *(_QWORD *)(a5 + 8) = v18;
  *(_DWORD *)(a5 + 16) = 1;
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
LABEL_16:
  {
    LODWORD(qword_1EE2F5808) = qword_1EE2F5808 - 1;
    if (!(_DWORD)qword_1EE2F5808)
    {
      v12 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
      v13 = dword_1EE2F5804;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      if ((_DWORD)v13)
      {
        v26 = 0;
        v27 = 16 * v13;
        v28 = (_DWORD *)((char *)v12 + 16 * v13);
        do
        {
          this = WebCore::ScopedEventQueue::dispatchEvent(this, (WTF *)((char *)v12 + v26));
          v26 += 16;
        }
        while (v27 != v26);
        this = (uint64_t)WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v12, v28);
      }
      if (v12)
        return WTF::fastFree(v12, a2);
    }
  }
  else
  {
    unk_1EE2F5800 = 0;
    qword_1EE2F5808 = 0xFFFFFFFFLL;
    WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
  }
  return this;
}

BOOL WebCore::Document::hasValidNamespaceForElements(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  if (v1 && *(_DWORD *)(v1 + 4) && !a1[4] || v1 == WebCore::xmlAtomData && a1[4] != WebCore::XMLNames::xmlNamespaceURI)
    return 0;
  if (v1 == WebCore::xmlnsAtomData || (!v1 || !*(_DWORD *)(v1 + 4)) && a1[3] == WebCore::xmlnsAtomData)
    return a1[4] == WebCore::XMLNSNames::xmlnsNamespaceURI;
  return a1[4] != WebCore::XMLNSNames::xmlnsNamespaceURI;
}

uint64_t WebCore::createFallbackHTMLElement(uint64_t this, WebCore::Document *a2, const WebCore::QualifiedName *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  WebCore::JSCustomElementInterface *v16;
  WebCore::Element *v17;
  WebCore::Document *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::Element *v39;
  _DWORD *v40;
  WebCore::Document *v41;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v5 = (uint64_t *)this;
  v6 = *((_QWORD *)a2 + 87);
  if (!v6)
    goto LABEL_24;
  ++*(_DWORD *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 264);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 16) = v8 + 1;
    if (*(_QWORD *)(*(_QWORD *)a3 + 32) == WebCore::HTMLNames::xhtmlNamespaceURI)
    {
      v9 = *(_QWORD *)(v7 + 32);
      if (v9)
      {
        v10 = 0;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        for (i = *(_DWORD *)(v11 + 16) >> 8; ; i = v10 + v13)
        {
          v13 = i & *(_DWORD *)(v9 - 8);
          v14 = *(_QWORD *)(v9 + 16 * v13);
          if (!v14)
            break;
          v15 = v14 != -1 && v14 == v11;
          if (v15)
          {
            v16 = *(WebCore::JSCustomElementInterface **)(v9 + 16 * v13 + 8);
            if (!v16)
              break;
            ++*((_DWORD *)v16 + 4);
            WebCore::JSCustomElementInterface::createElement(v16, a2, (WebCore::HTMLMaybeFormAssociatedCustomElement **)this);
            v17 = (WebCore::Element *)*v5;
            WebCore::Node::setCustomElementState(*v5, (void *)1);
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v44 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)v17 + 5) + 8), v18);
              if (v44)
              {
                v45 = *(_QWORD *)(v44 + 40);
                if (v45)
                  WebCore::InspectorDOMAgent::didChangeCustomElementState(v45, v17);
              }
            }
            this = (uint64_t)WebCore::Element::enqueueToUpgrade((WebCore::Element *)*v5, v16);
            if (*((_DWORD *)v16 + 4) == 1)
              this = (*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)v16 + 16))(v16);
            else
              --*((_DWORD *)v16 + 4);
            if (*(_DWORD *)(v7 + 16) == 1)
            {
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
              v20 = 0;
            }
            else
            {
              v20 = 0;
              --*(_DWORD *)(v7 + 16);
            }
            goto LABEL_21;
          }
          ++v10;
        }
      }
    }
    if (v8)
      *(_DWORD *)(v7 + 16) = v8;
    else
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v20 = 1;
LABEL_21:
  if (*(_DWORD *)(v6 + 24) == 1)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  else
    --*(_DWORD *)(v6 + 24);
  if (v20)
  {
LABEL_24:
    v21 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 + 4);
      if ((_DWORD)v22)
      {
        v23 = *(unsigned __int8 **)(v21 + 8);
        if ((*(_BYTE *)(v21 + 16) & 4) != 0)
        {
          if (*v23 - 97 <= 0x19)
          {
            v24 = 0;
            while (1)
            {
              v25 = WebCore::customElementNameCharacterKind(unsigned char)::table[*v23];
              if (v25 == 2)
              {
                v24 = 1;
              }
              else
              {
                if (WebCore::customElementNameCharacterKind(unsigned char)::table[*v23])
                  v26 = v25 == 3;
                else
                  v26 = 1;
                if (v26)
                  break;
              }
              ++v23;
              if (!--v22)
                goto LABEL_52;
            }
          }
        }
        else if (*(unsigned __int16 *)v23 - 97 < 0x1A)
        {
          v24 = 0;
          v27 = &v23[2 * v22];
          while (1)
          {
            v28 = *(unsigned __int16 *)v23;
            if ((v28 & 0xF800) != 0xD800 || (v28 & 0x400) != 0)
            {
              v29 = *(unsigned __int16 *)v23;
            }
            else
            {
              v29 = *(unsigned __int16 *)v23;
              if (v27 - v23 != 2)
              {
                v46 = *((unsigned __int16 *)v23 + 1);
                v15 = (v46 & 0xFC00) == 56320;
                v29 = v46 + (v28 << 10) - 56613888;
                if (!v15)
                  v29 = *(unsigned __int16 *)v23;
              }
            }
            if (v29 - 65 < 0x1A)
              break;
            v30 = (char *)&WebCore::isPotentialCustomElementNameCharacter(char32_t)::ranges;
            v31 = 17;
            do
            {
              v32 = v31 >> 1;
              v33 = &v30[8 * (v31 >> 1)];
              v34 = *((_DWORD *)v33 + 1);
              v35 = v33 + 8;
              v31 += ~(v31 >> 1);
              if (v34 < v29)
                v30 = v35;
              else
                v31 = v32;
            }
            while (v31);
            if (v30 == (char *)&unk_1969F0640 || *(_DWORD *)v30 > v29)
              break;
            v36 = v29 == 45;
            if ((v28 & 0xFC00) != 0xD800 || v27 - v23 == 2)
            {
              v37 = 1;
            }
            else
            {
              v37 = 1;
              if ((*((_WORD *)v23 + 1) & 0xFC00) == 0xDC00)
                v37 = 2;
            }
            v24 |= v36;
            v23 += 2 * v37;
            if (v23 == v27)
            {
LABEL_52:
              if ((v24 & 1) == 0)
                break;
              v38 = bmalloc::api::isoAllocate();
              v39 = (WebCore::Element *)v38;
              *(_OWORD *)(v38 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v38 + 24) = 0x181C00000002;
              *(_QWORD *)(v38 + 32) = 0;
              *(_QWORD *)(v38 + 40) = (char *)a2 + 96;
              *(_OWORD *)(v38 + 48) = 0u;
              *(_OWORD *)(v38 + 64) = 0u;
              ++*((_DWORD *)a2 + 831);
              *(_QWORD *)(v38 + 80) = 0;
              *(_QWORD *)(v38 + 88) = 0;
              v40 = *(_DWORD **)a3;
              if (*(_QWORD *)a3)
                ++*v40;
              *(_QWORD *)(v38 + 96) = v40;
              *(_QWORD *)(v38 + 104) = 0;
              *(_QWORD *)v38 = off_1E33C1F80;
              this = WebCore::Node::setCustomElementState(v38, (void *)1);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*((_QWORD *)v39 + 5) + 8), v41);
                if (this)
                {
                  this = *(_QWORD *)(this + 40);
                  if (this)
                    this = WebCore::InspectorDOMAgent::didChangeCustomElementState(this, v39);
                }
              }
              goto LABEL_56;
            }
          }
        }
      }
    }
    this = bmalloc::api::isoAllocate();
    v39 = (WebCore::Element *)this;
    *(_OWORD *)(this + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(this + 24) = 0x111C00000002;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = (char *)a2 + 96;
    *(_OWORD *)(this + 48) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    ++*((_DWORD *)a2 + 831);
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = 0;
    v43 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      ++*v43;
    *(_QWORD *)(this + 96) = v43;
    *(_QWORD *)(this + 104) = 0;
    *(_QWORD *)this = off_1E321E008;
LABEL_56:
    *v5 = (uint64_t)v39;
  }
  return this;
}

uint64_t WebCore::Document::validateCustomElementName(WebCore::Document *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  BOOL v21;
  uint64_t v23;
  _QWORD v24[2];

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v3 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v3)
    return 1;
  v4 = *(unsigned __int8 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if (*v4 - 97 <= 0x19)
    {
      v5 = 0;
      while (1)
      {
        v6 = WebCore::customElementNameCharacterKind(unsigned char)::table[*v4];
        if (v6 == 2)
        {
          v5 = 1;
        }
        else
        {
          if (!WebCore::customElementNameCharacterKind(unsigned char)::table[*v4])
            return 4;
          if (v6 == 3)
            return 3;
        }
        ++v4;
        if (!--v3)
          goto LABEL_27;
      }
    }
    return 1;
  }
  if (*(unsigned __int16 *)v4 - 97 >= 0x1A)
    return 1;
  v5 = 0;
  v7 = &v4[2 * v3];
  do
  {
    v8 = *(unsigned __int16 *)v4;
    if ((v8 & 0xF800) != 0xD800 || v7 - v4 == 2)
    {
      v9 = *(unsigned __int16 *)v4;
    }
    else
    {
      v9 = *(unsigned __int16 *)v4;
      if ((v8 & 0x400) == 0)
      {
        v20 = *((unsigned __int16 *)v4 + 1);
        v21 = (v20 & 0xFC00) == 56320;
        v9 = v20 + (v8 << 10) - 56613888;
        if (!v21)
          v9 = *(unsigned __int16 *)v4;
      }
    }
    if (v9 - 65 < 0x1A)
      return 3;
    v10 = (char *)&WebCore::isPotentialCustomElementNameCharacter(char32_t)::ranges;
    v11 = 17;
    do
    {
      v12 = v11 >> 1;
      v13 = &v10[8 * (v11 >> 1)];
      v14 = *((_DWORD *)v13 + 1);
      v15 = v13 + 8;
      v11 += ~(v11 >> 1);
      if (v14 < v9)
        v10 = v15;
      else
        v11 = v12;
    }
    while (v11);
    if (v10 == (char *)&unk_1969F0640 || *(_DWORD *)v10 > v9)
      return 4;
    v16 = v9 == 45;
    if ((v8 & 0xFC00) != 0xD800 || v7 - v4 == 2)
    {
      v17 = 1;
    }
    else
    {
      v17 = 1;
      if ((*((_WORD *)v4 + 1) & 0xFC00) == 0xDC00)
        v17 = 2;
    }
    v5 |= v16;
    v4 += 2 * v17;
  }
  while (v4 != v7);
LABEL_27:
  if ((v5 & 1) == 0)
    return 2;
  v18 = WebCore::MathMLNames::annotation_xmlTag;
  if ((byte_1ECE83199 & 1) == 0)
  {
    v24[0] = "color-profile";
    v24[1] = 14;
    v23 = WebCore::MathMLNames::annotation_xmlTag;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE831A8, (uint64_t)v24);
    v18 = v23;
    byte_1ECE83199 = 1;
    v2 = *(_QWORD *)this;
  }
  if (v2 == *(_QWORD *)(WebCore::SVGNames::font_faceTag + 24)
    || v2 == *(_QWORD *)(WebCore::SVGNames::font_face_formatTag + 24)
    || v2 == *(_QWORD *)(WebCore::SVGNames::font_face_nameTag + 24)
    || v2 == *(_QWORD *)(WebCore::SVGNames::font_face_srcTag + 24)
    || v2 == *(_QWORD *)(WebCore::SVGNames::font_face_uriTag + 24)
    || v2 == *(_QWORD *)(WebCore::SVGNames::missing_glyphTag + 24)
    || v2 == *(_QWORD *)(v18 + 24)
    || v2 == qword_1ECE831A8)
  {
    return 5;
  }
  else
  {
    return 0;
  }
}

void WebCore::Document::createElementNS(const WTF::AtomString **this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::AtomString *a3@<X2>, uint64_t a4@<X8>, int32x4_t a5@<Q0>)
{
  int v5;
  const WTF::AtomString *v6;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int MathMLNode;
  uint64_t v15;
  uint64_t v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WebCore::Node *v18;
  WTF::StringImpl **v19;
  void *v20;
  int32x4_t v21;
  _DWORD *Interface;
  _DWORD *v23;
  WebCore::Node *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  BOOL v32;
  unint64_t i;
  int v34;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  int v41;
  BOOL v42;
  __int16 v43;
  unsigned __int8 *v44;
  int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::Element *v56;
  WebCore::QualifiedName::QualifiedNameImpl *v57;
  uint64_t v59;
  WebCore::QualifiedName::QualifiedNameImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  unint64_t j;
  int v76;
  unsigned int v78;
  uint64_t v79;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int v85;
  BOOL v86;
  unsigned int v87;
  int32x4_t v88;
  int32x4_t v89;
  uint64_t v90;
  char isValidNamePart;
  uint64_t v92;
  WebCore::QualifiedName::QualifiedNameImpl *v93;
  WebCore::QualifiedName::QualifiedNameImpl *v94;
  uint64_t v95;
  unsigned int v96;
  WebCore::Node *v97;

  v6 = a3;
  v10 = *a2;
  if (*a2 == (WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    WebCore::HTMLElementFactory::createKnownElement(a3, (const WTF::AtomString *)this, 0, 0, (uint64_t *)&v94);
    goto LABEL_9;
  }
  if (v10 == (WTF::StringImpl *)WebCore::SVGNames::svgNamespaceURI)
  {
    WebCore::SVGElementFactory::createKnownElement(a3, (const WTF::AtomString *)this, 0, (uint64_t *)&v94);
    goto LABEL_9;
  }
  if ((*((_QWORD *)this[85] + 89) & 0x200) == 0 || v10 != (WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI)
    goto LABEL_12;
  v11 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_39;
  }
  v12 = *(unsigned __int8 **)(v11 + 8);
  v13 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
LABEL_39:
    MathMLNode = WebCore::findMathMLNodeName<unsigned char>(v12, v13);
    goto LABEL_40;
  }
  MathMLNode = WebCore::findMathMLNodeName<char16_t>((unsigned __int16 *)v12, v13);
LABEL_40:
  if (MathMLNode >= 0xF5)
  {
    if ((unsigned __int16)(MathMLNode - 245) > 0xDu)
      MathMLNode = 0;
    else
      MathMLNode = word_1969F0674[(__int16)MathMLNode - 245];
  }
  WebCore::MathMLElementFactory::createKnownElement(MathMLNode, (uint64_t)this, (uint64_t *)&v94);
LABEL_9:
  if (v94)
  {
    *(_QWORD *)a4 = v94;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
LABEL_12:
  WebCore::Document::parseQualifiedName(a2, v6, (uint64_t)&v94, a5);
  v15 = v96;
  if (v96)
  {
    if (v96 == 1)
    {
      v16 = v95;
      v95 = 0;
      *(_BYTE *)a4 = (_BYTE)v94;
      *(_QWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = 1;
LABEL_15:
      ((void (*)(WebCore::Node **, WebCore::QualifiedName::QualifiedNameImpl **))off_1E33A33C0[v15])(&v97, &v94);
      return;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_51;
  }
  v17 = v94;
  v93 = v94;
  v94 = 0;
  if (!WebCore::Document::hasValidNamespaceForElements(v93))
  {
    *(_BYTE *)a4 = 11;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
LABEL_21:
    v19 = (WTF::StringImpl **)v93;
    v93 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
        WTF::fastFree(v25, v26);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    goto LABEL_15;
  }
  if (*((_QWORD *)v17 + 4) != WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    WebCore::Document::createElement((WebCore::Document *)this, (const WebCore::QualifiedName *)&v93, 0, &v97);
    v18 = v97;
LABEL_19:
    *(_QWORD *)a4 = v18;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_21;
  }
  WebCore::HTMLElementFactory::createKnownElement((WebCore::HTMLElementFactory *)&v93, (const WebCore::QualifiedName *)this, 0, 0, &v97);
  v18 = v97;
  if (v97)
    goto LABEL_19;
  v92 = v15;
  v6 = this[87];
  if (v6)
  {
    ++*((_DWORD *)v6 + 6);
    v15 = *((_QWORD *)v6 + 33);
    if (!v15)
    {
LABEL_53:
      if (*((_DWORD *)v6 + 6) == 1)
        (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v6 + 72))(v6);
      else
        --*((_DWORD *)v6 + 6);
      goto LABEL_55;
    }
    v5 = *(_DWORD *)(v15 + 16);
    *(_DWORD *)(v15 + 16) = v5 + 1;
    Interface = (_DWORD *)WebCore::CustomElementRegistry::findInterface(v15, (uint64_t)&v93);
    if (Interface)
    {
      v23 = Interface;
      ++Interface[4];
      WebCore::JSCustomElementInterface::constructElementWithFallback((WebCore::JSCustomElementInterface *)Interface, (WebCore::Document *)this, (const WebCore::QualifiedName *)&v93, (WebCore::Element **)a4);
      *(_DWORD *)(a4 + 16) = 0;
      if (v23[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
      else
        --v23[4];
      if (*(_DWORD *)(v15 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      else
        --*(_DWORD *)(v15 + 16);
      if (*((_DWORD *)v6 + 6) == 1)
        (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v6 + 72))(v6);
      else
        --*((_DWORD *)v6 + 6);
LABEL_34:
      v24 = v97;
      v97 = 0;
      v15 = v92;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          v15 = v92;
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v20);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
          v15 = v92;
        }
      }
      goto LABEL_21;
    }
LABEL_51:
    if (v5)
      *(_DWORD *)(v15 + 16) = v5;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    goto LABEL_53;
  }
LABEL_55:
  v27 = *((_QWORD *)v93 + 3);
  if (!v27 || (v28 = *(unsigned int *)(v27 + 4), !(_DWORD)v28))
  {
LABEL_173:
    *(_BYTE *)a4 = 3;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_34;
  }
  v29 = *(_DWORD *)(v27 + 16);
  v30 = *(unsigned __int8 **)(v27 + 8);
  if ((v29 & 4) != 0)
  {
    v31 = *v30;
    if ((v31 | 0x20u) - 97 < 0x1A || v31 == 95 || v31 == 58)
    {
      if (v28 < 2)
        goto LABEL_73;
      v32 = 0;
      for (i = 1; i != v28; v32 = i >= v28)
      {
        v34 = v30[i];
        if ((v34 | 0x20u) - 97 >= 0x1A && (v34 - 48) >= 0xA)
        {
          v36 = v34 - 45;
          v37 = v36 > 0x32;
          v38 = (1 << v36) & 0x4000000002003;
          v39 = v37 || v38 == 0;
          if (v39)
            break;
        }
        ++i;
      }
      if (v32)
        goto LABEL_72;
    }
    if (WebCore::isValidNameStart(*v30, v21))
    {
      if (v28 < 2)
        goto LABEL_72;
      if (WebCore::isValidNamePart(v30[1], v88))
      {
        v90 = 2;
        while (v28 != v90)
        {
          isValidNamePart = WebCore::isValidNamePart(v30[v90++], v89);
          if ((isValidNamePart & 1) == 0)
          {
            if (v90 - 1 >= v28)
              goto LABEL_72;
            goto LABEL_173;
          }
        }
        goto LABEL_72;
      }
    }
    goto LABEL_173;
  }
  v43 = *(_WORD *)v30;
  v31 = *(_WORD *)v30;
  if ((unsigned __int16)((*(_WORD *)v30 | 0x20) - 97) < 0x1Au || *(_WORD *)v30 == 95 || *(_WORD *)v30 == 58)
  {
    if (v28 < 2)
      goto LABEL_84;
    v74 = 0;
    for (j = 1; j != v28; v74 = j >= v28)
    {
      v76 = *(unsigned __int16 *)&v30[2 * j];
      if ((v76 | 0x20u) - 97 >= 0x1A && (v76 - 48) >= 0xA)
      {
        v78 = v76 - 45;
        v37 = v78 > 0x32;
        v79 = (1 << v78) & 0x4000000002003;
        if (v37 || v79 == 0)
          break;
      }
      ++j;
    }
    if (v74)
    {
LABEL_72:
      if ((v29 & 4) != 0)
      {
LABEL_73:
        if ((v31 - 97) <= 0x19)
        {
          v40 = 0;
          while (1)
          {
            v41 = WebCore::customElementNameCharacterKind(unsigned char)::table[*v30];
            if (v41 == 2)
            {
              v40 = 1;
            }
            else
            {
              if (WebCore::customElementNameCharacterKind(unsigned char)::table[*v30])
                v42 = v41 == 3;
              else
                v42 = 1;
              if (v42)
                break;
            }
            ++v30;
            if (!--v28)
              goto LABEL_99;
          }
        }
LABEL_104:
        v59 = bmalloc::api::isoAllocate();
        v56 = (WebCore::Element *)v59;
        *(_OWORD *)(v59 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v59 + 24) = 0x111C00000002;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 40) = this + 12;
        *(_OWORD *)(v59 + 48) = 0u;
        *(_OWORD *)(v59 + 64) = 0u;
        ++*((_DWORD *)this + 831);
        *(_QWORD *)(v59 + 80) = 0;
        *(_QWORD *)(v59 + 88) = 0;
        v60 = v93;
        if (v93)
          ++*(_DWORD *)v93;
        *(_QWORD *)(v59 + 96) = v60;
        *(_QWORD *)(v59 + 104) = 0;
        *(_QWORD *)v59 = off_1E321E008;
LABEL_103:
        *(_QWORD *)a4 = v56;
        *(_DWORD *)(a4 + 16) = 0;
        goto LABEL_34;
      }
      v43 = *(_WORD *)v30;
LABEL_84:
      if ((unsigned __int16)(v43 - 97) < 0x1Au)
      {
        v40 = 0;
        v44 = &v30[2 * v28];
        while (1)
        {
          v45 = *(unsigned __int16 *)v30;
          if ((v45 & 0xF800) != 0xD800 || v44 - v30 == 2)
          {
            v46 = *(unsigned __int16 *)v30;
          }
          else
          {
            v46 = *(unsigned __int16 *)v30;
            if ((v45 & 0x400) == 0)
            {
              v73 = *((unsigned __int16 *)v30 + 1);
              v39 = (v73 & 0xFC00) == 56320;
              v46 = v73 + (v45 << 10) - 56613888;
              if (!v39)
                v46 = *(unsigned __int16 *)v30;
            }
          }
          if (v46 - 65 < 0x1A)
            break;
          v47 = (unsigned __int16 *)&WebCore::isPotentialCustomElementNameCharacter(char32_t)::ranges;
          v48 = 17;
          do
          {
            v49 = v48 >> 1;
            v50 = &v47[4 * (v48 >> 1)];
            v51 = *((_DWORD *)v50 + 1);
            v52 = v50 + 4;
            v48 += ~(v48 >> 1);
            if (v51 < v46)
              v47 = v52;
            else
              v48 = v49;
          }
          while (v48);
          if (v47 == word_1969F0640 || *(_DWORD *)v47 > v46)
            break;
          v53 = v46 == 45;
          if ((v45 & 0xFC00) != 0xD800 || v44 - v30 == 2)
          {
            v54 = 1;
          }
          else
          {
            v54 = 1;
            if ((*((_WORD *)v30 + 1) & 0xFC00) == 0xDC00)
              v54 = 2;
          }
          v40 |= v53;
          v30 += 2 * v54;
          if (v30 == v44)
          {
LABEL_99:
            if ((v40 & 1) == 0)
              goto LABEL_104;
            v55 = bmalloc::api::isoAllocate();
            v56 = (WebCore::Element *)v55;
            *(_OWORD *)(v55 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v55 + 24) = 0x181C00000002;
            *(_QWORD *)(v55 + 32) = 0;
            *(_QWORD *)(v55 + 40) = this + 12;
            *(_OWORD *)(v55 + 48) = 0u;
            *(_OWORD *)(v55 + 64) = 0u;
            ++*((_DWORD *)this + 831);
            *(_QWORD *)(v55 + 80) = 0;
            *(_QWORD *)(v55 + 88) = 0;
            v57 = v93;
            if (v93)
              ++*(_DWORD *)v93;
            *(_QWORD *)(v55 + 96) = v57;
            *(_QWORD *)(v55 + 104) = 0;
            *(_QWORD *)v55 = off_1E33C1F80;
            WebCore::Node::setCustomElementState(v55, (void *)1);
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v61 = *(_QWORD *)(*((_QWORD *)v56 + 5) + 8);
              v62 = *(_QWORD *)(v61 + 528);
              if (v62)
              {
                v63 = *(_QWORD *)(v62 + 8);
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 24);
                  if (v64)
                  {
                    v65 = *(_QWORD *)(v64 + 8);
                    if (v65)
                      goto LABEL_180;
                  }
                }
              }
              v68 = *(_QWORD *)(v61 + 2632);
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 8);
                if (v69)
                {
                  v70 = *(_QWORD *)(v69 + 528);
                  if (v70)
                  {
                    v71 = *(_QWORD *)(v70 + 8);
                    if (v71)
                    {
                      v72 = *(_QWORD *)(v71 + 24);
                      if (v72)
                      {
                        v65 = *(_QWORD *)(v72 + 8);
                        if (v65)
                        {
LABEL_180:
                          v66 = *(_QWORD *)(*(_QWORD *)(v65 + 80) + 8);
                          if (v66)
                          {
                            v67 = *(_QWORD *)(v66 + 40);
                            if (v67)
                              WebCore::InspectorDOMAgent::didChangeCustomElementState(v67, v56);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_103;
          }
        }
      }
      goto LABEL_104;
    }
  }
  v81 = 0;
  while (1)
  {
    v82 = v81 + 1;
    v83 = *(unsigned __int16 *)&v30[2 * v81];
    if ((v83 & 0xFC00) != 0xD800 || v82 == v28)
      goto LABEL_158;
    if (v82 >= v28)
      break;
    v85 = *(unsigned __int16 *)&v30[2 * v82];
    v86 = (v85 & 0xFC00) == 56320;
    v87 = (v83 << 10) - 56613888 + v85;
    if (v86)
      v82 = v81 + 2;
    else
      v82 = v81 + 1;
    if (v86)
      v83 = v87;
LABEL_158:
    if (v81)
    {
      if (!WebCore::isValidNamePart(v83, v21))
        goto LABEL_173;
    }
    else if (!WebCore::isValidNameStart(v83, v21))
    {
      goto LABEL_173;
    }
    v81 = v82;
    if (v82 >= v28)
      goto LABEL_72;
  }
  __break(1u);
}

void WebCore::Document::parseQualifiedName(WTF::StringImpl **this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;

  WebCore::Document::parseQualifiedName(a2, (uint64_t)&v16, a4);
  v7 = v18;
  if (!v18)
  {
    v8 = v16;
    v9 = v17;
    v16 = 0;
    v17 = 0;
    v14 = v8;
    v15 = v9;
    WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)a3, &v14, &v15, this);
    *(_DWORD *)(a3 + 16) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v10);
      else
        *(_DWORD *)v8 -= 2;
    }
    goto LABEL_8;
  }
  if (v18 == 1)
  {
    v11 = v17;
    v17 = 0;
    *(_BYTE *)a3 = (_BYTE)v16;
    *(_QWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 16) = 1;
LABEL_8:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringES8_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v7])(&v14, &v16);
    return;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::Document::setVisualUpdatesAllowed(v12, v13);
}

void WebCore::Document::setVisualUpdatesAllowed(uint64_t a1, int a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 2)
  {
    if ((*(_QWORD *)(a1 + 2528) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(a1 + 2528) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v5 = *(_QWORD *)(a1 + 528);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 288)) == 0 || *(_BYTE *)(v7 + 1382))
        WebCore::Document::setVisualUpdatesAllowed((WebCore::Document *)a1);
    }
  }
  else if (!a2)
  {
    if (*(_BYTE *)(a1 + 3414))
    {
      *(_BYTE *)(a1 + 3414) = 0;
      v2 = a1 + 2496;
      v3 = *(double *)(*(_QWORD *)(a1 + 680) + 400);
      *(_QWORD *)(a1 + 2520) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
      WebCore::TimerBase::setNextFireTime(v2, v3 + v4);
    }
  }
}

void WebCore::Document::setVisualUpdatesAllowed(WebCore::Document *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::RenderView *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  if (*((_BYTE *)this + 3414))
    return;
  *((_BYTE *)this + 3414) = 1;
  if ((*((_QWORD *)this + 316) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2496));
  v2 = *((_QWORD *)this + 66);
  if (!v2 || (v3 = *(_QWORD **)(v2 + 8)) == 0)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_26;
  }
  v4 = v3[36];
  v5 = v4 == 0;
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    v6 = *((_QWORD *)this + 243);
    if (v6)
    {
      if ((*(_QWORD *)(v4 + 384) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v4 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || (*(_BYTE *)(v6 + 20) & 0xF8) != 0)
      {
        WebCore::Document::updateLayout(this, 0, 0);
        v7 = *((_QWORD *)this + 66);
        if (!v7 || (v3 = *(_QWORD **)(v7 + 8)) == 0)
        {
          v5 = 0;
          goto LABEL_25;
        }
      }
    }
  }
  v8 = v3[3];
  if (v8)
  {
    v9 = *(WebCore::Page **)(v8 + 8);
    if (v9)
    {
      ++*(_DWORD *)v9;
      if (*(_QWORD **)(v3[16] + 8) == v3)
      {
        *(_WORD *)(v4 + 1312) |= 0x20u;
        if ((*((_WORD *)v9 + 330) & 0x10) != 0)
        {
          v10 = *(_QWORD *)(*((_QWORD *)this + 66) + 8);
          v11 = (unsigned int *)(v10 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          v13 = *(_QWORD *)(v10 + 280);
          ++*(_DWORD *)v13;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 16) + 368))(*(_QWORD *)(v13 + 16), 16);
          if (!*(_DWORD *)v13)
          {
            __break(0xC471u);
            JUMPOUT(0x19597B6ECLL);
          }
          --*(_DWORD *)v13;
          do
          {
            v14 = __ldaxr(v11);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v11));
          if (!v15)
          {
            atomic_store(1u, v11);
            v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v28 = off_1E31FE290;
            v28[1] = v11;
            v30 = v28;
            WTF::ensureOnMainThread();
            if (v30)
              (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          }
        }
      }
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v25, v26);
        if (!v4)
          goto LABEL_26;
        goto LABEL_25;
      }
      --*(_DWORD *)v9;
    }
  }
  if (v4)
LABEL_25:
    WebCore::LocalFrameView::updateCompositingLayersAfterLayout((_QWORD *)v4);
LABEL_26:
  v16 = (WebCore::RenderView *)*((_QWORD *)this + 243);
  if (v16)
  {
    ++*((_DWORD *)v16 + 4);
    WebCore::RenderView::repaintViewAndCompositedLayers(v16);
    v17 = *((_DWORD *)v16 + 4);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19597B668);
    }
    *((_DWORD *)v16 + 4) = v17 - 1;
  }
  v18 = *((_QWORD *)this + 66);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      v22 = *(_QWORD *)(v19 + 280);
      ++*(_DWORD *)v22;
      (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 1064))(*(_QWORD *)(v22 + 16));
      if (!*(_DWORD *)v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19597B688);
      }
      --*(_DWORD *)v22;
      do
      {
        v23 = __ldaxr(v20);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v20));
      if (!v24)
      {
        atomic_store(1u, v20);
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v27 = off_1E31FE290;
        v27[1] = v20;
        v29 = v27;
        WTF::ensureOnMainThread();
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      }
    }
  }
  if (!v5)
  {
    if (*(_DWORD *)(v4 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
}

void WebCore::Document::setVisualUpdatesAllowedByClient(WebCore::Document *this, int a2)
{
  if (a2
    && ((*((_QWORD *)this + 316) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 316) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && !*((_BYTE *)this + 3414))
  {
    WebCore::Document::setVisualUpdatesAllowed(this);
  }
}

WTF::StringImpl *WebCore::Document::characterSetWithUTF8Fallback@<X0>(WebCore::Document *this@<X0>, void *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  int v6;
  WTF::StringImpl *v7;

  WebCore::Document::encoding((uint64_t)this, a2, &v7);
  result = v7;
  if (!v7)
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  *a3 = result;
  if (!v6)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  *(_DWORD *)result = v6;
  return result;
}

uint64_t WebCore::Document::defaultCharsetForLegacyBindings@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(this + 528);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_DWORD **)(*(_QWORD *)(this + 680) + 344);
  if (v3)
    *v3 += 2;
  *a2 = v3;
  return this;
}

WebCore::TextResourceDecoder *WebCore::Document::setCharset(WebCore::TextResourceDecoder *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  const char *v7;
  char *v8;
  __int16 v9;
  uint64_t v10;
  const char *v11[2];

  v2 = *((_QWORD *)this + 218);
  if (v2)
  {
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v4 = 0;
      v5 = 0x100000000;
    }
    v7 = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
    v8 = v6;
    v11[0] = v7;
    v11[1] = v6;
    if (v6 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v11))
      {
        v9 = 165;
      }
      else
      {
        v9 = 92;
      }
    }
    else
    {
      v9 = 92;
    }
    if (v8 && !*(_BYTE *)(v2 + 94))
    {
      *(_QWORD *)(v2 + 16) = v7;
      *(_QWORD *)(v2 + 24) = v8;
      *(_WORD *)(v2 + 32) = v9;
      v10 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *(_DWORD *)(v2 + 56) = 6;
    }
    return WTF::RefCounted<WebCore::TextResourceDecoder>::deref((WebCore::TextResourceDecoder *)v2, v6);
  }
  return this;
}

_QWORD *std::exchange[abi:sn180100]<WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  *result = v5;
  result[1] = v6;
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(_QWORD *)(v8 + 8 * i);
        if (v11 != -1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr((unsigned int *)v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, (unsigned int *)v11));
            if (!v13)
            {
              v19 = v9;
              v20 = i;
              v18 = v8;
              atomic_store(1u, (unsigned int *)v11);
              v14 = *(unsigned int *)(v11 + 28);
              if ((_DWORD)v14)
              {
                v17 = v11;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
                v11 = v17;
              }
              v15 = *(WTF **)(v11 + 16);
              if (v15)
              {
                *(_QWORD *)(v11 + 16) = 0;
                *(_DWORD *)(v11 + 24) = 0;
                v16 = v11;
                WTF::fastFree(v15, a2);
                v11 = v16;
              }
              WTF::fastFree((WTF *)v11, a2);
              v8 = v18;
              v9 = v19;
              i = v20;
            }
          }
        }
      }
    }
    result = (_QWORD *)WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  a2[1] = a3[1];
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *result = a2;
    result[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *result = a2;
    result[1] = 0;
  }
  result[2] = v3;
  result[3] = v3;
  result[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

void WebCore::Document::setXMLVersion(WebCore::Document *this, const WTF::String *a2)
{
  WebCore::XMLDocumentParser::supportsXMLVersion(a2, a2);
}

uint64_t *sub_19597BBD4(uint64_t *result)
{
  _QWORD *v1;
  WTF::StringImpl **v2;
  uint64_t v3;
  char v4;
  char v5;

  if ((result & 1) != 0)
  {
    result = WTF::String::operator=((uint64_t *)(v3 + 1704), v2);
    v4 = 0;
    v5 = 0;
    v1[1] = 0;
    v1[2] = 0;
    *v1 = 0;
  }
  else
  {
    v1[1] = 0;
    v5 = 1;
    v4 = 6;
  }
  *(_BYTE *)v1 = v4;
  *((_BYTE *)v1 + 16) = v5;
  return result;
}

uint64_t WebCore::Document::setXMLStandalone(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 1;
  else
    v2 = 2;
  *(_BYTE *)(this + 3369) = v2;
  return this;
}

WTF::StringImpl *WebCore::Document::setDocumentURI(WebCore::Document *this, const WTF::String *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  char v10;

  v4 = *((unsigned int *)this + 292);
  if ((_DWORD)v4 != -1)
  {
    v5 = (WebCore::Document *)((char *)this + 1128);
    if (!(_DWORD)v4)
    {
      v6 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v6 += 2;
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      return WebCore::Document::updateBaseURL(this);
    }
    ((void (*)(char *, WTF::StringImpl *))off_1E33A33A0[v4])(&v10, v5);
  }
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *((_QWORD *)this + 141) = v8;
  *((_DWORD *)this + 292) = 0;
  return WebCore::Document::updateBaseURL(this);
}

WTF::StringImpl *WebCore::Document::overrideMIMEType(WebCore::Document *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::Document::caretRangeFromPoint(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, WebCore::Range **a5@<X8>)
{
  int8x8_t v6;
  int32x2_t v7;
  int v8;
  int v9;
  WebCore::Document *v10;
  WebCore::Range *v11;
  WebCore *v12;
  const WebCore::SimpleRange *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  int8x8_t v18;
  int v19;
  int32x2_t v20;
  int v21;
  int32x2_t v22;
  int v23;
  char v24;

  v6 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(a3, a2), (int32x2_t)0xFE000000FE000000);
  v18 = vorr_s8((int8x8_t)(*(_QWORD *)&v6 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a3, a2), 6uLL)), v6));
  WebCore::Document::caretPositionFromPoint(a1, (int32x2_t *)&v18, a4, (uint64_t)&v22);
  if (!v24)
  {
    *a5 = 0;
    return;
  }
  v7 = v22;
  v8 = *(_DWORD *)(*(_QWORD *)&v22 + 24);
  v18 = (int8x8_t)v22;
  v9 = v23;
  v19 = v23;
  *(_DWORD *)(*(_QWORD *)&v22 + 24) = v8 + 4;
  v20 = v7;
  v21 = v9;
  v10 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)&v7 + 40) + 8);
  v11 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v12 = WebCore::Range::Range(v11, v10);
  WebCore::setBothEndpoints(v12, (WebCore::Range *)&v18, v13);
  *a5 = v11;
  v15 = *(_DWORD *)(*(_QWORD *)&v7 + 24) - 2;
  if (*(_DWORD *)(*(_QWORD *)&v7 + 24) == 2)
  {
    if ((*(_WORD *)(*(_QWORD *)&v7 + 30) & 0x400) != 0)
      goto LABEL_12;
    WebCore::Node::removedLastRef(*(WebCore::Node **)&v7, v14);
    v15 = *(_DWORD *)(*(_QWORD *)&v7 + 24);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)&v7 + 24) = v15;
  }
  v16 = v15 - 2;
  if (v16)
  {
    *(_DWORD *)(*(_QWORD *)&v7 + 24) = v16;
    goto LABEL_6;
  }
LABEL_12:
  if ((*(_WORD *)(*(_QWORD *)&v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(*(WebCore::Node **)&v7, v14);
    v16 = *(_DWORD *)(*(_QWORD *)&v7 + 24);
LABEL_6:
    v17 = v16 - 2;
    if (v17)
    {
      *(_DWORD *)(*(_QWORD *)&v7 + 24) = v17;
      return;
    }
  }
  if ((*(_WORD *)(*(_QWORD *)&v7 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef(*(WebCore::Node **)&v7, v14);
}

void WebCore::Document::caretPositionFromPoint(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WebCore::Element *v11;
  int v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  int v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  unsigned int v18;
  int v19;
  WebCore::Node *v20;
  int v21;
  int v22;
  WebCore::Node *v23;
  int v24;
  BOOL v25;
  WebCore::Node *v26[2];
  WebCore::Node *v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  if (!*(_QWORD *)(a1 + 1944)
    || *(_BYTE *)(a1 + 3405)
    || (v31 = 0,
        v7 = (WTF *)(a1 + 96),
        WebCore::TreeScope::nodeFromPoint(a1 + 96, a2, (const WebCore::LayoutPoint *)&v31, a3, &v30),
        (v8 = v30) == 0))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  WebCore::Document::updateLayout(a1, 2u, 0);
  v10 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    v30 = 0;
LABEL_35:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    return;
  }
  ++*(_DWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    if ((*(_BYTE *)(v10 + 45) & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      v11 = *(WebCore::Element **)(*(_QWORD *)(v10 + 24) + 8);
      if (v11 && (*((_WORD *)v11 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19597C184);
      }
    }
    v12 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 636) >> 18) & 3;
    if (v12)
    {
      v25 = (*(_BYTE *)(v10 + 96) & 0x1F) != 0xD && (*(_BYTE *)(v10 + 96) & 0x1Eu) - 14 > 0xFFFFFFF5;
      if (!v25
        && (v12 == 2 || v11 && !WebCore::Element::isRelevantToUser(v11))
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        *(_DWORD *)(v8 + 24) += 2;
        *(_QWORD *)a4 = v8;
        *(_DWORD *)(a4 + 8) = 0;
LABEL_55:
        *(_BYTE *)(a4 + 16) = 1;
        goto LABEL_33;
      }
    }
  }
  (*(void (**)(WebCore::Node **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 344))(v26, v10, &v31, a3);
  WebCore::Position::parentAnchoredEquivalent((uint64_t)v26, (uint64_t)&v27);
  v13 = v26[0];
  v26[0] = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v9);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v27;
  if (!v27)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_33;
  }
  if ((v29 & 7u) - 1 <= 1)
    v14 = (WebCore::Node *)*((_QWORD *)v27 + 4);
  v15 = v28;
  *((_DWORD *)v14 + 6) += 2;
  WebCore::TreeScope::retargetToScope(v7, v14, v26);
  v16 = v26[0];
  v26[0] = 0;
  if (*(_DWORD *)(v8 + 24) != 2)
  {
    *(_DWORD *)(v8 + 24) -= 2;
LABEL_20:
    v26[0] = 0;
    goto LABEL_21;
  }
  if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
    goto LABEL_20;
  WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  v23 = v26[0];
  v26[0] = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v9);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
LABEL_21:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v14, v9);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
  v17 = v27;
  if (!v27)
  {
    v8 = 0;
    if (v16)
      v24 = 0;
    else
      v24 = v15;
    v30 = 0;
    *(_QWORD *)a4 = v16;
    *(_DWORD *)(a4 + 8) = v24;
    goto LABEL_55;
  }
  v18 = v29 & 7;
  if (v18 > 4)
  {
    v20 = 0;
  }
  else
  {
    v19 = 1 << v18;
    v20 = v27;
    if ((v19 & 0x19) == 0)
      v20 = (WebCore::Node *)*((_QWORD *)v27 + 4);
  }
  if (v16 == v20)
    v21 = v15;
  else
    v21 = 0;
  v30 = 0;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = 1;
  v27 = 0;
  if (*((_DWORD *)v17 + 6) == 2)
  {
    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v17, v9);
    v8 = 0;
  }
  else
  {
    v8 = 0;
    *((_DWORD *)v17 + 6) -= 2;
  }
LABEL_33:
  v22 = *(_DWORD *)(v10 + 16);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19597C164);
  }
  *(_DWORD *)(v10 + 16) = v22 - 1;
  v30 = 0;
  if (v8)
    goto LABEL_35;
}

void WebCore::SimpleRange::~SimpleRange(WebCore::SimpleRange *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

uint64_t WebCore::Document::updateLayoutIgnorePendingStylesheets(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return WebCore::Document::updateLayout(a1, a2 | 2, a3);
}

uint64_t WebCore::Document::isBodyPotentiallyScrollable(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t result;
  _BYTE v20[8];
  WTF::StringImpl *v21;
  char v22;

  if ((a2[8] & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((a2[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v4 = *(_QWORD *)(a1 + 1272);
  v20[0] = 0;
  v22 = 0;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 264))(v4, v20);
  if (v22)
  {
    v7 = v21;
    v21 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        if (!v6)
          return 0;
        goto LABEL_8;
      }
      *(_DWORD *)v7 -= 2;
    }
  }
  if (!v6)
    return 0;
LABEL_8:
  v8 = *(_QWORD *)(a1 + 1272);
  v20[0] = 0;
  v22 = 0;
  v10 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 264))(v8, v20);
  if (v22)
  {
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if ((*(_QWORD *)(v10 + 16) & 0x1C00) == 0 || (*(_QWORD *)(v10 + 16) & 0xE000) == 0)
    return 0;
  v20[0] = 0;
  v22 = 0;
  v14 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a2 + 264))(a2, v20);
  if (!v22)
    goto LABEL_20;
  v15 = v21;
  v21 = 0;
  if (!v15)
    goto LABEL_20;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_20:
    if (v14)
      goto LABEL_21;
    return 0;
  }
  WTF::StringImpl::destroy(v15, v13);
  if (!v14)
    return 0;
LABEL_21:
  v20[0] = 0;
  v22 = 0;
  v17 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a2 + 264))(a2, v20);
  if (v22)
  {
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  return (*(_QWORD *)(v17 + 16) & 0xE000) != 0 && (*(_QWORD *)(v17 + 16) & 0x1C00) != 0;
}

uint64_t WebCore::Document::scrollingElementForAPI(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 3384) == 2 && (*(_QWORD *)(*((_QWORD *)this + 85) + 664) & 1) != 0)
    WebCore::Document::updateLayout((uint64_t)this, 2u, 0);
  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 664) & 1) != 0)
  {
    result = *((_QWORD *)this + 159);
    if (*((_BYTE *)this + 3384) != 2 || !result)
      return result;
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = *(_QWORD *)(result + 80);
      if (v5)
      {
        while ((*(_WORD *)(v5 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          result = 0;
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            return result;
        }
        *(_DWORD *)(v5 + 24) += 2;
        if (WebCore::Document::isBodyPotentiallyScrollable((uint64_t)this, (_QWORD *)v5))
          result = 0;
        else
          result = v5;
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          v7 = result;
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
          return v7;
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
        return result;
      }
    }
    return 0;
  }
  v3 = *((_QWORD *)this + 159);
  if (!v3)
    return 0;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return 0;
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
    return 0;
  while ((*(_WORD *)(v4 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    result = 0;
    v4 = *(_QWORD *)(v4 + 56);
    if (!v4)
      return result;
  }
  return v4;
}

uint64_t WebCore::Document::scrollingElement(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 664) & 1) == 0)
    return WebCore::Document::body(this);
  if (*((_BYTE *)this + 3384) != 2)
    return *((_QWORD *)this + 159);
  result = WebCore::Document::body(this);
  if (result)
  {
    v3 = result;
    *(_DWORD *)(result + 24) += 2;
    if (WebCore::Document::isBodyPotentiallyScrollable((uint64_t)this, (_QWORD *)result))
      result = 0;
    else
      result = v3;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v5 = result;
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
      return v5;
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Document::body(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 159);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    return 0;
  }
  for (result = *(_QWORD *)(v1 + 80); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      break;
    }
  }
  return result;
}

uint64_t WebCore::Document::setTitle(uint64_t this, WTF::StringImpl *a2, __n128 a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Node *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WTF::StringImpl *v24;
  void *v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v29;
  WTF::StringImpl *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _BYTE v36[24];
  WebCore::Node *v37;
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  _BYTE v43[24];
  WebCore::Node *v44;

  v6 = *(_QWORD *)(this + 1272);
  if (v6)
  {
    v8 = this;
    v9 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 2;
    v10 = *(_WORD *)(v6 + 28);
    if ((v10 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      *(_DWORD *)(v6 + 24) = v9 + 4;
      v11 = *(_QWORD *)(this + 1480);
      if (!v11)
      {
        v21 = (uint64_t *)(this + 1480);
        WebCore::SVGTitleElement::create((_DWORD **)&WebCore::SVGNames::titleTag, this, &v38);
        v22 = v38;
        *((_DWORD *)v38 + 6) += 2;
        v44 = v22;
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(v21, (uint64_t *)&v44);
        WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v44);
        v23 = *(WebCore::Node **)(v6 + 80);
        if (v23)
          *((_DWORD *)v23 + 6) += 2;
        v44 = v23;
        WebCore::ContainerNode::insertBefore(v6, (uint64_t *)v22, &v44, (uint64_t)v43);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v43, v24);
        v26 = v44;
        v44 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 6) == 2)
          {
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v26, v25);
          }
          else
          {
            *((_DWORD *)v26 + 6) -= 2;
          }
        }
        this = (uint64_t)WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v38);
        v11 = *v21;
        if (!v11)
          goto LABEL_10;
      }
      *(_DWORD *)(v11 + 24) += 2;
      v12 = *(unsigned __int16 *)(v11 + 28) >> 12;
      if (v12 == 1)
        goto LABEL_6;
      if (v12 > 0xB)
        goto LABEL_7;
      if (v12 == 11)
      {
LABEL_6:
        this = (uint64_t)WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v11, (uint64_t)a2);
      }
      else if (((1 << v12) & 0x19C) != 0)
      {
        this = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl *))(*(_QWORD *)v11 + 120))(&v40, v11, a2);
        if ((_BYTE)v42)
        {
          this = (uint64_t)v41;
          v41 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
        goto LABEL_8;
      }
LABEL_7:
      v40 = 0;
      v41 = 0;
      v42 = 0;
LABEL_8:
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
LABEL_10:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      goto LABEL_12;
    }
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      return this;
    }
    LOBYTE(v38) = 0;
    v39 = 0;
    v13 = (uint64_t *)(this + 1480);
    v14 = *(_QWORD *)(this + 1480);
    if (v14)
    {
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::Node::textContent((WebCore::Node *)v14, 0, a6, &v44, a3);
      v38 = v44;
      v39 = 1;
      if (*(_DWORD *)(v14 + 24) != 2)
      {
        *(_DWORD *)(v14 + 24) -= 2;
        goto LABEL_19;
      }
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      {
        v31 = (WebCore::Node *)v14;
LABEL_63:
        WebCore::Node::removedLastRef(v31, a2);
      }
    }
    else
    {
      v27 = WebCore::Document::head((WebCore::Document *)this);
      if (!v27)
      {
LABEL_82:
        this = std::optional<WTF::String>::~optional((uint64_t)&v38, a2);
        goto LABEL_12;
      }
      v28 = v27;
      *(_DWORD *)(v27 + 24) += 2;
      WebCore::HTMLTitleElement::create((_DWORD **)&WebCore::HTMLNames::titleTag, v8, (uint64_t *)&v44);
      v29 = v44;
      *((_DWORD *)v44 + 6) += 2;
      v37 = v29;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)(v8 + 1480), (uint64_t *)&v37);
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v37);
      WebCore::ContainerNode::appendChild(v28, v44, (uint64_t)v36);
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v36, v30);
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v44);
      if (*(_DWORD *)(v28 + 24) != 2)
      {
        *(_DWORD *)(v28 + 24) -= 2;
        goto LABEL_19;
      }
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      {
        v31 = (WebCore::Node *)v28;
        goto LABEL_63;
      }
    }
LABEL_19:
    v16 = *v13;
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      v17 = *(WebCore::Node **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v17 += 2;
      v44 = v17;
      v18 = *(unsigned __int16 *)(v16 + 28) >> 12;
      if (v18 == 1)
        goto LABEL_23;
      if (v18 > 0xB)
        goto LABEL_24;
      if (v18 == 11)
      {
LABEL_23:
        WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v16, (uint64_t)&v44);
      }
      else if (((1 << v18) & 0x19C) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, WebCore::Node **))(*(_QWORD *)v16 + 120))(&v33, v16, &v44);
        if ((_BYTE)v35)
        {
          v32 = v34;
          v34 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, a2);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        goto LABEL_25;
      }
LABEL_24:
      v33 = 0;
      v34 = 0;
      v35 = 0;
LABEL_25:
      this = (uint64_t)v44;
      v44 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v19 = *(_QWORD *)(v8 + 3040);
      if (v19)
      {
        ++*(_DWORD *)(v19 + 8);
        if (v14)
        {
          this = WTF::equal(v38, *(const WTF::StringImpl **)a2, v15);
          if ((this & 1) == 0)
            this = WebCore::TextManipulationController::didUpdateContentForNode(v19, (WebCore::Node *)v16);
        }
        else
        {
          this = WebCore::TextManipulationController::didAddOrCreateRendererForNode(v19, (WebCore::Node *)v16);
        }
        v20 = *(_DWORD *)(v19 + 8);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x19597CBF8);
        }
        *(_DWORD *)(v19 + 8) = v20 - 1;
      }
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      if (v14)
      {
        this = (uint64_t)v38;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            this = WTF::StringImpl::destroy(v38, a2);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_82;
  }
  return this;
}

uint64_t WebCore::Document::head(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 159);
  if (!v1)
    return 0;
  for (result = *(_QWORD *)(v1 + 80); result; result = *(_QWORD *)(result + 56))
  {
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
    {
      break;
    }
  }
  return result;
}

uint64_t WebCore::selectNewTitleElement<WebCore::SVGTitleElement>(uint64_t a1, uint64_t i, uint64_t a3)
{
  uint64_t v3;

  if ((*(_WORD *)(a3 + 28) & 0x20) != 0)
  {
    v3 = *(_QWORD *)(WebCore::SVGNames::titleTag + 24);
    if (*(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == v3)
    {
      if (i)
      {
        for (i = *(_QWORD *)(*(_QWORD *)(a1 + 1272) + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == v3)
            break;
        }
      }
      else if (*(_QWORD *)(a3 + 32) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 1272))
      {
        return a3;
      }
      else
      {
        return 0;
      }
    }
  }
  return i;
}

void WebCore::Document::titleElementAdded(WebCore::Document *this, WebCore::Element *a2)
{
  if (*((WebCore::Element **)this + 185) != a2)
    WebCore::Document::updateTitleElement(this, a2);
}

void WebCore::Document::titleElementRemoved(WebCore::Document *this, WebCore::Element *a2)
{
  if (*((WebCore::Element **)this + 185) == a2)
    WebCore::Document::updateTitleElement(this, a2);
}

void WebCore::Document::titleElementTextChanged(WebCore::Document *this, uint64_t a3, __n128 a2, const WTF::StringImpl *a4, uint64_t a5, WTF::StringBuilder *a6)
{
  if (*((_QWORD *)this + 185) == a3)
    WebCore::Document::updateTitleFromTitleElement(this, a2, a3, a4, a5, a6);
}

uint64_t *WebCore::Document::queueTaskToDispatchEvent(WebCore::Document *a1, WTF::StringImpl *a2, uint64_t *a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11[3];
  _QWORD *v12;

  v4 = (char)a2;
  v6 = WebCore::Document::eventLoop(a1, a2);
  *((_DWORD *)a1 + 6) += 2;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E33A37E8;
  v8[1] = a1;
  v11[0] = 0;
  v11[1] = 0;
  v8[2] = v7;
  v12 = v8;
  WebCore::EventLoopTaskGroup::queueTask(v6, v4, (uint64_t *)&v12);
  v9 = (uint64_t)v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WebCore::Document::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0::~$_0(v11);
}

WebCore::Page *WebCore::Document::updateCaptureAccordingToMutedState(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v4;
  WebCore::Page *v5;
  WebCore::Page **v6;
  WebCore::Page **v7;
  WebCore::RealtimeMediaSource *v8;
  WebCore::Page **v9;
  WebCore::Page **v10;
  WebCore::Page **v11;
  WebCore::Page *v12;

  v1 = *((_QWORD *)this + 66);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(WebCore::Document **)(v3 + 8);
        if (v4)
        {
          v5 = this;
          ++*(_DWORD *)v4;
          *((_BYTE *)this + 3232) = 1;
          v6 = (WebCore::Page **)*((_QWORD *)this + 403);
          v7 = (WebCore::Page **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v6);
          v9 = v7;
          v11 = v10;
          if (v6)
            v6 += *((unsigned int *)v6 - 1);
          if (v6 != v7)
          {
            do
            {
              v12 = *v9++;
              WebCore::updateCaptureSourceToPageMutedState(v5, v4, v12, v8);
              while (v9 != v11)
              {
                if ((unint64_t)*v9 + 1 > 1)
                  goto LABEL_15;
                ++v9;
              }
              v9 = v11;
LABEL_15:
              ;
            }
            while (v9 != v6);
          }
          *((_BYTE *)v5 + 3232) = 0;
          WebCore::Document::updateIsPlayingMedia(v5);
          return WTF::RefCounted<WebCore::Page>::deref(v4);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::visibilityState(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 66);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && !*((_BYTE *)this + 3437))
  {
    return (*(unsigned __int16 *)(v4 + 658) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

unsigned int *WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLMediaElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[37];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[37];
    a2[37] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[37];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::HTMLMediaElement>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      LODWORD(v6) = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v10)
      goto LABEL_31;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = --v10;
        v13 = *(_QWORD *)(v6 + 8 * v10);
        if ((unint64_t)(v13 + 1) >= 2 && !*(_QWORD *)(v13 + 8))
          break;
        if (!(_DWORD)v10)
          goto LABEL_21;
      }
      *(_QWORD *)(v6 + 8 * v10) = 0;
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v21 = v10;
        v22 = v6;
        v20 = v11;
        v23 = v10;
        WTF::fastFree((WTF *)v13, a2);
        v6 = v22;
        v12 = v23;
        v10 = v21;
        v11 = v20;
      }
      *(_QWORD *)(v6 + 8 * v12) = -1;
      ++v11;
    }
    while (v12);
LABEL_21:
    v6 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v6 - 16) += v11;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v11;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v18 = *(_DWORD *)(v6 - 4);
    if (v18 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v18)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[37];
  if (v8 && *((_QWORD *)v8 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v8);
  else
    return 0;
}

WTF *WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  WTF *result;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::HTMLMediaElement&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v14, a1);
  result = v14;
  if (HIDWORD(v15))
  {
    v13 = v14;
    v6 = 8 * HIDWORD(v15);
    do
    {
      v4 = *(_QWORD **)v13;
      if (*(_QWORD *)v13
        && v4[1]
        && WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(a1, (uint64_t)v4))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v13 + 8));
      }
      v13 = (WTF *)((char *)v13 + 8);
      v6 -= 8;
    }
    while (v6);
    v7 = v14;
    if (HIDWORD(v15))
    {
      v8 = (WTF *)((char *)v14 + 8 * HIDWORD(v15));
      do
      {
        v9 = *(unsigned int **)v7;
        *(_QWORD *)v7 = 0;
        if (v9)
        {
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            v12 = v7;
            WTF::fastFree((WTF *)v9, v4);
            v7 = v12;
          }
        }
        v7 = (WTF *)((char *)v7 + 8);
      }
      while (v7 != v8);
      result = v14;
    }
    else
    {
      result = v14;
    }
  }
  if (result)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

_QWORD *WebCore::Document::formController(WebCore::Document *this)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  WebCore::FormController *v4;
  WTF *v5;
  void *v6;

  result = (_QWORD *)*((_QWORD *)this + 169);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = 0;
    result[1] = 0;
    v4 = (WebCore::FormController *)*((_QWORD *)this + 169);
    *((_QWORD *)this + 169) = result;
    if (v4)
    {
      WebCore::FormController::~FormController(v4, v3);
      WTF::fastFree(v5, v6);
      return (_QWORD *)*((_QWORD *)this + 169);
    }
  }
  return result;
}

void WebCore::Document::setStateForNewFormElements(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF::StringImpl *v6;
  WebCore::FormController *v7;
  WTF *v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v4 = *(uint64_t **)(a1 + 1352);
  if (*(_DWORD *)(a2 + 12))
  {
    if (!v4)
    {
      v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v4 = 0;
      v4[1] = 0;
      v7 = *(WebCore::FormController **)(a1 + 1352);
      *(_QWORD *)(a1 + 1352) = v4;
      if (v7)
      {
        WebCore::FormController::~FormController(v7, v6);
        WTF::fastFree(v8, v9);
        v4 = *(uint64_t **)(a1 + 1352);
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WebCore::FormController::parseStateVector(a2, a3, &v15);
  v11 = *v4;
  *v4 = v15;
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = v11;
      do
      {
        v14 = *(WTF::StringImpl **)v13;
        if (*(_QWORD *)v13 != -1)
        {
          if (*(_QWORD *)(v13 + 8))
          {
            WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>,WTF::DefaultHash<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WTF::Deque<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(*(_QWORD *)(v13 + 8), v10);
            v14 = *(WTF::StringImpl **)v13;
          }
          *(_QWORD *)v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v10);
  }
}

unsigned int *WebCore::Document::createNodeIterator@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  return WebCore::NodeIterator::create(a1, a2, a3, a4);
}

uint64_t WebCore::Document::createTreeWalker@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WebCore::TreeWalker::operator new(48);
  result = WebCore::TreeWalker::TreeWalker(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

BOOL WebCore::Document::hasPendingStyleRecalc(WebCore::Document *this)
{
  return !*((_BYTE *)this + 3362)
      && (*((_BYTE *)this + 3390)
       || (*((_BYTE *)this + 70) & 8) != 0
       || *((_QWORD *)this + 195)
       || *(_WORD *)(*((_QWORD *)this + 166) + 233))
      && *((_BYTE *)this + 3391) == 0;
}

BOOL WebCore::Document::needsStyleRecalc(WebCore::Document *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 3362))
    return 0;
  if (*((_BYTE *)this + 3390))
    return 1;
  if ((*((_BYTE *)this + 70) & 8) != 0)
    return 1;
  if (*((_QWORD *)this + 195))
    return 1;
  v1 = *((_QWORD *)this + 166);
  if (*(_BYTE *)(v1 + 233))
    return 1;
  return *(_BYTE *)(v1 + 234) != 0;
}

BOOL WebCore::Document::hasPendingFullStyleRebuild(WebCore::Document *this)
{
  if (*((_BYTE *)this + 3362)
    || !*((_BYTE *)this + 3390)
    && (*((_BYTE *)this + 70) & 8) == 0
    && !*((_QWORD *)this + 195)
    && !*(_WORD *)(*((_QWORD *)this + 166) + 233))
  {
    return 0;
  }
  return *((_BYTE *)this + 3390) && *((_BYTE *)this + 3391) == 0;
}

WebCore::Style::Update **std::unique_ptr<WebCore::Style::Update>::operator=[abi:sn180100](WebCore::Style::Update **a1, WebCore::Style::Update **a2)
{
  WebCore::Style::Update *v3;
  WebCore::Style::Update *v4;
  uint64_t v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::Style::Update::~Update(v4, a2);
    if (*(_DWORD *)v5)
    {
      *(_QWORD *)(v5 + 80) = 0;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v5, v6);
    }
  }
  return a1;
}

uint64_t WebCore::Document::ensurePendingRenderTreeUpdate(WebCore::Document *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  WebCore::Style::Update *v12;
  uint64_t v13;
  void *v14;

  if (!*((_QWORD *)this + 195))
  {
    v11 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v11 = 0;
    *((_DWORD *)this + 6) += 2;
    *(_QWORD *)(v11 + 8) = this;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 80) = 0;
    v12 = (WebCore::Style::Update *)*((_QWORD *)this + 195);
    *((_QWORD *)this + 195) = v11;
    if (v12)
    {
      WebCore::Style::Update::~Update(v12, v10);
      if (*(_DWORD *)v13)
      {
        *(_QWORD *)(v13 + 80) = 0;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)v13 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v13, v14);
      }
    }
  }
  if ((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v2 = 0;
  }
  else
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
    v2 = 256;
  }
  v3 = *((_QWORD *)this + 66);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_DWORD **)(v5 + 8);
        if (v6)
        {
          ++*v6;
          WebCore::Page::scheduleRenderingUpdate((uint64_t)v6, v2);
          if (*v6 == 1)
          {
            WebCore::Page::~Page((uint64_t)v6);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*v6;
          }
        }
      }
    }
  }
  return *((_QWORD *)this + 195);
}

void WebCore::Document::updateSVGRenderer(WebCore::Document *this, WebCore::SVGElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int j;
  WTF *v23;
  WTF::MonotonicTime *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int i;
  unsigned int v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::Style::Update *v66;
  uint64_t v67;
  _QWORD *v68;
  WebCore::WindowEventLoop *v69;
  uint64_t v70;
  WebCore::WindowEventLoop *v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;
  int k;
  uint64_t v76;
  WebCore::SVGElement **v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  int n;
  unsigned int v104;
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  int m;
  unsigned int v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unsigned int v125;
  WebCore::WindowEventLoop *v126;
  WebCore::RenderingUpdateScheduler *updated;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl **v130;
  WebCore::WindowEventLoop *v131[3];

  if (!*((_QWORD *)this + 243) || *((_BYTE *)this + 3405))
    return;
  if (!*((_QWORD *)this + 195))
  {
    v65 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v65 = 0;
    *((_DWORD *)this + 6) += 2;
    *(_QWORD *)(v65 + 8) = this;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(_OWORD *)(v65 + 64) = 0u;
    *(_QWORD *)(v65 + 80) = 0;
    v66 = (WebCore::Style::Update *)*((_QWORD *)this + 195);
    *((_QWORD *)this + 195) = v65;
    if (v66)
    {
      WebCore::Style::Update::~Update(v66, a2);
      if (*(_DWORD *)v67)
      {
        *(_QWORD *)(v67 + 80) = 0;
        *(_OWORD *)(v67 + 48) = 0u;
        *(_OWORD *)(v67 + 64) = 0u;
        *(_OWORD *)(v67 + 16) = 0u;
        *(_OWORD *)(v67 + 32) = 0u;
        *(_OWORD *)v67 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v67, a2);
      }
    }
  }
  v4 = *((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if (*(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      LODWORD(v4) = 0;
    }
    else
    {
      WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
      LODWORD(v4) = 256;
    }
  }
  v5 = *((_QWORD *)this + 66);
  if (!v5)
    goto LABEL_13;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_13;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    goto LABEL_13;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_13;
  v9 = *(_DWORD *)v8 + 1;
  *(_DWORD *)v8 = v9;
  if (*(_DWORD *)(v8 + 1116))
  {
    *(_DWORD *)(v8 + 1128) |= v4 & ~**(_DWORD **)(v8 + 1104);
    goto LABEL_11;
  }
  v24 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1024))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
  if ((v24 & 1) == 0)
  {
    updated = WebCore::Page::renderingUpdateScheduler((WebCore::Page *)v8);
    v24 = (WTF::MonotonicTime *)WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(updated);
  }
  WTF::MonotonicTime::now(v24);
  v129 = v25;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = off_1E34008E0;
  v27[1] = v8;
  v27[2] = &v129;
  v130 = 0;
  v28 = *(_QWORD *)(v8 + 160);
  if (!v28)
    goto LABEL_78;
  v29 = 0;
  while (1)
  {
LABEL_32:
    v30 = (_QWORD *)v28;
    if (!*(_BYTE *)(v28 + 144))
    {
      v31 = *(_QWORD *)(v28 + 296);
      if (v31)
      {
        v32 = *(_DWORD **)(v31 + 2944);
        if (!v32)
        {
          v68 = (_QWORD *)(v31 + 192);
          v128 = v30[37];
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v31 + 192), v26);
          WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v69, v131);
          v70 = v128;
          v71 = v131[0];
          v131[0] = 0;
          v72 = *(_DWORD **)(v128 + 2944);
          *(_QWORD *)(v128 + 2944) = v71;
          if (v72)
          {
            if (v72[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
              v70 = v128;
              v126 = v131[0];
              v131[0] = 0;
              if (v126)
              {
                if (*((_DWORD *)v126 + 2) == 1)
                  (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v126 + 8))(v126);
                else
                  --*((_DWORD *)v126 + 2);
                v70 = v128;
              }
            }
            else
            {
              --v72[2];
            }
          }
          v73 = v70;
          WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*(_QWORD *)(v70 + 2944) + 104, v68, (uint64_t)v131);
          v32 = *(_DWORD **)(v73 + 2944);
        }
        v33 = v32[2] + 1;
        v32[2] = v33;
        if (v29 != v32)
        {
          v34 = (uint64_t)v130;
          if (v130
            || (v35 = WTF::fastZeroedMalloc((WTF *)0x50),
                v130 = (WTF::StringImpl **)(v35 + 16),
                *(_QWORD *)(v35 + 8) = 0x800000007,
                *(_DWORD *)v35 = 0,
                *((_DWORD *)v130 - 3) = 0,
                (v34 = (uint64_t)v130) != 0))
          {
            v36 = *(_DWORD *)(v34 - 8);
          }
          else
          {
            v36 = 0;
          }
          v26 = 0;
          v37 = ((unint64_t)v32 + ~((_QWORD)v32 << 32)) ^ (((unint64_t)v32 + ~((_QWORD)v32 << 32)) >> 22);
          v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
          v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
          v40 = (v39 >> 31) ^ v39;
          for (i = 1; ; ++i)
          {
            v42 = v40 & v36;
            v43 = (WTF::StringImpl *)(v34 + 8 * v42);
            v44 = *(_DWORD **)v43;
            if (!*(_QWORD *)v43)
              break;
            if (v44 != (_DWORD *)-1)
            {
              v43 = v26;
              if (v44 == v32)
              {
                v33 = v32[2];
                v29 = v32;
                goto LABEL_57;
              }
            }
            v40 = i + v42;
            v26 = v43;
          }
          if (v26)
          {
            *(_QWORD *)v26 = 0;
            --*((_DWORD *)v130 - 4);
            *(_QWORD *)v26 = v32;
          }
          else
          {
            *(_QWORD *)v43 = v32;
            v26 = (WTF::StringImpl *)(v34 + 8 * v42);
          }
          if (v130)
            v45 = *((_DWORD *)v130 - 3) + 1;
          else
            v45 = 1;
          *((_DWORD *)v130 - 3) = v45;
          if (v130)
            v46 = *((_DWORD *)v130 - 3);
          else
            v46 = 0;
          v47 = (*((_DWORD *)v130 - 4) + v46);
          v48 = *((unsigned int *)v130 - 1);
          if (v48 > 0x400)
          {
            if (v48 > 2 * v47)
              goto LABEL_49;
          }
          else if (3 * v48 > 4 * v47)
          {
LABEL_49:
            v29 = v32;
            goto LABEL_50;
          }
          WTF::HashTable<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>>::expand((uint64_t *)&v130, (uint64_t *)v26);
          goto LABEL_49;
        }
LABEL_57:
        v51 = v33 - 1;
        if (v51)
          v32[2] = v51;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
LABEL_50:
    v28 = v30[11];
    if (!v28)
    {
      v49 = *(_QWORD *)(v30[6] + 8);
      if (!v49)
        goto LABEL_61;
      v28 = v30[9];
      if (!v28)
        break;
    }
  }
  while (1)
  {
    v50 = *(_QWORD *)(v49 + 56);
    if (!v50)
      break;
    v49 = *(_QWORD *)(v50 + 8);
    if (!v49)
      break;
    v28 = *(_QWORD *)(v49 + 72);
    if (v28)
      goto LABEL_32;
  }
LABEL_61:
  v52 = (uint64_t)v130;
  if (v130)
  {
    v53 = *((unsigned int *)v130 - 1);
    if (!*((_DWORD *)v130 - 3))
      goto LABEL_69;
    v54 = v130;
    if ((_DWORD)v53)
    {
      v55 = 0;
      while ((unint64_t)v130[v55] + 1 <= 1)
      {
        if (v53 == ++v55)
          goto LABEL_67;
      }
      v54 = &v130[v55];
    }
    v63 = &v130[v53];
    if (v63 != v54)
    {
      v26 = *v54;
LABEL_89:
      (*(void (**)(_QWORD *, WTF::StringImpl *))(*v27 + 16))(v27, v26);
      while (++v54 != v63)
      {
        v26 = *v54;
        if ((unint64_t)*v54 + 1 > 1)
        {
          if (v54 != v63)
            goto LABEL_89;
          break;
        }
      }
      v52 = (uint64_t)v130;
    }
LABEL_67:
    if (v52)
    {
      LODWORD(v53) = *(_DWORD *)(v52 - 4);
LABEL_69:
      if ((_DWORD)v53)
      {
        v56 = v53;
        v57 = (_DWORD **)v52;
        do
        {
          v58 = *v57;
          if (*v57 != (_DWORD *)-1)
          {
            *v57 = 0;
            if (v58)
            {
              if (v58[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
              else
                --v58[2];
            }
          }
          ++v57;
          --v56;
        }
        while (v56);
      }
      WTF::fastFree((WTF *)(v52 - 16), v26);
    }
  }
LABEL_78:
  (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  v9 = *(_DWORD *)v8;
LABEL_11:
  if (v9 == 1)
  {
    WebCore::Page::~Page(v8);
    WTF::fastFree(v61, v62);
  }
  else
  {
    *(_DWORD *)v8 = v9 - 1;
  }
LABEL_13:
  v10 = (uint64_t *)*((_QWORD *)this + 195);
  *((_DWORD *)a2 + 6) += 2;
  v11 = *((unsigned __int16 *)a2 + 14);
  if ((v11 & 0x80) != 0)
  {
    v64 = *((_QWORD *)a2 + 25);
    if (!v64)
      goto LABEL_98;
LABEL_100:
    v12 = *(_QWORD *)(v64 + 8);
    goto LABEL_20;
  }
  if ((~v11 & 0x408) == 0 && (*(unsigned int (**)(WebCore::SVGElement *))(*(_QWORD *)a2 + 368))(a2))
  {
    v64 = *((_QWORD *)a2 + 14);
    if (!v64)
      goto LABEL_98;
    goto LABEL_100;
  }
  v12 = *((_QWORD *)a2 + 4);
  if (!v12)
    goto LABEL_20;
  v13 = *(_WORD *)(v12 + 28);
  if ((v13 & 0x80) != 0)
  {
    v64 = *(_QWORD *)(v12 + 200);
    if (!v64)
      goto LABEL_98;
    goto LABEL_100;
  }
  if ((v13 & 8) == 0)
    goto LABEL_98;
  if ((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v59 = *(_QWORD *)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 224);
      if (v60)
      {
        v12 = (*(uint64_t (**)(uint64_t, WebCore::SVGElement *))(*(_QWORD *)v60 + 16))(v60, a2);
        goto LABEL_20;
      }
LABEL_98:
      v12 = 0;
    }
  }
LABEL_20:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  v15 = v10 + 2;
  v14 = v10[2];
  if (v14)
  {
    v16 = *(_DWORD *)(v14 - 8);
    v17 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = 1;
    for (j = v20; ; j = (j + v21++) & v16)
    {
      v23 = *(WTF **)(v14 + 8 * j);
      if (!v23)
        break;
      if (v23 != (WTF *)-1 && *(WebCore::SVGElement **)v23 == a2)
      {
        v74 = *(_DWORD *)(v14 - 4);
        if (j != v74)
        {
          for (k = 1; ; ++k)
          {
            v76 = v20;
            v77 = *(WebCore::SVGElement ***)(v14 + 8 * v20);
            if (v77 != (WebCore::SVGElement **)-1)
            {
              if (!v77)
                goto LABEL_123;
              if (*v77 == a2)
                break;
            }
            v20 = (v76 + k) & v16;
          }
          if (v74 != (_DWORD)v76)
          {
            *(_QWORD *)(v14 + 8 * v76) = -1;
            ++*(_DWORD *)(*v15 - 16);
            v78 = *v15;
            v79 = *v15 ? *(_DWORD *)(v78 - 12) - 1 : -1;
            *(_DWORD *)(v78 - 12) = v79;
            v80 = *v15;
            if (*v15)
            {
              v81 = 6 * *(_DWORD *)(v80 - 12);
              v82 = *(_DWORD *)(v80 - 4);
              if (v81 < v82 && v82 >= 9)
                WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v10 + 2, v82 >> 1, 0);
            }
          }
LABEL_123:
          v84 = *((_QWORD *)v23 + 1);
          v85 = *((_QWORD *)v23 + 2);
          if (v84)
          {
            *(_QWORD *)(v84 + 16) = v85;
            v85 = *((_QWORD *)v23 + 2);
          }
          else
          {
            v10[3] = v85;
          }
          if (v85)
            v86 = (_QWORD *)(v85 + 8);
          else
            v86 = v10 + 4;
          *v86 = v84;
          v87 = *(_QWORD *)v23;
          *(_QWORD *)v23 = 0;
          if (v87)
          {
            if (*(_DWORD *)(v87 + 24) == 2)
            {
              if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v87, a2);
            }
            else
            {
              *(_DWORD *)(v87 + 24) -= 2;
            }
          }
          WTF::fastFree(v23, a2);
        }
        break;
      }
    }
  }
  if (!v12)
  {
    v12 = v10[1];
    *(_DWORD *)(v12 + 24) += 2;
    v107 = v10[2];
    if (v107
      || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v10 + 2, 8u, 0), (v107 = *v15) != 0))
    {
      v108 = *(_DWORD *)(v107 - 8);
    }
    else
    {
      v108 = 0;
    }
    v98 = 0;
    v109 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
    v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
    v112 = (v111 >> 31) ^ v111;
    for (m = 1; ; ++m)
    {
      v114 = v112 & v108;
      v105 = (_QWORD **)(v107 + 8 * v114);
      v115 = *v105;
      if (!*v105)
        break;
      if (v115 != (_QWORD *)-1)
      {
        v105 = (_QWORD **)v98;
        if (*v115 == v12)
        {
          if (v12)
          {
LABEL_146:
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
          goto LABEL_148;
        }
      }
      v112 = m + v114;
      v98 = v105;
    }
    goto LABEL_161;
  }
  if ((*(_BYTE *)(v12 + 54) & 8) != 0)
    goto LABEL_148;
  v88 = v10[8];
  if (!v88)
    goto LABEL_140;
  v89 = *(_DWORD *)(v88 - 8);
  v90 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v91 = 9 * ((v90 + ~(v90 << 13)) ^ ((v90 + ~(v90 << 13)) >> 8));
  v92 = (v91 ^ (v91 >> 15)) + ~((v91 ^ (v91 >> 15)) << 27);
  v93 = v89 & ((v92 >> 31) ^ v92);
  v94 = *(_QWORD *)(v88 + 24 * v93);
  if (v94 == v12)
    goto LABEL_148;
  v95 = 1;
  while (v94)
  {
    v93 = (v93 + v95) & v89;
    v94 = *(_QWORD *)(v88 + 24 * v93);
    ++v95;
    if (v94 == v12)
      goto LABEL_148;
  }
LABEL_140:
  *(_DWORD *)(v12 + 24) += 2;
  v96 = *v15;
  if (*v15
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v10 + 2, 8u, 0), (v96 = *v15) != 0))
  {
    v97 = *(_DWORD *)(v96 - 8);
  }
  else
  {
    v97 = 0;
  }
  v98 = 0;
  v99 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v100 = 9 * ((v99 + ~(v99 << 13)) ^ ((v99 + ~(v99 << 13)) >> 8));
  v101 = (v100 ^ (v100 >> 15)) + ~((v100 ^ (v100 >> 15)) << 27);
  v102 = (v101 >> 31) ^ v101;
  for (n = 1; ; ++n)
  {
    v104 = v102 & v97;
    v105 = (_QWORD **)(v96 + 8 * v104);
    v106 = *v105;
    if (!*v105)
      break;
    if (v106 != (_QWORD *)-1)
    {
      v105 = (_QWORD **)v98;
      if (*v106 == v12)
        goto LABEL_146;
    }
    v102 = n + v104;
    v98 = v105;
  }
LABEL_161:
  if (v98)
  {
    *v98 = 0;
    --*(_DWORD *)(*v15 - 16);
    v105 = (_QWORD **)v98;
  }
  v116 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v116[1] = 0;
  v116[2] = 0;
  *v116 = v12;
  *v105 = v116;
  v117 = *v15;
  if (*v15)
    v118 = *(_DWORD *)(v117 - 12) + 1;
  else
    v118 = 1;
  *(_DWORD *)(v117 - 12) = v118;
  v119 = *v15;
  if (*v15)
    v120 = *(_DWORD *)(v119 - 12);
  else
    v120 = 0;
  v121 = (*(_DWORD *)(v119 - 16) + v120);
  v122 = *(unsigned int *)(v119 - 4);
  if (v122 > 0x400)
  {
    if (v122 > 2 * v121)
      goto LABEL_169;
LABEL_177:
    v125 = (_DWORD)v122 << (6 * *(_DWORD *)(v119 - 12) >= (2 * v122));
    goto LABEL_184;
  }
  if (3 * v122 > 4 * v121)
    goto LABEL_169;
  if ((_DWORD)v122)
    goto LABEL_177;
  v125 = 8;
LABEL_184:
  v116 = (_QWORD *)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v10 + 2, v125, v105);
LABEL_169:
  v123 = v10[4];
  v116[1] = v123;
  v116[2] = 0;
  if (v123)
    v124 = (_QWORD *)(v123 + 16);
  else
    v124 = v10 + 3;
  *v124 = v116;
  v10[4] = (uint64_t)v116;
LABEL_148:
  *((_QWORD *)a2 + 6) |= 0x8000000000000uLL;
}

BOOL WebCore::Document::haveStylesheetsLoaded(WebCore::Style::Scope **this)
{
  return !WebCore::Style::Scope::hasPendingSheets(this[166]) || *((_BYTE *)this + 3379) != 0;
}

uint64_t WebCore::Document::ownerElement(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 66);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 120)) != 0)
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

void WebCore::RenderObject::setNeedsLayout(WebCore::RenderObject *this, int a2)
{
  int v2;
  int v4;
  WebCore::RenderObject *v5;
  uint64_t v6;
  int v7;
  WebCore::RenderObject *v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  _DWORD *v12;
  int v13;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 8) != 0)
    return;
  v4 = v2 | 8;
  *((_DWORD *)this + 5) = v4;
  if (a2 == 1)
  {
    v5 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    if (!v5)
    {
LABEL_4:
      v4 = *((_DWORD *)this + 5);
      goto LABEL_5;
    }
    if (*((_BYTE *)v5 + 46) == 49)
    {
      v12 = (_DWORD *)*((_QWORD *)v5 + 31);
      ++v12[2];
      ++v12[84];
      WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v12 + 84));
      v13 = v12[84];
      if (v13)
      {
LABEL_23:
        v12[84] = v13 - 1;
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
        goto LABEL_4;
      }
    }
    else
    {
      v8 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8)
                                     + 1944);
      if (v8 != v5)
      {
        v9 = v5;
        do
        {
          v10 = *((_QWORD *)v9 + 4);
          if (!v10)
            goto LABEL_4;
          v9 = *(WebCore::RenderObject **)(v10 + 8);
        }
        while (v9 != v8 && v9 != 0);
        if (!v9)
          goto LABEL_4;
      }
      v12 = (_DWORD *)*((_QWORD *)v8 + 31);
      ++v12[2];
      ++v12[84];
      WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v12 + 84), (WTF::MonotonicTime **)v5);
      v13 = v12[84];
      if (v13)
        goto LABEL_23;
    }
    __break(0xC471u);
    JUMPOUT(0x19597E4B0);
  }
LABEL_5:
  if ((v4 & 0x8000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19597E4E4);
    }
    v6 = *((_QWORD *)this + 18);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 8) + 1;
      *(_DWORD *)(v6 + 8) = v7;
    }
    else
    {
      v7 = MEMORY[8];
    }
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19597E510);
    }
    *(_DWORD *)(v6 + 8) = v7 - 1;
  }
}

void WebCore::Document::styleForElementIgnoringPendingStylesheets(WebCore::Style *this@<X0>, WebCore::Element *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, WebCore::Node **a5@<X8>)
{
  char v5;
  int *v7;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  WebCore::Style::Resolver *v14;
  void *v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  void *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::Node *v31;
  uint64_t v32;
  WTF *v33;
  int *v34;
  _BYTE v35[40];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  WebCore::Node *v39;
  WTF::StringImpl *v40;
  char v41;
  char v42;
  _QWORD v43[3];
  char v44;
  int v45;
  unsigned __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  unsigned __int8 v50;

  v7 = a3;
  LOBYTE(v45) = 0;
  v50 = 0;
  if (!a3)
  {
    if (*((_BYTE *)this + 3390) && *((_QWORD *)this + 243) && !*((_BYTE *)this + 3405))
    {
      v7 = &v45;
      WebCore::Style::resolveForDocument(this, (uint64_t)&v34);
      if (v50)
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v45, v19);
      v45 = 0;
      v20 = *(_QWORD *)v35;
      *(_QWORD *)v35 = 0;
      v46 = __PAIR128__(*(unint64_t *)&v35[8], v20);
      v21 = *(_OWORD *)&v35[16];
      *(_OWORD *)&v35[16] = 0u;
      v47 = v21;
      v48 = *(_QWORD *)&v35[32];
      v22 = v36;
      v36 = 0u;
      v49 = v22;
      v50 = 1;
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v34, v19);
      v16 = (WTF::StringImpl *)v50;
      if (!v50)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
    else
    {
      v7 = 0;
    }
  }
  v5 = *((_BYTE *)this + 3379);
  *((_BYTE *)this + 3379) = 1;
  v11 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (*v11)
    v12 = (*(_WORD *)(*v11 + 28) & 0x80) == 0;
  else
    v12 = 1;
  if (v12)
    v26 = v11[1] + 1328;
  else
    v26 = *v11 + 216;
  v13 = *(_QWORD *)v26;
  if (!*(_QWORD *)(*(_QWORD *)v26 + 32))
  {
    if (*(_QWORD *)(v13 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v13);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v13);
    v28 = *(_QWORD *)(v13 + 32);
    if (*(_DWORD *)(v28 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v32 = *(_QWORD *)(v13 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v28 + 32), v27);
      v28 = v32;
    }
    if (*(_BYTE *)(v28 + 242)
      || *(_BYTE *)(v28 + 243)
      || *(_BYTE *)(v28 + 244)
      || *(_BYTE *)(v28 + 245)
      || *(_BYTE *)(v28 + 246)
      || *(_BYTE *)(v28 + 247)
      || *(_BYTE *)(v28 + 248))
    {
      *(_BYTE *)(v13 + 236) = 1;
    }
  }
  v14 = *(WebCore::Style::Resolver **)(v13 + 32);
  if (!*(_BYTE *)(a4 + 16))
  {
    v34 = v7;
    memset(v35, 0, 33);
    WebCore::Style::Resolver::styleForElement((uint64_t)v14, (uint64_t)a2, (uint64_t)&v34, 0, &v39);
    v16 = v40;
    if (!v40)
    {
LABEL_11:
      v17 = v39;
      v39 = 0;
      *a5 = v17;
      WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v39, v15);
      goto LABEL_12;
    }
LABEL_22:
    LODWORD(v34) = 0;
    *((_DWORD *)this + 6) += 2;
    *(_QWORD *)v35 = this;
    memset(&v35[8], 0, 32);
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
    v40 = 0;
    v33 = v16;
    WebCore::Style::commitRelations((uint64_t **)&v33, (WebCore::Style::Update *)&v34);
    v24 = v33;
    v33 = 0;
    if (v24)
    {
      v25 = *(WTF **)v24;
      if ((WTF *)((char *)v24 + 16) != *(WTF **)v24 && v25)
      {
        *(_QWORD *)v24 = 0;
        *((_DWORD *)v24 + 2) = 0;
        WTF::fastFree(v25, v23);
      }
      WTF::fastFree(v24, v23);
    }
    WebCore::Style::Update::~Update((WebCore::Style::Update *)&v34, v23);
    goto LABEL_11;
  }
  LODWORD(v39) = *(_DWORD *)a4;
  v29 = *(WTF::StringImpl **)(a4 + 8);
  if (v29)
    *(_DWORD *)v29 += 2;
  v40 = v29;
  v41 = 0;
  v42 = 0;
  v34 = v7;
  memset(v35, 0, 33);
  WebCore::Style::Resolver::styleForPseudoElement(v14, a2, (int *)&v39, (uint64_t)&v34, (uint64_t)v43);
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v18);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (v44)
  {
    v31 = (WebCore::Node *)v43[0];
    v43[0] = 0;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v43, v18);
  }
  else
  {
    v31 = 0;
  }
  *a5 = v31;
LABEL_12:
  *((_BYTE *)this + 3379) = v5;
  if (v50)
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v45, v18);
}

BOOL WebCore::Document::isPageBoxVisible(WebCore::Document *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderStyle *v13;

  WebCore::Document::updateStyleIfNeeded(this);
  v4 = *((_QWORD *)this + 166);
  if (!*(_QWORD *)(v4 + 32))
  {
    if (*(_QWORD *)(v4 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v4);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v4);
    v11 = *(_QWORD *)(v4 + 32);
    if (*(_DWORD *)(v11 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v12 = *(_QWORD *)(v4 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v11 + 32), v10);
      v11 = v12;
    }
    if (*(_BYTE *)(v11 + 242)
      || *(_BYTE *)(v11 + 243)
      || *(_BYTE *)(v11 + 244)
      || *(_BYTE *)(v11 + 245)
      || *(_BYTE *)(v11 + 246)
      || *(_BYTE *)(v11 + 247)
      || *(_BYTE *)(v11 + 248))
    {
      *(_BYTE *)(v4 + 236) = 1;
    }
  }
  WebCore::Style::Resolver::styleForPage(*(WebCore::Style::Resolver **)(v4 + 32), a2);
  if ((*(_BYTE *)(*((_QWORD *)v13 + 3) + 239) & 4) != 0)
    v6 = 1;
  else
    v6 = (*((_DWORD *)v13 + 10) >> 4) & 3;
  WebCore::RenderStyle::~RenderStyle(v13, v5);
  if (*(_DWORD *)v7)
  {
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v7, v8);
  }
  return v6 != 1;
}

double WebCore::Document::pageSizeAndMarginsInPixels(WebCore::Document *this, uint64_t a2, WebCore::IntSize *a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v14;
  void *v15;
  double result;
  WebCore::RenderStyle *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  int v26;
  int v27;
  float v28;
  float v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  int v34;
  float v35;
  int v36;
  int v37;
  float v38;
  int v39;
  unsigned int v40;
  int v41;
  float v42;
  int v43;
  int v44;
  float v45;
  int v46;
  unsigned int v47;
  int v48;
  float v49;
  int v50;
  int v51;
  float v52;
  int v53;
  unsigned int v54;
  int v55;
  float v56;
  int v57;
  float v58;
  WTF *v59;
  void *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::RenderStyle *v64;

  WebCore::Document::updateStyleIfNeeded(this);
  v14 = *((_QWORD *)this + 166);
  if (!*(_QWORD *)(v14 + 32))
  {
    if (*(_QWORD *)(v14 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v14);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v14);
    v62 = *(_QWORD *)(v14 + 32);
    if (*(_DWORD *)(v62 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v63 = *(_QWORD *)(v14 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v62 + 32), v61);
      v62 = v63;
    }
    if (*(_BYTE *)(v62 + 242)
      || *(_BYTE *)(v62 + 243)
      || *(_BYTE *)(v62 + 244)
      || *(_BYTE *)(v62 + 245)
      || *(_BYTE *)(v62 + 246)
      || *(_BYTE *)(v62 + 247)
      || *(_BYTE *)(v62 + 248))
    {
      *(_BYTE *)(v14 + 236) = 1;
    }
  }
  result = WebCore::Style::Resolver::styleForPage(*(WebCore::Style::Resolver **)(v14 + 32), a2);
  v17 = v64;
  v18 = *(unsigned __int8 **)(*((_QWORD *)v64 + 1) + 40);
  v19 = (v18[636] >> 5) & 3;
  if (v19 == 3)
  {
    v23 = v18[228];
    switch(v23)
    {
      case 4:
        v24 = *((float *)v18 + 56);
        if (!v18[230])
          v24 = (float)SLODWORD(v24);
        break;
      case 3:
        v25 = *((float *)v18 + 56);
        if (!v18[230])
          v25 = (float)SLODWORD(v25);
        v24 = (float)(v25 * 0.0) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v18 + 224), 0.0);
        break;
      default:
        v26 = 0;
        goto LABEL_27;
    }
    result = v24 * 64.0;
    if (result >= 2147483650.0)
    {
      v26 = 0x7FFFFFFF;
    }
    else if (result <= -2147483650.0)
    {
      v26 = 0x80000000;
    }
    else
    {
      v26 = (int)result;
    }
LABEL_27:
    v21 = v26 / 64;
    v27 = v18[236];
    switch(v27)
    {
      case 4:
        v28 = *((float *)v18 + 58);
        if (!v18[238])
          v28 = (float)SLODWORD(v28);
        break;
      case 3:
        v29 = *((float *)v18 + 58);
        if (!v18[238])
          v29 = (float)SLODWORD(v29);
        v28 = (float)(v29 * 0.0) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v18 + 232), 0.0);
        break;
      default:
        v30 = 0;
LABEL_38:
        v20 = (v30 / 64);
        v17 = v64;
        goto LABEL_39;
    }
    result = v28 * 64.0;
    if (result >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF;
    }
    else if (result <= -2147483650.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)result;
    }
    goto LABEL_38;
  }
  v21 = *(_DWORD *)a3;
  v20 = *((unsigned int *)a3 + 1);
  if (v19 == 2)
  {
    if (v21 <= (int)v20)
      v22 = v20;
    else
      v22 = v21;
    if (v21 >= (int)v20)
      v21 = *((_DWORD *)a3 + 1);
  }
  else
  {
    if (v19 != 1)
      goto LABEL_39;
    if (v21 >= (int)v20)
      v22 = v20;
    else
      v22 = v21;
    if (v21 <= (int)v20)
      v21 = *((_DWORD *)a3 + 1);
  }
  v20 = v22;
LABEL_39:
  *(_QWORD *)a3 = v21 | (unint64_t)(v20 << 32);
  v31 = *(unsigned __int8 **)(*((_QWORD *)v17 + 1) + 24);
  v32 = v31[44];
  if (!v31[44])
  {
    v36 = *a4;
    goto LABEL_60;
  }
  if (v21 >= -33554432)
    v33 = v21 << 6;
  else
    v33 = 0x80000000;
  if (v21 <= 0x1FFFFFF)
    v34 = v33;
  else
    v34 = 0x7FFFFFFF;
  if (v32 == 4)
  {
    v35 = *((float *)v31 + 10);
    if (!v31[46])
      v35 = (float)SLODWORD(v35);
    goto LABEL_56;
  }
  v37 = 0;
  if (v31[44] > 8u)
  {
    if (v32 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 40), (float)v34 * 0.015625);
LABEL_56:
      result = v35 * 64.0;
      if (result >= 2147483650.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (result <= -2147483650.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)result;
      }
      goto LABEL_59;
    }
    if (v32 == 9)
      goto LABEL_169;
  }
  else
  {
    if (v32 == 3)
    {
      v38 = *((float *)v31 + 10);
      if (!v31[46])
        v38 = (float)SLODWORD(v38);
      v35 = (float)((float)((float)v34 * 0.015625) * v38) / 100.0;
      goto LABEL_56;
    }
    if (v32 == 1)
LABEL_169:
      v37 = v34;
  }
LABEL_59:
  v36 = v37 / 64;
  v17 = v64;
  v31 = *(unsigned __int8 **)(*((_QWORD *)v64 + 1) + 24);
LABEL_60:
  *a4 = v36;
  v39 = v31[52];
  if (!v31[52])
  {
    v43 = *a5;
    goto LABEL_81;
  }
  if (v21 >= -33554432)
    v40 = v21 << 6;
  else
    v40 = 0x80000000;
  if (v21 <= 0x1FFFFFF)
    v41 = v40;
  else
    v41 = 0x7FFFFFFF;
  if (v39 == 4)
  {
    v42 = *((float *)v31 + 12);
    if (!v31[54])
      v42 = (float)SLODWORD(v42);
    goto LABEL_77;
  }
  v44 = 0;
  if (v31[52] > 8u)
  {
    if (v39 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 48), (float)v41 * 0.015625);
LABEL_77:
      result = v42 * 64.0;
      if (result >= 2147483650.0)
      {
        v44 = 0x7FFFFFFF;
      }
      else if (result <= -2147483650.0)
      {
        v44 = 0x80000000;
      }
      else
      {
        v44 = (int)result;
      }
      goto LABEL_80;
    }
    if (v39 == 9)
      goto LABEL_171;
  }
  else
  {
    if (v39 == 3)
    {
      v45 = *((float *)v31 + 12);
      if (!v31[54])
        v45 = (float)SLODWORD(v45);
      v42 = (float)((float)((float)v41 * 0.015625) * v45) / 100.0;
      goto LABEL_77;
    }
    if (v39 == 1)
LABEL_171:
      v44 = v41;
  }
LABEL_80:
  v43 = v44 / 64;
  v17 = v64;
  v31 = *(unsigned __int8 **)(*((_QWORD *)v64 + 1) + 24);
LABEL_81:
  *a5 = v43;
  v46 = v31[60];
  if (!v31[60])
  {
    v50 = *a6;
    goto LABEL_102;
  }
  if (v21 >= -33554432)
    v47 = v21 << 6;
  else
    v47 = 0x80000000;
  if (v21 <= 0x1FFFFFF)
    v48 = v47;
  else
    v48 = 0x7FFFFFFF;
  if (v46 == 4)
  {
    v49 = *((float *)v31 + 14);
    if (!v31[62])
      v49 = (float)SLODWORD(v49);
    goto LABEL_98;
  }
  v51 = 0;
  if (v31[60] > 8u)
  {
    if (v46 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 56), (float)v48 * 0.015625);
LABEL_98:
      result = v49 * 64.0;
      if (result >= 2147483650.0)
      {
        v51 = 0x7FFFFFFF;
      }
      else if (result <= -2147483650.0)
      {
        v51 = 0x80000000;
      }
      else
      {
        v51 = (int)result;
      }
      goto LABEL_101;
    }
    if (v46 == 9)
      goto LABEL_173;
  }
  else
  {
    if (v46 == 3)
    {
      v52 = *((float *)v31 + 14);
      if (!v31[62])
        v52 = (float)SLODWORD(v52);
      v49 = (float)((float)((float)v48 * 0.015625) * v52) / 100.0;
      goto LABEL_98;
    }
    if (v46 == 1)
LABEL_173:
      v51 = v48;
  }
LABEL_101:
  v50 = v51 / 64;
  v17 = v64;
  v31 = *(unsigned __int8 **)(*((_QWORD *)v64 + 1) + 24);
LABEL_102:
  *a6 = v50;
  v53 = v31[68];
  if (v31[68])
  {
    if (v21 >= -33554432)
      v54 = v21 << 6;
    else
      v54 = 0x80000000;
    if (v21 <= 0x1FFFFFF)
      v55 = v54;
    else
      v55 = 0x7FFFFFFF;
    if (v53 == 4)
    {
      v56 = *((float *)v31 + 16);
      if (!v31[70])
        v56 = (float)SLODWORD(v56);
      goto LABEL_119;
    }
    v57 = 0;
    if (v31[68] > 8u)
    {
      if (v53 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 64), (float)v55 * 0.015625);
LABEL_119:
        result = v56 * 64.0;
        if (result >= 2147483650.0)
        {
          v57 = 0x7FFFFFFF;
        }
        else if (result <= -2147483650.0)
        {
          v57 = 0x80000000;
        }
        else
        {
          v57 = (int)result;
        }
LABEL_122:
        v17 = v64;
        *a7 = v57 / 64;
        if (!v64)
          return result;
        goto LABEL_123;
      }
      if (v53 != 9)
        goto LABEL_122;
    }
    else
    {
      if (v53 == 3)
      {
        v58 = *((float *)v31 + 16);
        if (!v31[70])
          v58 = (float)SLODWORD(v58);
        v56 = (float)((float)((float)v55 * 0.015625) * v58) / 100.0;
        goto LABEL_119;
      }
      if (v53 != 1)
        goto LABEL_122;
    }
    v57 = v55;
    goto LABEL_122;
  }
LABEL_123:
  WebCore::RenderStyle::~RenderStyle(v17, v15);
  if (*(_DWORD *)v59)
  {
    result = 0.0;
    *((_OWORD *)v59 + 2) = 0u;
    *((_OWORD *)v59 + 3) = 0u;
    *(_OWORD *)v59 = 0u;
    *((_OWORD *)v59 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v59, v60);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::Document::fontsNeedUpdate(WebCore::Document *this, WebCore::FontSelector *a2)
{
  return WebCore::Document::invalidateMatchedPropertiesCacheAndForceStyleRecalc((WebCore::Document *)((char *)this - 504), a2);
}

uint64_t WebCore::Document::isInStyleInterleavedLayoutForSelfOrAncestor(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 3394) || *((_BYTE *)this + 3395))
    return 1;
  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 120);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = WebCore::Document::isInStyleInterleavedLayoutForSelfOrAncestor(*(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8));
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v5;
}

WebCore::Page *WebCore::Document::dispatchDisabledAdaptationsDidChangeForMainFrame(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = *((_QWORD *)this + 66);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(uint64_t **)(v3 + 8);
        if (v4)
        {
          ++*(_DWORD *)v4;
          WebCore::Chrome::dispatchDisabledAdaptationsDidChange(v4[6]);
          return WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v4);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::suspendScheduledTasks(uint64_t result, int a2)
{
  uint64_t v3;
  void *v4;
  WebCore::EventLoopTaskGroup *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _BYTE *v12;

  if (!*(_BYTE *)(result + 3413))
  {
    v3 = result;
    WebCore::Document::suspendScriptedAnimationControllerCallbacks((WebCore::ScriptedAnimationController *)result);
    v5 = *(WebCore::EventLoopTaskGroup **)(v3 + 2952);
    if (v5)
      WebCore::EventLoopTaskGroup::suspend(v5);
    if (!*(_BYTE *)(v3 + 467))
    {
      *(_BYTE *)(v3 + 467) = 1;
      v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v6 = off_1E33A7900;
      v6[8] = a2;
      v12 = v6;
      WebCore::ScriptExecutionContext::forEachActiveDOMObject(v3 + 192, &v12);
      (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
      *(_BYTE *)(v3 + 465) = a2;
    }
    if (!*(_BYTE *)(v3 + 3415))
    {
      *(_BYTE *)(v3 + 3415) = 1;
      v7 = *(_QWORD *)(v3 + 2352);
      if (v7)
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8));
      v8 = *(_QWORD *)(v3 + 2368);
      if (v8)
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
    }
    result = WebCore::Document::platformSuspendOrStopActiveDOMObjects((WebCore::Document *)v3, v4);
    v9 = *(_QWORD *)(v3 + 1592);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 8) + 1;
      *(_DWORD *)(v9 + 8) = v10;
      if ((*(_QWORD *)(v9 + 96) & 0xFFFFFFFFFFFFLL) != 0)
      {
        result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v9 + 64));
        v10 = *(_DWORD *)(v9 + 8);
      }
      if (!v10)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v9 + 8) = v10 - 1;
    }
    if ((*(_QWORD *)(v3 + 2416) & 0xFFFFFFFFFFFFLL) != 0)
      result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 2384));
    if ((*(_QWORD *)(v3 + 1672) & 0xFFFFFFFFFFFFLL) != 0)
      result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 1640));
    if (a2 == 1)
    {
      v11 = *(_DWORD **)(v3 + 728);
      if (v11)
      {
        ++v11[2];
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 120))(v11);
        if (v11[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
    }
    *(_BYTE *)(v3 + 3413) = 1;
  }
  return result;
}

uint64_t WebCore::Document::frameDestroyed(WebCore::Document *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WebCore::LocalDOMWindow *v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = *((_QWORD *)this + 66);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    result = 3081;
    __break(0xC471u);
  }
  else
  {
    v4 = *((_QWORD *)this + 87);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E33FF7D8;
      v13 = v5;
      WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 96), &v13);
      v7 = v13;
      v13 = 0;
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      WebCore::JSDOMWindowBase::fireFrameClearedWatchpointsForWindow((WebCore::JSDOMWindowBase *)v4, v6);
      v8 = *(_DWORD *)(v4 + 24) - 1;
      if (*(_DWORD *)(v4 + 24) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        v8 = *(_DWORD *)(v4 + 24);
      }
      else
      {
        *(_DWORD *)(v4 + 24) = v8;
      }
      v9 = v8 - 1;
      if (v9)
        *(_DWORD *)(v4 + 24) = v9;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    }
    result = *((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (result)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::frameDestroyed(WebCore::Document *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WebCore::LocalDOMWindow *v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    result = 3081;
    __break(0xC471u);
  }
  else
  {
    v4 = *((_QWORD *)this + 23);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E33FF7D8;
      v13 = v5;
      WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 96), &v13);
      v7 = v13;
      v13 = 0;
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      WebCore::JSDOMWindowBase::fireFrameClearedWatchpointsForWindow((WebCore::JSDOMWindowBase *)v4, v6);
      v8 = *(_DWORD *)(v4 + 24) - 1;
      if (*(_DWORD *)(v4 + 24) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        v8 = *(_DWORD *)(v4 + 24);
      }
      else
      {
        *(_DWORD *)(v4 + 24) = v8;
      }
      v9 = v8 - 1;
      if (v9)
        *(_DWORD *)(v4 + 24) = v9;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (result)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  return result;
}

void WebCore::Document::willDetachPage(WebCore::Document *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ContentChangeObserver *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::LocalDOMWindow *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WebCore::WebInjectedScriptManager **v22;
  _QWORD *v23;

  v3 = *((_QWORD *)this + 377);
  if (!v3)
  {
    v3 = WTF::fastMalloc((WTF *)0xA0);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = this;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3403718;
    v4[1] = v3;
    *(_QWORD *)(v3 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    v6 = *(unsigned int **)(StatusReg + 736);
    if (!v6)
      v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v3 + 16) = off_1E31F7378;
    *(_QWORD *)(v3 + 56) = v6;
    *(_QWORD *)(v3 + 64) = v4;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_DWORD *)(v3 + 120) = 0;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    v8 = (WebCore::ContentChangeObserver *)*((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v3;
    if (v8)
    {
      WebCore::ContentChangeObserver::~ContentChangeObserver(v8, a2);
      WTF::fastFree(v9, v10);
      v3 = *((_QWORD *)this + 377);
    }
  }
  WebCore::ContentChangeObserver::reset((WebCore::ContentChangeObserver *)v3, a2);
  if (*((_QWORD *)this + 87))
  {
    v11 = *((_QWORD *)this + 66);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
        if (v15)
          ++*((_DWORD *)v15 + 6);
        v16 = *(_QWORD *)(v12 + 24);
        if (v16
          && (v17 = *(_QWORD *)(v16 + 8)) != 0
          && (v18 = *(_QWORD *)(*(_QWORD *)(v17 + 80) + 8),
              (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 8) + 16))(*(_QWORD *)(v18 + 8))))
        {
          if (!v15)
            goto LABEL_20;
          v22 = *(WebCore::WebInjectedScriptManager ***)(v18 + 16);
          if (v22)
            WebCore::WebConsoleAgent::frameWindowDiscarded(v22, v15);
        }
        else if (!v15)
        {
          goto LABEL_20;
        }
        if (*((_DWORD *)v15 + 6) == 1)
          (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v15 + 72))(v15);
        else
          --*((_DWORD *)v15 + 6);
        do
        {
LABEL_20:
          v19 = __ldaxr(v13);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v13));
        if (!v20)
        {
          atomic_store(1u, v13);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v21 = off_1E31FE290;
          v21[1] = v13;
          v23 = v21;
          WTF::ensureOnMainThread();
          if (v23)
            (*(void (**)(_QWORD *))(*v23 + 8))(v23);
        }
      }
    }
  }
}

void `non-virtual thunk to'WebCore::Document::willDetachPage(WebCore::Document *this, void *a2)
{
  WebCore::Document::willDetachPage((WebCore::Document *)((char *)this - 512), a2);
}

uint64_t WebCore::Document::attachToCachedFrame(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WebCore::FrameDestructionObserver *v4;
  WebCore::LocalFrame *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*a2 != result)
  {
    __break(0xC471u);
    JUMPOUT(0x19597F9A8);
  }
  v2 = (_QWORD *)a2[2];
  if (v2)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD))(*v2 + 704))(a2[2]);
    if ((result & 1) == 0)
    {
      v4 = (WebCore::FrameDestructionObserver *)(v3 + 512);
      v5 = (WebCore::LocalFrame *)v2[41];
      v6 = (unsigned int *)((char *)v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      result = (uint64_t)WebCore::FrameDestructionObserver::observeFrame(v4, v5);
      if (v5)
      {
        do
        {
          v8 = __ldaxr(v6);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v6));
        if (!v9)
        {
          atomic_store(1u, v6);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E31FE290;
          v10[1] = v6;
          v11 = v10;
          WTF::ensureOnMainThread();
          result = (uint64_t)v11;
          if (v11)
            return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::Document::detachFromFrame(WebCore::Document *this, void *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  result = (unsigned int *)*((_QWORD *)this + 66);
  if (!result)
  {
    *((_QWORD *)this + 66) = 0;
    return result;
  }
  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v4 + 248, (_QWORD *)this + 64);
    result = (unsigned int *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (!result)
      return result;
  }
  else
  {
    *((_QWORD *)this + 66) = 0;
  }
  do
  {
    v5 = __ldaxr(result);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, result));
  if (!v6)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v7 = *((_QWORD *)this + 66);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      return WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v8 + 248, (_QWORD *)this + 64, (uint64_t)v9);
  }
  return result;
}

WebCore::RenderLayerCompositor *WebCore::Document::documentWillBecomeInactive(WebCore::RenderLayerCompositor *this)
{
  uint64_t v1;
  WebCore::RenderLayerCompositor *v2;

  if (this)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
    {
      v2 = *(WebCore::RenderLayerCompositor **)(v1 + 288);
      if (v2)
      {
        ++*((_DWORD *)v2 + 2);
        this = WebCore::LocalFrameView::setIsInWindow(v2, 0);
        if (*((_DWORD *)v2 + 2) == 1)
          return (WebCore::RenderLayerCompositor *)(*(uint64_t (**)(WebCore::RenderLayerCompositor *))(*(_QWORD *)v2 + 8))(v2);
        else
          --*((_DWORD *)v2 + 2);
      }
    }
  }
  return this;
}

uint64_t *WebCore::Document::removePlaybackTargetPickerClient(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v2 = result[341];
  if (v2)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(void **)(v2 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(void **)(v2 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      v11 = result + 341;
      v12 = (_QWORD *)(v2 + 16 * v8);
      v13 = v12[1];
      v14 = result[340];
      if (v14)
      {
        v15 = *(_DWORD *)(v14 - 8);
        v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = *(_QWORD *)(v14 + 16 * v19);
        if (v20 != v13)
        {
          v21 = 1;
          while (v20)
          {
            v19 = ((_DWORD)v19 + v21) & v15;
            v20 = *(_QWORD *)(v14 + 16 * v19);
            ++v21;
            if (v20 == v13)
              goto LABEL_16;
          }
          v19 = *(unsigned int *)(v14 - 4);
        }
LABEL_16:
        if (v19 != *(_DWORD *)(v14 - 4))
        {
          *(_QWORD *)(v14 + 16 * v19) = -1;
          result += 340;
          ++*(_DWORD *)(v3[340] - 16);
          v22 = v3[340];
          v23 = v22 ? *(_DWORD *)(v22 - 12) - 1 : -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *result;
          if (*result)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v26 >> 1);
          }
        }
      }
      v28 = (_QWORD *)*v11;
      if (!*v11 || (v28 += 2 * *((unsigned int *)v28 - 1), v28 != v12))
      {
        if (v28 != v12)
        {
          *v12 = -1;
          ++*(_DWORD *)(*v11 - 16);
          v29 = (_QWORD *)*v11;
          v30 = *v11 ? *((_DWORD *)v29 - 3) - 1 : -1;
          *((_DWORD *)v29 - 3) = v30;
          v31 = (_QWORD *)*v11;
          if (*v11)
          {
            v43 = 6 * *((_DWORD *)v31 - 3);
            v44 = *((_DWORD *)v31 - 1);
            if (v43 < v44 && v44 >= 9)
              result = (uint64_t *)WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v3 + 341, v44 >> 1);
          }
        }
      }
      v32 = v3[66];
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 24);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 16);
              if (v36)
                goto LABEL_59;
              v36 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v36 = 1;
              *(_QWORD *)(v36 + 8) = v35;
              result = *(uint64_t **)(v35 + 16);
              *(_QWORD *)(v35 + 16) = v36;
              if (!result)
                goto LABEL_59;
              do
              {
                v37 = __ldaxr((unsigned int *)result);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, (unsigned int *)result));
              if (!v38)
              {
                atomic_store(1u, (unsigned int *)result);
                result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
              }
              v36 = *(_QWORD *)(v35 + 16);
              if (v36)
              {
LABEL_59:
                do
                  v39 = __ldaxr((unsigned int *)v36);
                while (__stlxr(v39 + 1, (unsigned int *)v36));
                v40 = *(_QWORD *)(v36 + 8);
                if (v40)
                  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v40 + 48)
                                                                                               + 16)
                                                                                 + 1536))(*(_QWORD *)(*(_QWORD *)(v40 + 48) + 16), v13);
                do
                {
                  v41 = __ldaxr((unsigned int *)v36);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, (unsigned int *)v36));
                if (!v42)
                {
                  atomic_store(1u, (unsigned int *)v36);
                  return (uint64_t *)WTF::fastFree((WTF *)v36, a2);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WebCore::PaintWorkletGlobalScope::prepareForDestruction(WebCore::PaintWorkletGlobalScope *this, WTF::StringImpl *a2)
{
  unsigned __int8 *v3;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WebCore::PaintDefinition *v9;
  WTF *v10;
  void *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  WebCore::WorkerOrWorkletScriptController *v15;
  WTF *v16;
  void *v17;

  if (*((_BYTE *)this + 1057))
    return;
  *((_BYTE *)this + 1057) = 1;
  v3 = (unsigned __int8 *)this + 1056;
  if (__ldaxr((unsigned __int8 *)this + 1056))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]((char *)this + 1056);
LABEL_7:
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 131);
  if (v5)
  {
    *((_QWORD *)this + 131) = 0;
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          v9 = v7[1];
          v7[1] = 0;
          if (v9)
          {
            WebCore::PaintDefinition::~PaintDefinition(v9, a2);
            WTF::fastFree(v10, v11);
            v8 = *v7;
          }
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v12 = __ldxr(v3);
  if (v12 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_25;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_25:
  WebCore::WorkerOrWorkletGlobalScope::prepareForDestruction(this, a2);
  v13 = *((_QWORD *)this + 43);
  if (v13)
  {
    v14 = *(_BYTE **)(v13 + 8);
    v14[93441] = 1;
    v14[56] |= 0x40u;
    JSC::VMTraps::fireTrap((JSC::VMTraps *)(v14 + 64));
    v15 = (WebCore::WorkerOrWorkletScriptController *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = 0;
    if (v15)
    {
      WebCore::WorkerOrWorkletScriptController::~WorkerOrWorkletScriptController(v15);
      if (*(_DWORD *)v16)
      {
        *((_OWORD *)v16 + 1) = 0u;
        *((_OWORD *)v16 + 2) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree(v16, v17);
      }
    }
  }
}

JSC::CallFrame *`non-virtual thunk to'WebCore::Document::shouldBypassMainWorldContentSecurityPolicy(WebCore::Document *this)
{
  JSC::VM *v1;
  JSC::CallFrame *result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (JSC::VM *)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (JSC::VM *)v6;
  WebCore::g_commonVMOrNull = v6;
  if (__ldaxr((unsigned int *)(v6 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v6 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v6 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v6 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v6 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
LABEL_9:
  result = (JSC::CallFrame *)*((_QWORD *)v1 + 5);
  if (result)
  {
    v4 = *((_QWORD *)result + 3);
    if ((v4 & 0xFFFE000000000007) == 3)
      v5 = JSC::CallFrame::lexicalGlobalObjectFromNativeCallee(result, v1);
    else
      v5 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
    return (JSC::CallFrame *)(*(_DWORD *)(*(_QWORD *)(v5 + 3320) + 48) != 0);
  }
  return result;
}

uint64_t WebCore::Document::platformSuspendOrStopActiveDOMObjects(WebCore::Document *this, void *a2)
{
  WebCore::ContentChangeObserver *v3;
  WebCore::ContentChangeObserver *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t k;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF *m;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;

  v3 = (WebCore::ContentChangeObserver *)*((_QWORD *)this + 377);
  if (!v3)
  {
    v5 = (WebCore::ContentChangeObserver *)WTF::fastMalloc((WTF *)0xA0);
    v3 = WebCore::ContentChangeObserver::ContentChangeObserver(v5, this);
    v6 = (WTF *)*((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v3;
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 17);
      if (v7)
      {
        v19 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v19)
        {
          for (i = 0; i != v19; ++i)
          {
            v21 = *(_QWORD *)(v7 + 8 * i);
            if (v21 != -1)
            {
              *(_QWORD *)(v7 + 8 * i) = 0;
              if (v21)
              {
                do
                {
                  v22 = __ldaxr((unsigned int *)v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, (unsigned int *)v21));
                if (!v23)
                {
                  v49 = v19;
                  v52 = i;
                  atomic_store(1u, (unsigned int *)v21);
                  v56 = (WTF *)v21;
                  v24 = *(unsigned int *)(v21 + 28);
                  if ((_DWORD)v24)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v24));
                  v25 = (WTF *)*((_QWORD *)v56 + 2);
                  if (v25)
                  {
                    *((_QWORD *)v56 + 2) = 0;
                    *((_DWORD *)v56 + 6) = 0;
                    WTF::fastFree(v25, a2);
                  }
                  WTF::fastFree(v56, a2);
                  v19 = v49;
                  i = v52;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v7 - 16), a2);
      }
      v8 = *((_QWORD *)v6 + 16);
      *((_QWORD *)v6 + 16) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v45 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v45)
          {
            v48 = v8;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v45));
            v8 = v48;
          }
          v46 = *(WTF **)(v8 + 16);
          if (v46)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            v47 = v8;
            WTF::fastFree(v46, a2);
            v8 = v47;
          }
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *((_QWORD *)v6 + 13);
      if (v11)
      {
        v26 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v26)
        {
          for (j = 0; j != v26; ++j)
          {
            v28 = *(_QWORD *)(v11 + 8 * j);
            if (v28 != -1)
            {
              *(_QWORD *)(v11 + 8 * j) = 0;
              if (v28)
              {
                do
                {
                  v29 = __ldaxr((unsigned int *)v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, (unsigned int *)v28));
                if (!v30)
                {
                  v50 = v26;
                  v53 = j;
                  atomic_store(1u, (unsigned int *)v28);
                  v57 = (WTF *)v28;
                  v31 = *(unsigned int *)(v28 + 28);
                  if ((_DWORD)v31)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v31));
                  v32 = (WTF *)*((_QWORD *)v57 + 2);
                  if (v32)
                  {
                    *((_QWORD *)v57 + 2) = 0;
                    *((_DWORD *)v57 + 6) = 0;
                    WTF::fastFree(v32, a2);
                  }
                  WTF::fastFree(v57, a2);
                  v26 = v50;
                  j = v53;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v11 - 16), a2);
      }
      v12 = *((_QWORD *)v6 + 11);
      if (v12)
      {
        v33 = *(unsigned int *)(v12 - 4);
        if ((_DWORD)v33)
        {
          for (k = 0; k != v33; ++k)
          {
            v35 = *(_QWORD *)(v12 + 8 * k);
            if (v35 != -1)
            {
              *(_QWORD *)(v12 + 8 * k) = 0;
              if (v35)
              {
                do
                {
                  v36 = __ldaxr((unsigned int *)v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, (unsigned int *)v35));
                if (!v37)
                {
                  v51 = v33;
                  v54 = k;
                  atomic_store(1u, (unsigned int *)v35);
                  v58 = (WTF *)v35;
                  v38 = *(unsigned int *)(v35 + 28);
                  if ((_DWORD)v38)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v35 + 16), (WTF::StringImpl *)(*(_QWORD *)(v35 + 16) + 32 * v38));
                  v39 = (WTF *)*((_QWORD *)v58 + 2);
                  if (v39)
                  {
                    *((_QWORD *)v58 + 2) = 0;
                    *((_DWORD *)v58 + 6) = 0;
                    WTF::fastFree(v39, a2);
                  }
                  WTF::fastFree(v58, a2);
                  v33 = v51;
                  k = v54;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v12 - 16), a2);
      }
      v13 = *((_QWORD *)v6 + 9);
      if (v13)
      {
        v40 = (WTF *)*(unsigned int *)(v13 - 4);
        if ((_DWORD)v40)
        {
          for (m = 0; m != v40; m = (WTF *)((char *)m + 1))
          {
            v42 = *(unsigned int **)(v13 + 8 * (_QWORD)m);
            if (v42 != (unsigned int *)-1)
            {
              *(_QWORD *)(v13 + 8 * (_QWORD)m) = 0;
              if (v42)
              {
                do
                {
                  v43 = __ldaxr(v42);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v42));
                if (!v44)
                {
                  atomic_store(1u, v42);
                  v55 = m;
                  v59 = v40;
                  WTF::fastFree((WTF *)v42, a2);
                  m = v55;
                  v40 = v59;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v13 - 16), a2);
      }
      *((_QWORD *)v6 + 2) = off_1E31F7378;
      v14 = *((_QWORD *)v6 + 8);
      *((_QWORD *)v6 + 8) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      WebCore::TimerBase::~TimerBase((WTF *)((char *)v6 + 16));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 0;
        v16 = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v15);
          }
        }
      }
      else
      {
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v15);
      v3 = (WebCore::ContentChangeObserver *)*((_QWORD *)this + 377);
    }
  }
  return WebCore::ContentChangeObserver::reset(v3, a2);
}

uint64_t WebCore::Document::suspendActiveDOMObjects(WebCore::Document *this, void *a2)
{
  char v2;
  WebCore::EventLoopTaskGroup *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;

  v2 = (char)a2;
  v4 = (WebCore::EventLoopTaskGroup *)*((_QWORD *)this + 369);
  if (v4)
    WebCore::EventLoopTaskGroup::suspend(v4);
  if (!*((_BYTE *)this + 467))
  {
    *((_BYTE *)this + 467) = 1;
    v5 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E33A7900;
    v5[8] = v2;
    v9 = v5;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject((uint64_t)this + 192, &v9);
    (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 8))(v5);
    *((_BYTE *)this + 465) = v2;
  }
  if (!*((_BYTE *)this + 3415))
  {
    *((_BYTE *)this + 3415) = 1;
    v6 = *((_QWORD *)this + 294);
    if (v6)
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
    v7 = *((_QWORD *)this + 296);
    if (v7)
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8));
  }
  return WebCore::Document::platformSuspendOrStopActiveDOMObjects(this, a2);
}

uint64_t `non-virtual thunk to'WebCore::Document::suspendActiveDOMObjects(uint64_t a1, void *a2)
{
  char v2;
  WebCore::EventLoopTaskGroup *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;

  v2 = (char)a2;
  v4 = *(WebCore::EventLoopTaskGroup **)(a1 + 2760);
  if (v4)
    WebCore::EventLoopTaskGroup::suspend(v4);
  if (!*(_BYTE *)(a1 + 275))
  {
    *(_BYTE *)(a1 + 275) = 1;
    v5 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E33A7900;
    v5[8] = v2;
    v9 = v5;
    WebCore::ScriptExecutionContext::forEachActiveDOMObject(a1, &v9);
    (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(a1 + 273) = v2;
  }
  if (!*(_BYTE *)(a1 + 3223))
  {
    *(_BYTE *)(a1 + 3223) = 1;
    v6 = *(_QWORD *)(a1 + 2160);
    if (v6)
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
    v7 = *(_QWORD *)(a1 + 2176);
    if (v7)
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8));
  }
  return WebCore::Document::platformSuspendOrStopActiveDOMObjects((WebCore::Document *)(a1 - 192), a2);
}

unsigned __int8 *WebCore::Document::resumeActiveDOMObjects(uint64_t a1, int a2)
{
  WebCore::EventLoopTaskGroup *v4;
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(WebCore::EventLoopTaskGroup **)(a1 + 2952);
  if (v4)
    WebCore::EventLoopTaskGroup::resume(v4);
  result = WebCore::ScriptExecutionContext::resumeActiveDOMObjects((unsigned __int8 *)(a1 + 192), a2);
  if (*(_BYTE *)(a1 + 3415))
  {
    *(_BYTE *)(a1 + 3415) = 0;
    v6 = *(_QWORD *)(a1 + 2352);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8)
                                                                        + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      }
    }
    v8 = *(_QWORD *)(a1 + 2368);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        if (*(_DWORD *)(v9 - 12))
          return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
      }
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebCore::Document::resumeActiveDOMObjects(uint64_t a1, int a2)
{
  WebCore::EventLoopTaskGroup *v4;
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(WebCore::EventLoopTaskGroup **)(a1 + 2760);
  if (v4)
    WebCore::EventLoopTaskGroup::resume(v4);
  result = WebCore::ScriptExecutionContext::resumeActiveDOMObjects((unsigned __int8 *)a1, a2);
  if (*(_BYTE *)(a1 + 3223))
  {
    *(_BYTE *)(a1 + 3223) = 0;
    v6 = *(_QWORD *)(a1 + 2160);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8)
                                                                        + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      }
    }
    v8 = *(_QWORD *)(a1 + 2176);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        if (*(_DWORD *)(v9 - 12))
          return (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::stopActiveDOMObjects(WebCore::Document *this, void *a2)
{
  return WebCore::Document::stopActiveDOMObjects((WebCore::Document *)((char *)this - 192), a2);
}

uint64_t WebCore::Document::existingAXObjectCacheSlow(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  WebCore::Document *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    while (1)
    {
      v7 = *((_QWORD *)this + 66);
      if (!v7)
        break;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 120);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 8);
      if (!v10)
        break;
      this = *(WebCore::Document **)(*(_QWORD *)(v10 + 40) + 8);
    }
  }
  else
  {
    v1 = *((_QWORD *)this + 66);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
        if (v3)
          v4 = *(_BYTE *)(v3 + 144) == 0;
        else
          v4 = 0;
        if (v4)
        {
          v5 = *(WebCore::Document **)(v3 + 296);
          if (v5)
            this = v5;
        }
      }
    }
  }
  return *((_QWORD *)this + 186);
}

WebCore::AXObjectCache **std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](WebCore::AXObjectCache **a1, WebCore::AXObjectCache **a2)
{
  WebCore::AXObjectCache *v3;
  WebCore::AXObjectCache *v4;
  _DWORD *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::AXObjectCache::~AXObjectCache(v4);
    if (v5[2])
      bzero(v5, 0x318uLL);
    else
      WTF::fastFree((WTF *)v5, v6);
  }
  return a1;
}

uint64_t WebCore::Document::setVisuallyOrdered(uint64_t this)
{
  uint64_t v1;
  int v2;

  *(_BYTE *)(this + 3388) = 1;
  v1 = *(_QWORD *)(this + 1944);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 124) |= 0x10u;
    *(_DWORD *)(v1 + 16) = v2 + 1;
    if (v2 == -1)
    {
      this = 286;
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(v1 + 16) = v2;
    }
  }
  return this;
}

uint64_t WebCore::Document::createParser@<X0>(WebCore::Document *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t result;

  v4 = *((_QWORD *)this + 66);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_DWORD **)(v5 + 288);
    if (v6)
      ++v6[2];
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_BYTE *)this + 712);
  v8 = WTF::fastMalloc((WTF *)0x1D8);
  result = WebCore::XMLDocumentParser::XMLDocumentParser(v8, this, (uint64_t)v6, v7);
  *a2 = result;
  if (v6)
  {
    if (v6[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return result;
}

uint64_t WebCore::Document::fragmentHighlightRegistry(WebCore::Document *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WebCore::HighlightRegistry *v4;
  WTF *v5;
  void *v6;

  result = *((_QWORD *)this + 309);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 0;
    v4 = (WebCore::HighlightRegistry *)*((_QWORD *)this + 309);
    *((_QWORD *)this + 309) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::HighlightRegistry::~HighlightRegistry(v4, v3);
        WTF::fastFree(v5, v6);
        return *((_QWORD *)this + 309);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::appHighlightRegistry(WebCore::Document *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WebCore::HighlightRegistry *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v26;
  void *v27;

  if (!*((_QWORD *)this + 310))
  {
    v3 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 32) = 0;
    v4 = (WebCore::HighlightRegistry *)*((_QWORD *)this + 310);
    *((_QWORD *)this + 310) = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::HighlightRegistry::~HighlightRegistry(v4, v2);
        WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    v5 = *((_QWORD *)this + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            ++*(_DWORD *)v8;
            v9 = *((_QWORD *)this + 310);
            v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 576))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
            if (((v10 ^ (*(_BYTE *)(v9 + 32) == 0)) & 1) != 0)
            {
LABEL_34:
              if (*(_DWORD *)v8 == 1)
              {
                WebCore::Page::~Page(v8);
                WTF::fastFree(v26, v27);
              }
              else
              {
                --*(_DWORD *)v8;
              }
              return *((_QWORD *)this + 310);
            }
            *(_BYTE *)(v9 + 32) = v10;
            v11 = *(_QWORD **)(v9 + 8);
            if (v11)
            {
              v12 = *((unsigned int *)v11 - 1);
              v13 = &v11[2 * v12];
              if (*((_DWORD *)v11 - 3))
              {
                v14 = v11;
                if ((_DWORD)v12)
                {
                  v15 = 16 * v12;
                  v14 = v11;
                  while ((unint64_t)(*v14 + 1) <= 1)
                  {
                    v14 += 2;
                    v15 -= 16;
                    if (!v15)
                    {
                      v14 = v13;
                      goto LABEL_21;
                    }
                  }
                }
                goto LABEL_21;
              }
              v14 = &v11[2 * v12];
            }
            else
            {
              v14 = 0;
              v12 = 0;
            }
            v13 = &v11[2 * v12];
LABEL_21:
            if (v11)
              v18 = &v11[2 * *((unsigned int *)v11 - 1)];
            else
              v18 = 0;
            while (v14 != v18)
            {
              v19 = v14[1];
              v20 = *(unsigned int *)(v19 + 20);
              if ((_DWORD)v20)
              {
                v21 = *(uint64_t **)(v19 + 8);
                v22 = 8 * v20;
                do
                {
                  v23 = *v21++;
                  WebCore::Highlight::repaintRange(*(_QWORD *)(v23 + 16));
                  v22 -= 8;
                }
                while (v22);
              }
              v24 = v14 + 2;
              v14 = v13;
              if (v24 != v13)
              {
                v14 = v24;
                while ((unint64_t)(*v14 + 1) <= 1)
                {
                  v14 += 2;
                  if (v14 == v13)
                  {
                    v14 = v13;
                    break;
                  }
                }
              }
            }
            goto LABEL_34;
          }
        }
      }
    }
  }
  return *((_QWORD *)this + 310);
}

uint64_t WebCore::Document::appHighlightStorage(WebCore::Document *this)
{
  uint64_t v1;
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  WebCore::AppHighlightStorage *v6;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 311);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x68);
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v3)
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
    }
    *(_BYTE *)(v1 + 96) = 0;
    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 0;
    v6 = (WebCore::AppHighlightStorage *)*((_QWORD *)this + 311);
    *((_QWORD *)this + 311) = v1;
    if (v6)
    {
      WebCore::AppHighlightStorage::~AppHighlightStorage(v6, v4);
      WTF::fastFree(v7, v8);
      return *((_QWORD *)this + 311);
    }
  }
  return v1;
}

uint64_t WebCore::Document::collectHighlightRangesFromRegister(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)();
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  unsigned int **v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  _QWORD *v59;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;

  v2 = result;
  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[2 * v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = *(_QWORD **)(a2 + 8);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(a2 + 8);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = &v3[2 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[2 * v4];
  if (!v3)
  {
    v8 = 0;
    goto LABEL_13;
  }
LABEL_8:
  v8 = &v3[2 * *((unsigned int *)v3 - 1)];
LABEL_13:
  if (v8 == v6)
    goto LABEL_96;
  v61 = v8;
  v62 = v5;
  v64 = result;
  do
  {
    v9 = v6[1];
    v10 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(v9 + 8);
      v12 = &v11[v10];
      v63 = v12;
      while (1)
      {
        v13 = *v11;
        if (*(_QWORD *)(*v11 + 24))
          v14 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v14 = 0;
        if (v14)
        {
          if (*(_QWORD *)(v13 + 40)
             ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
             : 0)
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 16) + 56))(*(_QWORD *)(v13 + 16));
            if (!(_DWORD)result)
              goto LABEL_76;
            v13 = *v11;
          }
        }
        v16 = *(_DWORD **)(v13 + 16);
        v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 56))(v16);
        result = v17 ? (uint64_t)v16 : 0;
        if (result)
          break;
        if ((v17 & 1) != 0)
          goto LABEL_32;
LABEL_35:
        v19 = *(_QWORD *)(*v11 + 16);
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        *(_DWORD *)(v20 + 24) += 2;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
        *(_DWORD *)(v21 + 24) += 2;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        if (*(_QWORD *)(v20 + 40) == *(_QWORD *)(v21 + 40))
        {
          v23 = *v11;
          v24 = *(unsigned int *)(v2 + 12);
          if ((_DWORD)v24 == *(_DWORD *)(v2 + 8))
          {
            v25 = v24 + (v24 >> 2);
            if (v25 >= 0x10)
              v26 = v25 + 1;
            else
              v26 = 16;
            if (v26 <= v24 + 1)
              v27 = v24 + 1;
            else
              v27 = v26;
            if (v27 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v28 = v64;
            v29 = *(WTF **)v64;
            v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v27));
            *(_DWORD *)(v64 + 8) = v27;
            *(_QWORD *)v64 = v30;
            if ((_DWORD)v24)
            {
              v31 = (unsigned int **)((char *)v29 + 8 * v24);
              v32 = (unsigned int **)v29;
              do
              {
                v33 = *v32;
                *v32 = 0;
                *(_QWORD *)v30 = v33;
                v34 = *v32;
                *v32 = 0;
                if (v34)
                {
                  do
                  {
                    v35 = __ldaxr(v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, v34));
                  if (!v36)
                  {
                    atomic_store(1u, v34);
                    WTF::fastFree((WTF *)v34, v22);
                  }
                }
                v30 = (WTF *)((char *)v30 + 8);
                ++v32;
              }
              while (v32 != v31);
              v28 = v64;
              v30 = *(WTF **)v64;
            }
            if (v29)
            {
              if (v30 == v29)
              {
                *(_QWORD *)v28 = 0;
                *(_DWORD *)(v28 + 8) = 0;
              }
              WTF::fastFree(v29, v22);
              v30 = *(WTF **)v28;
            }
            v42 = *(unsigned int *)(v28 + 12);
            result = *(_QWORD *)(v23 + 8);
            if (result)
              goto LABEL_135;
            result = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)result = 1;
            *(_QWORD *)(result + 8) = v23;
            v43 = *(unsigned int **)(v23 + 8);
            *(_QWORD *)(v23 + 8) = result;
            if (!v43)
              goto LABEL_135;
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              WTF::fastFree((WTF *)v43, v22);
            }
            result = *(_QWORD *)(v23 + 8);
            if (result)
            {
LABEL_135:
              do
                v46 = __ldaxr((unsigned int *)result);
              while (__stlxr(v46 + 1, (unsigned int *)result));
            }
            *((_QWORD *)v30 + v42) = result;
            v12 = v63;
            v2 = v64;
          }
          else
          {
            v37 = *(_QWORD *)v2;
            result = *(_QWORD *)(v23 + 8);
            if (result)
              goto LABEL_136;
            result = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)result = 1;
            *(_QWORD *)(result + 8) = v23;
            v38 = *(unsigned int **)(v23 + 8);
            *(_QWORD *)(v23 + 8) = result;
            if (!v38)
              goto LABEL_136;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              WTF::fastFree((WTF *)v38, v22);
            }
            result = *(_QWORD *)(v23 + 8);
            if (result)
            {
LABEL_136:
              do
                v41 = __ldaxr((unsigned int *)result);
              while (__stlxr(v41 + 1, (unsigned int *)result));
            }
            *(_QWORD *)(v37 + 8 * v24) = result;
          }
          ++*(_DWORD *)(v2 + 12);
        }
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v21, v22);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v20, v22);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
LABEL_76:
        if (++v11 == v12)
          goto LABEL_89;
      }
      v18 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v18;
      if (v17)
      {
LABEL_32:
        v18 = v16[2];
        if (!*((_BYTE *)v16 + 81))
        {
          if (v18 == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            v16[2] = v18 - 1;
          goto LABEL_76;
        }
      }
      if (v18 == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        *(_DWORD *)(result + 8) = v18 - 1;
      goto LABEL_35;
    }
LABEL_89:
    v47 = v6 + 2;
    v6 = v62;
    if (v47 != v62)
    {
      v6 = v47;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v62)
        {
          v6 = v62;
          break;
        }
      }
    }
  }
  while (v6 != v61);
  v3 = *(_QWORD **)(a2 + 8);
LABEL_96:
  if (v3)
  {
    v48 = *((unsigned int *)v3 - 1);
    v49 = &v3[2 * v48];
    if (*((_DWORD *)v3 - 3))
    {
      v50 = v3;
      if ((_DWORD)v48)
      {
        v51 = 16 * v48;
        v50 = v3;
        while ((unint64_t)(*v50 + 1) <= 1)
        {
          v50 += 2;
          v51 -= 16;
          if (!v51)
          {
            v50 = v49;
            break;
          }
        }
      }
LABEL_103:
      v52 = &v3[2 * *((unsigned int *)v3 - 1)];
      goto LABEL_108;
    }
    v50 = &v3[2 * v48];
  }
  else
  {
    v50 = 0;
    v48 = 0;
  }
  v49 = &v3[2 * v48];
  if (v3)
    goto LABEL_103;
  v52 = 0;
LABEL_108:
  if (v52 != v50)
  {
    while (1)
    {
      v53 = v50[1];
      v54 = *(unsigned int *)(v53 + 20);
      if ((_DWORD)v54)
        break;
LABEL_125:
      v59 = v50 + 2;
      v50 = v49;
      if (v59 != v49)
      {
        v50 = v59;
        while ((unint64_t)(*v50 + 1) <= 1)
        {
          v50 += 2;
          if (v50 == v49)
          {
            v50 = v49;
            break;
          }
        }
      }
      if (v50 == v52)
        return result;
    }
    v55 = *(_QWORD *)(v53 + 8);
    v56 = 8 * v54;
    while (2)
    {
      v57 = *(_BYTE **)(*(_QWORD *)v55 + 16);
      v58 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v57 + 56))(v57);
      if (v58)
        result = (uint64_t)v57;
      else
        result = 0;
      if (result)
      {
        ++*(_DWORD *)(result + 8);
        if (v58)
        {
LABEL_116:
          if (v57[81])
            v57[81] = 0;
        }
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      else if ((v58 & 1) != 0)
      {
        goto LABEL_116;
      }
      v55 += 8;
      v56 -= 8;
      if (!v56)
        goto LABEL_125;
      continue;
    }
  }
  return result;
}

uint64_t *std::optional<WebCore::SimpleRange>::~optional(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)a1 + 32))
  {
    v2 = a1[2];
    a1[2] = 0;
    if (v2)
    {
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WebCore::HighlightRange::setStartPosition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *result;
  int v6;

  v4 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

unsigned int *WebCore::HighlightRange::setEndPosition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *result;
  int v6;

  v4 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 48) = v6;
  return result;
}

unsigned int *WebCore::Document::openForBindings@<X0>(unsigned int *this@<X0>, WebCore::LocalDOMWindow *a2@<X1>, WebCore::LocalDOMWindow *a3@<X2>, const WTF::String *a4@<X3>, const WTF::AtomString *a5@<X4>, const WTF::String *a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int *v7;

  v7 = (unsigned int *)*((_QWORD *)this + 87);
  if (v7)
  {
    ++v7[6];
    this = WebCore::LocalDOMWindow::open(v7, a2, a3, a4, a5, a6, a7);
    if (v7[6] == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 72))(v7);
    else
      --v7[6];
  }
  else
  {
    *(_BYTE *)a7 = 12;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::Document::openForBindings@<X0>(uint64_t this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  unsigned __int8 v11;

  if ((*(_WORD *)(this + 3358) & 1) == 0 || (v6 = this, *(_DWORD *)(this + 3336)))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_7:
    v7 = 1;
    goto LABEL_5;
  }
  this = WebCore::Document::open(this, a2, (uint64_t)v9);
  v7 = v11;
  if (v11)
  {
    v8 = v10;
    *(_BYTE *)a3 = v9[0];
    *(_QWORD *)(a3 + 8) = v8;
    goto LABEL_7;
  }
  *(_QWORD *)a3 = v6;
LABEL_5:
  *(_DWORD *)(a3 + 16) = v7;
  return this;
}

WTF::StringImpl *WebCore::Document::completeURL@<X0>(WebCore::Document *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, WTF::URL *a4@<X8>)
{
  return WebCore::Document::completeURL(a1, a2, (uint64_t)a1 + 848, a3, a4);
}

void `non-virtual thunk to'WebCore::Document::fontLoadRequest(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  WebCore::Document::fontLoadRequest((WebCore::Document *)(a1 - 192), a2, a3, a4, a5, a6);
}

double WebCore::DocumentFontLoader::beginLoadingFontSoon(WebCore::DocumentFontLoader *this, WebCore::CachedFont *a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::CachedResourceLoader *v12;
  int v13;
  unsigned int v14;
  double v15;
  WTF *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WebCore::CachedResource *v21;
  _BYTE v22[24];
  uint64_t *v23;

  if (!*((_BYTE *)this + 81))
  {
    v4 = (_QWORD *)((char *)this + 64);
    v21 = a2;
    v5 = *((unsigned int *)this + 19);
    if ((_DWORD)v5 == *((_DWORD *)this + 18))
    {
      WTF::Vector<WebCore::CachedResourceHandle<WebCore::CachedFont>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CachedFont*>((uint64_t)v4, &v21);
    }
    else
    {
      v7 = (uint64_t *)(*v4 + 8 * v5);
      v8 = *((_QWORD *)a2 + 1);
      if (v8)
        goto LABEL_34;
      v8 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = a2;
      v18 = (unsigned int *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v8;
      if (!v18)
        goto LABEL_34;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
      v8 = *((_QWORD *)a2 + 1);
      if (v8)
      {
LABEL_34:
        do
          v9 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v9 + 1, (unsigned int *)v8));
        *v7 = v8;
        v10 = *(_QWORD *)(v8 + 8);
        if (v10)
        {
          v23 = v7;
          ++*(_DWORD *)(v10 + 548);
          v11 = *(_QWORD *)(v10 + 488);
          if (v11)
          {
            if (*(_QWORD *)(v11 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v10 + 464), (uint64_t *)&v23, (uint64_t)v22);
          }
        }
      }
      else
      {
        *v7 = 0;
      }
      ++*((_DWORD *)this + 19);
    }
    v12 = *(WebCore::CachedResourceLoader **)(*(_QWORD *)(*(_QWORD *)this + 8) + 720);
    if (!v12)
      v12 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(*(_QWORD *)this + 8), a2);
    v13 = (*(_DWORD *)v12)++;
    if ((*(_WORD *)((_BYTE *)a2 + 557) & 0x4000) == 0)
    {
      v14 = *((_BYTE *)a2 + 556) & 0x1F;
      if (v14 > 0xD || ((1 << v14) & 0x2F01) == 0)
        ++*((_DWORD *)v12 + 22);
    }
    if (v13)
    {
      *(_DWORD *)v12 = v13;
    }
    else
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v12, a2);
      v12 = (WebCore::CachedResourceLoader *)WTF::fastFree(v16, v17);
    }
    if (!*((_BYTE *)this + 80))
    {
      if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        *((_QWORD *)this + 4) = 0;
        WTF::MonotonicTime::now(v12);
        WebCore::TimerBase::setNextFireTime((uint64_t)this + 8, v15 + 0.0);
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::Document::beginLoadingFontSoon(WebCore::Document *this, WebCore::FontLoadRequest *a2)
{
  WebCore::Document::beginLoadingFontSoon((WebCore::Document *)((char *)this - 192), a2);
}

unsigned int *WebCore::Document::setBodyOrFrameset@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;

  v3 = *a2;
  if (!v3
    || (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24), v5 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24), v4 != v5)
    && v4 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24)
    || (v6 = *((_QWORD *)result + 159)) == 0)
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    || (v7 = *(_QWORD *)(v6 + 80)) == 0)
  {
LABEL_11:
    *(_DWORD *)(v6 + 24) += 2;
    result = (unsigned int *)WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v3, a3);
    if (*(_DWORD *)(v6 + 24) != 2)
    {
      *(_DWORD *)(v6 + 24) -= 2;
      return result;
    }
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      v10 = (WebCore::Node *)v6;
      return WebCore::Node::removedLastRef(v10, (void *)v3);
    }
    return result;
  }
  while ((*(_WORD *)(v7 + 28) & 0x10) == 0)
  {
    v7 = *(_QWORD *)(v7 + 56);
    if (!v7)
      goto LABEL_11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
  if (v8 != v5)
  {
LABEL_14:
    if (v8 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      while (1)
      {
        v7 = *(_QWORD *)(v7 + 56);
        if (!v7)
          goto LABEL_11;
        if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
          if (v8 != v5)
            goto LABEL_14;
          break;
        }
      }
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
  if (v3 == v7)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(v6 + 24) += 2;
    result = (unsigned int *)WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v6, (WebCore::Node *)v3, (WebCore::Node *)v7, a3);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    v3 = v7;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      v10 = (WebCore::Node *)v3;
      return WebCore::Node::removedLastRef(v10, (void *)v3);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::Document::protectedHead@<X0>(WebCore::Document *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::Document::head(this);
  if (result)
    *(_DWORD *)(result + 24) += 2;
  *a2 = result;
  return result;
}

WebCore::Document *WebCore::Document::closeForBindings@<X0>(WebCore::Document *this@<X0>, uint64_t a2@<X8>)
{
  if ((*((_WORD *)this + 1679) & 1) == 0 || *((_DWORD *)this + 834))
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    this = (WebCore::Document *)WebCore::Document::close(this);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::Document::checkCompleted(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::FrameLoader *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(this + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = *(WebCore::FrameLoader **)(v2 + 280);
      ++*(_DWORD *)v5;
      this = WebCore::FrameLoader::checkCompleted(v5);
      if (!*(_DWORD *)v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1959818D4);
      }
      --*(_DWORD *)v5;
      do
      {
        v6 = __ldaxr(v3);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v3));
      if (!v7)
      {
        atomic_store(1u, v3);
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v8 = off_1E31FE290;
        v8[1] = v3;
        v9 = (uint64_t)v8;
        WTF::ensureOnMainThread();
        this = v9;
        if (v9)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::applyPendingXSLTransformsNowIfScheduled(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 3438))
  {
    v1 = this;
    if ((*(_QWORD *)(this + 1672) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 1640));
    return WebCore::Document::applyPendingXSLTransformsTimerFired(v1);
  }
  return this;
}

WebCore::EventTarget *WebCore::Document::dispatchPageshowEvent(WebCore::EventTarget *result, char a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  WebCore::LocalDOMWindow *v11;

  if (*((_BYTE *)result + 3356) != 1)
  {
    v3 = result;
    *((_BYTE *)result + 3356) = 1;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(result);
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v6 = *(_QWORD *)(v5 + 40);
    }
    v7 = bmalloc::api::isoAllocate();
    result = (WebCore::EventTarget *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    *(_QWORD *)(v7 + 8) = 0;
    v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x288206 | (*(_QWORD *)(v6 + 1408) != 0);
    *(_DWORD *)(v7 + 16) = 1;
    *(_DWORD *)(v7 + 20) = v9;
    v10 = *(_DWORD **)(v6 + 1408);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v7 + 24) = v10;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)v7 = off_1E33A65D0;
    *(_BYTE *)(v7 + 72) = a2;
    v11 = (WebCore::LocalDOMWindow *)*((_QWORD *)v3 + 87);
    if (v11)
    {
      ++*((_DWORD *)v11 + 6);
      result = WebCore::LocalDOMWindow::dispatchEvent(v11, (WebCore::Event *)v7, v3);
      if (*((_DWORD *)v11 + 6) == 1)
        result = (WebCore::EventTarget *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v11 + 72))(v11);
      else
        --*((_DWORD *)v11 + 6);
    }
    if (*(_DWORD *)(v7 + 16) == 1)
      return (WebCore::EventTarget *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 16);
  }
  return result;
}

uint64_t WebCore::Document::write@<X0>(uint64_t this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  _BOOL4 v9;
  int v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  char v16;

  if ((*(_WORD *)(this + 3358) & 1) == 0 || (v5 = this, *(_DWORD *)(this + 3336)))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  if (*(_BYTE *)(this + 3374))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return this;
  }
  v8 = *(_DWORD *)(this + 3272) + 1;
  *(_DWORD *)(this + 3272) = v8;
  v9 = v8 >= 2 && *(_BYTE *)(this + 3375) != 0;
  v10 = v8 > 0x15 || v9;
  *(_BYTE *)(this + 3375) = v10;
  if (v10)
    goto LABEL_16;
  this = *(_QWORD *)(this + 728);
  if (this)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    if ((this & 1) != 0)
      goto LABEL_12;
  }
  if (!*(_DWORD *)(v5 + 3340) && !*(_DWORD *)(v5 + 3344))
  {
    WebCore::Document::open(v5, a2, (uint64_t)v14);
    if (v16)
    {
      v13 = v15;
      v15 = 0;
      *(_BYTE *)a4 = v14[0];
      *(_QWORD *)(a4 + 8) = v13;
      *(_BYTE *)(a4 + 16) = 1;
      this = WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v14, v12);
      goto LABEL_17;
    }
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v14, v12);
LABEL_12:
    v11 = *(_DWORD **)(v5 + 728);
    if (v11)
      ++v11[2];
    this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v11 + 32))(v11, a3);
    if (v11[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
LABEL_16:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_17:
  --*(_DWORD *)(v5 + 3272);
  return this;
}

WTF::StringImpl *WebCore::Document::write@<X0>(uint64_t a1@<X0>, WebCore::Document *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *result;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::SecurityContext *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  char *v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61[3];
  __int16 v62;
  __int128 v63;
  WTF *v64[2];
  char v65;
  _QWORD v66[7];
  char v67;

  v67 = 1;
  memset(v61, 0, sizeof(v61));
  v62 = 257;
  v63 = 0u;
  *(_OWORD *)v64 = 0u;
  v65 = 0;
  v66[0] = 0;
  *(_QWORD *)((char *)v66 + 7) = 0;
  *(_QWORD *)((char *)&v66[2] + 6) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)((char *)&v66[3] + 6) = 0;
  v11 = *a3;
  v12 = (uint64_t)(*a3 + 2);
  if (*a3)
    v13 = (uint64_t)(*a3 + 2);
  else
    v13 = 0;
  *(_QWORD *)((char *)&v66[4] + 6) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)((char *)&v66[5] + 6) = 0;
  if (v11)
    v14 = v12 + 16 * *v11;
  else
    v14 = 0;
  if (v13 == v14)
    goto LABEL_23;
  do
  {
    v57 = &v67;
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_98;
    v53 = (WTF::StringImpl *)&v57;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))off_1E33A3670[v15])(&v60, &v53, v13);
    v16 = v60;
    v60 = 0;
    v53 = v16;
    if (v16)
    {
      LODWORD(v54) = *((_DWORD *)v16 + 1);
      HIDWORD(v54) = v54;
      v55 = 0;
      v56 = 257;
      if ((_DWORD)v54)
      {
        LOBYTE(v56) = (*((_BYTE *)v16 + 16) & 4) != 0;
        v55 = *((_QWORD *)v16 + 1);
      }
    }
    else
    {
      v54 = 0;
      v55 = 0;
      v56 = 257;
    }
    WebCore::SegmentedString::appendSubstring((uint64_t)v61, (uint64_t *)&v53);
    v18 = v53;
    v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v60;
    v60 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v13 += 16;
  }
  while (v13 != v14);
  if (v67)
    goto LABEL_23;
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v21 = *(_QWORD *)(v20 + 704);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      v20 = v22;
  }
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 192) + 136))(v20 + 192) + 464) & 0x200000000000000) == 0)
  {
LABEL_23:
    if (a5)
    {
      if (a5 == 1)
      {
        v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v53 = v23;
LABEL_26:
        LODWORD(v54) = *((_DWORD *)v23 + 1);
        HIDWORD(v54) = v54;
        v55 = 0;
        v56 = 257;
        if ((_DWORD)v54)
        {
          LOBYTE(v56) = (*((_BYTE *)v23 + 16) & 4) != 0;
          v55 = *((_QWORD *)v23 + 1);
        }
        goto LABEL_28;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v23 = v53;
      if (v53)
        goto LABEL_26;
    }
    else
    {
      v53 = 0;
    }
    v54 = 0;
    v55 = 0;
    v56 = 257;
LABEL_28:
    WebCore::SegmentedString::appendSubstring((uint64_t)v61, (uint64_t *)&v53);
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    WebCore::Document::write(a1, a2, (uint64_t)v61, a6);
    goto LABEL_32;
  }
  WebCore::SegmentedString::toString((WebCore::SegmentedString *)v61, &v60);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v34 = *(_QWORD *)(v33 + 704);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
      v33 = v35;
  }
  v36 = (WebCore::SecurityContext *)(v33 + 192);
  if (a5 <= 1)
    v37 = "Document write";
  else
    v37 = "Document writeln";
  if (a5 <= 1)
    v38 = 15;
  else
    v38 = 17;
  WTF::String::String(&v53, (uint64_t)v37, v38);
  WebCore::trustedTypeCompliantString(0, v36, &v60, (uint64_t *)&v53, (uint64_t)&v57);
  v40 = v53;
  v53 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (v59)
  {
    if (v59 != 1)
    {
LABEL_98:
      v49 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_99;
    }
    v41 = v58;
    v58 = 0;
    *(_BYTE *)a6 = (_BYTE)v57;
    *(_QWORD *)(a6 + 8) = v41;
    v42 = 1;
    *(_BYTE *)(a6 + 16) = 1;
  }
  else
  {
    v44 = (WTF::StringImpl *)v57;
    v57 = 0;
    v52 = v44;
    WebCore::SegmentedString::SegmentedString((uint64_t)&v53, (unsigned __int8 **)&v52);
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v45);
      else
        *(_DWORD *)v52 -= 2;
    }
    WTF::String::String(&v52, a4, a5);
    WebCore::SegmentedString::append((uint64_t)&v53, (uint64_t *)&v52);
    v47 = v52;
    v52 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v46);
      else
        *(_DWORD *)v47 -= 2;
    }
    WebCore::Document::write(a1, a2, (uint64_t)&v53, a6);
    WebCore::SegmentedString::~SegmentedString((WebCore::SegmentedString *)&v53, v48);
    v42 = v59;
    if (v59 == -1)
      goto LABEL_68;
  }
  ((void (*)(WTF::StringImpl **, char **))off_1E33A33B0[v42])(&v53, &v57);
LABEL_68:
  v43 = v60;
  v60 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v26);
    else
      *(_DWORD *)v43 -= 2;
  }
LABEL_32:
  v27 = v63;
  v28 = v64[0];
  if ((unint64_t)v63 > *((_QWORD *)&v63 + 1))
  {
    if (*((_QWORD *)&v63 + 1))
    {
      v50 = 32 * *((_QWORD *)&v63 + 1);
      do
      {
        v51 = *(WTF::StringImpl **)v28;
        *(_QWORD *)v28 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v26);
          else
            *(_DWORD *)v51 -= 2;
        }
        v28 = (WTF *)((char *)v28 + 32);
        v50 -= 32;
      }
      while (v50);
      v28 = v64[0];
      v27 = v63;
    }
    if (v27 != LODWORD(v64[1]))
    {
      a6 = (uint64_t)v28 + 32 * v27;
      a2 = (WebCore::Document *)(32 * LODWORD(v64[1]) - 32 * v27);
      do
      {
        v49 = *(WTF::StringImpl **)a6;
        *(_QWORD *)a6 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
LABEL_99:
            WTF::StringImpl::destroy(v49, v26);
          else
            *(_DWORD *)v49 -= 2;
        }
        a6 += 32;
        a2 = (WebCore::Document *)((char *)a2 - 32);
      }
      while (a2);
    }
  }
  else
  {
    if ((_QWORD)v63 == *((_QWORD *)&v63 + 1))
      goto LABEL_35;
    v30 = (WTF::StringImpl **)((char *)v64[0] + 32 * v63);
    v31 = 32 * *((_QWORD *)&v63 + 1) - 32 * v63;
    do
    {
      v32 = *v30;
      *v30 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v26);
        else
          *(_DWORD *)v32 -= 2;
      }
      v30 += 4;
      v31 -= 32;
    }
    while (v31);
  }
  v28 = v64[0];
LABEL_35:
  if (v28)
  {
    v64[0] = 0;
    LODWORD(v64[1]) = 0;
    WTF::fastFree(v28, v26);
  }
  result = v61[0];
  v61[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SegmentedString::SegmentedString(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;
  _WORD *v5;
  uint64_t (*v6)(uint64_t);

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 1);
    *(_DWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 12) = v3;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 257;
    if (v3)
    {
      v4 = (*((_DWORD *)v2 + 4) >> 2) & 1;
      *(_BYTE *)(result + 24) = (*((_DWORD *)v2 + 4) & 4) != 0;
      v2 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      *(_QWORD *)(result + 16) = v2;
      goto LABEL_4;
    }
    v2 = 0;
  }
  else
  {
    v3 = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 257;
  }
  v4 = 1;
LABEL_4:
  *(_QWORD *)(result + 66) = 0;
  v5 = (_WORD *)(result + 66);
  *(_BYTE *)(result + 64) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)(result + 73) = 0;
  *(_QWORD *)(result + 88) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(result + 112) = 0;
  if (!v3)
    return result;
  if (v4)
  {
    *v5 = *v2;
    if (v3 >= 2)
    {
      *(_BYTE *)(result + 80) = 3;
      return result;
    }
    goto LABEL_10;
  }
  *v5 = *(_WORD *)v2;
  if (v3 <= 1)
  {
LABEL_10:
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(result + 96) = 0;
    v6 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_11;
  }
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
  *(_QWORD *)(result + 96) = 0;
  v6 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_11:
  *(_QWORD *)(result + 104) = v6;
  *(_QWORD *)(result + 112) = 0;
  return result;
}

void WebCore::SegmentedString::~SegmentedString(WebCore::SegmentedString *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 4, a2);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::Document::write(WebCore::Document *this@<X0>, WebCore::Document *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD v11[3];
  __int16 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _WORD v16[27];

  memset(v11, 0, sizeof(v11));
  v12 = 257;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)((char *)&v16[3] + 1) = 0;
  *(_QWORD *)&v16[11] = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)&v16[15] = 0;
  *(_QWORD *)&v16[19] = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)&v16[23] = 0;
  v7 = *a3;
  if (*a3)
    v8 = (uint64_t *)(*a3 + 2);
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&(*a3)[2 * *v7 + 2];
  else
    v9 = 0;
  while (v8 != (uint64_t *)v9)
    WebCore::SegmentedString::append((uint64_t)v11, v8++);
  WebCore::Document::write((uint64_t)this, a2, (uint64_t)v11, a4);
  WebCore::SegmentedString::~SegmentedString((WebCore::SegmentedString *)v11, v10);
}

WTF::StringImpl *WebCore::Document::writeln@<X0>(uint64_t a1@<X0>, WebCore::Document *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *result;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[3];
  __int16 v28;
  __int128 v29;
  WTF *v30[2];
  char v31;
  _WORD v32[27];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  memset(v27, 0, sizeof(v27));
  v28 = 257;
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)((char *)&v32[3] + 1) = 0;
  *(_QWORD *)&v32[11] = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)&v32[15] = 0;
  *(_QWORD *)&v32[19] = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)&v32[23] = 0;
  v7 = *a3;
  if (*a3)
    v8 = (uint64_t *)(*a3 + 2);
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&(*a3)[2 * *v7 + 2];
  else
    v9 = 0;
  for (; v8 != (uint64_t *)v9; ++v8)
  {
    v10 = *v8;
    *v8 = 0;
    v33 = v10;
    if (v10)
    {
      LODWORD(v34) = *(_DWORD *)(v10 + 4);
      HIDWORD(v34) = v34;
      v35 = 0;
      v36 = 257;
      if ((_DWORD)v34)
      {
        LOBYTE(v36) = (*(_BYTE *)(v10 + 16) & 4) != 0;
        v35 = *(_QWORD *)(v10 + 8);
      }
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 257;
    }
    WebCore::SegmentedString::appendSubstring((uint64_t)v27, &v33);
    v12 = (WTF::StringImpl *)v33;
    v33 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v33)
  {
    LODWORD(v34) = *(_DWORD *)(v33 + 4);
    HIDWORD(v34) = v34;
    v35 = 0;
    v36 = 257;
    if ((_DWORD)v34)
    {
      LOBYTE(v36) = (*(_BYTE *)(v33 + 16) & 4) != 0;
      v35 = *(_QWORD *)(v33 + 8);
    }
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 257;
  }
  WebCore::SegmentedString::appendSubstring((uint64_t)v27, &v33);
  v14 = (WTF::StringImpl *)v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::Document::write(a1, a2, (uint64_t)v27, a4);
  v16 = v29;
  v17 = v30[0];
  if ((unint64_t)v29 > *((_QWORD *)&v29 + 1))
  {
    if (*((_QWORD *)&v29 + 1))
    {
      v22 = 32 * *((_QWORD *)&v29 + 1);
      do
      {
        v23 = *(WTF::StringImpl **)v17;
        *(_QWORD *)v17 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v15);
          else
            *(_DWORD *)v23 -= 2;
        }
        v17 = (WTF *)((char *)v17 + 32);
        v22 -= 32;
      }
      while (v22);
      v17 = v30[0];
      v16 = v29;
    }
    if (v16 != LODWORD(v30[1]))
    {
      v24 = (WTF::StringImpl **)((char *)v17 + 32 * v16);
      v25 = 32 * LODWORD(v30[1]) - 32 * v16;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v15);
          else
            *(_DWORD *)v26 -= 2;
        }
        v24 += 4;
        v25 -= 32;
      }
      while (v25);
    }
LABEL_43:
    v17 = v30[0];
    if (!v30[0])
      goto LABEL_27;
    goto LABEL_44;
  }
  if ((_QWORD)v29 != *((_QWORD *)&v29 + 1))
  {
    v19 = (WTF::StringImpl **)((char *)v30[0] + 32 * v29);
    v20 = 32 * *((_QWORD *)&v29 + 1) - 32 * v29;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
      v19 += 4;
      v20 -= 32;
    }
    while (v20);
    goto LABEL_43;
  }
  if (!v30[0])
    goto LABEL_27;
LABEL_44:
  v30[0] = 0;
  LODWORD(v30[1]) = 0;
  WTF::fastFree(v17, v15);
LABEL_27:
  result = v27[0];
  v27[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::Document::minimumDOMTimerInterval(WebCore::Document *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 66);
  v2 = 0.004;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (*(_DWORD *)v5)++;
          v2 = *(double *)(*(_QWORD *)(v5 + 112) + 16);
          if (v6)
          {
            *(_DWORD *)v5 = v6;
          }
          else
          {
            WebCore::Page::~Page(v5);
            WTF::fastFree(v8, v9);
          }
        }
      }
    }
  }
  return v2;
}

double `non-virtual thunk to'WebCore::Document::minimumDOMTimerInterval(WebCore::Document *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 42);
  v2 = 0.004;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (*(_DWORD *)v5)++;
          v2 = *(double *)(*(_QWORD *)(v5 + 112) + 16);
          if (v6)
          {
            *(_DWORD *)v5 = v6;
          }
          else
          {
            WebCore::Page::~Page(v5);
            WTF::fastFree(v8, v9);
          }
        }
      }
    }
  }
  return v2;
}

double `non-virtual thunk to'WebCore::Document::domTimerAlignmentInterval(WebCore::Document *this, WTF::StringImpl *a2)
{
  return WebCore::Document::domTimerAlignmentInterval((WebCore::Document *)((char *)this - 192), a2);
}

uint64_t WebCore::Document::errorEventTarget(WebCore::Document *this)
{
  return *((_QWORD *)this + 87);
}

uint64_t `non-virtual thunk to'WebCore::Document::errorEventTarget(WebCore::Document *this)
{
  return *((_QWORD *)this + 63);
}

uint64_t WebCore::Document::logExceptionToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD **a6)
{
  return WebCore::Document::addMessage(a1, 1, 2, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t `non-virtual thunk to'WebCore::Document::logExceptionToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD **a6)
{
  return WebCore::Document::addMessage(a1 - 192, 1, 2, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t WebCore::Document::documentURI(WebCore::Document *this)
{
  uint64_t v1;
  WebCore::Document *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 292);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Document::isTopDocument(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Document11documentURIEvE3__0JZNKS9_11documentURIEvE3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_3URLEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, (char *)this + 1128);
  }
}

BOOL WebCore::Document::isTopDocument(WebCore::Document *this)
{
  uint64_t v1;
  WebCore::Document *i;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  WebCore::Document *v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::Document *v26;
  WTF *v27;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 0x2000000000) != 0)
  {
    v26 = this;
    v16 = *((_QWORD *)this + 66);
    if (v16)
      v17 = *(_QWORD *)(v16 + 8);
    else
      v17 = 0;
    WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v27, v17);
    v19 = (unsigned int *)v27;
    if (!v27)
      return 0;
    v20 = *((_QWORD *)v27 + 1);
    if (v20
      && ((v21 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8)) != 0 ? (v22 = *(_BYTE *)(v21 + 144) == 0) : (v22 = 0), v22))
    {
      v23 = 0;
      LOBYTE(v26) = *(_QWORD *)(v21 + 296) == (_QWORD)v26;
    }
    else
    {
      v23 = 1;
    }
    v27 = 0;
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
    v7 = (char)v26;
    if (v23)
      return 0;
  }
  else
  {
    if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
    {
      v9 = *((_QWORD *)this + 66);
      i = this;
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        i = this;
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 120);
          i = this;
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            for (i = this; v12; v12 = *(_QWORD *)(v15 + 8))
            {
              i = *(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8);
              v13 = *((_QWORD *)i + 66);
              if (!v13)
                break;
              v14 = *(_QWORD *)(v13 + 8);
              if (!v14)
                break;
              v15 = *(_QWORD *)(v14 + 120);
              if (!v15)
                break;
            }
          }
        }
      }
    }
    else
    {
      v1 = *((_QWORD *)this + 66);
      i = this;
      if (v1)
      {
        v3 = *(_QWORD *)(v1 + 8);
        i = this;
        if (v3)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
          if (v4)
            v5 = *(_BYTE *)(v4 + 144) == 0;
          else
            v5 = 0;
          i = this;
          if (v5)
          {
            v6 = *(WebCore::Document **)(v4 + 296);
            i = this;
            if (v6)
              i = v6;
          }
        }
      }
    }
    return i == this;
  }
  return v7;
}

uint64_t WebCore::Document::urlForBindings(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63[5];
  WTF::StringImpl *v64[5];
  char v65;
  WTF::StringImpl *v66;

  v1 = *(_QWORD *)(this + 736);
  if (!v1)
    return WTF::aboutBlankURL((WTF *)this);
  v2 = this;
  if (!*(_DWORD *)(v1 + 4))
    goto LABEL_33;
  v3 = *(_QWORD *)(this + 528);
  if (!v3)
    goto LABEL_33;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_33;
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 280) + 88))
    goto LABEL_33;
  if (*(_QWORD *)(v4 + 296) != this)
    goto LABEL_33;
  if (!WebCore::Document::isTopDocument((WebCore::Document *)this))
    goto LABEL_33;
  v5 = *(_QWORD *)(v2 + 528);
  if (!v5)
    goto LABEL_33;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_33;
  if (*(_BYTE *)(v2 + 3362) || *(_BYTE *)(v2 + 3405))
  {
    v58 = *(_QWORD *)(v6 + 120);
    if (v58)
    {
      v59 = *(_QWORD *)(v58 + 8);
      v10 = v2;
      if (v59)
      {
        while (1)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8);
          v5 = *(_QWORD *)(v10 + 528);
          if (!v5)
            goto LABEL_33;
          v60 = *(_QWORD *)(v5 + 8);
          if (v60)
          {
            v61 = *(_QWORD *)(v60 + 120);
            if (v61)
            {
              v59 = *(_QWORD *)(v61 + 8);
              if (v59)
                continue;
            }
          }
          goto LABEL_20;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
    if (v7)
      v8 = *(_BYTE *)(v7 + 144) == 0;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 296);
      v10 = v2;
      if (v9)
      {
        v5 = *(_QWORD *)(v9 + 528);
        if (!v5)
          goto LABEL_33;
        v10 = v9;
      }
      goto LABEL_20;
    }
  }
  v10 = v2;
LABEL_20:
  v11 = *(_QWORD *)(v5 + 8);
  if (!v11)
    goto LABEL_33;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 88);
  if (!v12 || *(_QWORD *)(v11 + 296) != v10)
    goto LABEL_33;
  ++*(_DWORD *)(v12 + 24);
  if ((*(_BYTE *)(v12 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 872));
    *(_BYTE *)(v12 + 1056) |= 1u;
  }
  this = WTF::URL::hasSpecialScheme((WTF::URL *)(v12 + 872));
  if ((this & 1) != 0 || (*(_BYTE *)(v2 + 744) & 2) == 0)
  {
    v13 = v12;
    goto LABEL_28;
  }
  v35 = *(_QWORD *)(v2 + 528);
  if (!v35)
    goto LABEL_101;
  v36 = *(_QWORD *)(v35 + 8);
  if (!v36)
    goto LABEL_101;
  v13 = *(_QWORD *)(*(_QWORD *)(v36 + 280) + 88);
  if (!v13)
    goto LABEL_73;
  if (*(_QWORD *)(v36 + 296) == v2)
    ++*(_DWORD *)(v13 + 24);
  else
LABEL_101:
    v13 = 0;
LABEL_73:
  if (*(_DWORD *)(v12 + 24) == 1)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  else
    --*(_DWORD *)(v12 + 24);
  if (v13)
  {
LABEL_28:
    v14 = 3516;
    if (!*(_BYTE *)(v13 + 3518))
      v14 = 3514;
    if ((*(_WORD *)(v13 + v14) & 1) == 0)
      goto LABEL_31;
    v16 = *(_QWORD *)(v2 + 528);
    if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v17 + 280) + 88))
    {
      if (*(_QWORD *)(v17 + 296) == v2)
        v18 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 88);
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    if ((*(_BYTE *)(v18 + 344) & 1) == 0)
    {
      this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v18 + 160));
      *(_BYTE *)(v18 + 344) |= 1u;
    }
    v19 = *(unsigned int *)(v18 + 268);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = (WTF::StringImpl **)(*(_QWORD *)(v18 + 256) + 8);
      while (*((_WORD *)v21 - 4) != 60)
      {
        ++v20;
        v21 += 2;
        if (v19 == v20)
          goto LABEL_48;
      }
      if (v20 >= v19)
        goto LABEL_134;
      v22 = *v21;
      if (*v21)
        *(_DWORD *)v22 += 2;
    }
    else
    {
LABEL_48:
      v22 = 0;
    }
    v63[0] = v22;
    MEMORY[0x19AEA52D4](v64, v63, 0);
    v24 = v63[0];
    v63[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (!v64[0])
    {
LABEL_31:
      if (*(_DWORD *)(v13 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      else
        --*(_DWORD *)(v13 + 24);
      goto LABEL_33;
    }
    if (!*((_DWORD *)v64[0] + 1))
      goto LABEL_61;
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v66, (const WTF::URL *)v64);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), v25);
    v27 = *(unsigned int *)(v26 + 32);
    if ((_DWORD)v27 != -1)
    {
      v63[0] = (WTF::StringImpl *)&v62;
      v28 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33A33F0[v27])(v63, v26 + 8);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v29 = 0;
        v30 = 0x100000000;
      }
      v31 = WebCore::RegistrableDomain::matches(&v66, v29, v30);
      v32 = v66;
      v66 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v23);
        else
          *(_DWORD *)v32 -= 2;
      }
      if ((v31 & 1) != 0)
      {
LABEL_61:
        v33 = 0;
        goto LABEL_62;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), v23);
      v38 = *(unsigned int *)(v37 + 32);
      if ((_DWORD)v38 != -1)
      {
        v63[0] = (WTF::StringImpl *)&v66;
        v39 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33A33F0[v38])(v63, v37 + 8);
        if (v39)
        {
          *(_DWORD *)v39 += 2;
          v40 = WTF::URL::host((WTF::URL *)v64);
          v42 = *(_QWORD *)(v39 + 8);
          v43 = *(_DWORD *)(v39 + 4);
          v44 = ((unint64_t)*(unsigned int *)(v39 + 16) >> 2) & 1;
        }
        else
        {
          v40 = WTF::URL::host((WTF::URL *)v64);
          v42 = 0;
          v43 = 0;
          v44 = 1;
        }
        if ((WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator()(v40, v41, v42, v43 | (v44 << 32)) & 1) != 0|| !*(_BYTE *)(v2 + 3434))
        {
          v33 = 0;
LABEL_86:
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v39, v23);
            else
              *(_DWORD *)v39 -= 2;
          }
LABEL_62:
          v34 = v64[0];
          v64[0] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v23);
            else
              *(_DWORD *)v34 -= 2;
          }
          if (*(_DWORD *)(v13 + 24) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
            if (!v33)
              goto LABEL_33;
          }
          else
          {
            --*(_DWORD *)(v13 + 24);
            if ((v33 & 1) == 0)
              goto LABEL_33;
          }
          return v2 + 1088;
        }
        WebCore::ScriptExecutionContext::currentSourceURL((WebCore::ScriptExecutionContext *)(v2 + 192), (uint64_t)v63);
        if (!v63[0] || !*((_DWORD *)v63[0] + 1))
          goto LABEL_93;
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v62, (const WTF::URL *)v63);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), v46);
        v48 = *(unsigned int *)(v47 + 32);
        if ((_DWORD)v48 != -1)
        {
          v66 = (WTF::StringImpl *)&v65;
          v49 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33A33F0[v48])(&v66, v47 + 8);
          if (v49)
          {
            v50 = *(_QWORD *)(v49 + 8);
            v51 = *(unsigned int *)(v49 + 4) | ((unint64_t)((*(_DWORD *)(v49 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v50 = 0;
            v51 = 0x100000000;
          }
          v52 = WebCore::RegistrableDomain::matches(&v62, v50, v51);
          v53 = v62;
          v62 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v23);
            else
              *(_DWORD *)v53 -= 2;
          }
          if ((v52 & 1) != 0
            || ((v54 = WTF::URL::host((WTF::URL *)v63), !v39)
              ? (v56 = 0, v57 = 0x100000000)
              : (v56 = *(_QWORD *)(v39 + 8),
                 v57 = *(unsigned int *)(v39 + 4) | ((unint64_t)((*(_DWORD *)(v39 + 16) >> 2) & 1) << 32)),
                (WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator()(v54, v55, v56, v57) & 1) != 0))
          {
            v33 = 0;
LABEL_94:
            v45 = v63[0];
            v63[0] = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v23);
              else
                *(_DWORD *)v45 -= 2;
            }
            goto LABEL_86;
          }
LABEL_93:
          v33 = 1;
          goto LABEL_94;
        }
      }
    }
    this = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_134:
    __break(0xC471u);
    return this;
  }
LABEL_33:
  this = v2 + 736;
  v15 = *(_QWORD *)(v2 + 736);
  if (!v15 || !*(_DWORD *)(v15 + 4))
    return WTF::aboutBlankURL((WTF *)this);
  return this;
}

WTF::StringImpl *WebCore::Document::setBaseURLOverride(WebCore::Document *this, const WTF::URL *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 56) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 57) = v6;
  return WebCore::Document::updateBaseURL(this);
}

WTF::StringImpl *WebCore::Document::processBaseElement(WebCore::Document *this)
{
  uint64_t v2;
  WebCore::Document *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  WebCore::Document *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _OWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  char v20;
  WTF::StringImpl *v21;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WebCore::Document *v59;
  __int16 v60;
  BOOL v61;
  BOOL v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 v65;
  __int128 v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *result;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  __int128 v91;
  __int128 v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  WTF::StringImpl *v96;

  v96 = 0;
  v2 = *((_QWORD *)this + 10);
  if (!v2)
  {
LABEL_14:
    v8 = 0;
    v9 = 0;
    goto LABEL_15;
  }
  while (1)
  {
    v3 = (WebCore::Document *)v2;
    v4 = *(_WORD *)(v2 + 28);
    if ((v4 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
      v6 = *(_QWORD *)(WebCore::HTMLNames::baseTag + 24);
      if (v5 == v6)
        break;
    }
    if ((v4 & 4) != 0)
    {
      v2 = *((_QWORD *)v3 + 10);
      if (v2)
        continue;
    }
    if (v3 == this)
      goto LABEL_14;
    while (1)
    {
      v2 = *((_QWORD *)v3 + 7);
      if (v2)
        break;
      v3 = (WebCore::Document *)*((_QWORD *)v3 + 4);
      if (v3)
        v7 = v3 == this;
      else
        v7 = 1;
      if (v7)
        goto LABEL_14;
    }
  }
  v41 = 0;
  v42 = 0;
  v9 = 0;
  v43 = WebCore::HTMLNames::hrefAttr;
  v44 = WebCore::HTMLNames::targetAttr;
  v45 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  *((_DWORD *)v3 + 6) += 2;
  v8 = v3;
  while (1)
  {
    if (v42)
      goto LABEL_64;
    v46 = *((_QWORD *)v3 + 13);
    if (v46
      && ((v47 = *(unsigned int *)(v46 + 4), (v47 & 1) != 0)
        ? (v48 = *(_QWORD *)(v46 + 40), v49 = *(unsigned int *)(v46 + 52))
        : (v48 = v46 + 32, v49 = v47 >> 5),
          v49))
    {
      v50 = (WTF::StringImpl **)(v48 + 8);
      while (1)
      {
        v51 = (uint64_t)*(v50 - 1);
        if (v51 == v43
          || *(_QWORD *)(v51 + 24) == *(_QWORD *)(v43 + 24) && *(_QWORD *)(v51 + 32) == *(_QWORD *)(v43 + 32))
        {
          break;
        }
        v50 += 2;
        if (!--v49)
          goto LABEL_78;
      }
    }
    else
    {
LABEL_78:
      v50 = v45;
    }
    v52 = *v50;
    if (!*v50)
    {
LABEL_64:
      if (v9)
        goto LABEL_97;
      v46 = *((_QWORD *)v3 + 13);
    }
    else
    {
      *(_DWORD *)v52 += 2;
      v96 = v52;
      v41 = v52;
      v42 = v52;
      if (v9)
        goto LABEL_15;
    }
    if (v46
      && ((v53 = *(unsigned int *)(v46 + 4), (v53 & 1) != 0)
        ? (v54 = *(_QWORD *)(v46 + 40), v55 = *(unsigned int *)(v46 + 52))
        : (v54 = v46 + 32, v55 = v53 >> 5),
          v55))
    {
      v56 = (WTF::StringImpl **)(v54 + 8);
      while (1)
      {
        v57 = (uint64_t)*(v56 - 1);
        if (v57 == v44
          || *(_QWORD *)(v57 + 24) == *(_QWORD *)(v44 + 24) && *(_QWORD *)(v57 + 32) == *(_QWORD *)(v44 + 32))
        {
          break;
        }
        v56 += 2;
        if (!--v55)
          goto LABEL_93;
      }
    }
    else
    {
LABEL_93:
      v56 = v45;
    }
    v58 = *v56;
    if (!*v56)
    {
LABEL_97:
      v58 = v9;
      goto LABEL_98;
    }
    *(_DWORD *)v58 += 2;
    if (v41)
      goto LABEL_120;
    v42 = 0;
LABEL_98:
    v59 = (WebCore::Document *)*((_QWORD *)v3 + 10);
    if (!v59)
      break;
LABEL_99:
    while (1)
    {
      v3 = v59;
      v60 = *((_WORD *)v59 + 14);
      if ((v60 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == v6)
        break;
      if ((v60 & 4) != 0)
      {
        v59 = (WebCore::Document *)*((_QWORD *)v3 + 10);
        if (v59)
          continue;
      }
      if (v3 == this)
        goto LABEL_120;
      while (1)
      {
        v59 = (WebCore::Document *)*((_QWORD *)v3 + 7);
        if (v59)
          break;
        v3 = (WebCore::Document *)*((_QWORD *)v3 + 4);
        if (v3)
          v61 = v3 == this;
        else
          v61 = 1;
        if (v61)
          goto LABEL_120;
      }
    }
    v9 = v58;
  }
  if (v3 != this)
  {
    do
    {
      v59 = (WebCore::Document *)*((_QWORD *)v3 + 7);
      if (v59)
        goto LABEL_99;
      v3 = (WebCore::Document *)*((_QWORD *)v3 + 4);
      if (v3)
        v62 = v3 == this;
      else
        v62 = 1;
    }
    while (!v62);
  }
LABEL_120:
  v9 = v58;
LABEL_15:
  v93 = 0;
  WTF::URL::invalidate((WTF::URL *)&v93);
  if (v96)
  {
    WebCore::Document::fallbackBaseURL(this);
    WebCore::Document::completeURL(this, &v96, (uint64_t)&v89, 0, (WTF::URL *)&v90);
    v12 = v90;
    v90 = 0;
    v13 = v93;
    v93 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v14 = v90;
      }
      else
      {
        v14 = 0;
        *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      v14 = 0;
    }
    v94 = v91;
    LODWORD(v91) = v91 & 0xFFFFFFFE;
    v95 = v92;
    v90 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v11);
      else
        *(_DWORD *)v89 -= 2;
    }
  }
  if ((WTF::equal(*((WTF **)this + 116), v93, v10) & 1) != 0)
    goto LABEL_135;
  v16 = (_OWORD *)((char *)this + 936);
  v17 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Document *)((char *)this + 192));
  if (!v17)
  {
    if ((WebCore::ContentSecurityPolicy::allowBaseURI(0, (const WTF::URL *)&v93, 0) & 1) != 0)
      goto LABEL_32;
LABEL_128:
    v90 = 0;
    WTF::URL::invalidate((WTF::URL *)&v90);
    v63 = v90;
    v90 = 0;
    v64 = (WTF::StringImpl *)*((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = v63;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::destroy(v64, v38);
        v40 = v90;
      }
      else
      {
        v40 = 0;
        *(_DWORD *)v64 -= 2;
      }
    }
    else
    {
      v40 = 0;
    }
    v65 = v91;
    v66 = v92;
    LODWORD(v91) = v91 & 0xFFFFFFFE;
    *v16 = v65;
    *(_OWORD *)((char *)this + 952) = v66;
    v90 = 0;
    if (!v40)
      goto LABEL_134;
    goto LABEL_132;
  }
  v18 = v17;
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 + 1, v17));
  v20 = WebCore::ContentSecurityPolicy::allowBaseURI((WebCore::ContentSecurityPolicy *)v17, (const WTF::URL *)&v93, 0);
  if (!atomic_load(v18))
  {
    __break(0xC471u);
    JUMPOUT(0x195983840);
  }
  do
    v23 = __ldaxr(v18);
  while (__stlxr(v23 - 1, v18));
  if ((v20 & 1) == 0)
    goto LABEL_128;
LABEL_32:
  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 0x1000000) != 0
    && ((WTF::URL::protocolIs() & 1) != 0 || WTF::URL::protocolIsJavaScript((WTF::URL *)&v93)))
  {
    v90 = 0;
    WTF::URL::invalidate((WTF::URL *)&v90);
    v29 = v90;
    v90 = 0;
    v30 = (WTF::StringImpl *)*((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v28);
        v31 = v90;
      }
      else
      {
        v31 = 0;
        *(_DWORD *)v30 -= 2;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = v91;
    v33 = v92;
    LODWORD(v91) = v91 & 0xFFFFFFFE;
    *v16 = v32;
    *(_OWORD *)((char *)this + 952) = v33;
    v90 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v28);
      else
        *(_DWORD *)v31 -= 2;
    }
    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v93);
    if (!v88)
    {
      v34 = 0;
      goto LABEL_47;
    }
    v34 = *(_DWORD *)(v88 + 4);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_47:
      v35 = __OFADD__(v34, 60);
      v36 = v34 + 60;
      if (!v35 && !__OFADD__(v36, 16))
      {
        v37 = !v88 || (*(_BYTE *)(v88 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 16), v37, (int8x16_t *)"Blocked setting ", 0x10u, v88, (int8x16_t *)" as the base URL because it does not have an allowed scheme.", 0x3Cu, &v90);
        if (v90)
        {
          WebCore::Document::addConsoleMessage(this, 8, 2, &v90, 0);
          v39 = v90;
          v90 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v38);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = (WTF::StringImpl *)v88;
          if (!v88)
            goto LABEL_134;
LABEL_132:
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v38);
          else
            *(_DWORD *)v40 -= 2;
          goto LABEL_134;
        }
LABEL_182:
        __break(0xC471u);
        JUMPOUT(0x1959838D0);
      }
    }
    v90 = 0;
    goto LABEL_182;
  }
  v24 = v93;
  v93 = 0;
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v94;
  LODWORD(v94) = v94 & 0xFFFFFFFE;
  v27 = v95;
  *v16 = v26;
  *(_OWORD *)((char *)this + 952) = v27;
LABEL_134:
  WebCore::Document::updateBaseURL(this);
LABEL_135:
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = v9;
  if (v67)
  {
    if (*(_DWORD *)v67 != 2)
    {
      *(_DWORD *)v67 -= 2;
      goto LABEL_138;
    }
    WTF::StringImpl::destroy(v67, v15);
    if (!v8)
    {
LABEL_147:
      v73 = 0;
      goto LABEL_148;
    }
  }
  else
  {
LABEL_138:
    if (!v8)
      goto LABEL_147;
  }
  if ((*((_QWORD *)v8 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v68 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v68 = 1;
    *(_QWORD *)(v68 + 16) = 0;
    *(_QWORD *)(v68 + 24) = 0;
    *(_QWORD *)(v68 + 8) = v8;
    *(_BYTE *)(v68 + 32) = 0;
    v69 = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 2) = v69 & 0xFFFF000000000000 | v68;
    v70 = v69 & 0xFFFFFFFFFFFFLL;
    if ((v69 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v71 = __ldaxr((unsigned int *)v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, (unsigned int *)v70));
      if (!v72)
      {
        atomic_store(1u, (unsigned int *)v70);
        v82 = *(unsigned int *)(v70 + 28);
        if ((_DWORD)v82)
        {
          v87 = v70;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v70 + 16), (WTF::StringImpl *)(*(_QWORD *)(v70 + 16) + 32 * v82));
          v70 = v87;
        }
        v83 = *(WTF **)(v70 + 16);
        if (v83)
        {
          *(_QWORD *)(v70 + 16) = 0;
          *(_DWORD *)(v70 + 24) = 0;
          v85 = v70;
          WTF::fastFree(v83, v15);
          v70 = v85;
        }
        WTF::fastFree((WTF *)v70, v15);
      }
    }
  }
  v73 = (unsigned int *)(*((_QWORD *)v8 + 2) & 0xFFFFFFFFFFFFLL);
  if (v73)
  {
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
LABEL_148:
  v75 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = v73;
  if (v75)
  {
    do
    {
      v76 = __ldaxr((unsigned int *)v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, (unsigned int *)v75));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)v75);
      v80 = *(unsigned int *)(v75 + 28);
      if ((_DWORD)v80)
      {
        v86 = v75;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v75 + 16), (WTF::StringImpl *)(*(_QWORD *)(v75 + 16) + 32 * v80));
        v75 = v86;
      }
      v81 = *(WTF **)(v75 + 16);
      if (v81)
      {
        *(_QWORD *)(v75 + 16) = 0;
        *(_DWORD *)(v75 + 24) = 0;
        v84 = v75;
        WTF::fastFree(v81, v15);
        v75 = v84;
      }
      WTF::fastFree((WTF *)v75, v15);
    }
  }
  v78 = v93;
  v93 = 0;
  if (!v78)
  {
LABEL_154:
    if (!v8)
      goto LABEL_157;
    goto LABEL_155;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_154;
  }
  WTF::StringImpl::destroy(v78, v15);
  if (v8)
  {
LABEL_155:
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v15);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
LABEL_157:
  result = v96;
  v96 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::Document::userAgent(WebCore::Document *this@<X0>, const WTF::URL *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FrameLoader *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = *((_QWORD *)this + 66);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(WebCore::FrameLoader **)(v4 + 280);
    ++*(_DWORD *)v7;
    WebCore::FrameLoader::userAgent(v7, a2, a3);
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195983994);
    }
    --*(_DWORD *)v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, v5);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E31FE290;
      v10[1] = v5;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  else
  {
    *a3 = 0;
  }
}

void `non-virtual thunk to'WebCore::Document::userAgent(WebCore::Document *this@<X0>, const WTF::URL *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::Document::userAgent((WebCore::Document *)((char *)this - 192), a2, a3);
}

WTF::StringImpl *WebCore::Document::disableEval(WTF::StringImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(WTF::StringImpl **)(v3 + 304);
      ++*((_DWORD *)v6 + 2);
      this = WebCore::ScriptController::setEvalEnabled(v6, 0, a2);
      v7 = *((_DWORD *)v6 + 2);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x195983A88);
      }
      *((_DWORD *)v6 + 2) = v7 - 1;
      do
      {
        v8 = __ldaxr(v4);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v4));
      if (!v9)
      {
        atomic_store(1u, v4);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v4;
        v11 = (uint64_t)v10;
        WTF::ensureOnMainThread();
        this = (WTF::StringImpl *)v11;
        if (v11)
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  return this;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::Document::disableEval(WebCore::Document *this, const WTF::String *a2)
{
  return WebCore::Document::disableEval((WebCore::Document *)((char *)this - 192), a2);
}

WTF::StringImpl *WebCore::Document::disableWebAssembly(WTF::StringImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(WTF::StringImpl **)(v3 + 304);
      ++*((_DWORD *)v6 + 2);
      this = WebCore::ScriptController::setWebAssemblyEnabled(v6, 0, a2);
      v7 = *((_DWORD *)v6 + 2);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x195983B7CLL);
      }
      *((_DWORD *)v6 + 2) = v7 - 1;
      do
      {
        v8 = __ldaxr(v4);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v4));
      if (!v9)
      {
        atomic_store(1u, v4);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v4;
        v11 = (uint64_t)v10;
        WTF::ensureOnMainThread();
        this = (WTF::StringImpl *)v11;
        if (v11)
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  return this;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::Document::disableWebAssembly(WebCore::Document *this, const WTF::String *a2)
{
  return WebCore::Document::disableWebAssembly((WebCore::Document *)((char *)this - 192), a2);
}

WTF::RunLoop *WebCore::Document::setRequiresTrustedTypes(WTF::RunLoop *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::RunLoop *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(WTF::RunLoop **)(v3 + 304);
      ++*((_DWORD *)v6 + 2);
      this = WebCore::ScriptController::setRequiresTrustedTypes(v6, a2);
      v7 = *((_DWORD *)v6 + 2);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x195983C68);
      }
      *((_DWORD *)v6 + 2) = v7 - 1;
      do
      {
        v8 = __ldaxr(v4);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v4));
      if (!v9)
      {
        atomic_store(1u, v4);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v4;
        v11 = (uint64_t)v10;
        WTF::ensureOnMainThread();
        this = (WTF::RunLoop *)v11;
        if (v11)
          return (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  return this;
}

WTF::RunLoop *`non-virtual thunk to'WebCore::Document::setRequiresTrustedTypes(WebCore::Document *this, char a2)
{
  return WebCore::Document::setRequiresTrustedTypes((WebCore::Document *)((char *)this - 192), a2);
}

uint64_t WebCore::Document::idbConnectionProxy(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  void *v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;

  result = *((_QWORD *)this + 342);
  if (!result)
  {
    v3 = *((_QWORD *)this + 66);
    if (v3
      && (v4 = *(_QWORD *)(v3 + 8)) != 0
      && (v5 = *(_QWORD *)(v4 + 24)) != 0
      && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
    {
      ++*(_DWORD *)v6;
      v8 = (unsigned int **)*((_QWORD *)WebCore::Page::idbConnection(v6) + 3);
      if (v8)
      {
        v9 = *v8;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      v11 = (uint64_t *)*((_QWORD *)this + 342);
      *((_QWORD *)this + 342) = v8;
      if (v11)
        WebCore::IDBClient::IDBConnectionProxy::deref(v11, v7);
      WTF::RefCounted<WebCore::Page>::deref(v6);
      return *((_QWORD *)this + 342);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t **WTF::RefPtr<WebCore::IDBClient::IDBConnectionProxy,WTF::RawPtrTraits<WebCore::IDBClient::IDBConnectionProxy>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::IDBConnectionProxy>>::operator=(uint64_t **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;

  if (a2)
  {
    v3 = *a2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = (uint64_t *)a2;
  if (v5)
    WebCore::IDBClient::IDBConnectionProxy::deref(v5, a2);
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::Document::idbConnectionProxy(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  void *v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  WebCore::IDBClient::IDBConnectionProxy *v17;
  bmalloc::api *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v23;

  result = *((_QWORD *)this + 318);
  if (!result)
  {
    v3 = *((_QWORD *)this + 42);
    if (v3
      && (v4 = *(_QWORD *)(v3 + 8)) != 0
      && (v5 = *(_QWORD *)(v4 + 24)) != 0
      && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
    {
      ++*(_DWORD *)v6;
      v8 = (unsigned int **)*((_QWORD *)WebCore::Page::idbConnection(v6) + 3);
      if (v8)
      {
        v9 = *v8;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      v11 = (uint64_t *)*((_QWORD *)this + 318);
      *((_QWORD *)this + 318) = v8;
      if (v11)
      {
        v12 = *v11;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          v17 = *(WebCore::IDBClient::IDBConnectionProxy **)(v12 + 24);
          v23 = (bmalloc::api *)v12;
          *(_QWORD *)(v12 + 24) = 0;
          if (v17)
          {
            WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v17, v7);
            bmalloc::api::isoDeallocate(v18, v19);
          }
          v20 = (unsigned int *)*((_QWORD *)v23 + 1);
          *((_QWORD *)v23 + 1) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v7);
            }
          }
          bmalloc::api::isoDeallocate(v23, v7);
        }
      }
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::Page::~Page((uint64_t)v6);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v6;
      }
      return *((_QWORD *)this + 318);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::Document::socketProvider(WebCore::Document *this)
{
  return *((_QWORD *)this + 358);
}

uint64_t `non-virtual thunk to'WebCore::Document::socketProvider(WebCore::Document *this)
{
  return *((_QWORD *)this + 334);
}

uint64_t WebCore::Document::createRTCDataChannelRemoteHandlerConnection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(this + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 296) + 24))(*(_QWORD *)(v5 + 296));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Document::createRTCDataChannelRemoteHandlerConnection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(this + 336);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 296) + 24))(*(_QWORD *)(v5 + 296));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::Document::setRTCNetworkManager(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 3144);
  *(_QWORD *)(result + 3144) = v2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E33604F8;
      v7[1] = v4;
      v8 = v7;
      WTF::ensureOnMainRunLoop();
      result = (uint64_t)v8;
      if (v8)
        return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return result;
}

BOOL WebCore::Document::canNavigate(WebCore::Document *this, WebCore::Frame *a2, const WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v4;
  const WebCore::Document *v8;
  WTF::StringImpl *v9;
  int isValidForDocument;
  int v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  WebCore::Frame *v15;
  uint64_t v16;
  WebCore::Frame *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _BOOL8 result;
  WebCore *v28;
  WebCore::Frame *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const WebCore::Frame *v32;
  NSObject *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  WebCore *v44;
  WebCore::Frame *v45;
  char canAccessAncestor;
  const WebCore::Frame *v47;
  WebCore::SecurityOrigin *v48;
  uint64_t v49;
  _BYTE buf[32];
  __int16 v51;
  _BOOL4 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 66);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (!a2)
    return 1;
  if ((*((_BYTE *)this + 268) & 0x20) != 0
    || *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8) + 128) + 8) != a2)
  {
    v8 = *(const WebCore::Document **)(v4 + 296);
    if (WTF::isMainThread(this))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          if (v8)
            isValidForDocument = WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, v8);
          else
            isValidForDocument = 1;
          v11 = *((_DWORD *)this + 67);
          v12 = (v11 & 0x400) == 0;
          v13 = *((_QWORD *)this + 66);
          if ((v11 & 0x400) == 0 && isValidForDocument)
          {
            if (*(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 48) + 8) + 128)
                                    + 8) == a2)
              goto LABEL_36;
            v12 = 1;
            isValidForDocument = 1;
          }
          goto LABEL_10;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    isValidForDocument = 0;
    v11 = *((_DWORD *)this + 67);
    v12 = (v11 & 0x400) == 0;
    v13 = *((_QWORD *)this + 66);
LABEL_10:
    if ((v11 & 1) != 0)
    {
      v32 = v13 ? *(const WebCore::Frame **)(v13 + 8) : 0;
      if (WebCore::FrameTree::isDescendantOf((WebCore::Frame *)((char *)a2 + 48), v32))
        goto LABEL_36;
    }
    if (v13 && *(WebCore::Frame **)(v13 + 8) == a2)
      goto LABEL_13;
    if ((v11 & 1) != 0)
    {
      v31 = *((_QWORD *)a2 + 7);
      if (v31)
      {
        if (*(_QWORD *)(v31 + 8))
        {
          v47 = v13 ? *(const WebCore::Frame **)(v13 + 8) : 0;
          if (!WebCore::FrameTree::isDescendantOf((WebCore::Frame *)((char *)a2 + 48), v47))
          {
            v18 = "The frame attempting navigation is sandboxed, and is therefore disallowed from navigating its ancestors.";
            v19 = 105;
            goto LABEL_22;
          }
        }
      }
    }
    v15 = *(WebCore::Frame **)(v13 + 8);
    if (v15 == a2)
    {
LABEL_13:
      v14 = 1;
      v15 = a2;
    }
    else
    {
      if (*(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 6) + 8) + 128) + 8) == a2)
      {
        if (isValidForDocument)
        {
          if (!v12)
          {
            v18 = "The frame attempting navigation of the top-level window is sandboxed, but the 'allow-top-navigation-by"
                  "-user-activation' flag is not set and navigation is not triggered by user activation.";
            v19 = 188;
            goto LABEL_22;
          }
        }
        else if ((v11 & 0x20) != 0)
        {
          v18 = "The frame attempting navigation of the top-level window is sandboxed, but the 'allow-top-navigation' flag is not set.";
          v19 = 118;
          goto LABEL_22;
        }
      }
      v14 = 0;
    }
    v16 = *((_QWORD *)a2 + 7);
    if (v16 && *(_QWORD *)(v16 + 8)
      || (v14 & 1) != 0
      || (v11 & 1) == 0
      || *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 6) + 8) + 128) + 8) == a2)
    {
      goto LABEL_35;
    }
    v17 = (WebCore::Frame *)*((_QWORD *)a2 + 20);
    if (v17)
      v17 = (WebCore::Frame *)*((_QWORD *)v17 + 1);
    if (v15 == v17)
    {
LABEL_35:
      WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v9);
      if ((WebCore::canAccessAncestor(v28, a2, v29) & 1) != 0)
        goto LABEL_36;
      v38 = *((_QWORD *)a2 + 7);
      if (!v38 || !*(_QWORD *)(v38 + 8))
      {
        v39 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 66) + 8) + 160);
        if (v39)
        {
          if (*(WebCore::Frame **)(v39 + 8) == a2)
            goto LABEL_36;
        }
        v40 = *((_QWORD *)a2 + 20);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 8);
          if (v41)
          {
            if (!*(_BYTE *)(v41 + 144))
            {
              v48 = (WebCore::SecurityOrigin *)v41;
              v42 = (unsigned int *)(v41 + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 + 1, v42));
              WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v30);
              canAccessAncestor = WebCore::canAccessAncestor(v44, v48, v45);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v42);
              if ((canAccessAncestor & 1) != 0)
                goto LABEL_36;
            }
          }
        }
      }
      v18 = "The frame attempting navigation is neither same-origin with the target, nor is it the target's parent or opener.";
      v19 = 113;
    }
    else
    {
      v18 = "The frame attempting navigation is sandboxed, and is not allowed to navigate this popup.";
      v19 = 89;
    }
LABEL_22:
    v20 = *((_QWORD *)this + 87);
    if (v20)
      ++*(_DWORD *)(v20 + 24);
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 92);
    if (v21)
      *(_DWORD *)v21 += 2;
    v22 = *(_OWORD *)((char *)this + 760);
    *(_OWORD *)buf = *(_OWORD *)((char *)this + 744);
    *(_OWORD *)&buf[16] = v22;
    v23 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v23 = &off_1E33A3410;
    *(_QWORD *)(v23 + 8) = v20;
    if (v21)
      *(_DWORD *)v21 += 2;
    *(_QWORD *)(v23 + 16) = v21;
    v24 = *(_OWORD *)buf;
    *(_OWORD *)(v23 + 40) = *(_OWORD *)&buf[16];
    *(_OWORD *)(v23 + 24) = v24;
    *(_QWORD *)(v23 + 56) = v18;
    *(_QWORD *)(v23 + 64) = v19;
    v49 = v23;
    (*(void (**)(WebCore::Frame *, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v49);
    v26 = v49;
    v49 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v25);
      else
        *(_DWORD *)v21 -= 2;
    }
    return 0;
  }
LABEL_36:
  if (!WebCore::Document::isNavigationBlockedByThirdPartyIFrameRedirectBlocking(this, a2, a3))
    return 1;
  WebCore::printNavigationErrorMessage(*((_QWORD *)this + 87), (uint64_t)a2, (uint64_t)this + 736, (uint64_t)"The frame attempting navigation of the top-level window is cross-origin or untrusted and the user has never interacted with the frame.", 135);
  v33 = qword_1ECE7C478;
  result = os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_ERROR);
  if (result)
  {
    WebCore::Document::pageID(this);
    if (v35)
      v36 = v34;
    else
      v36 = 0;
    if (*((_BYTE *)this + 3480))
      v37 = *((_QWORD *)this + 433);
    else
      v37 = 0;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v36;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v37;
    v51 = 1024;
    v52 = WebCore::Document::topDocument((uint64_t)this) == (_QWORD)this;
    _os_log_error_impl(&dword_1940B8000, v33, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] Document::Navigation was prevented because it was triggered by a cross-origin or untrusted iframe", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t WebCore::Document::isNavigationBlockedByThirdPartyIFrameRedirectBlocking(WebCore::Document *this, WebCore::Frame *a2, const WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  WebCore::Document *v11;
  uint64_t v12;
  _BOOL4 v13;
  WebCore *v14;
  WebCore::Frame *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::SecurityOrigin *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::SecurityOrigin *v28;
  WebCore::SecurityOrigin *v29;
  WTF::StringImpl *v30;
  const WTF::URL *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  WebCore *v37;
  WebCore::Frame *v38;
  char canAccessAncestor;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  WebCore::SecurityOrigin *v44;

  v3 = *((_QWORD *)this + 66);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  if ((WebCore::Frame *)v5 == a2
    || *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 128) + 8) != a2
    || *(_BYTE *)(v5 + 616))
  {
    return 0;
  }
  v8 = *(_QWORD *)(v5 + 120);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_45;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
LABEL_45:
    v10 = 1;
    goto LABEL_10;
  }
  v10 = 0;
  *(_DWORD *)(v9 + 24) += 2;
  if (*(_DWORD *)(v9 + 120) != *((_DWORD *)this + 67))
    goto LABEL_13;
LABEL_10:
  v11 = this;
  if (!*((_DWORD *)this + 67))
    goto LABEL_12;
  v12 = *(_QWORD *)(v5 + 56);
  if (!v12)
    goto LABEL_12;
  v33 = *(_QWORD *)(v12 + 8);
  if (!v33 || *(_BYTE *)(v33 + 144))
    goto LABEL_12;
  v34 = (unsigned int *)(v33 + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 + 1, v34));
  v43 = (unsigned int *)(v33 + 8);
  v36 = *(_QWORD *)(v33 + 296);
  if (!v36)
  {
LABEL_52:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v43);
LABEL_12:
    this = v11;
LABEL_13:
    if (*((_BYTE *)this + 3434))
      v13 = *((_BYTE *)this + 3435) != 0;
    else
      v13 = 0;
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
    result = v13 | WebCore::canAccessAncestor(v14, a2, v15) ^ 1;
    if ((_DWORD)result == 1 && !*((_BYTE *)a2 + 144))
    {
      v17 = (unsigned int *)((char *)a2 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v42 = (unsigned int *)((char *)a2 + 8);
      v19 = *((_QWORD *)a2 + 37);
      if (v19)
      {
        *(_DWORD *)(v19 + 24) += 2;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v19 + 192), v16);
        v21 = *(_QWORD *)WebCore::SecurityOrigin::protocol(v20);
        if (v21)
        {
          v22 = *(unsigned __int8 **)(v21 + 8);
          v23 = *(unsigned int *)(v21 + 4);
          v24 = (unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0x100000000;
        }
        v25 = (unsigned __int8 *)WTF::URL::protocol(a3);
        if (WTF::operator==(v22, v24 | v23, v25, v26))
        {
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v19 + 192), v27);
          v29 = v28;
          WebCore::SecurityOrigin::create(a3, (uint64_t *)&v44);
          if ((WebCore::SecurityOrigin::isSameOriginDomain(v29, v44) & 1) != 0)
            v32 = 0;
          else
            v32 = WebCore::areRegistrableDomainsEqual((WebCore *)(v19 + 736), a3, v31) ^ 1;
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v44, v30);
        }
        else
        {
          v32 = 1;
        }
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
      }
      else
      {
        v32 = 1;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v42);
      result = v32;
    }
    goto LABEL_41;
  }
  *(_DWORD *)(v36 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v36 + 192), a2);
  canAccessAncestor = WebCore::canAccessAncestor(v37, a2, v38);
  v40 = *(_DWORD *)(v36 + 24) - 2;
  if ((canAccessAncestor & 1) == 0)
  {
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
    }
    else
    {
      *(_DWORD *)(v36 + 24) = v40;
    }
    goto LABEL_52;
  }
  if (*(_DWORD *)(v36 + 24) == 2)
  {
    if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v36);
  }
  else
  {
    *(_DWORD *)(v36 + 24) = v40;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v43);
  result = 0;
LABEL_41:
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      v41 = result;
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
      return v41;
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::printNavigationErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (a1)
    ++*(_DWORD *)(a1 + 24);
  v9 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v9 += 2;
  v13 = *(_OWORD *)(a3 + 8);
  v14 = *(_OWORD *)(a3 + 24);
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v10 = &off_1E33A3410;
  *(_QWORD *)(v10 + 8) = a1;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 40) = v14;
  *(_OWORD *)(v10 + 24) = v13;
  *(_QWORD *)(v10 + 56) = a4;
  *(_QWORD *)(v10 + 64) = a5;
  v15 = v10;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v15);
  result = v15;
  v15 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

double WebCore::Document::pageID(WebCore::Document *this)
{
  uint64_t v1;
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  double result;

  v1 = *((_QWORD *)this + 66);
  v2 = 0uLL;
  if (v1 && (v3 = *(_QWORD *)(v1 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0)
  {
    v5 = *(int8x16_t **)(v4 + 8);
    v6 = 0uLL;
    if (v5)
    {
      v7 = v5[2];
      v8.i64[0] = -256;
      v8.i64[1] = -256;
      v6 = vandq_s8(v7, v8);
      v9.i64[0] = 255;
      v9.i64[1] = 255;
      v2 = vandq_s8(v7, v9);
    }
  }
  else
  {
    v6 = 0uLL;
  }
  *(_QWORD *)&result = vorrq_s8(v2, v6).u64[0];
  return result;
}

uint64_t WebCore::canAccessAncestor(WebCore *this, const WebCore::SecurityOrigin *a2, WebCore::Frame *a3)
{
  const WebCore::SecurityOrigin *v3;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  const WebCore::SecurityOrigin *v11;
  const WebCore::SecurityOrigin *v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t result;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  if (!a2)
    return 0;
  v3 = a2;
  v5 = *((unsigned __int8 *)this + 63);
  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  while (1)
  {
    if (!*((_BYTE *)v3 + 144))
    {
      v8 = (unsigned int *)((char *)v3 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *((_QWORD *)v3 + 37);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), a2);
        v12 = v11;
        v13 = (WebCore::SecurityOrigin::isSameOriginDomain(this, v11) & 1) != 0 || v5 && *((_BYTE *)v12 + 63);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      else
      {
        v13 = 1;
      }
      do
      {
        v14 = __ldaxr(v8);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v8));
      if (!v15)
      {
        atomic_store(1u, v8);
        v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v26 = off_1E31FE290;
        v26[1] = v8;
        v29 = v26;
        WTF::ensureOnMainThread();
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      }
      if (v13)
        break;
    }
    v16 = *((_QWORD *)v3 + 7);
    if (v16)
    {
      v17 = *(unsigned int **)(v16 + 8);
      if (v17)
      {
        v22 = v17 + 2;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        v18 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 1;
LABEL_18:
    v19 = (unsigned int *)((char *)v3 + 8);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v19;
      v30 = v27;
      WTF::ensureOnMainThread();
      if (v30)
        (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    }
    v3 = (const WebCore::SecurityOrigin *)v17;
    if ((v18 & 1) != 0)
      return 0;
  }
  do
    v24 = __ldaxr(v8);
  while (__stlxr(v24 - 1, v8));
  result = 1;
  if (v24 == 1)
  {
    atomic_store(1u, v8);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E31FE290;
    v28[1] = v8;
    v31 = v28;
    WTF::ensureOnMainThread();
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    return 1;
  }
  return result;
}

BOOL WebCore::Document::usesStyleBasedEditability(WebCore::Document *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WebCore::Style::Scope *v4;

  if (*((_BYTE *)this + 3380))
    return 1;
  v4 = (WebCore::Style::Scope *)*((_QWORD *)this + 166);
  if (*((_BYTE *)v4 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(*((WebCore::Style::Scope **)this + 166), a2, a3);
  if (*((_BYTE *)v4 + 233))
    WebCore::Style::Scope::flushPendingSelfUpdate(v4, a2, a3);
  return *((_BYTE *)v4 + 235) != 0;
}

uint64_t WebCore::Document::setHasElementUsingStyleBasedEditability(uint64_t this)
{
  *(_BYTE *)(this + 3380) = 1;
  return this;
}

WTF::StringImpl *WebCore::Document::processMetaHttpEquiv(WebCore::Document *this, WTF::StringImpl **a2, const WTF::AtomString *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;
  char v21;
  __int128 v22;
  int v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WebCore::HTTPHeaderNamesHash *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  double v30;
  double v31;
  float v32;
  WTF::StringImpl *result;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  unsigned int v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::DocumentLoader *v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WebCore::ReportingScope *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  char isAttachment;
  char v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unsigned __int16 v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 664) & 0x200000000000000) == 0)
    goto LABEL_5;
  if (*((_BYTE *)this + 3399))
    goto LABEL_5;
  v8 = *((_QWORD *)this + 66);
  if (!v8)
    goto LABEL_5;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_5;
  v61 = *(_QWORD *)(v9 + 280);
  v62 = 88;
  if (!*(_BYTE *)(v61 + 80))
    v62 = 96;
  v63 = *(_DWORD **)(v61 + v62);
  if (!v63)
    goto LABEL_5;
  ++v63[6];
  isAttachment = WebCore::ResourceResponseBase::isAttachment((WebCore::ResourceResponseBase *)(v63 + 318));
  v65 = isAttachment;
  if (v63[6] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 24))(v63);
    if ((v65 & 1) != 0)
      goto LABEL_104;
LABEL_5:
    v10 = *((_QWORD *)this + 66);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            if ((*(_QWORD *)(*(_QWORD *)(v13 + 112) + 680) & 0x80000) == 0)
            {
              v50 = (int8x16_t *)"by the embedder.";
              v51 = 17;
              goto LABEL_74;
            }
          }
        }
      }
      v14 = *(_QWORD *)(v10 + 8);
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 280) + 88);
        if (v17)
        {
          ++*(_DWORD *)(v17 + 24);
          WebCore::ResourceResponse::platformLazyInit(v17 + 1272, 1);
          v18 = *(__int16 *)(v17 + 1408);
          WebCore::ResourceResponse::platformLazyInit(v17 + 1272, 1);
          v19 = *(WTF::StringImpl **)(v17 + 1272);
          if (v19)
            *(_DWORD *)v19 += 2;
          v20 = 0;
          v21 = 0;
          v69 = v19;
          v22 = *(_OWORD *)(v17 + 1296);
          v70 = *(_OWORD *)(v17 + 1280);
          v71 = v22;
          v23 = 1;
          goto LABEL_17;
        }
        v21 = 0;
        v23 = 1;
LABEL_36:
        v69 = 0;
        WTF::URL::invalidate((WTF::URL *)&v69);
        v18 = 0;
        v17 = 0;
        v20 = 1;
LABEL_17:
        v68 = 0;
        v24 = *a2;
        if (*a2)
        {
          v25 = *((unsigned int *)v24 + 4);
          v26 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v24 + 1);
          LODWORD(v24) = *((_DWORD *)v24 + 1);
          v27 = (v25 >> 2) & 1;
        }
        else
        {
          v26 = 0;
          v27 = 1;
        }
        if (WebCore::findHTTPHeaderName(v26, (char *)(v24 | (unint64_t)(v27 << 32)), &v68))
        {
          if (v68 > 0x3Fu)
          {
            if (v68 > 0x59u)
            {
              if (v68 == 90)
              {
                WebCore::Document::parseDNSPrefetchControlHeader((uint64_t)this, a3);
              }
              else if (v68 == 91 && v23)
              {
                v45 = *(_QWORD *)(v14 + 280);
                ++*(_DWORD *)v45;
                v46 = 88;
                if (!*(_BYTE *)(v45 + 80))
                  v46 = 96;
                v47 = *(WebCore::DocumentLoader **)(v45 + v46);
                if (v47 && WebCore::DocumentLoader::mainResourceLoader(v47))
                {
                  v48 = 88;
                  if (!*(_BYTE *)(v45 + 80))
                    v48 = 96;
                  v49 = *(_QWORD *)(WebCore::DocumentLoader::mainResourceLoader(*(WebCore::DocumentLoader **)(v45 + v48))
                                  + 744);
                }
                else
                {
                  v49 = 0;
                }
                v57 = *(WTF::StringImpl **)a3;
                if (*(_QWORD *)a3)
                  *(_DWORD *)v57 += 2;
                v66 = v57;
                WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((int8x16_t *)"The X-Frame-Option '", 21, (uint64_t *)&v66, (int8x16_t *)"' supplied in a <meta> element was ignored. X-Frame-Options may only be provided by an HTTP header sent with the document.", 123, &v67);
                v59 = v66;
                v66 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, v58);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                WebCore::Document::addConsoleMessage(this, 8, 2, &v67, v49);
                v60 = v67;
                v67 = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, v28);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                if (!*(_DWORD *)v45)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195985298);
                }
                --*(_DWORD *)v45;
              }
            }
            else if (v68 == 64)
            {
              v55 = (WebCore::ReportingScope *)*((_QWORD *)this + 398);
              if (!v55)
                v55 = (WebCore::ReportingScope *)WebCore::Document::ensureReportingScope(this);
              WebCore::ReportingScope::parseReportingEndpoints(v55, a3, (const WTF::URL *)&v69);
            }
            else if (v68 == 77 && (*((_WORD *)this + 1679) & 1) != 0)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::Document::addConsoleMessage(this, 8, 2, &v67, 0);
              v43 = v67;
              v67 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v28);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
          }
          else if (v68 > 0x23u)
          {
            if (v68 == 36)
            {
              WebCore::Style::Scope::setPreferredStylesheetSetName(*((WTF ***)this + 166), (const WTF::StringImpl **)a3, v29);
            }
            else if (v68 == 62 && v23)
            {
              v44 = *(_DWORD **)(v14 + 280);
              ++*v44;
              WebCore::FrameLoader::scheduleRefreshIfNeeded((uint64_t)v44, (uint64_t)this, (uint64_t *)a3, 1, v30, v31, v32);
              if (!*v44)
              {
                __break(0xC471u);
                JUMPOUT(0x195985278);
              }
              --*v44;
            }
          }
          else if (v68 == 20)
          {
            WebCore::Document::setContentLanguage(this, a3);
          }
          else if (v68 == 24 && a4)
          {
            v37 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::Document *)((char *)this + 192));
            v38 = v37;
            if (v37)
            {
              do
                v39 = __ldaxr(v37);
              while (__stlxr(v39 + 1, v37));
            }
            WebCore::Document::referrer(this, &v67);
            WebCore::ContentSecurityPolicy::didReceiveHeader((uint64_t)v38, a3, 1, 1, (uint64_t *)&v67, v18);
            v40 = v67;
            v67 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v28);
              else
                *(_DWORD *)v40 -= 2;
            }
            if (v38)
            {
              if (!atomic_load(v38))
              {
                __break(0xC471u);
                JUMPOUT(0x1959852B8);
              }
              do
                v42 = __ldaxr(v38);
              while (__stlxr(v42 - 1, v38));
            }
          }
        }
        result = v69;
        v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
          else
            *(_DWORD *)result -= 2;
        }
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(v17 + 24) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
          else
            --*(_DWORD *)(v17 + 24);
        }
        if ((v21 & 1) == 0)
        {
          v34 = (unsigned int *)(v14 + 8);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            v56 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v56 = off_1E31FE290;
            *((_QWORD *)v56 + 1) = v34;
            v69 = v56;
            WTF::ensureOnMainThread();
            result = v69;
            v69 = 0;
            if (result)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          }
        }
        return result;
      }
    }
    else
    {
      v14 = 0;
    }
    v23 = 0;
    v21 = 1;
    goto LABEL_36;
  }
  --v63[6];
  if ((isAttachment & 1) == 0)
    goto LABEL_5;
LABEL_104:
  v50 = (int8x16_t *)"for documents with Content-Disposition: attachment.";
  v51 = 52;
LABEL_74:
  v52 = *a2;
  if (*a2)
  {
    *(_DWORD *)v52 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v69, (uint64_t)v52, v50, v51);
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  else
  {
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v69, 0, v50, v51);
  }
  WebCore::Document::addConsoleMessage(this, 8, 2, &v69, 0);
  result = v69;
  v69 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v54);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, uint64_t a2, int8x16_t *a3, uint64_t a4)
{
  _QWORD *v6;
  size_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int128 *v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  char v22;
  uint64_t v23;

  v6 = result;
  if (a4)
  {
    v7 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_44:
      JUMPOUT(0x1959854F4);
    }
  }
  else
  {
    v7 = 0;
  }
  if (a2)
    v8 = *(_DWORD *)(a2 + 4);
  else
    v8 = 0;
  v9 = v7 + 14;
  if (__OFADD__((_DWORD)v7, 14))
    goto LABEL_41;
  if (v8 < 0)
    goto LABEL_41;
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
    goto LABEL_41;
  v12 = (v11 + 12);
  if (__OFADD__(v11, 12))
    goto LABEL_41;
  if (a2 && (*(_BYTE *)(a2 + 16) & 4) == 0)
  {
    if (v11 != -12)
    {
      if (v12 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v12 + 20));
        v13 = v23;
        if (v23)
        {
          *(_DWORD *)v23 = 2;
          *(_DWORD *)(v23 + 4) = v12;
          *(_QWORD *)(v23 + 8) = v23 + 20;
          *(_DWORD *)(v23 + 16) = 0;
          result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v23 + 20), (int8x16_t *)"http-equiv '", 12, a2, (int8x16_t *)"' is disabled ", 14, a3, v7);
          goto LABEL_27;
        }
      }
      goto LABEL_41;
    }
LABEL_32:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_27;
  }
  if (v11 == -12)
    goto LABEL_32;
  if ((v12 & 0x80000000) != 0 || (result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20)), (v13 = v23) == 0))
  {
LABEL_41:
    *v6 = 0;
    __break(0xC471u);
    goto LABEL_44;
  }
  *(_DWORD *)v23 = 2;
  *(_DWORD *)(v23 + 4) = v12;
  *(_QWORD *)(v23 + 20) = *(_QWORD *)"http-equiv '";
  *(_QWORD *)(v23 + 8) = v23 + 20;
  *(_DWORD *)(v23 + 16) = 4;
  *(_DWORD *)(v23 + 28) = 656438889;
  v14 = (_BYTE *)(v23 + 32);
  if (a2)
  {
    v15 = *(_BYTE **)(a2 + 8);
    v16 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v16)
      {
        if ((_DWORD)v16 == 1)
          *v14 = *v15;
        else
          result = memcpy((void *)(v23 + 32), v15, v16);
      }
    }
    else
    {
      if (v16 < 0x10)
      {
        v19 = (unsigned __int128 *)(v23 + 32);
      }
      else
      {
        v19 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
        v20 = (unsigned __int128 *)(v23 + 32);
        do
        {
          v21 = (unsigned __int128)vld2q_s8(v15);
          v15 += 32;
          *v20++ = v21;
        }
        while (v20 != v19);
      }
      while (v19 != (unsigned __int128 *)&v14[v16])
      {
        v22 = *v15;
        v15 += 2;
        *(_BYTE *)v19 = v22;
        v19 = (unsigned __int128 *)((char *)v19 + 1);
      }
    }
    v17 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v14[v17];
  qmemcpy(v18, "' is disabled ", 14);
  if ((_DWORD)v7)
  {
    result = v18 + 14;
    if ((_DWORD)v7 == 1)
      *result = a3->i8[0];
    else
      result = memcpy(result, a3, v7);
  }
LABEL_27:
  *v6 = v13;
  return result;
}

uint64_t WebCore::Document::parseDNSPrefetchControlHeader(uint64_t this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if ((*(_QWORD *)(*(_QWORD *)(this + 680) + 672) & 0x10000000000000) != 0)
  {
    v3 = this;
    if (*(_BYTE *)(this + 3397) == 2)
      this = WebCore::Document::initDNSPrefetch((WebCore::Document *)this, a2);
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 && *(_DWORD *)(v4 + 4) == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) == 0x4F)
        {
          v6 = *(unsigned __int8 *)(v5 + 1);
LABEL_11:
          if ((v6 & 0xFFFFFFDF) == 0x4E && !*(_BYTE *)(v3 + 3398))
          {
            *(_BYTE *)(v3 + 3397) = 1;
            return this;
          }
        }
      }
      else if ((*(_WORD *)v5 & 0xFFDF) == 0x4F)
      {
        v6 = *(unsigned __int16 *)(v5 + 2);
        goto LABEL_11;
      }
    }
    *(_WORD *)(v3 + 3397) = 256;
  }
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  uint64_t result;

  if (a2)
  {
    v9 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195985694);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  if (a5)
  {
    v11 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1959856C0);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 4);
    if (v12 < 0)
    {
LABEL_15:
      *a6 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13 || __OFADD__(v9, v14))
    goto LABEL_15;
  v15 = !v10 || (*(_BYTE *)(v10 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9 + v14, v15, a1, v9, v10, a4, v11, a6);
  if (!*a6)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x195985668);
  }
  return result;
}

_QWORD *WebCore::Document::referrer@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::Document *v28;
  const WTF::String *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[5];
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[5];
  WTF::StringImpl *v34;

  v2 = this;
  v4 = (_DWORD *)this[372];
  if (v4 && v4[1])
  {
    *v4 += 2;
    *a2 = v4;
    return this;
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_7;
  }
  if (byte_1ECE90A53)
  {
    v5 = this[66];
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        this = WebCore::FrameLoader::referrer(*(_BYTE **)(v6 + 280), &v34);
        v8 = v34;
        if (v34)
        {
          if (*((_DWORD *)v34 + 1))
          {
            *(_DWORD *)v34 += 2;
            v31[0] = v8;
            MEMORY[0x19AEA52D4](v33, v31, 0);
            v12 = v31[0];
            v31[0] = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v11);
              else
                *(_DWORD *)v12 -= 2;
            }
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v32, (const WTF::URL *)v33);
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 24), v13);
            v15 = *(unsigned int *)(v14 + 32);
            if ((_DWORD)v15 == -1)
            {
              v28 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
              return (_QWORD *)WebCore::Document::processDisabledAdaptations(v28, v29);
            }
            v31[0] = (WTF::StringImpl *)&v30;
            v16 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33A33F0[v15])(v31, v14 + 8);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 8);
              v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v17 = 0;
              v18 = 0x100000000;
            }
            if ((WebCore::RegistrableDomain::matches(&v32, v17, v18) & 1) == 0)
            {
              WTF::URL::protocolHostAndPort((WTF::URL *)v33);
              MEMORY[0x19AEA52D4](v31, &v30, 0);
              v22 = v31[0];
              if (v31[0])
                *(_DWORD *)v31[0] += 2;
              v23 = (WTF::StringImpl *)v2[372];
              v2[372] = v22;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::destroy(v23, v7);
                  v22 = v31[0];
                }
                else
                {
                  *(_DWORD *)v23 -= 2;
                }
              }
              v31[0] = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v7);
                else
                  *(_DWORD *)v22 -= 2;
              }
              v24 = v30;
              v30 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v7);
                else
                  *(_DWORD *)v24 -= 2;
              }
              v25 = (_DWORD *)v2[372];
              if (v25)
                *v25 += 2;
              *a2 = v25;
              v26 = v32;
              v32 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v7);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = v33[0];
              v33[0] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v7);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v21 = 0;
              goto LABEL_48;
            }
            v19 = v32;
            v32 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v7);
              else
                *(_DWORD *)v19 -= 2;
            }
            v20 = v33[0];
            v33[0] = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v7);
              else
                *(_DWORD *)v20 -= 2;
            }
          }
          v21 = 1;
LABEL_48:
          this = v34;
          v34 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
              if (!v21)
                return this;
              goto LABEL_7;
            }
            *(_DWORD *)this -= 2;
          }
          if (!v21)
            return this;
        }
      }
    }
  }
LABEL_7:
  v9 = v2[66];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      return WebCore::FrameLoader::referrer(*(_BYTE **)(v10 + 280), a2);
  }
  *a2 = 0;
  return this;
}

WebCore::Page *WebCore::Document::processDisabledAdaptations(WebCore::Document *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WebCore::Page *result;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  result = (WebCore::Page *)WebCore::parseDisabledAdaptations(v4, v5);
  if (*((unsigned __int8 *)this + 3365) != result)
  {
    *((_BYTE *)this + 3365) = (_BYTE)result;
    return WebCore::Document::dispatchDisabledAdaptationsDidChangeForMainFrame(this);
  }
  return result;
}

BOOL WebCore::Document::isViewportDocument(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  WebCore::Document *v6;
  int v7;
  _BOOL8 v8;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(WebCore::Page **)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v6 = (WebCore::Document *)WebCore::Page::outermostFullscreenDocument(v4);
  if (v6)
  {
    v7 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v7 + 2;
    v8 = v6 == this;
    if (v7)
    {
      *((_DWORD *)v6 + 6) = v7;
    }
    else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v6);
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 66);
    if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v8 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8) == v13;
      do
      {
        v16 = __ldaxr(v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v14));
      if (!v17)
      {
        atomic_store(1u, v14);
        v18 = v14;
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v19 = off_1E31FE290;
        v19[1] = v18;
        v20 = v19;
        WTF::ensureOnMainThread();
        if (v20)
          (*(void (**)(_QWORD *))(*v20 + 8))(v20);
      }
    }
    else
    {
      v8 = 0;
    }
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v8;
}

uint64_t *WebCore::Document::metaElementThemeColorChanged(WebCore::Document *this, WebCore::HTMLMetaElement *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t *result;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;

  result = (uint64_t *)WebCore::HTMLMetaElement::contentColor(a2, a3, a4, a5, a6, a7, a8);
  if ((*((_BYTE *)result + 6) & 4) == 0 && *((_BYTE *)this + 1384))
  {
    v18 = *((unsigned int *)this + 345);
    if (!(_DWORD)v18)
      return result;
    for (i = *((_QWORD *)this + 171); !*(_QWORD *)i || *(WebCore::HTMLMetaElement **)(*(_QWORD *)i + 8) != a2; i += 8)
    {
      if (!--v18)
        return result;
    }
  }
  v20 = *((_QWORD *)this + 170);
  if (v20)
    *((_QWORD *)this + 170) = 0;
  if (*((_BYTE *)this + 1384))
  {
    WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1368, v11);
    *((_BYTE *)this + 1384) = 0;
  }
  v21 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v40 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v40)
      {
        v43 = v21;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v40));
        v21 = v43;
      }
      v41 = *(WTF **)(v21 + 16);
      if (v41)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        v42 = v21;
        WTF::fastFree(v41, v11);
        v21 = v42;
      }
      WTF::fastFree((WTF *)v21, v11);
    }
  }
  result = (uint64_t *)WebCore::Document::themeColor(this, v11, v12, v13, v14, v15, v16, v17);
  v25 = *result;
  if ((*result & 0x8000000000000) == 0)
  {
    if ((v20 & 0x8000000000000) == 0 && v25 == v20)
      return result;
LABEL_19:
    if ((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v24 = 0;
    }
    else
    {
      result = (uint64_t *)WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
      v24 = 256;
    }
    v26 = *((_QWORD *)this + 66);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 24);
        if (v28)
        {
          v29 = *(_DWORD **)(v28 + 8);
          if (v29)
          {
            ++*v29;
            result = (uint64_t *)WebCore::Page::scheduleRenderingUpdate((uint64_t)v29, v24);
            if (*v29 == 1)
            {
              WebCore::Page::~Page((uint64_t)v29);
              result = (uint64_t *)WTF::fastFree(v34, v35);
            }
            else
            {
              --*v29;
            }
          }
        }
      }
      v30 = *((_QWORD *)this + 66);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 24);
          if (v32)
          {
            v33 = *(_QWORD *)(v32 + 8);
            if (v33)
            {
              ++*(_DWORD *)v33;
              result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v33 + 48) + 16)
                                                                             + 552))(*(_QWORD *)(*(_QWORD *)(v33 + 48) + 16), v24);
              if (*(_DWORD *)v33 == 1)
              {
                WebCore::Page::~Page(v33);
                result = (uint64_t *)WTF::fastFree(v36, v37);
                if ((v20 & 0x8000000000000) == 0)
                  return result;
                goto LABEL_37;
              }
              --*(_DWORD *)v33;
            }
          }
        }
      }
    }
    if ((v20 & 0x8000000000000) == 0)
      return result;
LABEL_37:
    result = (uint64_t *)(v20 & 0xFFFFFFFFFFFFLL);
    goto LABEL_38;
  }
  if ((v20 & 0x8000000000000) == 0)
    goto LABEL_19;
  result = (uint64_t *)(v20 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10)
    || HIBYTE(v25) != HIBYTE(v20)
    || BYTE6(v25) != BYTE6(v20))
  {
    goto LABEL_19;
  }
  do
  {
LABEL_38:
    v38 = __ldaxr((unsigned int *)result);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)result));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)result);
    return (uint64_t *)WTF::fastFree((WTF *)result, (void *)v24);
  }
  return result;
}

uint64_t WebCore::Document::themeColorChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Page *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  v1 = this;
  if ((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v2 = 0;
  }
  else
  {
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2032));
    v2 = 256;
  }
  v3 = *(_QWORD *)(v1 + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(WebCore::Page **)(v5 + 8);
        if (v6)
        {
          ++*(_DWORD *)v6;
          this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v6, v2);
          if (*(_DWORD *)v6 == 1)
          {
            WebCore::Page::~Page(v6);
            this = WTF::fastFree(v11, v12);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
      }
    }
    v7 = *(_QWORD *)(v1 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(WebCore::Page **)(v9 + 8);
          if (v10)
          {
            ++*(_DWORD *)v10;
            this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v10 + 6) + 16) + 552))(*(_QWORD *)(*((_QWORD *)v10 + 6) + 16), v2);
            if (*(_DWORD *)v10 == 1)
            {
              WebCore::Page::~Page(v10);
              return WTF::fastFree(v13, v14);
            }
            else
            {
              --*(_DWORD *)v10;
            }
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::ElementDescendantRange<WebCore::HTMLMetaElement>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  __int16 v3;
  BOOL v4;

  v1 = result[10];
  if (v1)
  {
    while (1)
    {
      v2 = (_QWORD *)v1;
      v3 = *(_WORD *)(v1 + 28);
      if ((v3 & 0x10) != 0 && *(_QWORD *)(v2[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
        break;
      if ((v3 & 4) != 0)
      {
        v1 = v2[10];
        if (v1)
          continue;
      }
      if (v2 == result)
        return result;
      while (1)
      {
        v1 = v2[7];
        if (v1)
          break;
        v2 = (_QWORD *)v2[4];
        if (v2)
          v4 = v2 == result;
        else
          v4 = 1;
        if (v4)
          return result;
      }
    }
  }
  return result;
}

_QWORD *WebCore::ElementDescendantIterator<WebCore::HTMLMetaElement>::operator++(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  __int16 v5;
  BOOL v6;
  BOOL v7;

  v1 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v3 = v2[10];
  if (v3)
  {
LABEL_2:
    while (1)
    {
      v4 = (_QWORD *)v3;
      v5 = *(_WORD *)(v3 + 28);
      if ((v5 & 0x10) != 0 && *(_QWORD *)(v4[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
        break;
      if ((v5 & 4) != 0)
      {
        v3 = v4[10];
        if (v3)
          continue;
      }
      if (v4 == v1)
        goto LABEL_21;
      while (1)
      {
        v3 = v4[7];
        if (v3)
          break;
        v4 = (_QWORD *)v4[4];
        if (v4)
          v6 = v4 == v1;
        else
          v6 = 1;
        if (v6)
          goto LABEL_21;
      }
    }
  }
  else
  {
    if (v2 != v1)
    {
      do
      {
        v3 = v2[7];
        if (v3)
          goto LABEL_2;
        v2 = (_QWORD *)v2[4];
        if (v2)
          v7 = v2 == v1;
        else
          v7 = 1;
      }
      while (!v7);
    }
LABEL_21:
    v4 = 0;
  }
  result[1] = v4;
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          v13 = v6;
          v14 = v7;
          atomic_store(1u, (unsigned int *)v8);
          v15 = (WTF *)v8;
          v11 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v11)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
          v12 = (WTF *)*((_QWORD *)v15 + 2);
          if (v12)
          {
            *((_QWORD *)v15 + 2) = 0;
            *((_DWORD *)v15 + 6) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v15, a2);
          v6 = v13;
          v7 = v14;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WebCore::Document::metaElementColorSchemeChanged(WebCore::Document *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  _UNKNOWN *__ptr32 *v4;
  int16x8_t v5;
  int16x8_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  WTF::StringBuilder *v29;
  WTF::String *v30;
  __n128 v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  const char *v34;
  unsigned int v35;
  WTF::StringImpl *result;
  WTF::StringImpl *v37;
  uint64_t v38;
  const char *v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v47;
  uint64_t v48;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  const char *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  WTF::StringImpl *v65;
  float v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::LocalFrameView *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::Page *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  void *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  _QWORD *v84;
  uint64_t v85;
  WTF::StringImpl *v86[5];
  WTF::StringImpl *v87;
  char v88;

  v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v2 += 2;
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v86, *(const WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  v84 = WebCore::ElementDescendantRange<WebCore::HTMLMetaElement>::begin(*((_QWORD **)this + 12));
  v85 = v3;
  if (!v3)
  {
LABEL_113:
    v32 = 0;
    goto LABEL_114;
  }
  v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  while (1)
  {
    v12 = *(_QWORD *)(v3 + 104);
    if (!v12)
    {
LABEL_17:
      v16 = v11;
      goto LABEL_18;
    }
    v13 = *(unsigned int *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v12 + 40);
      v15 = *(unsigned int *)(v12 + 52);
      if (!*(_DWORD *)(v12 + 52))
        goto LABEL_17;
    }
    else
    {
      v14 = v12 + 32;
      v15 = v13 >> 5;
      if (!v15)
        goto LABEL_17;
    }
    v16 = (uint64_t *)(v14 + 8);
    while (1)
    {
      v17 = *(v16 - 1);
      if (v17 == WebCore::HTMLNames::nameAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
      {
        break;
      }
      v16 += 2;
      if (!--v15)
        goto LABEL_17;
    }
LABEL_18:
    v18 = *v16;
    if (!v18)
      goto LABEL_19;
    v19 = *(_DWORD *)(v18 + 4);
    if (v19 != 12)
      break;
    v22 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v22 & 0xDF) != 0x43
        || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x4F
        || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x52
        || (*(_BYTE *)(v22 + 5) & 0xDF) != 0xD
        || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x53
        || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x43
        || (*(_BYTE *)(v22 + 8) & 0xDF) != 0x48
        || (*(_BYTE *)(v22 + 9) & 0xDF) != 0x45
        || (*(_BYTE *)(v22 + 10) & 0xDF) != 0x4D)
      {
        goto LABEL_19;
      }
      v23 = *(unsigned __int8 *)(v22 + 11);
    }
    else
    {
      if ((*(_WORD *)v22 & 0xFFDF) != 0x43
        || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x52
        || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0xD
        || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x53
        || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x43
        || (*(_WORD *)(v22 + 16) & 0xFFDF) != 0x48
        || (*(_WORD *)(v22 + 18) & 0xFFDF) != 0x45
        || (*(_WORD *)(v22 + 20) & 0xFFDF) != 0x4D)
      {
        goto LABEL_19;
      }
      v23 = *(unsigned __int16 *)(v22 + 22);
    }
    if ((v23 & 0xFFFFFFDF) == 0x45)
      goto LABEL_63;
LABEL_19:
    WebCore::ElementDescendantIterator<WebCore::HTMLMetaElement>::operator++(&v84);
    v3 = v85;
    if (!v85)
      goto LABEL_113;
  }
  if (v19 != 23)
    goto LABEL_19;
  v20 = *(_QWORD *)(v18 + 8);
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v20 & 0xDF) != 0x53
      || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x55
      || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x50
      || (*(_BYTE *)(v20 + 3) & 0xDF) != 0x50
      || (*(_BYTE *)(v20 + 4) & 0xDF) != 0x4F
      || (*(_BYTE *)(v20 + 5) & 0xDF) != 0x52
      || (*(_BYTE *)(v20 + 6) & 0xDF) != 0x54
      || (*(_BYTE *)(v20 + 7) & 0xDF) != 0x45
      || (*(_BYTE *)(v20 + 8) & 0xDF) != 0x44
      || (*(_BYTE *)(v20 + 9) & 0xDF) != 0xD
      || (*(_BYTE *)(v20 + 10) & 0xDF) != 0x43
      || (*(_BYTE *)(v20 + 11) & 0xDF) != 0x4F
      || (*(_BYTE *)(v20 + 12) & 0xDF) != 0x4C
      || (*(_BYTE *)(v20 + 13) & 0xDF) != 0x4F
      || (*(_BYTE *)(v20 + 14) & 0xDF) != 0x52
      || (*(_BYTE *)(v20 + 15) & 0xDF) != 0xD
      || (*(_BYTE *)(v20 + 16) & 0xDF) != 0x53
      || (*(_BYTE *)(v20 + 17) & 0xDF) != 0x43
      || (*(_BYTE *)(v20 + 18) & 0xDF) != 0x48
      || (*(_BYTE *)(v20 + 19) & 0xDF) != 0x45
      || (*(_BYTE *)(v20 + 20) & 0xDF) != 0x4D
      || (*(_BYTE *)(v20 + 21) & 0xDF) != 0x45)
    {
      goto LABEL_19;
    }
    v21 = *(unsigned __int8 *)(v20 + 22);
  }
  else
  {
    if ((*(_WORD *)v20 & 0xFFDF) != 0x53
      || (*(_WORD *)(v20 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v20 + 4) & 0xFFDF) != 0x50
      || (*(_WORD *)(v20 + 6) & 0xFFDF) != 0x50
      || (*(_WORD *)(v20 + 8) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v20 + 10) & 0xFFDF) != 0x52
      || (*(_WORD *)(v20 + 12) & 0xFFDF) != 0x54
      || (*(_WORD *)(v20 + 14) & 0xFFDF) != 0x45
      || (*(_WORD *)(v20 + 16) & 0xFFDF) != 0x44
      || (*(_WORD *)(v20 + 18) & 0xFFDF) != 0xD
      || (*(_WORD *)(v20 + 20) & 0xFFDF) != 0x43
      || (*(_WORD *)(v20 + 22) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v20 + 24) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v20 + 26) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v20 + 28) & 0xFFDF) != 0x52
      || (*(_WORD *)(v20 + 30) & 0xFFDF) != 0xD
      || (*(_WORD *)(v20 + 32) & 0xFFDF) != 0x53
      || (*(_WORD *)(v20 + 34) & 0xFFDF) != 0x43
      || (*(_WORD *)(v20 + 36) & 0xFFDF) != 0x48
      || (*(_WORD *)(v20 + 38) & 0xFFDF) != 0x45
      || (*(_WORD *)(v20 + 40) & 0xFFDF) != 0x4D
      || (*(_WORD *)(v20 + 42) & 0xFFDF) != 0x45)
    {
      goto LABEL_19;
    }
    v21 = *(unsigned __int16 *)(v20 + 44);
  }
  if ((v21 & 0xFFFFFFDF) != 0x53)
    goto LABEL_19;
LABEL_63:
  if (!v12)
    goto LABEL_75;
  v24 = *(unsigned int *)(v12 + 4);
  if ((v24 & 1) != 0)
  {
    v25 = *(_QWORD *)(v12 + 40);
    v26 = *(unsigned int *)(v12 + 52);
    if (!v26)
      goto LABEL_75;
  }
  else
  {
    v25 = v12 + 32;
    v26 = v24 >> 5;
    if (!(v24 >> 5))
    {
LABEL_75:
      v27 = (unsigned int **)v11;
      goto LABEL_76;
    }
  }
  v27 = (unsigned int **)(v25 + 8);
  while (1)
  {
    v28 = (uint64_t)*(v27 - 1);
    if (v28 == WebCore::HTMLNames::contentAttr
      || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
      && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
    {
      break;
    }
    v27 += 2;
    if (!--v26)
      goto LABEL_75;
  }
LABEL_76:
  WebCore::CSSParser::parseSingleValue(2, v27, (uint64_t)v86, v4, (int **)&v83, v5, v6, v7, v8, v9, v10);
  v32 = v83;
  if (!v83)
    goto LABEL_19;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v83, (uint64_t)v83, v29, v30, v31);
  v80 = v83;
  v83 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, v79);
      v82 = v83;
      v83 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v81);
        else
          *(_DWORD *)v82 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v2 -= 2;
    }
  }
  v2 = v80;
LABEL_114:
  LOBYTE(v84) = 0;
  v33 = 1;
  LOBYTE(v83) = 1;
  v88 = 0;
  if (v2)
  {
    v34 = (const char *)*((_QWORD *)v2 + 1);
    v35 = *((_DWORD *)v2 + 1);
    v33 = ((unint64_t)*((unsigned int *)v2 + 4) >> 2) & 1;
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  v37 = result;
  *(_QWORD *)result = off_1E33A3700;
  *((_QWORD *)result + 1) = &v84;
  *((_QWORD *)result + 2) = &v83;
  *((_QWORD *)result + 3) = &v88;
  if (v35)
  {
    v38 = 0;
    if (!v33)
    {
      v39 = "";
      while (1)
      {
        v40 = (int)v38 + 1 > v35 ? v38 + 1 : v35;
        v41 = 1;
        v42 = v38;
        while (1)
        {
          v43 = *(unsigned __int16 *)&v34[2 * v42];
          v44 = v43 > 0x20;
          v45 = (1 << v43) & 0x100003600;
          if (v44 || v45 == 0)
            break;
          v42 = (v42 + 1);
          v41 = v42 < v35;
          if (v40 == (_DWORD)v42)
            goto LABEL_177;
        }
        if (v42 < v35)
        {
          v38 = v42;
          while (1)
          {
            v47 = *(unsigned __int16 *)&v34[2 * v38];
            v44 = v47 > 0x20;
            v48 = (1 << v47) & 0x100003600;
            if (!v44 && v48 != 0)
              break;
            if (v35 == ++v38)
            {
              v38 = v35;
              break;
            }
          }
          v50 = v38 - v42;
          if ((_DWORD)v38 != (_DWORD)v42)
            break;
        }
        v38 = v42;
LABEL_146:
        if (v38 >= v35)
          goto LABEL_177;
      }
      if (v41)
      {
        if (v35 - v42 > v50)
          goto LABEL_142;
        v39 = v34;
        v51 = v35 | (v33 << 32);
        if ((_DWORD)v42)
        {
          v50 = v35 - v42;
LABEL_142:
          if (v35 - (unint64_t)v42 < v50)
            goto LABEL_219;
          v51 = v50;
          v39 = &v34[2 * v42];
        }
      }
      else
      {
        v51 = 0x100000000;
      }
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, const char *, uint64_t))(*(_QWORD *)v37 + 16))(v37, v39, v51);
      v39 = "";
      goto LABEL_146;
    }
    while (2)
    {
      v52 = v38;
      while (1)
      {
        v53 = v34[v52];
        v44 = v53 > 0x20;
        v54 = (1 << v53) & 0x100003600;
        if (v44 || v54 == 0)
          break;
        if (++v52 >= (unint64_t)v35)
          goto LABEL_177;
      }
      if (v35 <= v52)
        goto LABEL_167;
      v56 = &v34[v52];
      v57 = v52;
      do
      {
        v58 = v34[v57];
        v44 = v58 > 0x20;
        v59 = (1 << v58) & 0x100003600;
        if (!v44 && v59 != 0)
        {
          LODWORD(v38) = v57;
          goto LABEL_166;
        }
        ++v57;
      }
      while (v35 != v57);
      LODWORD(v38) = v35;
LABEL_166:
      if ((_DWORD)v38 == (_DWORD)v52)
      {
LABEL_167:
        LODWORD(v38) = v52;
        goto LABEL_174;
      }
      v61 = v35 - v52;
      if (v35 - v52 > (int)v38 - (int)v52)
      {
        v62 = (v38 - v52);
        goto LABEL_170;
      }
      v64 = v34;
      v63 = v35 | (v33 << 32);
      if ((_DWORD)v52)
      {
        v62 = v35 - v52;
LABEL_170:
        if (v61 < v62)
        {
LABEL_219:
          __break(1u);
          return result;
        }
        v63 = v62 | 0x100000000;
        v64 = v56;
      }
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, const char *, uint64_t))(*(_QWORD *)v37 + 16))(v37, v64, v63);
LABEL_174:
      if (v38 >= v35)
        break;
      continue;
    }
  }
LABEL_177:
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
  v67 = (char)v84;
  v68 = (char)v83;
  if (!(v84 | v83))
  {
    v67 = 1;
    LOBYTE(v84) = 1;
  }
  *((_BYTE *)this + 3372) = v67;
  *((_BYTE *)this + 3373) = v68;
  v69 = *((_QWORD *)this + 66);
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 8);
    if (v70)
    {
      v71 = *(WebCore::LocalFrameView **)(v70 + 288);
      if (v71)
      {
        ++*((_DWORD *)v71 + 2);
        WebCore::LocalFrameView::recalculateBaseBackgroundColor(v71, v66);
        if (*((_DWORD *)v71 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v71 + 8))(v71);
        else
          --*((_DWORD *)v71 + 2);
      }
    }
    v72 = *((_QWORD *)this + 66);
    if (v72)
    {
      v73 = *(_QWORD *)(v72 + 8);
      if (v73)
      {
        v74 = *(_QWORD *)(v73 + 24);
        if (v74)
        {
          v75 = *(WebCore::Page **)(v74 + 8);
          if (v75)
          {
            ++*(_DWORD *)v75;
            WebCore::Page::updateStyleAfterChangeInEnvironment(v75);
            if (*(_DWORD *)v75 == 1)
            {
              WebCore::Page::~Page((uint64_t)v75);
              WTF::fastFree(v77, v78);
            }
            else
            {
              --*(_DWORD *)v75;
            }
          }
        }
      }
    }
  }
  v76 = v87;
  v87 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v65);
    else
      *(_DWORD *)v76 -= 2;
  }
  result = v86[0];
  v86[0] = 0;
  if (!result)
  {
LABEL_196:
    if (!v2)
      goto LABEL_199;
    goto LABEL_197;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_196;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v65);
  if (v2)
  {
LABEL_197:
    if (*(_DWORD *)v2 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v65);
    else
      *(_DWORD *)v2 -= 2;
  }
LABEL_199:
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v65);
    else
      *(_DWORD *)v32 -= 2;
  }
  return result;
}

uint64_t WebCore::Document::processReferrerPolicy(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  WTF::StringImpl *v28;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 680) + 664) & 0x200000000000000) != 0 && !*(_BYTE *)(a1 + 3399))
  {
    v6 = *(_QWORD *)(a1 + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v24 = *(_QWORD *)(v7 + 280);
        v25 = 88;
        if (!*(_BYTE *)(v24 + 80))
          v25 = 96;
        v26 = *(_DWORD **)(v24 + v25);
        if (v26)
        {
          ++v26[6];
          result = WebCore::ResourceResponseBase::isAttachment((WebCore::ResourceResponseBase *)(v26 + 318));
          if (v26[6] == 1)
          {
            v27 = result;
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 24))(v26);
            if ((v27 & 1) != 0)
              return result;
          }
          else
          {
            --v26[6];
            if ((result & 1) != 0)
              return result;
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 3399))
  {
    v17 = *(_QWORD *)(a1 + 528);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 280);
        v20 = 88;
        if (!*(_BYTE *)(v19 + 80))
          v20 = 96;
        result = *(_QWORD *)(v19 + v20);
        if (result)
        {
          v21 = *(_DWORD *)(result + 24);
          *(_DWORD *)(result + 24) = v21 + 1;
          v22 = *(unsigned __int8 *)(result + 1520);
          if (v21)
          {
            *(_DWORD *)(result + 24) = v21;
            if (v22)
              return result;
          }
          else
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
            if (v22)
              return result;
          }
        }
      }
    }
  }
  v8 = *a2;
  if (*a2)
  {
    v9 = *(unsigned __int16 **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  result = WebCore::parseReferrerPolicy(v9, v10, a3);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v12 = *a2;
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)v12 += 2;
      if (v13 < 0)
        goto LABEL_50;
    }
    else
    {
      v13 = 0;
    }
    v14 = __OFADD__(v13, 181);
    v15 = v13 + 181;
    if (!v14)
    {
      result = (v15 + 42);
      if (!__OFADD__(v15, 42))
      {
        v16 = !v12 || (*(_BYTE *)(v12 + 16) & 4) != 0;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v16, (int8x16_t *)"Failed to set referrer policy: The value '", 0x2Au, v12, (int8x16_t *)"' is not one of 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin' or 'unsafe-url'.", 0xB5u, &v28);
        if (v28)
        {
          WebCore::Document::addConsoleMessage((_QWORD *)a1, 6, 2, &v28, 0);
          result = (uint64_t)v28;
          v28 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
              if (!v12)
                return result;
              goto LABEL_32;
            }
            *(_DWORD *)result -= 2;
          }
          if (!v12)
            return result;
LABEL_32:
          if (*(_DWORD *)v12 == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)v12, v23);
          *(_DWORD *)v12 -= 2;
          return result;
        }
LABEL_51:
        __break(0xC471u);
        return result;
      }
    }
LABEL_50:
    v28 = 0;
    goto LABEL_51;
  }
  if ((_BYTE)result)
    *(_BYTE *)(a1 + 272) = result;
  return result;
}

unsigned int *WebCore::Document::processApplicationManifest(WebCore::Document *this, const WebCore::ApplicationManifest *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Page *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Page *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  const WebCore::ApplicationManifest *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  v9 = *((_QWORD *)this + 170);
  if (v9)
    *((_QWORD *)this + 170) = 0;
  v10 = *((_QWORD *)this + 175);
  v11 = *((_QWORD *)a2 + 26);
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) != 0)
    {
      LODWORD(a7) = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 8);
      LODWORD(a5) = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC);
      LODWORD(a3) = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10);
      LODWORD(a8) = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 8);
      LODWORD(a6) = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0xC);
      LODWORD(a4) = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)&a7 == *(float *)&a8
        && *(float *)&a5 == *(float *)&a6
        && *(float *)&a3 == *(float *)&a4
        && HIBYTE(v10) == HIBYTE(v11)
        && BYTE6(v10) == BYTE6(v11))
      {
        goto LABEL_9;
      }
    }
    v33 = a2;
    v34 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
      a2 = v33;
    }
  }
  else if (v10 == v11 && (v11 & 0x8000000000000) == 0)
  {
    goto LABEL_9;
  }
  v13 = *((_QWORD *)a2 + 26);
  *((_QWORD *)this + 175) = v13;
  if ((v13 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
LABEL_9:
  result = (unsigned int *)WebCore::Document::themeColor(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x8000000000000) == 0)
  {
    if ((v9 & 0x8000000000000) == 0 && v16 == v9)
      return result;
LABEL_12:
    if ((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v15 = 0;
    }
    else
    {
      result = (unsigned int *)WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
      v15 = 256;
    }
    v17 = *((_QWORD *)this + 66);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (v19)
        {
          v20 = *(WebCore::Page **)(v19 + 8);
          if (v20)
          {
            ++*(_DWORD *)v20;
            result = (unsigned int *)WebCore::Page::scheduleRenderingUpdate((uint64_t)v20, v15);
            if (*(_DWORD *)v20 == 1)
            {
              WebCore::Page::~Page(v20);
              result = (unsigned int *)WTF::fastFree(v25, v26);
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
        }
      }
      v21 = *((_QWORD *)this + 66);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 24);
          if (v23)
          {
            v24 = *(WebCore::Page **)(v23 + 8);
            if (v24)
            {
              ++*(_DWORD *)v24;
              result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v24 + 6)
                                                                                                + 16)
                                                                                  + 552))(*(_QWORD *)(*((_QWORD *)v24 + 6) + 16), v15);
              if (*(_DWORD *)v24 == 1)
              {
                WebCore::Page::~Page(v24);
                result = (unsigned int *)WTF::fastFree(v27, v28);
                if ((v9 & 0x8000000000000) == 0)
                  return result;
                goto LABEL_30;
              }
              --*(_DWORD *)v24;
            }
          }
        }
      }
    }
    if ((v9 & 0x8000000000000) == 0)
      return result;
LABEL_30:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    goto LABEL_31;
  }
  if ((v9 & 0x8000000000000) == 0)
    goto LABEL_12;
  result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v16 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10)
    || HIBYTE(v16) != HIBYTE(v9)
    || BYTE6(v16) != BYTE6(v9))
  {
    goto LABEL_12;
  }
  do
  {
LABEL_31:
    v29 = __ldaxr(result);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, result));
  if (!v30)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, (void *)v15);
  }
  return result;
}

void WebCore::Document::prepareMouseEvent(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::PointerCaptureController *v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _DWORD *v39;
  uint64_t v40;
  void *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  if (!*(_QWORD *)(a1 + 1944) || *(_BYTE *)(a1 + 3405))
  {
    v44 = 0;
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0x4000000040;
    v49 = xmmword_1969F03F0;
    v50 = 0x3F80000000000000;
    v51 = 256;
    v56 = 0;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    v8 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a4;
    *(_OWORD *)(a5 + 16) = v8;
    goto LABEL_44;
  }
  v10 = HIDWORD(*a3);
  v11 = *a3 & 0xFFFFFFC0;
  v12 = *a3 & 0xFFFFFFC0FFFFFFC0;
  v44 = *a3;
  v45 = v12;
  v46 = 0x4000000040;
  *(float *)&v47 = (float)(int)v44 * 0.015625;
  *((float *)&v47 + 1) = (float)(int)v10 * 0.015625;
  *(float *)&v48 = (float)(int)v11 * 0.015625;
  *((float *)&v48 + 1) = (float)(int)(v10 & 0xFFFFFFC0) * 0.015625;
  *(float *)&v49 = *(float *)&v48 + 1.0;
  *((float *)&v49 + 1) = *((float *)&v48 + 1);
  *((float *)&v49 + 2) = *(float *)&v48 + 1.0;
  *((float *)&v49 + 3) = *((float *)&v48 + 1) + 1.0;
  *(float *)&v50 = *(float *)&v48;
  *((float *)&v50 + 1) = *((float *)&v48 + 1) + 1.0;
  v51 = 256;
  v52 = 0uLL;
  v56 = 0;
  v53 = v44;
  v55 = 0;
  v54 = 0uLL;
  WebCore::Document::hitTest(a1, a2, (WebCore::HitTestingTransformState *)&v44, (uint64_t)&v44);
  if ((*a2 & 1) == 0)
  {
    v13 = v52;
    if ((_QWORD)v52)
    {
      do
      {
        v14 = *(_WORD *)(v13 + 28);
        if ((v14 & 8) != 0)
        {
          v22 = 0;
          *(_DWORD *)(v13 + 24) += 2;
          goto LABEL_23;
        }
        v16 = (uint64_t *)(v13 + 32);
        v15 = *(_QWORD *)(v13 + 32);
        if (v15)
        {
          if ((*(_WORD *)(v15 + 28) & 8) != 0)
          {
            v17 = *(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL;
            if (v17)
            {
              v19 = *(_QWORD *)(v17 + 88);
              if (v19)
              {
                v20 = *(_QWORD *)(v19 + 224);
                if (v20)
                {
                  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v13);
                  if (v18)
                    goto LABEL_12;
                  v14 = *(_WORD *)(v13 + 28);
                }
              }
            }
          }
        }
        if ((v14 & 0x80) != 0)
        {
          v21 = *(_QWORD *)(v13 + 200);
          if (!v21)
          {
            v13 = 0;
            break;
          }
          v16 = (uint64_t *)(v21 + 8);
        }
        v18 = *v16;
LABEL_12:
        v13 = v18;
      }
      while (v18);
    }
    v22 = 1;
LABEL_23:
    v23 = *(_QWORD *)(a1 + 528);
    if (v23
      && (v24 = *(_QWORD *)(v23 + 8)) != 0
      && (v25 = *(_QWORD *)(v24 + 24)) != 0
      && (v26 = *(_QWORD *)(v25 + 8)) != 0)
    {
      ++*(_DWORD *)v26;
      v27 = *(WebCore::PointerCaptureController **)(v26 + 88);
      v28 = WebCore::PointerCaptureController::pointerCaptureElement(v27, (WebCore::Document *)a1, *(_DWORD *)(a4 + 96));
      v30 = v28;
      if (v28)
        *(_DWORD *)(v28 + 24) += 2;
      WebCore::PointerCaptureController::processPendingPointerCapture(v27, (WTF::StringImpl *)*(unsigned int *)(a4 + 96), v29);
      v31 = WebCore::PointerCaptureController::pointerCaptureElement(v27, (WebCore::Document *)a1, *(_DWORD *)(a4 + 96));
      v33 = v31;
      if (v31)
      {
        *(_DWORD *)(v31 + 24) += 2;
        if ((v22 & 1) == 0)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v32);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v13 = v33;
      }
      v34 = v30 != v33;
      if (v30)
      {
        if (*(_DWORD *)(v30 + 24) == 2)
        {
          if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v30, v32);
        }
        else
        {
          *(_DWORD *)(v30 + 24) -= 2;
        }
      }
      if (*(_DWORD *)v26 == 1)
      {
        WebCore::Page::~Page(v26);
        WTF::fastFree(v42, v43);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    else
    {
      v34 = 0;
    }
    WebCore::Document::updateHoverActiveState((unsigned __int8 *)a1, a2, v13, v34);
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v35);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
  }
  v36 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 16) = v36;
LABEL_44:
  v37 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a5 + 48) = v37;
  v38 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a5 + 80) = v38;
  *(_DWORD *)(a5 + 96) = *(_DWORD *)(a4 + 96);
  v39 = *(_DWORD **)(a4 + 104);
  if (v39)
    *v39 += 2;
  v40 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a5 + 104) = v39;
  *(_QWORD *)(a5 + 112) = v40;
  *(_WORD *)(a5 + 120) = *(_WORD *)(a4 + 120);
  WebCore::HitTestResult::HitTestResult((WebCore::HitTestResult *)(a5 + 128), (const WebCore::HitTestResult *)&v44);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v44, v41);
}

BOOL WebCore::Document::hitTest(uint64_t a1, _BYTE *a2, WebCore::HitTestingTransformState *a3)
{
  return WebCore::Document::hitTest(a1, a2, a3, (uint64_t)a3);
}

unsigned __int8 *WebCore::Document::updateHoverActiveState(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  WebCore::Node *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF *v83;
  WTF *v84;
  unsigned __int8 **v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  BOOL v135;
  char v136;
  WTF *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  _QWORD *v162;
  int v163;
  BOOL v164;
  char v165;
  WTF *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  WebCore::Node *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  WebCore::Node *v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  WTF *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  _QWORD *v194;
  int v195;
  BOOL v196;
  char v197;
  WTF *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  WTF *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  _QWORD *v223;
  int v224;
  BOOL v225;
  char v226;
  WTF *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  WTF *v231;
  uint64_t v232;
  WTF *v234;
  uint64_t v235;
  WTF *v237;
  uint64_t v238;
  WTF *v240;
  uint64_t v241;
  int v243;
  BOOL v244;
  char v245;
  int v246;
  BOOL v247;
  char v248;
  int v249;
  BOOL v250;
  char v251;
  int v252;
  BOOL v253;
  char v254;
  char v255;
  BOOL v256;
  WebCore::Node *v257;
  int v258;
  WebCore::Node *v259;
  WTF *v260;
  uint64_t v261;
  _BYTE v262[256];
  WTF *v263;
  uint64_t v264;
  _BYTE v265[256];
  WTF *v266;
  uint64_t v267;
  _BYTE v268[256];
  WTF *v269;
  uint64_t v270;
  _BYTE v271[256];
  __int128 v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  WebCore::Node *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280[2];

  v6 = result;
  v269 = (WTF *)v271;
  v270 = 32;
  v266 = (WTF *)v268;
  v267 = 32;
  v263 = (WTF *)v265;
  v264 = 32;
  v260 = (WTF *)v262;
  v261 = 32;
  if (a3)
  {
    v7 = a3;
    *(_DWORD *)(a3 + 24) += 2;
    while (1)
    {
      v8 = v7;
      result = *(unsigned __int8 **)(*(_QWORD *)(v7 + 40) + 8);
      v9 = result != v6;
      if (result == v6)
        break;
      result = (unsigned __int8 *)WebCore::Document::updateHoverActiveState(result, a2, v7, 0);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
      if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 120)) != 0)
      {
        v7 = *(_QWORD *)(v12 + 8);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
      }
      else
      {
        v7 = 0;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if (!v7)
      {
        v8 = 0;
        break;
      }
    }
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v13 = *((_QWORD *)v6 + 158);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v14 + 2;
    if ((*a2 & 2) == 0)
    {
      *(_DWORD *)(v13 + 24) = v14 + 4;
      v277 = v13;
      v15 = v13;
      while (1)
      {
        v16 = HIDWORD(v270);
        if (HIDWORD(v270) == (_DWORD)v270)
        {
          v27 = *(_QWORD *)WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v269, HIDWORD(v270) + 1, (unint64_t)&v277);
          if (v27)
            *(_DWORD *)(v27 + 24) += 2;
          v18 = HIDWORD(v270);
          *((_QWORD *)v269 + HIDWORD(v270)) = v27;
        }
        else
        {
          v17 = v269;
          *(_DWORD *)(v15 + 24) += 2;
          *((_QWORD *)v17 + v16) = v15;
          v18 = v16;
        }
        HIDWORD(v270) = v18 + 1;
        WebCore::UserActionElementSet::clearFlags((uint64_t *)v6 + 160, v277, 2);
        v19 = v277;
        v20 = *(_QWORD *)(v277 + 32);
        if (v20)
        {
          if ((*(_WORD *)(v20 + 28) & 8) != 0)
          {
            v21 = *(_QWORD *)(v20 + 72) & 0xFFFFFFFFFFFFLL;
            if (v21)
            {
              v24 = *(_QWORD *)(v21 + 88);
              if (v24)
              {
                v25 = *(_QWORD *)(v24 + 224);
                if (v25)
                {
                  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v277);
                  if (v15)
                    goto LABEL_36;
                }
              }
            }
          }
        }
        if ((~*(unsigned __int16 *)(v19 + 28) & 0x408) == 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 368))(v19))
        {
          break;
        }
        v15 = *(_QWORD *)(v19 + 32);
        if (v15)
        {
          v23 = *(_WORD *)(v15 + 28);
          if ((v23 & 0x80) != 0)
          {
            v22 = *(_QWORD *)(v15 + 200);
            if (v22)
            {
LABEL_27:
              v15 = *(_QWORD *)(v22 + 8);
              if (!v15)
                goto LABEL_37;
LABEL_36:
              *(_DWORD *)(v15 + 24) += 2;
              goto LABEL_37;
            }
          }
          else if ((v23 & 8) != 0)
          {
            goto LABEL_36;
          }
          goto LABEL_32;
        }
LABEL_37:
        v26 = v277;
        v277 = v15;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v26);
              v15 = v277;
            }
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        if (!v15)
        {
          result = (unsigned __int8 *)*((_QWORD *)v6 + 158);
          *((_QWORD *)v6 + 158) = 0;
          if (!result)
            goto LABEL_56;
          if (*((_DWORD *)result + 6) != 2)
          {
            *((_DWORD *)result + 6) -= 2;
            goto LABEL_56;
          }
          if ((*((_WORD *)result + 15) & 0x400) == 0)
LABEL_165:
            result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
          goto LABEL_56;
        }
      }
      v22 = *(_QWORD *)(v19 + 112);
      if (v22)
        goto LABEL_27;
LABEL_32:
      v15 = 0;
      goto LABEL_37;
    }
    if (!v8)
      goto LABEL_57;
    *(_DWORD *)(v8 + 24) += 2;
  }
  else
  {
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    if (v9)
    {
      v29 = 0;
      goto LABEL_59;
    }
    if ((*(_DWORD *)a2 & 2) != 0 && (*(_DWORD *)a2 & 0x84) != 0x84)
    {
      v69 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
      if (v69)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195987E18);
        }
        ++*(_DWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        do
        {
          if ((*(_BYTE *)(v69 + 45) & 1) == 0)
          {
            v70 = *(_QWORD *)(*(_QWORD *)(v69 + 24) + 8);
            if (v70)
            {
              if ((*(_WORD *)(v70 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195987DF8);
              }
              v71 = *(_DWORD *)(v70 + 24) + 2;
              *(_DWORD *)(v70 + 24) = v71;
              if ((*(_BYTE *)(v69 + 45) & 2) == 0 && *(_BYTE *)(v69 + 46) != 17)
              {
                WebCore::UserActionElementSet::setFlags((uint64_t *)v6 + 160, v70, 2);
                v71 = *(_DWORD *)(v70 + 24);
              }
              v72 = v71 - 2;
              if (v72)
              {
                *(_DWORD *)(v70 + 24) = v72;
              }
              else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v70);
              }
            }
          }
          v73 = *(_QWORD *)(v69 + 32);
          if (v73)
          {
            v73 = *(_QWORD *)(v73 + 8);
            if (v73)
              ++*(_DWORD *)(v73 + 16);
          }
          v74 = *(_DWORD *)(v69 + 16);
          if (!v74)
          {
            __break(0xC471u);
            JUMPOUT(0x195987DD8);
          }
          *(_DWORD *)(v69 + 16) = v74 - 1;
          v69 = v73;
        }
        while (v73);
        result = (unsigned __int8 *)*((_QWORD *)v6 + 158);
        *(_DWORD *)(v8 + 24) += 2;
        *((_QWORD *)v6 + 158) = v8;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) += 2;
        *((_QWORD *)v6 + 158) = v8;
      }
    }
  }
  if (*(_DWORD *)(v8 + 24) != 2)
  {
    *(_DWORD *)(v8 + 24) -= 2;
    goto LABEL_56;
  }
  if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    result = (unsigned __int8 *)v8;
    goto LABEL_165;
  }
LABEL_56:
  if (v13)
  {
LABEL_57:
    v28 = 0;
    goto LABEL_60;
  }
  v29 = *((_QWORD *)v6 + 158);
LABEL_59:
  v28 = v29 != 0;
LABEL_60:
  v257 = (WebCore::Node *)v13;
  v30 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 2) != 0)
    v31 = (a4 ^ 1) & (v30 >> 2);
  else
    v31 = 0;
  v32 = (WebCore::Node *)*((_QWORD *)v6 + 157);
  *((_QWORD *)v6 + 157) = 0;
  v33 = v30 & 0x88;
  v259 = v32;
  v256 = v33 == 136;
  if (v33 == 136)
  {
    if (!v8)
    {
      v34 = 0;
      v258 = 0;
      v45 = 0;
      v256 = 1;
      goto LABEL_156;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      v8 = 0;
      v34 = 0;
      v35 = 0;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      *(_DWORD *)(v8 + 24) -= 2;
      v8 = 0;
    }
    goto LABEL_98;
  }
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    v36 = v8;
    while (1)
    {
      v34 = v36;
      if ((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195987D68);
        }
        *(_DWORD *)(v36 + 24) += 2;
        v35 = 1;
LABEL_97:
        v32 = v259;
LABEL_98:
        result = (unsigned __int8 *)*((_QWORD *)v6 + 157);
        *((_QWORD *)v6 + 157) = v34;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
            {
              v68 = v35;
              result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
              v35 = v68;
            }
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
        v44 = v35 ^ 1;
        if (!v32)
          v44 = 1;
        if ((v44 & 1) != 0)
        {
          v258 = v35;
          v45 = 0;
          goto LABEL_156;
        }
        v45 = (uint64_t)v32;
        if (v32 == (WebCore::Node *)v34)
          goto LABEL_216;
        *(_QWORD *)&v272 = 0;
        while (2)
        {
          *((_DWORD *)v32 + 6) += 2;
          v275 = v32;
          WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)&v272, (uint64_t *)&v275, (uint64_t)&v277);
          v46 = (uint64_t)v275;
          v275 = 0;
          if (v46)
          {
            if (*(_DWORD *)(v46 + 24) == 2)
            {
              if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v46);
            }
            else
            {
              *(_DWORD *)(v46 + 24) -= 2;
            }
          }
          v47 = *((_QWORD *)v32 + 4);
          if (v47)
          {
            if ((*(_WORD *)(v47 + 28) & 8) != 0)
            {
              v48 = *(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL;
              if (v48)
              {
                v52 = *(_QWORD *)(v48 + 88);
                if (v52)
                {
                  v53 = *(_QWORD *)(v52 + 224);
                  if (v53)
                  {
                    v50 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v53 + 16))(v53, v32);
                    if (v50)
                      goto LABEL_119;
                  }
                }
              }
            }
          }
          if ((~*((unsigned __int16 *)v32 + 14) & 0x408) == 0
            && (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v32 + 368))(v32))
          {
            v49 = *((_QWORD *)v32 + 14);
            if (!v49)
              goto LABEL_128;
LABEL_115:
            v50 = *(_QWORD *)(v49 + 8);
LABEL_119:
            v32 = (WebCore::Node *)v50;
            if (!v50)
              goto LABEL_128;
            continue;
          }
          break;
        }
        v50 = *((_QWORD *)v32 + 4);
        if (!v50)
          goto LABEL_128;
        v51 = *(_WORD *)(v50 + 28);
        if ((v51 & 0x80) == 0)
        {
          if ((v51 & 8) == 0)
            goto LABEL_128;
          goto LABEL_119;
        }
        v49 = *(_QWORD *)(v50 + 200);
        if (v49)
          goto LABEL_115;
LABEL_128:
        v45 = v34;
        while (2)
        {
          v54 = (uint64_t *)v272;
          if ((_QWORD)v272)
          {
            v55 = *(_DWORD *)(v272 - 8);
            v56 = (~(v45 << 32) + v45) ^ ((unint64_t)(~(v45 << 32) + v45) >> 22);
            v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
            v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
            v59 = v55 & ((v58 >> 31) ^ v58);
            for (i = 1; ; ++i)
            {
              v61 = *(_QWORD *)(v272 + 8 * v59);
              if (v61 != -1)
              {
                if (!v61)
                  goto LABEL_135;
                if (v61 == v45)
                  break;
              }
              v59 = (v59 + i) & v55;
            }
            goto LABEL_205;
          }
LABEL_135:
          v62 = *(_QWORD *)(v45 + 32);
          if (!v62
            || (*(_WORD *)(v62 + 28) & 8) == 0
            || (v63 = *(_QWORD *)(v62 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || (v66 = *(_QWORD *)(v63 + 88)) == 0
            || (v67 = *(_QWORD *)(v66 + 224)) == 0
            || (result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v45)) == 0)
          {
            if ((~*(unsigned __int16 *)(v45 + 28) & 0x408) == 0)
            {
              result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 368))(v45);
              if ((_DWORD)result)
              {
                v64 = *(_QWORD *)(v45 + 112);
                if (!v64)
                  goto LABEL_152;
                goto LABEL_141;
              }
            }
            result = *(unsigned __int8 **)(v45 + 32);
            if (!result)
              goto LABEL_152;
            v65 = *((_WORD *)result + 14);
            if ((v65 & 0x80) != 0)
            {
              v64 = *((_QWORD *)result + 25);
              if (!v64)
              {
LABEL_152:
                v54 = (uint64_t *)v272;
                if (!(_QWORD)v272)
                {
                  v45 = 0;
                  v258 = 1;
                  goto LABEL_154;
                }
                v45 = 0;
LABEL_205:
                v75 = *((unsigned int *)v54 - 1);
                if ((_DWORD)v75)
                {
                  v76 = v54;
                  do
                  {
                    v77 = *v76;
                    if (*v76 != -1)
                    {
                      *v76 = 0;
                      if (v77)
                      {
                        if (*(_DWORD *)(v77 + 24) == 2)
                        {
                          if ((*(_WORD *)(v77 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v77);
                        }
                        else
                        {
                          *(_DWORD *)(v77 + 24) -= 2;
                        }
                      }
                    }
                    ++v76;
                    --v75;
                  }
                  while (v75);
                }
                result = (unsigned __int8 *)WTF::fastFree((WTF *)(v54 - 2), a2);
                v32 = v259;
                if (v45)
                {
LABEL_216:
                  v255 = 0;
                  *(_DWORD *)(v45 + 24) += 2;
                  v258 = 1;
                  goto LABEL_217;
                }
                v258 = 1;
LABEL_156:
                v255 = 1;
                goto LABEL_217;
              }
LABEL_141:
              result = *(unsigned __int8 **)(v64 + 8);
            }
            else if ((v65 & 8) == 0)
            {
              goto LABEL_152;
            }
          }
          v45 = (uint64_t)result;
          if (!result)
            goto LABEL_152;
          continue;
        }
      }
      v37 = *(_QWORD *)(v36 + 32);
      if (v37)
      {
        if ((*(_WORD *)(v37 + 28) & 8) != 0)
        {
          v38 = *(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL;
          if (v38)
          {
            v42 = *(_QWORD *)(v38 + 88);
            if (v42)
            {
              v43 = *(_QWORD *)(v42 + 224);
              if (v43)
              {
                v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v36);
                if (v36)
                {
LABEL_86:
                  v41 = 0;
                  *(_DWORD *)(v36 + 24) += 2;
                  goto LABEL_87;
                }
              }
            }
          }
        }
      }
      if ((~*(unsigned __int16 *)(v34 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 368))(v34))
      {
        v36 = *(_QWORD *)(v34 + 32);
        if (!v36)
          goto LABEL_82;
        v40 = *(_WORD *)(v36 + 28);
        if ((v40 & 0x80) == 0)
        {
          if ((v40 & 8) != 0)
            goto LABEL_86;
LABEL_81:
          v36 = 0;
          goto LABEL_82;
        }
        v39 = *(_QWORD *)(v36 + 200);
        if (!v39)
          goto LABEL_81;
      }
      else
      {
        v39 = *(_QWORD *)(v34 + 112);
        if (!v39)
          goto LABEL_81;
      }
      v36 = *(_QWORD *)(v39 + 8);
      if (v36)
        goto LABEL_86;
LABEL_82:
      v41 = 1;
LABEL_87:
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
      if ((v41 & 1) != 0)
      {
        v34 = 0;
        v35 = 0;
        goto LABEL_97;
      }
    }
  }
  v34 = 0;
  v258 = 0;
  v45 = 0;
  v256 = 1;
LABEL_154:
  v255 = 1;
  v32 = v259;
LABEL_217:
  if (v32 != (WebCore::Node *)v34)
  {
    if (v32 && (WebCore::Node *)v45 != v32)
    {
      v78 = (unsigned __int8 *)v32;
      while (1)
      {
        if (!v31 || (v78[54] & 2) != 0 && WebCore::Element::isUserActionElementInActiveChain((WebCore::Element *)v78))
        {
          v79 = HIDWORD(v264);
          if (HIDWORD(v264) == (_DWORD)v264)
          {
            v80 = HIDWORD(v264) + ((unint64_t)HIDWORD(v264) >> 2);
            if (v80 >= 0x10)
              v81 = v80 + 1;
            else
              v81 = 16;
            if (v81 <= (unint64_t)HIDWORD(v264) + 1)
              v82 = HIDWORD(v264) + 1;
            else
              v82 = v81;
            v83 = v263;
            if (v82 < 0x21)
            {
              v263 = (WTF *)v265;
              LODWORD(v264) = 32;
              v84 = (WTF *)v265;
            }
            else
            {
              if (v82 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195989348);
              }
              v84 = (WTF *)WTF::fastMalloc((WTF *)(8 * v82));
              LODWORD(v264) = v82;
              v263 = v84;
            }
            memcpy(v84, v83, 8 * v79);
            if (v265 != (_BYTE *)v83 && v83)
            {
              if (v263 == v83)
              {
                v263 = 0;
                LODWORD(v264) = 0;
              }
              WTF::fastFree(v83, a2);
            }
            v79 = HIDWORD(v264);
            v86 = v263;
            *((_DWORD *)v78 + 6) += 2;
            v85 = (unsigned __int8 **)((char *)v86 + 8 * v79);
            v32 = v259;
          }
          else
          {
            v85 = (unsigned __int8 **)((char *)v263 + 8 * HIDWORD(v264));
            *((_DWORD *)v78 + 6) += 2;
          }
          *v85 = v78;
          HIDWORD(v264) = v79 + 1;
        }
        v87 = *((_QWORD *)v78 + 4);
        if (!v87
          || (*(_WORD *)(v87 + 28) & 8) == 0
          || (v88 = *(_QWORD *)(v87 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v91 = *(_QWORD *)(v88 + 88)) == 0
          || (v92 = *(_QWORD *)(v91 + 224)) == 0
          || (result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v92 + 16))(v92, v78)) == 0)
        {
          if ((~*((unsigned __int16 *)v78 + 14) & 0x408) != 0
            || (result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v78 + 368))(v78),
                !(_DWORD)result))
          {
            result = (unsigned __int8 *)*((_QWORD *)v78 + 4);
            if (!result)
              break;
            v90 = *((_WORD *)result + 14);
            if ((v90 & 0x80) == 0)
            {
              if ((v90 & 8) == 0)
                break;
              goto LABEL_249;
            }
            v89 = *((_QWORD *)result + 25);
            if (!v89)
              break;
          }
          else
          {
            v89 = *((_QWORD *)v78 + 14);
            if (!v89)
              break;
          }
          result = *(unsigned __int8 **)(v89 + 8);
        }
LABEL_249:
        if (result)
        {
          v78 = result;
          if ((unsigned __int8 *)v45 != result)
            continue;
        }
        break;
      }
    }
    if (v32)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v32 + 192))(v32);
      if ((_DWORD)result)
      {
        v93 = *((_QWORD *)v32 + 14);
        if (v93)
        {
          v94 = *(_QWORD *)(v93 + 8);
          if (v94)
          {
            if (!*(_BYTE *)(v94 + 144))
            {
              v95 = *(_QWORD *)(v94 + 296);
              if (v95)
              {
                *(_DWORD *)(v95 + 24) += 2;
                result = (unsigned __int8 *)WebCore::Document::updateHoverActiveState(v95, a2, 0, 0);
                if (*(_DWORD *)(v95 + 24) == 2)
                {
                  if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
                    result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v95);
                }
                else
                {
                  *(_DWORD *)(v95 + 24) -= 2;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v258)
  {
    *(_DWORD *)(v34 + 24) += 2;
    v277 = v34;
LABEL_272:
    v96 = 0;
    result = (unsigned __int8 *)v34;
    while (1)
    {
      if (!v31
        || (result[54] & 2) != 0 && WebCore::Element::isUserActionElementInActiveChain((WebCore::Element *)result))
      {
        if (v28)
        {
          v97 = HIDWORD(v267);
          if (HIDWORD(v267) == (_DWORD)v267)
          {
            v97 = *(_QWORD *)WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v266, HIDWORD(v267) + 1, (unint64_t)&v277);
            if (v97)
              *(_DWORD *)(v97 + 24) += 2;
            v109 = HIDWORD(v267);
            *((_QWORD *)v266 + HIDWORD(v267)) = v97;
            LODWORD(v97) = v109;
          }
          else
          {
            v98 = v277;
            if (v277)
              *(_DWORD *)(v277 + 24) += 2;
            *((_QWORD *)v266 + v97) = v98;
          }
          HIDWORD(v267) = v97 + 1;
        }
        v99 = v277;
        if ((v277 == v45) | v96 & 1)
        {
          v96 = 1;
        }
        else
        {
          v100 = HIDWORD(v261);
          if (HIDWORD(v261) == (_DWORD)v261)
          {
            v100 = *(_QWORD *)WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, HIDWORD(v261) + 1, (unint64_t)&v277);
            if (v100)
              *(_DWORD *)(v100 + 24) += 2;
            v110 = HIDWORD(v261);
            *((_QWORD *)v260 + HIDWORD(v261)) = v100;
            LODWORD(v100) = v110;
          }
          else
          {
            if (v277)
              *(_DWORD *)(v277 + 24) += 2;
            *((_QWORD *)v260 + v100) = v99;
          }
          v96 = 0;
          HIDWORD(v261) = v100 + 1;
        }
      }
      v101 = v277;
      v102 = *(_QWORD *)(v277 + 32);
      if (v102)
      {
        if ((*(_WORD *)(v102 + 28) & 8) != 0)
        {
          v103 = *(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL;
          if (v103)
          {
            v106 = *(_QWORD *)(v103 + 88);
            if (v106)
            {
              v107 = *(_QWORD *)(v106 + 224);
              if (v107)
              {
                result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v277);
                if (result)
                  goto LABEL_304;
              }
            }
          }
        }
      }
      if ((~*(unsigned __int16 *)(v101 + 28) & 0x408) == 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 368))(v101))
      {
        break;
      }
      result = *(unsigned __int8 **)(v101 + 32);
      if (result)
      {
        v105 = *((_WORD *)result + 14);
        if ((v105 & 0x80) != 0)
        {
          v104 = *((_QWORD *)result + 25);
          if (v104)
          {
LABEL_295:
            result = *(unsigned __int8 **)(v104 + 8);
            if (!result)
              goto LABEL_305;
LABEL_304:
            *((_DWORD *)result + 6) += 2;
            goto LABEL_305;
          }
        }
        else if ((v105 & 8) != 0)
        {
          goto LABEL_304;
        }
        goto LABEL_300;
      }
LABEL_305:
      v108 = v277;
      v277 = (uint64_t)result;
      if (v108)
      {
        if (*(_DWORD *)(v108 + 24) == 2)
        {
          if ((*(_WORD *)(v108 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v108);
            result = (unsigned __int8 *)v277;
          }
        }
        else
        {
          *(_DWORD *)(v108 + 24) -= 2;
        }
      }
      if (!result)
        goto LABEL_323;
    }
    v104 = *(_QWORD *)(v101 + 112);
    if (v104)
      goto LABEL_295;
LABEL_300:
    result = 0;
    goto LABEL_305;
  }
  v277 = v34;
  if (v34)
    goto LABEL_272;
LABEL_323:
  v111 = HIDWORD(v270);
  if (!HIDWORD(v270))
    goto LABEL_396;
  v112 = v269;
  v113 = *((_QWORD *)v269 + HIDWORD(v270) - 1);
  if ((*(_BYTE *)(v113 + 22) & 8) == 0)
    goto LABEL_343;
  v114 = *(uint64_t **)(v113 + 40);
  v115 = v114[1];
  if (!*(_QWORD *)(v115 + 1944) || *(_BYTE *)(v115 + 3405))
    goto LABEL_343;
  if ((*(_BYTE *)(v113 + 70) & 4) != 0)
  {
    v119 = *v114;
    v120 = (*(_WORD *)(v119 + 28) & 0x80) == 0 || v119 == 0;
    v121 = v119 + 216;
    if (v120)
      v121 = v115 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v121 + 236))
      goto LABEL_343;
  }
  v116 = *(_QWORD *)(v115 + 1272);
  if (v116 && (*(_BYTE *)(v116 + 70) & 4) != 0)
  {
LABEL_343:
    LOBYTE(v277) = 0;
    v279 = 0;
    v280[0] = 0;
    v278 = v113;
  }
  else
  {
    if (*(_BYTE *)(v115 + 3362)
      || (v117 = *(unsigned __int8 *)(v115 + 3390), !*(_BYTE *)(v115 + 3390))
      && (*(_BYTE *)(v115 + 70) & 8) == 0
      && !*(_QWORD *)(v115 + 1560)
      && (v118 = *(_QWORD *)(v115 + 1328), !*(_BYTE *)(v118 + 233))
      && !*(_BYTE *)(v118 + 234))
    {
      LOBYTE(v277) = 1;
      v279 = 0;
      v280[0] = 0;
      v278 = v113;
      goto LABEL_696;
    }
    v243 = *(unsigned __int8 *)(v115 + 3391);
    if (v117)
      v244 = v243 == 0;
    else
      v244 = 0;
    v245 = !v244;
    LOBYTE(v277) = v245;
    v279 = 0;
    v280[0] = 0;
    v278 = v113;
    if (!v244)
    {
LABEL_696:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v277, (WTF::StringImpl *)0xB, 0, 2);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, &v279);
      v112 = v269;
      v111 = HIDWORD(v270);
      v275 = 0;
      v276 = 0;
      if (!HIDWORD(v270))
        goto LABEL_390;
      goto LABEL_345;
    }
  }
  v275 = 0;
  v276 = 0;
LABEL_345:
  v122 = (WTF *)((char *)v112 + 8 * v111);
  do
  {
    v123 = *(_QWORD *)v112;
    v124 = *(_QWORD *)(*(_QWORD *)v112 + 32);
    if (!v124 || (*(_WORD *)(v124 + 28) & 0x80) == 0)
      goto LABEL_377;
    if ((*(_BYTE *)(v123 + 22) & 8) == 0)
      goto LABEL_367;
    v125 = *(uint64_t **)(v123 + 40);
    v126 = v125[1];
    if (!*(_QWORD *)(v126 + 1944) || *(_BYTE *)(v126 + 3405))
      goto LABEL_367;
    if ((*(_BYTE *)(v123 + 70) & 4) != 0)
    {
      v130 = *v125;
      v131 = (*(_WORD *)(v130 + 28) & 0x80) == 0 || v130 == 0;
      v132 = v130 + 216;
      if (v131)
        v132 = v126 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v132 + 236))
        goto LABEL_367;
    }
    v127 = *(_QWORD *)(v126 + 1272);
    if (v127 && (*(_BYTE *)(v127 + 70) & 4) != 0)
    {
LABEL_367:
      LOBYTE(v272) = 0;
      *((_QWORD *)&v272 + 1) = v123;
      v273 = 0;
      v274 = 0;
    }
    else
    {
      if (!*(_BYTE *)(v126 + 3362)
        && ((v128 = *(unsigned __int8 *)(v126 + 3390), *(_BYTE *)(v126 + 3390))
         || (*(_BYTE *)(v126 + 70) & 8) != 0
         || *(_QWORD *)(v126 + 1560)
         || (v129 = *(_QWORD *)(v126 + 1328), *(_BYTE *)(v129 + 233))
         || *(_BYTE *)(v129 + 234)))
      {
        v134 = *(unsigned __int8 *)(v126 + 3391);
        if (v128)
          v135 = v134 == 0;
        else
          v135 = 0;
        v136 = !v135;
        LOBYTE(v272) = v136;
        *((_QWORD *)&v272 + 1) = v123;
        v273 = 0;
        v274 = 0;
        if (v135)
          goto LABEL_368;
      }
      else
      {
        LOBYTE(v272) = 1;
        *((_QWORD *)&v272 + 1) = v123;
        v273 = 0;
        v274 = 0;
      }
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v272, (WTF::StringImpl *)0xB, 0, 2);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v273);
    }
LABEL_368:
    if (HIDWORD(v276) == (_DWORD)v276)
    {
      WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>((uint64_t)&v275, (unint64_t)&v272);
    }
    else
    {
      v133 = (_QWORD *)((char *)v275 + 32 * HIDWORD(v276));
      *(_OWORD *)v133 = v272;
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v133 + 2, &v273);
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v133 + 3, &v274);
      ++HIDWORD(v276);
    }
    if ((_BYTE)v272)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v274);
    if (v274)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v274, a2);
    if (v273)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v273, a2);
LABEL_377:
    v112 = (WTF *)((char *)v112 + 8);
  }
  while (v112 != v122);
  if (HIDWORD(v270))
  {
    v137 = v269;
    v138 = 8 * HIDWORD(v270);
    do
    {
      v139 = *(_QWORD *)v137;
      v137 = (WTF *)((char *)v137 + 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v139 + 520))(v139, 0, 1);
      v138 -= 8;
    }
    while (v138);
  }
LABEL_390:
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, a2);
  if ((_BYTE)v277)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, v280);
  if (v280[0])
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v280[0], a2);
  result = v279;
  if (v279)
    result = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v279, a2);
LABEL_396:
  v140 = HIDWORD(v267);
  if (!HIDWORD(v267))
    goto LABEL_469;
  v141 = v266;
  v142 = *((_QWORD *)v266 + HIDWORD(v267) - 1);
  if ((*(_BYTE *)(v142 + 22) & 8) == 0)
    goto LABEL_416;
  v143 = *(uint64_t **)(v142 + 40);
  v144 = v143[1];
  if (!*(_QWORD *)(v144 + 1944) || *(_BYTE *)(v144 + 3405))
    goto LABEL_416;
  if ((*(_BYTE *)(v142 + 70) & 4) != 0)
  {
    v148 = *v143;
    v149 = (*(_WORD *)(v148 + 28) & 0x80) == 0 || v148 == 0;
    v150 = v148 + 216;
    if (v149)
      v150 = v144 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v150 + 236))
      goto LABEL_416;
  }
  v145 = *(_QWORD *)(v144 + 1272);
  if (v145)
  {
    if ((*(_BYTE *)(v145 + 70) & 4) != 0)
    {
LABEL_416:
      LOBYTE(v277) = 0;
      v279 = 0;
      v280[0] = 0;
      v278 = v142;
LABEL_417:
      v275 = 0;
      v276 = 0;
      goto LABEL_418;
    }
  }
  if (!*(_BYTE *)(v144 + 3362))
  {
    v146 = *(unsigned __int8 *)(v144 + 3390);
    if (*(_BYTE *)(v144 + 3390)
      || (*(_BYTE *)(v144 + 70) & 8) != 0
      || *(_QWORD *)(v144 + 1560)
      || (v147 = *(_QWORD *)(v144 + 1328), *(_BYTE *)(v147 + 233))
      || *(_BYTE *)(v147 + 234))
    {
      v246 = *(unsigned __int8 *)(v144 + 3391);
      if (v146)
        v247 = v246 == 0;
      else
        v247 = 0;
      v248 = !v247;
      LOBYTE(v277) = v248;
      v279 = 0;
      v280[0] = 0;
      v278 = v142;
      if (!v247)
        goto LABEL_705;
      goto LABEL_417;
    }
  }
  LOBYTE(v277) = 1;
  v279 = 0;
  v280[0] = 0;
  v278 = v142;
LABEL_705:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v277, (WTF::StringImpl *)0xB, 1, 2);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, &v279);
  v141 = v266;
  v140 = HIDWORD(v267);
  v275 = 0;
  v276 = 0;
  if (!HIDWORD(v267))
    goto LABEL_463;
LABEL_418:
  v151 = (WTF *)((char *)v141 + 8 * v140);
  while (2)
  {
    v152 = *(_QWORD *)v141;
    v153 = *(_QWORD *)(*(_QWORD *)v141 + 32);
    if (v153 && (*(_WORD *)(v153 + 28) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v152 + 22) & 8) == 0)
        goto LABEL_440;
      v154 = *(uint64_t **)(v152 + 40);
      v155 = v154[1];
      if (!*(_QWORD *)(v155 + 1944) || *(_BYTE *)(v155 + 3405))
        goto LABEL_440;
      if ((*(_BYTE *)(v152 + 70) & 4) != 0)
      {
        v159 = *v154;
        v160 = (*(_WORD *)(v159 + 28) & 0x80) == 0 || v159 == 0;
        v161 = v159 + 216;
        if (v160)
          v161 = v155 + 1328;
        if (!*(_BYTE *)(*(_QWORD *)v161 + 236))
          goto LABEL_440;
      }
      v156 = *(_QWORD *)(v155 + 1272);
      if (v156 && (*(_BYTE *)(v156 + 70) & 4) != 0)
      {
LABEL_440:
        LOBYTE(v272) = 0;
        *((_QWORD *)&v272 + 1) = v152;
        v273 = 0;
        v274 = 0;
      }
      else
      {
        if (*(_BYTE *)(v155 + 3362)
          || (v157 = *(unsigned __int8 *)(v155 + 3390), !*(_BYTE *)(v155 + 3390))
          && (*(_BYTE *)(v155 + 70) & 8) == 0
          && !*(_QWORD *)(v155 + 1560)
          && (v158 = *(_QWORD *)(v155 + 1328), !*(_BYTE *)(v158 + 233))
          && !*(_BYTE *)(v158 + 234))
        {
          LOBYTE(v272) = 1;
          *((_QWORD *)&v272 + 1) = v152;
          v273 = 0;
          v274 = 0;
          goto LABEL_459;
        }
        v163 = *(unsigned __int8 *)(v155 + 3391);
        if (v157)
          v164 = v163 == 0;
        else
          v164 = 0;
        v165 = !v164;
        LOBYTE(v272) = v165;
        *((_QWORD *)&v272 + 1) = v152;
        v273 = 0;
        v274 = 0;
        if (!v164)
        {
LABEL_459:
          WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v272, (WTF::StringImpl *)0xB, 1, 2);
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v273);
        }
      }
      if (HIDWORD(v276) == (_DWORD)v276)
      {
        WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>((uint64_t)&v275, (unint64_t)&v272);
      }
      else
      {
        v162 = (_QWORD *)((char *)v275 + 32 * HIDWORD(v276));
        *(_OWORD *)v162 = v272;
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v162 + 2, &v273);
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v162 + 3, &v274);
        ++HIDWORD(v276);
      }
      if ((_BYTE)v272)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v274);
      if (v274)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v274, a2);
      if (v273)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v273, a2);
    }
    v141 = (WTF *)((char *)v141 + 8);
    if (v141 != v151)
      continue;
    break;
  }
  if (HIDWORD(v267))
  {
    v166 = v266;
    v167 = 8 * HIDWORD(v267);
    do
    {
      v168 = *(_QWORD *)v166;
      v166 = (WTF *)((char *)v166 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v168 + 520))(v168, 1, 1);
      v167 -= 8;
    }
    while (v167);
  }
LABEL_463:
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, a2);
  if ((_BYTE)v277)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, v280);
  if (v280[0])
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v280[0], a2);
  result = v279;
  if (v279)
    result = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v279, a2);
LABEL_469:
  v169 = *(unsigned int *)a2 | ((unint64_t)a2[4] << 32);
  v170 = HIDWORD(v264);
  if (!HIDWORD(v264))
  {
    v179 = v257;
    v173 = v259;
    goto LABEL_544;
  }
  v171 = v263;
  v172 = *((_QWORD *)v263 + HIDWORD(v264) - 1);
  v173 = v259;
  if ((*(_BYTE *)(v172 + 22) & 8) == 0)
    goto LABEL_490;
  v174 = *(uint64_t **)(v172 + 40);
  v175 = v174[1];
  if (!*(_QWORD *)(v175 + 1944) || *(_BYTE *)(v175 + 3405))
    goto LABEL_490;
  if ((*(_BYTE *)(v172 + 70) & 4) != 0)
  {
    v180 = *v174;
    v181 = (*(_WORD *)(v180 + 28) & 0x80) == 0 || v180 == 0;
    v182 = v180 + 216;
    if (v181)
      v182 = v175 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v182 + 236))
      goto LABEL_490;
  }
  v176 = *(_QWORD *)(v175 + 1272);
  if (v176)
  {
    if ((*(_BYTE *)(v176 + 70) & 4) != 0)
    {
LABEL_490:
      LOBYTE(v277) = 0;
      v279 = 0;
      v280[0] = 0;
      v278 = v172;
LABEL_491:
      v275 = 0;
      v276 = 0;
      goto LABEL_492;
    }
  }
  if (!*(_BYTE *)(v175 + 3362))
  {
    v177 = *(unsigned __int8 *)(v175 + 3390);
    if (*(_BYTE *)(v175 + 3390)
      || (*(_BYTE *)(v175 + 70) & 8) != 0
      || *(_QWORD *)(v175 + 1560)
      || (v178 = *(_QWORD *)(v175 + 1328), *(_BYTE *)(v178 + 233))
      || *(_BYTE *)(v178 + 234))
    {
      v249 = *(unsigned __int8 *)(v175 + 3391);
      if (v177)
        v250 = v249 == 0;
      else
        v250 = 0;
      v251 = !v250;
      LOBYTE(v277) = v251;
      v279 = 0;
      v280[0] = 0;
      v278 = v172;
      if (!v250)
        goto LABEL_714;
      goto LABEL_491;
    }
  }
  LOBYTE(v277) = 1;
  v279 = 0;
  v280[0] = 0;
  v278 = v172;
LABEL_714:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v277, (WTF::StringImpl *)0x25, 0, 2);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, &v279);
  v171 = v263;
  v170 = HIDWORD(v264);
  v275 = 0;
  v276 = 0;
  if (!HIDWORD(v264))
    goto LABEL_537;
LABEL_492:
  v183 = (WTF *)((char *)v171 + 8 * v170);
  while (2)
  {
    v184 = *(_QWORD *)v171;
    v185 = *(_QWORD *)(*(_QWORD *)v171 + 32);
    if (v185 && (*(_WORD *)(v185 + 28) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v184 + 22) & 8) == 0)
        goto LABEL_514;
      v186 = *(uint64_t **)(v184 + 40);
      v187 = v186[1];
      if (!*(_QWORD *)(v187 + 1944) || *(_BYTE *)(v187 + 3405))
        goto LABEL_514;
      if ((*(_BYTE *)(v184 + 70) & 4) != 0)
      {
        v191 = *v186;
        v192 = (*(_WORD *)(v191 + 28) & 0x80) == 0 || v191 == 0;
        v193 = v191 + 216;
        if (v192)
          v193 = v187 + 1328;
        if (!*(_BYTE *)(*(_QWORD *)v193 + 236))
          goto LABEL_514;
      }
      v188 = *(_QWORD *)(v187 + 1272);
      if (v188 && (*(_BYTE *)(v188 + 70) & 4) != 0)
      {
LABEL_514:
        LOBYTE(v272) = 0;
        *((_QWORD *)&v272 + 1) = v184;
        v273 = 0;
        v274 = 0;
      }
      else
      {
        if (*(_BYTE *)(v187 + 3362)
          || (v189 = *(unsigned __int8 *)(v187 + 3390), !*(_BYTE *)(v187 + 3390))
          && (*(_BYTE *)(v187 + 70) & 8) == 0
          && !*(_QWORD *)(v187 + 1560)
          && (v190 = *(_QWORD *)(v187 + 1328), !*(_BYTE *)(v190 + 233))
          && !*(_BYTE *)(v190 + 234))
        {
          LOBYTE(v272) = 1;
          *((_QWORD *)&v272 + 1) = v184;
          v273 = 0;
          v274 = 0;
          goto LABEL_533;
        }
        v195 = *(unsigned __int8 *)(v187 + 3391);
        if (v189)
          v196 = v195 == 0;
        else
          v196 = 0;
        v197 = !v196;
        LOBYTE(v272) = v197;
        *((_QWORD *)&v272 + 1) = v184;
        v273 = 0;
        v274 = 0;
        if (!v196)
        {
LABEL_533:
          WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v272, (WTF::StringImpl *)0x25, 0, 2);
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v273);
        }
      }
      if (HIDWORD(v276) == (_DWORD)v276)
      {
        WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>((uint64_t)&v275, (unint64_t)&v272);
      }
      else
      {
        v194 = (_QWORD *)((char *)v275 + 32 * HIDWORD(v276));
        *(_OWORD *)v194 = v272;
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v194 + 2, &v273);
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v194 + 3, &v274);
        ++HIDWORD(v276);
      }
      if ((_BYTE)v272)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v274);
      if (v274)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v274, a2);
      if (v273)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v273, a2);
    }
    v171 = (WTF *)((char *)v171 + 8);
    if (v171 != v183)
      continue;
    break;
  }
  v173 = v259;
  if (HIDWORD(v264))
  {
    v198 = v263;
    v199 = 8 * HIDWORD(v264);
    do
    {
      v200 = *(_QWORD *)v198;
      v198 = (WTF *)((char *)v198 + 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)v200 + 528))(v200, 0, 1, v169);
      v199 -= 8;
    }
    while (v199);
  }
LABEL_537:
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, a2);
  if ((_BYTE)v277)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, v280);
  v179 = v257;
  if (v280[0])
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v280[0], a2);
  result = v279;
  if (v279)
    result = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v279, a2);
  v169 = *(unsigned int *)a2 | ((unint64_t)a2[4] << 32);
LABEL_544:
  v201 = HIDWORD(v261);
  if (!HIDWORD(v261))
    goto LABEL_617;
  v202 = v260;
  v203 = *((_QWORD *)v260 + HIDWORD(v261) - 1);
  if ((*(_BYTE *)(v203 + 22) & 8) == 0)
    goto LABEL_564;
  v204 = *(uint64_t **)(v203 + 40);
  v205 = v204[1];
  if (!*(_QWORD *)(v205 + 1944) || *(_BYTE *)(v205 + 3405))
    goto LABEL_564;
  if ((*(_BYTE *)(v203 + 70) & 4) != 0)
  {
    v209 = *v204;
    v210 = (*(_WORD *)(v209 + 28) & 0x80) == 0 || v209 == 0;
    v211 = v209 + 216;
    if (v210)
      v211 = v205 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v211 + 236))
      goto LABEL_564;
  }
  v206 = *(_QWORD *)(v205 + 1272);
  if (v206)
  {
    if ((*(_BYTE *)(v206 + 70) & 4) != 0)
    {
LABEL_564:
      LOBYTE(v277) = 0;
      v279 = 0;
      v280[0] = 0;
      v278 = v203;
LABEL_565:
      v275 = 0;
      v276 = 0;
      goto LABEL_566;
    }
  }
  if (!*(_BYTE *)(v205 + 3362))
  {
    v207 = *(unsigned __int8 *)(v205 + 3390);
    if (*(_BYTE *)(v205 + 3390)
      || (*(_BYTE *)(v205 + 70) & 8) != 0
      || *(_QWORD *)(v205 + 1560)
      || (v208 = *(_QWORD *)(v205 + 1328), *(_BYTE *)(v208 + 233))
      || *(_BYTE *)(v208 + 234))
    {
      v252 = *(unsigned __int8 *)(v205 + 3391);
      if (v207)
        v253 = v252 == 0;
      else
        v253 = 0;
      v254 = !v253;
      LOBYTE(v277) = v254;
      v279 = 0;
      v280[0] = 0;
      v278 = v203;
      if (!v253)
        goto LABEL_723;
      goto LABEL_565;
    }
  }
  LOBYTE(v277) = 1;
  v279 = 0;
  v280[0] = 0;
  v278 = v203;
LABEL_723:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v277, (WTF::StringImpl *)0x25, 1, 2);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, &v279);
  v202 = v260;
  v201 = HIDWORD(v261);
  v275 = 0;
  v276 = 0;
  if (!HIDWORD(v261))
    goto LABEL_611;
LABEL_566:
  v212 = (WTF *)((char *)v202 + 8 * v201);
  while (2)
  {
    v213 = *(_QWORD *)v202;
    v214 = *(_QWORD *)(*(_QWORD *)v202 + 32);
    if (v214 && (*(_WORD *)(v214 + 28) & 0x80) != 0)
    {
      if ((*(_BYTE *)(v213 + 22) & 8) == 0)
        goto LABEL_588;
      v215 = *(uint64_t **)(v213 + 40);
      v216 = v215[1];
      if (!*(_QWORD *)(v216 + 1944) || *(_BYTE *)(v216 + 3405))
        goto LABEL_588;
      if ((*(_BYTE *)(v213 + 70) & 4) != 0)
      {
        v220 = *v215;
        v221 = (*(_WORD *)(v220 + 28) & 0x80) == 0 || v220 == 0;
        v222 = v220 + 216;
        if (v221)
          v222 = v216 + 1328;
        if (!*(_BYTE *)(*(_QWORD *)v222 + 236))
          goto LABEL_588;
      }
      v217 = *(_QWORD *)(v216 + 1272);
      if (v217 && (*(_BYTE *)(v217 + 70) & 4) != 0)
      {
LABEL_588:
        LOBYTE(v272) = 0;
        *((_QWORD *)&v272 + 1) = v213;
        v273 = 0;
        v274 = 0;
      }
      else
      {
        if (*(_BYTE *)(v216 + 3362)
          || (v218 = *(unsigned __int8 *)(v216 + 3390), !*(_BYTE *)(v216 + 3390))
          && (*(_BYTE *)(v216 + 70) & 8) == 0
          && !*(_QWORD *)(v216 + 1560)
          && (v219 = *(_QWORD *)(v216 + 1328), !*(_BYTE *)(v219 + 233))
          && !*(_BYTE *)(v219 + 234))
        {
          LOBYTE(v272) = 1;
          *((_QWORD *)&v272 + 1) = v213;
          v273 = 0;
          v274 = 0;
          goto LABEL_607;
        }
        v224 = *(unsigned __int8 *)(v216 + 3391);
        if (v218)
          v225 = v224 == 0;
        else
          v225 = 0;
        v226 = !v225;
        LOBYTE(v272) = v226;
        *((_QWORD *)&v272 + 1) = v213;
        v273 = 0;
        v274 = 0;
        if (!v225)
        {
LABEL_607:
          WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v272, (WTF::StringImpl *)0x25, 1, 2);
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v273);
        }
      }
      if (HIDWORD(v276) == (_DWORD)v276)
      {
        WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>((uint64_t)&v275, (unint64_t)&v272);
      }
      else
      {
        v223 = (_QWORD *)((char *)v275 + 32 * HIDWORD(v276));
        *(_OWORD *)v223 = v272;
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v223 + 2, &v273);
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(v223 + 3, &v274);
        ++HIDWORD(v276);
      }
      if ((_BYTE)v272)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v272 + 1), &v274);
      if (v274)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v274, a2);
      if (v273)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v273, a2);
    }
    v202 = (WTF *)((char *)v202 + 8);
    if (v202 != v212)
      continue;
    break;
  }
  v179 = v257;
  v173 = v259;
  if (HIDWORD(v261))
  {
    v227 = v260;
    v228 = 8 * HIDWORD(v261);
    do
    {
      v229 = *(_QWORD *)v227;
      v227 = (WTF *)((char *)v227 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v229 + 528))(v229, 1, 1, v169);
      v228 -= 8;
    }
    while (v228);
  }
LABEL_611:
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, a2);
  if ((_BYTE)v277)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v278, v280);
  if (v280[0])
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v280[0], a2);
  result = v279;
  if (v279)
    result = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v279, a2);
LABEL_617:
  v230 = v258;
  if ((v255 & 1) == 0)
  {
    if (*(_DWORD *)(v45 + 24) == 2)
    {
      if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
      {
        result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v45);
        v230 = v258;
      }
    }
    else
    {
      *(_DWORD *)(v45 + 24) -= 2;
    }
  }
  if (v230)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v34);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  if (v173)
  {
    if (*((_DWORD *)v173 + 6) == 2)
    {
      if ((*((_WORD *)v173 + 15) & 0x400) == 0)
        result = (unsigned __int8 *)WebCore::Node::removedLastRef(v173);
    }
    else
    {
      *((_DWORD *)v173 + 6) -= 2;
    }
  }
  if (v179)
  {
    if (*((_DWORD *)v179 + 6) == 2)
    {
      if ((*((_WORD *)v179 + 15) & 0x400) == 0)
        result = (unsigned __int8 *)WebCore::Node::removedLastRef(v179);
    }
    else
    {
      *((_DWORD *)v179 + 6) -= 2;
    }
  }
  if (!v256)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v231 = v260;
  if (HIDWORD(v261))
  {
    v232 = 8 * HIDWORD(v261);
    do
    {
      result = *(unsigned __int8 **)v231;
      *(_QWORD *)v231 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v231 = (WTF *)((char *)v231 + 8);
      v232 -= 8;
    }
    while (v232);
    v231 = v260;
  }
  if (v262 != (_BYTE *)v231 && v231 != 0)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    result = (unsigned __int8 *)WTF::fastFree(v231, a2);
  }
  v234 = v263;
  if (HIDWORD(v264))
  {
    v235 = 8 * HIDWORD(v264);
    do
    {
      result = *(unsigned __int8 **)v234;
      *(_QWORD *)v234 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v234 = (WTF *)((char *)v234 + 8);
      v235 -= 8;
    }
    while (v235);
    v234 = v263;
  }
  if (v265 != (_BYTE *)v234 && v234 != 0)
  {
    v263 = 0;
    LODWORD(v264) = 0;
    result = (unsigned __int8 *)WTF::fastFree(v234, a2);
  }
  v237 = v266;
  if (HIDWORD(v267))
  {
    v238 = 8 * HIDWORD(v267);
    do
    {
      result = *(unsigned __int8 **)v237;
      *(_QWORD *)v237 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v237 = (WTF *)((char *)v237 + 8);
      v238 -= 8;
    }
    while (v238);
    v237 = v266;
  }
  if (v268 != (_BYTE *)v237 && v237 != 0)
  {
    v266 = 0;
    LODWORD(v267) = 0;
    result = (unsigned __int8 *)WTF::fastFree(v237, a2);
  }
  v240 = v269;
  if (HIDWORD(v270))
  {
    v241 = 8 * HIDWORD(v270);
    do
    {
      result = *(unsigned __int8 **)v240;
      *(_QWORD *)v240 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v240 = (WTF *)((char *)v240 + 8);
      v241 -= 8;
    }
    while (v241);
    v240 = v269;
  }
  if (v271 != (_BYTE *)v240 && v240 != 0)
  {
    v269 = 0;
    LODWORD(v270) = 0;
    return (unsigned __int8 *)WTF::fastFree(v240, a2);
  }
  return result;
}

BOOL WebCore::Document::childTypeAllowed(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  _BOOL8 result;

  if ((a2 - 7) < 2)
    return 1;
  if (a2 != 1 && a2 != 10)
    return 0;
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 1;
  do
  {
    v3 = *(unsigned __int16 *)(v2 + 28) >> 12;
    result = v3 != a2;
    if (v3 == a2)
      break;
    v2 = *(_QWORD *)(v2 + 56);
  }
  while (v2);
  return result;
}

BOOL WebCore::Document::canAcceptChild(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  int canAcceptChild;
  int v16;
  BOOL v17;
  uint64_t v18;

  v4 = a3;
  if ((a4 & 1) == 0
    && *(_QWORD *)(a3 + 32) == a1
    && (*(unsigned __int16 *)(a2 + 28) ^ *(unsigned __int16 *)(a3 + 28)) < 0x1000)
  {
    return 1;
  }
  v6 = *(unsigned __int16 *)(a2 + 28) >> 12;
  if (v6 != 1)
  {
    result = 0;
    switch(v6)
    {
      case 2:
      case 3:
      case 4:
      case 9:
        return result;
      case 10:
        v10 = *(_QWORD *)(a1 + 80);
        if (!v10)
          goto LABEL_19;
        v11 = *(_QWORD *)(a1 + 80);
        do
        {
          if ((*(_WORD *)(v11 + 28) & 0xF000) == 0xA000)
          {
            v16 = *(_DWORD *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = v16 + 2;
            v17 = 1;
            if (v11 == a3 && (a4 & 1) == 0)
            {
              v17 = WebCore::Node::previousElementSibling(a3) != 0;
              v16 = *(_DWORD *)(v4 + 24) - 2;
              v11 = v4;
            }
            if (v16)
            {
              *(_DWORD *)(v11 + 24) = v16;
            }
            else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            return !v17;
          }
          v11 = *(_QWORD *)(v11 + 56);
        }
        while (v11);
LABEL_19:
        if ((a4 & 1) != 0 && !a3)
        {
          while (v10)
          {
            if ((*(_WORD *)(v10 + 28) & 8) != 0)
              return 0;
            v10 = *(_QWORD *)(v10 + 56);
          }
          return 1;
        }
        return !WebCore::Node::previousElementSibling(a3);
      case 11:
        v12 = *(_QWORD *)(a2 + 80);
        if (!v12)
          return 1;
        v13 = 0;
        *(_DWORD *)(v12 + 24) += 2;
        v18 = v12;
        break;
      default:
        return 1;
    }
    while (1)
    {
      v14 = *(_WORD *)(v12 + 28);
      if ((v14 & 8) != 0 && (v13 & 1) != 0)
      {
        v18 = 0;
        goto LABEL_44;
      }
      canAcceptChild = WebCore::Document::canAcceptChild(a1);
      v12 = v18;
      if (!canAcceptChild)
        break;
      v13 |= (v14 & 8) >> 3;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v18, *(_QWORD *)(v18 + 56));
      v12 = v18;
      if (!v18)
        return 1;
    }
    v18 = 0;
    if (!v12)
      return 0;
LABEL_44:
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
  {
    while ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      v8 = 0;
      v7 = *(_QWORD *)(v7 + 56);
      if (!v7)
        goto LABEL_5;
    }
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
LABEL_5:
  if ((a4 & 1) == 0)
  {
    if (!v8 || v8 == a3)
    {
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          break;
        result = 0;
        if ((*(_WORD *)(v4 + 28) & 0xF000) == 0xA000)
          return result;
      }
      return 1;
    }
    return 0;
  }
  if (v8)
    return 0;
  if (a3)
  {
    while ((*(_WORD *)(v4 + 28) & 0xF000) != 0xA000)
    {
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        return 1;
    }
    return 0;
  }
  return 1;
}

WTF::StringImpl *WebCore::Document::cloneNodeInternal@<X0>(WebCore::ContainerNode *a1@<X0>, int a2@<W2>, WebCore::ContainerNode **a3@<X8>)
{
  WTF::StringImpl *v6;
  WebCore::ContainerNode *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t IdentifierInternal;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  WTF::StringImpl *v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WebCore::HTMLMetaCharsetParser *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::ContainerNode *v51;
  char v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;

  (*(void (**)(WebCore::ContainerNode **__return_ptr))(*(_QWORD *)a1 + 728))(&v51);
  v7 = v51;
  v8 = (_DWORD *)*((_QWORD *)a1 + 106);
  if (v8)
    *v8 += 2;
  v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 106);
  *((_QWORD *)v7 + 106) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_OWORD *)((char *)a1 + 856);
  *(_OWORD *)((char *)v7 + 872) = *(_OWORD *)((char *)a1 + 872);
  *(_OWORD *)((char *)v7 + 856) = v10;
  v11 = (_DWORD *)*((_QWORD *)a1 + 111);
  if (v11)
    *v11 += 2;
  v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 111);
  *((_QWORD *)v7 + 111) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_OWORD *)a1 + 57);
  *((_OWORD *)v7 + 56) = *((_OWORD *)a1 + 56);
  *((_OWORD *)v7 + 57) = v13;
  v14 = *((unsigned int *)v7 + 292);
  v15 = *((unsigned int *)a1 + 292);
  if ((_DWORD)v14 == -1)
  {
    if ((_DWORD)v15 == -1)
      goto LABEL_16;
LABEL_15:
    v54 = (WebCore::ContainerNode *)((char *)v7 + 1128);
    ((void (*)(WTF::StringImpl **))off_1E33A3438[v15])(&v54);
    goto LABEL_16;
  }
  if ((_DWORD)v15 != -1)
    goto LABEL_15;
  ((void (*)(WTF::StringImpl **, char *))off_1E33A33A0[v14])(&v54, (char *)v7 + 1128);
  *((_DWORD *)v7 + 292) = -1;
LABEL_16:
  WebCore::Document::setCompatibilityMode((uint64_t)v7, (void *)*((unsigned __int8 *)a1 + 3384));
  v16 = *((_QWORD *)a1 + 88);
  v17 = (uint64_t)a1;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    v17 = (uint64_t)a1;
    if (v18)
      v17 = v18;
  }
  *(_DWORD *)(v17 + 24) += 2;
  v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v17);
  v21 = v19;
  if (v19)
  {
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 + 1, v19));
  }
  IdentifierInternal = *((_QWORD *)v7 + 88);
  *((_QWORD *)v7 + 88) = v21;
  if (IdentifierInternal)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)IdentifierInternal);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)IdentifierInternal));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)IdentifierInternal);
      v40 = *(unsigned int *)(IdentifierInternal + 28);
      if (!(_DWORD)v40)
        goto LABEL_72;
      goto LABEL_78;
    }
  }
  while (1)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v20);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    v26 = (WTF::StringImpl *)*((_QWORD *)a1 + 25);
    if (v26)
      goto LABEL_27;
    if (!*((_BYTE *)a1 + 280))
    {
      v26 = 0;
      goto LABEL_28;
    }
    v17 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v17 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v41 = IdentifierInternal;
    v42 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v42 != -1)
    {
      v54 = (WTF::StringImpl *)&v52;
      v53 = &v54;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) != 0)
      break;
    __break(1u);
LABEL_78:
    v50 = IdentifierInternal;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(IdentifierInternal + 16), (WTF::StringImpl *)(*(_QWORD *)(IdentifierInternal + 16) + 32 * v40));
    IdentifierInternal = v50;
LABEL_72:
    v47 = *(WTF **)(IdentifierInternal + 16);
    if (v47)
    {
      *(_QWORD *)(IdentifierInternal + 16) = 0;
      *(_DWORD *)(IdentifierInternal + 24) = 0;
      v49 = IdentifierInternal;
      WTF::fastFree(v47, v20);
      IdentifierInternal = v49;
    }
    WTF::fastFree((WTF *)IdentifierInternal, v20);
  }
  v43 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v17 + 8) = v41;
  *(_QWORD *)(v17 + 16) = v43;
  *(_DWORD *)(v17 + 32) = 1;
  v44 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v44 += 2;
  *(_QWORD *)(v17 + 40) = v44;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 54) = 0;
  *(_WORD *)(v17 + 62) = 1;
  v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v26 = 1;
  *((_QWORD *)v26 + 1) = v17;
  v46 = (uint64_t *)*((_QWORD *)a1 + 25);
  *((_QWORD *)a1 + 25) = v26;
  if (!v46)
    goto LABEL_27;
  if (*(_DWORD *)v46 != 1)
  {
    --*(_DWORD *)v46;
LABEL_27:
    ++*(_DWORD *)v26;
    goto LABEL_28;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v46 + 1, v45);
  WTF::fastFree((WTF *)v46, v48);
  v26 = (WTF::StringImpl *)*((_QWORD *)a1 + 25);
  if (v26)
    goto LABEL_27;
LABEL_28:
  v54 = v26;
  WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v7 + 192, (WTF::StringImpl *)&v54);
  v28 = v54;
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v54 + 1, v27);
      WTF::fastFree(v28, v34);
    }
    else
    {
      --*(_DWORD *)v54;
    }
  }
  WebCore::Document::contentType((uint64_t)a1, &v54);
  result = v54;
  if (v54)
    *(_DWORD *)v54 += 2;
  v31 = (WTF::StringImpl *)*((_QWORD *)v7 + 149);
  *((_QWORD *)v7 + 149) = result;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy(v31, v29);
      result = v54;
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  v32 = (_DWORD *)*((_QWORD *)a1 + 218);
  if (v32)
    ++*v32;
  v33 = *((_QWORD *)v7 + 218);
  *((_QWORD *)v7 + 218) = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      v35 = *(WTF **)(v33 + 72);
      if (v35)
      {
        *(_QWORD *)(v33 + 72) = 0;
        *(_DWORD *)(v33 + 80) = 0;
        WTF::fastFree(v35, v29);
      }
      v36 = *(WebCore::HTMLMetaCharsetParser **)(v33 + 48);
      *(_QWORD *)(v33 + 48) = 0;
      if (v36)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v36, v29);
        WTF::fastFree(v37, v38);
      }
      v39 = *(_QWORD *)(v33 + 40);
      *(_QWORD *)(v33 + 40) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v33, v29);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  if (a2 == 2)
    result = (WTF::StringImpl *)WebCore::ContainerNode::cloneChildNodes(a1, v51);
  *a3 = v51;
  return result;
}

uint64_t WebCore::Document::cloneDocumentWithoutChildren@<X0>(WebCore::Document *this@<X0>, unint64_t *a2@<X8>)
{
  __int16 v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t result;
  int v18;
  int v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22[6];

  v22[5] = *MEMORY[0x1E0C80C00];
  v3 = *((_WORD *)this + 1679);
  if ((v3 & 0x80) != 0)
  {
    v10 = *((_QWORD *)this + 85);
    v11 = (char *)this + 736;
    v12 = bmalloc::api::isoAllocate();
    v13 = v12;
    v14 = v12 + 192;
    if ((v3 & 2) != 0)
      v15 = 130;
    else
      v15 = 128;
    WebCore::XMLDocument::XMLDocument(v12, 0, v10, (uint64_t)v11, v15);
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_20:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v20[0] = v14;
    result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v13 + 416), v20, (uint64_t)v22);
    v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v19 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_27:
    *a2 = v13;
    return result;
  }
  v4 = *((_QWORD *)this + 85);
  v5 = (char *)this + 736;
  v6 = bmalloc::api::isoAllocate();
  memset(v22, 0, 24);
  v7 = WebCore::Document::Document(v6, 0, v4, (uint64_t)v5, 0, 0, v22);
  *a2 = v7;
  v8 = v7 + 192;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v21 = v8;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v6 + 416), &v21, (uint64_t)v20);
  v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v18 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  return result;
}

uint64_t WebCore::Document::styleSheets(WebCore::Document *this)
{
  uint64_t v1;
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  WebCore::StyleSheetList *v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 168);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v1 = 1;
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v3)
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
    }
    *(_QWORD *)(v1 + 8) = v3;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    v6 = (WebCore::StyleSheetList *)*((_QWORD *)this + 168);
    *((_QWORD *)this + 168) = v1;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::StyleSheetList::~StyleSheetList(v6, v4);
        WTF::fastFree(v8, v9);
        return *((_QWORD *)this + 168);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  return v1;
}

uint64_t WebCore::Document::setNeedsDOMWindowResizeEvent(WebCore::Document *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  int v4;

  v1 = *((_QWORD *)this + 249);
  if (!v1)
    goto LABEL_5;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  if (*(_BYTE *)(v1 + 130))
  {
    result = WebCore::FullscreenManager::addPendingScheduledResize(v1, 1);
    v4 = *(_DWORD *)(v1 + 8);
    if (v4)
    {
      *(_DWORD *)(v1 + 8) = v4 - 1;
      return result;
    }
  }
  else if (v2 != -1)
  {
    *(_DWORD *)(v1 + 8) = v2;
LABEL_5:
    *((_BYTE *)this + 3408) = 1;
    return (uint64_t)WebCore::Document::scheduleRenderingUpdate(this, 1);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t *std::unique_ptr<WebCore::Document::PendingScrollEventTargetList>::operator=[abi:sn180100](uint64_t *a1, WebCore::EventTarget *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (WTF *)WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *result;
  if (!*result)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*result;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*result;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *a2 = result;
  a2[1] = v3;
  a2[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  a2[3] = v6;
  a2[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    a2[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        a2[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *result;
  if (*result)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *a2 = result;
    a2[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *a2 = result;
    a2[1] = 0;
  }
  a2[2] = v3;
  a2[3] = v3;
  a2[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

_QWORD *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result[2];
  v2 = result[1] + 8;
  result[1] = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 8;
      result[1] = v2;
      if (v2 == v1)
      {
        v2 = v1;
        break;
      }
    }
  }
  v3 = result[3];
LABEL_6:
  while (v2 != v3 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v4 = v2 + 8;
    result[1] = v2 + 8;
    v2 = v1;
    if (v4 != v1)
    {
      v2 = v4;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v1)
        {
          v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*result + 8);
  return result;
}

uint64_t WebCore::Document::scheduleToAdjustValidationMessagePosition(WebCore::Document *this, WebCore::ValidationMessage *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  WTF *v9;
  void *v10;
  _BYTE v11[24];

  result = (uint64_t)WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>((uint64_t)this + 3248, (uint64_t *)a2, (uint64_t)v11);
  if ((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v4 = 0x200000;
  }
  else
  {
    result = WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
    v4 = 2097408;
  }
  v5 = *((_QWORD *)this + 66);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(WebCore::Page **)(v7 + 8);
        if (v8)
        {
          ++*(_DWORD *)v8;
          result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v8, v4);
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::Page::~Page(v8);
            return WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
      }
    }
  }
  return result;
}

WebCore::Page *WebCore::Document::addAudioProducer(WebCore::Document *this, WebCore::MediaProducer *a2)
{
  _BYTE v4[24];

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 2664, a2, (uint64_t)v4);
  return WebCore::Document::updateIsPlayingMedia(this);
}

WebCore::Page *WebCore::Document::setActiveSpeechRecognition(WebCore::Page *this, WebCore::SpeechRecognition *a2)
{
  WebCore::Page *v3;
  WebCore::SpeechRecognition *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = this;
  v4 = (WebCore::SpeechRecognition *)*((_QWORD *)this + 335);
  if (v4)
    v4 = (WebCore::SpeechRecognition *)*((_QWORD *)v4 + 1);
  if (v4 != a2)
  {
    if (a2)
    {
      v5 = *((_QWORD *)a2 + 2);
      if (v5)
        goto LABEL_22;
      v5 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 8) = a2;
      v6 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v5;
      if (!v6)
        goto LABEL_22;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
      v5 = *((_QWORD *)a2 + 2);
      if (v5)
      {
LABEL_22:
        do
          v9 = __ldaxr((unsigned int *)v5);
        while (__stlxr(v9 + 1, (unsigned int *)v5));
      }
    }
    else
    {
      v5 = 0;
    }
    v10 = (unsigned int *)*((_QWORD *)v3 + 335);
    *((_QWORD *)v3 + 335) = v5;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    return WebCore::Document::updateIsPlayingMedia(v3);
  }
  return this;
}

unsigned int *WebCore::Document::noteUserInteractionWithMediaElement(unsigned int *this, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!*((_BYTE *)this + 3420))
  {
    v2 = this;
    if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
    {
      v10 = *((_QWORD *)this + 66);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 120);
          if (v12)
          {
            for (i = *(_QWORD *)(v12 + 8); i; i = *(_QWORD *)(v16 + 8))
            {
              this = *(unsigned int **)(*(_QWORD *)(i + 40) + 8);
              v14 = *((_QWORD *)this + 66);
              if (!v14)
                break;
              v15 = *(_QWORD *)(v14 + 8);
              if (!v15)
                break;
              v16 = *(_QWORD *)(v15 + 120);
              if (!v16)
                break;
            }
          }
        }
      }
    }
    else
    {
      v3 = *((_QWORD *)this + 66);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
          if (v5 && *(_BYTE *)(v5 + 144) == 0)
          {
            v7 = *(unsigned int **)(v5 + 296);
            if (v7)
              this = v7;
          }
        }
      }
    }
    v8 = this[6];
    this[6] = v8 + 2;
    v9 = *((unsigned __int8 *)this + 3416);
    if (v8)
    {
      this[6] = v8;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    if (v9)
    {
      *((_BYTE *)v2 + 3420) = 1;
      return (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v2);
    }
  }
  return this;
}

uint64_t WebCore::Document::computeCaptureState(WebCore::Document *this)
{
  WebCore::MediaStreamTrack **v2;
  const WebCore::RealtimeMediaSource *v3;
  WebCore::MediaStreamTrack **v4;
  WebCore::MediaStreamTrack **v5;
  WebCore::MediaStreamTrack **v6;
  uint64_t v7;
  WebCore::MediaStreamTrack *v9;
  int v10;

  v2 = (WebCore::MediaStreamTrack **)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(this);
  v4 = v2;
  v5 = (WebCore::MediaStreamTrack **)v3;
  if (this)
    v6 = (WebCore::MediaStreamTrack **)((char *)this + 8 * *((unsigned int *)this - 1));
  else
    v6 = 0;
  if (v6 == v2)
    return 0;
  LODWORD(v7) = 0;
  do
  {
    v9 = *v4++;
    v10 = WebCore::MediaStreamTrack::captureState(v9, v3);
    while (v4 != v5)
    {
      if ((unint64_t)*v4 + 1 > 1)
        goto LABEL_12;
      ++v4;
    }
    v4 = v5;
LABEL_12:
    v7 = v10 | v7;
  }
  while (v4 != v6);
  return v7;
}

uint64_t WebCore::Document::mediaStreamCaptureStateChanged(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t IdentifierInternal;
  PAL::SleepDisablerCocoa *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int8x16_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v2 = this;
  if ((*(_DWORD *)(this + 3264) & 0x241000) == 0)
  {
    v12 = *(WTF **)(this + 3200);
    *(_QWORD *)(this + 3200) = 0;
    if (!v12)
      goto LABEL_32;
    {
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v12 + 1), *((_QWORD *)v12 + 3), *((_QWORD *)v12 + 4));
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v13 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v12;
    goto LABEL_31;
  }
  v3 = *(_QWORD *)(this + 528);
  v4 = 0uLL;
  if (v3 && (v5 = *(_QWORD *)(v3 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 24)) != 0)
  {
    v7 = *(int8x16_t **)(v6 + 8);
    v8 = 0uLL;
    if (v7)
    {
      v9 = v7[2];
      v10.i64[0] = -256;
      v10.i64[1] = -256;
      v8 = vandq_s8(v9, v10);
      v11.i64[0] = 255;
      v11.i64[1] = 255;
      v4 = vandq_s8(v9, v11);
    }
  }
  else
  {
    v8 = 0uLL;
  }
  v24 = vorrq_s8(v4, v8);
  v15 = WTF::fastMalloc((WTF *)0x28);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 1;
  *(int8x16_t *)(v15 + 24) = v24;
  {
    if (WebCore::sleepDisablerClient(void)::client)
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      *(_QWORD *)(v15 + 8) = IdentifierInternal;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                                              + 16))(WebCore::sleepDisablerClient(void)::client, IdentifierInternal, &v26, 1, v24.i64[0], v24.i64[1]);
      goto LABEL_21;
    }
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v17 = (PAL::SleepDisablerCocoa *)operator new();
  PAL::SleepDisablerCocoa::SleepDisablerCocoa(v17, (WTF::String *)&v26, 1);
  v18 = *(_QWORD *)v15;
  *(_QWORD *)v15 = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_21:
  this = (uint64_t)v26;
  v26 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  v19 = *(WTF **)(v2 + 3200);
  *(_QWORD *)(v2 + 3200) = v15;
  if (v19)
  {
    {
      if (WebCore::sleepDisablerClient(void)::client)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                                + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)v19 + 1), *((_QWORD *)v19 + 3), *((_QWORD *)v19 + 4));
    }
    else
    {
      WebCore::sleepDisablerClient(void)::client = 0;
    }
    v20 = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v14 = v19;
LABEL_31:
    this = WTF::fastFree(v14, a2);
  }
LABEL_32:
  if ((*(_DWORD *)(v2 + 3264) & 0x36C7800) != 0)
  {
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E33A3A70;
    v25 = (uint64_t)v21;
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E33A3658;
    *((_QWORD *)v22 + 1) = &v25;
    v26 = v22;
    WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(v2 + 1856), &v26);
    v23 = v26;
    v26 = 0;
    if (v23)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
    this = v25;
    v25 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

_QWORD *WebCore::Document::visibilityAdjustmentStateDidChange(WebCore::Document *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = (char *)this + 2664;
  WTF::WeakHashSet<WebCore::MediaProducer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 333, &v13);
  v3 = *((_QWORD *)this + 333);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v4 = (_QWORD *)(v3 + 8 * v5);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v8 = v2;
  v9 = v4;
  v10 = v4;
  v11 = v4;
  v12 = v3 + 8 * v5;
  result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v8);
  while (v14 != v9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*v14 + 8) + 8))(*(_QWORD *)(*v14 + 8));
    v7 = v14;
    do
      v14 = ++v7;
    while (v7 != v15 && (unint64_t)(*v7 + 1) <= 1);
    result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
    ++*(_DWORD *)(v13 + 8);
  }
  return result;
}

uint64_t *WebCore::Document::addCaptureSource(uint64_t *result, WebCore::Page **a2, uint64_t a3, WebCore::RealtimeMediaSource *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v9;
  WebCore::Page *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  _BYTE v19[24];

  v4 = result[66];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(WebCore::Document **)(v6 + 8);
        if (v7)
        {
          v9 = (uint64_t)result;
          ++*(_DWORD *)v7;
          WebCore::updateCaptureSourceToPageMutedState((WebCore *)result, v7, *a2, a4);
          v10 = *a2;
          v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v9);
          v12 = v11;
          if (v11)
          {
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 + 1, v11));
          }
          v14 = operator new(0x10uLL);
          *v14 = &off_1E33A3778;
          v14[1] = v12;
          v15 = (_QWORD *)*((_QWORD *)v10 + 4);
          *((_QWORD *)v10 + 4) = 0;
          if (v15 == (_QWORD *)((char *)v10 + 8))
          {
            v16 = 4;
            v15 = (_QWORD *)((char *)v10 + 8);
          }
          else
          {
            if (!v15)
              goto LABEL_12;
            v16 = 5;
          }
          (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_12:
          *((_QWORD *)v10 + 4) = v14;
          result = WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::add((uint64_t *)(v9 + 3224), (uint64_t *)a2, (uint64_t)v19);
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page(v7);
            return (uint64_t *)WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::updateCaptureSourceToPageMutedState(WebCore *this, WebCore::Document *a2, WebCore::Page *a3, WebCore::RealtimeMediaSource *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;

  result = (*(uint64_t (**)(WebCore::Page *))(*(_QWORD *)a3 + 208))(a3);
  if ((result - 4) < 2)
  {
    v14 = (*((unsigned __int8 *)a2 + 352) >> 3) & 1;
    return (*(uint64_t (**)(WebCore::Page *, uint64_t))(*(_QWORD *)a3 + 80))(a3, v14);
  }
  if ((_DWORD)result == 3)
  {
    if ((*((_BYTE *)a2 + 352) & 4) != 0)
      goto LABEL_40;
    v15 = *((_QWORD *)this + 66);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          v19 = v18 && *((_BYTE *)this + 3437) == 0;
          if (v19 && (*(_WORD *)(v18 + 658) & 4) != 0)
            goto LABEL_41;
        }
      }
    }
    v14 = (*(_QWORD *)(*((_QWORD *)this + 85) + 712) >> 21) & 1;
    return (*(uint64_t (**)(WebCore::Page *, uint64_t))(*(_QWORD *)a3 + 80))(a3, v14);
  }
  if ((_DWORD)result == 1)
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 85) + 712) & 0x80100000) == 0x80000000)
    {
      v8 = *((_QWORD *)this + 66);
      v13 = !v8
         || (v9 = *(_QWORD *)(v8 + 8)) == 0
         || (v10 = *(_QWORD *)(v9 + 24)) == 0
         || ((v11 = *(_QWORD *)(v10 + 8)) != 0 ? (v12 = *((_BYTE *)this + 3437) == 0) : (v12 = 0), !v12)
         || (*(_WORD *)(v11 + 658) & 4) == 0;
      (*(void (**)(WebCore::Page *, _BOOL8))(*(_QWORD *)a3 + 304))(a3, v13);
    }
    if ((*((_BYTE *)a2 + 352) & 2) == 0)
    {
      v20 = *((_QWORD *)this + 66);
      if (!v20
        || (v21 = *(_QWORD *)(v20 + 8)) == 0
        || (v22 = *(_QWORD *)(v21 + 24)) == 0
        || ((v23 = *(_QWORD *)(v22 + 8)) != 0 ? (v24 = *((_BYTE *)this + 3437) == 0) : (v24 = 0),
            !v24 || (*(_WORD *)(v23 + 658) & 4) == 0))
      {
        v14 = (*(_QWORD *)(*((_QWORD *)this + 85) + 712) >> 20) & 1;
        return (*(uint64_t (**)(WebCore::Page *, uint64_t))(*(_QWORD *)a3 + 80))(a3, v14);
      }
LABEL_41:
      v14 = 0;
      return (*(uint64_t (**)(WebCore::Page *, uint64_t))(*(_QWORD *)a3 + 80))(a3, v14);
    }
LABEL_40:
    v14 = 1;
    return (*(uint64_t (**)(WebCore::Page *, uint64_t))(*(_QWORD *)a3 + 80))(a3, v14);
  }
  return result;
}

WebCore::SubframeLoadingDisabler *WebCore::SubframeLoadingDisabler::SubframeLoadingDisabler(WebCore::SubframeLoadingDisabler *this, WebCore::ContainerNode *a2)
{
  _QWORD v4[3];
  int v5;

  *(_QWORD *)this = a2;
  if (a2)
  {
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
    }
    v5 = 0;
    WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, (uint64_t *)this, &v5, (uint64_t)v4);
    ++*(_DWORD *)(v4[0] + 8);
  }
  return this;
}

uint64_t WebCore::Document::setFocusedElement(WebCore::Document *this, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  const WebCore::Element *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  WebCore::Element *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Page *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  void (*v38)(void);
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Page *v45;
  BOOL v46;
  WebCore::Element *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  uint64_t v58;
  WebCore::Node *v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::AXObjectCache *v62;
  WebCore::AXObjectCache *v63;
  int v64;
  WebCore::Node *v65;

  v4 = a2;
  if (a2 && *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8) != this)
    return 1;
  v6 = *((_QWORD *)this + 156);
  if (v6 == a2)
    return 1;
  if (*((_BYTE *)this + 3362))
    return 0;
  *((_QWORD *)this + 156) = 0;
  if (!v6)
  {
LABEL_6:
    if (!v4
      || (*(_BYTE *)(v4 + 22) & 8) == 0
      || (WebCore::Element::setHasTentativeFocus(v4, 1),
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 552))(v4),
          WebCore::Element::setHasTentativeFocus(v4, 0),
          !v7))
    {
LABEL_65:
      if (!*((_QWORD *)this + 156))
        goto LABEL_67;
      if (!WebCore::Document::hasEverCreatedAnAXObjectCache)
        goto LABEL_67;
      v62 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(this);
      if (!v62)
        goto LABEL_67;
      v63 = v62;
      ++*((_DWORD *)v62 + 2);
      WebCore::AXObjectCache::onFocusChange(v62, (WebCore::Element *)v6, (WebCore::Element *)v4);
      v64 = *((_DWORD *)v63 + 2);
      if (v64)
      {
        *((_DWORD *)v63 + 2) = v64 - 1;
LABEL_67:
        v29 = *((_QWORD *)this + 66);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 24);
            if (v31)
            {
              v32 = *(WebCore::Page **)(v31 + 8);
              if (v32)
              {
                ++*(_DWORD *)v32;
                v33 = *((_QWORD *)v32 + 6);
                v34 = *((_QWORD *)this + 156);
                if (v34)
                {
                  *(_DWORD *)(v34 + 24) += 2;
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 16) + 64))(*(_QWORD *)(v33 + 16), v34);
                  if (*(_DWORD *)(v34 + 24) == 2)
                  {
                    if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v34);
                  }
                  else
                  {
                    *(_DWORD *)(v34 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v33 + 16) + 64))(*(_QWORD *)(v33 + 16), 0);
                }
                if (*(_DWORD *)v32 == 1)
                {
                  WebCore::Page::~Page(v32);
                  WTF::fastFree(v39, v40);
                }
                else
                {
                  --*(_DWORD *)v32;
                }
              }
            }
          }
        }
        v35 = 1;
        goto LABEL_77;
      }
LABEL_190:
      __break(0xC471u);
      JUMPOUT(0x19598B2A0);
    }
    if (*(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8) != this
      || WebCore::Node::isRootEditableElement((WebCore::Node *)v4)
      && !WebCore::acceptsEditingFocus((WebCore *)v4, v8))
    {
LABEL_82:
      v35 = 0;
      goto LABEL_77;
    }
    v9 = *(_DWORD *)(v4 + 24) + 2;
    *(_DWORD *)(v4 + 24) = v9;
    v10 = *((_QWORD *)this + 156);
    *((_QWORD *)this + 156) = v4;
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v11 = *((_QWORD *)this + 156);
      if (!v11)
      {
        v12 = 1;
        goto LABEL_17;
      }
      v9 = *(_DWORD *)(v11 + 24);
    }
    else
    {
      v11 = v4;
    }
    v12 = 0;
    *(_DWORD *)(v11 + 24) = v9 + 2;
LABEL_17:
    v13 = *((_QWORD *)this + 66);
    if (v13 && *(_QWORD *)(v13 + 8))
    {
      *((_BYTE *)this + 3381) = 0;
      if ((v12 & 1) != 0
        || (v14 = *(_WORD *)(v11 + 28), (v14 & 0x10) != 0)
        && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
        || (v14 & 0xF000) == 0x9000 && (*(_WORD *)(v11 + 3358) & 1) != 0)
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 151);
      }
      else
      {
        *(_DWORD *)(v11 + 24) += 2;
        v15 = *((_QWORD *)this + 151);
        *((_QWORD *)this + 151) = v11;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 536))(v11, 1, a3[4]);
    v16 = a3[3];
    if (v16 != 2)
      *((_BYTE *)this + 3366) = v16;
    v17 = (uint64_t *)*((_QWORD *)this + 198);
    if (v17)
    {
      v61 = *v17;
      if (v61)
      {
        if (*(_DWORD *)(v61 + 100))
        {
          *((_BYTE *)this + 3368) |= 2u;
          WebCore::Document::scheduleRenderingUpdate(this, 64);
        }
      }
    }
    if (*((_QWORD *)this + 156) != v11)
      goto LABEL_102;
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
    v65 = (WebCore::Node *)v6;
    (*(void (**)(uint64_t, WebCore::Node **, _BYTE *))(*(_QWORD *)v11 + 1000))(v11, &v65, a3);
    v18 = v65;
    v65 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    if (*((_QWORD *)this + 156) != v11)
      goto LABEL_102;
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
    v65 = (WebCore::Node *)v6;
    WebCore::Element::dispatchFocusInEventIfNeeded(v11, &v65);
    if (v65)
    {
      if (*((_DWORD *)v65 + 6) == 2)
      {
        if ((*((_WORD *)v65 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v65);
      }
      else
      {
        *((_DWORD *)v65 + 6) -= 2;
      }
    }
    if (*((_QWORD *)this + 156) != v11)
    {
LABEL_102:
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
        goto LABEL_82;
      }
      v35 = 0;
      *(_DWORD *)(v11 + 24) -= 2;
LABEL_77:
      if (!v6)
        return v35;
      goto LABEL_78;
    }
    if (WebCore::Node::isRootEditableElement((WebCore::Node *)v11))
    {
      v37 = (_QWORD *)WebCore::Document::editor(this);
      WebCore::Editor::didBeginEditing(v37);
    }
    v19 = *((_QWORD *)this + 66);
    if (!v19)
      goto LABEL_63;
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20 || !*(_QWORD *)(v20 + 288))
      goto LABEL_63;
    if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_60;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_190;
    v21 = (*(unsigned __int8 *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      v21 = 0;
    if (v21 != 1)
      goto LABEL_60;
    v22 = *(_DWORD **)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (!v22)
      goto LABEL_60;
    ++v22[2];
    WebCore::Document::updateLayout(this, 0, 0);
    v24 = WebCore::widgetForElement(v11, v23);
    v25 = (_DWORD *)v24;
    if (v24)
      ++*(_DWORD *)(v24 + 8);
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
    if (v25)
    {
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v25 + 40))(v25, 1);
      if (v25[2] == 1)
      {
        v38 = *(void (**)(void))(*(_QWORD *)v25 + 8);
LABEL_84:
        v38();
        goto LABEL_63;
      }
      --v25[2];
    }
    else
    {
      v26 = *((_QWORD *)this + 66);
      if (v26)
      {
        v20 = *(_QWORD *)(v26 + 8);
        if (v20)
        {
LABEL_60:
          v27 = *(_DWORD **)(v20 + 288);
          if (!v27)
            goto LABEL_63;
          v28 = v27[2];
          v27[2] = v28 + 1;
          if (v28)
          {
            v27[2] = v28;
            goto LABEL_63;
          }
          v38 = *(void (**)(void))(*(_QWORD *)v27 + 8);
          goto LABEL_84;
        }
      }
    }
LABEL_63:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_65;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 536))(v6, 0, 0);
  v41 = *((_QWORD *)this + 66);
  if (v41 && *(_QWORD *)(v41 + 8))
  {
    *((_BYTE *)this + 3381) = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 151);
  }
  WebCore::Document::scheduleContentRelevancyUpdate(this, 2);
  if (a3[2])
  {
    if ((*(_WORD *)(v6 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      *(_DWORD *)(v6 + 24) += 2;
      WebCore::HTMLInputElement::endEditing((WebCore::HTMLInputElement *)v6);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v42 = *((_QWORD *)this + 66);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 8);
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 24);
        if (v44)
        {
          v45 = *(WebCore::Page **)(v44 + 8);
          if (v45)
          {
            ++*(_DWORD *)v45;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v45 + 6) + 16) + 856))(*(_QWORD *)(*((_QWORD *)v45 + 6) + 16), v6);
            WTF::RefCounted<WebCore::Page>::deref(v45);
          }
        }
      }
    }
    v46 = 0;
    goto LABEL_119;
  }
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 848))(v6);
  if (v54)
    v55 = v6;
  else
    v55 = 0;
  if (v55)
  {
    *(_DWORD *)(v55 + 24) += 2;
    if (!v54)
    {
LABEL_146:
      if (*(_DWORD *)(v55 + 24) == 2)
      {
        if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v55);
      }
      else
      {
        *(_DWORD *)(v55 + 24) -= 2;
      }
      goto LABEL_148;
    }
LABEL_144:
    if ((*(_BYTE *)(v6 + 168) & 4) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1248))(v6);
    goto LABEL_146;
  }
  if ((v54 & 1) != 0)
    goto LABEL_144;
LABEL_148:
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v65 = (WebCore::Node *)v4;
  (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v6 + 1008))(v6, &v65);
  v56 = v65;
  v65 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  v57 = 0;
  v58 = *((_QWORD *)this + 156);
  if (v4 && !v58)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v57 = (WebCore::Node *)v4;
  }
  v65 = v57;
  WebCore::Element::dispatchFocusOutEventIfNeeded((WebCore::Node *)v6, (uint64_t *)&v65);
  v59 = v65;
  v65 = 0;
  if (v59)
  {
    if (*((_DWORD *)v59 + 6) == 2)
    {
      if ((*((_WORD *)v59 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v59);
    }
    else
    {
      *((_DWORD *)v59 + 6) -= 2;
    }
  }
  v60 = *((_QWORD *)this + 156);
  if (v60)
    v4 = 0;
  else
    v4 = (uint64_t)v57;
  v46 = (v58 | v60) != 0;
LABEL_119:
  if (WebCore::Node::isRootEditableElement((WebCore::Node *)v6))
  {
    v48 = (_QWORD *)WebCore::Document::editor(this);
    WebCore::Editor::didEndEditing(v48);
  }
  v49 = *((_QWORD *)this + 66);
  if (v49)
  {
    v50 = *(_QWORD *)(v49 + 8);
    if (v50)
    {
      v51 = *(_DWORD **)(v50 + 288);
      if (v51)
      {
        ++v51[2];
        v52 = (_DWORD *)WebCore::widgetForElement(v6, v47);
        if (v52)
        {
          v53 = v52;
          ++v52[2];
          (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v52 + 40))(v52, 0);
          if (v53[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
          else
            --v53[2];
        }
        if (v51[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
        else
          --v51[2];
      }
    }
  }
  if ((*(_WORD *)(v6 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v6 + 24) += 2;
    WebCore::HTMLInputElement::didBlur((WebCore::HTMLInputElement *)v6);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (!v46)
    goto LABEL_6;
  v35 = 0;
LABEL_78:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v35;
}

uint64_t *WebCore::Document::setFocusNavigationStartingNode(uint64_t *this, WebCore::Node *a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;

  v2 = this[66];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    *((_BYTE *)this + 3381) = 0;
    if (!a2)
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(this + 151);
    v3 = *((_WORD *)a2 + 14);
    if ((v3 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(this + 151);
    if ((v3 & 0xF000) == 0x9000 && (*((_WORD *)a2 + 1679) & 1) != 0)
    {
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(this + 151);
    }
    else
    {
      *((_DWORD *)a2 + 6) += 2;
      v4 = this[151];
      this[151] = (uint64_t)a2;
      if (v4)
      {
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

void WebCore::SubframeLoadingDisabler::~SubframeLoadingDisabler(WebCore::SubframeLoadingDisabler *this)
{
  if (*(_QWORD *)this)
  {
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
    }
    WTF::HashCountedSet<WebCore::ContainerNode *,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>>::remove(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, this);
  }
}

unsigned int *WebCore::Document::appendAutofocusCandidate(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t *v4;
  unint64_t *v6;
  unint64_t v7;

  v4 = (uint64_t *)((char *)this + 1216);
  WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::findIf<WebCore::Document::appendAutofocusCandidate(WebCore::Element&)::$_0>(&v6, (unint64_t *)this + 152, (uint64_t)a2);
  if (v7 != *((_QWORD *)this + 153))
    WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::remove(v4, v7);
  return WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::append<WebCore::Element&>((uint64_t)v4, (uint64_t)a2);
}

unint64_t **WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::findIf<WebCore::Document::appendAutofocusCandidate(WebCore::Element&)::$_0>(unint64_t **result, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(a2[2] + 8 * v3);
      if (v5)
        v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a3)
        break;
      v6 = *((unsigned int *)a2 + 6);
      v3 += v6 + 1;
      do
        v3 -= v6;
      while (v3 >= v6);
      if (v4 == v3)
      {
        v3 = a2[1];
        break;
      }
    }
  }
  *result = a2;
  result[1] = (unint64_t *)v3;
  return result;
}

unsigned int *WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::append<WebCore::Element&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::expandCapacityIfNeeded(a1);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (result)
  {
    do
      v7 = __ldaxr(result);
    while (__stlxr(v7 + 1, result));
  }
  *(_QWORD *)(v4 + 8 * v5) = result;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 == *(unsigned int *)(a1 + 24) - 1)
    v9 = 0;
  else
    v9 = v8 + 1;
  *(_QWORD *)(a1 + 8) = v9;
  return result;
}

WTF *WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::clear(uint64_t a1, void *a2)
{
  void *v3;
  WTF *result;

  WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::destroyAll((unint64_t *)a1, a2);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

uint64_t WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::removeFirst(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1 == a1[1])
  {
    __break(0xC471u);
    JUMPOUT(0x19598B6D0);
  }
  v4 = a1[2];
  result = *(_QWORD *)(v4 + 8 * v2);
  *(_QWORD *)(v4 + 8 * v2) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)result));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9)
      {
        v12 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
        result = v12;
      }
      v10 = *(WTF **)(result + 16);
      if (v10)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v11 = result;
        WTF::fastFree(v10, a2);
        result = v11;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  if (*a1 == *((unsigned int *)a1 + 6) - 1)
    v8 = 0;
  else
    v8 = *a1 + 1;
  *a1 = v8;
  return result;
}

uint64_t WebCore::Document::flushAutofocusCandidates(void)::$_0::operator()(WebCore::Document *a1, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 0;
  if (a1)
  {
    while (a1 != a2)
    {
      v4 = *((_QWORD *)a1 + 196);
      if (v4 && *(_QWORD *)(v4 + 8))
        return 1;
      a1 = (WebCore::Document *)WebCore::Document::parentDocument(a1);
      v2 = 0;
      if (!a1)
        return v2;
    }
  }
  return v2;
}

uint64_t WebCore::Document::hoveredElementDidDetach(uint64_t this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(WebCore::Element **)(this + 1256);
  if (v2)
    v3 = v2 == a2;
  else
    v3 = 0;
  if (v3)
  {
    v4 = this;
    this = *((_QWORD *)a2 + 4);
    if (this)
    {
      if ((*(_WORD *)(this + 28) & 8) != 0)
        *(_DWORD *)(this + 24) += 2;
      else
        this = 0;
    }
    *(_QWORD *)(v4 + 1256) = this;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
        this = *(_QWORD *)(v4 + 1256);
      }
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    if (this)
    {
      while ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v5 = *(_QWORD *)(this + 32);
        if (v5)
        {
          if ((*(_WORD *)(v5 + 28) & 8) != 0)
            *(_DWORD *)(v5 + 24) += 2;
          else
            v5 = 0;
        }
        *(_QWORD *)(v4 + 1256) = v5;
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)this);
            v5 = *(_QWORD *)(v4 + 1256);
          }
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
        this = v5;
        if (!v5)
          goto LABEL_25;
      }
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19598B938);
      }
    }
LABEL_25:
    v6 = *(_QWORD *)(v4 + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_QWORD *)(v7 + 640);
        if ((*(_QWORD *)(v10 + 56) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v10 + 56) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v11 = v10 + 24;
          *(_QWORD *)(v10 + 48) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v11, v12 + 0.0);
        }
        do
        {
          v13 = __ldaxr(v8);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v8));
        if (!v14)
        {
          atomic_store(1u, v8);
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v15 = off_1E31FE290;
          v15[1] = v8;
          v16 = (uint64_t)v15;
          WTF::ensureOnMainThread();
          this = v16;
          if (v16)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::elementInActiveChainDidDetach(uint64_t this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(WebCore::Element **)(this + 1264);
  if (v2)
    v3 = v2 == a2;
  else
    v3 = 0;
  if (v3)
  {
    v4 = this;
    this = *((_QWORD *)a2 + 4);
    if (this)
    {
      if ((*(_WORD *)(this + 28) & 8) != 0)
        *(_DWORD *)(this + 24) += 2;
      else
        this = 0;
    }
    *(_QWORD *)(v4 + 1264) = this;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
        this = *(_QWORD *)(v4 + 1264);
      }
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    if (this)
    {
      while ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v5 = *(_QWORD *)(this + 32);
        if (v5)
        {
          if ((*(_WORD *)(v5 + 28) & 8) != 0)
            *(_DWORD *)(v5 + 24) += 2;
          else
            v5 = 0;
        }
        *(_QWORD *)(v4 + 1264) = v5;
        if (*(_DWORD *)(this + 24) == 2)
        {
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)this);
            v5 = *(_QWORD *)(v4 + 1264);
          }
        }
        else
        {
          *(_DWORD *)(this + 24) -= 2;
        }
        this = v5;
        if (!v5)
          return this;
      }
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        this = 105;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::flushDeferredAXObjectCacheUpdate(uint64_t this)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(this + 3447))
  {
    *(_BYTE *)(this + 3447) = 0;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      this = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)this);
      if (this)
      {
        v1 = this;
        ++*(_DWORD *)(this + 8);
        this = (uint64_t)WebCore::AXObjectCache::performDeferredCacheUpdate((WebCore::Node *)this, 0);
        v2 = *(_DWORD *)(v1 + 8);
        if (v2)
        {
          *(_DWORD *)(v1 + 8) = v2 - 1;
        }
        else
        {
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::setFocusedElement(WebCore::Document *this, WebCore::Element *a2)
{
  int v3;
  __int16 v4;

  v4 = 0;
  v3 = 0;
  return WebCore::Document::setFocusedElement(this, (uint64_t)a2, &v3);
}

_QWORD *WebCore::Document::scheduleContentRelevancyUpdate(_QWORD *result, char a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)result[198];
  if (v2)
  {
    v3 = *v2;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 100))
      {
        *((_BYTE *)result + 3368) |= a2;
        return WebCore::Document::scheduleRenderingUpdate(result, 64);
      }
    }
  }
  return result;
}

uint64_t WebCore::widgetForElement(uint64_t this, WebCore::Element *a2)
{
  int v2;

  if (this)
  {
    if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) == 0)
      return 0;
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      this = 105;
      __break(0xC471u);
      return this;
    }
    v2 = (*(unsigned __int8 *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      v2 = 0;
    if (v2 != 1)
      return 0;
    return *(_QWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0xE8);
  }
  return this;
}

uint64_t WebCore::acceptsEditingFocus(WebCore *this, const WebCore::Element *a2)
{
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::Editor *v9;
  uint64_t shouldBeginEditing;
  _BYTE v12[32];

  v3 = WebCore::Node::rootEditableElement(this);
  v4 = (uint64_t)v3;
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (v3)
    {
      v9 = (WebCore::Editor *)WebCore::LocalFrame::editor(*(WebCore::LocalFrame **)(v6 + 296));
      WebCore::makeRangeSelectingNodeContents(v4, (uint64_t)v12);
      shouldBeginEditing = WebCore::Editor::shouldBeginEditing(v9, (const WebCore::SimpleRange *)v12);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)v12);
    }
    else
    {
      shouldBeginEditing = 0;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  else
  {
    shouldBeginEditing = 0;
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return shouldBeginEditing;
}

uint64_t WebCore::Document::focusNavigationStartingNode(uint64_t a1, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v2 = (int)a2;
  v4 = *(_QWORD *)(a1 + 1248);
  if (!v4)
    goto LABEL_26;
  v5 = *(_QWORD *)(a1 + 1208);
  if (!v5)
    return v4;
  v6 = *(_WORD *)(v4 + 28);
  if ((v6 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(v5 + 40) != v4 || (*(_WORD *)(v5 + 28) & 0xF000) == 0x9000 || (*(_BYTE *)(v5 + 22) & 8) == 0)
      return v4;
  }
  else
  {
    if ((v6 & 4) == 0
      || !*(_QWORD *)(v4 + 80)
      || ((*(unsigned __int8 *)(v5 + 22) ^ *(unsigned __int8 *)(v4 + 22)) & 8) != 0)
    {
      return v4;
    }
    do
      v5 = *(_QWORD *)(v5 + 32);
    while (v5 != v4 && v5 != 0);
    if (!v5)
      return v4;
  }
  if (!WebCore::Node::isRootEditableElement(*(WebCore::Node **)(a1 + 1248)))
    goto LABEL_26;
  v8 = *(_QWORD *)(a1 + 1208);
  if (!v8)
    goto LABEL_26;
  v4 = *(_QWORD *)(a1 + 1248);
  if (v4 == v8)
    return *(_QWORD *)(a1 + 1208);
  v9 = *(_WORD *)(v4 + 28);
  if ((v9 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(v8 + 40) == v4 && (*(_WORD *)(v8 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v8 + 22) & 8) != 0)
      return v4;
LABEL_26:
    v11 = *(_QWORD *)(a1 + 1208);
    if (!v11)
      return 0;
    v12 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v12 + 2;
    v13 = *(_WORD *)(v11 + 28);
    if (*(_BYTE *)(a1 + 3381))
    {
      if ((v13 & 4) != 0 && (v14 = *(_QWORD *)(v11 + 80)) != 0 || (v14 = *(_QWORD *)(v11 + 56)) != 0)
      {
LABEL_34:
        v12 = *(_DWORD *)(v14 + 24);
        *(_DWORD *)(v14 + 24) = v12 + 2;
        v16 = v11;
        v11 = v14;
      }
      else
      {
        v15 = v11;
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 32);
          if (!v15)
            break;
          v14 = *(_QWORD *)(v15 + 56);
          if (v14)
            goto LABEL_34;
        }
        v16 = 0;
      }
      if (v2 == 1)
      {
        v4 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL;
        if (v4)
        {
          if ((*(_WORD *)((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v26 = *(_QWORD *)(v4 + 88);
              if (!v26)
                break;
              v4 = *(_QWORD *)(v4 + 88);
            }
            while ((*(_WORD *)(v26 + 28) & 4) != 0);
          }
          goto LABEL_113;
        }
        v4 = *(_QWORD *)(v11 + 32);
        while (v4)
        {
LABEL_113:
          if ((*(_WORD *)(v4 + 28) & 8) != 0)
            break;
          if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v31 = *(_QWORD *)(v4 + 88);
                if (!v31)
                  break;
                v4 = *(_QWORD *)(v4 + 88);
              }
              while ((*(_WORD *)(v31 + 28) & 4) != 0);
            }
            else
            {
              v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 32);
          }
        }
      }
      else
      {
        v18 = *(_WORD *)(v11 + 28);
        v4 = v11;
        if ((v18 & 8) == 0)
        {
          if ((v18 & 4) != 0 && (v19 = *(_QWORD *)(v11 + 80)) != 0 || (v19 = *(_QWORD *)(v11 + 56)) != 0)
          {
LABEL_61:
            if ((*(_WORD *)(v19 + 28) & 8) != 0)
            {
              v4 = v19;
            }
            else
            {
              do
              {
                while (1)
                {
                  v4 = *(_QWORD *)(v19 + 56);
                  if (v4)
                    break;
                  v19 = *(_QWORD *)(v19 + 32);
                  if (!v19)
                    goto LABEL_88;
                }
                v19 = *(_QWORD *)(v19 + 56);
              }
              while ((*(_WORD *)(v4 + 28) & 8) == 0);
            }
          }
          else
          {
            v20 = v11;
            while (1)
            {
              v20 = *(_QWORD *)(v20 + 32);
              if (!v20)
                break;
              v19 = *(_QWORD *)(v20 + 56);
              if (v19)
                goto LABEL_61;
            }
LABEL_88:
            v4 = 0;
          }
        }
      }
      if (v12)
      {
        *(_DWORD *)(v11 + 24) = v12;
      }
      else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      goto LABEL_119;
    }
    if ((v13 & 8) != 0)
    {
      v4 = v11;
      goto LABEL_121;
    }
    if (v2 == 1)
    {
      v4 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v4)
      {
        v4 = *(_QWORD *)(v11 + 32);
        if (v4)
          goto LABEL_43;
        goto LABEL_81;
      }
      if ((*(_WORD *)((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v27 = *(_QWORD *)(v4 + 88);
          if (!v27)
            break;
          v4 = *(_QWORD *)(v4 + 88);
        }
        while ((*(_WORD *)(v27 + 28) & 4) != 0);
      }
LABEL_43:
      while ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v17 = *(_QWORD *)(v4 + 88);
              if (!v17)
                break;
              v4 = *(_QWORD *)(v4 + 88);
            }
            while ((*(_WORD *)(v17 + 28) & 4) != 0);
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 32);
        }
        if (!v4)
          goto LABEL_81;
      }
    }
    else
    {
      if ((v13 & 4) == 0 || (v4 = *(_QWORD *)(v11 + 80)) == 0)
      {
        v4 = *(_QWORD *)(v11 + 56);
        if (!v4)
        {
          v21 = v11;
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 32);
            if (!v21)
              break;
            v4 = *(_QWORD *)(v21 + 56);
            if (v4)
              goto LABEL_75;
          }
LABEL_81:
          if ((v13 & 0x80) != 0)
          {
            v28 = *(_QWORD *)(v11 + 200);
            if (!v28)
              goto LABEL_103;
            v23 = (uint64_t *)(v28 + 8);
          }
          else
          {
            v23 = (uint64_t *)(v11 + 32);
          }
          v24 = *v23;
          if (v24)
          {
            v25 = *(_WORD *)(v24 + 28);
            if ((v25 & 0x80) == 0)
            {
              if ((v25 & 8) != 0)
                v4 = v24;
              else
                v4 = 0;
LABEL_121:
              if (v12)
              {
                *(_DWORD *)(v11 + 24) = v12;
              }
              else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
              }
              return v4;
            }
            v29 = *(_QWORD *)(v24 + 200);
            if (v29)
            {
              v4 = *(_QWORD *)(v29 + 8);
              goto LABEL_121;
            }
          }
LABEL_103:
          v4 = 0;
          goto LABEL_121;
        }
      }
LABEL_75:
      if ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        do
        {
          while (1)
          {
            v22 = *(_QWORD *)(v4 + 56);
            if (v22)
              break;
            v4 = *(_QWORD *)(v4 + 32);
            if (!v4)
              goto LABEL_81;
          }
          v4 = *(_QWORD *)(v4 + 56);
        }
        while ((*(_WORD *)(v22 + 28) & 8) == 0);
        v16 = v11;
        v4 = v22;
        goto LABEL_119;
      }
    }
    v16 = v11;
LABEL_119:
    if (!v16)
      return v4;
    v12 = *(_DWORD *)(v16 + 24) - 2;
    v11 = v16;
    goto LABEL_121;
  }
  if ((v9 & 4) == 0
    || !*(_QWORD *)(v4 + 80)
    || ((*(unsigned __int8 *)(v8 + 22) ^ *(unsigned __int8 *)(v4 + 22)) & 8) != 0)
  {
    goto LABEL_26;
  }
  do
    v8 = *(_QWORD *)(v8 + 32);
  while (v8 != v4 && v8 != 0);
  if (!v8)
    goto LABEL_26;
  return v4;
}

uint64_t std::optional<WebCore::Style::PseudoClassChangeInvalidation>::~optional(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)a1)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 24));
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v3, a2);
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t *WebCore::Document::registerNodeListForInvalidation(WebCore::Document *this, WebCore::LiveNodeList *a2)
{
  char *v4;
  uint64_t *result;
  uint64_t v6;
  WebCore::LiveNodeList *v7;

  v4 = (char *)this + 4 * *((unsigned __int8 *)a2 + 32);
  ++*((_DWORD *)v4 + 442);
  result = (uint64_t *)(*(uint64_t (**)(WebCore::LiveNodeList *))(*(_QWORD *)a2 + 72))(a2);
  if ((_DWORD)result)
  {
    *((_BYTE *)a2 + 33) = 1;
    v7 = a2;
    return WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::add((uint64_t *)this + 219, (uint64_t *)&v7, (uint64_t)&v6);
  }
  return result;
}

uint64_t WebCore::Document::unregisterNodeListForInvalidation(uint64_t this, WebCore::LiveNodeList *a2)
{
  uint64_t v2;
  WebCore::LiveNodeList *v3;

  v2 = this + 4 * *((unsigned __int8 *)a2 + 32);
  --*(_DWORD *)(v2 + 1768);
  if (*((_BYTE *)a2 + 33))
  {
    *((_BYTE *)a2 + 33) = 0;
    v3 = a2;
    return WTF::HashSet<WebCore::LiveNodeList *,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove((uint64_t *)(this + 1752), &v3);
  }
  return this;
}

uint64_t WTF::HashSet<WebCore::LiveNodeList *,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == *a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v7) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v11 = *a1;
  if (*a1)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v13 = *a1;
  if (*a1)
  {
    v14 = 6 * *(_DWORD *)(v13 - 12);
    v15 = *(_DWORD *)(v13 - 4);
    if (v14 < v15 && v15 >= 9)
      WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::rehash(a1, v15 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::Document::registerCollection(uint64_t this, WebCore::HTMLCollection *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLCollection *v4;

  v2 = this + 4 * (((unint64_t)*(unsigned __int16 *)((char *)a2 + 21) >> 5) & 0xF);
  ++*(_DWORD *)(v2 + 1768);
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x200) != 0)
  {
    v4 = a2;
    return WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(this + 1760), (uint64_t *)&v4, (uint64_t)&v3);
  }
  return this;
}

uint64_t WebCore::Document::unregisterCollection(uint64_t this, WebCore::HTMLCollection *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  WebCore::HTMLCollection *v5;

  v2 = this + 4 * (((unint64_t)*(unsigned __int16 *)((char *)a2 + 21) >> 5) & 0xF);
  --*(_DWORD *)(v2 + 1768);
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x200) != 0)
  {
    v3 = (uint64_t *)(this + 1760);
    v5 = a2;
    v4 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(this + 1760), (uint64_t *)&v5);
    return WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v3, v4);
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[2];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[2];
    a2[2] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[2];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      LODWORD(v6) = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v10)
      goto LABEL_31;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = --v10;
        v13 = *(_QWORD *)(v6 + 8 * v10);
        if ((unint64_t)(v13 + 1) >= 2 && !*(_QWORD *)(v13 + 8))
          break;
        if (!(_DWORD)v10)
          goto LABEL_21;
      }
      *(_QWORD *)(v6 + 8 * v10) = 0;
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v21 = v10;
        v22 = v6;
        v20 = v11;
        v23 = v10;
        WTF::fastFree((WTF *)v13, a2);
        v6 = v22;
        v12 = v23;
        v10 = v21;
        v11 = v20;
      }
      *(_QWORD *)(v6 + 8 * v12) = -1;
      ++v11;
    }
    while (v12);
LABEL_21:
    v6 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v6 - 16) += v11;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v11;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v18 = *(_DWORD *)(v6 - 4);
    if (v18 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v18)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[2];
  if (v8 && *((_QWORD *)v8 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v8);
  else
    return 0;
}

WebCore::NodeIterator *WebCore::Document::moveNodeIteratorsToNewDocument(WebCore::Document *this, WebCore::Node *a2, WebCore::Document *a3)
{
  char *v5;
  WebCore::NodeIterator *result;
  _QWORD *v7;
  WTF *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  _BYTE v16[24];

  v5 = (char *)this + 1304;
  v14 = 0;
  v15 = 0;
  result = (WebCore::NodeIterator *)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>&&)#1},WTF::Vector<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v14, (_DWORD *)this + 326);
  v8 = v14;
  if (HIDWORD(v15))
  {
    v9 = (char *)a3 + 1304;
    v10 = 8 * HIDWORD(v15);
    do
    {
      v7 = *(_QWORD **)v8;
      if (*(WebCore::Node **)(*(_QWORD *)v8 + 24) == a2)
      {
        WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)v5, v7);
        result = (WebCore::NodeIterator *)WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)v9, *(_QWORD **)v8, (uint64_t)v16);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v10 -= 8;
    }
    while (v10);
    v8 = v14;
    if (HIDWORD(v15))
    {
      v11 = 8 * HIDWORD(v15);
      do
      {
        result = *(WebCore::NodeIterator **)v8;
        *(_QWORD *)v8 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
          {
            WebCore::NodeIterator::~NodeIterator(result);
            result = (WebCore::NodeIterator *)bmalloc::api::isoDeallocate(v12, v13);
          }
          else
          {
            --*((_DWORD *)result + 2);
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
        v11 -= 8;
      }
      while (v11);
      v8 = v14;
    }
  }
  if (v8)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WebCore::NodeIterator *)WTF::fastFree(v8, v7);
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::removeMarkers(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_DWORD *)(result + 16) & 0x37FFF) != 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      v5 = *(_DWORD *)(v3 - 8);
      result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
      for (i = 0; ; result = (i + v7))
      {
        v7 = result & v5;
        v8 = *(_QWORD *)(v3 + 16 * v7);
        if (v8 != -1)
        {
          if (!v8)
          {
            v9 = *(uint64_t **)(v2 + 8);
            if (v9)
            {
              v10 = *((unsigned int *)v9 - 1);
              v11 = &v9[2 * v10];
              goto LABEL_14;
            }
            v11 = 0;
            goto LABEL_13;
          }
          if (v8 == a2)
            break;
        }
        ++i;
      }
      v11 = (uint64_t *)(v3 + 16 * v7);
      v9 = *(uint64_t **)(v2 + 8);
      if (v9)
      {
        v10 = *((unsigned int *)v9 - 1);
        goto LABEL_14;
      }
LABEL_13:
      v10 = 0;
LABEL_14:
      v12 = (uint64_t)&v9[2 * v10];
      if (v9)
        v9 += 2 * *((unsigned int *)v9 - 1);
      if (v9 != v11)
      {
        v13 = 0;
        return WebCore::DocumentMarkerController::removeMarkersFromList(v2, v11, v12, 229375, &v13);
      }
    }
  }
  return result;
}

WebCore::NodeIterator **WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>::~Ref(WebCore::NodeIterator **a1)
{
  WebCore::NodeIterator *v2;
  bmalloc::api *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
    {
      WebCore::NodeIterator::~NodeIterator(v2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v2 + 2);
    }
  }
  return a1;
}

WTF *WebCore::Document::parentlessNodeMovedToNewDocument(WTF *this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WebCore::Range *v19;
  uint64_t v20;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];

  v24 = (WTF *)v26;
  v25 = 5;
  v3 = *((_QWORD *)this + 165);
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v3 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v6 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    v4 = v3 + 8 * v5;
    goto LABEL_3;
  }
  v4 = *((_QWORD *)this + 165);
  if ((_DWORD)v5)
  {
    v22 = 8 * v5;
    v4 = *((_QWORD *)this + 165);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 8;
      v22 -= 8;
      if (!v22)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3)
    v7 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      this = *(WTF **)(*(_QWORD *)v4 + 8);
      ++*((_DWORD *)this + 2);
      v23 = this;
      for (i = *((_QWORD *)this + 4); (WebCore::Node *)i != a2 && i != 0; i = *v10)
      {
        if ((*(_WORD *)(i + 28) & 0x80) != 0)
        {
          v11 = *(_QWORD *)(i + 200);
          if (!v11)
            goto LABEL_22;
          v10 = (uint64_t *)(v11 + 8);
        }
        else
        {
          v10 = (uint64_t *)(i + 32);
        }
      }
      if (i)
      {
        LODWORD(v12) = HIDWORD(v25);
        if (HIDWORD(v25) == (_DWORD)v25)
        {
          v13 = WTF::Vector<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v24, HIDWORD(v25) + 1, (unint64_t)&v23);
          v12 = HIDWORD(v25);
          v14 = v24;
          v15 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v14 + v12) = v15;
        }
        else
        {
          v23 = 0;
          *((_QWORD *)v24 + HIDWORD(v25)) = this;
        }
        HIDWORD(v25) = v12 + 1;
        this = v23;
      }
LABEL_22:
      v23 = 0;
      if (this)
      {
        if (*((_DWORD *)this + 2) == 1)
          this = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
        else
          --*((_DWORD *)this + 2);
      }
      v16 = v4 + 8;
      v4 = v6;
      if (v16 != v6)
      {
        v4 = v16;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v6)
          {
            v4 = v6;
            break;
          }
        }
      }
    }
    while (v4 != v7);
    v17 = v24;
    if (HIDWORD(v25))
    {
      v18 = 8 * HIDWORD(v25);
      do
      {
        v19 = *(WebCore::Range **)v17;
        v17 = (WTF *)((char *)v17 + 8);
        this = WebCore::Range::updateRangeForParentlessNodeMovedToNewDocument(v19, a2);
        v18 -= 8;
      }
      while (v18);
      v17 = v24;
      if (HIDWORD(v25))
      {
        v20 = 8 * HIDWORD(v25);
        do
        {
          this = *(WTF **)v17;
          *(_QWORD *)v17 = 0;
          if (this)
          {
            if (*((_DWORD *)this + 2) == 1)
              this = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
            else
              --*((_DWORD *)this + 2);
          }
          v17 = (WTF *)((char *)v17 + 8);
          v20 -= 8;
        }
        while (v20);
        v17 = v24;
      }
    }
    if (v26 != (_BYTE *)v17 && v17 != 0)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      return (WTF *)WTF::fastFree(v17, a2);
    }
  }
  return this;
}

uint64_t WebCore::Document::textInserted(WebCore::Document *this, WebCore::Node *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v8 = *((_QWORD *)this + 165);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_3:
    v11 = v8 + 8 * v10;
    goto LABEL_4;
  }
  v10 = *(unsigned int *)(v8 - 4);
  v11 = v8 + 8 * v10;
  if (!*(_DWORD *)(v8 - 12))
  {
    v9 = v8 + 8 * v10;
    goto LABEL_3;
  }
  v9 = *((_QWORD *)this + 165);
  if ((_DWORD)v10)
  {
    v17 = 8 * v10;
    v9 = *((_QWORD *)this + 165);
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 8;
      v17 -= 8;
      if (!v17)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_4:
  if (v8)
    v12 = v8 + 8 * *(unsigned int *)(v8 - 4);
  else
    v12 = 0;
  while (v9 != v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    v15 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)(v14 + 8) = v15 + 1;
    if (*(WebCore::Node **)(v14 + 32) == a2)
    {
      v18 = *(_DWORD *)(v14 + 40);
      if (v18 > a3)
        *(_DWORD *)(v14 + 40) = v18 + a4;
    }
    if (*(WebCore::Node **)(v14 + 56) == a2)
    {
      v19 = *(_DWORD *)(v14 + 64);
      if (v19 > a3)
        *(_DWORD *)(v14 + 64) = v19 + a4;
    }
    *(_BYTE *)(v14 + 81) = 1;
    if (v15)
      *(_DWORD *)(v14 + 8) = v15;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v16 = v9 + 8;
    v9 = v11;
    if (v16 != v11)
    {
      v9 = v16;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  result = *((_QWORD *)this + 187);
  if (result)
    return WebCore::DocumentMarkerController::shiftMarkers(result, a2, a3, a4);
  return result;
}

uint64_t WebCore::DocumentMarkerController::shiftMarkers(uint64_t this, WebCore::Node *a2, unsigned int a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v9;
  void *v10;
  int i;
  uint64_t v12;
  WebCore::Node *v13;
  uint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  _QWORD *v31;
  WTF *v32;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  _QWORD *v41;
  WTF *v42;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BYTE v50[20];
  __int128 v51;
  char v52;

  if ((*(_DWORD *)(this + 16) & 0x37FFF) == 0)
    return this;
  v4 = (_QWORD *)this;
  v5 = *(_QWORD *)(this + 8);
  if (!v5)
    return this;
  v9 = *(_DWORD *)(v5 - 8);
  this = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
  for (i = 0; ; this = (++i + v12))
  {
    v12 = this & v9;
    v13 = *(WebCore::Node **)(v5 + 16 * v12);
    if (v13 != (WebCore::Node *)-1)
    {
      if (!v13)
        return this;
      if (v13 == a2)
        break;
    }
  }
  v14 = *(uint64_t **)(v5 + 16 * v12 + 8);
  if (!v14)
    return this;
  v15 = *((_DWORD *)v14 + 3);
  if (!v15)
    return this;
  v16 = 0;
  v17 = 0;
  v18 = *((unsigned int *)v14 + 3);
  do
  {
    if (v16 >= v18)
    {
      __break(0xC471u);
      goto LABEL_75;
    }
    v19 = *v14;
    v20 = (_DWORD *)(*v14 + 160 * v16);
    v21 = v20[3];
    v22 = v20[4];
    v23 = v22 + a4;
    if (v21 >= a3)
    {
      v27 = *((_WORD *)a2 + 14);
      if ((v27 & 1) != 0)
      {
        v46 = *((_QWORD *)a2 + 10);
        if (!v46)
          goto LABEL_22;
        v38 = *(_DWORD *)(v46 + 4);
      }
      else
      {
        if ((v27 & 4) == 0 || (v28 = *((_QWORD *)a2 + 10)) == 0)
        {
LABEL_22:
          v29 = v19 + 160 * v16;
          v32 = *(WTF **)(v29 + 112);
          v31 = (_QWORD *)(v29 + 112);
          v30 = v32;
          if (v31 + 2 != (_QWORD *)v32 && v30 != 0)
          {
            *v31 = 0;
            *(_DWORD *)(v19 + 160 * v16 + 120) = 0;
            WTF::fastFree(v30, v10);
          }
          v34 = v20[24];
          if ((_DWORD)v34 != -1)
            ((void (*)(__int128 *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v34])(&v51, v20 + 8);
          v20[24] = -1;
          if (*(_QWORD *)v20)
          {
            *(_QWORD *)(*(_QWORD *)v20 + 8) = 0;
            v35 = *(unsigned int **)v20;
            *(_QWORD *)v20 = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = --v36 == 0;
              }
              while (__stlxr(v36, v35));
LABEL_46:
              if (v37)
              {
                atomic_store(1u, v35);
                WTF::fastFree((WTF *)v35, v10);
              }
            }
LABEL_50:
            this = (uint64_t)WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)(v20 + 40), (WTF *)(*v14 + 160 * *((unsigned int *)v14 + 3)), (unint64_t)v20);
            v15 = *((_DWORD *)v14 + 3) - 1;
            *((_DWORD *)v14 + 3) = v15;
            goto LABEL_65;
          }
LABEL_49:
          *(_QWORD *)v20 = 0;
          goto LABEL_50;
        }
        v38 = 0;
        do
        {
          ++v38;
          v28 = *(_QWORD *)(v28 + 56);
        }
        while (v28);
      }
      v47 = v21 + a4;
      if ((v47 & ~(v47 >> 31)) >= v38 || v23 <= 0)
        goto LABEL_22;
      v20[3] = v47;
      goto LABEL_63;
    }
    if (v22 > a3)
    {
      v23 &= ~(v23 >> 31);
      if (v23 > v21)
      {
        v24 = *((_WORD *)a2 + 14);
        if ((v24 & 1) != 0)
        {
          v26 = *((_QWORD *)a2 + 10);
          if (v26)
            LODWORD(v26) = *(_DWORD *)(v26 + 4);
        }
        else if ((v24 & 4) != 0 && (v25 = *((_QWORD *)a2 + 10)) != 0)
        {
          LODWORD(v26) = 0;
          do
          {
            LODWORD(v26) = v26 + 1;
            v25 = *(_QWORD *)(v25 + 56);
          }
          while (v25);
        }
        else
        {
          LODWORD(v26) = 0;
        }
        if (v26 < v23)
          v23 = v26;
LABEL_63:
        v20[4] = v23;
        v17 = 1;
        goto LABEL_64;
      }
      v39 = v19 + 160 * v16;
      v42 = *(WTF **)(v39 + 112);
      v41 = (_QWORD *)(v39 + 112);
      v40 = v42;
      if (v41 + 2 != (_QWORD *)v42 && v40 != 0)
      {
        *v41 = 0;
        *(_DWORD *)(v19 + 160 * v16 + 120) = 0;
        WTF::fastFree(v40, v10);
      }
      v44 = v20[24];
      if ((_DWORD)v44 != -1)
        ((void (*)(__int128 *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v44])(&v51, v20 + 8);
      v20[24] = -1;
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(*(_QWORD *)v20 + 8) = 0;
        v35 = *(unsigned int **)v20;
        *(_QWORD *)v20 = 0;
        if (v35)
        {
          do
          {
            v45 = __ldaxr(v35);
            v37 = --v45 == 0;
          }
          while (__stlxr(v45, v35));
          goto LABEL_46;
        }
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_64:
    ++v16;
LABEL_65:
    v18 = v15;
  }
  while (v16 != v15);
  if ((v17 & 1) != 0)
  {
    this = (uint64_t)WebCore::DocumentMarkerController::invalidateRectsForMarkersInNode(v4, a2);
    v48 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
    if (v48)
    {
      v49 = *(_DWORD *)(v48 + 16) + 1;
      *(_DWORD *)(v48 + 16) = v49;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v51) = 0;
        v52 = 0;
        v50[0] = 0;
        v50[16] = 0;
        this = WebCore::RenderObject::issueRepaint(v48, &v51, 0, 0, (uint64_t)v50);
        v49 = *(_DWORD *)(v48 + 16);
      }
      if (v49)
      {
        *(_DWORD *)(v48 + 16) = v49 - 1;
        return this;
      }
      __break(0xC471u);
LABEL_75:
      JUMPOUT(0x19598D148);
    }
  }
  return this;
}

uint64_t WebCore::Document::textRemoved(WebCore::Document *this, WebCore::Node *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v8 = *((_QWORD *)this + 165);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_3:
    v11 = v8 + 8 * v10;
    goto LABEL_4;
  }
  v10 = *(unsigned int *)(v8 - 4);
  v11 = v8 + 8 * v10;
  if (!*(_DWORD *)(v8 - 12))
  {
    v9 = v8 + 8 * v10;
    goto LABEL_3;
  }
  v9 = *((_QWORD *)this + 165);
  if ((_DWORD)v10)
  {
    v17 = 8 * v10;
    v9 = *((_QWORD *)this + 165);
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 8;
      v17 -= 8;
      if (!v17)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_4:
  if (v8)
    v12 = v8 + 8 * *(unsigned int *)(v8 - 4);
  else
    v12 = 0;
  while (v9 != v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    v15 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)(v14 + 8) = v15 + 1;
    if (*(WebCore::Node **)(v14 + 32) == a2)
    {
      v18 = *(_DWORD *)(v14 + 40);
      if (v18 > a3)
      {
        if (a4 + a3 >= v18)
          v19 = a3;
        else
          v19 = v18 - a4;
        *(_DWORD *)(v14 + 40) = v19;
      }
    }
    if (*(WebCore::Node **)(v14 + 56) == a2)
    {
      v20 = *(_DWORD *)(v14 + 64);
      if (v20 > a3)
      {
        if (a4 + a3 >= v20)
          v21 = a3;
        else
          v21 = v20 - a4;
        *(_DWORD *)(v14 + 64) = v21;
      }
    }
    *(_BYTE *)(v14 + 81) = 1;
    if (v15)
      *(_DWORD *)(v14 + 8) = v15;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v16 = v9 + 8;
    v9 = v11;
    if (v16 != v11)
    {
      v9 = v16;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  result = *((_QWORD *)this + 187);
  if (result)
  {
    v22 = 0;
    WebCore::DocumentMarkerController::removeMarkers(result, (uint64_t)a2, a3 | ((unint64_t)(a4 + a3) << 32), 229375, &v22, 0);
    return WebCore::DocumentMarkerController::shiftMarkers(*((_QWORD *)this + 187), a2, a4 + a3, -a4);
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::removeMarkers(uint64_t result, uint64_t a2, unint64_t a3, int a4, _QWORD *a5, char a6)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v14;
  void *v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  WTF *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __n128 v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  int v52;
  int j;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  uint64_t *v64;
  char v65;
  __int128 v66;
  unsigned int v67;
  _BYTE v68[64];
  int v69;
  WTF *v70;
  uint64_t v71;
  _BYTE v72[16];
  __int16 v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  _BYTE v79[64];
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  _BYTE v84[64];
  unsigned int v85;
  uint64_t v86;

  v6 = a3;
  v86 = *MEMORY[0x1E0C80C00];
  v7 = HIDWORD(a3);
  if (a3 < HIDWORD(a3))
  {
    v9 = result;
    if ((*(_DWORD *)(result + 16) & a4) != 0)
    {
      v10 = *(_QWORD *)(result + 8);
      v64 = (uint64_t *)(result + 8);
      if (v10)
      {
        v14 = *(_DWORD *)(v10 - 8);
        result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
        for (i = 0; ; result = (i + v17))
        {
          v17 = result & v14;
          v18 = *(_QWORD *)(v10 + 16 * v17);
          if (v18 != -1)
          {
            if (!v18)
              return result;
            if (v18 == a2)
              break;
          }
          ++i;
        }
        v19 = *(unsigned int **)(v10 + 16 * v17 + 8);
        if (v19)
        {
          if (v19[3])
          {
            v20 = *(_QWORD *)v19;
            if (*(_DWORD *)(*(_QWORD *)v19 + 12) >= v7)
              return result;
            v63 = 0;
            v21 = 0;
            v62 = a6;
            do
            {
              if (*(_DWORD *)(v20 + 16) > v6
                && (*(_DWORD *)(v20 + 8) & a4) != 0
                && (!*a5
                 || (result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v20),
                     (result & 1) != 0)))
              {
                v81 = 0;
                v22 = *(_DWORD *)(v20 + 16);
                v82 = *(_QWORD *)(v20 + 8);
                v83 = v22;
                v84[0] = 0;
                v85 = -1;
                v23 = *(unsigned int *)(v20 + 96);
                if ((_DWORD)v23 != -1)
                {
                  ((void (*)(__int128 *, _BYTE *, uint64_t))off_1E33A3518[v23])(&v66, v84, v20 + 32);
                  v85 = v23;
                }
                v24 = *(_QWORD *)v19;
                v25 = *(_QWORD *)v19 + 160 * v21;
                v26 = *(WTF **)(v25 + 112);
                if ((WTF *)(v25 + 128) != v26 && v26 != 0)
                {
                  *(_QWORD *)(v25 + 112) = 0;
                  *(_DWORD *)(v24 + 160 * v21 + 120) = 0;
                  WTF::fastFree(v26, v15);
                }
                v28 = *(unsigned int *)(v25 + 96);
                if ((_DWORD)v28 != -1)
                  ((void (*)(__int128 *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v28])(&v66, v25 + 32);
                *(_DWORD *)(v25 + 96) = -1;
                if (*(_QWORD *)v25)
                {
                  *(_QWORD *)(*(_QWORD *)v25 + 8) = 0;
                  v29 = *(unsigned int **)v25;
                  *(_QWORD *)v25 = 0;
                  if (v29)
                  {
                    do
                    {
                      v30 = __ldaxr(v29);
                      v31 = v30 - 1;
                    }
                    while (__stlxr(v31, v29));
                    if (!v31)
                    {
                      atomic_store(1u, v29);
                      WTF::fastFree((WTF *)v29, v15);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)v25 = 0;
                }
                WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)(v25 + 160), (WTF *)(*(_QWORD *)v19 + 160 * v19[3]--), v25);
                if ((v62 & 1) == 0)
                {
                  if (HIDWORD(v82) < v6)
                  {
                    v76 = 0;
                    v77 = v82;
                    v78 = v83;
                    v79[0] = 0;
                    v80 = -1;
                    v33 = v85;
                    if (v85 == -1)
                    {
                      v78 = v6;
                      *(_QWORD *)&v66 = 0;
                      *((_QWORD *)&v66 + 1) = v77;
                      v67 = v6;
                      v68[0] = 0;
                    }
                    else
                    {
                      ((void (*)(__int128 *, _BYTE *, _BYTE *))off_1E33A3518[v85])(&v66, v79, v84);
                      v80 = v33;
                      v78 = v6;
                      *(_QWORD *)&v66 = 0;
                      *((_QWORD *)&v66 + 1) = v77;
                      v67 = v6;
                      v68[0] = 0;
                      v69 = -1;
                      ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v33])(&v65, v68, v79);
                    }
                    v69 = v33;
                    v70 = (WTF *)v72;
                    v71 = 1;
                    v73 = 0;
                    v74 = 1065353216;
                    v75 = 0x7FF8000000000000;
                    v34 = WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)v19, v21, (unint64_t)&v66);
                    v35 = v70;
                    if (v72 != (_BYTE *)v70 && v70)
                    {
                      v70 = 0;
                      LODWORD(v71) = 0;
                      WTF::fastFree(v35, v15);
                    }
                    if (v69 != -1)
                      ((void (*)(char *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v69])(&v65, v68, v34);
                    v69 = -1;
                    v36 = (unsigned int *)v66;
                    if ((_QWORD)v66)
                    {
                      *(_QWORD *)(v66 + 8) = 0;
                      *(_QWORD *)&v66 = 0;
                      do
                      {
                        v37 = __ldaxr(v36);
                        v38 = v37 - 1;
                      }
                      while (__stlxr(v38, v36));
                      if (!v38)
                      {
                        atomic_store(1u, v36);
                        WTF::fastFree((WTF *)v36, v15);
                      }
                    }
                    if (v80 != -1)
                      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v80])(&v66, v79);
                    v80 = -1;
                    v39 = (unsigned int *)v76;
                    if (v76)
                    {
                      *(_QWORD *)(v76 + 8) = 0;
                      v76 = 0;
                      do
                      {
                        v40 = __ldaxr(v39);
                        v41 = v40 - 1;
                      }
                      while (__stlxr(v41, v39));
                      if (!v41)
                      {
                        atomic_store(1u, v39);
                        WTF::fastFree((WTF *)v39, v15);
                      }
                    }
                    ++v21;
                  }
                  if (v83 > v7)
                  {
                    HIDWORD(v82) = v7;
                    *(_QWORD *)&v66 = 0;
                    *((_QWORD *)&v66 + 1) = v82;
                    v67 = v83;
                    v68[0] = 0;
                    v69 = -1;
                    v42 = v85;
                    if (v85 != -1)
                    {
                      ((void (*)(uint64_t *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v85])(&v76, v68, v84);
                      v69 = v42;
                    }
                    v70 = (WTF *)v72;
                    v71 = 1;
                    v73 = 0;
                    v74 = 1065353216;
                    v75 = 0x7FF8000000000000;
                    v43 = WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)v19, v21, (unint64_t)&v66);
                    v44 = v70;
                    if (v72 != (_BYTE *)v70 && v70)
                    {
                      v70 = 0;
                      LODWORD(v71) = 0;
                      WTF::fastFree(v44, v15);
                    }
                    if (v69 != -1)
                      ((void (*)(uint64_t *, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v69])(&v76, v68, v43);
                    v69 = -1;
                    v45 = (unsigned int *)v66;
                    if ((_QWORD)v66)
                    {
                      *(_QWORD *)(v66 + 8) = 0;
                      *(_QWORD *)&v66 = 0;
                      do
                      {
                        v46 = __ldaxr(v45);
                        v47 = v46 - 1;
                      }
                      while (__stlxr(v47, v45));
                      if (!v47)
                      {
                        atomic_store(1u, v45);
                        WTF::fastFree((WTF *)v45, v15);
                      }
                    }
                    ++v21;
                  }
                }
                if (v85 != -1)
                  ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v85])(&v66, v84);
                v85 = -1;
                result = v81;
                if (v81)
                {
                  *(_QWORD *)(v81 + 8) = 0;
                  v81 = 0;
                  do
                  {
                    v48 = __ldaxr((unsigned int *)result);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, (unsigned int *)result));
                  if (!v49)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    result = WTF::fastFree((WTF *)result, v15);
                  }
                }
                v63 = 1;
              }
              else
              {
                ++v21;
              }
              v32 = v19[3];
              if (v21 >= v32)
                break;
              v20 = *(_QWORD *)v19 + 160 * v21;
            }
            while (*(_DWORD *)(v20 + 12) < v7);
            v50 = v63;
            if ((_DWORD)v32)
              goto LABEL_102;
          }
          else
          {
            v50 = 0;
          }
          v51 = *v64;
          if (*v64)
          {
            v52 = *(_DWORD *)(v51 - 8);
            result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
            for (j = 0; ; result = (j + v54))
            {
              v54 = result & v52;
              v55 = *(_QWORD *)(v51 + 16 * v54);
              if (v55 != -1)
              {
                if (!v55)
                {
                  v56 = *v64;
                  if (!*v64)
                    goto LABEL_101;
                  v57 = *(unsigned int *)(v56 - 4);
                  v58 = (uint64_t *)(v56 + 16 * v57);
                  goto LABEL_94;
                }
                if (v55 == a2)
                  break;
              }
              ++j;
            }
            v58 = (uint64_t *)(v51 + 16 * v54);
            v56 = *v64;
            if (!*v64)
            {
              v59 = 0;
              goto LABEL_97;
            }
            v57 = *(unsigned int *)(v56 - 4);
LABEL_94:
            v59 = (uint64_t *)(v56 + 16 * v57);
            if (v59 == v58)
              goto LABEL_100;
LABEL_97:
            if (v59 != v58)
            {
              result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::remove(v64, v58);
              v56 = *v64;
            }
            if (!v56)
              goto LABEL_101;
LABEL_100:
            if (*(_DWORD *)(v56 - 12))
              goto LABEL_102;
          }
LABEL_101:
          *(_DWORD *)(v9 + 16) = 0;
LABEL_102:
          if ((v50 & 1) != 0)
          {
            v60 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
            if (v60)
            {
              v61 = *(_DWORD *)(v60 + 16) + 1;
              *(_DWORD *)(v60 + 16) = v61;
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 24) + 8) + 40) + 8)
                                                                                         + 1944)
                                                                             + 24)
                                                                 + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v66) = 0;
                LOBYTE(v67) = 0;
                LOBYTE(v81) = 0;
                LOBYTE(v83) = 0;
                result = WebCore::RenderObject::issueRepaint(v60, &v66, 0, 0, (uint64_t)&v81);
                v61 = *(_DWORD *)(v60 + 16);
              }
              if (!v61)
              {
                __break(0xC471u);
                JUMPOUT(0x19598DB48);
              }
              *(_DWORD *)(v60 + 16) = v61 - 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::takeDOMWindowFrom(WebCore::Document *this, WebCore::Document *a2)
{
  WebCore::LocalDOMWindow *v3;
  _DWORD *v4;
  uint64_t result;

  v3 = (WebCore::LocalDOMWindow *)*((_QWORD *)a2 + 87);
  *((_QWORD *)a2 + 87) = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = v3;
  if (v4)
  {
    if (v4[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
      v3 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
    }
    else
    {
      --v4[6];
    }
  }
  if (!v3)
    return WebCore::LocalDOMWindow::didSecureTransitionTo(0, (WebCore::EventNames **)this);
  ++*((_DWORD *)v3 + 6);
  result = WebCore::LocalDOMWindow::didSecureTransitionTo(v3, (WebCore::EventNames **)this);
  if (*((_DWORD *)v3 + 6) == 1)
    return (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v3 + 72))(v3);
  --*((_DWORD *)v3 + 6);
  return result;
}

uint64_t WebCore::Document::windowProxy(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 66);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 112);
  else
    return 0;
}

uint64_t WebCore::Document::contextDocument(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 704);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return v2;
  }
  return this;
}

const WTF::AtomString *WebCore::Document::setAttributeEventListener(WebCore::Document *this, WTF::StringImpl **a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4, WebCore::DOMWrapperWorld *a5)
{
  const WTF::AtomString *result;
  const WTF::AtomString *v9;
  const WTF::AtomString *v10;

  WebCore::JSLazyEventListener::create(this, a3, a4, (uint64_t *)&v9);
  v10 = v9;
  WebCore::EventTarget::setAttributeEventListener(this, a2, &v10, (uint64_t)a5);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (const WTF::AtomString *)(*(uint64_t (**)(const WTF::AtomString *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

WebCore::LocalDOMWindow *WebCore::Document::setWindowAttributeEventListener(WebCore::Document *this, WTF::StringImpl **a2, const WebCore::QualifiedName *a3, const WTF::AtomString *a4, WebCore::DOMWrapperWorld *a5)
{
  WebCore::LocalDOMWindow *result;
  WebCore::JSLazyEventListener *v11;
  const WTF::AtomString *v12;
  const WTF::AtomString *v13;
  const WTF::AtomString *v14;
  const WTF::AtomString *v15;

  result = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
  if (result)
  {
    result = (WebCore::LocalDOMWindow *)WebCore::LocalDOMWindow::frame(result);
    if (result)
    {
      v11 = (WebCore::JSLazyEventListener *)*((_QWORD *)this + 87);
      if (v11)
        ++*((_DWORD *)v11 + 6);
      WebCore::JSLazyEventListener::create(v11, a3, a4, (uint64_t *)&v14);
      v12 = v14;
      v14 = 0;
      v15 = v12;
      WebCore::EventTarget::setAttributeEventListener(v11, a2, &v15, (uint64_t)a5);
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 4) == 1)
          (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 4);
      }
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (WebCore::LocalDOMWindow *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 4);
      }
      if (*((_DWORD *)v11 + 6) == 1)
        return (WebCore::LocalDOMWindow *)(*(uint64_t (**)(WebCore::JSLazyEventListener *))(*(_QWORD *)v11 + 72))(v11);
      else
        --*((_DWORD *)v11 + 6);
    }
  }
  return result;
}

uint64_t *WebCore::Document::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0::~$_0(uint64_t *a1)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::Document::queueTaskToDispatchEventOnWindow(WebCore::Document *a1, WTF::StringImpl *a2, uint64_t *a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v4 = (char)a2;
  v6 = WebCore::Document::eventLoop(a1, a2);
  *((_DWORD *)a1 + 6) += 2;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E33A3810;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v7;
  v10 = v8;
  WebCore::EventLoopTaskGroup::queueTask(v6, v4, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Document::enqueueOverflowEvent(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11[2];
  char v12;
  int v13;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x19598E040);
  }
  if ((*(_BYTE *)(v2 + 22) & 2) != 0)
    *(_DWORD *)(v2 + 24) += 2;
  else
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 88))(*(_QWORD *)(*(_QWORD *)a2 + 48));
  v5 = WebCore::Document::eventLoop(this, a2);
  if ((*(_BYTE *)(v2 + 22) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19598E074);
  }
  v6 = v5;
  *(_DWORD *)(v2 + 24) += 2;
  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v10 = v2;
  v13 = 0;
  WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v10, &v13, (uint64_t)v11);
  ++*(_DWORD *)(v11[0] + 8);
  if (v12)
    *(_QWORD *)(v2 + 16) |= 0x4000000000000uLL;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E33A3838;
  v8[1] = v2;
  v8[2] = v7;
  v11[0] = (uint64_t)v8;
  WebCore::EventLoopTaskGroup::queueTask(v6, 0, v11);
  result = v11[0];
  v11[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if ((*(_BYTE *)(v2 + 22) & 2) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

void WebCore::Document::createEvent(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void (**v15)(WebCore::CompositionEvent *__hidden);
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;

  v4 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_2;
  switch(*(_DWORD *)(v4 + 4))
  {
    case 5:
      v26 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v26 & 0xDF) != 0x45
          || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x56
          || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v27 = *(unsigned __int8 *)(v26 + 4);
      }
      else
      {
        if ((*(_WORD *)v26 & 0xFFDF) != 0x45
          || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x56
          || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v27 = *(unsigned __int16 *)(v26 + 8);
      }
      if ((v27 & 0xFFFFFFDF) == 0x54)
        goto LABEL_119;
      goto LABEL_2;
    case 6:
      v32 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v32 & 0xDF) != 0x45
          || (*(_BYTE *)(v32 + 1) & 0xDF) != 0x56
          || (*(_BYTE *)(v32 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v32 + 3) & 0xDF) != 0x4E
          || (*(_BYTE *)(v32 + 4) & 0xDF) != 0x54)
        {
          goto LABEL_2;
        }
        v33 = *(unsigned __int8 *)(v32 + 5);
      }
      else
      {
        if ((*(_WORD *)v32 & 0xFFDF) != 0x45
          || (*(_WORD *)(v32 + 2) & 0xFFDF) != 0x56
          || (*(_WORD *)(v32 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v32 + 6) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v32 + 8) & 0xFFDF) != 0x54)
        {
          goto LABEL_2;
        }
        v33 = *(unsigned __int16 *)(v32 + 10);
      }
      if ((v33 & 0xFFFFFFDF) == 0x53)
        goto LABEL_119;
      goto LABEL_2;
    case 7:
      v76 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v76 & 0xDF) != 0x55
          || (*(_BYTE *)(v76 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v76 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v76 + 3) & 0xDF) != 0x56
          || (*(_BYTE *)(v76 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v76 + 5) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v77 = *(unsigned __int8 *)(v76 + 6);
      }
      else
      {
        if ((*(_WORD *)v76 & 0xFFDF) != 0x55
          || (*(_WORD *)(v76 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v76 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v76 + 6) & 0xFFDF) != 0x56
          || (*(_WORD *)(v76 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v76 + 10) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v77 = *(unsigned __int16 *)(v76 + 12);
      }
      if ((v77 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      goto LABEL_509;
    case 8:
      v74 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v74 & 0xDF) != 0x55
          || (*(_BYTE *)(v74 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v74 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v74 + 3) & 0xDF) != 0x56
          || (*(_BYTE *)(v74 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v74 + 5) & 0xDF) != 0x4E
          || (*(_BYTE *)(v74 + 6) & 0xDF) != 0x54)
        {
          goto LABEL_2;
        }
        v75 = *(unsigned __int8 *)(v74 + 7);
      }
      else
      {
        if ((*(_WORD *)v74 & 0xFFDF) != 0x55
          || (*(_WORD *)(v74 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v74 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v74 + 6) & 0xFFDF) != 0x56
          || (*(_WORD *)(v74 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v74 + 10) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v74 + 12) & 0xFFDF) != 0x54)
        {
          goto LABEL_2;
        }
        v75 = *(unsigned __int16 *)(v74 + 14);
      }
      if ((v75 & 0xFFFFFFDF) != 0x53)
        goto LABEL_2;
LABEL_509:
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v5 = 0;
      v78 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x2F8000;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v78;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v79;
      *(_QWORD *)v8 = off_1E33A8B00;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_DWORD *)(v8 + 80) = 0;
      goto LABEL_219;
    case 9:
      v22 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v23 = *(_BYTE *)v22 & 0xDF;
        if (v23 == 68)
        {
          if ((*(_BYTE *)(v22 + 1) & 0xDF) == 0x52
            && (*(_BYTE *)(v22 + 2) & 0xDF) == 0x41
            && (*(_BYTE *)(v22 + 3) & 0xDF) == 0x47
            && (*(_BYTE *)(v22 + 4) & 0xDF) == 0x45
            && (*(_BYTE *)(v22 + 5) & 0xDF) == 0x56
            && (*(_BYTE *)(v22 + 6) & 0xDF) == 0x45
            && (*(_BYTE *)(v22 + 7) & 0xDF) == 0x4E
            && (*(_BYTE *)(v22 + 8) & 0xDF) == 0x54)
          {
LABEL_70:
            v8 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
            v5 = 0;
            v24 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) - 458752;
            *(_DWORD *)(v8 + 16) = 1;
            *(_DWORD *)(v8 + 20) = v24;
            *(_OWORD *)(v8 + 24) = 0u;
            *(_OWORD *)(v8 + 40) = 0u;
            *(_QWORD *)(v8 + 56) = v25;
            *(_QWORD *)(v8 + 64) = 0;
            *(_QWORD *)(v8 + 72) = 0;
            *(_QWORD *)(v8 + 77) = 0;
            *(_QWORD *)(v8 + 168) = 0;
            *(_QWORD *)(v8 + 176) = 0;
            *(_OWORD *)(v8 + 88) = 0u;
            *(_OWORD *)(v8 + 104) = 0u;
            *(_OWORD *)(v8 + 120) = 0u;
            *(_OWORD *)(v8 + 136) = 0u;
            *(_OWORD *)(v8 + 152) = 0u;
            *(_QWORD *)v8 = off_1E33A3FA0;
            *(_QWORD *)(v8 + 8) = 0;
            goto LABEL_219;
          }
          goto LABEL_172;
        }
        if (v23 != 83
          || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x56
          || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x47
          || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x56
          || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x4E
          || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v22 + 8) & 0xDF) != 0x53)
        {
LABEL_172:
          if (v23 != 84
            || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x58
            || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x56
            || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v45 = *(unsigned __int8 *)(v22 + 8);
          goto LABEL_181;
        }
LABEL_119:
        WebCore::Event::createForBindings((uint64_t *)a2);
        v5 = 0;
        goto LABEL_3;
      }
      v53 = *(_WORD *)v22 & 0xFFDF;
      if (v53 == 68)
      {
        if ((*(_WORD *)(v22 + 2) & 0xFFDF) == 0x52
          && (*(_WORD *)(v22 + 4) & 0xFFDF) == 0x41
          && (*(_WORD *)(v22 + 6) & 0xFFDF) == 0x47
          && (*(_WORD *)(v22 + 8) & 0xFFDF) == 0x45
          && (*(_WORD *)(v22 + 10) & 0xFFDF) == 0x56
          && (*(_WORD *)(v22 + 12) & 0xFFDF) == 0x45
          && (*(_WORD *)(v22 + 14) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v22 + 16) & 0xFFDF) == 0x54)
        {
          goto LABEL_70;
        }
      }
      else if (v53 == 83
             && (*(_WORD *)(v22 + 2) & 0xFFDF) == 0x56
             && (*(_WORD *)(v22 + 4) & 0xFFDF) == 0x47
             && (*(_WORD *)(v22 + 6) & 0xFFDF) == 0x45
             && (*(_WORD *)(v22 + 8) & 0xFFDF) == 0x56
             && (*(_WORD *)(v22 + 10) & 0xFFDF) == 0x45
             && (*(_WORD *)(v22 + 12) & 0xFFDF) == 0x4E
             && (*(_WORD *)(v22 + 14) & 0xFFDF) == 0x54
             && (*(_WORD *)(v22 + 16) & 0xFFDF) == 0x53)
      {
        goto LABEL_119;
      }
      if ((*(_WORD *)v22 & 0xFFDF) != 0x54
        || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0x56
        || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x45
        || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x4E)
      {
        goto LABEL_2;
      }
      v45 = *(unsigned __int16 *)(v22 + 16);
LABEL_181:
      if ((v45 & 0xFFFFFFDF) == 0x54)
      {
        v8 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
        v5 = 0;
        v46 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x2E8000;
        *(_DWORD *)(v8 + 16) = 1;
        *(_DWORD *)(v8 + 20) = v46;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_QWORD *)(v8 + 56) = v47;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 80) = 0;
        *(_QWORD *)v8 = off_1E33A8558;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 112) = 0;
        *(_QWORD *)(v8 + 120) = 0;
        *(_QWORD *)(v8 + 88) = 0;
        *(_QWORD *)(v8 + 96) = 0;
        *(_DWORD *)(v8 + 103) = 0;
        goto LABEL_219;
      }
LABEL_2:
      *(_BYTE *)a2 = 6;
      *(_QWORD *)(a2 + 8) = 0;
      v5 = 1;
LABEL_3:
      *(_DWORD *)(a2 + 16) = v5;
      return;
    case 0xA:
      v34 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v35 = *(_BYTE *)v34 & 0xDF;
        if (v35 == 72)
        {
          if ((*(_BYTE *)(v34 + 1) & 0xDF) == 0x54
            && (*(_BYTE *)(v34 + 2) & 0xDF) == 0x4D
            && (*(_BYTE *)(v34 + 3) & 0xDF) == 0x4C
            && (*(_BYTE *)(v34 + 4) & 0xDF) == 0x45
            && (*(_BYTE *)(v34 + 5) & 0xDF) == 0x56
            && (*(_BYTE *)(v34 + 6) & 0xDF) == 0x45
            && (*(_BYTE *)(v34 + 7) & 0xDF) == 0x4E
            && (*(_BYTE *)(v34 + 8) & 0xDF) == 0x54
            && (*(_BYTE *)(v34 + 9) & 0xDF) == 0x53)
          {
            goto LABEL_119;
          }
LABEL_186:
          if (v35 != 77
            || (*(_BYTE *)(v34 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(v34 + 2) & 0xDF) != 0x55
            || (*(_BYTE *)(v34 + 3) & 0xDF) != 0x53
            || (*(_BYTE *)(v34 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v34 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(v34 + 6) & 0xDF) != 0x56
            || (*(_BYTE *)(v34 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v34 + 8) & 0xDF) != 0x4E
            || (*(_BYTE *)(v34 + 9) & 0xDF) != 0x54)
          {
LABEL_196:
            if (v35 == 84
              && (*(_BYTE *)(v34 + 1) & 0xDF) == 0x4F
              && (*(_BYTE *)(v34 + 2) & 0xDF) == 0x55
              && (*(_BYTE *)(v34 + 3) & 0xDF) == 0x43
              && (*(_BYTE *)(v34 + 4) & 0xDF) == 0x48
              && (*(_BYTE *)(v34 + 5) & 0xDF) == 0x45
              && (*(_BYTE *)(v34 + 6) & 0xDF) == 0x56
              && (*(_BYTE *)(v34 + 7) & 0xDF) == 0x45
              && (*(_BYTE *)(v34 + 8) & 0xDF) == 0x4E
              && (*(_BYTE *)(v34 + 9) & 0xDF) == 0x54)
            {
LABEL_206:
              v8 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
              v5 = 0;
              v48 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) - 1441792;
              *(_DWORD *)(v8 + 16) = 1;
              *(_DWORD *)(v8 + 20) = v48;
              *(_OWORD *)(v8 + 24) = 0u;
              *(_OWORD *)(v8 + 40) = 0u;
              *(_QWORD *)(v8 + 56) = v49;
              *(_OWORD *)(v8 + 88) = 0u;
              *(_OWORD *)(v8 + 104) = 0u;
              *(_OWORD *)(v8 + 120) = 0u;
              *(_OWORD *)(v8 + 136) = 0u;
              *(_WORD *)(v8 + 152) = 0;
              *(_QWORD *)(v8 + 64) = 0;
              *(_QWORD *)(v8 + 72) = 0;
              *(_QWORD *)(v8 + 77) = 0;
              *(_QWORD *)v8 = off_1E33A8D78;
              *(_QWORD *)(v8 + 8) = 0;
              *(_OWORD *)(v8 + 160) = 0u;
              *(_OWORD *)(v8 + 176) = 0u;
              *(_QWORD *)(v8 + 192) = 1065353216;
              goto LABEL_219;
            }
            if (v35 != 87
              || (*(_BYTE *)(v34 + 1) & 0xDF) != 0x48
              || (*(_BYTE *)(v34 + 2) & 0xDF) != 0x45
              || (*(_BYTE *)(v34 + 3) & 0xDF) != 0x45
              || (*(_BYTE *)(v34 + 4) & 0xDF) != 0x4C
              || (*(_BYTE *)(v34 + 5) & 0xDF) != 0x45
              || (*(_BYTE *)(v34 + 6) & 0xDF) != 0x56
              || (*(_BYTE *)(v34 + 7) & 0xDF) != 0x45
              || (*(_BYTE *)(v34 + 8) & 0xDF) != 0x4E)
            {
              goto LABEL_2;
            }
            v50 = *(unsigned __int8 *)(v34 + 9);
LABEL_217:
            if ((v50 & 0xFFFFFFDF) == 0x54)
            {
              v8 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
              v5 = 0;
              v51 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x300000;
              *(_DWORD *)(v8 + 16) = 1;
              *(_DWORD *)(v8 + 20) = v51;
              *(_QWORD *)v8 = off_1E33A8E68;
              *(_QWORD *)(v8 + 8) = 0;
              *(_OWORD *)(v8 + 24) = 0u;
              *(_OWORD *)(v8 + 40) = 0u;
              *(_QWORD *)(v8 + 56) = v52;
              *(_QWORD *)(v8 + 64) = 0;
              *(_QWORD *)(v8 + 72) = 0;
              *(_QWORD *)(v8 + 77) = 0;
              *(_OWORD *)(v8 + 88) = 0u;
              *(_OWORD *)(v8 + 104) = 0u;
              *(_OWORD *)(v8 + 120) = 0u;
              *(_OWORD *)(v8 + 136) = 0u;
              *(_OWORD *)(v8 + 152) = 0u;
              *(_QWORD *)(v8 + 168) = 0;
              *(_BYTE *)(v8 + 224) = 0;
              *(_BYTE *)(v8 + 352) = 0;
              *(_DWORD *)(v8 + 208) = 0;
              *(_OWORD *)(v8 + 176) = 0u;
              *(_OWORD *)(v8 + 192) = 0u;
              goto LABEL_219;
            }
            goto LABEL_2;
          }
LABEL_132:
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v5 = 0;
          v37 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x260000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v37;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v38;
          *(_OWORD *)(v8 + 88) = 0u;
          *(_OWORD *)(v8 + 104) = 0u;
          *(_OWORD *)(v8 + 120) = 0u;
          *(_OWORD *)(v8 + 136) = 0u;
          *(_WORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 77) = 0;
          *(_QWORD *)v8 = off_1E33A5C38;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 168) = 0;
          *(_QWORD *)(v8 + 154) = 0;
          *(_QWORD *)(v8 + 162) = 0;
LABEL_219:
          *(_QWORD *)a2 = v8;
          goto LABEL_3;
        }
        if ((*(_BYTE *)v34 & 0xDFu) > 0x4C)
          goto LABEL_186;
        if (v35 != 70)
          goto LABEL_2;
        if ((*(_BYTE *)(v34 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v34 + 2) & 0xDF) != 0x43
          || (*(_BYTE *)(v34 + 3) & 0xDF) != 0x55
          || (*(_BYTE *)(v34 + 4) & 0xDF) != 0x53
          || (*(_BYTE *)(v34 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v34 + 6) & 0xDF) != 0x56
          || (*(_BYTE *)(v34 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v34 + 8) & 0xDF) != 0x4E
          || (*(_BYTE *)(v34 + 9) & 0xDF) != 0x54)
        {
          goto LABEL_196;
        }
LABEL_161:
        v8 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
        v5 = 0;
        v43 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x210000;
        *(_DWORD *)(v8 + 16) = 1;
        *(_DWORD *)(v8 + 20) = v43;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_QWORD *)(v8 + 56) = v44;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 80) = 0;
        v15 = off_1E33A4D68;
        goto LABEL_162;
      }
      if ((*(_WORD *)v34 & 0xFFDF) == 0x48
        && (*(_WORD *)(v34 + 2) & 0xFFDF) == 0x54
        && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x4D
        && (*(_WORD *)(v34 + 6) & 0xFFDF) == 0x4C
        && (*(_WORD *)(v34 + 8) & 0xFFDF) == 0x45
        && (*(_WORD *)(v34 + 10) & 0xFFDF) == 0x56
        && (*(_WORD *)(v34 + 12) & 0xFFDF) == 0x45
        && (*(_WORD *)(v34 + 14) & 0xFFDF) == 0x4E
        && (*(_WORD *)(v34 + 16) & 0xFFDF) == 0x54
        && (*(_WORD *)(v34 + 18) & 0xFFDF) == 0x53)
      {
        goto LABEL_119;
      }
      v54 = *(_WORD *)v34 & 0xFFDF;
      if (v54 == 70)
      {
        if ((*(_WORD *)(v34 + 2) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x43
          && (*(_WORD *)(v34 + 6) & 0xFFDF) == 0x55
          && (*(_WORD *)(v34 + 8) & 0xFFDF) == 0x53
          && (*(_WORD *)(v34 + 10) & 0xFFDF) == 0x45
          && (*(_WORD *)(v34 + 12) & 0xFFDF) == 0x56
          && (*(_WORD *)(v34 + 14) & 0xFFDF) == 0x45
          && (*(_WORD *)(v34 + 16) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v34 + 18) & 0xFFDF) == 0x54)
        {
          goto LABEL_161;
        }
      }
      else if (v54 == 77
             && (*(_WORD *)(v34 + 2) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x55
             && (*(_WORD *)(v34 + 6) & 0xFFDF) == 0x53
             && (*(_WORD *)(v34 + 8) & 0xFFDF) == 0x45
             && (*(_WORD *)(v34 + 10) & 0xFFDF) == 0x45
             && (*(_WORD *)(v34 + 12) & 0xFFDF) == 0x56
             && (*(_WORD *)(v34 + 14) & 0xFFDF) == 0x45
             && (*(_WORD *)(v34 + 16) & 0xFFDF) == 0x4E
             && (*(_WORD *)(v34 + 18) & 0xFFDF) == 0x54)
      {
        goto LABEL_132;
      }
      if ((*(_WORD *)v34 & 0xFFDF) == 0x54
        && (*(_WORD *)(v34 + 2) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x55
        && (*(_WORD *)(v34 + 6) & 0xFFDF) == 0x43
        && (*(_WORD *)(v34 + 8) & 0xFFDF) == 0x48
        && (*(_WORD *)(v34 + 10) & 0xFFDF) == 0x45
        && (*(_WORD *)(v34 + 12) & 0xFFDF) == 0x56
        && (*(_WORD *)(v34 + 14) & 0xFFDF) == 0x45
        && (*(_WORD *)(v34 + 16) & 0xFFDF) == 0x4E
        && (*(_WORD *)(v34 + 18) & 0xFFDF) == 0x54)
      {
        goto LABEL_206;
      }
      if ((*(_WORD *)v34 & 0xFFDF) != 0x57
        || (*(_WORD *)(v34 + 2) & 0xFFDF) != 0x48
        || (*(_WORD *)(v34 + 4) & 0xFFDF) != 0x45
        || (*(_WORD *)(v34 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v34 + 8) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v34 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(v34 + 12) & 0xFFDF) != 0x56
        || (*(_WORD *)(v34 + 14) & 0xFFDF) != 0x45
        || (*(_WORD *)(v34 + 16) & 0xFFDF) != 0x4E)
      {
        goto LABEL_2;
      }
      v50 = *(unsigned __int16 *)(v34 + 18);
      goto LABEL_217;
    case 0xB:
      v16 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v17 = *(_BYTE *)v16 & 0xDF;
        if (v17 == 67
          && (*(_BYTE *)(v16 + 1) & 0xDF) == 0x55
          && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x53
          && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x54
          && (*(_BYTE *)(v16 + 4) & 0xDF) == 0x4F
          && (*(_BYTE *)(v16 + 5) & 0xDF) == 0x4D
          && (*(_BYTE *)(v16 + 6) & 0xDF) == 0x45
          && (*(_BYTE *)(v16 + 7) & 0xDF) == 0x56
          && (*(_BYTE *)(v16 + 8) & 0xDF) == 0x45
          && (*(_BYTE *)(v16 + 9) & 0xDF) == 0x4E
          && (*(_BYTE *)(v16 + 10) & 0xDF) == 0x54)
        {
LABEL_55:
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v18 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1D0000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v18;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v19;
          *(_QWORD *)v8 = off_1E33A1910;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 80) = 0;
          *(_QWORD *)(v8 + 64) = 0;
          __dmb(0xAu);
          v20 = *(_QWORD *)(v8 + 80);
          *(_QWORD *)(v8 + 80) = 0;
          if (v20)
            *(_QWORD *)(v20 + 8) = 3;
          *(_QWORD *)(v8 + 88) = 0;
          *(_QWORD *)(v8 + 96) = 0;
          __dmb(0xAu);
          v21 = *(_QWORD *)(v8 + 96);
          *(_QWORD *)(v8 + 96) = 0;
          if (v21)
            *(_QWORD *)(v21 + 8) = 3;
          v5 = 0;
          goto LABEL_219;
        }
        if (v17 != 77
          || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x55
          || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x53
          || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x56
          || (*(_BYTE *)(v16 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 8) & 0xDF) != 0x4E
          || (*(_BYTE *)(v16 + 9) & 0xDF) != 0x54)
        {
          goto LABEL_2;
        }
        v36 = *(unsigned __int8 *)(v16 + 10);
      }
      else
      {
        if ((*(_WORD *)v16 & 0xFFDF) == 0x43
          && (*(_WORD *)(v16 + 2) & 0xFFDF) == 0x55
          && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x53
          && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x54
          && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v16 + 10) & 0xFFDF) == 0x4D
          && (*(_WORD *)(v16 + 12) & 0xFFDF) == 0x45
          && (*(_WORD *)(v16 + 14) & 0xFFDF) == 0x56
          && (*(_WORD *)(v16 + 16) & 0xFFDF) == 0x45
          && (*(_WORD *)(v16 + 18) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v16 + 20) & 0xFFDF) == 0x54)
        {
          goto LABEL_55;
        }
        if ((*(_WORD *)v16 & 0xFFDF) != 0x4D
          || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x55
          || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x53
          || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x56
          || (*(_WORD *)(v16 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v16 + 16) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v16 + 18) & 0xFFDF) != 0x54)
        {
          goto LABEL_2;
        }
        v36 = *(unsigned __int16 *)(v16 + 20);
      }
      if ((v36 & 0xFFFFFFDF) != 0x53)
        goto LABEL_2;
      goto LABEL_132;
    case 0xC:
      v62 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v63 = *(_BYTE *)v62 & 0xDF;
        if (v63 == 77)
        {
          if ((*(_BYTE *)(v62 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v62 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(v62 + 3) & 0xDF) != 0x53
            || (*(_BYTE *)(v62 + 4) & 0xDF) != 0x41
            || (*(_BYTE *)(v62 + 5) & 0xDF) != 0x47
            || (*(_BYTE *)(v62 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v62 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v62 + 8) & 0xDF) != 0x56
            || (*(_BYTE *)(v62 + 9) & 0xDF) != 0x45
            || (*(_BYTE *)(v62 + 10) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v64 = *(unsigned __int8 *)(v62 + 11);
LABEL_456:
          if ((v64 & 0xFFFFFFDF) != 0x54)
            goto LABEL_2;
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v65 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x258000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v65;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v66;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)v8 = off_1E33A5A68;
          *(_QWORD *)(v8 + 8) = 0;
          *(_DWORD *)(v8 + 80) = 0;
          *(_BYTE *)(v8 + 120) = 0;
          *(_QWORD *)(v8 + 88) = 0;
          *(_QWORD *)(v8 + 96) = 0;
          *(_BYTE *)(v8 + 104) = 0;
          *(_OWORD *)(v8 + 128) = 0u;
          *(_OWORD *)(v8 + 144) = 0u;
          __dmb(0xAu);
          v67 = *(_QWORD *)(v8 + 152);
          *(_QWORD *)(v8 + 152) = 0;
          if (v67)
            *(_QWORD *)(v67 + 8) = 3;
          *(_QWORD *)(v8 + 160) = 0;
          *(_QWORD *)(v8 + 168) = 0;
          __dmb(0xAu);
          v68 = *(_QWORD *)(v8 + 168);
          *(_QWORD *)(v8 + 168) = 0;
          if (v68)
            *(_QWORD *)(v68 + 8) = 3;
          *(_QWORD *)(v8 + 176) = 0;
          *(_QWORD *)(v8 + 184) = 0;
          __dmb(0xAu);
          v69 = *(_QWORD *)(v8 + 184);
          *(_QWORD *)(v8 + 184) = 0;
          if (v69)
            *(_QWORD *)(v69 + 8) = 3;
          v5 = 0;
          *(_BYTE *)(v8 + 192) = 0;
          goto LABEL_219;
        }
        if (v63 != 83
          || (*(_BYTE *)(v62 + 1) & 0xDF) != 0x54
          || (*(_BYTE *)(v62 + 2) & 0xDF) != 0x4F
          || (*(_BYTE *)(v62 + 3) & 0xDF) != 0x52
          || (*(_BYTE *)(v62 + 4) & 0xDF) != 0x41
          || (*(_BYTE *)(v62 + 5) & 0xDF) != 0x47
          || (*(_BYTE *)(v62 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v62 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v62 + 8) & 0xDF) != 0x56
          || (*(_BYTE *)(v62 + 9) & 0xDF) != 0x45
          || (*(_BYTE *)(v62 + 10) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v83 = *(unsigned __int8 *)(v62 + 11);
      }
      else
      {
        v90 = *(_WORD *)v62 & 0xFFDF;
        if (v90 == 77)
        {
          if ((*(_WORD *)(v62 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v62 + 4) & 0xFFDF) != 0x53
            || (*(_WORD *)(v62 + 6) & 0xFFDF) != 0x53
            || (*(_WORD *)(v62 + 8) & 0xFFDF) != 0x41
            || (*(_WORD *)(v62 + 10) & 0xFFDF) != 0x47
            || (*(_WORD *)(v62 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v62 + 14) & 0xFFDF) != 0x45
            || (*(_WORD *)(v62 + 16) & 0xFFDF) != 0x56
            || (*(_WORD *)(v62 + 18) & 0xFFDF) != 0x45
            || (*(_WORD *)(v62 + 20) & 0xFFDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v64 = *(unsigned __int16 *)(v62 + 22);
          goto LABEL_456;
        }
        if (v90 != 83
          || (*(_WORD *)(v62 + 2) & 0xFFDF) != 0x54
          || (*(_WORD *)(v62 + 4) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v62 + 6) & 0xFFDF) != 0x52
          || (*(_WORD *)(v62 + 8) & 0xFFDF) != 0x41
          || (*(_WORD *)(v62 + 10) & 0xFFDF) != 0x47
          || (*(_WORD *)(v62 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v62 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v62 + 16) & 0xFFDF) != 0x56
          || (*(_WORD *)(v62 + 18) & 0xFFDF) != 0x45
          || (*(_WORD *)(v62 + 20) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v83 = *(unsigned __int16 *)(v62 + 22);
      }
      if ((v83 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v5 = 0;
      v84 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x2D8000;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v84;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v85;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)v8 = off_1E344FA20;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      goto LABEL_540;
    case 0xD:
      v58 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v59 = *(_BYTE *)v58 & 0xDF;
        if (v59 == 75)
        {
          if ((*(_BYTE *)(v58 + 1) & 0xDF) == 0x45
            && (*(_BYTE *)(v58 + 2) & 0xDF) == 0x59
            && (*(_BYTE *)(v58 + 3) & 0xDF) == 0x42
            && (*(_BYTE *)(v58 + 4) & 0xDF) == 0x4F
            && (*(_BYTE *)(v58 + 5) & 0xDF) == 0x41
            && (*(_BYTE *)(v58 + 6) & 0xDF) == 0x52
            && (*(_BYTE *)(v58 + 7) & 0xDF) == 0x44
            && (*(_BYTE *)(v58 + 8) & 0xDF) == 0x45
            && (*(_BYTE *)(v58 + 9) & 0xDF) == 0x56
            && (*(_BYTE *)(v58 + 10) & 0xDF) == 0x45
            && (*(_BYTE *)(v58 + 11) & 0xDF) == 0x4E
            && (*(_BYTE *)(v58 + 12) & 0xDF) == 0x54)
          {
            goto LABEL_442;
          }
          v59 = 75;
        }
        if (v59 == 77)
        {
          if ((*(_BYTE *)(v58 + 1) & 0xDF) != 0x55
            || (*(_BYTE *)(v58 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v58 + 3) & 0xDF) != 0x41
            || (*(_BYTE *)(v58 + 4) & 0xDF) != 0x54
            || (*(_BYTE *)(v58 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v58 + 6) & 0xDF) != 0x4F
            || (*(_BYTE *)(v58 + 7) & 0xDF) != 0x4E
            || (*(_BYTE *)(v58 + 8) & 0xDF) != 0x45
            || (*(_BYTE *)(v58 + 9) & 0xDF) != 0x56
            || (*(_BYTE *)(v58 + 10) & 0xDF) != 0x45
            || (*(_BYTE *)(v58 + 11) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v80 = *(unsigned __int8 *)(v58 + 12);
LABEL_524:
          if ((v80 & 0xFFFFFFDF) != 0x54)
            goto LABEL_2;
          goto LABEL_525;
        }
        if (v59 == 79)
        {
          if ((*(_BYTE *)(v58 + 1) & 0xDF) != 0x56
            || (*(_BYTE *)(v58 + 2) & 0xDF) != 0x45
            || (*(_BYTE *)(v58 + 3) & 0xDF) != 0x52
            || (*(_BYTE *)(v58 + 4) & 0xDF) != 0x46
            || (*(_BYTE *)(v58 + 5) & 0xDF) != 0x4C
            || (*(_BYTE *)(v58 + 6) & 0xDF) != 0x4F
            || (*(_BYTE *)(v58 + 7) & 0xDF) != 0x57
            || (*(_BYTE *)(v58 + 8) & 0xDF) != 0x45
            || (*(_BYTE *)(v58 + 9) & 0xDF) != 0x56
            || (*(_BYTE *)(v58 + 10) & 0xDF) != 0x45
            || (*(_BYTE *)(v58 + 11) & 0xDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v86 = *(unsigned __int8 *)(v58 + 12);
LABEL_554:
          if ((v86 & 0xFFFFFFDF) != 0x54)
            goto LABEL_2;
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v5 = 0;
          v87 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x280000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v87;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v88;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)v8 = off_1E33A6400;
          *(_QWORD *)(v8 + 8) = 0;
          *(_DWORD *)(v8 + 72) = 1;
          goto LABEL_219;
        }
        if (v59 != 80
          || (*(_BYTE *)(v58 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v58 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v58 + 3) & 0xDF) != 0x53
          || (*(_BYTE *)(v58 + 4) & 0xDF) != 0x54
          || (*(_BYTE *)(v58 + 5) & 0xDF) != 0x41
          || (*(_BYTE *)(v58 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v58 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v58 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v58 + 9) & 0xDF) != 0x56
          || (*(_BYTE *)(v58 + 10) & 0xDF) != 0x45
          || (*(_BYTE *)(v58 + 11) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v91 = *(unsigned __int8 *)(v58 + 12);
      }
      else
      {
        if ((*(_WORD *)v58 & 0xFFDF) == 0x4B
          && (*(_WORD *)(v58 + 2) & 0xFFDF) == 0x45
          && (*(_WORD *)(v58 + 4) & 0xFFDF) == 0x59
          && (*(_WORD *)(v58 + 6) & 0xFFDF) == 0x42
          && (*(_WORD *)(v58 + 8) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v58 + 10) & 0xFFDF) == 0x41
          && (*(_WORD *)(v58 + 12) & 0xFFDF) == 0x52
          && (*(_WORD *)(v58 + 14) & 0xFFDF) == 0x44
          && (*(_WORD *)(v58 + 16) & 0xFFDF) == 0x45
          && (*(_WORD *)(v58 + 18) & 0xFFDF) == 0x56
          && (*(_WORD *)(v58 + 20) & 0xFFDF) == 0x45
          && (*(_WORD *)(v58 + 22) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v58 + 24) & 0xFFDF) == 0x54)
        {
          goto LABEL_442;
        }
        v89 = *(_WORD *)v58 & 0xFFDF;
        if (v89 == 77)
        {
          if ((*(_WORD *)(v58 + 2) & 0xFFDF) != 0x55
            || (*(_WORD *)(v58 + 4) & 0xFFDF) != 0x54
            || (*(_WORD *)(v58 + 6) & 0xFFDF) != 0x41
            || (*(_WORD *)(v58 + 8) & 0xFFDF) != 0x54
            || (*(_WORD *)(v58 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(v58 + 12) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v58 + 14) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v58 + 16) & 0xFFDF) != 0x45
            || (*(_WORD *)(v58 + 18) & 0xFFDF) != 0x56
            || (*(_WORD *)(v58 + 20) & 0xFFDF) != 0x45
            || (*(_WORD *)(v58 + 22) & 0xFFDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v80 = *(unsigned __int16 *)(v58 + 24);
          goto LABEL_524;
        }
        if (v89 == 79)
        {
          if ((*(_WORD *)(v58 + 2) & 0xFFDF) != 0x56
            || (*(_WORD *)(v58 + 4) & 0xFFDF) != 0x45
            || (*(_WORD *)(v58 + 6) & 0xFFDF) != 0x52
            || (*(_WORD *)(v58 + 8) & 0xFFDF) != 0x46
            || (*(_WORD *)(v58 + 10) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v58 + 12) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v58 + 14) & 0xFFDF) != 0x57
            || (*(_WORD *)(v58 + 16) & 0xFFDF) != 0x45
            || (*(_WORD *)(v58 + 18) & 0xFFDF) != 0x56
            || (*(_WORD *)(v58 + 20) & 0xFFDF) != 0x45
            || (*(_WORD *)(v58 + 22) & 0xFFDF) != 0x4E)
          {
            goto LABEL_2;
          }
          v86 = *(unsigned __int16 *)(v58 + 24);
          goto LABEL_554;
        }
        if (v89 != 80
          || (*(_WORD *)(v58 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v58 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v58 + 6) & 0xFFDF) != 0x53
          || (*(_WORD *)(v58 + 8) & 0xFFDF) != 0x54
          || (*(_WORD *)(v58 + 10) & 0xFFDF) != 0x41
          || (*(_WORD *)(v58 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v58 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v58 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v58 + 18) & 0xFFDF) != 0x56
          || (*(_WORD *)(v58 + 20) & 0xFFDF) != 0x45
          || (*(_WORD *)(v58 + 22) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v91 = *(unsigned __int16 *)(v58 + 24);
      }
      if ((v91 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v92 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) + 327680;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v92;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v93;
      *(_QWORD *)v8 = off_1E33A66C0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      __dmb(0xAu);
      v94 = *(_QWORD *)(v8 + 80);
      *(_QWORD *)(v8 + 80) = 0;
      if (v94)
        *(_QWORD *)(v94 + 8) = 3;
      v5 = 0;
      *(_QWORD *)(v8 + 88) = 0;
      *(_WORD *)(v8 + 96) = 0;
LABEL_540:
      *(_QWORD *)(v8 + 104) = 0;
      goto LABEL_219;
    case 0xE:
      v55 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v56 = *(_BYTE *)v55 & 0xDF;
        if (v56 != 75
          || (*(_BYTE *)(v55 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v55 + 2) & 0xDF) != 0x59
          || (*(_BYTE *)(v55 + 3) & 0xDF) != 0x42
          || (*(_BYTE *)(v55 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v55 + 5) & 0xDF) != 0x41
          || (*(_BYTE *)(v55 + 6) & 0xDF) != 0x52
          || (*(_BYTE *)(v55 + 7) & 0xDF) != 0x44
          || (*(_BYTE *)(v55 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v55 + 9) & 0xDF) != 0x56
          || (*(_BYTE *)(v55 + 10) & 0xDF) != 0x45
          || (*(_BYTE *)(v55 + 11) & 0xDF) != 0x4E
          || (*(_BYTE *)(v55 + 12) & 0xDF) != 0x54
          || (*(_BYTE *)(v55 + 13) & 0xDF) != 0x53)
        {
          if (v56 != 77
            || (*(_BYTE *)(v55 + 1) & 0xDF) != 0x55
            || (*(_BYTE *)(v55 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v55 + 3) & 0xDF) != 0x41
            || (*(_BYTE *)(v55 + 4) & 0xDF) != 0x54
            || (*(_BYTE *)(v55 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v55 + 6) & 0xDF) != 0x4F
            || (*(_BYTE *)(v55 + 7) & 0xDF) != 0x4E
            || (*(_BYTE *)(v55 + 8) & 0xDF) != 0x45
            || (*(_BYTE *)(v55 + 9) & 0xDF) != 0x56
            || (*(_BYTE *)(v55 + 10) & 0xDF) != 0x45
            || (*(_BYTE *)(v55 + 11) & 0xDF) != 0x4E
            || (*(_BYTE *)(v55 + 12) & 0xDF) != 0x54)
          {
            goto LABEL_2;
          }
          v57 = *(unsigned __int8 *)(v55 + 13);
LABEL_426:
          if ((v57 & 0xFFFFFFDF) != 0x53)
            goto LABEL_2;
LABEL_525:
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v5 = 0;
          v81 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x268000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v81;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v82;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)v8 = off_1E33A5E28;
          *(_QWORD *)(v8 + 8) = 0;
          *(_OWORD *)(v8 + 72) = 0u;
          *(_OWORD *)(v8 + 88) = 0u;
          *(_WORD *)(v8 + 104) = 0;
          goto LABEL_219;
        }
      }
      else if ((*(_WORD *)v55 & 0xFFDF) != 0x4B
             || (*(_WORD *)(v55 + 2) & 0xFFDF) != 0x45
             || (*(_WORD *)(v55 + 4) & 0xFFDF) != 0x59
             || (*(_WORD *)(v55 + 6) & 0xFFDF) != 0x42
             || (*(_WORD *)(v55 + 8) & 0xFFDF) != 0x4F
             || (*(_WORD *)(v55 + 10) & 0xFFDF) != 0x41
             || (*(_WORD *)(v55 + 12) & 0xFFDF) != 0x52
             || (*(_WORD *)(v55 + 14) & 0xFFDF) != 0x44
             || (*(_WORD *)(v55 + 16) & 0xFFDF) != 0x45
             || (*(_WORD *)(v55 + 18) & 0xFFDF) != 0x56
             || (*(_WORD *)(v55 + 20) & 0xFFDF) != 0x45
             || (*(_WORD *)(v55 + 22) & 0xFFDF) != 0x4E
             || (*(_WORD *)(v55 + 24) & 0xFFDF) != 0x54
             || (*(_WORD *)(v55 + 26) & 0xFFDF) != 0x53)
      {
        if ((*(_WORD *)v55 & 0xFFDF) != 0x4D
          || (*(_WORD *)(v55 + 2) & 0xFFDF) != 0x55
          || (*(_WORD *)(v55 + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(v55 + 6) & 0xFFDF) != 0x41
          || (*(_WORD *)(v55 + 8) & 0xFFDF) != 0x54
          || (*(_WORD *)(v55 + 10) & 0xFFDF) != 0x49
          || (*(_WORD *)(v55 + 12) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v55 + 14) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v55 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v55 + 18) & 0xFFDF) != 0x56
          || (*(_WORD *)(v55 + 20) & 0xFFDF) != 0x45
          || (*(_WORD *)(v55 + 22) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v55 + 24) & 0xFFDF) != 0x54)
        {
          goto LABEL_2;
        }
        v57 = *(unsigned __int16 *)(v55 + 26);
        goto LABEL_426;
      }
LABEL_442:
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v5 = 0;
      v60 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v60;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v61;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 77) = 0;
      *(_QWORD *)v8 = off_1E33A5590;
      *(_QWORD *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 128) = 0;
      *(_BYTE *)(v8 + 132) = 0;
      *(_BYTE *)(v8 + 136) = 0;
      *(_BYTE *)(v8 + 140) = 0;
      *(_BYTE *)(v8 + 144) = 0;
      *(_BYTE *)(v8 + 148) = 0;
      *(_BYTE *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 160) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 118) = 0;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      goto LABEL_219;
    case 0xF:
      v39 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v39 & 0xDF) != 0x48
          || (*(_BYTE *)(v39 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v39 + 2) & 0xDF) != 0x53
          || (*(_BYTE *)(v39 + 3) & 0xDF) != 0x48
          || (*(_BYTE *)(v39 + 4) & 0xDF) != 0x43
          || (*(_BYTE *)(v39 + 5) & 0xDF) != 0x48
          || (*(_BYTE *)(v39 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v39 + 7) & 0xDF) != 0x4E
          || (*(_BYTE *)(v39 + 8) & 0xDF) != 0x47
          || (*(_BYTE *)(v39 + 9) & 0xDF) != 0x45
          || (*(_BYTE *)(v39 + 10) & 0xDF) != 0x45
          || (*(_BYTE *)(v39 + 11) & 0xDF) != 0x56
          || (*(_BYTE *)(v39 + 12) & 0xDF) != 0x45
          || (*(_BYTE *)(v39 + 13) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v40 = *(unsigned __int8 *)(v39 + 14);
      }
      else
      {
        if ((*(_WORD *)v39 & 0xFFDF) != 0x48
          || (*(_WORD *)(v39 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v39 + 4) & 0xFFDF) != 0x53
          || (*(_WORD *)(v39 + 6) & 0xFFDF) != 0x48
          || (*(_WORD *)(v39 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v39 + 10) & 0xFFDF) != 0x48
          || (*(_WORD *)(v39 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v39 + 14) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v39 + 16) & 0xFFDF) != 0x47
          || (*(_WORD *)(v39 + 18) & 0xFFDF) != 0x45
          || (*(_WORD *)(v39 + 20) & 0xFFDF) != 0x45
          || (*(_WORD *)(v39 + 22) & 0xFFDF) != 0x56
          || (*(_WORD *)(v39 + 24) & 0xFFDF) != 0x45
          || (*(_WORD *)(v39 + 26) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v40 = *(unsigned __int16 *)(v39 + 28);
      }
      if ((v40 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v5 = 0;
      v41 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) - 0x20000;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v41;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v42;
      *(_QWORD *)v8 = off_1E32AD800;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      goto LABEL_219;
    case 0x10:
      v11 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v11 & 0xDF) != 0x43
          || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x4D
          || (*(_BYTE *)(v11 + 3) & 0xDF) != 0x50
          || (*(_BYTE *)(v11 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v11 + 5) & 0xDF) != 0x53
          || (*(_BYTE *)(v11 + 6) & 0xDF) != 0x49
          || (*(_BYTE *)(v11 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v11 + 8) & 0xDF) != 0x49
          || (*(_BYTE *)(v11 + 9) & 0xDF) != 0x4F
          || (*(_BYTE *)(v11 + 10) & 0xDF) != 0x4E
          || (*(_BYTE *)(v11 + 11) & 0xDF) != 0x45
          || (*(_BYTE *)(v11 + 12) & 0xDF) != 0x56
          || (*(_BYTE *)(v11 + 13) & 0xDF) != 0x45
          || (*(_BYTE *)(v11 + 14) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v12 = *(unsigned __int8 *)(v11 + 15);
      }
      else
      {
        if ((*(_WORD *)v11 & 0xFFDF) != 0x43
          || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v11 + 6) & 0xFFDF) != 0x50
          || (*(_WORD *)(v11 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v11 + 10) & 0xFFDF) != 0x53
          || (*(_WORD *)(v11 + 12) & 0xFFDF) != 0x49
          || (*(_WORD *)(v11 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v11 + 16) & 0xFFDF) != 0x49
          || (*(_WORD *)(v11 + 18) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v11 + 20) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v11 + 22) & 0xFFDF) != 0x45
          || (*(_WORD *)(v11 + 24) & 0xFFDF) != 0x56
          || (*(_WORD *)(v11 + 26) & 0xFFDF) != 0x45
          || (*(_WORD *)(v11 + 28) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v12 = *(unsigned __int16 *)(v11 + 30);
      }
      if ((v12 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v5 = 0;
      v13 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) - 589824;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v13;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v14;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_DWORD *)(v8 + 80) = 0;
      v15 = off_1E33A1338;
LABEL_162:
      *(_QWORD *)v8 = v15;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      goto LABEL_219;
    case 0x11:
      v6 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        v7 = *(_BYTE *)v6 & 0xDF;
        if (v7 == 66
          && (*(_BYTE *)(v6 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v6 + 2) & 0xDF) == 0x46
          && (*(_BYTE *)(v6 + 3) & 0xDF) == 0x4F
          && (*(_BYTE *)(v6 + 4) & 0xDF) == 0x52
          && (*(_BYTE *)(v6 + 5) & 0xDF) == 0x45
          && (*(_BYTE *)(v6 + 6) & 0xDF) == 0x55
          && (*(_BYTE *)(v6 + 7) & 0xDF) == 0x4E
          && (*(_BYTE *)(v6 + 8) & 0xDF) == 0x4C
          && (*(_BYTE *)(v6 + 9) & 0xDF) == 0x4F
          && (*(_BYTE *)(v6 + 10) & 0xDF) == 0x41
          && (*(_BYTE *)(v6 + 11) & 0xDF) == 0x44
          && (*(_BYTE *)(v6 + 12) & 0xDF) == 0x45
          && (*(_BYTE *)(v6 + 13) & 0xDF) == 0x56
          && (*(_BYTE *)(v6 + 14) & 0xDF) == 0x45
          && (*(_BYTE *)(v6 + 15) & 0xDF) == 0x4E
          && (*(_BYTE *)(v6 + 16) & 0xDF) == 0x54)
        {
LABEL_23:
          v8 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
          v5 = 0;
          v9 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x190000;
          *(_DWORD *)(v8 + 16) = 1;
          *(_DWORD *)(v8 + 20) = v9;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_OWORD *)(v8 + 40) = 0u;
          *(_QWORD *)(v8 + 56) = v10;
          *(_QWORD *)v8 = off_1E33A0A20;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          goto LABEL_219;
        }
        if (v7 != 68
          || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x56
          || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x49
          || (*(_BYTE *)(v6 + 4) & 0xDF) != 0x43
          || (*(_BYTE *)(v6 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v6 + 6) & 0xDF) != 0x4D
          || (*(_BYTE *)(v6 + 7) & 0xDF) != 0x4F
          || (*(_BYTE *)(v6 + 8) & 0xDF) != 0x54
          || (*(_BYTE *)(v6 + 9) & 0xDF) != 0x49
          || (*(_BYTE *)(v6 + 10) & 0xDF) != 0x4F
          || (*(_BYTE *)(v6 + 11) & 0xDF) != 0x4E
          || (*(_BYTE *)(v6 + 12) & 0xDF) != 0x45
          || (*(_BYTE *)(v6 + 13) & 0xDF) != 0x56
          || (*(_BYTE *)(v6 + 14) & 0xDF) != 0x45
          || (*(_BYTE *)(v6 + 15) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v28 = *(unsigned __int8 *)(v6 + 16);
      }
      else
      {
        if ((*(_WORD *)v6 & 0xFFDF) == 0x42
          && (*(_WORD *)(v6 + 2) & 0xFFDF) == 0x45
          && (*(_WORD *)(v6 + 4) & 0xFFDF) == 0x46
          && (*(_WORD *)(v6 + 6) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v6 + 8) & 0xFFDF) == 0x52
          && (*(_WORD *)(v6 + 10) & 0xFFDF) == 0x45
          && (*(_WORD *)(v6 + 12) & 0xFFDF) == 0x55
          && (*(_WORD *)(v6 + 14) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v6 + 16) & 0xFFDF) == 0x4C
          && (*(_WORD *)(v6 + 18) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v6 + 20) & 0xFFDF) == 0x41
          && (*(_WORD *)(v6 + 22) & 0xFFDF) == 0x44
          && (*(_WORD *)(v6 + 24) & 0xFFDF) == 0x45
          && (*(_WORD *)(v6 + 26) & 0xFFDF) == 0x56
          && (*(_WORD *)(v6 + 28) & 0xFFDF) == 0x45
          && (*(_WORD *)(v6 + 30) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v6 + 32) & 0xFFDF) == 0x54)
        {
          goto LABEL_23;
        }
        if ((*(_WORD *)v6 & 0xFFDF) != 0x44
          || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x56
          || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x49
          || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v6 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v6 + 12) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v6 + 14) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v6 + 16) & 0xFFDF) != 0x54
          || (*(_WORD *)(v6 + 18) & 0xFFDF) != 0x49
          || (*(_WORD *)(v6 + 20) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v6 + 22) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v6 + 24) & 0xFFDF) != 0x45
          || (*(_WORD *)(v6 + 26) & 0xFFDF) != 0x56
          || (*(_WORD *)(v6 + 28) & 0xFFDF) != 0x45
          || (*(_WORD *)(v6 + 30) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v28 = *(unsigned __int16 *)(v6 + 32);
      }
      if ((v28 & 0xFFFFFFDF) == 0x54)
      {
        v8 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
        v29 = (*(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x248000) - 0x200000;
        *(_DWORD *)(v8 + 16) = 1;
        *(_DWORD *)(v8 + 20) = v29;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_QWORD *)(v8 + 56) = v30;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)v8 = off_1E33A28E0;
        *(_QWORD *)(v8 + 8) = 0;
        v31 = WTF::fastMalloc((WTF *)0x30);
        v5 = 0;
        *(_DWORD *)v31 = 1;
        *(_BYTE *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 16) = 0;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 8) = 0;
        *(_BYTE *)(v31 + 32) = 0;
LABEL_98:
        *(_QWORD *)(v8 + 72) = v31;
        goto LABEL_219;
      }
      goto LABEL_2;
    case 0x16:
      v70 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v70 & 0xDF) != 0x44
          || (*(_BYTE *)(v70 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v70 + 2) & 0xDF) != 0x56
          || (*(_BYTE *)(v70 + 3) & 0xDF) != 0x49
          || (*(_BYTE *)(v70 + 4) & 0xDF) != 0x43
          || (*(_BYTE *)(v70 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v70 + 6) & 0xDF) != 0x4F
          || (*(_BYTE *)(v70 + 7) & 0xDF) != 0x52
          || (*(_BYTE *)(v70 + 8) & 0xDF) != 0x49
          || (*(_BYTE *)(v70 + 9) & 0xDF) != 0x45
          || (*(_BYTE *)(v70 + 10) & 0xDF) != 0x4E
          || (*(_BYTE *)(v70 + 11) & 0xDF) != 0x54
          || (*(_BYTE *)(v70 + 12) & 0xDF) != 0x41
          || (*(_BYTE *)(v70 + 13) & 0xDF) != 0x54
          || (*(_BYTE *)(v70 + 14) & 0xDF) != 0x49
          || (*(_BYTE *)(v70 + 15) & 0xDF) != 0x4F
          || (*(_BYTE *)(v70 + 16) & 0xDF) != 0x4E
          || (*(_BYTE *)(v70 + 17) & 0xDF) != 0x45
          || (*(_BYTE *)(v70 + 18) & 0xDF) != 0x56
          || (*(_BYTE *)(v70 + 19) & 0xDF) != 0x45
          || (*(_BYTE *)(v70 + 20) & 0xDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v71 = *(unsigned __int8 *)(v70 + 21);
      }
      else
      {
        if ((*(_WORD *)v70 & 0xFFDF) != 0x44
          || (*(_WORD *)(v70 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v70 + 4) & 0xFFDF) != 0x56
          || (*(_WORD *)(v70 + 6) & 0xFFDF) != 0x49
          || (*(_WORD *)(v70 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v70 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v70 + 12) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v70 + 14) & 0xFFDF) != 0x52
          || (*(_WORD *)(v70 + 16) & 0xFFDF) != 0x49
          || (*(_WORD *)(v70 + 18) & 0xFFDF) != 0x45
          || (*(_WORD *)(v70 + 20) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v70 + 22) & 0xFFDF) != 0x54
          || (*(_WORD *)(v70 + 24) & 0xFFDF) != 0x41
          || (*(_WORD *)(v70 + 26) & 0xFFDF) != 0x54
          || (*(_WORD *)(v70 + 28) & 0xFFDF) != 0x49
          || (*(_WORD *)(v70 + 30) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v70 + 32) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v70 + 34) & 0xFFDF) != 0x45
          || (*(_WORD *)(v70 + 36) & 0xFFDF) != 0x56
          || (*(_WORD *)(v70 + 38) & 0xFFDF) != 0x45
          || (*(_WORD *)(v70 + 40) & 0xFFDF) != 0x4E)
        {
          goto LABEL_2;
        }
        v71 = *(unsigned __int16 *)(v70 + 42);
      }
      if ((v71 & 0xFFFFFFDF) != 0x54)
        goto LABEL_2;
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v72 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x50000;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v72;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v73;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)v8 = off_1E33A2AE0;
      *(_QWORD *)(v8 + 8) = 0;
      v31 = WTF::fastMalloc((WTF *)0x58);
      v5 = 0;
      *(_DWORD *)v31 = 1;
      *(_BYTE *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 16) = 0;
      *(_BYTE *)(v31 + 24) = 0;
      *(_BYTE *)(v31 + 32) = 0;
      *(_BYTE *)(v31 + 40) = 0;
      *(_BYTE *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 56) = 0;
      *(_BYTE *)(v31 + 64) = 0;
      *(_BYTE *)(v31 + 72) = 0;
      *(_BYTE *)(v31 + 80) = 0;
      goto LABEL_98;
    default:
      goto LABEL_2;
  }
}

uint64_t WebCore::Document::didRemoveEventListenersOfType(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(result + 3296);
  v4 = *(unsigned int *)(result + 3304);
  if (v3)
  {
    v5 = v4 - 1;
    v6 = *(_DWORD *)(result + 3312);
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v8 = (v6 ^ (v7 >> 8)) & ((_DWORD)v4 - 1);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9)
    {
      v10 = v7 >> 8;
      v11 = -1;
      do
      {
        v12 = *(_DWORD *)(v9 + 16);
        result = ((_DWORD)v8 + (_DWORD)v4 - ((v6 ^ (v12 >> 8)) & v5)) & v5;
        if (++v11 > result)
          break;
        if (v9 == *(_QWORD *)a2 && v12 >> 8 == v10)
        {
          v13 = v3 + 16 * v8;
          goto LABEL_10;
        }
        v8 = ((_DWORD)v8 + 1) & v5;
        v9 = *(_QWORD *)(v3 + 16 * v8);
      }
      while (v9);
    }
    v13 = v3 + 16 * v4;
  }
  else
  {
    v13 = 16 * v4;
  }
LABEL_10:
  *(_DWORD *)(v13 + 8) -= a3;
  return result;
}

uint64_t WebCore::Document::ownerPermissionsPolicy@<X0>(uint64_t this@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;

  v3 = *(_QWORD *)(this + 528);
  if (!v3)
    goto LABEL_3;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_3;
  v13 = (uint64_t)a3;
  v14 = *(WTF **)(v4 + 16);
  if (!v14)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v4;
    this = *(_QWORD *)(v4 + 16);
    v14 = (WTF *)v9;
    *(_QWORD *)(v4 + 16) = v9;
    if (this)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)this);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)this));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
      a3 = (_BYTE *)v13;
      v14 = *(WTF **)(v4 + 16);
      if (!v14)
        goto LABEL_3;
    }
  }
  do
    v5 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v5 + 1, (unsigned int *)v14));
  v6 = *((_QWORD *)v14 + 1);
  if (v6)
    this = WebCore::Frame::ownerPermissionsPolicy(v6, (WTF::StringImpl *)a2, v13);
  do
  {
    v7 = __ldaxr((unsigned int *)v14);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)v14));
  if (!v8)
  {
    v12 = v14;
    atomic_store(1u, (unsigned int *)v14);
    this = WTF::fastFree(v12, a2);
  }
  a3 = (_BYTE *)v13;
  if (!v6)
  {
LABEL_3:
    *a3 = 0;
    a3[48] = 0;
  }
  return this;
}

void WebCore::Document::setCookie(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  __int128 v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;

  v4 = *((_QWORD *)this + 66);
  if (!v4)
    goto LABEL_16;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_16;
  v8 = *(_QWORD *)(v5 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v9 + 112) + 664) & 0x800000000000000) == 0)
        goto LABEL_16;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  if (v10)
    *(_DWORD *)v10 += 2;
  v27 = v10;
  v11 = *((_OWORD *)this + 62);
  v28 = *((_OWORD *)this + 61);
  v29 = v11;
  if ((WTF::URL::protocolIs() & 1) != 0 || (v28 & 2) != 0)
    v13 = 0;
  else
    v13 = WTF::URL::protocolIs() ^ 1;
  v14 = v27;
  v27 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      if (v13)
        goto LABEL_16;
      goto LABEL_18;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (v13)
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
LABEL_18:
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v12);
  if (!v15 || *(_DWORD *)(v15 + 32) == 1)
  {
    *(_BYTE *)a3 = 14;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
    return;
  }
  v17 = (__int128 *)((char *)this + 976);
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  if (v18)
  {
    *(_DWORD *)v18 += 2;
    v27 = v18;
    v19 = *((_OWORD *)this + 62);
    v28 = *v17;
    v29 = v19;
    if (*((_DWORD *)v18 + 1))
    {
      WebCore::Document::invalidateDOMCookieCache(this, v16);
      v20 = *((_QWORD *)this + 66);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 24);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v23)
            {
              ++*(_DWORD *)v23;
              (*(void (**)(_QWORD, WebCore::Document *, WTF::StringImpl **, const WTF::String *))(**(_QWORD **)(v23 + 888) + 8))(*(_QWORD *)(v23 + 888), this, &v27, a2);
              if (*(_DWORD *)v23 == 1)
              {
                WebCore::Page::~Page(v23);
                WTF::fastFree(v24, v25);
              }
              else
              {
                --*(_DWORD *)v23;
              }
            }
          }
        }
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v18 = v27;
      goto LABEL_33;
    }
  }
  else
  {
    v26 = *((_OWORD *)this + 62);
    v28 = *v17;
    v29 = v26;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_33:
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
}

WTF::StringImpl *WebCore::Document::referrerForBindings@<X0>(WebCore::Document *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WebCore::Document *i;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  WebCore::Document *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Document *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[5];
  WTF::StringImpl *v38;
  char v39;
  char *v40;

  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    v28 = *((_QWORD *)this + 66);
    i = this;
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      i = this;
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 120);
        i = this;
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 8);
          for (i = this; v31; v31 = *(_QWORD *)(v34 + 8))
          {
            i = *(WebCore::Document **)(*(_QWORD *)(v31 + 40) + 8);
            v32 = *((_QWORD *)i + 66);
            if (!v32)
              break;
            v33 = *(_QWORD *)(v32 + 8);
            if (!v33)
              break;
            v34 = *(_QWORD *)(v33 + 120);
            if (!v34)
              break;
          }
        }
      }
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 66);
    i = this;
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 8);
      i = this;
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        v8 = v7 && *(_BYTE *)(v7 + 144) == 0;
        i = this;
        if (v8)
        {
          v9 = *(WebCore::Document **)(v7 + 296);
          i = this;
          if (v9)
            i = v9;
        }
      }
    }
  }
  v10 = *((_QWORD *)i + 66);
  if (!v10)
    return (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 88);
  if (!v12 || *(WebCore::Document **)(v11 + 296) != i)
    return (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
  ++*(_DWORD *)(v12 + 24);
  if ((*(_BYTE *)(v12 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 872));
    *(_BYTE *)(v12 + 1056) |= 1u;
  }
  if ((WTF::URL::hasSpecialScheme((WTF::URL *)(v12 + 872)) & 1) != 0 || (*((_BYTE *)this + 744) & 2) == 0)
  {
    v13 = v12;
    goto LABEL_21;
  }
  v26 = *((_QWORD *)this + 66);
  if (!v26)
    goto LABEL_56;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
    goto LABEL_56;
  v13 = *(_QWORD *)(*(_QWORD *)(v27 + 280) + 88);
  if (!v13)
    goto LABEL_43;
  if (*(WebCore::Document **)(v27 + 296) == this)
    ++*(_DWORD *)(v13 + 24);
  else
LABEL_56:
    v13 = 0;
LABEL_43:
  if (*(_DWORD *)(v12 + 24) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if (!v13)
      return (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
  }
  else
  {
    --*(_DWORD *)(v12 + 24);
    if (!v13)
      return (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
  }
LABEL_21:
  v14 = 3516;
  if (!*(_BYTE *)(v13 + 3518))
    v14 = 3514;
  if ((*(_WORD *)(v13 + v14) & 1) == 0)
    goto LABEL_37;
  WebCore::FrameLoader::referrer(*(_BYTE **)(*(_QWORD *)(*((_QWORD *)this + 66) + 8) + 280), &v36);
  MEMORY[0x19AEA52D4](v37, &v36, 0);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v38, (const WTF::URL *)v37);
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v15);
  v17 = *(unsigned int *)(v16 + 32);
  if ((_DWORD)v17 == -1)
  {
    v35 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::Document::domain(v35);
  }
  v40 = &v39;
  v18 = *(_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E33A33F0[v17])(&v40, v16 + 8);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v19 = 0;
    v20 = 0x100000000;
  }
  v22 = WebCore::RegistrableDomain::matches(&v38, v19, v20);
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v37[0];
  v37[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      if (v22)
        goto LABEL_37;
      goto LABEL_50;
    }
    *(_DWORD *)result -= 2;
  }
  if (v22)
  {
LABEL_37:
    result = (WTF::StringImpl *)WebCore::Document::referrer(this, a2);
    goto LABEL_51;
  }
LABEL_50:
  *a2 = 0;
LABEL_51:
  if (*(_DWORD *)(v13 + 24) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  --*(_DWORD *)(v13 + 24);
  return result;
}

void WebCore::Document::domain(WebCore::Document *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;

  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
  v5 = *(_DWORD **)(v4 + 40);
  if (v5)
    *v5 += 2;
  *a3 = v5;
}

WTF::StringImpl *WebCore::Document::setDomain@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  WTF::ASCIICaseInsensitiveHash *v9;
  WTF::StringImpl *v10;
  int *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WebCore::SecurityOrigin *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;

  v4 = *((_QWORD *)this + 66);
  if (!v4 || !*(_QWORD *)(v4 + 8) || (*((_BYTE *)this + 269) & 8) != 0)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 14;
    goto LABEL_11;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_14:
    WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes = 0;
    *((_BYTE *)v11 + 3160) = 1;
    goto LABEL_15;
  }
  v27 = (WTF::StringImpl *)&v26;
  v9 = (WTF::ASCIICaseInsensitiveHash *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v8])(&v27, v7 + 8);
  if (!*(_QWORD *)v9)
    goto LABEL_15;
  v11 = &dword_1ECE90000;
    goto LABEL_14;
  if (WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes)
  {
    result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::schemesForbiddenFromDomainRelaxation(void)::schemes, v9);
    if (result)
    {
      *(_BYTE *)a3 = 14;
      *(_QWORD *)(a3 + 8) = 0;
LABEL_11:
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
  }
LABEL_15:
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v10);
  v15 = *(WTF::StringImpl **)(v14 + 40);
  if (!v15)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = v27;
    *(_BYTE *)a3 = 14;
    *(_QWORD *)(a3 + 8) = v25;
    goto LABEL_11;
  }
  v16 = *((_DWORD *)v15 + 1);
  *(_DWORD *)v15 += 2;
  if (v16)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v13);
    if ((WebCore::SecurityOrigin::isMatchingRegistrableDomainSuffix(v17, a2, (*(_QWORD *)(*((_QWORD *)this + 85) + 696) >> 55) & 1) & 1) != 0)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v18);
      v20 = v19;
      *(_BYTE *)(v19 + 57) = 1;
      WTF::String::convertToASCIILowercase(a2);
      v22 = v27;
      v27 = 0;
      result = *(WTF::StringImpl **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v22;
      if (result)
      {
        v23 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          WTF::StringImpl::destroy(result, v21);
          result = v27;
          v27 = 0;
          if (!result)
            goto LABEL_21;
          v23 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
            goto LABEL_21;
          }
        }
        *(_DWORD *)result = v23;
      }
LABEL_21:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      goto LABEL_25;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 14;
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = v27;
    *(_BYTE *)a3 = 14;
    *(_QWORD *)(a3 + 8) = v24;
  }
  *(_BYTE *)(a3 + 16) = 1;
LABEL_25:
  if (*(_DWORD *)v15 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v21);
  *(_DWORD *)v15 -= 2;
  return result;
}

unint64_t WebCore::Document::lastModified@<X0>(WebCore::Document *this@<X0>, uint64_t **a2@<X8>)
{
  double v3;
  double v4;
  time_t v5;
  tm *v6;
  time_t v8;

  v3 = *((double *)this + 360);
  v4 = -9.22337204e18;
  if (v3 > -9.22337204e18)
    v4 = *((double *)this + 360);
  v5 = (uint64_t)v4;
  if (v3 >= 9.22337204e18)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  v8 = v5;
  v6 = localtime(&v8);
  return WTF::makeString<WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>>(0x200000030uLL, v6->tm_mon + 1, 47, 0x200000030, v6->tm_mday, 47, 0x400000030, v6->tm_year + 1900, a2, 32, 0x200000030, v6->tm_hour, 0, 58, 0x200000030, v6->tm_min, 0, 58, 0x200000030uLL,
           v6->tm_sec);
}

unint64_t WTF::makeString<WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>,char,WTF::PaddingSpecification<int>>@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, unsigned int a8@<W7>, uint64_t **a9@<X8>, char a10, uint64_t a11, unsigned int a12, int a13, char a14, uint64_t a15, unsigned int a16, int a17, char a18, unint64_t a19, unsigned int a20)
{
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  _BYTE *v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t **v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;

  v102 = result;
  v103 = a2;
  v100 = a4;
  v101 = a5;
  v98 = a7;
  v99 = a8;
  v96 = a11;
  v97 = a12;
  v94 = a15;
  v95 = a16;
  v92 = a19;
  v26 = HIDWORD(result);
  v93 = a20;
  if ((a2 & 0x80000000) != 0)
  {
    v80 = -a2;
    v27 = 1;
    do
    {
      ++v27;
      v78 = v80 >= 0xA;
      v80 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v27 = 0;
    v28 = a2;
    do
    {
      ++v27;
      v29 = v28 > 9;
      v28 /= 0xAu;
    }
    while (v29);
  }
  if (HIDWORD(result) <= v27)
    LODWORD(v26) = v27;
  if ((a5 & 0x80000000) != 0)
  {
    v81 = -a5;
    v30 = 1;
    do
    {
      ++v30;
      v78 = v81 >= 0xA;
      v81 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v30 = 0;
    v31 = a5;
    do
    {
      ++v30;
      v29 = v31 > 9;
      v31 /= 0xAu;
    }
    while (v29);
  }
  if (HIDWORD(a4) <= v30)
    v32 = v30;
  else
    v32 = HIDWORD(a4);
  if ((a8 & 0x80000000) != 0)
  {
    v82 = -a8;
    v33 = 1;
    do
    {
      ++v33;
      v78 = v82 >= 0xA;
      v82 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v33 = 0;
    v34 = a8;
    do
    {
      ++v33;
      v29 = v34 > 9;
      v34 /= 0xAu;
    }
    while (v29);
  }
  if (HIDWORD(a7) <= v33)
    v35 = v33;
  else
    v35 = HIDWORD(a7);
  if ((a12 & 0x80000000) != 0)
  {
    v83 = -a12;
    v36 = 1;
    do
    {
      ++v36;
      v78 = v83 >= 0xA;
      v83 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v36 = 0;
    v37 = a12;
    do
    {
      ++v36;
      v29 = v37 > 9;
      v37 /= 0xAu;
    }
    while (v29);
  }
  v38 = HIDWORD(a19);
  if (HIDWORD(a11) <= v36)
    v39 = v36;
  else
    v39 = HIDWORD(a11);
  if ((a16 & 0x80000000) != 0)
  {
    v84 = -a16;
    v40 = 1;
    do
    {
      ++v40;
      v78 = v84 >= 0xA;
      v84 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v40 = 0;
    v41 = a16;
    do
    {
      ++v40;
      v29 = v41 > 9;
      v41 /= 0xAu;
    }
    while (v29);
  }
  if (HIDWORD(a15) > v40)
    v40 = HIDWORD(a15);
  if ((a20 & 0x80000000) != 0)
  {
    v85 = -a20;
    v42 = 1;
    do
    {
      ++v42;
      v78 = v85 >= 0xA;
      v85 /= 0xAu;
    }
    while (v78);
  }
  else
  {
    v42 = 0;
    v43 = a20;
    do
    {
      ++v42;
      v29 = v43 > 9;
      v43 /= 0xAu;
    }
    while (v29);
  }
  if (HIDWORD(a19) <= v42)
    LODWORD(v38) = v42;
  if ((v38 & 0x80000000) == 0)
  {
    v44 = __OFADD__((_DWORD)v38, 1);
    v45 = v38 + 1;
    v46 = v44;
    if ((v40 & 0x80000000) == 0 && !v46)
    {
      v44 = __OFADD__(v40, v45);
      v47 = v40 + v45;
      if (!v44)
      {
        v44 = __OFADD__(v47, 1);
        v48 = v47 + 1;
        v49 = v44;
        if ((v39 & 0x80000000) == 0 && !v49)
        {
          v44 = __OFADD__(v39, v48);
          v50 = v39 + v48;
          if (!v44)
          {
            v44 = __OFADD__(v50, 1);
            v51 = v50 + 1;
            v52 = v44;
            if ((v35 & 0x80000000) == 0 && !v52)
            {
              v44 = __OFADD__(v35, v51);
              v53 = v35 + v51;
              if (!v44)
              {
                v44 = __OFADD__(v53, 1);
                v54 = v53 + 1;
                v55 = v44;
                if ((v32 & 0x80000000) == 0 && !v55)
                {
                  v44 = __OFADD__(v32, v54);
                  v56 = v32 + v54;
                  if (!v44)
                  {
                    v44 = __OFADD__(v56, 1);
                    v57 = v56 + 1;
                    v58 = v44;
                    if ((v26 & 0x80000000) == 0 && !v58)
                    {
                      v59 = (v26 + v57);
                      if (!__OFADD__((_DWORD)v26, v57))
                      {
                        v91 = a9;
                        if (!(_DWORD)v59)
                        {
                          v60 = (uint64_t *)MEMORY[0x1E0CBEF70];
                          *MEMORY[0x1E0CBEF70] += 2;
LABEL_93:
                          *v91 = v60;
                          return result;
                        }
                        if ((v59 & 0x80000000) == 0)
                        {
                          result = WTF::tryFastCompactMalloc((WTF *)(v59 + 20));
                          v60 = v110;
                          if (v110)
                          {
                            *(_DWORD *)v110 = 2;
                            *((_DWORD *)v60 + 1) = v59;
                            v60[1] = (uint64_t)v60 + 20;
                            *((_DWORD *)v60 + 4) = 4;
                            v104 = &v102;
                            v105 = a2;
                            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v104, (_BYTE *)v60 + 20);
                            v61 = v105;
                            if ((v105 & 0x80000000) != 0)
                            {
                              v86 = -(int)v105;
                              v62 = 1;
                              v63 = a16;
                              do
                              {
                                ++v62;
                                v78 = v86 >= 0xA;
                                v86 /= 0xAu;
                              }
                              while (v78);
                            }
                            else
                            {
                              v62 = 0;
                              v63 = a16;
                              do
                              {
                                ++v62;
                                v29 = v61 > 9;
                                v61 /= 0xAu;
                              }
                              while (v29);
                            }
                            v90 = v63;
                            LODWORD(v64) = *((_DWORD *)v104 + 1);
                            if (v64 <= v62)
                              v64 = v62;
                            else
                              v64 = v64;
                            v65 = (char *)v60 + v64 + 20;
                            *v65 = a3;
                            v66 = v65 + 1;
                            v106 = &v100;
                            v107 = a5;
                            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v106, v66);
                            v67 = v107;
                            if ((v107 & 0x80000000) != 0)
                            {
                              v87 = -(int)v107;
                              v68 = 1;
                              do
                              {
                                ++v68;
                                v78 = v87 >= 0xA;
                                v87 /= 0xAu;
                              }
                              while (v78);
                            }
                            else
                            {
                              v68 = 0;
                              do
                              {
                                ++v68;
                                v29 = v67 > 9;
                                v67 /= 0xAu;
                              }
                              while (v29);
                            }
                            LODWORD(v69) = *((_DWORD *)v106 + 1);
                            if (v69 <= v68)
                              v69 = v68;
                            else
                              v69 = v69;
                            v70 = &v66[v69];
                            *v70 = a6;
                            v71 = v70 + 1;
                            v108 = &v98;
                            v109 = a8;
                            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v108, v71);
                            v72 = v109;
                            if ((v109 & 0x80000000) != 0)
                            {
                              v88 = -(int)v109;
                              v73 = 1;
                              do
                              {
                                ++v73;
                                v78 = v88 >= 0xA;
                                v88 /= 0xAu;
                              }
                              while (v78);
                            }
                            else
                            {
                              v73 = 0;
                              do
                              {
                                ++v73;
                                v29 = v72 > 9;
                                v72 /= 0xAu;
                              }
                              while (v29);
                            }
                            LODWORD(v74) = *((_DWORD *)v108 + 1);
                            if (v74 <= v73)
                              v74 = v73;
                            else
                              v74 = v74;
                            v71[v74] = a10;
                            v75 = &v71[v74 + 1];
                            v110 = &v96;
                            v111 = a12;
                            WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v110, v75);
                            v76 = v111;
                            if ((v111 & 0x80000000) != 0)
                            {
                              v89 = -(int)v111;
                              v77 = 1;
                              do
                              {
                                ++v77;
                                v78 = v89 >= 0xA;
                                v89 /= 0xAu;
                              }
                              while (v78);
                            }
                            else
                            {
                              v77 = 0;
                              do
                              {
                                ++v77;
                                v78 = v76 >= 0xA;
                                v76 /= 0xAu;
                              }
                              while (v78);
                            }
                            LODWORD(v79) = *((_DWORD *)v110 + 1);
                            if (v79 <= v77)
                              v79 = v77;
                            else
                              v79 = v79;
                            v75[v79] = a14;
                            result = (unint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(&v75[v79 + 1], (uint64_t)&v94, v90, a18, (uint64_t)&v92, a20);
                            goto LABEL_93;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *a9 = 0;
  __break(0xC471u);
  return result;
}

void WebCore::Document::updateCachedCookiesEnabled(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  WTF *v14;
  void *v15;
  _QWORD *v16;

  v3 = *((_QWORD *)this + 66);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
  {
    ++*(_DWORD *)v6;
    if ((*(_QWORD *)(*((_QWORD *)v6 + 14) + 664) & 0x800000000000000) != 0
      && (WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2), v7)
      && *(_DWORD *)(v7 + 32) != 1)
    {
      v8 = *((_QWORD *)v6 + 111);
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      v10 = v9;
      if (v9)
      {
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 + 1, v9));
      }
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = &off_1E33A3860;
      v12[1] = v10;
      v16 = v12;
      (*(void (**)(uint64_t, WebCore::Document *, _QWORD **))(*(_QWORD *)v8 + 24))(v8, this, &v16);
      v13 = v16;
      v16 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
    else
    {
      *((_WORD *)this + 1744) = 256;
    }
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Page::~Page(v6);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  else
  {
    *((_WORD *)this + 1744) = 256;
  }
}

void WebCore::Document::setFirstPartyForCookies(WebCore::Document *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;

  if ((WTF::equal(*((WTF **)this + 126), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    v6 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 126);
    *((_QWORD *)this + 126) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)this + 1032) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 1016) = v8;
    WebCore::Document::updateCachedCookiesEnabled(this, v5);
  }
}

uint64_t WebCore::isValidNameNonASCII(uint64_t result, unint64_t a2, int32x4_t a3)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  unint64_t v8;
  char isValidNamePart;

  if (a2)
  {
    v4 = result;
    result = WebCore::isValidNameStart(*(unsigned __int8 *)result, a3);
    if ((_DWORD)result)
    {
      if (a2 >= 2)
      {
        result = WebCore::isValidNamePart(*(unsigned __int8 *)(v4 + 1), v5);
        if ((_DWORD)result)
        {
          v7 = 2;
          do
          {
            v8 = v7;
            if (a2 == v7)
              break;
            isValidNamePart = WebCore::isValidNamePart(*(unsigned __int8 *)(v4 + v7), v6);
            v7 = v8 + 1;
          }
          while ((isValidNamePart & 1) != 0);
          return v8 >= a2;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_WORD *WebCore::isValidNameASCII<char16_t>(_WORD *result, unint64_t a2)
{
  int v2;
  BOOL v3;
  unint64_t i;
  int v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if (a2)
  {
    if ((unsigned __int16)((*result | 0x20) - 97) < 0x1Au || (v2 = (unsigned __int16)*result, v2 == 95) || v2 == 58)
    {
      if (a2 >= 2)
      {
        v3 = 0;
        for (i = 1; i != a2; v3 = i >= a2)
        {
          v5 = (unsigned __int16)result[i];
          if ((v5 | 0x20u) - 97 >= 0x1A && (v5 - 48) >= 0xA)
          {
            v7 = v5 - 45;
            v8 = v7 > 0x32;
            v9 = (1 << v7) & 0x4000000002003;
            if (v8 || v9 == 0)
              break;
          }
          ++i;
        }
      }
      else
      {
        return (_WORD *)1;
      }
    }
    else
    {
      return 0;
    }
    return (_WORD *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::isValidNameNonASCII(uint64_t a1, unint64_t a2, int32x4_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  int v9;
  BOOL v10;
  int v11;

  if (!a2)
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = v5 + 1;
    result = *(unsigned __int16 *)(a1 + 2 * v5);
    if ((result & 0xFC00) == 0xD800 && v6 != a2)
      break;
LABEL_14:
    if (v5)
    {
      result = WebCore::isValidNamePart(result, a3);
      if (!(_DWORD)result)
        return result;
    }
    else if (!WebCore::isValidNameStart(result, a3))
    {
      return 0;
    }
    v5 = v6;
    if (v6 >= a2)
      return 1;
  }
  if (a2 > v6)
  {
    v9 = *(unsigned __int16 *)(a1 + 2 * v6);
    v10 = (v9 & 0xFC00) == 56320;
    v11 = v9 + ((_DWORD)result << 10) - 56613888;
    if (v10)
      v6 = v5 + 2;
    else
      v6 = v5 + 1;
    if (v10)
      LODWORD(result) = v11;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *WebCore::Document::parseQualifiedName@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>, int32x4_t a3@<Q0>)
{
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  unint64_t i;
  int v13;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int v27;
  int32x4_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  _QWORD v59[2];
  WTF::StringImpl *v60;
  _QWORD v61[2];
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (v6 = *(unsigned int *)(v5 + 4), !(_DWORD)v6))
  {
    *(_BYTE *)a2 = 3;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  v7 = this;
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(unsigned __int8 **)(v5 + 8);
  if ((v8 & 4) != 0)
  {
    v10 = *v9;
    if ((v10 | 0x20u) - 97 < 0x1A || v10 == 95)
    {
      if (v6 < 2)
        goto LABEL_18;
      v11 = 0;
      for (i = 1; i != v6; v11 = i >= v6)
      {
        v13 = v9[i];
        if ((v13 | 0x20u) - 97 >= 0x1A && (v13 - 48) >= 0xA)
        {
          v15 = v13 - 45;
          v16 = v15 > 0x32;
          v17 = (1 << v15) & 0x4000000000003;
          if (v16 || v17 == 0)
            break;
        }
        ++i;
      }
      if (v11)
      {
LABEL_18:
        *(_DWORD *)v5 += 2;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = v5;
        *(_DWORD *)(a2 + 16) = 0;
        return this;
      }
      v9 = *(unsigned __int8 **)(v5 + 8);
    }
    v19 = *v9;
  }
  else
  {
    v19 = *(unsigned __int16 *)v9;
  }
  if ((v19 & 0xFC00) == 0xD800 && (_DWORD)v6 != 1)
  {
    if (v6 < 2)
    {
      if (WebCore::isValidNameStart(v19, a3))
        goto LABEL_130;
LABEL_131:
      *(_DWORD *)v5 += 2;
      v69 = (WTF::StringImpl *)v5;
      WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>("Invalid qualified name start in '", 34, (uint64_t *)&v69, 39, &v70);
      v55 = v70;
      *(_BYTE *)a2 = 3;
      *(_QWORD *)(a2 + 8) = v55;
      *(_DWORD *)(a2 + 16) = 1;
      v70 = 0;
      this = v69;
      v69 = 0;
      if (!this)
        return this;
      goto LABEL_84;
    }
    if ((v8 & 4) != 0)
      v49 = v9[1];
    else
      v49 = *((unsigned __int16 *)v9 + 1);
    v50 = (v49 & 0xFC00) == 56320;
    v51 = v49 + (v19 << 10) - 56613888;
    if (v50)
      v22 = 2;
    else
      v22 = 1;
    if (v50)
      v19 = v51;
LABEL_29:
    if (WebCore::isValidNameStart(v19, a3))
    {
      if (v22 < v6)
      {
        while (1)
        {
          v21 = v22 + 1;
          if (v6 <= v22)
          {
            v24 = 0;
          }
          else
          {
            v9 = *(unsigned __int8 **)(v5 + 8);
            v24 = (v8 & 4) != 0 ? v9[v22] : *(unsigned __int16 *)&v9[2 * v22];
            if ((v24 & 0xFC00) != 0xD800 || (_DWORD)v21 == (_DWORD)v6)
            {
              if (v24 == 58)
                goto LABEL_47;
            }
            else if (v6 > v21)
            {
              if ((v8 & 4) != 0)
                v47 = v9[v21];
              else
                v47 = *(unsigned __int16 *)&v9[2 * v21];
              if ((v47 & 0xFC00) == 0xDC00)
              {
                LODWORD(v21) = v22 + 2;
                v24 = v47 + (v24 << 10) - 56613888;
              }
            }
          }
          if ((WebCore::isValidNamePart(v24, a3) & 1) == 0)
            break;
          v22 = v21;
          if (v21 >= v6)
            goto LABEL_130;
        }
LABEL_86:
        *(_DWORD *)v5 += 2;
        v67 = (WTF::StringImpl *)v5;
        WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>("Invalid qualified name part in '", 33, (uint64_t *)&v67, 39, &v68);
        this = v67;
        v45 = v68;
        *(_BYTE *)a2 = 3;
        *(_QWORD *)(a2 + 8) = v45;
        *(_DWORD *)(a2 + 16) = 1;
        v67 = 0;
        v68 = 0;
        if (!this)
          return this;
        goto LABEL_84;
      }
LABEL_130:
      *(_DWORD *)v5 += 2;
      v65 = 0;
      v66 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5;
      *(_DWORD *)(a2 + 16) = 0;
      return (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v65, v23);
    }
    goto LABEL_131;
  }
  LODWORD(v21) = 1;
  if (v19 != 58)
  {
    v22 = 1;
    goto LABEL_29;
  }
  v22 = 0;
LABEL_47:
  if (v21 < v6)
  {
    v26 = v21 + 1;
    if ((v8 & 4) != 0)
      v27 = v9[v21];
    else
      v27 = *(unsigned __int16 *)&v9[2 * v21];
    if ((v27 & 0xFC00) != 0xD800 || (_DWORD)v26 == (_DWORD)v6)
    {
      if (v27 == 58)
      {
LABEL_83:
        *(_DWORD *)v5 += 2;
        v71 = (WTF::StringImpl *)v5;
        WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,char>("Unexpected colon in qualified name '", 37, (uint64_t *)&v71, 39, &v72);
        this = v71;
        v44 = v72;
        *(_BYTE *)a2 = 3;
        *(_QWORD *)(a2 + 8) = v44;
        *(_DWORD *)(a2 + 16) = 1;
        v71 = 0;
        v72 = 0;
        if (!this)
          return this;
        goto LABEL_84;
      }
    }
    else if (v6 > v26)
    {
      if ((v8 & 4) != 0)
        v52 = v9[v26];
      else
        v52 = *(unsigned __int16 *)&v9[2 * v26];
      v53 = (v52 & 0xFC00) == 56320;
      v54 = v52 + (v27 << 10) - 56613888;
      if (v53)
        LODWORD(v26) = v21 + 2;
      if (v53)
        v27 = v54;
    }
    if (!WebCore::isValidNameStart(v27, a3))
      goto LABEL_131;
    if (v26 < v6)
    {
      do
      {
        v30 = v26 + 1;
        if (v6 <= v26)
        {
          v31 = 0;
        }
        else
        {
          v31 = (v8 & 4) != 0 ? v9[v26] : *(unsigned __int16 *)&v9[2 * v26];
          if ((v31 & 0xFC00) != 0xD800 || (_DWORD)v30 == (_DWORD)v6)
          {
            if (v31 == 58)
              goto LABEL_83;
          }
          else if (v6 > v30)
          {
            v48 = (v8 & 4) != 0 ? v9[v30] : *(unsigned __int16 *)&v9[2 * v30];
            if ((v48 & 0xFC00) == 0xDC00)
            {
              LODWORD(v30) = v26 + 2;
              v31 = v48 + (v31 << 10) - 56613888;
            }
          }
        }
        if (!WebCore::isValidNamePart(v31, v29))
          goto LABEL_86;
        LODWORD(v26) = v30;
      }
      while (v30 < v6);
    }
  }
  if (!v22 || v6 - v22 <= 1)
  {
    *(_DWORD *)v5 += 2;
    v63 = (WTF::StringImpl *)v5;
    WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((int8x16_t *)"Namespace in qualified name '", 30, (uint64_t *)&v63, (int8x16_t *)"' is too short", 15, &v64);
    this = v63;
    v46 = v64;
    *(_BYTE *)a2 = 3;
    *(_QWORD *)(a2 + 8) = v46;
    *(_DWORD *)(a2 + 16) = 1;
    v63 = 0;
    v64 = 0;
    if (!this)
      return this;
    goto LABEL_84;
  }
  if (v22 >= v6)
    v33 = v6;
  else
    v33 = v22;
  v61[0] = *(_QWORD *)(v5 + 8);
  v61[1] = v33 | ((unint64_t)((v8 >> 2) & 1) << 32);
  WTF::StringView::toAtomString((WTF::StringView *)v61, &v62);
  v56 = 0;
  v34 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
  {
    v35 = *(unsigned __int8 *)(v34 + 16);
    v36 = *(_QWORD *)(v34 + 8);
    LODWORD(v34) = *(_DWORD *)(v34 + 4);
    v56 = v36;
    v37 = (v35 >> 2) & 1;
  }
  else
  {
    LOBYTE(v37) = 1;
  }
  v57 = v34;
  v58 = v37;
  v59[0] = WTF::StringView::substring((const char *)&v56, v22 + 1, 0xFFFFFFFF);
  v59[1] = v38;
  WTF::StringView::toAtomString((WTF::StringView *)v59, &v60);
  v39 = v62;
  v62 = 0;
  v40 = v60;
  v60 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)a2 = v39;
  *(_QWORD *)(a2 + 8) = v40;
  *(_DWORD *)(a2 + 16) = 0;
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v65, v41);
  v43 = v60;
  v60 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  this = v62;
  v62 = 0;
  if (this)
  {
LABEL_84:
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v42);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

BOOL WebCore::isValidNameStart(unsigned int a1, int32x4_t a2)
{
  uint64_t v2;

  if (a1 == 58)
    return 1;
  a2.i32[0] = a1 & 0xFFFFFFDF;
  a2.i32[1] = a1;
  v2 = 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F0410, (uint32x4_t)vaddq_s32(vzip1q_s32(a2, vdupq_lane_s32(*(int32x2_t *)a2.i8, 1)), (int32x4_t)xmmword_1969F0400)))) & 1) == 0&& a1 != 95)
  {
    v2 = 1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1969F0430, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1969F0420)))) & 1) == 0&& a1 - 12289 >= 0xA7FF&& a1 - 63744 >= 0x4D0&& a1 - 65008 >= 0x20E&& (a1 & 0xFFFFFFFE) != 0x200C)
    {
      return a1 - 0x10000 < 0xE0000;
    }
  }
  return v2;
}

uint64_t WebCore::isValidNamePart(unsigned int a1, int32x4_t a2)
{
  BOOL isValidNameStart;
  _BOOL4 v4;

  isValidNameStart = WebCore::isValidNameStart(a1, a2);
  v4 = a1 - 48 < 0xA || a1 - 8255 < 2;
  if (a1 == 183)
    v4 = 1;
  if (a1 - 768 < 0x70)
    v4 = 1;
  if (isValidNameStart)
    v4 = 1;
  return a1 - 45 < 2 || v4;
}

__n128 WebCore::Document::baseURLForComplete@<Q0>(WebCore::Document *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  const WTF::URL *v3;
  uint64_t v6;
  WTF *v7;
  __n128 result;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v10;

  v3 = a2;
  if (!*(_QWORD *)a2
    || !*(_DWORD *)(*(_QWORD *)a2 + 4)
    || (v9 = (const WTF::StringImpl **)WTF::aboutBlankURL(this), WTF::equal(*(WTF **)v3, *v9, v10)))
  {
    v6 = WebCore::Document::parentDocument(this);
    if (v6)
      v3 = (const WTF::URL *)(v6 + 848);
  }
  v7 = *(WTF **)v3;
  if (*(_QWORD *)v3)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)a3 = v7;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)v3 + 8);
  result = *(__n128 *)((char *)v3 + 24);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::Document::completeURL@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, WTF::URL *a4@<X8>)
{
  return WebCore::Document::completeURL((WebCore::Document *)(a1 - 192), a2, a1 + 656, a3, a4);
}

int *WebCore::Document::maskedURLStringForBindings(WebCore::Document *this)
{
  return &WebCore::maskedURLString;
}

uint64_t *WebCore::Document::maskedURLForBindings(WebCore::Document *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::Document::maskedURLForBindings(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::Document::maskedURLForBindings(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Document::maskedURLForBindings(void)::$_0 &&>>);
  }
  return &WebCore::Document::maskedURLForBindings(void)::url;
}

uint64_t WebCore::Document::setBackForwardCacheState(uint64_t result, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  WebCore::Page *v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Thread *v27;
  unsigned __int8 *v28;
  int v30;
  unsigned __int8 *v31;
  uint64_t *v33;
  WTF::Thread *v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  WebCore::Style::Resolver *v46;
  WebCore::Style::CustomPropertyRegistry *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WebCore::ElementData **v51;
  uint64_t v52;
  WebCore::ElementData **v53;
  WebCore::ElementData *v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::Thread *v60;
  unsigned __int8 *v61;
  int v63;
  void *v65;
  int v66;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  if (*(unsigned __int8 *)(result + 3362) != (_DWORD)a2)
  {
    v2 = (_QWORD *)result;
    *(_BYTE *)(result + 3362) = (_BYTE)a2;
    v3 = *(_QWORD *)(result + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 288);
        v6 = v5 == 0;
        if (v5)
          ++*(_DWORD *)(v5 + 8);
        v7 = *(_QWORD *)(v4 + 24);
        if (v7)
        {
          v8 = *(WebCore::Page **)(v7 + 8);
          if (v8)
          {
            v9 = 0;
            ++*(_DWORD *)v8;
            if (!(_DWORD)a2)
            {
LABEL_28:
              if ((*(_BYTE *)(result + 70) & 8) != 0
                && ((*(_QWORD *)(result + 1536) & 0xFFFFFFFFFFFFLL) == 0
                 || *(double *)((*(_QWORD *)(result + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
              {
                *(_QWORD *)(result + 1528) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
                result = WebCore::TimerBase::setNextFireTime((uint64_t)(v2 + 188), v19 + 0.0);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v69 = v2[66];
                  if (v69)
                  {
                    v70 = *(_QWORD *)(v69 + 8);
                    if (v70)
                    {
                      v71 = *(_QWORD *)(v70 + 24);
                      if (v71)
                      {
                        v72 = *(_QWORD *)(v71 + 8);
                        if (v72)
                          goto LABEL_143;
                      }
                    }
                  }
                  v73 = v2[329];
                  if (v73)
                  {
                    v74 = *(_QWORD *)(v73 + 8);
                    if (v74)
                    {
                      v75 = *(_QWORD *)(v74 + 528);
                      if (v75)
                      {
                        v76 = *(_QWORD *)(v75 + 8);
                        if (v76)
                        {
                          v77 = *(_QWORD *)(v76 + 24);
                          if (v77)
                          {
                            v72 = *(_QWORD *)(v77 + 8);
                            if (v72)
LABEL_143:
                              result = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(*(WTF::StringImpl **)(*(_QWORD *)(v72 + 80) + 8), (WebCore::Document *)v2);
                          }
                        }
                      }
                    }
                  }
                }
              }
              v21 = v2[342];
              if (v21)
              {
                v22 = *(unsigned int **)v21;
                do
                  v23 = __ldaxr(v22);
                while (__stlxr(v23 + 1, v22));
                v24 = *(_QWORD *)(v2[5] + 8);
                v25 = *(_QWORD *)(v24 + 704);
                if (v25)
                {
                  v26 = *(_QWORD *)(v25 + 8);
                  if (v26)
                    v24 = v26;
                }
                v27 = (WTF::Thread *)(v24 + 192);
                v28 = (unsigned __int8 *)(v21 + 16);
                if (__ldaxr((unsigned __int8 *)(v21 + 16)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v28))
                {
                  goto LABEL_41;
                }
                MEMORY[0x19AEA534C](v21 + 16);
LABEL_41:
                WebCore::IDBClient::setMatchingItemsContextSuspended<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>(v27, (_QWORD *)(v21 + 24), 0);
                v30 = __ldxr(v28);
                if (v30 == 1)
                {
                  if (!__stlxr(0, v28))
                  {
LABEL_46:
                    v31 = (unsigned __int8 *)(v21 + 17);
                    if (__ldaxr((unsigned __int8 *)(v21 + 17)))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, v31))
                    {
LABEL_50:
                      v33 = (uint64_t *)(v21 + 32);
                      v34 = v27;
                      v35 = 0;
                      goto LABEL_115;
                    }
                    MEMORY[0x19AEA534C](v21 + 17);
                    goto LABEL_50;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)(v21 + 16));
                goto LABEL_46;
              }
LABEL_121:
              if ((v9 & 1) == 0)
              {
                if (*(_DWORD *)v8 == 1)
                {
                  WebCore::Page::~Page(v8);
                  result = WTF::fastFree(v67, v68);
                  if (v6)
                    return result;
                  goto LABEL_125;
                }
                --*(_DWORD *)v8;
              }
              if (v6)
                return result;
LABEL_125:
              if (*(_DWORD *)(v5 + 8) == 1)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
              --*(_DWORD *)(v5 + 8);
              return result;
            }
LABEL_12:
            if ((_DWORD)a2 != 2)
              goto LABEL_121;
            if (!v5)
              goto LABEL_74;
            *(_QWORD *)(v5 + 208) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 1);
            *(_QWORD *)(v5 + 216) = WebCore::ScrollView::unobscuredContentRect(v5, 0);
            *(_QWORD *)(v5 + 224) = v10;
            *(float *)(v5 + 232) = WebCore::ScrollView::exposedContentRect((WebCore::ScrollView *)v5);
            *(_DWORD *)(v5 + 236) = v11;
            *(_DWORD *)(v5 + 240) = v12;
            *(_DWORD *)(v5 + 244) = v13;
            if (!v8)
              goto LABEL_74;
            v14 = v2[66];
            if (v14)
              v14 = *(_QWORD *)(v14 + 8);
            if (*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) != v14)
              goto LABEL_74;
            WebCore::LocalFrameView::resetScrollbars((WebCore::LocalFrameView *)v5);
            if (!*(_BYTE *)(v5 + 318))
            {
              *(_BYTE *)(v5 + 318) = 1;
              if (*(_QWORD *)(v5 + 40))
                WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)v5, 0);
            }
            v79 = 0;
            WebCore::LocalFrameView::setContentsSize((WebCore::LocalFrameView *)v5, (const WebCore::IntSize *)&v79);
            if (*(_BYTE *)(v5 + 318))
            {
              *(_BYTE *)(v5 + 318) = 0;
              if (*(_QWORD *)(v5 + 40))
                WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)v5, 0);
            }
            v15 = WebCore::Page::scrollingCoordinator(v8);
            if (!v15)
            {
LABEL_74:
              v45 = v2[166];
              v46 = *(WebCore::Style::Resolver **)(v45 + 32);
              *(_QWORD *)(v45 + 32) = 0;
              if (v46)
                WTF::RefCounted<WebCore::Style::Resolver>::deref(v46);
              v47 = *(WebCore::Style::CustomPropertyRegistry **)(v45 + 296);
              result = (uint64_t)v47 + 16;
              v48 = *((_QWORD *)v47 + 2);
              if (v48 && *(_DWORD *)(v48 - 12))
              {
                WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear((WTF::StringImpl ***)result, a2);
                result = (uint64_t)WebCore::Style::CustomPropertyRegistry::invalidate(v47, MEMORY[0x1E0CBF2F8]);
              }
              v49 = *(_QWORD *)(v45 + 304);
              if (*(_QWORD *)v49 && *(_DWORD *)(*(_QWORD *)v49 - 12))
              {
                result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v45 + 304), a2);
                *(_BYTE *)(v49 + 8) = 1;
              }
              if ((v2[192] & 0xFFFFFFFFFFFFLL) != 0)
                result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 188));
              v50 = (WTF *)v2[326];
              v2[326] = 0;
              if (v50)
              {
                v51 = *(WebCore::ElementData ***)v50;
                if (*(_QWORD *)v50)
                {
                  v52 = *((unsigned int *)v51 - 1);
                  if ((_DWORD)v52)
                  {
                    v53 = *(WebCore::ElementData ***)v50;
                    do
                    {
                      v54 = *v53;
                      if (*v53 != (WebCore::ElementData *)-1)
                      {
                        *v53 = 0;
                        if (v54)
                        {
                          if (*(_DWORD *)v54 == 1)
                            WebCore::ElementData::destroy(v54, a2);
                          else
                            --*(_DWORD *)v54;
                        }
                      }
                      ++v53;
                      --v52;
                    }
                    while (v52);
                  }
                  WTF::fastFree((WTF *)(v51 - 2), a2);
                }
                result = WTF::fastFree(v50, a2);
              }
              if ((v2[323] & 0xFFFFFFFFFFFFLL) != 0)
                result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 319));
              v21 = v2[342];
              if (!v21)
                goto LABEL_121;
              v55 = *(unsigned int **)v21;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 + 1, v55));
              v57 = *(_QWORD *)(v2[5] + 8);
              v58 = *(_QWORD *)(v57 + 704);
              if (v58)
              {
                v59 = *(_QWORD *)(v58 + 8);
                if (v59)
                  v57 = v59;
              }
              v60 = (WTF::Thread *)(v57 + 192);
              v61 = (unsigned __int8 *)(v21 + 16);
              if (__ldaxr((unsigned __int8 *)(v21 + 16)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v61))
              {
                goto LABEL_105;
              }
              MEMORY[0x19AEA534C](v21 + 16);
LABEL_105:
              WebCore::IDBClient::setMatchingItemsContextSuspended<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBDatabase *>(v60, (_QWORD *)(v21 + 24), 1);
              v63 = __ldxr(v61);
              if (v63 == 1)
              {
                if (!__stlxr(0, v61))
                {
LABEL_110:
                  v31 = (unsigned __int8 *)(v21 + 17);
                  if (__ldaxr((unsigned __int8 *)(v21 + 17)))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v31))
                  {
LABEL_114:
                    v33 = (uint64_t *)(v21 + 32);
                    v34 = v60;
                    v35 = 1;
LABEL_115:
                    WebCore::IDBClient::setMatchingItemsContextSuspended<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBOpenDBRequest,WTF::RawPtrTraits<WebCore::IDBOpenDBRequest>,WTF::DefaultRefDerefTraits<WebCore::IDBOpenDBRequest>>>(v34, v33, v35);
                    v66 = __ldxr(v31);
                    if (v66 == 1)
                    {
                      if (!__stlxr(0, v31))
                        goto LABEL_120;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_120:
                    result = (uint64_t)WebCore::IDBClient::IDBConnectionProxy::deref((uint64_t *)v21, v65);
                    goto LABEL_121;
                  }
                  MEMORY[0x19AEA534C](v21 + 17);
                  goto LABEL_114;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)(v21 + 16));
              goto LABEL_110;
            }
            v16 = (_QWORD *)v15;
            v17 = *(_QWORD *)(v15 + 8);
            if (__ldaxr((unsigned __int8 *)v17))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v17))
            {
              goto LABEL_53;
            }
            MEMORY[0x19AEA534C](v17);
LABEL_53:
            ++*(_QWORD *)(v17 + 8);
            v36 = __ldxr((unsigned __int8 *)v17);
            if (v36 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v17))
              {
LABEL_58:
                v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[66] + 8) + 632) + 8);
                (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v16 + 272))(v16, *(_QWORD *)(v37 + 32), *(_QWORD *)(v37 + 40));
                v38 = v16[1];
                if (__ldaxr((unsigned __int8 *)v38))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v38))
                {
                  goto LABEL_62;
                }
                MEMORY[0x19AEA534C](v38);
LABEL_62:
                v40 = *(_QWORD *)(v38 + 8);
                v41 = v40 - 1;
                *(_QWORD *)(v38 + 8) = v40 - 1;
                if (v40 == 1)
                {
                  v78 = *(_QWORD *)(v38 + 16);
                  v42 = *(_QWORD *)(v38 + 24);
                  *(_QWORD *)(v38 + 24) = 0;
                  v43 = v78 != 0;
                }
                else
                {
                  v42 = 0;
                  v43 = 1;
                }
                v44 = __ldxr((unsigned __int8 *)v38);
                if (v44 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v38))
                  {
LABEL_69:
                    if (!v41)
                    {
                      if (v42)
                        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
                      if (!v43)
                        WTF::fastFree((WTF *)v38, a2);
                    }
                    goto LABEL_74;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v38);
                goto LABEL_69;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
            goto LABEL_58;
          }
        }
        else
        {
          v8 = 0;
        }
        v9 = 1;
        if (!(_DWORD)a2)
          goto LABEL_28;
        goto LABEL_12;
      }
    }
    v8 = 0;
    v5 = 0;
    v9 = 1;
    v6 = 1;
    if (!(_DWORD)a2)
      goto LABEL_28;
    goto LABEL_12;
  }
  return result;
}

WTF *WebCore::Document::suspend(WTF *result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Page *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WebCore::Document *v27;
  _QWORD *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)result + 3412))
  {
    v3 = (uint64_t)result;
    WebCore::Document::documentWillBecomeInactive(*((WebCore::RenderLayerCompositor **)result + 66));
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v38, (uint64_t *)(v3 + 1840));
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v36, (uint64_t *)(v3 + 1840));
    v4 = *((_QWORD *)&v38 + 1);
    v5 = v37;
    if (*((_QWORD *)&v38 + 1) != v37)
    {
      v6 = v39;
      v7 = v38;
      do
      {
        v8 = *(WebCore::Node **)(*(_QWORD *)v4 + 8);
        *((_DWORD *)v8 + 6) += 2;
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v8 + 712))(v8);
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
        *((_QWORD *)&v38 + 1) = v4 + 8;
        v9 = v6;
        if (v4 + 8 != (_QWORD)v6)
        {
          v9 = v4 + 8;
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 += 8;
            if (v9 == (_QWORD)v6)
            {
              v9 = v6;
              break;
            }
          }
          *((_QWORD *)&v38 + 1) = v9;
        }
        v4 = *((_QWORD *)&v6 + 1);
        if (v9 != *((_QWORD *)&v6 + 1))
        {
          while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
          {
            v10 = v9 + 8;
            *((_QWORD *)&v38 + 1) = v10;
            v9 = v6;
            if (v10 != (_QWORD)v6)
            {
              v9 = v10;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                *((_QWORD *)&v38 + 1) = v9;
                if (v9 == (_QWORD)v6)
                {
                  v9 = v6;
                  break;
                }
              }
            }
            if (v9 == *((_QWORD *)&v6 + 1))
            {
              v4 = *((_QWORD *)&v6 + 1);
              goto LABEL_22;
            }
          }
          v4 = v9;
        }
LABEL_22:
        ++*(_DWORD *)(v7 + 8);
      }
      while (v4 != v5);
    }
    v11 = *(_QWORD *)(v3 + 528);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(WebCore::Page **)(v13 + 8);
          if (v14)
          {
            ++*(_DWORD *)v14;
            WebCore::Page::lockAllOverlayScrollbarsToHidden(v14, 1);
            if (*(_DWORD *)v14 == 1)
            {
              WebCore::Page::~Page(v14);
              WTF::fastFree(v32, v33);
            }
            else
            {
              --*(_DWORD *)v14;
            }
          }
        }
      }
    }
    v15 = *(_QWORD *)(v3 + 1944);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 16) + 1;
      *(_DWORD *)(v15 + 16) = v16;
      v17 = *(_QWORD *)(v15 + 400);
      if (v17 && *(_BYTE *)(v17 + 195) && (*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v17 + 16));
        v16 = *(_DWORD *)(v15 + 16);
      }
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1959938E0);
      }
      *(_DWORD *)(v15 + 16) = v16 - 1;
    }
    v18 = *(unsigned int **)(v3 + 3144);
    if (v18)
    {
      v19 = v18 + 2;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 32))(v18);
      do
      {
        v21 = __ldaxr(v19);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v19));
      if (!v22)
      {
        atomic_store(1u, v19);
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v34 = off_1E33604F8;
        v34[1] = v19;
        *(_QWORD *)&v38 = v34;
        WTF::ensureOnMainRunLoop();
        v35 = v38;
        *(_QWORD *)&v38 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
    }
    if (a2 == 2 && (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 696) & 0x80) != 0)
    {
      v23 = *(_DWORD **)(v3 + 2960);
      if (v23)
      {
        if (!*(_BYTE *)(v3 + 3406) && !*(_BYTE *)(v3 + 3412))
        {
          ++v23[2];
          v24 = *(_OWORD *)(v3 + 432);
          v38 = *(_OWORD *)(v3 + 416);
          v39 = v24;
          (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)v23 + 112))(v23, &v38);
          if (v23[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
          else
            --v23[2];
          v26 = *(_DWORD **)(v3 + 2960);
          *(_QWORD *)(v3 + 2960) = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
          WebCore::Document::updateServiceWorkerClientData((_QWORD *)v3, v25);
        }
      }
    }
    WebCore::Document::suspendScheduledTasks(v3, a2);
    v28 = *(_QWORD **)(v3 + 528);
    if (v28)
      v28 = (_QWORD *)v28[1];
    v29 = (WTF *)v28[36];
    if (v29)
      ++*((_DWORD *)v29 + 2);
    v30 = v28[37];
    if (v30)
    {
      *(_DWORD *)(v30 + 24) += 2;
      result = WebCore::LocalFrame::clearTimers(v29, (WebCore::DocumentTimelinesController **)v30, v27);
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v30);
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    else
    {
      result = WebCore::LocalFrame::clearTimers(v29, 0, v27);
    }
    if (v29)
    {
      if (*((_DWORD *)v29 + 2) == 1)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 8))(v29);
      else
        --*((_DWORD *)v29 + 2);
    }
    *(_BYTE *)(v3 + 3414) = 0;
    if ((*(_QWORD *)(v3 + 2528) & 0xFFFFFFFFFFFFLL) != 0)
      result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 2496));
    v31 = *(_QWORD *)(v3 + 2656);
    if (v31 && !*(_BYTE *)(v31 + 80))
    {
      if ((*(_QWORD *)(v31 + 40) & 0xFFFFFFFFFFFFLL) != 0)
        result = (WTF *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v31 + 8));
      *(_BYTE *)(v31 + 80) = 1;
    }
    *(_BYTE *)(v3 + 3412) = 1;
  }
  return result;
}

WTF::MonotonicTime *WebCore::Document::resume(WTF::MonotonicTime *result, int a2)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WebCore::Node *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::RenderLayerCompositor *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Page *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::MonotonicTime *v25;
  int v26;
  WTF::MonotonicTime *v27;
  __int128 v28;
  _DWORD *v29;
  WTF *v30;
  void *v31;
  uint64_t *v32[5];
  WTF *v33[2];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)result + 3412))
  {
    v3 = (uint64_t)result;
    v33[0] = 0;
    v33[1] = 0;
    WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>&&)#1},WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t *)v33, (uint64_t)result + 1840);
    v5 = v33[0];
    if (HIDWORD(v33[1]))
    {
      v6 = 8 * HIDWORD(v33[1]);
      v7 = v6;
      v8 = v33[0];
      do
      {
        v9 = *(WebCore::Node **)v8;
        *((_DWORD *)v9 + 6) = *(_DWORD *)(*(_QWORD *)v8 + 24) + 2;
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v9 + 720))(v9);
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
        v8 = (WTF *)((char *)v8 + 8);
        v7 -= 8;
      }
      while (v7);
      v10 = v5;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
        v10 = (WTF *)((char *)v10 + 8);
        v6 -= 8;
      }
      while (v6);
    }
    if (v5)
      WTF::fastFree(v5, v4);
    v12 = *(_QWORD *)(v3 + 1944);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 16) = v13;
      v14 = *(WebCore::RenderLayerCompositor **)(v12 + 400);
      if (v14)
      {
        WebCore::RenderLayerCompositor::setIsInWindow(v14, 1);
        v13 = *(_DWORD *)(v12 + 16);
      }
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195993CD4);
      }
      *(_DWORD *)(v12 + 16) = v13 - 1;
    }
    v15 = *(_QWORD *)(v3 + 528);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          v18 = *(WebCore::Page **)(v17 + 8);
          if (v18)
          {
            ++*(_DWORD *)v18;
            WebCore::Page::lockAllOverlayScrollbarsToHidden(v18, 0);
            if (*(_DWORD *)v18 == 1)
            {
              WebCore::Page::~Page(v18);
              WTF::fastFree(v30, v31);
            }
            else
            {
              --*(_DWORD *)v18;
            }
          }
        }
      }
    }
    v19 = *(_QWORD *)(v3 + 2936);
    if (v19 && *(_BYTE *)(v19 + 80))
    {
      *(_QWORD *)(v19 + 72) = 0x7FF8000000000000;
      *(_BYTE *)(v19 + 80) = 0;
      v20 = (uint64_t *)(v19 + 16);
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v19 + 16), (uint64_t **)v33);
      WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v20, v32);
      while (v33[1] != (WTF *)v32[1])
      {
        WebCore::DocumentTimeline::resumeAnimations(*(WebCore::DocumentTimeline **)(*(_QWORD *)v33[1] + 8));
        WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v33);
      }
    }
    result = (WTF::MonotonicTime *)WebCore::Document::resumeScheduledTasks(v3, a2);
    *(_BYTE *)(v3 + 3414) = 1;
    v21 = *(_QWORD *)(v3 + 2656);
    if (v21)
    {
      if (*(_BYTE *)(v21 + 80))
      {
        if (!*(_BYTE *)(v21 + 81))
        {
          *(_BYTE *)(v21 + 80) = 0;
          if (*(_DWORD *)(v21 + 76))
          {
            v22 = v21 + 8;
            *(_QWORD *)(v21 + 32) = 0;
            WTF::MonotonicTime::now(result);
            result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v22, v23 + 0.0);
          }
        }
      }
    }
    *(_BYTE *)(v3 + 3412) = 0;
    if (a2 == 2 && (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 696) & 0x80) != 0)
    {
      if (!WebCore::sharedProvider)
      {
        __break(0xC471u);
        JUMPOUT(0x195993CF4);
      }
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 16))(WebCore::sharedProvider);
      v25 = result;
      v26 = *((_DWORD *)result + 2);
      *((_DWORD *)result + 2) = v26 + 1;
      v27 = *(WTF::MonotonicTime **)(v3 + 2960);
      if (v27 == result || *(_BYTE *)(v3 + 3406) || *(_BYTE *)(v3 + 3412))
      {
        if (v26)
          *((_DWORD *)result + 2) = v26;
        else
          return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        if (v27)
        {
          ++*((_DWORD *)v27 + 2);
          v28 = *(_OWORD *)(v3 + 432);
          *(_OWORD *)v33 = *(_OWORD *)(v3 + 416);
          v34 = v28;
          (*(void (**)(WTF::MonotonicTime *, WTF **))(*(_QWORD *)v27 + 112))(v27, v33);
          if (*((_DWORD *)v27 + 2) == 1)
            (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v27 + 8))(v27);
          else
            --*((_DWORD *)v27 + 2);
        }
        v29 = *(_DWORD **)(v3 + 2960);
        *(_QWORD *)(v3 + 2960) = v25;
        if (v29)
        {
          if (v29[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
          else
            --v29[2];
        }
        return (WTF::MonotonicTime *)WebCore::Document::updateServiceWorkerClientData((_QWORD *)v3, v24);
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::privateBrowsingStateDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(a1 + 2912);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = a2 >= 0 || a2 == -1;
    if (*(_QWORD *)(v4 + 16) == a1)
      *(_BYTE *)(v4 + 12) = v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E33A3888;
  v10[1] = a2;
  v14 = v10;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E33A3658;
  v11[1] = &v14;
  v15 = v11;
  WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 1856), &v15);
  v12 = v15;
  v15 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebCore::Document::registerForCaptionPreferencesChangedCallbacks(WebCore::Document *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  WebCore::PageGroup *v9;
  WebCore::CaptionUserPreferencesMediaAF *v10;
  WebCore::CaptionUserPreferencesMediaAF *v11;
  _DWORD *v12;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];

  v4 = *((_QWORD *)this + 66);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(WebCore::Page **)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          v8 = *((_QWORD *)v7 + 66);
          if (!v8 || (v9 = *(WebCore::PageGroup **)(v8 + 8)) == 0)
          {
            WebCore::Page::initGroup(v7);
            v16 = *((_QWORD *)v7 + 66);
            if (v16)
              v9 = *(WebCore::PageGroup **)(v16 + 8);
            else
              v9 = 0;
          }
          v10 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v9 + 5);
          if (!v10)
          {
            v11 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
            v10 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v11, v9);
            v12 = (_DWORD *)*((_QWORD *)v9 + 5);
            *((_QWORD *)v9 + 5) = v10;
            if (v12)
            {
              if (v12[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
                v10 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v9 + 5);
              }
              else
              {
                --v12[2];
              }
            }
          }
          (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v10 + 128))(v10);
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Page::~Page((uint64_t)v7);
            WTF::fastFree(v14, v15);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
      }
    }
  }
  return WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLMediaElement>((uint64_t)this + 1872, a2, (uint64_t)v17);
}

uint64_t WebCore::Document::setShouldCreateRenderers(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3377) = a2;
  return this;
}

uint64_t WebCore::Document::execCommand@<X0>(WebCore::Document *a1@<X0>, const WTF::String *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  int *v6;
  int *v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD v31[2];
  WebCore::Node *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;

  if ((*((_WORD *)a1 + 1679) & 3) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 8;
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  v31[0] = a2;
  v31[1] = a1;
  v11 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v11 == -1)
    goto LABEL_41;
  v5 = a3;
  v37 = (WTF::StringImpl *)v31;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))off_1E33A38C8[v11])(&v34, &v37, a4);
  if (!v36)
  {
    v6 = &dword_1ECE90000;
    v7 = &webThreadDelegateMessageScopeCount;
      goto LABEL_37;
    v14 = qword_1EE2F5808 + 1;
    goto LABEL_8;
  }
  if (v36 != 1)
  {
LABEL_41:
    do
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      qword_1EE2F5808 = 0;
      v14 = 1;
      *((_BYTE *)v6 + 1384) = 1;
LABEL_8:
      v7[514] = v14;
      WebCore::command((WebCore *)v31, a1, a2, v5);
    }
    while (v36);
    v15 = v34;
    v34 = 0;
    v37 = v15;
    *(_BYTE *)a5 = WebCore::Editor::Command::execute((WebCore::Editor::Command *)v31, (const WTF::String *)&v37, 0);
    *(_DWORD *)(a5 + 16) = 0;
    v17 = v37;
    v37 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v33;
    v33 = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v26 = off_1E31FE290;
        *((_QWORD *)v26 + 1) = v19;
        v37 = v26;
        WTF::ensureOnMainThread();
        v27 = v37;
        v37 = 0;
        if (v27)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    result = (uint64_t)v32;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v32, v16);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    if ((v6[346] & 1) != 0)
    {
      v23 = v7[514] - 1;
      v7[514] = v23;
      if (v23)
        goto LABEL_23;
      v24 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
      v25 = dword_1EE2F5804;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      if (!(_DWORD)v25)
      {
        if (!v24)
          goto LABEL_23;
        goto LABEL_35;
      }
      v28 = 0;
      v29 = 16 * v25;
      v30 = (_DWORD *)((char *)v24 + 16 * v25);
      do
      {
        result = WebCore::ScopedEventQueue::dispatchEvent(result, (WTF *)((char *)v24 + v28));
        v28 += 16;
      }
      while (v29 != v28);
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v24, v30);
      if (v24)
LABEL_35:
        result = WTF::fastFree(v24, v16);
    }
    else
    {
      unk_1EE2F5800 = 0;
      qword_1EE2F5808 = 0;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      *((_BYTE *)v6 + 1384) = 1;
      LODWORD(qword_1EE2F5808) = -1;
    }
LABEL_23:
    v13 = v36;
    if (v36 == -1)
      return result;
    return ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E33A33B0[v13])(v31, &v34);
  }
  v12 = v35;
  v35 = 0;
  *(_BYTE *)a5 = (_BYTE)v34;
  *(_QWORD *)(a5 + 8) = v12;
  v13 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E33A33B0[v13])(v31, &v34);
}

unsigned int *WebCore::command(WebCore *this, WebCore::Document *a2, const WTF::String *a3, int a4)
{
  unsigned int *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  WebCore::Editor *v23;
  WebCore::Editor *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;

  *((_DWORD *)a2 + 6) += 2;
  result = (unsigned int *)WebCore::Document::updateStyleIfNeeded(a2);
  v10 = *((_QWORD *)a2 + 66);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (*(WebCore::Document **)(v11 + 296) == a2)
    {
      v14 = *((_QWORD *)a2 + 382);
      if (!v14)
      {
        v26 = (unsigned int *)(v11 + 8);
        v23 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v23, a2);
        v24 = (WebCore::Editor *)*((_QWORD *)a2 + 382);
        *((_QWORD *)a2 + 382) = v23;
        if (v24)
        {
          WebCore::Editor::~Editor(v24, v9);
          if (*(_DWORD *)v25)
          {
            *(_QWORD *)(v25 + 496) = 0;
            *(_OWORD *)(v25 + 464) = 0u;
            *(_OWORD *)(v25 + 480) = 0u;
            *(_OWORD *)(v25 + 432) = 0u;
            *(_OWORD *)(v25 + 448) = 0u;
            *(_OWORD *)(v25 + 400) = 0u;
            *(_OWORD *)(v25 + 416) = 0u;
            *(_OWORD *)(v25 + 368) = 0u;
            *(_OWORD *)(v25 + 384) = 0u;
            *(_OWORD *)(v25 + 336) = 0u;
            *(_OWORD *)(v25 + 352) = 0u;
            *(_OWORD *)(v25 + 304) = 0u;
            *(_OWORD *)(v25 + 320) = 0u;
            *(_OWORD *)(v25 + 272) = 0u;
            *(_OWORD *)(v25 + 288) = 0u;
            *(_OWORD *)(v25 + 240) = 0u;
            *(_OWORD *)(v25 + 256) = 0u;
            *(_OWORD *)(v25 + 208) = 0u;
            *(_OWORD *)(v25 + 224) = 0u;
            *(_OWORD *)(v25 + 176) = 0u;
            *(_OWORD *)(v25 + 192) = 0u;
            *(_OWORD *)(v25 + 144) = 0u;
            *(_OWORD *)(v25 + 160) = 0u;
            *(_OWORD *)(v25 + 112) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(_OWORD *)(v25 + 80) = 0u;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_OWORD *)(v25 + 16) = 0u;
            *(_OWORD *)(v25 + 32) = 0u;
            *(_OWORD *)v25 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v25, v9);
          }
        }
        v14 = *((_QWORD *)a2 + 382);
        v12 = v26;
      }
      if (a4)
        v15 = 2;
      else
        v15 = 1;
      result = (unsigned int *)WebCore::internalCommand(a3, (unint64_t)v9);
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8);
      *(_QWORD *)this = result;
      *((_BYTE *)this + 8) = v15;
      if (result)
      {
        *(_DWORD *)(v16 + 24) += 2;
        *((_QWORD *)this + 2) = v16;
        v17 = *(_QWORD *)(v16 + 528);
        if (v17)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (v17)
          {
            v18 = (unsigned int *)(v17 + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
          }
        }
      }
      else
      {
        v17 = 0;
        *((_QWORD *)this + 2) = 0;
      }
      *((_QWORD *)this + 3) = v17;
    }
    else
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    do
    {
      v20 = __ldaxr(v12);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v12));
    if (!v21)
    {
      atomic_store(1u, v12);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E31FE290;
      v22[1] = v12;
      v27 = (uint64_t)v22;
      WTF::ensureOnMainThread();
      result = (unsigned int *)v27;
      if (v27)
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, v9);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

unsigned int *WebCore::Document::queryCommandEnabled@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *result;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 v17;
  WebCore::Node *v18;
  uint64_t v19;
  _QWORD *v20;

  if ((*((_WORD *)this + 1679) & 3) == 0)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::command((WebCore *)&v16, this, a2, 0);
  v5 = v16;
  if (v16)
  {
    v6 = v17;
    if (v17 - 1 < 2)
    {
      v7 = v19;
      v8 = (*(uint64_t (**)(uint64_t))(v16 + 8))(v19);
      if (!v8)
        goto LABEL_11;
      if (!v7)
        goto LABEL_10;
LABEL_9:
      LOBYTE(v8) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v7, 0, v6);
      goto LABEL_11;
    }
    if (!v17)
    {
      v7 = v19;
      if (v19)
        goto LABEL_9;
    }
  }
LABEL_10:
  LOBYTE(v8) = 0;
LABEL_11:
  *(_BYTE *)a3 = v8;
  *(_DWORD *)(a3 + 16) = 0;
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v10;
      v20 = v14;
      WTF::ensureOnMainThread();
      v15 = v20;
      v20 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  result = (unsigned int *)v18;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v18, v4);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Document::queryCommandIndeterm@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  WebCore::Node *v17;
  uint64_t v18;
  _QWORD *v19;

  if ((*((_WORD *)this + 1679) & 3) == 0)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::command((WebCore *)&v15, this, a2, 0);
  v5 = v15;
  if (!v15)
    goto LABEL_10;
  if (v16 - 1 >= 2)
  {
    if (v16)
      goto LABEL_10;
    v6 = v18;
    if (!v18)
      goto LABEL_10;
LABEL_9:
    v7 = (*(unsigned int (**)(uint64_t, _QWORD))(v5 + 24))(v6, 0) == 2;
    goto LABEL_11;
  }
  v6 = v18;
  if ((*(unsigned int (**)(uint64_t))(v15 + 8))(v18) && v6)
    goto LABEL_9;
LABEL_10:
  v7 = 0;
LABEL_11:
  *(_BYTE *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  v8 = v18;
  v18 = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v9;
      v19 = v13;
      WTF::ensureOnMainThread();
      v14 = v19;
      v19 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  result = (unsigned int *)v17;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v17, v4);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Document::queryCommandState@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  WebCore::Node *v17;
  uint64_t v18;
  _QWORD *v19;

  if ((*((_WORD *)this + 1679) & 3) == 0)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::command((WebCore *)&v15, this, a2, 0);
  v5 = v15;
  if (!v15)
    goto LABEL_10;
  if (v16 - 1 >= 2)
  {
    if (v16)
      goto LABEL_10;
    v6 = v18;
    if (!v18)
      goto LABEL_10;
LABEL_9:
    v7 = (*(unsigned int (**)(uint64_t, _QWORD))(v5 + 24))(v6, 0) == 1;
    goto LABEL_11;
  }
  v6 = v18;
  if ((*(unsigned int (**)(uint64_t))(v15 + 8))(v18) && v6)
    goto LABEL_9;
LABEL_10:
  v7 = 0;
LABEL_11:
  *(_BYTE *)a3 = v7;
  *(_DWORD *)(a3 + 16) = 0;
  v8 = v18;
  v18 = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v9;
      v19 = v13;
      WTF::ensureOnMainThread();
      v14 = v19;
      v19 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  result = (unsigned int *)v17;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v17, v4);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Document::queryCommandSupported@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  WebCore::Node *v15;
  uint64_t v16;
  _QWORD *v17;

  if ((*((_WORD *)this + 1679) & 3) != 0)
  {
    WebCore::command((WebCore *)&v13, this, a2, 0);
    if (v13)
    {
      if (v14 - 1 >= 2)
        v5 = v14 == 0;
      else
        v5 = (*(uint64_t (**)(uint64_t))(v13 + 8))(v16);
    }
    else
    {
      v5 = 0;
    }
    *(_BYTE *)a3 = v5;
    *(_DWORD *)(a3 + 16) = 0;
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v11 = off_1E31FE290;
        v11[1] = v7;
        v17 = v11;
        WTF::ensureOnMainThread();
        v12 = v17;
        v17 = 0;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
      }
    }
    result = (unsigned int *)v15;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v15, v4);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::Document::queryCommandValue@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *@<X8>);
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  uint64_t (*v13)(WebCore *, WebCore::LocalFrame *, WebCore::Event *);
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 v17;
  WebCore::Node *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  if ((*((_WORD *)this + 1679) & 3) == 0)
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::command((WebCore *)&v16, this, a2, 0);
  v5 = v16;
  if (v16)
  {
    if (v17 - 1 < 2)
    {
      v6 = v19;
      if (!(*(unsigned int (**)(uint64_t))(v16 + 8))(v19) || !v6)
        goto LABEL_11;
LABEL_9:
      v7 = *(void (**)(_QWORD *@<X8>))(v5 + 32);
      if (v7 != WebCore::valueNull
        || (v13 = *(uint64_t (**)(WebCore *, WebCore::LocalFrame *, WebCore::Event *))(v5 + 24),
            v13 == WebCore::stateNone))
      {
        ((void (*)(_QWORD **__return_ptr, uint64_t, _QWORD))v7)(&v20, v6, 0);
        v8 = v20;
      }
      else
      {
        ((uint64_t (*)(uint64_t, _QWORD))v13)(v6, 0);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = v21;
      }
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 16) = 0;
      v19 = 0;
      v20 = 0;
      goto LABEL_12;
    }
    if (!v17)
    {
      v6 = v19;
      if (v19)
        goto LABEL_9;
    }
  }
LABEL_11:
  v6 = v19;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v19 = 0;
  v20 = 0;
  if (v6)
  {
LABEL_12:
    v9 = (unsigned int *)(v6 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v9;
      v21 = v14;
      WTF::ensureOnMainThread();
      v15 = v21;
      v21 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  result = (unsigned int *)v18;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v18, v4);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Document::setTransformSource(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  xmlDocPtr *v3;
  void *v4;

  v2 = *a2;
  *a2 = 0;
  v3 = *(xmlDocPtr **)(result + 1624);
  *(_QWORD *)(result + 1624) = v2;
  if (v3)
  {
    xmlFreeDoc(*v3);
    return WTF::fastFree((WTF *)v3, v4);
  }
  return result;
}

uint64_t WebCore::Document::designMode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  _DWORD *v3;

  v2 = &WebCore::offAtomData;
  if (*(_BYTE *)(this + 3361))
    v2 = &WebCore::onAtomData;
  v3 = (_DWORD *)*v2;
  if (v3)
    *v3 += 2;
  *a2 = v3;
  return this;
}

WTF::StringImpl *WebCore::Document::setDesignMode(WTF::StringImpl *this, const WTF::String *a2)
{
  WebCore::Document *v2;
  uint64_t v3;
  BOOL v4;
  double v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || *(_DWORD *)(v3 + 4) != 2)
    goto LABEL_2;
  v7 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v7 & 0xFFDF) == 0x4F)
    {
      v8 = *(unsigned __int16 *)(v7 + 2);
      goto LABEL_11;
    }
LABEL_2:
    v4 = 0;
    goto LABEL_3;
  }
  if ((*(_BYTE *)v7 & 0xDF) != 0x4F)
    goto LABEL_2;
  v8 = *(unsigned __int8 *)(v7 + 1);
LABEL_11:
  v4 = (v8 & 0xFFFFFFDF) == 78;
LABEL_3:
  *((_BYTE *)this + 3361) = v4;
  *((_BYTE *)this + 3390) = 1;
  if (((*((_QWORD *)this + 192) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 192) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    && !*((_BYTE *)this + 3362))
  {
    *((_QWORD *)this + 191) = 0;
    WTF::MonotonicTime::now(this);
    this = (WTF::StringImpl *)WebCore::TimerBase::setNextFireTime((uint64_t)v2 + 1504, v5 + 0.0);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v9 = *((_QWORD *)v2 + 66);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
              return WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(*(WTF::StringImpl **)(*(_QWORD *)(v12 + 80) + 8), v2);
          }
        }
      }
      v13 = *((_QWORD *)v2 + 329);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 528);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 24);
              if (v17)
              {
                v12 = *(_QWORD *)(v17 + 8);
                if (v12)
                  return WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(*(WTF::StringImpl **)(*(_QWORD *)(v12 + 80) + 8), v2);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::Document::ensureModuleLoader(WebCore::Document *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore::ScriptModuleLoader *v6;
  WTF *v7;
  void *v8;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  v4 = v2;
  *v2 = off_1E3393AD0;
  if (this)
  {
    v14 = v2;
    v5 = *((_QWORD *)this + 37);
    if (v5)
      goto LABEL_17;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = (char *)this + 288;
    v11 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v5;
    if (!v11)
      goto LABEL_17;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v3);
    }
    v5 = *((_QWORD *)this + 37);
    if (v5)
    {
LABEL_17:
      do
        v10 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v10 + 1, (unsigned int *)v5));
    }
    v4 = v14;
  }
  else
  {
    v5 = 0;
  }
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = v5;
  *(_QWORD *)((char *)v4 + 29) = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = 0;
  v4[7] = 0;
  v6 = (WebCore::ScriptModuleLoader *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = v4;
  if (v6)
  {
    WebCore::ScriptModuleLoader::~ScriptModuleLoader(v6, v3);
    WTF::fastFree(v7, v8);
    return (_QWORD *)*((_QWORD *)this + 200);
  }
  return v4;
}

WTF::StringImpl *WebCore::Document::createAttribute@<X0>(WebCore::Document *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  uint64_t v5;
  unint64_t v6;
  _WORD *v8;
  unsigned int v9;
  BOOL v10;
  unint64_t i;
  int v12;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  _DWORD *v21;
  WTF::StringImpl *result;
  WTF *v23;
  void *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  BOOL v28;
  unint64_t j;
  int v30;
  unsigned int v32;
  uint64_t v33;
  unint64_t v35;
  const WTF::AtomString *v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  const WTF::AtomString *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 isValidNameStart;
  int32x4_t v51;
  int isValidNamePart;
  int32x4_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  WTF::StringImpl *v57;
  WebCore::QualifiedName::QualifiedNameImpl *v58;
  unint64_t v59;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    LODWORD(v6) = 0;
    goto LABEL_34;
  }
  v6 = *(unsigned int *)(v5 + 4);
  if (!(_DWORD)v6)
    goto LABEL_93;
  v8 = *(_WORD **)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    v9 = *(unsigned __int8 *)v8;
    if ((v9 | 0x20) - 97 >= 0x1A && v9 != 95 && v9 != 58)
      goto LABEL_96;
    if (v6 >= 2)
    {
      v10 = 0;
      for (i = 1; i != v6; v10 = i >= v6)
      {
        v12 = *((unsigned __int8 *)v8 + i);
        if ((v12 | 0x20u) - 97 >= 0x1A && (v12 - 48) >= 0xA)
        {
          v14 = v12 - 45;
          v15 = v14 > 0x32;
          v16 = (1 << v14) & 0x4000000002003;
          if (v15 || v16 == 0)
            break;
        }
        ++i;
      }
      if (!v10)
      {
LABEL_96:
        v47 = a2;
        v48 = *(unsigned int *)(v5 + 4);
        v49 = *(_QWORD *)(v5 + 8);
        isValidNameStart = WebCore::isValidNameStart(v9, a4);
        LODWORD(v6) = v48;
        if (!isValidNameStart)
          goto LABEL_89;
        a2 = v47;
        if (v48 >= 2)
        {
          isValidNamePart = WebCore::isValidNamePart(*(unsigned __int8 *)(v49 + 1), v51);
          LODWORD(v6) = v48;
          if (!isValidNamePart)
            goto LABEL_89;
          v54 = 2;
          do
          {
            v55 = v54;
            if (v48 == v54)
              break;
            v56 = WebCore::isValidNamePart(*(unsigned __int8 *)(v49 + v54), v53);
            v54 = v55 + 1;
          }
          while ((v56 & 1) != 0);
          LODWORD(v6) = v48;
          a2 = v47;
          if (v55 < v48)
          {
LABEL_89:
            *(_DWORD *)v5 += 2;
            if ((v6 & 0x80000000) == 0)
              goto LABEL_34;
LABEL_90:
            v59 = 0;
            do
            {
              __break(0xC471u);
LABEL_92:
              __break(1u);
LABEL_93:
              *(_DWORD *)v5 += 2;
LABEL_34:
              v25 = __OFADD__((_DWORD)v6, 1);
              LODWORD(v6) = v6 + 1;
              if (v25 || __OFADD__((_DWORD)v6, 25))
                goto LABEL_90;
              v26 = !v5 || (*(_BYTE *)(v5 + 16) & 4) != 0;
              result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((v6 + 25), v26, "Invalid qualified name: '", 0x19u, v5, 39, &v59);
              v6 = v59;
            }
            while (!v59);
            *(_BYTE *)a3 = 3;
            *(_QWORD *)(a3 + 8) = v6;
            *(_DWORD *)(a3 + 16) = 1;
            v59 = 0;
            if (v5)
            {
              if (*(_DWORD *)v5 != 2)
              {
                *(_DWORD *)v5 -= 2;
                return result;
              }
              result = (WTF::StringImpl *)v5;
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    if ((unsigned __int16)((*v8 | 0x20) - 97) >= 0x1Au)
    {
      v27 = (unsigned __int16)*v8;
      if (v27 != 95 && v27 != 58)
        goto LABEL_62;
    }
    if (v6 >= 2)
    {
      v28 = 0;
      for (j = 1; j != v6; v28 = j >= v6)
      {
        v30 = (unsigned __int16)v8[j];
        if ((v30 | 0x20u) - 97 >= 0x1A && (v30 - 48) >= 0xA)
        {
          v32 = v30 - 45;
          v15 = v32 > 0x32;
          v33 = (1 << v32) & 0x4000000002003;
          if (v15 || v33 == 0)
            break;
        }
        ++j;
      }
      if (!v28)
      {
LABEL_62:
        v35 = 0;
        do
        {
          v36 = a2;
          v37 = v35 + 1;
          v38 = v8;
          v39 = (unsigned __int16)v8[v35];
          v40 = v6;
          if ((v39 & 0xFC00) == 0xD800 && v37 != v6)
          {
            if (v37 >= v6)
              goto LABEL_92;
            v42 = (unsigned __int16)v8[v37];
            v43 = (v42 & 0xFC00) == 56320;
            v44 = v42 + (v39 << 10) - 56613888;
            if (v43)
              v37 = v35 + 2;
            else
              v37 = v35 + 1;
            if (v43)
              v39 = v44;
          }
          if (v35)
          {
            v45 = WebCore::isValidNamePart(v39, a4);
            a2 = v36;
            v6 = v40;
            v8 = v38;
            if (!v45)
              goto LABEL_89;
          }
          else
          {
            v46 = WebCore::isValidNameStart(v39, a4);
            a2 = v36;
            v6 = v40;
            v8 = v38;
            if (!v46)
              goto LABEL_89;
          }
          v35 = v37;
        }
        while (v37 < v6);
      }
    }
  }
  if ((*((_WORD *)this + 1679) & 1) != 0)
  {
    WTF::AtomString::convertToASCIILowercase(a2);
  }
  else
  {
    *(_DWORD *)v5 += 2;
    v57 = (WTF::StringImpl *)v5;
  }
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v58, MEMORY[0x1E0CBF2F8], &v57, MEMORY[0x1E0CBF2F8]);
  v18 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v18 + 24) = 0x200000000002;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = (char *)this + 96;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)v18 = off_1E33A0600;
  *(_QWORD *)(v18 + 80) = 0;
  v20 = (WTF::StringImpl **)v58;
  if (v58)
    ++*(_DWORD *)v58;
  *(_QWORD *)(v18 + 88) = v20;
  v21 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v21 += 2;
  *(_QWORD *)(v18 + 96) = v21;
  *(_QWORD *)(v18 + 104) = 0;
  *(_QWORD *)a3 = v18;
  *(_DWORD *)(a3 + 16) = 0;
  v58 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  result = v57;
  v57 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Document::createAttributeNS@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::AtomString *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v16;
  void *v17;
  WebCore::Document *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;

  WebCore::Document::parseQualifiedName(a2, a3, (uint64_t)&v19, a6);
  v9 = v21;
  if (!v21)
  {
    v11 = v19;
    v19 = 0;
    if ((a4 & 1) != 0)
      goto LABEL_13;
    v12 = *(_QWORD *)(v11 + 16);
    if ((!v12 || !*(_DWORD *)(v12 + 4) || *(_QWORD *)(v11 + 32))
      && (v12 != WebCore::xmlAtomData || *(_QWORD *)(v11 + 32) == WebCore::XMLNames::xmlNamespaceURI))
    {
      if (v12 == WebCore::xmlnsAtomData
        || (!v12 || !*(_DWORD *)(v12 + 4)) && *(_QWORD *)(v11 + 24) == WebCore::xmlnsAtomData)
      {
        if (*(_QWORD *)(v11 + 32) == WebCore::XMLNSNames::xmlnsNamespaceURI)
        {
LABEL_13:
          v13 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v13 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v13 + 24) = 0x200000000002;
          *(_QWORD *)(v13 + 32) = 0;
          *(_QWORD *)(v13 + 40) = (char *)this + 96;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          ++*((_DWORD *)this + 831);
          *(_QWORD *)v13 = off_1E33A0600;
          *(_QWORD *)(v13 + 80) = 0;
          if (v11)
            ++*(_DWORD *)v11;
          *(_QWORD *)(v13 + 88) = v11;
          v14 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
          if (*MEMORY[0x1E0CBF3B8])
            *v14 += 2;
          *(_QWORD *)(v13 + 96) = v14;
          *(_QWORD *)(v13 + 104) = 0;
          *(_QWORD *)a5 = v13;
          *(_DWORD *)(a5 + 16) = 0;
          if (!v11)
            return ((uint64_t (*)(char *, uint64_t *))off_1E33A33C0[v9])(&v22, &v19);
          goto LABEL_18;
        }
      }
      else if (*(_QWORD *)(v11 + 32) != WebCore::XMLNSNames::xmlnsNamespaceURI)
      {
        goto LABEL_13;
      }
    }
    *(_BYTE *)a5 = 11;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
LABEL_18:
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v11);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v11;
    }
    return ((uint64_t (*)(char *, uint64_t *))off_1E33A33C0[v9])(&v22, &v19);
  }
  if (v21 == 1)
  {
    v10 = v20;
    v20 = 0;
    *(_BYTE *)a5 = v19;
    *(_QWORD *)(a5 + 8) = v10;
    *(_DWORD *)(a5 + 16) = 1;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E33A33C0[v9])(&v22, &v19);
  }
  v18 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Document::svgExtensions(v18);
}

uint64_t WebCore::Document::svgExtensions(WebCore::Document *this)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  WebCore::SVGDocumentExtensions *v13;
  WTF *v14;
  void *v15;

  if (!*((_QWORD *)this + 226))
  {
    v3 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v3 = 0;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *(_QWORD *)(v3 + 8) = v4;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v6 = 0;
    *(_QWORD *)(v3 + 48) = v6;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    v8 = *((_QWORD *)this + 66);
    v12 = !v8
       || (v9 = *(_QWORD *)(v8 + 8)) == 0
       || (v10 = *(_QWORD *)(v9 + 24)) == 0
       || (v11 = *(_QWORD *)(v10 + 8)) == 0
       || (*(_WORD *)(v11 + 658) & 4) == 0
       || *(_BYTE *)(v11 + 545) == 0;
    *(_BYTE *)(v3 + 72) = v12;
    v13 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)this + 226);
    *((_QWORD *)this + 226) = v3;
    if (v13)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v13, v7);
      if (*(_DWORD *)v14)
      {
        *((_OWORD *)v14 + 3) = 0u;
        *((_OWORD *)v14 + 4) = 0u;
        *((_OWORD *)v14 + 1) = 0u;
        *((_OWORD *)v14 + 2) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree(v14, v15);
      }
    }
  }
  return *((_QWORD *)this + 226);
}

void WebCore::Document::checkedSVGExtensions(WebCore::Document *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WebCore::SVGDocumentExtensions *v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;

  if (!*((_QWORD *)this + 226))
  {
    v17 = a2;
    v4 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)v4 = 0;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    *(_QWORD *)(v4 + 8) = v5;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v7 = 0;
    *(_QWORD *)(v4 + 48) = v7;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    v9 = *((_QWORD *)this + 66);
    v13 = !v9
       || (v10 = *(_QWORD *)(v9 + 8)) == 0
       || (v11 = *(_QWORD *)(v10 + 24)) == 0
       || (v12 = *(_QWORD *)(v11 + 8)) == 0
       || (*(_WORD *)(v12 + 658) & 4) == 0
       || *(_BYTE *)(v12 + 545) == 0;
    *(_BYTE *)(v4 + 72) = v13;
    v14 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)this + 226);
    *((_QWORD *)this + 226) = v4;
    a2 = v17;
    if (v14)
    {
      WebCore::SVGDocumentExtensions::~SVGDocumentExtensions(v14, v8);
      if (*(_DWORD *)v15)
      {
        *((_OWORD *)v15 + 3) = 0u;
        *((_OWORD *)v15 + 4) = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        *((_OWORD *)v15 + 2) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree(v15, v16);
      }
      a2 = v17;
    }
  }
  v3 = (_DWORD *)*((_QWORD *)this + 226);
  *a2 = v3;
  ++*v3;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)0>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  BOOL v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = v13 & (*((_DWORD *)v11 + 4) >> 8);
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = *v15 == 0;
  v18 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (v19)
  {
LABEL_24:
    *v15 = 0;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v24 = *v10;
    if (*v10)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v27 = *v10;
    if (*v10)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_38;
    }
    else
    {
      if (3 * v30 > 4 * v29)
      {
LABEL_38:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x200;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_39;
      }
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_45;
      }
    }
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_45:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v31, (uint64_t)v15);
    goto LABEL_38;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v15;
    if (v16 != 255)
    {
      v22 = v20;
      if (v17 && v18 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v21) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = *v15 == 0;
    v18 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v21;
    if (*v15)
      v23 = 0;
    else
      v23 = v18 == 0;
    v20 = v22;
    if (v23)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v22;
      }
      goto LABEL_24;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_39:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::applets@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 2) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 2;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x202;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)result = off_1E33A38E8;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 2 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)1>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 1) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    v23 = 1;
    *v15 = 1;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v24 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v24 - 12) + 1;
    *(_DWORD *)(v24 - 12) = v23;
    v25 = *v10;
    if (*v10)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v28 = (*(_DWORD *)(v25 - 16) + v26);
    v29 = *(unsigned int *)(v25 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_38;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_38:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x201;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_39;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_45;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v29));
LABEL_45:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_38;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 1 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_39:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)6>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 6) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 6;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x206;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 6 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)4>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 4) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 4;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x2C4;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 4 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)3>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 3) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 3;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x203;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 3 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)5>@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 5) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (v18)
  {
LABEL_25:
    *v15 = 5;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *v10;
    if (*v10)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_39;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x265;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B3320;
        *(_QWORD *)(result + 8) = 0;
        *((_QWORD *)v15 + 2) = result;
        goto LABEL_40;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
        goto LABEL_46;
      }
    }
    v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_46:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v10, v30, (uint64_t)v15);
    goto LABEL_39;
  }
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = v19;
    v19 = v15;
    if (v16 != 255)
    {
      v19 = v21;
      if (v16 == 5 && v17 == v11)
        break;
    }
    v14 = ((_DWORD)v14 + v20) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    ++v20;
    if (*v15)
      v22 = 0;
    else
      v22 = v17 == 0;
    if (v22)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
      goto LABEL_25;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(_QWORD *)(v12 + 24 * v14 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_40:
  *a3 = result;
  return result;
}

void WebCore::Document::all(WebCore::Document *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::NodeListsNodeData **v4;
  WebCore::NodeListsNodeData *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  WTF::StringImpl *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v4 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v4)
  {
    WebCore::Node::materializeRareData(this);
    v4 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v5 = WebCore::NodeRareData::ensureNodeLists(v4);
  v7 = (uint64_t *)((char *)v5 + 32);
  LOBYTE(v28) = 7;
  v8 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v29 = v8;
  v9 = *v7;
  if (*v7
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)v5 + 4, 0), (v9 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = ((*((_DWORD *)v8 + 4) >> 8) + 7) & v10;
  v12 = (unsigned __int8 *)(v9 + 24 * v11);
  v13 = *v12;
  v14 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  if (*v12)
    v15 = 0;
  else
    v15 = v14 == 0;
  if (!v15)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v13 == 255)
      {
        v16 = v12;
      }
      else if (v13 == 7 && v14 == v8)
      {
        v18 = 1;
        goto LABEL_16;
      }
      v11 = (v11 + v17) & v10;
      v12 = (unsigned __int8 *)(v9 + 24 * v11);
      v13 = *v12;
      v14 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
      ++v17;
      if (*v12)
        v21 = 0;
      else
        v21 = v14 == 0;
    }
    while (!v21);
    if (v16)
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      --*(_DWORD *)(*v7 - 16);
      v12 = v16;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>::translate<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,std::pair<unsigned char,WTF::AtomString>,decltype(nullptr)>((uint64_t)v12, (WTF::StringImpl *)&v28);
  v22 = *v7;
  if (*v7)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v7;
  if (*v7)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_39;
LABEL_43:
    v12 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v7, (uint64_t)v12);
    goto LABEL_39;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_43;
LABEL_39:
  v18 = 0;
LABEL_16:
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v18)
  {
    v20 = *((_QWORD *)v12 + 2);
    ++*(_DWORD *)(v20 + 16);
  }
  else
  {
    WebCore::HTMLAllCollection::create((uint64_t)this, 7u, &v28);
    v20 = v28;
    *((_QWORD *)v12 + 2) = v28;
  }
  *a2 = v20;
}

uint64_t WebCore::Document::allFilteredByName@<X0>(WebCore::Document *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v32;

  v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v6;
  if (!*v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v6;
    *v6 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v6;
    }
  }
  v11 = (uint64_t *)(v7 + 32);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v7 + 32), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 10) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (v19)
  {
LABEL_25:
    *v16 = 10;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)v16 + 2) = 0;
    v24 = *v11;
    if (*v11)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v27 = *v11;
    if (*v11)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_39;
    }
    else
    {
      if (3 * v30 > 4 * v29)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x24A;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        *(_QWORD *)result = off_1E33B33F0;
        *(_QWORD *)(result + 8) = 0;
        v31 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v31 += 2;
        *(_QWORD *)(result + 88) = v31;
        *((_QWORD *)v16 + 2) = result;
        goto LABEL_42;
      }
      if (!(_DWORD)v30)
      {
        v32 = 8;
        goto LABEL_48;
      }
    }
    v32 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_48:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v11, v32, (uint64_t)v16);
    goto LABEL_39;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v20;
    v20 = v16;
    if (v17 != 255)
    {
      v20 = v22;
      if (v17 == 10 && v18 == v12)
        break;
    }
    v15 = ((_DWORD)v15 + v21) & v14;
    v16 = (unsigned __int8 *)(v13 + 24 * v15);
    v17 = *v16;
    v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
    ++v21;
    if (*v16)
      v23 = 0;
    else
      v23 = v18 == 0;
    if (v23)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        --*(_DWORD *)(*v11 - 16);
        v16 = (unsigned __int8 *)v20;
      }
      goto LABEL_25;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = *(_QWORD *)(v13 + 24 * v15 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_42:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::windowNamedItems@<X0>(WebCore::Document *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v32;

  v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v6;
  if (!*v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v6;
    *v6 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v6;
    }
  }
  v11 = (uint64_t *)(v7 + 32);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v7 + 32), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 8) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (v19)
  {
LABEL_25:
    *v16 = 8;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)v16 + 2) = 0;
    v24 = *v11;
    if (*v11)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v27 = *v11;
    if (*v11)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_39;
    }
    else
    {
      if (3 * v30 > 4 * v29)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x248;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        v31 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v31 += 2;
        *(_QWORD *)(result + 88) = v31;
        *(_QWORD *)result = off_1E33A3950;
        *((_QWORD *)v16 + 2) = result;
        goto LABEL_42;
      }
      if (!(_DWORD)v30)
      {
        v32 = 8;
        goto LABEL_48;
      }
    }
    v32 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_48:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v11, v32, (uint64_t)v16);
    goto LABEL_39;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v20;
    v20 = v16;
    if (v17 != 255)
    {
      v20 = v22;
      if (v17 == 8 && v18 == v12)
        break;
    }
    v15 = ((_DWORD)v15 + v21) & v14;
    v16 = (unsigned __int8 *)(v13 + 24 * v15);
    v17 = *v16;
    v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
    ++v21;
    if (*v16)
      v23 = 0;
    else
      v23 = v18 == 0;
    if (v23)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        --*(_DWORD *)(*v11 - 16);
        v16 = (unsigned __int8 *)v20;
      }
      goto LABEL_25;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = *(_QWORD *)(v13 + 24 * v15 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_42:
  *a3 = result;
  return result;
}

uint64_t WebCore::Document::documentNamedItems@<X0>(WebCore::Document *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v32;

  v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v6;
  if (!*v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v6;
    *v6 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v6;
    }
  }
  v11 = (uint64_t *)(v7 + 32);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v7 + 32), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 9) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (v19)
  {
LABEL_25:
    *v16 = 9;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)v16 + 2) = 0;
    v24 = *v11;
    if (*v11)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v27 = *v11;
    if (*v11)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_39;
    }
    else
    {
      if (3 * v30 > 4 * v29)
      {
LABEL_39:
        result = bmalloc::api::isoAllocate();
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 1;
        *(_BYTE *)(result + 20) = 0;
        *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0x249;
        *((_DWORD *)this + 6) += 2;
        *(_QWORD *)(result + 24) = this;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_BYTE *)(result + 80) &= 0xFCu;
        v31 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v31 += 2;
        *(_QWORD *)(result + 88) = v31;
        *(_QWORD *)result = off_1E33A39B8;
        *((_QWORD *)v16 + 2) = result;
        goto LABEL_42;
      }
      if (!(_DWORD)v30)
      {
        v32 = 8;
        goto LABEL_48;
      }
    }
    v32 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_48:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(v11, v32, (uint64_t)v16);
    goto LABEL_39;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v20;
    v20 = v16;
    if (v17 != 255)
    {
      v20 = v22;
      if (v17 == 9 && v18 == v12)
        break;
    }
    v15 = ((_DWORD)v15 + v21) & v14;
    v16 = (unsigned __int8 *)(v13 + 24 * v15);
    v17 = *v16;
    v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
    ++v21;
    if (*v16)
      v23 = 0;
    else
      v23 = v18 == 0;
    if (v23)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        --*(_DWORD *)(*v11 - 16);
        v16 = (unsigned __int8 *)v20;
      }
      goto LABEL_25;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = *(_QWORD *)(v13 + 24 * v15 + 16);
  ++*(_DWORD *)(result + 16);
LABEL_42:
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::Document::getElementsByName@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X1>, WebCore::NameNodeList **a3@<X8>)
{
  WebCore::NodeListsNodeData **v6;
  WebCore::NodeListsNodeData *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  WTF::StringImpl *v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  WTF::StringImpl *result;
  WebCore::NameNodeList *v26;
  unsigned __int8 *v27;
  int v28;
  BOOL v29;
  WebCore::NameNodeList *v30;
  WTF::StringImpl *v31;

  v6 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = WebCore::NodeRareData::ensureNodeLists(v6);
  v9 = (uint64_t *)((char *)v7 + 16);
  LOBYTE(v30) = 0;
  v10 = *a2;
  if (*a2)
    *(_DWORD *)v10 += 2;
  v31 = v10;
  v11 = *v9;
  if (*v9
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)v7 + 2, 0), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = v12 & (*((_DWORD *)v10 + 4) >> 8);
  v14 = (unsigned __int8 *)(v11 + 24 * v13);
  v15 = *v14;
  v16 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
  if (*v14)
    v17 = 0;
  else
    v17 = v16 == 0;
  if (!v17)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v15 == 255)
      {
        v27 = v14;
      }
      else if (!v15 && v16 == v10)
      {
        v24 = 1;
        goto LABEL_20;
      }
      v13 = (v13 + v28) & v12;
      v14 = (unsigned __int8 *)(v11 + 24 * v13);
      v15 = *v14;
      v16 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
      ++v28;
      if (*v14)
        v29 = 0;
      else
        v29 = v16 == 0;
    }
    while (!v29);
    if (v27)
    {
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = v27;
    }
  }
  WTF::GenericHashTraits<std::pair<unsigned char,WTF::AtomString>>::assignToEmpty<std::pair<unsigned char,WTF::AtomString>,std::pair<unsigned char,WTF::AtomString>>((uint64_t)v14, (WTF::StringImpl *)&v30);
  *((_QWORD *)v14 + 2) = 0;
  v18 = *v9;
  if (*v9)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v9;
  if (*v9)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_19;
LABEL_29:
    v14 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v9, v14);
    goto LABEL_19;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_29;
LABEL_19:
  v24 = 0;
LABEL_20:
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  if (v24)
  {
    v26 = (WebCore::NameNodeList *)*((_QWORD *)v14 + 2);
    ++*((_DWORD *)v26 + 4);
  }
  else
  {
    result = WebCore::NameNodeList::create(this, (WebCore::ContainerNode *)a2, &v30);
    v26 = v30;
    *((_QWORD *)v14 + 2) = v30;
  }
  *a3 = v26;
  return result;
}

BOOL WebCore::Document::isTelephoneNumberParsingEnabled(WebCore::Document *this)
{
  return (*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 0x2000000000000) != 0 && *((_BYTE *)this + 3445) != 0;
}

uint64_t WebCore::Document::isTelephoneNumberParsingAllowed(WebCore::Document *this)
{
  return *((unsigned __int8 *)this + 3445);
}

uint64_t WebCore::Document::originIdentifierForPasteboard@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::SecurityOriginData *v8;
  _QWORD *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t WeakRandomUUIDVersion4;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
  v6 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v6 == 1)
    goto LABEL_23;
  if ((_DWORD)v6 == -1)
  {
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::makeString<WTF::ASCIILiteral,WTF::UUID>(v17, v18, v19, v20, v21);
  }
  v7 = v5;
  v8 = (WebCore::SecurityOriginData *)(v5 + 8);
  v23 = (WTF::StringImpl *)&v22;
  v9 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v23, v5 + 8);
  if (MEMORY[0x19AEA53F4](*v9, "file", 4) && *(_BYTE *)(v7 + 59))
LABEL_23:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString(v8, &v23);
  result = MEMORY[0x19AEA53F4](v23, "null", 4);
  if ((result & 1) == 0)
  {
    *a3 = v23;
    return result;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  if (!v12)
  {
    WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)result);
    WTF::makeString<WTF::ASCIILiteral,WTF::UUID>((uint64_t)"null:", 6, WeakRandomUUIDVersion4, v14, &v22);
    v12 = v22;
    v22 = 0;
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 162);
    *((_QWORD *)this + 162) = v12;
    if (!v15)
      goto LABEL_11;
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v11);
      v15 = v22;
      v22 = 0;
      if (!v15)
        goto LABEL_10;
      v16 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v11);
        goto LABEL_10;
      }
    }
    *(_DWORD *)v15 = v16;
LABEL_10:
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 162);
LABEL_11:
    if (!v12)
      goto LABEL_13;
  }
  *(_DWORD *)v12 += 2;
LABEL_13:
  *a3 = v12;
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::UUID>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v7[2];
  uint64_t v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7[0] = a3;
  v7[1] = a4;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::UUID>(v8, v7, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::Document::createExpression@<X0>(uint64_t a1@<X0>, void *a2@<X1>, const WTF::StringImpl *a3@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, float a8@<S2>)
{
  _DWORD *v12;
  void *v13;
  WTF *v14;

  if (!*(_QWORD *)(a1 + 1800))
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)4);
    *v12 = 1;
    v14 = *(WTF **)(a1 + 1800);
    *(_QWORD *)(a1 + 1800) = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v13);
      else
        --*(_DWORD *)v14;
    }
  }
  return WebCore::XPathEvaluator::createExpression(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WebCore::Document::createNSResolver@<X0>(WebCore::Document *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t result;

  if (!*((_QWORD *)this + 225))
  {
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)4);
    *v7 = 1;
    v8 = (WTF *)*((_QWORD *)this + 225);
    *((_QWORD *)this + 225) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v6);
      else
        --*(_DWORD *)v8;
    }
  }
  *((_DWORD *)a2 + 6) += 2;
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3483B50;
  *(_QWORD *)(result + 16) = a2;
  *a3 = result;
  return result;
}

void WebCore::Document::evaluate(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int16 *a3@<X2>, BOOL *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, float a9@<S2>)
{
  _DWORD *v15;
  void *v16;
  WTF *v17;

  if (!*(_QWORD *)(a1 + 1800))
  {
    v15 = (_DWORD *)WTF::fastMalloc((WTF *)4);
    *v15 = 1;
    v17 = *(WTF **)(a1 + 1800);
    *(_QWORD *)(a1 + 1800) = v15;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v16);
      else
        --*(_DWORD *)v17;
    }
  }
  WebCore::XPathEvaluator::evaluate(a2, a3, a4, a5, a6, a7, a8, a9);
}

WebCore::ContentSecurityPolicy **std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100](WebCore::ContentSecurityPolicy **a1, WTF::StringImpl *a2)
{
  WebCore::ContentSecurityPolicy *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v3, a2);
    if (atomic_load((unsigned int *)v4))
    {
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
    }
    else
    {
      WTF::fastFree(v4, v5);
    }
  }
  return a1;
}

uint64_t WebCore::Document::inheritPolicyContainerFrom(WebCore::Document *this, WTF::StringImpl **a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::ContentSecurityPolicy *v9;
  WTF *v10;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;

  v4 = (WTF::StringImpl **)((char *)this + 192);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  if (v5)
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v6 = *(_OWORD *)((char *)this + 760);
  v14 = *(_OWORD *)((char *)this + 744);
  v15 = v6;
  v7 = WTF::fastMalloc((WTF *)0xF0);
  WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v7, (uint64_t *)&v13, (uint64_t)v4);
  v9 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v7;
  if (v9)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v9, v8);
    if (atomic_load((unsigned int *)v10))
    {
      *((_OWORD *)v10 + 13) = 0u;
      *((_OWORD *)v10 + 14) = 0u;
      *((_OWORD *)v10 + 11) = 0u;
      *((_OWORD *)v10 + 12) = 0u;
      *((_OWORD *)v10 + 9) = 0u;
      *((_OWORD *)v10 + 10) = 0u;
      *((_OWORD *)v10 + 7) = 0u;
      *((_OWORD *)v10 + 8) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      *((_OWORD *)v10 + 6) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *(_OWORD *)v10 = 0u;
    }
    else
    {
      WTF::fastFree(v10, v8);
    }
  }
  *((_BYTE *)this + 281) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WebCore::SecurityContext::inheritPolicyContainerFrom(v4, a2);
}

uint64_t `non-virtual thunk to'WebCore::Document::inheritPolicyContainerFrom(WebCore::Document *this, WTF::StringImpl **a2)
{
  return WebCore::Document::inheritPolicyContainerFrom((WebCore::Document *)((char *)this - 192), a2);
}

BOOL WebCore::Document::shouldForceNoOpenerBasedOnCOOP(WebCore::Document *this)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  WebCore::Document *v6;
  WTF::StringImpl *v7;
  WebCore::SecurityOrigin *v8;
  WebCore::SecurityOrigin *v9;
  WTF::StringImpl *v10;
  const WebCore::SecurityOrigin *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 672) & 4) == 0)
    return 0;
  v1 = this;
  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    v13 = *((_QWORD *)this + 66);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 120);
        if (v15)
        {
          for (i = *(_QWORD *)(v15 + 8); i; i = *(_QWORD *)(v19 + 8))
          {
            this = *(WebCore::Document **)(*(_QWORD *)(i + 40) + 8);
            v17 = *((_QWORD *)this + 66);
            if (!v17)
              break;
            v18 = *(_QWORD *)(v17 + 8);
            if (!v18)
              break;
            v19 = *(_QWORD *)(v18 + 120);
            if (!v19)
              break;
          }
        }
      }
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 66);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
        if (v4)
          v5 = *(_BYTE *)(v4 + 144) == 0;
        else
          v5 = 0;
        if (v5)
        {
          v6 = *(WebCore::Document **)(v4 + 296);
          if (v6)
            this = v6;
        }
      }
    }
  }
  if (*(unsigned __int8 *)WebCore::Document::crossOriginOpenerPolicy(this) - 1 > 1)
    return 0;
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)v1 + 192), v7);
  v9 = v8;
  WebCore::Document::topOrigin(v1, v10);
  return !WebCore::SecurityOrigin::isSameOriginAs(v9, v11);
}

uint64_t `non-virtual thunk to'WebCore::Document::isSecureContext(WebCore::Document *this, const WTF::URL *a2)
{
  return WebCore::Document::isSecureContext((WebCore::Document *)((char *)this - 192), a2);
}

void WebCore::Document::updateURLForPushOrReplaceState(WebCore::Document *this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::DocumentLoader *v11;
  __n128 v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *((_QWORD *)this + 66);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v7 = (unsigned int *)(v4 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      WebCore::Document::setURL(this, a2, a3);
      WebCore::FrameLoader::setOutgoingReferrer(*(WebCore::FrameLoader **)(v4 + 280), (const WTF::URL *)a2);
      v9 = *((_QWORD *)this + 66);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v10 + 280) + 88);
          if (v11)
          {
            if (*(WebCore::Document **)(v10 + 296) == this)
            {
              ++*((_DWORD *)v11 + 6);
              v12 = WebCore::DocumentLoader::replaceRequestURLForSameDocumentNavigation(v11, (const WTF::URL *)a2);
              if (*((_DWORD *)v11 + 6) == 1)
                (*(void (**)(WebCore::DocumentLoader *, __n128))(*(_QWORD *)v11 + 24))(v11, v12);
              else
                --*((_DWORD *)v11 + 6);
            }
          }
        }
      }
      do
      {
        v13 = __ldaxr(v7);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v7));
      if (!v14)
      {
        atomic_store(1u, v7);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = off_1E31FE290;
        v15[1] = v7;
        v16 = v15;
        WTF::ensureOnMainThread();
        if (v16)
          (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      }
    }
  }
}

uint64_t WebCore::Document::dispatchPopstateEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  WebCore::Event *v7;
  uint64_t v8;
  WebCore::LocalDOMWindow *v9;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Event *v15;

  v4 = *(_QWORD *)(a1 + 696);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 120);
    if (!v5)
    {
      v5 = bmalloc::api::isoAllocate();
      *(_QWORD *)v5 = 0;
      *(_DWORD *)(v5 + 8) = 1;
      v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
      if (v10)
      {
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 + 1, v10));
      }
      *(_QWORD *)(v5 + 16) = v10;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      __dmb(0xAu);
      v13 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = 0;
      if (v13)
        *(_QWORD *)(v13 + 8) = 3;
      *(_DWORD *)(v5 + 48) = 0;
      *(_BYTE *)(v5 + 76) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      v14 = *(_QWORD *)(v4 + 120);
      *(_QWORD *)(v4 + 120) = v5;
      if (v14)
      {
        WTF::RefCounted<WebCore::History>::deref(v14 + 8, v11);
        v5 = *(_QWORD *)(v4 + 120);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  result = WebCore::PopStateEvent::create(a2, v5, &v15);
  v7 = v15;
  v8 = *(_QWORD *)(a1 + 528);
  if (v8)
  {
    v8 = *(_QWORD *)(v8 + 8);
    if (v8)
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (v8)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (v8)
          LOBYTE(v8) = *(_BYTE *)(v8 + 1101) != 0;
      }
    }
  }
  *((_BYTE *)v15 + 97) = v8;
  v9 = *(WebCore::LocalDOMWindow **)(a1 + 696);
  if (v9)
  {
    ++*((_DWORD *)v9 + 6);
    result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(v9, v7, 0);
    if (*((_DWORD *)v9 + 6) == 1)
      result = (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v9 + 72))(v9);
    else
      --*((_DWORD *)v9 + 6);
  }
  if (*((_DWORD *)v7 + 4) == 1)
    return (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v7 + 8))(v7);
  --*((_DWORD *)v7 + 4);
  return result;
}

WTF *WebCore::Document::attachRange(WebCore::Document *this, WebCore::Range *a2)
{
  uint64_t *v3;
  WTF *v4;
  void *v5;
  WTF *result;
  uint64_t v7;
  WTF *v8;

  v3 = (uint64_t *)((char *)this + 1320);
  WTF::WeakPtrFactory<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebCore::Range *)((char *)a2 + 16), (uint64_t)a2);
  v4 = (WTF *)*((_QWORD *)a2 + 2);
  ++*(_DWORD *)v4;
  v8 = v4;
  WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::add(v3, &v8, (uint64_t)&v7);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v5);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::Document::getCSSCanvasContext@<X0>(WebCore::Document *this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  void *v15;
  _QWORD **v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21[3];

  v20 = 0;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)this + 229, a3, (const WTF::StringImpl *)&v20, (uint64_t)v21);
  v11 = v21[0];
  v12 = *(_QWORD *)(v21[0] + 8);
  if (!v12)
  {
    WebCore::HTMLCanvasElement::create(this, v21);
    v12 = v21[0];
    result = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v21[0];
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
          v12 = *(_QWORD *)(v11 + 8);
        }
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (!v12)
    {
      *(_BYTE *)a6 = 0;
      *(_BYTE *)(a6 + 16) = 0;
      return result;
    }
  }
  *(_DWORD *)(v12 + 24) += 2;
  v21[0] = __PAIR64__(a5, a4);
  WebCore::HTMLCanvasElement::setSize((WebCore::HTMLCanvasElement *)v12, (const WebCore::IntSize *)v21);
  result = WebCore::HTMLCanvasElement::getContext((WebCore::HTMLCanvasElement *)v12, a2);
  if (result)
  {
    v16 = (_QWORD **)result;
    v17 = result - 8;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 32))(result))
    {
      result = (*(uint64_t (**)(_QWORD *))(*v16[4] + 16))(v16[4]);
      *(_QWORD *)a6 = v17;
      *(_DWORD *)(a6 + 8) = 0;
LABEL_9:
      v18 = 1;
      goto LABEL_11;
    }
    if (!((unsigned int (*)(_QWORD **))(*v16)[5])(v16))
    {
      if (((unsigned int (*)(_QWORD **))(*v16)[8])(v16))
      {
        result = (*(uint64_t (**)(_QWORD *))(*v16[4] + 16))(v16[4]);
        *(_QWORD *)a6 = v16;
        v19 = 3;
      }
      else if (((unsigned int (*)(_QWORD **))(*v16)[6])(v16))
      {
        result = (*(uint64_t (**)(_QWORD *))(*v16[4] + 16))(v16[4]);
        *(_QWORD *)a6 = v16;
        v19 = 2;
      }
      else
      {
        if ((((uint64_t (*)(_QWORD **))(*v16)[3])(v16) & 1) == 0)
        {
          result = 96;
          __break(0xC471u);
          return result;
        }
        result = (*(uint64_t (**)(_QWORD *))(*v16[4] + 16))(v16[4]);
        *(_QWORD *)a6 = v16;
        v19 = 4;
      }
      *(_DWORD *)(a6 + 8) = v19;
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(_QWORD *))(*v16[4] + 16))(v16[4]);
    *(_QWORD *)a6 = v17;
    v18 = 1;
    *(_DWORD *)(a6 + 8) = 1;
  }
  else
  {
    v18 = 0;
    *(_BYTE *)a6 = 0;
  }
LABEL_11:
  *(_BYTE *)(a6 + 16) = v18;
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v15);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF **v11;
  int i;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  uint64_t result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF **)(v7 + 16 * (v10 & v8));
    v15 = *v14;
    if (*v14 != (WTF *)-1)
      break;
    v11 = (WTF **)(v7 + 16 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v14 = v11;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *v14 = v17;
    result = (uint64_t)v14[1];
    v14[1] = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_32;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_37:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, v14);
        v14 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_41;
      }
LABEL_32:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_37;
    }
LABEL_41:
    v28 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_42;
  }
  result = WTF::equal(v15, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v28 = v20 + 16 * v21;
LABEL_42:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

_QWORD *WebCore::Document::getParserLocation(_QWORD *this, WTF::String *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  _DWORD *v8;

  if (*((_BYTE *)this + 3389))
  {
    v4 = (uint64_t)this;
    this = (_QWORD *)this[91];
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
      if (this)
      {
        v8 = this;
        ++*((_DWORD *)this + 2);
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 184))(this);
        if ((_DWORD)this)
        {
          WTF::String::operator=((uint64_t *)a2, (WTF::StringImpl **)(v4 + 736));
          this = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 168))(v8);
          *a3 = (_DWORD)this + 1;
          *a4 = HIDWORD(this) + 1;
        }
        if (v8[2] == 1)
          return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::addConsoleMessage(uint64_t a1, Inspector::ScriptArguments ***a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  result = WTF::isMainThread((WTF *)a1);
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(uint64_t **)(v7 + 8);
          if (v8)
          {
            ++*(_DWORD *)v8;
            result = (uint64_t)WebCore::PageConsoleClient::addMessage(v8[99], a2);
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::Page::~Page((WebCore::Page *)v8);
              return WTF::fastFree((WTF *)v8, v11);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
      }
    }
  }
  else
  {
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E33A3468;
    v9[1] = a2;
    v13 = *(_OWORD *)(a1 + 416);
    v14 = *(_OWORD *)(a1 + 432);
    v10 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v10 = &off_1E33A3A20;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v14;
    *(_QWORD *)(v10 + 48) = v9;
    *(_BYTE *)(v10 + 56) = 0;
    v12 = v10;
    WTF::callOnMainThread();
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return result;
}

uint64_t WebCore::Document::postTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(a1 + 416);
  v8 = *(_OWORD *)(a1 + 432);
  v2 = *a2;
  *a2 = 0;
  v3 = *((_BYTE *)a2 + 8);
  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v4 = &off_1E33A3A20;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v2;
  *(_BYTE *)(v4 + 56) = v3;
  v6 = v4;
  WTF::callOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::addConsoleMessage(uint64_t a1, Inspector::ScriptArguments ***a2)
{
  return WebCore::Document::addConsoleMessage(a1 - 192, a2);
}

uint64_t WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask(uint64_t a1, char a2, char a3)
{
  uint64_t v4;
  __int16 v6;
  uint64_t v7;

  LOBYTE(v6) = a2;
  HIBYTE(v6) = a3;
  WTF::String::isolatedCopy();
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E33A3D28;
  *(_WORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::Document::addConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  return WebCore::Document::addConsoleMessage((_QWORD *)(a1 - 192), a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::Document::addMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD **a8, uint64_t a9, uint64_t a10)
{
  return WebCore::Document::addMessage(a1 - 192, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t `non-virtual thunk to'WebCore::Document::postTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(a1 + 224);
  v8 = *(_OWORD *)(a1 + 240);
  v2 = *a2;
  *a2 = 0;
  v3 = *((_BYTE *)a2 + 8);
  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v4 = &off_1E33A3A20;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v2;
  *(_BYTE *)(v4 + 56) = v3;
  v6 = v4;
  WTF::callOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::eventLoop(WebCore::Document *this, WTF::StringImpl *a2)
{
  return WebCore::Document::eventLoop((WebCore::Document *)((char *)this - 192), a2);
}

unsigned int *WebCore::Document::protectedWindowEventLoop@<X0>(unsigned int *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  _QWORD *v6;
  WebCore::WindowEventLoop *v7;
  WebCore::WindowEventLoop *v8;
  WebCore::WindowEventLoop *v9;
  int v10;
  WebCore::WindowEventLoop *v11[3];

  v4 = *((_QWORD *)this + 368);
  if (!v4)
  {
    v5 = this;
    v6 = this + 48;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(this + 48), a2);
    WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v7, v11);
    v8 = v11[0];
    v11[0] = 0;
    v9 = (WebCore::WindowEventLoop *)*((_QWORD *)v5 + 368);
    *((_QWORD *)v5 + 368) = v8;
    if (v9)
    {
      v10 = *((_DWORD *)v9 + 2) - 1;
      if (*((_DWORD *)v9 + 2) == 1)
      {
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v9 + 8))(v9);
        v9 = v11[0];
        v11[0] = 0;
        if (!v9)
          goto LABEL_6;
        v10 = *((_DWORD *)v9 + 2) - 1;
        if (*((_DWORD *)v9 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_6;
        }
      }
      *((_DWORD *)v9 + 2) = v10;
    }
LABEL_6:
    this = WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*((_QWORD *)v5 + 368) + 104, v6, (uint64_t)v11);
    v4 = *((_QWORD *)v5 + 368);
  }
  ++*(_DWORD *)(v4 + 8);
  *a3 = v4;
  return this;
}

_DWORD *WebCore::Document::displayStringModifiedByEncoding@<X0>(_DWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  BOOL v8;
  _DWORD *v9;
  const char *v10[2];

  v5 = *((_QWORD *)this + 218);
  if (v5)
  {
    v7 = *(const char **)(v5 + 16);
    v6 = *(const char **)(v5 + 24);
    v10[0] = v7;
    v10[1] = v6;
    if (v6)
      v8 = PAL::nonBackslashEncodings == 0;
    else
      v8 = 1;
    if (!v8 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v10);
    this = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      return (_DWORD *)WTF::StringImpl::replace();
    else
      *a3 = 0;
  }
  else
  {
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v9 += 2;
    *a3 = v9;
  }
  return this;
}

_DWORD *WebCore::Document::enqueueSecurityPolicyViolationEvent(WebCore *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *result;
  _DWORD *v10;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(a1);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = (_QWORD *)(v6 + 1752);
  v8 = bmalloc::api::isoAllocate();
  v10 = (_DWORD *)WebCore::SecurityPolicyViolationEvent::SecurityPolicyViolationEvent(v8, v7, a2, 1);
  WebCore::Document::queueTaskToDispatchEvent(a1, 0, (uint64_t *)&v10);
  result = v10;
  if (v10)
  {
    if (v10[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8))();
    else
      --v10[4];
  }
  return result;
}

_QWORD *WebCore::Document::enqueueHashchangeEvent(WebCore::Document *this, const WTF::String *a2, const WTF::String *a3)
{
  WebCore *v6;
  WebCore *v7;
  uint64_t v8;
  WebCore *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *result;
  _QWORD *v20;

  v6 = (WebCore *)bmalloc::api::isoAllocate();
  v7 = v6;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(WebCore **)(v8 + 96)) == 0)
  {
    v6 = (WebCore *)WebCore::threadGlobalDataSlow(v6);
    v9 = v6;
  }
  v10 = *((_QWORD *)v9 + 5);
  if (!v10)
  {
    v6 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *((_QWORD *)v9 + 5);
  }
  WTF::MonotonicTime::now(v6);
  *((_QWORD *)v7 + 1) = 0;
  v13 = *((_DWORD *)v7 + 5) & 0xFFC00000 | 0x228200 | (*(_QWORD *)(v10 + 960) != 0);
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 5) = v13;
  v14 = *(_DWORD **)(v10 + 960);
  if (v14)
    *v14 += 2;
  *((_QWORD *)v7 + 3) = v14;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v12;
  *((_QWORD *)v7 + 8) = 0;
  *(_QWORD *)v7 = off_1E32AD800;
  v15 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v15 += 2;
  *((_QWORD *)v7 + 9) = v15;
  v16 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v16 += 2;
  *((_QWORD *)v7 + 10) = v16;
  v17 = WebCore::Document::eventLoop(this, v11);
  *((_DWORD *)this + 6) += 2;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = &off_1E33A3810;
  v18[1] = this;
  v18[2] = this;
  v18[3] = v7;
  v20 = v18;
  WebCore::EventLoopTaskGroup::queueTask(v17, 0, (uint64_t *)&v20);
  result = v20;
  v20 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

unsigned int *WebCore::Document::addMediaCanStartListener(WebCore::Document *this, WebCore::MediaCanStartListener *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 1960, a2, (uint64_t)v3);
}

uint64_t WebCore::Document::removeMediaCanStartListener(WebCore::Document *this, WebCore::MediaCanStartListener *a2)
{
  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)this + 1960, a2);
}

uint64_t **WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v9 -= 8;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v8 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(unsigned int)>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore20JSVMClientDataClientES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)a1, a2);
    v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a1 - 12);
      if (v8 > 0x7FFFFFFE)
        v8 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  v9 = *a2;
  if (!*a2)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a2;
    v11 = (unsigned int *)*a2;
    *a2 = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
      v9 = *a2;
    }
  }
  do
    v14 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v14 + 1, (unsigned int *)v9));
  do
    v15 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v15 + 1, (unsigned int *)v9));
  v22 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v22, a3);
  result = (unsigned int *)v22;
  v22 = 0;
  if (!result)
    goto LABEL_15;
  do
  {
    v18 = __ldaxr(result);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, result));
  if (!v19)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
    if (!v9)
      return result;
  }
  else
  {
LABEL_15:
    if (!v9)
      return result;
  }
  do
  {
    v20 = __ldaxr((unsigned int *)v9);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v9));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)v9);
    return (unsigned int *)WTF::fastFree((WTF *)v9, v16);
  }
  return result;
}

uint64_t WebCore::Document::simulateDeviceOrientationChange(WebCore **this, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t result;
  void *v10;

  v8 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)v8 = 1;
  *(double *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 16) = 1;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = 1;
  *(double *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = 1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  result = WebCore::DeviceOrientationController::didChangeDeviceOrientation(this[296], (_DWORD *)v8);
  if (*(_DWORD *)v8 == 1)
    return WTF::fastFree((WTF *)v8, v10);
  --*(_DWORD *)v8;
  return result;
}

double WebCore::Document::decrementLoadEventDelayCount(WebCore::Document *this)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  char *v4;
  double v5;
  double result;

  v1 = *((_DWORD *)this + 832) - 1;
  *((_DWORD *)this + 832) = v1;
  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      v3 = v1 == 0;
    else
      v3 = 0;
    if (v3)
    {
      if ((*((_QWORD *)this + 269) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*((_QWORD *)this + 269) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        v4 = (char *)this + 2120;
        *((_QWORD *)this + 268) = 0;
        WTF::MonotonicTime::now(this);
        WebCore::TimerBase::setNextFireTime((uint64_t)v4, v5 + 0.0);
      }
    }
  }
  return result;
}

WebCore::TimelineRecordFactory *WebCore::Document::requestAnimationFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int v9;
  WebCore::ScriptedAnimationController *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SecurityOrigin *v15;
  WebCore::SecurityOrigin *v16;
  WTF::StringImpl *v17;
  const WebCore::SecurityOrigin *v18;

  v4 = *(_QWORD *)(a1 + 2328);
  if (!v4)
  {
    v6 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a1);
    if (v7)
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 + 1, v7));
    }
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 24) = v7;
    *(_BYTE *)(v6 + 48) = 0;
    v10 = *(WebCore::ScriptedAnimationController **)(a1 + 2328);
    *(_QWORD *)(a1 + 2328) = v6;
    if (v10)
      WTF::RefCounted<WebCore::ScriptedAnimationController>::deref(v10, v8);
    v11 = *(_QWORD *)(a1 + 528);
    if (!v11
      || (v12 = *(_QWORD *)(v11 + 8)) == 0
      || (v13 = *(_QWORD *)(v12 + 24)) == 0
      || (v14 = *(_QWORD *)(v13 + 8)) == 0
      || *(_BYTE *)(v14 + 784))
    {
      WebCore::ScriptedAnimationController::suspend(*(_QWORD *)(a1 + 2328));
    }
    WebCore::Document::topOrigin((WebCore::Document *)a1, (WTF::StringImpl *)v8);
    v16 = v15;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a1 + 192), v17);
    if (WebCore::SecurityOrigin::isSameOriginDomain(v16, v18))
    {
      v4 = *(_QWORD *)(a1 + 2328);
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 2328);
      if (*(double *)(a1 + 2312) == 0.0)
        *(_BYTE *)(v4 + 48) |= 8u;
    }
  }
  return WebCore::ScriptedAnimationController::registerCallback(v4, a2);
}

WebCore::InspectorInstrumentation *WebCore::Document::cancelAnimationFrame(WebCore::Document *this, WebCore::Document *a2)
{
  WebCore::InspectorInstrumentation *result;

  result = (WebCore::InspectorInstrumentation *)*((_QWORD *)this + 291);
  if (result)
    return WebCore::ScriptedAnimationController::cancelCallback(result, a2);
  return result;
}

uint64_t WebCore::Document::checkedSelection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 3064);
  *a2 = v2;
  ++*(_DWORD *)(v2 + 28);
  return this;
}

uint64_t WebCore::Document::didAddWheelEventHandler(WebCore::Document *this, WebCore::Node *a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::Page *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  WTF *v15;
  _QWORD *v16;
  uint64_t v17[3];
  WebCore::Node *v18;
  unsigned __int32 v19;

  v4 = (uint64_t *)*((_QWORD *)this + 288);
  if (!v4)
  {
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    v15 = (WTF *)*((_QWORD *)this + 288);
    *((_QWORD *)this + 288) = v4;
    if (v15)
    {
      if (*(_QWORD *)v15)
        WTF::fastFree((WTF *)(*(_QWORD *)v15 - 16), v14);
      WTF::fastFree(v15, v14);
      v4 = (uint64_t *)*((_QWORD *)this + 288);
    }
  }
  v18 = a2;
  v19 = 0;
  WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v4, (unint64_t *)&v18, &v19, (uint64_t)v17);
  ++*(_DWORD *)(v17[0] + 8);
  result = WebCore::Document::wheelEventHandlersChanged((uint64_t)this, a2);
  v6 = *((_QWORD *)this + 66);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(_QWORD *)(v7 + 24);
      if (v10)
      {
        v11 = *(WebCore::Page **)(v10 + 8);
        if (v11)
        {
          result = WebCore::DebugPageOverlays::sharedDebugOverlays;
          if (WebCore::DebugPageOverlays::sharedDebugOverlays)
          {
            result = WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11);
            if ((_DWORD)result)
            {
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v7, 0);
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v7, 1u);
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v7, 2u);
              result = (uint64_t)WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v7, 3u);
            }
          }
        }
      }
      do
      {
        v12 = __ldaxr(v8);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v8));
      if (!v13)
      {
        atomic_store(1u, v8);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E31FE290;
        v16[1] = v8;
        v17[0] = (uint64_t)v16;
        WTF::ensureOnMainThread();
        result = v17[0];
        v17[0] = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t *WebCore::Document::didRemoveWheelEventHandler(uint64_t a1, WebCore::Node *a2, char a3)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::Page *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  result = *(uint64_t **)(a1 + 2304);
  if (result)
  {
    result = (uint64_t *)WebCore::removeHandlerFromSet(result, (uint64_t)a2, a3);
    if ((_DWORD)result)
    {
      result = (uint64_t *)WebCore::Document::wheelEventHandlersChanged(a1, a2);
      v6 = *(_QWORD *)(a1 + 528);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = (unsigned int *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          v10 = *(_QWORD *)(v7 + 24);
          if (v10)
          {
            v11 = *(WebCore::Page **)(v10 + 8);
            if (v11)
            {
              result = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
              if (WebCore::DebugPageOverlays::sharedDebugOverlays)
              {
                v15 = v7;
                result = (uint64_t *)WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11);
                if ((_DWORD)result)
                {
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v15, 0);
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v15, 1u);
                  WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v15, 2u);
                  result = WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v15, 3u);
                }
              }
            }
          }
          do
          {
            v12 = __ldaxr(v8);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v8));
          if (!v13)
          {
            atomic_store(1u, v8);
            v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
            *v14 = (uint64_t)off_1E31FE290;
            v14[1] = (uint64_t)v8;
            v16 = v14;
            WTF::ensureOnMainThread();
            result = v16;
            if (v16)
              return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v16 + 8))(v16);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::removeHandlerFromSet(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;

  if ((a3 & 1) != 0)
  {
    v3 = *a1;
    if (!*a1)
      return 0;
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_9;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_9:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 16 * v8) = -1;
      ++*(_DWORD *)(*a1 - 16);
      v12 = *a1;
      if (*a1)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *a1;
      if (*a1)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink(a1);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v18 = a2;
    return WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::remove(a1, &v18);
  }
}

uint64_t WebCore::Document::wheelEventHandlerCount(WebCore::Document *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v1 = (_QWORD *)*((_QWORD *)this + 288);
  if (!v1)
    return 0;
  v2 = (_QWORD *)*v1;
  if (!*v1)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_10;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v5 = v2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = v2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v5)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v8 = v4;
    if (v5 + 2 != v4)
    {
      v8 = v5 + 2;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v4)
        {
          v8 = v4;
          break;
        }
      }
    }
    result = (*((_DWORD *)v5 + 2) + result);
    v5 = v8;
  }
  while (v8 != v2);
  return result;
}

WebCore::Node *WebCore::Document::didAddTouchEventHandler(WebCore::Document *this, WebCore::Node *a2)
{
  uint64_t *v4;
  void *v5;
  WTF *v6;
  WebCore::Node *result;
  WebCore::Node *v8;
  uint64_t v9[3];
  WebCore::Node *v10;
  unsigned __int32 v11;

  v4 = (uint64_t *)*((_QWORD *)this + 287);
  if (!v4)
  {
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    v6 = (WTF *)*((_QWORD *)this + 287);
    *((_QWORD *)this + 287) = v4;
    if (v6)
    {
      if (*(_QWORD *)v6)
        WTF::fastFree((WTF *)(*(_QWORD *)v6 - 16), v5);
      WTF::fastFree(v6, v5);
      v4 = (uint64_t *)*((_QWORD *)this + 287);
    }
  }
  v10 = a2;
  v11 = 0;
  WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v4, (unint64_t *)&v10, &v11, (uint64_t)v9);
  ++*(_DWORD *)(v9[0] + 8);
  result = (WebCore::Node *)WebCore::Document::parentDocument(this);
  if (result)
  {
    v8 = result;
    *((_DWORD *)result + 6) += 2;
    result = (WebCore::Node *)WebCore::Document::didAddTouchEventHandler(result, this);
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Document::didRemoveTouchEventHandler(WebCore::Document *a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;

  result = *((_QWORD *)a1 + 287);
  if (result)
  {
    WebCore::removeHandlerFromSet((uint64_t *)result, a2, a3);
    result = WebCore::Document::parentDocument(a1);
    if (result)
    {
      v5 = result;
      *(_DWORD *)(result + 24) += 2;
      result = WebCore::Document::didRemoveTouchEventHandler();
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::touchEventHandlerCount(WebCore::Document *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v1 = (_QWORD *)*((_QWORD *)this + 287);
  if (!v1)
    return 0;
  v2 = (_QWORD *)*v1;
  if (!*v1)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_10;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v5 = v2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = v2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v5)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v8 = v4;
    if (v5 + 2 != v4)
    {
      v8 = v5 + 2;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v4)
        {
          v8 = v4;
          break;
        }
      }
    }
    result = (*((_DWORD *)v5 + 2) + result);
    v5 = v8;
  }
  while (v8 != v2);
  return result;
}

uint64_t *WebCore::Document::didAddOrRemoveMouseEventHandler(uint64_t *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Page *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = this[66];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(_QWORD *)(v3 + 24);
      if (v6)
      {
        v7 = *(WebCore::Page **)(v6 + 8);
        if (v7)
        {
          this = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
          if (WebCore::DebugPageOverlays::sharedDebugOverlays)
          {
            v11 = v3;
            this = (uint64_t *)WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, v7);
            if ((_DWORD)this)
            {
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11, 0);
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11, 1u);
              WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11, 2u);
              this = WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v11, 3u);
            }
          }
        }
      }
      do
      {
        v8 = __ldaxr(v4);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v4));
      if (!v9)
      {
        atomic_store(1u, v4);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v4;
        v12 = (uint64_t)v10;
        WTF::ensureOnMainThread();
        this = (uint64_t *)v12;
        if (v12)
          return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::absoluteEventHandlerBounds(WebCore::Document *this, BOOL *a2)
{
  WebCore::RenderLayer **v2;
  uint64_t v3;
  uint64_t v4;
  uint64x2_t v5;
  int64x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int32x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  int8x16_t v15;

  *a2 = 0;
  v2 = (WebCore::RenderLayer **)*((_QWORD *)this + 243);
  if (v2)
  {
    v3 = WebCore::RenderView::documentRect(v2);
    v5.i64[0] = v4;
    v5.i64[1] = v3;
    v6 = (int64x2_t)vshrq_n_u64(v5, 0x20uLL);
    v7 = vshrn_n_s64((int64x2_t)v5, 0x20uLL);
    v8 = vcgt_s32((int32x2_t)__PAIR64__(v3, v4), (int32x2_t)0xFE000000FE000000);
    v9.i64[0] = v8.i32[0];
    v9.i64[1] = v8.i32[1];
    v10 = v9;
    v11 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v3, v4));
    v9.i64[0] = v11.i32[0];
    v9.i64[1] = v11.i32[1];
    v12 = vorrq_s8(vandq_s8(v9, (int8x16_t)vdupq_n_s64(0x80000000uLL)), vandq_s8(vbicq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v5, 6uLL), v9), (int8x16_t)vdupq_n_s64(0xFFFFFFC0uLL)));
    *(int32x2_t *)v5.i8 = vcgt_s32(v7, (int32x2_t)0xFE000000FE000000);
    v9.i64[0] = v5.i32[0];
    v9.i64[1] = v5.i32[1];
    v13 = v9;
    v14 = vcgt_s32((int32x2_t)0xFE000000FE000000, v7);
    v9.i64[0] = v14.i32[0];
    v9.i64[1] = v14.i32[1];
    v15 = vorrq_s8(vbslq_s8(v13, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v9, (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vshlq_n_s64(v6, 0x26uLL))), vbslq_s8(v10, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), v12));
  }
  else
  {
    v15.i64[1] = 0;
  }
  return v15.i64[1];
}

BOOL WebCore::Document::processingUserGestureForMedia(WebCore::Document *this)
{
  WebCore::Document *v1;
  WebCore::LocalDOMWindow *hasTransientActivation;
  double v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Document *v15;
  uint64_t v16;
  BOOL v17;
  WebCore::Document *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = this;
  if (WTF::isMainThread(this))
  {
    {
      if (WebCore::currentToken(void)::token
        && *(unsigned __int8 *)(WebCore::currentToken(void)::token + 16) - 1 < 2)
      {
        return 1;
      }
    }
    else
    {
      WebCore::currentToken(void)::token = 0;
    }
  }
  hasTransientActivation = (WebCore::LocalDOMWindow *)*((_QWORD *)v1 + 87);
  if (hasTransientActivation)
  {
    hasTransientActivation = (WebCore::LocalDOMWindow *)WebCore::LocalDOMWindow::hasTransientActivation(hasTransientActivation);
    if ((hasTransientActivation & 1) != 0)
      return 1;
  }
  v3 = *((double *)v1 + 290) + 1.0;
  WTF::MonotonicTime::now(hasTransientActivation);
  if (v3 >= v4)
    return 1;
  if ((*(_QWORD *)(*((_QWORD *)v1 + 85) + 688) & 0x800) != 0)
  {
    if (*((_BYTE *)v1 + 3362) || *((_BYTE *)v1 + 3405))
    {
      while (1)
      {
        v19 = *((_QWORD *)v1 + 66);
        if (!v19)
          break;
        v20 = *(_QWORD *)(v19 + 8);
        if (!v20)
          break;
        v21 = *(_QWORD *)(v20 + 120);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 8);
        if (!v22)
          break;
        v1 = *(WebCore::Document **)(*(_QWORD *)(v22 + 40) + 8);
      }
    }
    else
    {
      v11 = *((_QWORD *)v1 + 66);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
          if (v13 && *(_BYTE *)(v13 + 144) == 0)
          {
            v15 = *(WebCore::Document **)(v13 + 296);
            if (v15)
              v1 = v15;
          }
        }
      }
    }
    return *((double *)v1 + 289) != 0.0;
  }
  else
  {
    v5 = *((_QWORD *)v1 + 66);
    if (v5
      && (v6 = *(_QWORD **)(v5 + 8)) != 0
      && (v7 = *(_QWORD *)(v6[35] + 88)) != 0
      && (WebCore::Document *)v6[37] == v1)
    {
      v8 = *(_DWORD *)(v7 + 24);
      *(_DWORD *)(v7 + 24) = v8 + 1;
      if ((*(_BYTE *)(v7 + 3521) & 2) != 0)
      {
        if (*((_BYTE *)v1 + 3362) || *((_BYTE *)v1 + 3405))
        {
          do
          {
            v24 = v6[15];
            if (!v24)
              break;
            v25 = *(_QWORD *)(v24 + 8);
            if (!v25)
              break;
            v1 = *(WebCore::Document **)(*(_QWORD *)(v25 + 40) + 8);
            v23 = *((_QWORD *)v1 + 66);
            if (!v23)
              break;
            v6 = *(_QWORD **)(v23 + 8);
          }
          while (v6);
        }
        else
        {
          v16 = *(_QWORD *)(v6[16] + 8);
          if (v16)
            v17 = *(_BYTE *)(v16 + 144) == 0;
          else
            v17 = 0;
          if (v17)
          {
            v18 = *(WebCore::Document **)(v16 + 296);
            if (v18)
              v1 = v18;
          }
        }
        v9 = *((double *)v1 + 289) != 0.0;
      }
      else
      {
        v9 = 0;
      }
      if (v8)
        *(_DWORD *)(v7 + 24) = v8;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t WebCore::Document::startTrackingStyleRecalcs(uint64_t this)
{
  *(_DWORD *)(this + 3352) = 0;
  return this;
}

uint64_t WebCore::Document::styleRecalcCount(WebCore::Document *this)
{
  return *((unsigned int *)this + 838);
}

uint64_t WebCore::eventTargetElementForDocument(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    return this;
  v2 = this;
  v3 = *(_QWORD *)(this + 1992);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = v4 + 1;
    this = *(_QWORD *)(v3 + 56);
    if (this
      && (*(_WORD *)(this + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(this + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    {
      if (v4 != -1)
      {
        *(_DWORD *)(v3 + 8) = v4;
        return this;
      }
    }
    else if (v4 != -1)
    {
      *(_DWORD *)(v3 + 8) = v4;
      goto LABEL_8;
    }
    __break(0xC471u);
    JUMPOUT(0x195999C44);
  }
LABEL_8:
  this = *(_QWORD *)(v2 + 1248);
  if (!this)
  {
    v5 = *(_WORD *)(v2 + 3358);
    if ((v5 & 8) == 0 || (this = *(_QWORD *)(v2 + 3528)) == 0)
    {
      v6 = *(_QWORD *)(v2 + 1272);
      if ((v5 & 1) == 0)
        return v6;
      if (!v6)
        return 0;
      if ((*(_WORD *)(v6 + 28) & 0x10) == 0)
        return v6;
      if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        return v6;
      this = *(_QWORD *)(v6 + 80);
      if (!this)
        return v6;
      while ((*(_WORD *)(this + 28) & 0x10) == 0)
      {
        this = *(_QWORD *)(this + 56);
        if (!this)
          return v6;
      }
      v7 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v8 = *(_QWORD *)(*(_QWORD *)(this + 96) + 24);
      if (v8 != v7)
      {
LABEL_22:
        if (v8 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            this = *(_QWORD *)(this + 56);
            if (!this)
              return v6;
            if ((*(_WORD *)(this + 28) & 0x10) != 0)
            {
              v8 = *(_QWORD *)(*(_QWORD *)(this + 96) + 24);
              if (v8 != v7)
                goto LABEL_22;
              return this;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::convertAbsoluteToClientQuads(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  int32x2_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;

  v3 = *(_QWORD *)(result + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        ++*(_DWORD *)(v5 + 8);
        v7 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
        v8 = *(_QWORD *)(v5 + 328);
        v9 = *(_QWORD *)(v8 + 24);
        v10 = 1.0;
        if (v9)
        {
          v11 = *(_QWORD *)(v9 + 8);
          if (v11)
          {
            v12 = (*(_DWORD *)v11)++;
            if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8 && !*(_BYTE *)(v11 + 1098))
              v10 = *(float *)(v11 + 356);
            if (v12)
            {
              *(_DWORD *)v11 = v12;
            }
            else
            {
              WebCore::Page::~Page(v11);
              WTF::fastFree(v26, v27);
            }
          }
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 0);
        v13 = (int32x2_t)result;
        v14 = *(_QWORD *)(v5 + 328);
        v15 = *(float *)(v14 + 592);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = 1.0;
        if (v16)
        {
          result = *(_QWORD *)(v16 + 8);
          if (result)
          {
            v18 = (*(_DWORD *)result)++;
            if (*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) == v14 && !*(_BYTE *)(result + 1098))
              v17 = *(float *)(result + 356);
            if (v18)
            {
              *(_DWORD *)result = v18;
            }
            else
            {
              WebCore::Page::~Page(result);
              result = WTF::fastFree(v28, v29);
            }
          }
        }
        v19 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v19)
        {
          v20 = 1.0 / (float)(v7 * v10);
          *(float32x2_t *)v21.f32 = vmul_n_f32(vneg_f32(vcvt_f32_s32(v13)), 1.0 / (float)(v15 * v17));
          v21.i64[1] = v21.i64[0];
          v22 = *(float32x4_t **)a2;
          v23 = *(_QWORD *)a2 + 32 * v19;
          if (v20 == 1.0)
          {
            do
            {
              v25 = vaddq_f32(v21, v22[1]);
              *v22 = vaddq_f32(v21, *v22);
              v22[1] = v25;
              v22 += 2;
            }
            while (v22 != (float32x4_t *)v23);
          }
          else
          {
            do
            {
              v24 = vaddq_f32(v21, vmulq_n_f32(v22[1], v20));
              *v22 = vaddq_f32(v21, vmulq_n_f32(*v22, v20));
              v22[1] = v24;
              v22 += 2;
            }
            while (v22 != (float32x4_t *)v23);
          }
        }
        if (*(_DWORD *)(v5 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        else
          --*(_DWORD *)(v5 + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::convertAbsoluteToClientRects(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x2_t *v24;
  uint64_t v25;
  float32_t v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  void *v30;
  float v31;
  float v32;

  v3 = *(_QWORD *)(result + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        ++*(_DWORD *)(v5 + 8);
        v7 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
        v8 = *(_QWORD *)(v5 + 328);
        v9 = *(_QWORD *)(v8 + 24);
        v10 = 1.0;
        if (v9)
        {
          v11 = *(_QWORD *)(v9 + 8);
          if (v11)
          {
            v12 = (*(_DWORD *)v11)++;
            if (*(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) == v8 && !*(_BYTE *)(v11 + 1098))
              v10 = *(float *)(v11 + 356);
            if (v12)
            {
              *(_DWORD *)v11 = v12;
            }
            else
            {
              WebCore::Page::~Page(v11);
              WTF::fastFree(v27, v28);
            }
          }
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 64) + 832))(v5 + 64, 0, 0);
        v13 = result;
        v14 = *(_QWORD *)(v5 + 328);
        v15 = *(float *)(v14 + 592);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = 1.0;
        if (v16)
        {
          result = *(_QWORD *)(v16 + 8);
          if (result)
          {
            v18 = (*(_DWORD *)result)++;
            if (*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) == v14 && !*(_BYTE *)(result + 1098))
              v17 = *(float *)(result + 356);
            if (v18)
            {
              *(_DWORD *)result = v18;
            }
            else
            {
              WebCore::Page::~Page(result);
              result = WTF::fastFree(v29, v30);
            }
          }
        }
        v19 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v19)
        {
          v20 = 1.0 / (float)(v7 * v10);
          v21 = 1.0 / (float)(v15 * v17);
          v22 = -(float)((float)(int)v13 * v21);
          v23 = -(float)((float)SHIDWORD(v13) * v21);
          v24 = *(float32x2_t **)a2;
          v25 = *(_QWORD *)a2 + 16 * v19;
          if (v20 == 1.0)
          {
            do
            {
              v26 = v23 + v24->f32[1];
              v24->f32[0] = v22 + v24->f32[0];
              v24->f32[1] = v26;
              v24 += 2;
            }
            while (v24 != (float32x2_t *)v25);
          }
          else
          {
            do
            {
              v31 = v20 * v24->f32[0];
              v32 = v20 * v24->f32[1];
              v24[1] = vmul_n_f32(v24[1], v20);
              v24->f32[0] = v22 + v31;
              v24->f32[1] = v23 + v32;
              v24 += 2;
            }
            while (v24 != (float32x2_t *)v25);
          }
        }
        if (*(_DWORD *)(v5 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        else
          --*(_DWORD *)(v5 + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentParserYieldToken::DocumentParserYieldToken(WebCore::DocumentParserYieldToken *this, WebCore::Document *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t result;

  v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)this = v4;
  v6 = *((_DWORD *)a2 + 820);
  *((_DWORD *)a2 + 820) = v6 + 1;
  if (v6)
    return (uint64_t)this;
  v7 = *((_QWORD *)a2 + 199);
  if (!v7)
  {
LABEL_9:
    v9 = (_DWORD *)*((_QWORD *)a2 + 91);
    if (v9)
    {
      ++v9[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 136))(v9);
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    return (uint64_t)this;
  }
  v8 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v8;
  if ((*(_QWORD *)(v7 + 96) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v7 + 64));
    v8 = *(_DWORD *)(v7 + 8);
  }
  if (v8)
  {
    *(_DWORD *)(v7 + 8) = v8 - 1;
    goto LABEL_9;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebCore::DocumentParserYieldToken::~DocumentParserYieldToken(WebCore::DocumentParserYieldToken *this, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;

  if (*(_QWORD *)this)
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 3280) - 1;
      *(_DWORD *)(v3 + 3280) = v4;
      if (!v4)
      {
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 1592);
        if (v5)
        {
          v6 = *(_DWORD *)(v5 + 8) + 1;
          *(_DWORD *)(v5 + 8) = v6;
          if ((*(_DWORD *)(v5 + 52) || *(_DWORD *)(v5 + 36) || (v8 = *(_QWORD *)(v5 + 56)) != 0 && *(_DWORD *)(v8 - 12))
            && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3280))
          {
            *(_QWORD *)(v5 + 88) = 0;
            WTF::MonotonicTime::now(this);
            WebCore::TimerBase::setNextFireTime(v5 + 64, v7 + 0.0);
            v6 = *(_DWORD *)(v5 + 8);
          }
          if (!v6)
          {
            __break(0xC471u);
            JUMPOUT(0x19599A2E4);
          }
          *(_DWORD *)(v5 + 8) = v6 - 1;
        }
        v9 = *(_DWORD **)(v3 + 728);
        if (v9)
        {
          ++v9[2];
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 144))(v9);
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
    }
    v10 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v13 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v13)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
        v14 = *(WTF **)(v10 + 16);
        if (v14)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          WTF::fastFree(v14, a2);
        }
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

WTF::StringImpl *WebCore::Document::getCachedLocale(WebCore::Document *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl **v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  WebCore::LocaleCocoa *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v3 = *a2;
  if (*a2
    && (v4 = *((_DWORD *)v3 + 1), *(_DWORD *)v3 += 2, v28 = v3, v4)
    && (*(_QWORD *)(*((_QWORD *)this + 85) + 680) & 0x200000000000) != 0)
  {
    v5 = v3;
  }
  else
  {
    WTF::defaultLanguage();
    v5 = v27;
    if (v27)
    {
      v29 = v27;
      if ((*((_BYTE *)v27 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v17 = v29;
        v5 = v30;
        v29 = 0;
        v30 = 0;
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v28 = v5;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v6 = (uint64_t *)((char *)this + 2616);
  v7 = *((_QWORD *)this + 327);
  if (v7
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this + 327, 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  v10 = *((_DWORD *)v5 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v8;
    v13 = (WTF::StringImpl **)(v7 + 16 * v12);
    v14 = *v13;
    if (!*v13)
      break;
    if (v14 == (WTF::StringImpl *)-1)
    {
      v9 = (WTF::StringImpl **)(v7 + 16 * v12);
    }
    else if (v14 == v5)
    {
      goto LABEL_14;
    }
    v10 = i + v12;
  }
  if (v9)
  {
    *v9 = 0;
    v9[1] = 0;
    --*(_DWORD *)(*v6 - 16);
    v13 = v9;
  }
  if (v5)
    *(_DWORD *)v5 += 2;
  *v13 = v5;
  v18 = v13[1];
  v13[1] = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 112))(v18);
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_34;
  }
  else if (3 * v24 > 4 * v23)
  {
    goto LABEL_34;
  }
  v13 = (WTF::StringImpl **)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v6, v13);
LABEL_34:
  v25 = (WebCore::LocaleCocoa *)WTF::fastMalloc((WTF *)0x130);
  WebCore::LocaleCocoa::LocaleCocoa(v25, (const WTF::AtomString *)&v28);
  v26 = v13[1];
  v13[1] = v25;
  if (v26)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 112))(v26);
LABEL_14:
  v15 = v13[1];
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  return v15;
}

void sub_19599A5B4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::Document *WebCore::Document::ensureTemplateDocument(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Document *v20;
  WebCore::Document *v21;
  unsigned int *v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 329);
  if (v2 && *(_QWORD *)(v2 + 8))
    return this;
  v3 = *((_QWORD *)this + 328);
  if (!v3)
  {
    v5 = *((_WORD *)this + 1679);
    v6 = *((_QWORD *)this + 85);
    v7 = WTF::aboutBlankURL(this);
    if ((v5 & 1) == 0)
    {
      v8 = bmalloc::api::isoAllocate();
      v44 = 0;
      v43 = 0uLL;
      v9 = WebCore::Document::Document(v8, 0, v6, v7, 0, 0, (uint64_t *)&v43) + 192;
      if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_9:
        {
          WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
        }
        v42 = v9;
        WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v8 + 416), (uint64_t *)&v42, (uint64_t)v41);
        v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
        if (v11 == 1)
        {
          if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
            goto LABEL_27;
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
      goto LABEL_9;
    }
    v44 = 0;
    v43 = 0u;
    v8 = bmalloc::api::isoAllocate();
    v12 = WebCore::Document::Document(v8, 0, v6, v7, 1, 0, (uint64_t *)&v43);
    *(_QWORD *)v12 = off_1E33BA1B0;
    *(_QWORD *)(v12 + 192) = &unk_1E33BA500;
    v14 = v12 + 192;
    *(_QWORD *)(v12 + 288) = &unk_1E33BA6C0;
    *(_QWORD *)(v12 + 504) = &unk_1E33BA6E8;
    *(_QWORD *)(v12 + 512) = &unk_1E33BA710;
    *(_QWORD *)(v12 + 544) = &unk_1E33BA740;
    *(_QWORD *)(v12 + 552) = &unk_1E33BA768;
    *(_OWORD *)(v12 + 3512) = 0u;
    v15 = *(WTF::StringImpl **)(v12 + 1704);
    *(_QWORD *)(v8 + 1704) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
LABEL_20:
      {
        WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
      }
      v41[0] = v14;
      WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v8 + 416), v41, (uint64_t)&v43);
      v17 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
      if (v17 == 1)
      {
        if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
          goto LABEL_27;
        goto LABEL_26;
      }
LABEL_25:
      __clrex();
LABEL_26:
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_27:
      *(_DWORD *)(v8 + 24) += 2;
      v18 = *((_QWORD *)this + 328);
      *((_QWORD *)this + 328) = v8;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      v19 = *((_QWORD *)this + 88);
      v20 = this;
      if (v19)
      {
        v21 = *(WebCore::Document **)(v19 + 8);
        v20 = this;
        if (v21)
          v20 = v21;
      }
      *((_DWORD *)v20 + 6) += 2;
      v22 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v20);
      v24 = v22;
      if (v22)
      {
        do
          v25 = __ldaxr(v22);
        while (__stlxr(v25 + 1, v22));
      }
      v26 = *(_QWORD *)(v8 + 704);
      *(_QWORD *)(v8 + 704) = v24;
      if (v26)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          v35 = *(unsigned int *)(v26 + 28);
          if ((_DWORD)v35)
          {
            v40 = v26;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v35));
            v26 = v40;
          }
          v36 = *(WTF **)(v26 + 16);
          if (v36)
          {
            *(_QWORD *)(v26 + 16) = 0;
            *(_DWORD *)(v26 + 24) = 0;
            v39 = v26;
            WTF::fastFree(v36, v23);
            v26 = v39;
          }
          WTF::fastFree((WTF *)v26, v23);
        }
      }
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
      v29 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      if (v29)
      {
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 + 1, v29));
      }
      v32 = *(_QWORD *)(v8 + 2632);
      *(_QWORD *)(v8 + 2632) = v29;
      if (v32)
      {
        do
        {
          v33 = __ldaxr((unsigned int *)v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, (unsigned int *)v32));
        if (!v34)
        {
          atomic_store(1u, (unsigned int *)v32);
          v37 = *(unsigned int *)(v32 + 28);
          if ((_DWORD)v37)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v37));
          v38 = *(WTF **)(v32 + 16);
          if (v38)
          {
            *(_QWORD *)(v32 + 16) = 0;
            *(_DWORD *)(v32 + 24) = 0;
            WTF::fastFree(v38, v30);
          }
          WTF::fastFree((WTF *)v32, v30);
        }
      }
      v3 = *((_QWORD *)this + 328);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      return (WebCore::Document *)v3;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_20;
  }
  return (WebCore::Document *)v3;
}

double WebCore::DocumentFragment::createForInnerOuterHTML@<D0>(WebCore::DocumentFragment *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0xB20400000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  result = 0.0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)v5 = off_1E33A31A0;
  *a2 = v5;
  return result;
}

uint64_t WebCore::Document::fonts@<X0>(uint64_t this@<X0>, WebCore::FontFaceSet **a2@<X8>)
{
  _QWORD *v3;
  WebCore::FontFaceSet *v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  WebCore::CSSFontFaceSet *v7;
  WebCore::FontFaceSet *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;
  uint64_t v12;
  WebCore::ScriptExecutionContext *v13;
  uint64_t *v14;
  WebCore::CSSFontSelector *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD **)(this + 2648);
  if (!v3)
  {
    v12 = this;
    v13 = (WebCore::ScriptExecutionContext *)(this + 192);
    v14 = (uint64_t *)WTF::fastMalloc((WTF *)0xC0);
    v15 = WebCore::CSSFontSelector::CSSFontSelector((WebCore::CSSFontSelector *)v14, v13);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v15 + 5);
    v16 = *(_DWORD **)(v12 + 2648);
    *(_QWORD *)(v12 + 2648) = v14;
    if (v16)
    {
      if (v16[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        v14 = *(uint64_t **)(v12 + 2648);
      }
      else
      {
        --v16[2];
      }
    }
    v18 = v12 + 504;
    this = (uint64_t)WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add(v14 + 13, &v18, (uint64_t)&v17);
    v3 = *(_QWORD **)(v12 + 2648);
  }
  v4 = (WebCore::FontFaceSet *)v3[11];
  if (!v4)
  {
    v5 = *(_QWORD *)(v3[10] + 8);
    if (v5)
      v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
    else
      v6 = 0;
    v7 = (WebCore::CSSFontFaceSet *)v3[12];
    v4 = (WebCore::FontFaceSet *)bmalloc::api::isoAllocate();
    v8 = WebCore::FontFaceSet::FontFaceSet(v4, v6, v7);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8 + 6);
    this = v3[11];
    v3[11] = v4;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)this, v9);
        this = bmalloc::api::isoDeallocate(v10, v11);
        v4 = (WebCore::FontFaceSet *)v3[11];
      }
      else
      {
        --*(_DWORD *)(this + 16);
      }
    }
  }
  ++*((_DWORD *)v4 + 4);
  *a2 = v4;
  return this;
}

BOOL WebCore::Document::useSystemAppearance(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_BYTE *)(v4 + 450) != 0;
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

BOOL WebCore::Document::useElevatedUserInterfaceLevel(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_BYTE *)(v4 + 451) != 0;
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

uint64_t WebCore::Document::compositeOperatorForBackgroundColor(WebCore::Document *this, const WebCore::Color *a2, const WebCore::RenderObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalFrameView *v8;
  char v9;
  unsigned __int8 v11;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 688) & 0x2000000000) != 0
    && WebCore::Color::isWhiteColor(a2, a2)
    && WebCore::RenderObject::useDarkAppearance(a3)
    && (v6 = *((_QWORD *)this + 66)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (v8 = *(WebCore::LocalFrameView **)(v7 + 288)) != 0)
  {
    ++*((_DWORD *)v8 + 2);
    if (WebCore::LocalFrameView::isTransparent(v8))
      v9 = 8;
    else
      v9 = 7;
    v11 = v9;
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
    return v11;
  }
  else
  {
    return 2;
  }
}

uint64_t WebCore::Document::didAssociateFormControl(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BOOL8 isTopDocument;
  double v9;
  double v10;
  WTF *v11;
  void *v12;
  _BYTE v13[24];

  v2 = *(_QWORD *)(this + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = this;
          ++*(_DWORD *)v5;
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1416))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16));
          if ((_DWORD)this)
          {
            this = (uint64_t)WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v7 + 2888, a2, (uint64_t)v13);
            if (v13[16])
            {
              if ((*(_QWORD *)(v7 + 2784) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*(_QWORD *)(v7 + 2784) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                isTopDocument = WebCore::Document::isTopDocument((WebCore::Document *)v7);
                if (isTopDocument)
                {
                  v9 = 0.0;
                }
                else if (*(double *)(v7 + 2312) == 0.0)
                {
                  v9 = 1.0;
                }
                else
                {
                  v9 = 0.0;
                }
                *(_QWORD *)(v7 + 2776) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)isTopDocument);
                this = WebCore::TimerBase::setNextFireTime(v7 + 2752, v9 + v10);
              }
            }
          }
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Page::~Page(v5);
            return WTF::fastFree(v11, v12);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
    }
  }
  return this;
}

unint64_t WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::Document::didAssociateFormControlsTimerFired(void)::$_0,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::containerSize<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>(a2);
  v6 = result;
  if (result)
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v6;
    *(_QWORD *)a1 = result;
  }
  v7 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
LABEL_6:
    v10 = v8;
    v8 = v7 + 8 * v9;
    goto LABEL_7;
  }
  v9 = *(unsigned int *)(v7 - 4);
  v8 = v7 + 8 * v9;
  if (!*(_DWORD *)(v7 - 12))
    goto LABEL_6;
  if (!(_DWORD)v9)
  {
    v12 = 0;
    v10 = *(_QWORD *)a2;
    goto LABEL_10;
  }
  v13 = 8 * v9;
  v10 = *(_QWORD *)a2;
  while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
  {
    v10 += 8;
    v13 -= 8;
    if (!v13)
    {
      v10 = v8;
      break;
    }
  }
LABEL_7:
  if (!v7)
  {
    v11 = 0;
    goto LABEL_11;
  }
  v12 = *(unsigned int *)(v7 - 4);
LABEL_10:
  v11 = v7 + 8 * v12;
LABEL_11:
  if (v11 != v10)
  {
    while (!*(_QWORD *)(*(_QWORD *)v10 + 8))
    {
      v14 = v10 + 8;
      v10 = v8;
      if (v14 != v8)
      {
        v10 = v14;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 8;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      if (v10 == v11)
      {
        v10 = v11;
        if (!v7)
          goto LABEL_28;
        goto LABEL_30;
      }
    }
  }
  if (v7)
LABEL_30:
    v15 = v7 + 8 * *(unsigned int *)(v7 - 4);
  else
LABEL_28:
    v15 = 0;
  if (v10 == v15)
  {
    if (!v6)
      return result;
    goto LABEL_58;
  }
  v16 = 0;
  v17 = *(_DWORD *)(a2 + 8);
  do
  {
    v18 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((*(_BYTE *)(v18 + 22) & 8) != 0)
    {
      *(_DWORD *)(v18 + 24) += 2;
      *(_QWORD *)(result + 8 * v16++) = v18;
      *(_DWORD *)(a1 + 12) = v16;
    }
    v19 = v10 + 8;
    v20 = v8;
    if (v19 != v8)
    {
      v20 = v19;
      while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
      {
        v20 += 8;
        if (v20 == v8)
        {
          v20 = v8;
          break;
        }
      }
    }
    v10 = v11;
    if (v20 != v11)
    {
      v10 = v20;
      if (!*(_QWORD *)(*(_QWORD *)v20 + 8))
      {
        while (1)
        {
          v21 = v10 + 8;
          v10 = v8;
          if (v21 != v8)
          {
            v10 = v21;
            while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
            {
              v10 += 8;
              if (v10 == v8)
              {
                v10 = v8;
                break;
              }
            }
          }
          if (v10 == v11)
            break;
          if (*(_QWORD *)(*(_QWORD *)v10 + 8))
            goto LABEL_42;
        }
        v10 = v11;
      }
    }
LABEL_42:
    ++v17;
  }
  while (v10 != v15);
  *(_DWORD *)(a2 + 8) = v17;
  if (v6 > v16)
  {
    if (v16)
    {
      *(_DWORD *)(a1 + 8) = v16;
      result = WTF::fastRealloc((WTF *)result, (void *)(8 * v16));
      *(_QWORD *)a1 = result;
      return result;
    }
LABEL_58:
    if (result)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

WebCore::Page *WebCore::Document::didLoadResourceSynchronously(WebCore::Document *this, const WTF::URL *a2)
{
  WebCore::Page *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  WTF::StringImpl *v14;

  result = WebCore::Document::invalidateDOMCookieCache(this, a2);
  v5 = *((_QWORD *)this + 66);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(WebCore::Page **)(v7 + 8);
        if (v8)
        {
          ++*(_DWORD *)v8;
          v9 = *((_QWORD *)v8 + 111);
          v13[0] = WTF::URL::host(a2);
          v13[1] = v10;
          WTF::StringView::toString((uint64_t *)&v14, (WTF::StringView *)v13);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 104))(v9, &v14);
          v12 = v14;
          v14 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          return WTF::RefCounted<WebCore::Page>::deref(v8);
        }
      }
    }
  }
  return result;
}

WebCore::Page *`non-virtual thunk to'WebCore::Document::didLoadResourceSynchronously(WebCore::Document *this, const WTF::URL *a2)
{
  return WebCore::Document::didLoadResourceSynchronously((WebCore::Document *)((char *)this - 192), a2);
}

uint64_t WebCore::Document::wrapCryptoKey@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(result + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 16))(*(_QWORD *)(v5 + 120));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::wrapCryptoKey@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(result + 336);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 16))(*(_QWORD *)(v5 + 120));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t WebCore::Document::unwrapCryptoKey@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(result + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 24))(*(_QWORD *)(v5 + 120));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::Document::unwrapCryptoKey@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(result + 336);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)v5;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 24))(*(_QWORD *)(v5 + 120));
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t WebCore::Document::activeElement(WebCore::TreeScope **this)
{
  uint64_t result;
  WebCore::TreeScope *v3;
  uint64_t v4;
  uint64_t v5;

  result = WebCore::TreeScope::focusedElementInScope(this[5]);
  if (!result)
  {
    v3 = this[159];
    if (v3
      && (*((_WORD *)v3 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      result = *((_QWORD *)v3 + 10);
      if (result)
      {
        while ((*(_WORD *)(result + 28) & 0x10) == 0)
        {
          result = *(_QWORD *)(result + 56);
          if (!result)
            return result;
        }
        v4 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v5 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
        if (v5 != v4)
        {
LABEL_11:
          if (v5 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          {
            while (1)
            {
              result = *(_QWORD *)(result + 56);
              if (!result)
                break;
              if ((*(_WORD *)(result + 28) & 0x10) != 0)
              {
                v5 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
                if (v5 != v4)
                  goto LABEL_11;
                return result;
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::Document::hasFocus(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(WebCore::Page **)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v5 = *((_QWORD *)v4 + 9);
  if ((~*(unsigned __int16 *)(v5 + 26) & 3) != 0)
    goto LABEL_7;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    goto LABEL_7;
  v9 = *(_QWORD *)(v6 + 8);
  if (!v9)
    goto LABEL_7;
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *((_QWORD *)this + 66);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8);
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
        v15 = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v13 + 24);
      if (v16)
        v16 = *(_QWORD *)(v16 + 8);
      if (v15 == v16)
      {
        if (v14 == v13)
        {
          do
            v17 = __ldaxr(v10);
          while (__stlxr(v17 - 1, v10));
          v7 = 1;
          if (v17 != 1)
            goto LABEL_8;
          goto LABEL_25;
        }
        while (1)
        {
          v22 = *(_QWORD *)(v14 + 56);
          if (!v22)
            break;
          v14 = *(_QWORD *)(v22 + 8);
          LOBYTE(v7) = v14 != 0;
          if (v14 == v13 || v14 == 0)
            goto LABEL_35;
        }
      }
    }
  }
  LOBYTE(v7) = 0;
  do
  {
LABEL_35:
    v24 = __ldaxr(v10);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v10));
  if (!v25)
  {
LABEL_25:
    atomic_store(1u, v10);
    v18 = v10;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v18;
    v26 = v19;
    WTF::ensureOnMainThread();
    if (v26)
      (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  }
  if ((v7 & 1) == 0)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v7 = 1;
LABEL_8:
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v7;
}

uint64_t WebCore::Document::addPlaybackTargetPickerClient(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t IdentifierInternal;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  WTF *v54;
  void *v55;

  v2 = *(_QWORD *)(result + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = result;
          v8 = (*(_DWORD *)v5)++;
          v9 = *(_QWORD *)(result + 2728);
          if (v9)
          {
            v10 = *(_DWORD *)(v9 - 8);
            v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
            v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
            v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
            v14 = v10 & ((v13 >> 31) ^ v13);
            v15 = *(_QWORD *)(v9 + 16 * v14);
            if (v15 == a2)
              goto LABEL_58;
            v16 = 1;
            while (v15)
            {
              v14 = (v14 + v16) & v10;
              v15 = *(_QWORD *)(v9 + 16 * v14);
              ++v16;
              if (v15 == a2)
                goto LABEL_58;
            }
          }
          v17 = (uint64_t *)(result + 2728);
          IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
          v19 = *v17;
          if (*v17
            || (WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash((uint64_t *)(v7 + 2728), 8u), (v19 = *v17) != 0))
          {
            v20 = *(_DWORD *)(v19 - 8);
          }
          else
          {
            v20 = 0;
          }
          v21 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = (uint64_t *)(v19 + 16 * v24);
          v26 = *v25;
          if (*v25)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != a2)
            {
              if (v26 == -1)
                v27 = v25;
              v24 = (v24 + v28) & v20;
              v25 = (uint64_t *)(v19 + 16 * v24);
              v26 = *v25;
              ++v28;
              if (!*v25)
              {
                if (v27)
                {
                  *v27 = 0;
                  v27[1] = 0;
                  --*(_DWORD *)(*v17 - 16);
                  v25 = v27;
                }
                goto LABEL_22;
              }
            }
LABEL_33:
            v36 = (uint64_t *)(v7 + 2720);
            v37 = *(_QWORD *)(v7 + 2720);
            if (v37
              || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v7 + 2720), 8u), (v37 = *v36) != 0))
            {
              v38 = *(_DWORD *)(v37 - 8);
            }
            else
            {
              v38 = 0;
            }
            v39 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                         + ~(IdentifierInternal << 32)) >> 22);
            v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
            v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
            v42 = v38 & ((v41 >> 31) ^ v41);
            v43 = (uint64_t *)(v37 + 16 * v42);
            v44 = *v43;
            if (*v43)
            {
              v45 = 0;
              v46 = 1;
              while (v44 != IdentifierInternal)
              {
                if (v44 == -1)
                  v45 = v43;
                v42 = (v42 + v46) & v38;
                v43 = (uint64_t *)(v37 + 16 * v42);
                v44 = *v43;
                ++v46;
                if (!*v43)
                {
                  if (v45)
                  {
                    *v45 = 0;
                    v45[1] = 0;
                    --*(_DWORD *)(*v36 - 16);
                    v43 = v45;
                  }
                  goto LABEL_44;
                }
              }
              goto LABEL_57;
            }
LABEL_44:
            *v43 = IdentifierInternal;
            v43[1] = a2;
            v47 = *v36;
            if (*v36)
              v48 = *(_DWORD *)(v47 - 12) + 1;
            else
              v48 = 1;
            *(_DWORD *)(v47 - 12) = v48;
            v49 = *v36;
            if (*v36)
              v50 = *(_DWORD *)(v49 - 12);
            else
              v50 = 0;
            v51 = (*(_DWORD *)(v49 - 16) + v50);
            v52 = *(unsigned int *)(v49 - 4);
            if (v52 > 0x400)
            {
              if (v52 > 2 * v51)
                goto LABEL_57;
            }
            else
            {
              if (3 * v52 > 4 * v51)
              {
LABEL_57:
                result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1528))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16), IdentifierInternal);
                v8 = *(_DWORD *)v5 - 1;
LABEL_58:
                if (v8)
                {
                  *(_DWORD *)v5 = v8;
                }
                else
                {
                  WebCore::Page::~Page(v5);
                  return WTF::fastFree(v54, v55);
                }
                return result;
              }
              if (!(_DWORD)v52)
              {
                v53 = 8;
                goto LABEL_56;
              }
            }
            v53 = (_DWORD)v52 << (6 * *(_DWORD *)(v49 - 12) >= (2 * v52));
LABEL_56:
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v7 + 2720), v53);
            goto LABEL_57;
          }
LABEL_22:
          *v25 = a2;
          v25[1] = IdentifierInternal;
          v29 = *v17;
          if (*v17)
            v30 = *(_DWORD *)(v29 - 12) + 1;
          else
            v30 = 1;
          *(_DWORD *)(v29 - 12) = v30;
          v31 = *v17;
          if (*v17)
            v32 = *(_DWORD *)(v31 - 12);
          else
            v32 = 0;
          v33 = (*(_DWORD *)(v31 - 16) + v32);
          v34 = *(unsigned int *)(v31 - 4);
          if (v34 > 0x400)
          {
            if (v34 > 2 * v33)
              goto LABEL_33;
          }
          else
          {
            if (3 * v34 > 4 * v33)
              goto LABEL_33;
            if (!(_DWORD)v34)
            {
              v35 = 8;
              goto LABEL_32;
            }
          }
          v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_32:
          WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash((uint64_t *)(v7 + 2728), v35);
          goto LABEL_33;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::showPlaybackTargetPicker(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  void *v19;

  v5 = *(_QWORD *)(result + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = (*(_DWORD *)v8)++;
          v10 = *(_QWORD *)(result + 2728);
          if (v10)
          {
            v11 = *(_DWORD *)(v10 - 8);
            v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
            v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
            v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
            v15 = v11 & ((v14 >> 31) ^ v14);
            v16 = *(_QWORD *)(v10 + 16 * v15);
            if (v16 != a2)
            {
              v17 = 1;
              while (v16)
              {
                v15 = ((_DWORD)v15 + v17) & v11;
                v16 = *(_QWORD *)(v10 + 16 * v15);
                ++v17;
                if (v16 == a2)
                  goto LABEL_12;
              }
              v15 = *(unsigned int *)(v10 - 4);
            }
LABEL_12:
            if (v15 != *(_DWORD *)(v10 - 4))
            {
              result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48)
                                                                                                  + 16)
                                                                                    + 752))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16), a3, a4, a5);
              v9 = *(_DWORD *)v8 - 1;
            }
          }
          if (v9)
          {
            *(_DWORD *)v8 = v9;
          }
          else
          {
            WebCore::Page::~Page(v8);
            return WTF::fastFree(v18, v19);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::playbackTargetPickerClientStateDidChange(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  void *v17;

  v3 = *(_QWORD *)(result + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = (*(_DWORD *)v6)++;
          v8 = *(_QWORD *)(result + 2728);
          if (v8)
          {
            v9 = *(_DWORD *)(v8 - 8);
            v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
            v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
            v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
            v13 = v9 & ((v12 >> 31) ^ v12);
            v14 = *(_QWORD *)(v8 + 16 * v13);
            if (v14 != a2)
            {
              v15 = 1;
              while (v14)
              {
                v13 = ((_DWORD)v13 + v15) & v9;
                v14 = *(_QWORD *)(v8 + 16 * v13);
                ++v15;
                if (v14 == a2)
                  goto LABEL_12;
              }
              v13 = *(unsigned int *)(v8 - 4);
            }
LABEL_12:
            if (v13 != *(_DWORD *)(v8 - 4))
            {
              result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16)
                                                                         + 1552))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16), *(_QWORD *)(v8 + 16 * v13 + 8), a3);
              v7 = *(_DWORD *)v6 - 1;
            }
          }
          if (v7)
          {
            *(_DWORD *)v6 = v7;
          }
          else
          {
            WebCore::Page::~Page(v6);
            return WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::setPlaybackTarget(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(result + 2720);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      v12 = *a3;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(*a3 + 8) + 1;
      v13 = v12;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v13);
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(WebCore::Document *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::SecurityOrigin *v9;
  WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;

  v2 = *((_QWORD *)this + 66);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 88);
  if (!v4 || *(WebCore::Document **)(v3 + 296) != this)
    return 0;
  ++*(_DWORD *)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD **)(v5 + 8);
    if (v6)
    {
      if (*(_QWORD **)(v6[16] + 8) == v6)
      {
LABEL_8:
        v7 = *(unsigned __int8 *)(v4 + 3530);
        goto LABEL_9;
      }
      if (*(_QWORD *)(v6[35] + 88) == v4)
      {
        v7 = v6[37];
        if (!v7)
          goto LABEL_9;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), a2);
        v10 = v9;
        WebCore::Document::topOrigin((WebCore::Document *)v7, v11);
        if (WebCore::SecurityOrigin::isSameOriginAs(v10, v12))
          goto LABEL_8;
      }
    }
  }
  v7 = 0;
LABEL_9:
  if (*(_DWORD *)(v4 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    --*(_DWORD *)(v4 + 24);
  return v7;
}

uint64_t WebCore::Document::addDynamicMediaQueryDependentImage(WebCore::Document *this, WebCore::HTMLImageElement *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLImageElement>((uint64_t)this + 2000, a2, (uint64_t)v3);
}

uint64_t WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLImageElement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  void *v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  int v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_9;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v10 = *(_DWORD *)(v8 - 4);
  if (!v10)
    goto LABEL_5;
  v53 = *(_QWORD *)a1;
  v34 = 0;
  v35 = v10 - 1;
  do
  {
    v36 = (uint64_t *)(v53 + 8 * v35);
    if ((unint64_t)(*v36 + 1) >= 2 && !*(_QWORD *)(*v36 + 8))
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v36, a2);
      ++v34;
    }
  }
  while ((unint64_t)v35--);
  v8 = *(_QWORD *)a1;
  if (v34)
  {
    *(_DWORD *)(v8 - 16) += v34;
    v38 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    *(_DWORD *)(v38 - 12) = v39 - v34;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_3:
    v9 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
    v11 = v9;
    goto LABEL_8;
  }
  v40 = *(_DWORD *)(v8 - 4);
  v41 = *(unsigned int *)(v8 - 12);
  if (v40 < 9 || 6 * (int)v41 >= v40)
  {
LABEL_5:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_6;
  }
  v43 = (v41 - 1) | ((v41 - 1) >> 1) | ((((_DWORD)v41 - 1) | ((v41 - 1) >> 1)) >> 2);
  v44 = v43 | (v43 >> 4) | ((v43 | (v43 >> 4)) >> 8);
  v45 = (v44 | HIWORD(v44)) + 1;
  if (v45 > 0x400)
  {
    if (v45 > 2 * v41)
      goto LABEL_59;
    goto LABEL_55;
  }
  if (3 * v45 <= 4 * v41)
  {
LABEL_55:
    LODWORD(v45) = 2 * v45;
    if (v45 <= 0x400)
      goto LABEL_56;
LABEL_59:
    v46 = (double)v41;
    v47 = (double)v45;
    v48 = 0.416666667;
    goto LABEL_60;
  }
LABEL_56:
  v46 = (double)v41;
  v47 = (double)v45;
  v48 = 0.604166667;
LABEL_60:
  if (v47 * v48 <= v46)
    LODWORD(v45) = 2 * v45;
  if (v45 <= 8)
    v51 = 8;
  else
    v51 = v45;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v51, 0);
  v9 = 0;
  v52 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v52)
    goto LABEL_7;
  v8 = v52;
LABEL_6:
  v9 = *(_DWORD *)(v8 - 12);
  v11 = 0x7FFFFFFF;
  if (v9 < 0x7FFFFFFF)
    goto LABEL_7;
LABEL_8:
  *(_DWORD *)(a1 + 12) = 2 * v11;
LABEL_9:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 8) = a2;
    *(_BYTE *)(v12 + 32) = 0;
    v14 = a2[2];
    a2[2] = v14 & 0xFFFF000000000000 | v12;
    v15 = v14 & 0xFFFFFFFFFFFFLL;
    if ((v14 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v30 = *(unsigned int *)(v15 + 28);
        if ((_DWORD)v30)
        {
          v50 = v15;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v30));
          v15 = v50;
        }
        v31 = *(WTF **)(v15 + 16);
        if (v31)
        {
          *(_QWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          v49 = v15;
          WTF::fastFree(v31, v13);
          v15 = v49;
        }
        WTF::fastFree((WTF *)v15, v13);
      }
    }
  }
  v18 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v19 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v19 + 1, (unsigned int *)v18));
  do
    v20 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v20 + 1, (unsigned int *)v18));
  v54 = (WTF *)v18;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v54, a3);
  v23 = v54;
  v54 = 0;
  if (!v23)
    goto LABEL_19;
  do
  {
    v24 = __ldaxr((unsigned int *)v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v23));
  if (v25)
  {
LABEL_19:
    if (!v18)
      return result;
    goto LABEL_20;
  }
  atomic_store(1u, (unsigned int *)v23);
  v32 = *((unsigned int *)v23 + 7);
  if ((_DWORD)v32)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v23 + 2), (WTF::StringImpl *)(*((_QWORD *)v23 + 2) + 32 * v32));
  v33 = (WTF *)*((_QWORD *)v23 + 2);
  if (v33)
  {
    *((_QWORD *)v23 + 2) = 0;
    *((_DWORD *)v23 + 6) = 0;
    WTF::fastFree(v33, v22);
  }
  result = WTF::fastFree(v23, v22);
  if (v18)
  {
    do
    {
LABEL_20:
      v26 = __ldaxr((unsigned int *)v18);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v18));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v18);
      v28 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v28));
      v29 = *(WTF **)(v18 + 16);
      if (v29)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v29, v22);
      }
      return WTF::fastFree((WTF *)v18, v22);
    }
  }
  return result;
}

uint64_t WebCore::Document::addIntersectionObserver(WebCore::Document *this, WebCore::IntersectionObserver *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v4 = (uint64_t *)((char *)this + 2016);
  v5 = *((unsigned int *)this + 507);
  if ((_DWORD)v5 == *((_DWORD *)this + 506))
    return WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntersectionObserver&>((uint64_t)v4, (uint64_t)a2);
  v6 = *v4;
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_14;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v10 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v10)
    goto LABEL_14;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
  {
LABEL_14:
    do
      v8 = __ldaxr((unsigned int *)result);
    while (__stlxr(v8 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v6 + 8 * v5) = result;
  ++*((_DWORD *)this + 507);
  return result;
}

uint64_t WebCore::Document::removeIntersectionObserver(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 2028);
  if ((_DWORD)v2)
  {
    v3 = result;
    for (i = (_QWORD *)(*(_QWORD *)(result + 2016) + 8); ; ++i)
    {
      result = *(i - 1);
      if (result)
      {
        if (*(void **)(result + 8) == a2)
          break;
      }
      if (!--v2)
        return result;
    }
    *(i - 1) = 0;
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
    v7 = *(unsigned int *)(v3 + 2028);
    v8 = *(_QWORD *)(v3 + 2016) + 8 * v7;
    while (i != (_QWORD *)v8)
    {
      *(i - 1) = *i;
      *i++ = 0;
    }
    *(_DWORD *)(v3 + 2028) = v7 - 1;
  }
  return result;
}

uint64_t WebCore::Document::scheduleInitialIntersectionObservationUpdate(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v1 = *(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL;
  if (*(_BYTE *)(this + 3363) == 2)
  {
    if (v1 && *(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v10 = this;
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 2032));
      this = v10;
    }
    v2 = *(_QWORD *)(this + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(WebCore::Page **)(v4 + 8);
          if (v5)
          {
            ++*(_DWORD *)v5;
            this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v5, 256);
            if (*(_DWORD *)v5 == 1)
            {
              WebCore::Page::~Page(v5);
              return WTF::fastFree(v6, v7);
            }
            else
            {
              --*(_DWORD *)v5;
            }
          }
        }
      }
    }
  }
  else
  {
    v8 = this + 2032;
    if (!v1 || *(double *)((*(_QWORD *)(this + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(this + 2056) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      return WebCore::TimerBase::setNextFireTime(v8, v9 + 2.0);
    }
  }
  return this;
}

_OWORD *WebCore::Document::ensureIntersectionObserverData(WebCore::Document *this)
{
  _OWORD *result;
  char *v3;
  WTF *v4;

  result = (_OWORD *)*((_QWORD *)this + 261);
  if (!result)
  {
    v3 = (char *)this + 2088;
    result = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
    *result = 0u;
    result[1] = 0u;
    v4 = *(WTF **)v3;
    *(_QWORD *)v3 = result;
    if (v4)
    {
      std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100]((int)v3, v4);
      return *(_OWORD **)v3;
    }
  }
  return result;
}

unsigned int *WebCore::Document::addResizeObserver(WebCore::Document *this, WebCore::ResizeObserver *a2)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  result = (unsigned int *)((char *)this + 2096);
  v5 = *((unsigned int *)this + 527);
  if ((_DWORD)v5)
  {
    v13 = *(_QWORD *)result;
    v14 = *((unsigned int *)this + 527);
    while (!*(_QWORD *)v13 || *(WebCore::ResizeObserver **)(*(_QWORD *)v13 + 8) != a2)
    {
      v13 += 8;
      if (!--v14)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((_DWORD)v5 == *((_DWORD *)this + 526))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1);
      v6 = *((unsigned int *)this + 527);
      v7 = *((_QWORD *)this + 262);
      result = (unsigned int *)*((_QWORD *)a2 + 1);
      if (result)
        goto LABEL_21;
      result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 1;
      *((_QWORD *)result + 1) = a2;
      v9 = (unsigned int *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = result;
      if (!v9)
        goto LABEL_21;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      result = (unsigned int *)*((_QWORD *)a2 + 1);
      if (result)
      {
LABEL_21:
        do
          v12 = __ldaxr(result);
        while (__stlxr(v12 + 1, result));
      }
      *(_QWORD *)(v7 + 8 * v6) = result;
    }
    else
    {
      result = (unsigned int *)WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(*(_QWORD *)result + 8 * v5), (uint64_t)a2);
    }
    ++*((_DWORD *)this + 527);
  }
  return result;
}

WebCore::Node *WebCore::Document::deliverResizeObservations(WebCore::Document *this, void *a2)
{
  WebCore::Node *result;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  result = (WebCore::Node *)*((_QWORD *)this + 432);
  if (result)
    result = WebCore::ResizeObserver::deliverObservations(result, a2);
  v4 = *((unsigned int *)this + 527);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = this;
      v6 = 8 * v4;
      v7 = WTF::fastMalloc((WTF *)(8 * v4));
      v9 = (WTF *)v7;
      v10 = *((unsigned int *)v5 + 527);
      if ((_DWORD)v10)
      {
        v11 = (unsigned int **)*((_QWORD *)v5 + 262);
        v12 = &v11[v10];
        v13 = (unsigned int **)v7;
        do
        {
          v14 = *v11;
          if (*v11)
          {
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
          }
          *v13++ = v14;
          ++v11;
        }
        while (v11 != v12);
      }
      v16 = 0;
      v17 = (unsigned int **)(v7 + 8 * v4);
      do
      {
        v18 = v16;
        v19 = *(_QWORD *)((char *)v9 + v16);
        if (v19)
        {
          v20 = *(WebCore::Node **)(v19 + 8);
          if (v20)
          {
            ++*(_DWORD *)v20;
            if (*((_DWORD *)v20 + 17))
              WebCore::ResizeObserver::deliverObservations(v20, v8);
            WTF::RefCounted<WebCore::ResizeObserver>::deref(v20, v8);
          }
        }
        v16 = v18 + 8;
      }
      while (v6 != v18 + 8);
      v21 = (unsigned int **)v9;
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v8);
          }
        }
        ++v21;
      }
      while (v21 != v17);
      return (WebCore::Node *)WTF::fastFree(v9, v8);
    }
  }
  return result;
}

uint64_t *WebCore::Document::dir(WebCore::Document *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 159);
  if (v1
    && (*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    return WebCore::HTMLElement::dir((WebCore::HTMLElement *)v1);
  }
  else
  {
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
}

unsigned int *WebCore::Document::setDir(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_QWORD *)this + 159);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    *(_DWORD *)(v2 + 24) += 2;
    v4 = *(_QWORD *)(v2 + 104);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) == 0)
      {
        v6 = (uint64_t *)(v4 + 32);
        v7 = v5 >> 5;
        if (!v7)
          goto LABEL_16;
LABEL_9:
        v8 = 0;
        while (1)
        {
          v9 = *v6;
          if (*v6 == WebCore::HTMLNames::dirAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
          {
            goto LABEL_17;
          }
          ++v8;
          v6 += 2;
          if (v7 == v8)
            goto LABEL_16;
        }
      }
      v6 = *(uint64_t **)(v4 + 40);
      v7 = *(_DWORD *)(v4 + 52);
      if (v7)
        goto LABEL_9;
    }
LABEL_16:
    v8 = 0xFFFFFFFFLL;
LABEL_17:
    this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v2, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, a2, 0);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v10);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

BOOL WTF::WeakListHashSet<WebCore::ShadowRoot,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ShadowRoot>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  WTF *v13;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v3;
  if (v3 > v2)
  {
    v15 = *(WTF **)(a1 + 8);
    if (v15)
    {
      do
      {
        v16 = (WTF *)*((_QWORD *)v15 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          v20 = a1;
          v19 = a2;
          v18 = (WTF *)*((_QWORD *)v15 + 2);
          WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v15);
          v16 = v18;
          a2 = v19;
          a1 = v20;
        }
        v15 = v16;
      }
      while (v16);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v17) = *(_DWORD *)(v17 - 12);
      if (v17 > 0x7FFFFFFE)
        LODWORD(v17) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v17;
  }
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = *(WTF **)(v6 + 8 * v11);
      if (!v13)
        break;
      if (v13 != (WTF *)-1 && *(_QWORD *)v13 == v5)
      {
        if (v11 == *(_DWORD *)(v6 - 4))
          v13 = 0;
        return WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v13);
      }
      v11 = (v11 + i) & v7;
    }
  }
  else
  {
    v13 = 0;
  }
  return WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v13);
}

uint64_t WebCore::Document::constantProperties(WebCore::Document *this)
{
  uint64_t v1;
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  WebCore::ConstantPropertyMap *v6;
  WTF *v7;
  void *v8;

  v1 = *((_QWORD *)this + 242);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x18);
    *(_BYTE *)v1 = 0;
    *(_BYTE *)(v1 + 8) = 0;
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    *(_QWORD *)(v1 + 16) = v3;
    v6 = (WebCore::ConstantPropertyMap *)*((_QWORD *)this + 242);
    *((_QWORD *)this + 242) = v1;
    if (v6)
    {
      WebCore::ConstantPropertyMap::~ConstantPropertyMap(v6, v4);
      WTF::fastFree(v7, v8);
      return *((_QWORD *)this + 242);
    }
  }
  return v1;
}

uint64_t WebCore::Document::orientationChanged(WebCore::Document *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_QWORD *)v7 = off_1E33A4B48;
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200;
  v10 = *(_QWORD *)(v6 + 1384) != 0;
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = v9 | v10;
  v11 = *(_DWORD **)(v6 + 1384);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v7 + 24) = v11;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  result = (uint64_t)WebCore::Document::dispatchWindowEvent(this, (WebCore::Event *)v7, 0);
  if (*(_DWORD *)(v7 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 16);
  v13 = *((_QWORD *)this + 363);
  if (v13)
  {
    v14 = *(_DWORD *)v13 + 1;
    *(_DWORD *)v13 = v14;
    *(_DWORD *)(v13 + 24) = a2;
    v15 = *(unsigned int *)(v13 + 20);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(v13 + 8);
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a2);
        v17 -= 8;
      }
      while (v17);
      v14 = *(_DWORD *)v13;
    }
    if (v14)
    {
      *(_DWORD *)v13 = v14 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::Document::orientationNotifier(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  if (!*((_QWORD *)this + 363))
  {
    v2 = *((_QWORD *)this + 66);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      ++*(_DWORD *)v5;
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 768))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16));
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::Page::~Page(v5);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = v6;
    v9 = *((_QWORD *)this + 363);
    *((_QWORD *)this + 363) = v7;
    if (v9)
    {
      v10 = *(WTF **)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = *(_QWORD *)(v9 + 8);
        do
        {
          if (*(_QWORD *)(*(_QWORD *)v13 + 8))
            *(_QWORD *)(*(_QWORD *)v13 + 8) = 0;
          v13 += 8;
          v12 -= 8;
        }
        while (v12);
      }
      if (v10)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v10, v8);
      }
      if (*(_DWORD *)v9)
      {
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v8);
      }
    }
  }
  return *((_QWORD *)this + 363);
}

uint64_t WebCore::Document::stopMediaCapture(WebCore::Document *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *((_QWORD *)a1 + 403);
  if (!v4 || (v14 = *(unsigned int *)(v4 - 12), !(_DWORD)v14))
  {
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(0);
    v7 = (uint64_t *)result;
    v8 = v6;
    v9 = 0;
    v10 = 0;
    v11 = 1;
    goto LABEL_3;
  }
  v15 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = (v16 | HIWORD(v16)) + 1;
  if (v17 > 0x400)
  {
    if (v17 > 2 * v14)
      goto LABEL_39;
    goto LABEL_29;
  }
  if (3 * v17 <= 4 * v14)
  {
LABEL_29:
    LODWORD(v17) = 2 * v17;
    if (v17 <= 0x400)
      goto LABEL_30;
LABEL_39:
    v18 = (double)v14;
    v19 = (double)v17;
    v20 = 0.416666667;
    goto LABEL_40;
  }
LABEL_30:
  v18 = (double)v14;
  v19 = (double)v17;
  v20 = 0.604166667;
LABEL_40:
  if (v19 * v20 <= v18)
    LODWORD(v17) = 2 * v17;
  if (v17 <= 8)
    v24 = 8;
  else
    v24 = v17;
  v25 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v24 + 16));
  v9 = (uint64_t *)(v25 + 4);
  v25[2] = v24 - 1;
  v25[3] = v24;
  *v25 = 0;
  v25[1] = v14;
  v26 = (_QWORD *)*((_QWORD *)a1 + 403);
  v27 = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v26);
  v28 = v27;
  v30 = v29;
  if (v26)
    v31 = &v26[*((unsigned int *)v26 - 1)];
  else
    v31 = 0;
  if (v31 != v27)
  {
    do
    {
      v32 = v25[2];
      v33 = *v28;
      v34 = ~(*v28 << 32) + *v28;
      v35 = (v34 ^ (v34 >> 22)) + ~((v34 ^ (v34 >> 22)) << 13);
      v36 = (9 * (v35 ^ (v35 >> 8))) ^ ((9 * (v35 ^ (v35 >> 8))) >> 15);
      v37 = v32 & (((v36 + ~(v36 << 27)) >> 31) ^ (v36 + ~((_DWORD)v36 << 27)));
      v38 = 1;
      do
      {
        v39 = v37;
        v40 = v9[v37];
        v37 = (v37 + v38++) & v32;
      }
      while (v40);
      v41 = v39;
      (*(void (**)(_QWORD))(*(_QWORD *)v33 + 136))(*v28);
      v42 = v9[v41];
      v9[v41] = v33;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 144))(v42);
      while (++v28 != v30)
      {
        if ((unint64_t)(*v28 + 1) > 1)
          goto LABEL_56;
      }
      v28 = v30;
LABEL_56:
      ;
    }
    while (v28 != v31);
  }
  result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v9);
  v7 = (uint64_t *)result;
  v8 = v6;
  v11 = 0;
  v10 = &v9[v25[3]];
LABEL_3:
  if (v10 != v7)
  {
    if (a2 > 4)
    {
      __break(0xC471u);
      JUMPOUT(0x19599CDACLL);
    }
    v12 = 0;
    do
    {
      v13 = *v7;
      switch(a2)
      {
        case 0u:
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v13);
          if ((_DWORD)result == 1)
            goto LABEL_10;
          break;
        case 1u:
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v13);
          if ((_DWORD)result == 3)
            goto LABEL_10;
          break;
        case 2u:
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v13);
          if ((result & 0xFE) == 4)
            goto LABEL_10;
          break;
        case 3u:
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v13);
          if ((_DWORD)result == 6)
            goto LABEL_10;
          break;
        default:
LABEL_10:
          result = WebCore::RealtimeMediaSource::end(*v7, 0);
          v12 = 1;
          break;
      }
      while (++v7 != v8)
      {
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_15;
      }
      v7 = v8;
LABEL_15:
      ;
    }
    while (v7 != v10);
    if ((v12 & 1) != 0)
      result = (uint64_t)WebCore::Document::updateIsPlayingMedia(a1);
  }
  if ((v11 & 1) == 0)
  {
    v21 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v21)
    {
      v22 = v9;
      do
      {
        v23 = *v22;
        if (*v22 != -1)
        {
          *v22 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        }
        ++v22;
        --v21;
      }
      while (v21);
    }
    return WTF::fastFree((WTF *)(v9 - 2), v6);
  }
  return result;
}

void WebCore::Document::updateVideoCaptureStateForMicrophoneInterruption(WebCore::Document *this, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  WTF *v23;
  void *v24;
  _DWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
  {
    v25[0] = 67109120;
    v25[1] = a2;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_INFO, "Document::updateVideoCaptureStateForMicrophoneInterruption %d", (uint8_t *)v25, 8u);
  }
  v5 = *((_QWORD *)this + 66);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(_DWORD **)(v7 + 8);
        if (v8)
        {
          ++*v8;
          {
            WebCore::Document::allDocumentsMap(void)::documents = 0;
          }
          v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(&WebCore::Document::allDocumentsMap(void)::documents);
          v11 = v9;
          v12 = v10;
          if (WebCore::Document::allDocumentsMap(void)::documents)
            v13 = WebCore::Document::allDocumentsMap(void)::documents
                + 48 * *(unsigned int *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
          else
            v13 = 0;
          if ((_QWORD *)v13 != v9)
          {
            do
            {
              v14 = *(_QWORD *)(v11[4] + 8);
              v15 = *(_DWORD *)(v14 + 24) + 2;
              *(_DWORD *)(v14 + 24) = v15;
              v16 = *(_QWORD *)(v14 + 528);
              if (v16)
              {
                v16 = *(_QWORD *)(v16 + 8);
                if (v16)
                {
                  v16 = *(_QWORD *)(v16 + 24);
                  if (v16)
                    v16 = *(_QWORD *)(v16 + 8);
                }
              }
              if (v8 == (_DWORD *)v16)
              {
                v17 = *(_QWORD **)(v14 + 3224);
                v18 = WTF::HashTable<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GeoNotifier,WTF::RawPtrTraits<WebCore::GeoNotifier>,WTF::DefaultRefDerefTraits<WebCore::GeoNotifier>>>>::begin(v17);
                v19 = v18;
                v20 = v10;
                if (v17)
                  v17 += *((unsigned int *)v17 - 1);
                if (v17 != v18)
                {
                  do
                  {
                    if (!*(_BYTE *)(*v19 + 294)
                      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v19 + 208))(*v19) == 3)
                    {
                      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v19 + 80))(*v19, a2);
                    }
                    while (++v19 != v20)
                    {
                      if ((unint64_t)(*v19 + 1) > 1)
                        goto LABEL_27;
                    }
                    v19 = v20;
LABEL_27:
                    ;
                  }
                  while (v19 != v17);
                  if (!v14)
                    goto LABEL_32;
                  v15 = *(_DWORD *)(v14 + 24);
                }
              }
              if (v15 == 2)
              {
                if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v14, v10);
              }
              else
              {
                *(_DWORD *)(v14 + 24) = v15 - 2;
              }
LABEL_32:
              while (1)
              {
                v11 += 6;
                if (v11 == v12)
                  break;
                v21 = v11[2];
                if (*v11 | v11[1] | v21)
                  v22 = v21 == -1;
                else
                  v22 = 1;
                if (!v22)
                  goto LABEL_37;
              }
              v11 = v12;
LABEL_37:
              ;
            }
            while (v11 != (_QWORD *)v13);
          }
          if (*v8 == 1)
          {
            WebCore::Page::~Page((uint64_t)v8);
            WTF::fastFree(v23, v24);
          }
          else
          {
            --*v8;
          }
        }
      }
    }
  }
}

uint64_t WebCore::Document::bgColor(WebCore::Document *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 159);
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return MEMORY[0x1E0CBF3B8];
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return MEMORY[0x1E0CBF3B8];
  v4 = MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v3 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v4;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
      {
LABEL_13:
        v9 = v9;
        v4 = v8 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v4 - 8);
          if (v10 == WebCore::HTMLNames::bgcolorAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::bgcolorAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::bgcolorAttr + 32))
          {
            break;
          }
          v4 += 16;
          if (!--v9)
          {
            v4 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v5)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
  }
  v4 = MEMORY[0x1E0CBF2F8];
  if (v5)
  {
LABEL_20:
    *(_DWORD *)(v3 + 24) = v5;
    return v4;
  }
LABEL_24:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return v4;
}

unsigned int *WebCore::Document::setBgColor(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 159);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return this;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 104);
        if (!v5)
          goto LABEL_21;
        v6 = *(_DWORD *)(v5 + 4);
        if ((v6 & 1) != 0)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = *(_DWORD *)(v5 + 52);
          if (!v8)
          {
LABEL_21:
            v9 = 0xFFFFFFFFLL;
LABEL_22:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::bgcolorAttr, a2, 0);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
        }
        else
        {
          v7 = (uint64_t *)(v5 + 32);
          v8 = v6 >> 5;
          if (!v8)
            goto LABEL_21;
        }
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          if (*v7 == WebCore::HTMLNames::bgcolorAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::bgcolorAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::bgcolorAttr + 32))
          {
            goto LABEL_22;
          }
          ++v9;
          v7 += 2;
          if (v8 == v9)
            goto LABEL_21;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::fgColor(WebCore::Document *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 159);
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return MEMORY[0x1E0CBF3B8];
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return MEMORY[0x1E0CBF3B8];
  v4 = MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v3 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v4;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
      {
LABEL_13:
        v9 = v9;
        v4 = v8 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v4 - 8);
          if (v10 == WebCore::HTMLNames::textAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::textAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::textAttr + 32))
          {
            break;
          }
          v4 += 16;
          if (!--v9)
          {
            v4 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v5)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
  }
  v4 = MEMORY[0x1E0CBF2F8];
  if (v5)
  {
LABEL_20:
    *(_DWORD *)(v3 + 24) = v5;
    return v4;
  }
LABEL_24:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return v4;
}

unsigned int *WebCore::Document::setFgColor(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 159);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return this;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 104);
        if (!v5)
          goto LABEL_21;
        v6 = *(_DWORD *)(v5 + 4);
        if ((v6 & 1) != 0)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = *(_DWORD *)(v5 + 52);
          if (!v8)
          {
LABEL_21:
            v9 = 0xFFFFFFFFLL;
LABEL_22:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::textAttr, a2, 0);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
        }
        else
        {
          v7 = (uint64_t *)(v5 + 32);
          v8 = v6 >> 5;
          if (!v8)
            goto LABEL_21;
        }
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          if (*v7 == WebCore::HTMLNames::textAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::textAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::textAttr + 32))
          {
            goto LABEL_22;
          }
          ++v9;
          v7 += 2;
          if (v8 == v9)
            goto LABEL_21;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::alinkColor(WebCore::Document *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 159);
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return MEMORY[0x1E0CBF3B8];
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return MEMORY[0x1E0CBF3B8];
  v4 = MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v3 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v4;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
      {
LABEL_13:
        v9 = v9;
        v4 = v8 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v4 - 8);
          if (v10 == WebCore::HTMLNames::alinkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::alinkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::alinkAttr + 32))
          {
            break;
          }
          v4 += 16;
          if (!--v9)
          {
            v4 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v5)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
  }
  v4 = MEMORY[0x1E0CBF2F8];
  if (v5)
  {
LABEL_20:
    *(_DWORD *)(v3 + 24) = v5;
    return v4;
  }
LABEL_24:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return v4;
}

unsigned int *WebCore::Document::setAlinkColor(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 159);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return this;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 104);
        if (!v5)
          goto LABEL_21;
        v6 = *(_DWORD *)(v5 + 4);
        if ((v6 & 1) != 0)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = *(_DWORD *)(v5 + 52);
          if (!v8)
          {
LABEL_21:
            v9 = 0xFFFFFFFFLL;
LABEL_22:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::alinkAttr, a2, 0);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
        }
        else
        {
          v7 = (uint64_t *)(v5 + 32);
          v8 = v6 >> 5;
          if (!v8)
            goto LABEL_21;
        }
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          if (*v7 == WebCore::HTMLNames::alinkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::alinkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::alinkAttr + 32))
          {
            goto LABEL_22;
          }
          ++v9;
          v7 += 2;
          if (v8 == v9)
            goto LABEL_21;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::linkColorForBindings(WebCore::Document *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 159);
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return MEMORY[0x1E0CBF3B8];
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return MEMORY[0x1E0CBF3B8];
  v4 = MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v3 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v4;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
      {
LABEL_13:
        v9 = v9;
        v4 = v8 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v4 - 8);
          if (v10 == WebCore::HTMLNames::linkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::linkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::linkAttr + 32))
          {
            break;
          }
          v4 += 16;
          if (!--v9)
          {
            v4 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v5)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
  }
  v4 = MEMORY[0x1E0CBF2F8];
  if (v5)
  {
LABEL_20:
    *(_DWORD *)(v3 + 24) = v5;
    return v4;
  }
LABEL_24:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return v4;
}

unsigned int *WebCore::Document::setLinkColorForBindings(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 159);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return this;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 104);
        if (!v5)
          goto LABEL_21;
        v6 = *(_DWORD *)(v5 + 4);
        if ((v6 & 1) != 0)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = *(_DWORD *)(v5 + 52);
          if (!v8)
          {
LABEL_21:
            v9 = 0xFFFFFFFFLL;
LABEL_22:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::linkAttr, a2, 0);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
        }
        else
        {
          v7 = (uint64_t *)(v5 + 32);
          v8 = v6 >> 5;
          if (!v8)
            goto LABEL_21;
        }
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          if (*v7 == WebCore::HTMLNames::linkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::linkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::linkAttr + 32))
          {
            goto LABEL_22;
          }
          ++v9;
          v7 += 2;
          if (v8 == v9)
            goto LABEL_21;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::vlinkColor(WebCore::Document *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 159);
  if (!v2)
    return MEMORY[0x1E0CBF3B8];
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return MEMORY[0x1E0CBF3B8];
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return MEMORY[0x1E0CBF3B8];
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return MEMORY[0x1E0CBF3B8];
  v4 = MEMORY[0x1E0CBF3B8];
  while ((*(_WORD *)(v3 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v4;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
      {
LABEL_13:
        v9 = v9;
        v4 = v8 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v4 - 8);
          if (v10 == WebCore::HTMLNames::vlinkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::vlinkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::vlinkAttr + 32))
          {
            break;
          }
          v4 += 16;
          if (!--v9)
          {
            v4 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v5)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
  }
  v4 = MEMORY[0x1E0CBF2F8];
  if (v5)
  {
LABEL_20:
    *(_DWORD *)(v3 + 24) = v5;
    return v4;
  }
LABEL_24:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return v4;
}

unsigned int *WebCore::Document::setVlinkColor(unsigned int *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 159);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return this;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v5 = *(_QWORD *)(v3 + 104);
        if (!v5)
          goto LABEL_21;
        v6 = *(_DWORD *)(v5 + 4);
        if ((v6 & 1) != 0)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = *(_DWORD *)(v5 + 52);
          if (!v8)
          {
LABEL_21:
            v9 = 0xFFFFFFFFLL;
LABEL_22:
            this = (unsigned int *)WebCore::Element::setAttributeInternal((WTF::StringImpl *)v3, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::vlinkAttr, a2, 0);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
            return this;
          }
        }
        else
        {
          v7 = (uint64_t *)(v5 + 32);
          v8 = v6 >> 5;
          if (!v8)
            goto LABEL_21;
        }
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          if (*v7 == WebCore::HTMLNames::vlinkAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::vlinkAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::vlinkAttr + 32))
          {
            goto LABEL_22;
          }
          ++v9;
          v7 += 2;
          if (v8 == v9)
            goto LABEL_21;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Document::logger(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::Page *v10;
  char v11;
  unsigned __int8 *v12;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  void *v28;

  if (*((_QWORD *)this + 364))
    return *((_QWORD *)this + 364);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v2 + 8) = 1;
  v3 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = off_1E335DEC0;
  *(_BYTE *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 16) = this;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (unsigned int *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = v2;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      v5 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *((_QWORD *)this + 66);
  if (!v9 || (v9 = *(_QWORD *)(v9 + 8)) == 0 || (v9 = *(_QWORD *)(v9 + 24)) == 0)
  {
    v10 = 0;
LABEL_16:
    v11 = 1;
    goto LABEL_17;
  }
  v10 = *(WebCore::Page **)(v9 + 8);
  if (!v10)
  {
    LOBYTE(v9) = 0;
    goto LABEL_16;
  }
  ++*(_DWORD *)v10;
  v9 = *((_QWORD *)v10 + 126);
  v11 = 0;
  LOBYTE(v9) = (v9 & 0x8000000000000000) == 0 || v9 == -1;
LABEL_17:
  if (*(WebCore::Document **)(v2 + 16) == this)
    *(_BYTE *)(v2 + 12) = v9;
  v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  if (__ldaxr(MEMORY[0x1E0CBF890]))
  {
    __clrex();
  }
  else if (!__stxr(1u, MEMORY[0x1E0CBF890]))
  {
    goto LABEL_23;
  }
  v5 = (unsigned int *)MEMORY[0x19AEA534C](MEMORY[0x1E0CBF890]);
LABEL_23:
  result = WTF::Logger::observers((WTF::Logger *)v5);
  v15 = result;
  v16 = *(unsigned int *)(result + 12);
  if ((_DWORD)v16 != *(_DWORD *)(result + 8))
  {
    v23 = (_QWORD *)(*(_QWORD *)result + 8 * v16);
    goto LABEL_37;
  }
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v16 + 1)
    v19 = v16 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(void **)result;
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(v15 + 8) = v19;
    *(_QWORD *)v15 = v21;
    memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if (*(void **)v15 == v20)
      {
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
    v16 = *(unsigned int *)(v15 + 12);
    v23 = (_QWORD *)(*(_QWORD *)v15 + 8 * v16);
LABEL_37:
    *v23 = (char *)this + 544;
    *(_DWORD *)(v15 + 12) = v16 + 1;
    v24 = __ldxr(v12);
    if (v24 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_42;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_42:
    if ((v11 & 1) == 0)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::Page::~Page(v10);
        WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    do
    {
      v25 = __ldaxr(v3);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v3));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    return *((_QWORD *)this + 364);
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::Document::registerArticleElement(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  WTF *result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;

  v2 = (uint64_t *)((char *)this + 1904);
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v14 = (WTF *)v3;
  WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::add(v2, (uint64_t *)&v14, (uint64_t)&v13);
  result = v14;
  v14 = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *((unsigned int *)result + 7);
      if ((_DWORD)v9)
      {
        v12 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v9));
        result = v12;
      }
      v10 = (WTF *)*((_QWORD *)result + 2);
      if (v10)
      {
        *((_QWORD *)result + 2) = 0;
        *((_DWORD *)result + 6) = 0;
        v11 = result;
        WTF::fastFree(v10, v5);
        result = v11;
      }
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t *WebCore::Document::unregisterArticleElement(uint64_t *this, WebCore::Element *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  v4 = this[238];
  if (v4)
  {
    this += 238;
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v4 + 8 * v9);
      if (v12 != -1)
      {
        if (!v12)
          goto LABEL_8;
        if (*(WebCore::Element **)(v12 + 8) == a2)
          break;
      }
      v9 = (v11 + i) & v5;
    }
    if ((_DWORD)v11 != *(_DWORD *)(v4 - 4))
      this = WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::remove(this, (_QWORD *)(v4 + 8 * v11));
  }
LABEL_8:
  v13 = v3[237];
  if (v13)
  {
    if (*(WebCore::Element **)(v13 + 8) == a2)
      return WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v3 + 237, 0);
  }
  return this;
}

uint64_t WebCore::Document::updateMainArticleElementAfterLayout(uint64_t this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;

  v2 = (_QWORD *)this;
  v3 = *(_QWORD *)(this + 1896);
  *(_QWORD *)(this + 1896) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v31 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v31)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v31));
      v32 = *(WTF **)(v3 + 16);
      if (v32)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v32, a2);
      }
      this = WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = v2[238];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 12);
    if ((v7 - 11) >= 0xFFFFFFF6)
    {
      v8 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v8)
      {
        v9 = 8 * v8;
        v10 = (uint64_t *)v2[238];
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          ++v10;
          v9 -= 8;
          if (!v9)
            goto LABEL_33;
        }
      }
      else
      {
        v10 = (uint64_t *)v2[238];
      }
      v11 = (uint64_t *)(v6 + 8 * v8);
      if (v10 == v11)
      {
LABEL_33:
        v12 = 0;
        v18 = 0.0;
        v15 = 0.0;
        v14 = 0.0;
      }
      else
      {
        v12 = 0;
        v13 = *v10;
        v14 = 0.0;
        v15 = 0.0;
        v16 = 0.0;
        do
        {
          v17 = *(_QWORD *)(v13 + 8);
          if ((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          {
            v18 = (float)*(int *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0xA4) * 0.015625;
            if (v18 >= v16)
            {
              v19 = (float)*(int *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0xA0) * 0.015625;
LABEL_23:
              *(_DWORD *)(v17 + 24) += 2;
              if (v12)
              {
                if (*(_DWORD *)(v12 + 24) == 2)
                {
                  if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                    this = WebCore::Node::removedLastRef((WebCore::Node *)v12);
                }
                else
                {
                  *(_DWORD *)(v12 + 24) -= 2;
                }
              }
              v12 = v17;
              v15 = v19;
              v14 = v16;
              goto LABEL_27;
            }
          }
          else
          {
            v18 = 0.0;
            v19 = 0.0;
            if (v16 <= 0.0)
              goto LABEL_23;
          }
          if (v18 >= v14)
            v14 = v18;
          v18 = v16;
          do
          {
LABEL_27:
            if (++v10 == v11)
              goto LABEL_34;
            v13 = *v10;
          }
          while ((unint64_t)(*v10 + 1) <= 1);
          v16 = v18;
        }
        while (v10 != v11);
      }
LABEL_34:
      if (v7 == 1)
      {
        if (v12)
        {
          v35 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v12);
          v20 = v35;
          if (v35)
          {
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 + 1, v35));
          }
        }
        else
        {
          v20 = 0;
        }
        this = v2[237];
        v2[237] = v20;
        if (!this)
          goto LABEL_56;
        do
        {
          v21 = __ldaxr((unsigned int *)this);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, (unsigned int *)this));
        if (v22)
          goto LABEL_56;
        atomic_store(1u, (unsigned int *)this);
        v23 = *(unsigned int *)(this + 28);
        if ((_DWORD)v23)
        {
          v38 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v23));
          this = v38;
        }
        v24 = *(WTF **)(this + 16);
        if (!v24)
        {
LABEL_43:
          this = WTF::fastFree((WTF *)this, a2);
LABEL_56:
          if (v12)
          {
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
          return this;
        }
        v33 = this;
      }
      else
      {
        if (v18 < (float)(v14 * 4.0))
          goto LABEL_56;
        v25 = v2[66];
        if (!v25)
          goto LABEL_56;
        v26 = *(_QWORD *)(v25 + 8);
        if (!v26)
          goto LABEL_56;
        this = *(_QWORD *)(v26 + 288);
        if (!this)
          goto LABEL_56;
        this = WebCore::LocalFrameView::layoutViewportRect((WebCore::LocalFrameView *)this);
        v27 = (int)a2 * (uint64_t)SHIDWORD(a2) / 64;
        if (HIDWORD(v27) != (int)v27 >> 31)
          LODWORD(v27) = ((HIDWORD(a2) ^ a2) >> 31) + 0x7FFFFFFF;
        if ((float)(v18 * v15) < (float)((float)((float)(int)v27 * 0.015625) * 5.0))
          goto LABEL_56;
        if (v12)
        {
          this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v12);
          if (this)
          {
            do
              v37 = __ldaxr((unsigned int *)this);
            while (__stlxr(v37 + 1, (unsigned int *)this));
          }
        }
        else
        {
          this = 0;
        }
        v28 = (unsigned int *)v2[237];
        v2[237] = this;
        if (!v28)
          goto LABEL_56;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (v30)
          goto LABEL_56;
        atomic_store(1u, v28);
        v33 = (uint64_t)v28;
        v34 = v28[7];
        if ((_DWORD)v34)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v34));
        v24 = *(WTF **)(v33 + 16);
        if (!v24)
          goto LABEL_70;
      }
      *(_QWORD *)(v33 + 16) = 0;
      *(_DWORD *)(v33 + 24) = 0;
      WTF::fastFree(v24, a2);
LABEL_70:
      this = v33;
      goto LABEL_43;
    }
  }
  return this;
}

uint64_t WebCore::Document::hasRequestedPageSpecificStorageAccessWithUserInteraction(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  return WTF::equal(*(WTF **)(a1 + 2968), *a2, a3);
}

WTF::StringImpl *WebCore::Document::setHasRequestedPageSpecificStorageAccessWithUserInteraction(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = *(WTF::StringImpl **)(a1 + 2968);
  *(_QWORD *)(a1 + 2968) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Document::wasLoadedWithDataTransferFromPrevalentResource(WebCore::Document *this)
{
  unint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  _BYTE *v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  size_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int16 v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  __int128 v52;
  char *v53;
  int8x16_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  uint64_t v61;
  char *v62;
  unsigned __int16 v63;
  unsigned int v64;
  _WORD *v65;
  _WORD *v66;
  int v68;
  unsigned int v69;
  unsigned __int128 *v70;
  unsigned __int128 *v71;
  unsigned __int128 v72;
  char v73;
  WTF::StringImpl *v74[5];
  WTF::StringImpl *v75;
  unint64_t v76;
  _BYTE v77[15];
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;

  WebCore::Document::referrer(this, &v75);
  MEMORY[0x19AEA52D4](v74, &v75, 0);
  result = v75;
  v75 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v74[0])
  {
    if (!*((_DWORD *)v74[0] + 1)
      || (WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v75, (const WTF::URL *)v74),
          (v4 = v75) == 0))
    {
LABEL_97:
      result = v74[0];
      v74[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v5 = *(_DWORD *)v75;
    *(_DWORD *)v75 += 2;
    v75 = 0;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v2);
    if (!*((_DWORD *)v4 + 1))
    {
LABEL_95:
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v2);
      else
        *(_DWORD *)v4 -= 2;
      goto LABEL_97;
    }
    v6 = WTF::URL::port((WTF::URL *)v74);
    if ((v6 & 0xFF0000) == 0)
    {
      v26 = WTF::URL::protocol((WTF::URL *)v74);
      v28 = *((_DWORD *)v4 + 1);
      *(_DWORD *)v4 += 2;
      if (v28 < 0)
        goto LABEL_116;
      v14 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v14)
        goto LABEL_116;
      v30 = v27;
      v14 = __OFADD__(v29, 3);
      v31 = v29 + 3;
      v32 = v14;
      if ((v27 & 0x80000000) != 0
        || v32
        || (v33 = (_BYTE *)v26, v34 = (v27 + v31), __OFADD__((_DWORD)v27, v31)))
      {
LABEL_116:
        v75 = 0;
      }
      else
      {
        if ((v27 & 0xFF00000000) != 0)
          v35 = (*((unsigned __int8 *)v4 + 16) >> 2) & 1;
        else
          v35 = 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v34, v35, v33, v30, (int8x16_t *)"://", 3u, (uint64_t)v4, 47, &v75);
        v36 = v75;
        if (v75)
        {
          v75 = 0;
          v37 = (WTF::StringImpl *)*((_QWORD *)this + 372);
          *((_QWORD *)this + 372) = v36;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
            {
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v2);
              v51 = v75;
              v75 = 0;
              if (v51)
                goto LABEL_91;
            }
            else
            {
              *(_DWORD *)v37 -= 2;
              v75 = 0;
            }
          }
LABEL_93:
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v2);
          else
            *(_DWORD *)v4 -= 2;
          goto LABEL_95;
        }
      }
      goto LABEL_117;
    }
    v7 = v6;
    v8 = (_BYTE *)WTF::URL::protocol((WTF::URL *)v74);
    v9 = v2;
    v10 = 0;
    v11 = *((_DWORD *)v4 + 1);
    *(_DWORD *)v4 += 2;
    v12 = v7;
    do
    {
      ++v10;
      v13 = v12;
      v12 /= 0xAu;
    }
    while (v13 > 9);
    if (v10 < 0)
      goto LABEL_117;
    v14 = __OFADD__(v10, 1);
    v15 = v10 + 1;
    if (v14)
      goto LABEL_117;
    v14 = __OFADD__(v15, 1);
    v16 = v15 + 1;
    v17 = v14;
    if (v11 < 0)
      goto LABEL_117;
    if (v17)
      goto LABEL_117;
    v14 = __OFADD__(v11, v16);
    v18 = v11 + v16;
    if (v14)
      goto LABEL_117;
    v14 = __OFADD__(v18, 3);
    v19 = v18 + 3;
    v20 = v14;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_117;
    if (v20)
      goto LABEL_117;
    v21 = (v2 + v19);
    if (__OFADD__((_DWORD)v2, v19))
      goto LABEL_117;
    if ((v2 & 0xFF00000000) != 0 && (*((_BYTE *)v4 + 16) & 4) != 0)
    {
      if ((_DWORD)v21)
      {
        if ((v21 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
          v22 = v75;
          if (v75)
          {
            v40 = (char *)v75 + 20;
            *(_DWORD *)v75 = 2;
            *((_DWORD *)v22 + 1) = v21;
            *((_QWORD *)v22 + 1) = (char *)v22 + 20;
            *((_DWORD *)v22 + 4) = 4;
            if ((_DWORD)v9)
            {
              if ((_DWORD)v9 == 1)
                *v40 = *v8;
              else
                memcpy((char *)v22 + 20, v8, v9);
            }
            v41 = &v40[v9];
            v41[2] = 47;
            *(_WORD *)v41 = 12090;
            v42 = v41 + 3;
            v2 = *((_QWORD *)v4 + 1);
            v43 = *((unsigned int *)v4 + 1);
            if ((*((_BYTE *)v4 + 16) & 4) != 0)
            {
              if ((_DWORD)v43)
              {
                if ((_DWORD)v43 == 1)
                  *v42 = *(_BYTE *)v2;
                else
                  memcpy(v42, (const void *)v2, v43);
              }
            }
            else
            {
              if (v43 < 0x10)
              {
                v70 = (unsigned __int128 *)(v41 + 3);
              }
              else
              {
                v70 = (unsigned __int128 *)&v42[v43 & 0xFFFFFFF0];
                v71 = (unsigned __int128 *)(v41 + 3);
                do
                {
                  v72 = (unsigned __int128)vld2q_s8((const char *)v2);
                  v2 += 32;
                  *v71++ = v72;
                }
                while (v71 != v70);
              }
              while (v70 != (unsigned __int128 *)&v42[v43])
              {
                v73 = *(_BYTE *)v2;
                v2 += 2;
                *(_BYTE *)v70 = v73;
                v70 = (unsigned __int128 *)((char *)v70 + 1);
              }
            }
            v44 = 0;
            v45 = &v42[*((unsigned int *)v4 + 1)];
            *v45 = 58;
            v46 = v7;
            do
            {
              v47 = v46;
              *((_BYTE *)&v75 + v44-- + 6) = (v46 % 0xAu) | 0x30;
              v46 /= 0xAu;
            }
            while (v47 > 9);
            v48 = v45 + 1;
            if (v44 + 8 <= 7)
              memcpy(v48, (char *)&v75 + v44 + 7, -v44);
            v49 = 0;
            do
            {
              ++v49;
              v50 = v7;
              v7 /= 0xAu;
            }
            while (v50 > 9);
            *((_BYTE *)v48 + v49) = 47;
LABEL_90:
            v51 = (WTF::StringImpl *)*((_QWORD *)this + 372);
            *((_QWORD *)this + 372) = v22;
            if (v51)
            {
LABEL_91:
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v2);
              else
                *(_DWORD *)v51 -= 2;
              goto LABEL_93;
            }
            goto LABEL_93;
          }
        }
LABEL_117:
        __break(0xC471u);
        JUMPOUT(0x19599EE20);
      }
    }
    else if ((_DWORD)v21)
    {
      if (v21 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
        v22 = v75;
        if (v75)
        {
          *(_DWORD *)v75 = 2;
          *((_DWORD *)v22 + 1) = v21;
          *((_QWORD *)v22 + 1) = (char *)v22 + 20;
          *((_DWORD *)v22 + 4) = 0;
          v75 = (WTF::StringImpl *)v8;
          v76 = v9;
          WTF::StringView::getCharacters<char16_t>(&v75, (char *)v22 + 20);
          v23 = (uint64_t)v22 + 2 * v76 + 20;
          *(_DWORD *)v23 = 3080250;
          *(_WORD *)(v23 + 4) = 47;
          v24 = (char *)(v23 + 6);
          v2 = *((_QWORD *)v4 + 1);
          v25 = *((unsigned int *)v4 + 1);
          if ((*((_BYTE *)v4 + 16) & 4) != 0)
          {
            v38 = &v24[2 * v25];
            if (v25 >= 0x40)
            {
              v39 = &v24[2 * (v25 & 0xFFFFFFC0)];
              v52 = 0uLL;
              v53 = v24;
              do
              {
                v78.val[0] = *(int8x16_t *)v2;
                v54 = *(int8x16_t *)(v2 + 16);
                v79.val[0] = *(int8x16_t *)(v2 + 32);
                v55 = *(_OWORD *)(v2 + 48);
                v2 += 64;
                v56 = v55;
                v79.val[1] = 0uLL;
                v80.val[0] = v54;
                v78.val[1] = 0uLL;
                v57 = v53;
                vst2q_s8(v57, v78);
                v57 += 32;
                v80.val[1] = 0uLL;
                vst2q_s8(v57, v80);
                v58 = v53 + 64;
                vst2q_s8(v58, v79);
                v59 = v53 + 96;
                vst2q_s8(v59, *(int8x16x2_t *)(&v52 - 1));
                v53 += 128;
              }
              while (v53 != v39);
            }
            else
            {
              v39 = v24;
            }
            while (v39 != v38)
            {
              v60 = *(unsigned __int8 *)v2++;
              *(_WORD *)v39 = v60;
              v39 += 2;
            }
          }
          else if ((_DWORD)v25 == 1)
          {
            *(_WORD *)v24 = *(_WORD *)v2;
          }
          else if ((_DWORD)v25)
          {
            memcpy(v24, (const void *)v2, 2 * v25);
          }
          v61 = 0;
          v62 = &v24[2 * *((unsigned int *)v4 + 1)];
          *(_WORD *)v62 = 58;
          v63 = v7;
          do
          {
            v64 = v63;
            v77[v61-- + 6] = (v63 % 0xAu) | 0x30;
            v63 /= 0xAu;
          }
          while (v64 > 9);
          v65 = v62 + 2;
          if (v61 + 8 <= 7)
          {
            v66 = v65;
            do
              *v66++ = v77[v61 + 7];
            while (!__CFADD__(v61++, 1));
          }
          v68 = 0;
          do
          {
            ++v68;
            v69 = v7;
            v7 /= 0xAu;
          }
          while (v69 > 9);
          v65[v68] = 47;
          goto LABEL_90;
        }
      }
      goto LABEL_117;
    }
    v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_90;
  }
  return result;
}

_DWORD *WebCore::Document::setConsoleMessageListener(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 16);
  result = *(_DWORD **)(a1 + 2920);
  *(_QWORD *)(a1 + 2920) = v3;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::Document::timeline(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;

  result = *((_QWORD *)this + 366);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0xA0);
    result = WebCore::DocumentTimeline::DocumentTimeline(v3, this, 0.0);
    v4 = (_DWORD *)*((_QWORD *)this + 366);
    *((_QWORD *)this + 366) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return *((_QWORD *)this + 366);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::Document::acceleratedTimeline(WebCore::Document *this)
{
  WTF::MonotonicTime *v1;
  WTF::StringImpl *v3;
  double v4;
  WebCore::LocalDOMWindow *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v1 = (WTF::MonotonicTime *)*((_QWORD *)this + 428);
  if (!v1)
  {
    v1 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v1 = 0;
    *((_QWORD *)v1 + 1) = 0;
    WTF::MonotonicTime::now(v1);
    *((double *)v1 + 1) = v4;
    v5 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
    if (v5)
      *((double *)v1 + 1) = *((double *)v1 + 1)
                          - *(double *)&WebCore::timePrecision
                          * floor((v4 - *(double *)(WebCore::LocalDOMWindow::performance(v5) + 168))/ *(double *)&WebCore::timePrecision)* 1000.0/ 1000.0;
    v6 = (WTF *)*((_QWORD *)this + 428);
    *((_QWORD *)this + 428) = v1;
    if (v6)
    {
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        v8 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v8)
        {
          v9 = v7 + 16;
          do
          {
            if (*(_QWORD *)(v9 - 16) != -1)
            {
              if (*(_BYTE *)(v9 + 8))
              {
                v10 = *(WTF::StringImpl **)v9;
                *(_QWORD *)v9 = 0;
                if (v10)
                {
                  if (*(_DWORD *)v10 == 2)
                    WTF::StringImpl::destroy(v10, v3);
                  else
                    *(_DWORD *)v10 -= 2;
                }
              }
            }
            v9 += 32;
            --v8;
          }
          while (v8);
        }
        WTF::fastFree((WTF *)(v7 - 16), v3);
      }
      WTF::fastFree(v6, v3);
      return (WTF::MonotonicTime *)*((_QWORD *)this + 428);
    }
  }
  return v1;
}

void WebCore::Document::matchingAnimations(WebCore::Document *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  const WebCore::WebAnimation *v27;
  const std::nothrow_t *v28;
  unint64_t j;
  const WebCore::WebAnimation **v30;
  const WebCore::WebAnimation **v32;
  void *__src;

  v6 = *((_QWORD *)this + 66);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 120);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          *(_DWORD *)(v9 + 24) += 2;
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
          *(_DWORD *)(v10 + 24) += 2;
          WebCore::Document::updateLayout(v10, 0, 0);
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
    }
  }
  WebCore::Document::updateStyleIfNeeded(this);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
    return;
  }
  if (WebCore::WebAnimation::instances(void)::instances
    && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
  {
    v12 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      for (i = WebCore::WebAnimation::instances(void)::instances; (unint64_t)(*(_QWORD *)i + 1) <= 1; i += 8)
      {
        v13 -= 8;
        if (!v13)
          return;
      }
    }
    else
    {
      i = WebCore::WebAnimation::instances(void)::instances;
    }
    v15 = WebCore::WebAnimation::instances(void)::instances + 8 * v12;
    if (v15 != i)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(_QWORD *)i;
        if (*(_BYTE *)(*(_QWORD *)i + 158))
        {
          v19 = *(_QWORD **)(v18 + 56);
          if (v19)
          {
            if (((*(uint64_t (**)(_QWORD))(*v19 + 16))(*(_QWORD *)(v18 + 56)) & 1) != 0
              || (*(unsigned int (**)(_QWORD *))(*v19 + 24))(v19)
              && (v26 = v19[33]) != 0
              && (*(_BYTE *)(v26 + 22) & 8) != 0
              && *(WebCore::Document **)(*(_QWORD *)(v26 + 40) + 8) == this
              && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2))
            {
              v20 = v16;
              if (v16 == *(_DWORD *)(a3 + 8))
              {
                __src = v17;
                v21 = v16 + ((unint64_t)v16 >> 2);
                if (v21 >= 0x10)
                  v22 = v21 + 1;
                else
                  v22 = 16;
                if (v22 <= (unint64_t)v16 + 1)
                  v23 = v16 + 1;
                else
                  v23 = v22;
                if (v23 >> 29)
                {
                  __break(0xC471u);
                  return;
                }
                v24 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
                *(_DWORD *)(a3 + 8) = v23;
                *(_QWORD *)a3 = v24;
                memcpy(v24, __src, 8 * v16);
                if (__src)
                {
                  if (v24 == __src)
                  {
                    v24 = 0;
                    *(_QWORD *)a3 = 0;
                    *(_DWORD *)(a3 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)__src, v25);
                }
                v17 = v24;
              }
              ++*(_DWORD *)(v18 + 24);
              ++v16;
              *((_QWORD *)v17 + v20) = v18;
              *(_DWORD *)(a3 + 12) = v16;
              goto LABEL_42;
            }
          }
        }
        do
        {
LABEL_42:
          i += 8;
          if (i == v15)
            goto LABEL_45;
        }
        while ((unint64_t)(*(_QWORD *)i + 1) <= 1);
      }
      while (i != v15);
LABEL_45:
      if (v16)
      {
        v27 = *(const WebCore::WebAnimation **)a3;
        v28 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        for (j = v16; ; j >>= 1)
        {
          v30 = (const WebCore::WebAnimation **)operator new(8 * j, v28);
          if (v30)
            break;
          if (j <= 1)
          {
            std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(v27, (WebCore **)v27 + v16, v16, 0, 0);
            return;
          }
        }
        v32 = v30;
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(v27, (WebCore **)v27 + v16, v16, v30, j);
        operator delete(v32);
      }
    }
  }
}

uint64_t WebCore::Document::addTopLayerElement(WebCore::Document *this, WebCore::Element *a2)
{
  void *v4;
  uint64_t result;
  _BYTE *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  WebCore::Element ***v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  WebCore::Element ***v17;
  WebCore::Element **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  WebCore::Node *v28;
  _BYTE v29[24];

  if (*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8) != this || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19599F54CLL);
  }
  *((_DWORD *)a2 + 6) += 2;
  v28 = a2;
  WTF::ListHashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)this + 386, (uint64_t *)&v28, (uint64_t)v29);
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (!v29[16])
  {
    __break(0xC471u);
    JUMPOUT(0x19599F5C8);
  }
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    return result;
  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  v6 = *(_BYTE **)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
  if (!v6
    || *v6 != 1
    || (*((_BYTE *)a2 + 54) & 0x40) != 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24)
    && *((_BYTE *)a2 + 120))
  {
    return result;
  }
  v7 = (uint64_t *)((char *)this + 3112);
  *((_DWORD *)a2 + 6) += 2;
  v8 = *((_QWORD *)this + 389);
  if (v8
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)this + 389, 8u, 0), (v8 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v9;
    v17 = (WebCore::Element ***)(v8 + 8 * v16);
    v18 = *v17;
    if (*v17 == (WebCore::Element **)-1)
    {
      v10 = (WebCore::Element ***)(v8 + 8 * v16);
      goto LABEL_23;
    }
    if (!v18)
      break;
    if (*v18 == a2)
    {
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2, v4);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      __break(0xC471u);
      JUMPOUT(0x19599F644);
    }
LABEL_23:
    v14 = i + v16;
  }
  if (v10)
  {
    *v10 = 0;
    --*(_DWORD *)(*v7 - 16);
    v17 = v10;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  *v17 = (WebCore::Element **)result;
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_40:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
      goto LABEL_43;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    if ((_DWORD)v24)
      goto LABEL_40;
    v25 = 8;
LABEL_43:
    result = *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)this + 389, v25, v17);
  }
  v26 = *((_QWORD *)this + 391);
  *(_QWORD *)(result + 8) = v26;
  *(_QWORD *)(result + 16) = 0;
  if (v26)
    v27 = (_QWORD *)(v26 + 16);
  else
    v27 = (_QWORD *)((char *)this + 3120);
  *v27 = result;
  *((_QWORD *)this + 391) = result;
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = result & v7;
    v12 = (uint64_t *)(v6 + 8 * (result & v7));
    v13 = (_QWORD *)*v12;
    if (*v12 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_10;
    }
    if (!v13)
      break;
    if (*v13 == *a2)
    {
      v22 = 0;
      goto LABEL_28;
    }
LABEL_10:
    result = i + v11;
  }
  if (v9)
  {
    *v9 = 0;
    --*(_DWORD *)(*a1 - 16);
    v12 = v9;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v14;
  *v12 = result;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
    {
LABEL_20:
      v21 = (_DWORD)v20 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v20));
      goto LABEL_23;
    }
  }
  else if (3 * v20 <= 4 * v19)
  {
    if ((_DWORD)v20)
      goto LABEL_20;
    v21 = 8;
LABEL_23:
    v12 = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(a1, v21, (_QWORD **)v12);
    result = *v12;
  }
  v23 = a1[2];
  *(_QWORD *)(result + 8) = v23;
  *(_QWORD *)(result + 16) = 0;
  if (v23)
    v24 = (uint64_t *)(v23 + 16);
  else
    v24 = a1 + 1;
  *v24 = result;
  a1[2] = result;
  v13 = (_QWORD *)*v12;
  v22 = 1;
LABEL_28:
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

uint64_t WebCore::Document::removeTopLayerElement(WebCore::Document *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  unsigned int v9;
  WebCore::Element **v10;
  int v11;
  void *v12;
  int j;
  uint64_t v14;
  WebCore::Element **v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  WebCore::Element *v22;
  WebCore::Element *v23;
  WebCore::Element **v24;
  WebCore::Element *v25;
  uint64_t result;
  void *v27;
  __int16 v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int k;
  WTF *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int m;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;

  if (*(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8) != this || (*(_BYTE *)(a2 + 23) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19599FB1CLL);
  }
  v4 = *((_QWORD *)this + 386);
  if (!v4)
    goto LABEL_78;
  v5 = (_QWORD *)((char *)this + 3088);
  v6 = *(_DWORD *)(v4 - 8);
  v7 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
  for (i = 0; ; v7 = ++i + v9)
  {
    v9 = v7 & v6;
    v10 = *(WebCore::Element ***)(v4 + 8 * (v7 & v6));
    if (v10 != (WebCore::Element **)-1)
    {
      if (!v10)
        goto LABEL_78;
      if (*v10 == (WebCore::Element *)a2)
        break;
    }
  }
  if (v9 == *(_DWORD *)(v4 - 4))
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x19599FBD8);
  }
  v11 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(*(_QWORD **)(v4 + 8 * v9));
  for (j = 0; ; v11 = j + v14)
  {
    v14 = v11 & v6;
    v15 = *(WebCore::Element ***)(v4 + 8 * v14);
    if (v15 != (WebCore::Element **)-1)
    {
      if (!v15)
      {
        v16 = (_QWORD *)*v5;
        if (!*v5)
          goto LABEL_24;
        v17 = *((unsigned int *)v16 - 1);
        v18 = &v16[v17];
        goto LABEL_19;
      }
      if (*v15 == *v10)
        break;
    }
    ++j;
  }
  v18 = (_QWORD *)(v4 + 8 * v14);
  v16 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_20;
  v17 = *((unsigned int *)v16 - 1);
LABEL_19:
  v16 += v17;
LABEL_20:
  if (v16 != v18)
  {
    *v18 = -1;
    ++*(_DWORD *)(*v5 - 16);
    v19 = (_QWORD *)*v5;
    v20 = *v5 ? *((_DWORD *)v19 - 3) - 1 : -1;
    *((_DWORD *)v19 - 3) = v20;
    v21 = (_QWORD *)*v5;
    if (*v5)
    {
      v58 = 6 * *((_DWORD *)v21 - 3);
      v59 = *((_DWORD *)v21 - 1);
      if (v58 < v59 && v59 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash((uint64_t *)this + 386, v59 >> 1, 0);
    }
  }
LABEL_24:
  v22 = v10[1];
  v23 = v10[2];
  if (v22)
  {
    *((_QWORD *)v22 + 2) = v23;
    v23 = v10[2];
  }
  else
  {
    *((_QWORD *)this + 387) = v23;
  }
  if (v23)
    v24 = (WebCore::Element **)((char *)v23 + 8);
  else
    v24 = (WebCore::Element **)((char *)this + 3104);
  *v24 = v22;
  v25 = *v10;
  *v10 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v12);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  result = WTF::fastFree((WTF *)v10, v12);
  v28 = *(_WORD *)(a2 + 28);
  if ((v28 & 0x10) != 0)
    v29 = a2;
  else
    v29 = 0;
  if ((v28 & 0x10) != 0 && (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v30 = *(_BYTE **)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8);
    if (v30)
    {
      if (v30[1] && *v30 == 1)
      {
        v31 = *((_QWORD *)this + 389);
        if (!v31)
          goto LABEL_81;
        v32 = (uint64_t *)((char *)this + 3112);
        v33 = *(_DWORD *)(v31 - 8);
        v34 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
        v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
        v37 = v33 & ((v36 >> 31) ^ v36);
        for (k = 1; ; v37 = (v37 + k++) & v33)
        {
          v39 = *(WTF **)(v31 + 8 * v37);
          if (v39 != (WTF *)-1)
          {
            if (!v39)
              goto LABEL_81;
            if (*(_QWORD *)v39 == v29)
              break;
          }
        }
        v40 = *(_DWORD *)(v31 - 4);
        if (v37 == v40)
        {
LABEL_81:
          __break(0xC471u);
          JUMPOUT(0x19599FC08);
        }
        v41 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
        v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
        v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
        v44 = v33 & ((v43 >> 31) ^ v43);
        for (m = 1; ; ++m)
        {
          v46 = v44;
          v47 = *(_QWORD **)(v31 + 8 * v44);
          if (v47 != (_QWORD *)-1)
          {
            if (!v47)
              goto LABEL_68;
            if (*v47 == v29)
              break;
          }
          v44 = (v46 + m) & v33;
        }
        if (v40 != (_DWORD)v46)
        {
          *(_QWORD *)(v31 + 8 * v46) = -1;
          ++*(_DWORD *)(*v32 - 16);
          v48 = *v32;
          v49 = *v32 ? *(_DWORD *)(v48 - 12) - 1 : -1;
          *(_DWORD *)(v48 - 12) = v49;
          v50 = *v32;
          if (*v32)
          {
            v51 = 6 * *(_DWORD *)(v50 - 12);
            v52 = *(_DWORD *)(v50 - 4);
            if (v51 < v52 && v52 >= 9)
              WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(v32, v52 >> 1, 0);
          }
        }
LABEL_68:
        v54 = *((_QWORD *)v39 + 1);
        v55 = *((_QWORD *)v39 + 2);
        if (v54)
        {
          *(_QWORD *)(v54 + 16) = v55;
          v55 = *((_QWORD *)v39 + 2);
        }
        else
        {
          *((_QWORD *)this + 390) = v55;
        }
        if (v55)
          v56 = (_QWORD *)(v55 + 8);
        else
          v56 = (_QWORD *)((char *)this + 3128);
        *v56 = v54;
        v57 = *(_QWORD *)v39;
        *(_QWORD *)v39 = 0;
        if (v57)
        {
          if (*(_DWORD *)(v57 + 24) == 2)
          {
            if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v57, v27);
          }
          else
          {
            *(_DWORD *)(v57 + 24) -= 2;
          }
        }
        return WTF::fastFree(v39, v27);
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::activeModalDialog(WebCore::Document *this)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;

  v1 = (uint64_t *)*((_QWORD *)this + 387);
  if (!v1)
    return 0;
  v3 = 0;
  do
  {
    v4 = (uint64_t **)((char *)this + 3104);
    if (v3)
      v4 = (uint64_t **)(v3 + 1);
    v3 = *v4;
    v5 = **v4;
    if ((*(_WORD *)(v5 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
    {
      break;
    }
    v5 = 0;
  }
  while (v3 != v1);
  return v5;
}

uint64_t WebCore::Document::topmostAutoPopover(WebCore::Document *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 389);
  if (v1 && *(_DWORD *)(v1 - 12))
    return **((_QWORD **)this + 391);
  else
    return 0;
}

WTF::StringImpl *WebCore::Document::hideAllPopoversUntil(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl **v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int i;
  WTF::StringImpl **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  BOOL v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;

  v6 = result;
  if (a2)
  {
    v8 = 0;
    v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = (v11 >> 31) ^ v11;
    do
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)v6 + 390);
      if (v13)
      {
        v14 = 0;
        while (1)
        {
          v15 = *v13;
          if (*v13 != a2 && (v14 & 1) != 0)
            break;
          v14 |= v15 == a2;
          v13 = (WTF::StringImpl **)v13[2];
          if (!v13)
            goto LABEL_8;
        }
        if (!v15)
        {
LABEL_8:
          v15 = 0;
          if ((v14 & 1) == 0)
            goto LABEL_33;
          goto LABEL_9;
        }
        *((_DWORD *)v15 + 6) += 2;
        if ((v14 & 1) == 0)
          goto LABEL_33;
        while ((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v21 = *(_QWORD *)((*((_QWORD *)v15 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
          if (!v21 || !*(_BYTE *)(v21 + 1))
            break;
          v22 = *((_QWORD *)v6 + 389);
          if (!v22)
          {
            v28 = 0;
            v26 = 1;
            goto LABEL_54;
          }
          if (!*(_DWORD *)(v22 - 12))
            break;
          v23 = **((_QWORD **)v6 + 391);
          if (!v23)
            break;
          *(_DWORD *)(v23 + 24) += 2;
          result = (WTF::StringImpl *)WebCore::HTMLElement::hidePopoverInternal(&v32, v23, a3, a4 != 0);
          if (v34)
          {
            result = v33;
            v33 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
              else
                *(_DWORD *)result -= 2;
            }
          }
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
LABEL_9:
        v16 = *((_QWORD *)v6 + 389);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 - 8);
          v18 = v17 & v12;
          for (i = 1; ; ++i)
          {
            v20 = *(WTF::StringImpl ***)(v16 + 8 * v18);
            if (v20 != (WTF::StringImpl **)-1)
            {
              if (!v20)
                goto LABEL_46;
              if (*v20 == a2)
                break;
            }
            v18 = (v18 + i) & v17;
          }
          if (*(_DWORD *)(v16 - 12))
            v27 = (WTF::StringImpl *)**((_QWORD **)v6 + 391);
          else
            v27 = 0;
          v8 = v27 != a2;
          if (v27 != a2)
            LOBYTE(a4) = 0;
        }
        else
        {
LABEL_46:
          v8 = 0;
        }
        v26 = 1;
      }
      else
      {
        v15 = 0;
LABEL_33:
        while (1)
        {
          v24 = *((_QWORD *)v6 + 389);
          if (!v24)
            break;
          if (!*(_DWORD *)(v24 - 12))
            break;
          v25 = **((_QWORD **)v6 + 391);
          if (!v25)
            break;
          *(_DWORD *)(v25 + 24) += 2;
          result = (WTF::StringImpl *)WebCore::HTMLElement::hidePopoverInternal(&v35, v25, a3, a4 != 0);
          if (v37)
          {
            result = v36;
            v36 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
              else
                *(_DWORD *)result -= 2;
            }
          }
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
        }
        v26 = 0;
      }
      v28 = v8;
      if (v15)
      {
LABEL_54:
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            result = (WTF::StringImpl *)WebCore::Node::removedLastRef(v15, a2);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      if (!v26)
        break;
      v8 = 1;
    }
    while (v28);
  }
  else
  {
    while (1)
    {
      v31 = *((_QWORD *)v6 + 389);
      if (!v31)
        break;
      if (!*(_DWORD *)(v31 - 12))
        break;
      v29 = **((_QWORD **)v6 + 391);
      if (!v29)
        break;
      *(_DWORD *)(v29 + 24) += 2;
      result = (WTF::StringImpl *)WebCore::HTMLElement::hidePopoverInternal(&v35, v29, a3, a4);
      if (v37)
      {
        result = v36;
        v36 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::Document::handlePopoverLightDismiss(unsigned int *this, const WebCore::PointerEvent *a2, WebCore::Node *a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  WebCore::Node *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::Node *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  __int16 v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  __int16 v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  WebCore::Node *v46;
  WebCore::Node *v47;

  v3 = *((_QWORD *)this + 389);
  if (!v3)
    return this;
  if (!*(_DWORD *)(v3 - 12))
    return this;
  v4 = this;
  v5 = **((_QWORD **)this + 391);
  if (!v5)
    return this;
  v6 = (unsigned int *)a3;
  *(_DWORD *)(v5 + 24) += 2;
  if ((*((_WORD *)a3 + 14) & 8) == 0)
  {
    v6 = (unsigned int *)*((_QWORD *)a3 + 4);
    if (!v6 || (v6[7] & 8) == 0)
    {
      v8 = 0;
      goto LABEL_8;
    }
  }
  v10 = 0;
  v11 = 0;
  v6[6] += 2;
  while (1)
  {
    v12 = v6;
    if ((v6[7] & 0x10) == 0)
      goto LABEL_43;
    v13 = v6[6];
    v6[6] = v13 + 2;
    if (v10)
      goto LABEL_14;
    if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) == 0
      || (v24 = *(_BYTE **)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) == 0
      || *v24 != 1
      || !v24[1])
    {
      v10 = 0;
LABEL_14:
      if (v11)
        goto LABEL_37;
      goto LABEL_15;
    }
    v6[6] = v13 + 4;
    v10 = v6;
    if (v11)
      goto LABEL_37;
LABEL_15:
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 848))(v6);
    if (!(_DWORD)this)
      v6 = 0;
    if (v6)
      v6[6] += 2;
    if ((_DWORD)this)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 5) + 8) + 680) + 680) & 0x80000000) == 0)
        goto LABEL_23;
      v14 = *(_QWORD *)(*((_QWORD *)v12 + 12) + 24);
      if (v14 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        if (!WebCore::HTMLInputElement::isTextButton((WebCore::HTMLInputElement *)v12)
          && !WebCore::HTMLInputElement::isImageButton((WebCore::HTMLInputElement *)v12))
        {
LABEL_23:
          v11 = 0;
          v47 = 0;
LABEL_24:
          this = WebCore::HTMLFormControlElement::popoverTargetElement(v12, (unsigned int **)&v46);
          v15 = v46;
          if (v46)
          {
            if ((*((_QWORD *)v46 + 9) & 0xFFFFFFFFFFFFLL) == 0
              || (v25 = *(_BYTE **)((*((_QWORD *)v46 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) == 0
              || *v25 != 1
              || !v25[1])
            {
              v46 = 0;
              if (*((_DWORD *)v15 + 6) == 2)
              {
                if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef(v15, a2);
              }
              else
              {
                *((_DWORD *)v15 + 6) -= 2;
              }
              v15 = 0;
            }
          }
          if (v11)
          {
            if (*((_DWORD *)v11 + 6) == 2)
            {
              if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                this = WebCore::Node::removedLastRef(v11, a2);
            }
            else
            {
              *((_DWORD *)v11 + 6) -= 2;
            }
          }
          v11 = v15;
          goto LABEL_34;
        }
      }
      else if (v14 != *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
      {
        goto LABEL_23;
      }
      this = (unsigned int *)WebCore::Element::getElementAttribute((WebCore::Element *)v12, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::invoketargetAttr, (uint64_t *)&v47);
      v11 = v47;
      if (!v47)
        goto LABEL_23;
      v26 = *((_WORD *)v47 + 14);
      v47 = 0;
      if ((v26 & 0x10) == 0)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, a2);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
        v11 = 0;
        goto LABEL_24;
      }
      if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_24;
      v27 = *(_BYTE **)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8);
      if (!v27 || *v27 != 1 || !v27[1])
        goto LABEL_24;
    }
    else
    {
      v11 = 0;
    }
LABEL_34:
    if (v6)
    {
      if (v6[6] == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        v6[6] -= 2;
      }
    }
LABEL_37:
    if (v10)
      break;
    v16 = v12[6];
LABEL_41:
    v17 = v16 - 2;
    if (v17)
    {
      v12[6] = v17;
    }
    else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
LABEL_43:
    v18 = *((_QWORD *)v12 + 4);
    if (v18)
    {
      if ((*(_WORD *)(v18 + 28) & 8) != 0)
      {
        v19 = *(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL;
        if (v19)
        {
          v23 = *(_QWORD *)(v19 + 88);
          if (v23)
          {
            this = *(unsigned int **)(v23 + 224);
            if (this)
            {
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)this + 16))(this, v12);
              v6 = this;
              if (this)
              {
LABEL_59:
                v22 = 0;
                v6[6] += 2;
                goto LABEL_60;
              }
            }
          }
        }
      }
    }
    if ((~*((unsigned __int16 *)v12 + 14) & 0x408) != 0
      || (this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 368))(v12), !(_DWORD)this))
    {
      v6 = (unsigned int *)*((_QWORD *)v12 + 4);
      if (!v6)
        goto LABEL_55;
      v21 = *((_WORD *)v6 + 14);
      if ((v21 & 0x80) == 0)
      {
        if ((v21 & 8) != 0)
          goto LABEL_59;
LABEL_54:
        v6 = 0;
        goto LABEL_55;
      }
      v20 = *((_QWORD *)v6 + 25);
      if (!v20)
        goto LABEL_54;
    }
    else
    {
      v20 = *((_QWORD *)v12 + 14);
      if (!v20)
        goto LABEL_54;
    }
    v6 = *(unsigned int **)(v20 + 8);
    if (v6)
      goto LABEL_59;
LABEL_55:
    v22 = 1;
LABEL_60:
    if (v12[6] == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      v12[6] -= 2;
    }
    if ((v22 & 1) != 0)
      goto LABEL_103;
  }
  v16 = v12[6];
  if (!v11)
    goto LABEL_41;
  v28 = v16 - 2;
  if (v28)
  {
    v12[6] = v28;
    goto LABEL_101;
  }
  v42 = *((_WORD *)v12 + 15);
  if ((v42 & 0x400) == 0)
  {
    this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    v28 = v12[6];
LABEL_101:
    v29 = v28 - 2;
    if (v29)
    {
      v12[6] = v29;
      goto LABEL_103;
    }
    v42 = *((_WORD *)v12 + 15);
  }
  if ((v42 & 0x400) == 0)
    this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
LABEL_103:
  v8 = (uint64_t)v11;
  if (!v10 || (v8 = (uint64_t)v11, v10 == (unsigned int *)v11))
  {
LABEL_117:
    if (v11)
      goto LABEL_118;
    goto LABEL_120;
  }
  v8 = (uint64_t)v10;
  if (!v11)
    goto LABEL_121;
  v30 = (uint64_t *)*((_QWORD *)v4 + 390);
  if (v30)
  {
    v31 = 0;
    while (1)
    {
      v32 = v31 ? (uint64_t **)(v31 + 1) : (uint64_t **)(v4 + 782);
      v31 = *v32;
      v8 = *v31;
      if ((unsigned int *)*v31 == v10 || v8 == (_QWORD)v11)
        goto LABEL_117;
      if (v31 == v30)
      {
        v8 = 0;
        goto LABEL_117;
      }
    }
  }
  v8 = 0;
LABEL_118:
  if (*((_DWORD *)v11 + 6) == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(v11, a2);
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
LABEL_120:
  if (v10)
  {
LABEL_121:
    if (v10[6] == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      v10[6] -= 2;
    }
  }
  if (v8)
  {
    v9 = 0;
    *(_DWORD *)(v8 + 24) += 2;
    goto LABEL_125;
  }
LABEL_8:
  v9 = 1;
LABEL_125:
  v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
  {
    this = (unsigned int *)WebCore::threadGlobalDataSlow((WebCore *)this);
    v35 = (uint64_t)this;
  }
  v36 = *(_QWORD *)(v35 + 40);
  if (!v36)
  {
    this = (unsigned int *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
    v36 = *(_QWORD *)(v35 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v36 + 1488))
  {
    v37 = *((_QWORD *)v4 + 392);
    if (v37)
      v38 = *(_QWORD *)(v37 + 8);
    else
      v38 = 0;
    if (v38 == v8)
    {
      this = (unsigned int *)WebCore::Document::hideAllPopoversUntil((WTF::StringImpl *)v4, (WTF::StringImpl *)v8, 0, 1);
      v37 = *((_QWORD *)v4 + 392);
    }
    *((_QWORD *)v4 + 392) = 0;
    if (v37)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v37);
        v40 = --v39 == 0;
      }
      while (__stlxr(v39, (unsigned int *)v37));
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  if ((v9 & 1) != 0)
  {
    this = 0;
  }
  else
  {
    this = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (this)
    {
      do
        v45 = __ldaxr(this);
      while (__stlxr(v45 + 1, this));
    }
  }
  v37 = *((_QWORD *)v4 + 392);
  *((_QWORD *)v4 + 392) = this;
  if (!v37)
    goto LABEL_143;
  do
  {
    v41 = __ldaxr((unsigned int *)v37);
    v40 = --v41 == 0;
  }
  while (__stlxr(v41, (unsigned int *)v37));
LABEL_142:
  if (v40)
  {
    atomic_store(1u, (unsigned int *)v37);
    v43 = *(unsigned int *)(v37 + 28);
    if ((_DWORD)v43)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v37 + 16), (WTF::StringImpl *)(*(_QWORD *)(v37 + 16) + 32 * v43));
    v44 = *(WTF **)(v37 + 16);
    if (v44)
    {
      *(_QWORD *)(v37 + 16) = 0;
      *(_DWORD *)(v37 + 24) = 0;
      WTF::fastFree(v44, a2);
    }
    this = (unsigned int *)WTF::fastFree((WTF *)v37, a2);
    if ((v9 & 1) == 0)
    {
LABEL_144:
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_143:
    if ((v9 & 1) == 0)
      goto LABEL_144;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::Document::didInsertAttachmentElement(WebCore::Document *this, WebCore::HTMLAttachmentElement *a2, const WTF::StringImpl *a3)
{
  WebCore::Document *v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  int i;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl **v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF *v28;
  WebCore::Document *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::Editor *v44;
  WTF::StringImpl *result;
  WebCore::Editor *v46;
  void *v47;
  WebCore::Editor *v48;
  uint64_t v49;
  void *v50;
  WebCore::Editor *v51;
  void *v52;
  WebCore::Editor *v53;
  uint64_t v54;
  void *v55;
  int v56;
  WebCore::Document *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;

  v4 = this;
  v5 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (!v5)
  {
    v12 = 0;
    v59 = 0;
    goto LABEL_20;
  }
  v6 = *v5;
  v60 = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
  v7 = v6 + 4;
  *v5 = v7;
  v59 = v5;
  if (!v5[1])
  {
    v12 = 0;
    goto LABEL_18;
  }
  v8 = *((_QWORD *)this + 343);
  if (!v8)
  {
    v12 = 0;
    v13 = (WTF::StringImpl *)v5;
    goto LABEL_24;
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = v5[4];
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v5);
  else
    v11 = v10 >> 8;
  for (i = 0; ; v11 = i + v15)
  {
    v15 = v11 & v9;
    this = *(WebCore::Document **)(v8 + 16 * (v11 & v9));
    if (this == (WebCore::Document *)-1)
      goto LABEL_13;
    if (!this)
      break;
    this = (WebCore::Document *)WTF::equal(this, (const WTF::StringImpl *)v5, a3);
    if ((this & 1) != 0)
    {
      v16 = 1;
      goto LABEL_17;
    }
LABEL_13:
    ++i;
  }
  v16 = 0;
  v12 = 0;
  v13 = (WTF::StringImpl *)v5;
  if (v5[1])
    goto LABEL_24;
LABEL_17:
  v7 = *v5;
  v12 = v16;
LABEL_18:
  *v5 = v7 + 2;
  v59 = v5;
  if (v7)
    *v5 = v7;
  else
    this = (WebCore::Document *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
LABEL_20:
  WTF::createVersion4UUIDStringWeak(this);
  v13 = v58;
  v60 = v58;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    else
      *v5 -= 2;
  }
  WebCore::HTMLAttachmentElement::setUniqueIdentifier((WTF **)a2, &v60, v18);
LABEL_24:
  v19 = (uint64_t *)((char *)v4 + 2744);
  v20 = *((_QWORD *)v4 + 343);
  if (v20
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v4 + 343, 8u), (v20 = *v19) != 0))
  {
    v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_DWORD *)v13 + 4);
  v57 = v4;
  v56 = v12;
  if (v22 < 0x100)
    v23 = WTF::StringImpl::hashSlowCase(v13);
  else
    v23 = v22 >> 8;
  v24 = 0;
  v25 = 1;
  while (2)
  {
    v26 = v23 & v21;
    v27 = (WTF::StringImpl **)(v20 + 16 * v26);
    v28 = *v27;
    if (*v27 == (WTF::StringImpl *)-1)
    {
      v24 = (WTF::StringImpl **)(v20 + 16 * v26);
      goto LABEL_36;
    }
    if (!v28)
    {
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v19 - 16);
        v27 = v24;
      }
      v29 = v57;
      if (v13)
        *(_DWORD *)v13 += 2;
      *v27 = v13;
      *((_DWORD *)a2 + 6) += 2;
      v30 = v27[1];
      v27[1] = a2;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, a2);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      v31 = *v19;
      if (*v19)
        v32 = *(_DWORD *)(v31 - 12) + 1;
      else
        v32 = 1;
      *(_DWORD *)(v31 - 12) = v32;
      v33 = *v19;
      if (*v19)
        v34 = *(_DWORD *)(v33 - 12);
      else
        v34 = 0;
      v35 = (*(_DWORD *)(v33 - 16) + v34);
      v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35)
          goto LABEL_58;
      }
      else
      {
        if (3 * v36 > 4 * v35)
          goto LABEL_58;
        if (!(_DWORD)v36)
        {
          v37 = 8;
          goto LABEL_57;
        }
      }
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_57:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v19, v37);
      goto LABEL_58;
    }
    if (!WTF::equal(v28, v13, a3))
    {
LABEL_36:
      v23 = v25 + v26;
      ++v25;
      continue;
    }
    break;
  }
  v38 = v20 + 16 * v26;
  *((_DWORD *)a2 + 6) += 2;
  v39 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v38 + 8) = a2;
  v29 = v57;
  if (v39)
  {
    if (*(_DWORD *)(v39 + 24) == 2)
    {
      if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v39, a2);
    }
    else
    {
      *(_DWORD *)(v39 + 24) -= 2;
    }
  }
LABEL_58:
  v40 = *((_QWORD *)v29 + 66);
  if (v40 && *(_QWORD *)(v40 + 8))
  {
    if (v56)
    {
      v41 = *((_QWORD *)v29 + 382);
      if (!v41)
      {
        v51 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v51, v29);
        v53 = (WebCore::Editor *)*((_QWORD *)v29 + 382);
        *((_QWORD *)v29 + 382) = v51;
        if (v53)
        {
          WebCore::Editor::~Editor(v53, v52);
          if (*(_DWORD *)v54)
          {
            *(_QWORD *)(v54 + 496) = 0;
            *(_OWORD *)(v54 + 464) = 0u;
            *(_OWORD *)(v54 + 480) = 0u;
            *(_OWORD *)(v54 + 432) = 0u;
            *(_OWORD *)(v54 + 448) = 0u;
            *(_OWORD *)(v54 + 400) = 0u;
            *(_OWORD *)(v54 + 416) = 0u;
            *(_OWORD *)(v54 + 368) = 0u;
            *(_OWORD *)(v54 + 384) = 0u;
            *(_OWORD *)(v54 + 336) = 0u;
            *(_OWORD *)(v54 + 352) = 0u;
            *(_OWORD *)(v54 + 304) = 0u;
            *(_OWORD *)(v54 + 320) = 0u;
            *(_OWORD *)(v54 + 272) = 0u;
            *(_OWORD *)(v54 + 288) = 0u;
            *(_OWORD *)(v54 + 240) = 0u;
            *(_OWORD *)(v54 + 256) = 0u;
            *(_OWORD *)(v54 + 208) = 0u;
            *(_OWORD *)(v54 + 224) = 0u;
            *(_OWORD *)(v54 + 176) = 0u;
            *(_OWORD *)(v54 + 192) = 0u;
            *(_OWORD *)(v54 + 144) = 0u;
            *(_OWORD *)(v54 + 160) = 0u;
            *(_OWORD *)(v54 + 112) = 0u;
            *(_OWORD *)(v54 + 128) = 0u;
            *(_OWORD *)(v54 + 80) = 0u;
            *(_OWORD *)(v54 + 96) = 0u;
            *(_OWORD *)(v54 + 48) = 0u;
            *(_OWORD *)(v54 + 64) = 0u;
            *(_OWORD *)(v54 + 16) = 0u;
            *(_OWORD *)(v54 + 32) = 0u;
            *(_OWORD *)v54 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v54, v55);
          }
        }
        v29 = v57;
        v41 = *((_QWORD *)v57 + 382);
      }
      v42 = *(_QWORD *)(v41 + 8);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
          (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v43 + 200))(v43, &v59, &v60);
      }
    }
    v44 = (WebCore::Editor *)*((_QWORD *)v29 + 382);
    if (!v44)
    {
      v46 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v46, v29);
      v48 = (WebCore::Editor *)*((_QWORD *)v29 + 382);
      *((_QWORD *)v29 + 382) = v46;
      if (v48)
      {
        WebCore::Editor::~Editor(v48, v47);
        if (*(_DWORD *)v49)
        {
          *(_QWORD *)(v49 + 496) = 0;
          *(_OWORD *)(v49 + 464) = 0u;
          *(_OWORD *)(v49 + 480) = 0u;
          *(_OWORD *)(v49 + 432) = 0u;
          *(_OWORD *)(v49 + 448) = 0u;
          *(_OWORD *)(v49 + 400) = 0u;
          *(_OWORD *)(v49 + 416) = 0u;
          *(_OWORD *)(v49 + 368) = 0u;
          *(_OWORD *)(v49 + 384) = 0u;
          *(_OWORD *)(v49 + 336) = 0u;
          *(_OWORD *)(v49 + 352) = 0u;
          *(_OWORD *)(v49 + 304) = 0u;
          *(_OWORD *)(v49 + 320) = 0u;
          *(_OWORD *)(v49 + 272) = 0u;
          *(_OWORD *)(v49 + 288) = 0u;
          *(_OWORD *)(v49 + 240) = 0u;
          *(_OWORD *)(v49 + 256) = 0u;
          *(_OWORD *)(v49 + 208) = 0u;
          *(_OWORD *)(v49 + 224) = 0u;
          *(_OWORD *)(v49 + 176) = 0u;
          *(_OWORD *)(v49 + 192) = 0u;
          *(_OWORD *)(v49 + 144) = 0u;
          *(_OWORD *)(v49 + 160) = 0u;
          *(_OWORD *)(v49 + 112) = 0u;
          *(_OWORD *)(v49 + 128) = 0u;
          *(_OWORD *)(v49 + 80) = 0u;
          *(_OWORD *)(v49 + 96) = 0u;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)v49 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v49, v50);
        }
        v29 = v57;
      }
      v44 = (WebCore::Editor *)*((_QWORD *)v29 + 382);
    }
    WebCore::Editor::didInsertAttachmentElement(v44, a2, a3);
    v5 = v59;
  }
  v59 = 0;
  if (v5)
  {
    if (*v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
    else
      *v5 -= 2;
  }
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Document::didRemoveAttachmentElement(uint64_t this, WebCore::HTMLAttachmentElement *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Editor *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::Editor *v25;
  void *v26;
  WebCore::Editor *v27;
  uint64_t v28;
  void *v29;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
  if (v3)
  {
    v5 = (uint64_t *)this;
    *(_DWORD *)v3 += 2;
    v6 = *(_QWORD *)(this + 2744);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 8);
      v8 = *((_DWORD *)v3 + 4);
      if (v8 < 0x100)
        v9 = WTF::StringImpl::hashSlowCase(v3);
      else
        v9 = v8 >> 8;
      v10 = 0;
      v11 = v5 + 343;
      while (1)
      {
        v12 = v9 & v7;
        this = *(_QWORD *)(v6 + 16 * v12);
        if (this != -1)
        {
          if (!this)
          {
            v13 = *v11;
            if (!*v11)
              goto LABEL_24;
            v14 = *(unsigned int *)(v13 - 4);
            v15 = v13 + 16 * v14;
            goto LABEL_43;
          }
          this = WTF::equal((WTF *)this, v3, a3);
          if ((this & 1) != 0)
            break;
        }
        v9 = ++v10 + v12;
      }
      v15 = v6 + 16 * v12;
      v13 = *v11;
      if (!*v11)
        goto LABEL_14;
      v14 = *(unsigned int *)(v13 - 4);
LABEL_43:
      v13 += 16 * v14;
      if (v13 == v15)
        goto LABEL_24;
LABEL_14:
      if (v13 != v15)
      {
        v16 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = -1;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        this = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
        ++*(_DWORD *)(*v11 - 16);
        v17 = *v11;
        if (*v11)
          v18 = *(_DWORD *)(v17 - 12) - 1;
        else
          v18 = -1;
        *(_DWORD *)(v17 - 12) = v18;
        v19 = *v11;
        if (*v11)
        {
          v22 = 6 * *(_DWORD *)(v19 - 12);
          v23 = *(_DWORD *)(v19 - 4);
          if (v22 < v23 && v23 >= 9)
            this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5 + 343, v23 >> 1);
        }
      }
    }
LABEL_24:
    v20 = v5[66];
    if (v20 && *(_QWORD *)(v20 + 8))
    {
      v21 = (WebCore::Editor *)v5[382];
      if (!v21)
      {
        v25 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v25, (WebCore::Document *)v5);
        v27 = (WebCore::Editor *)v5[382];
        v5[382] = (uint64_t)v25;
        if (v27)
        {
          WebCore::Editor::~Editor(v27, v26);
          if (*(_DWORD *)v28)
          {
            *(_QWORD *)(v28 + 496) = 0;
            *(_OWORD *)(v28 + 464) = 0u;
            *(_OWORD *)(v28 + 480) = 0u;
            *(_OWORD *)(v28 + 432) = 0u;
            *(_OWORD *)(v28 + 448) = 0u;
            *(_OWORD *)(v28 + 400) = 0u;
            *(_OWORD *)(v28 + 416) = 0u;
            *(_OWORD *)(v28 + 368) = 0u;
            *(_OWORD *)(v28 + 384) = 0u;
            *(_OWORD *)(v28 + 336) = 0u;
            *(_OWORD *)(v28 + 352) = 0u;
            *(_OWORD *)(v28 + 304) = 0u;
            *(_OWORD *)(v28 + 320) = 0u;
            *(_OWORD *)(v28 + 272) = 0u;
            *(_OWORD *)(v28 + 288) = 0u;
            *(_OWORD *)(v28 + 240) = 0u;
            *(_OWORD *)(v28 + 256) = 0u;
            *(_OWORD *)(v28 + 208) = 0u;
            *(_OWORD *)(v28 + 224) = 0u;
            *(_OWORD *)(v28 + 176) = 0u;
            *(_OWORD *)(v28 + 192) = 0u;
            *(_OWORD *)(v28 + 144) = 0u;
            *(_OWORD *)(v28 + 160) = 0u;
            *(_OWORD *)(v28 + 112) = 0u;
            *(_OWORD *)(v28 + 128) = 0u;
            *(_OWORD *)(v28 + 80) = 0u;
            *(_OWORD *)(v28 + 96) = 0u;
            *(_OWORD *)(v28 + 48) = 0u;
            *(_OWORD *)(v28 + 64) = 0u;
            *(_OWORD *)(v28 + 16) = 0u;
            *(_OWORD *)(v28 + 32) = 0u;
            *(_OWORD *)v28 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v28, v29);
          }
        }
        v21 = (WebCore::Editor *)v5[382];
      }
      this = (uint64_t)WebCore::Editor::didRemoveAttachmentElement(v21, a2, a3);
    }
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return this;
}

uint64_t WebCore::Document::attachmentForIdentifier@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(this + 2744);
  if (v5)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v9 = v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      this = *(_QWORD *)(v5 + 16 * v11);
      if (this != -1)
      {
        if (!this)
          goto LABEL_10;
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = *(_QWORD *)(v5 + 16 * v11 + 8);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
  }
  else
  {
LABEL_10:
    v12 = 0;
  }
  *a4 = v12;
  return this;
}

uint64_t WebCore::Document::didLogMessage(uint64_t a1, __int128 *a2, __int16 a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44[2];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  result = WTF::isMainThread((WTF *)a1);
  if ((result & 1) == 0)
  {
    v40 = *a2;
    v41 = a2[1];
    v42 = *((_QWORD *)a2 + 4);
    v17 = *a4;
    v19 = *((_DWORD *)a4 + 2);
    v18 = *((unsigned int *)a4 + 3);
    *a4 = 0;
    a4[1] = 0;
    if (!(_DWORD)v18)
    {
LABEL_26:
      v27 = WTF::fastMalloc((WTF *)0x50);
      *(_QWORD *)v27 = &off_1E33A3AC0;
      *(_QWORD *)(v27 + 8) = a1;
      *(_OWORD *)(v27 + 16) = v40;
      *(_OWORD *)(v27 + 32) = v41;
      *(_QWORD *)(v27 + 48) = v42;
      *(_BYTE *)(v27 + 56) = a3;
      *(_QWORD *)(v27 + 64) = v17;
      *(_DWORD *)(v27 + 72) = v19;
      *(_DWORD *)(v27 + 76) = v18;
      v28 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)v44 = *(_OWORD *)(a1 + 416);
      v45 = v28;
      v29 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v29 = &off_1E33A3A20;
      *(_OWORD *)(v29 + 16) = *(_OWORD *)v44;
      *(_OWORD *)(v29 + 32) = v45;
      *(_QWORD *)(v29 + 48) = v27;
      *(_BYTE *)(v29 + 56) = 0;
      v43 = v29;
      WTF::callOnMainThread();
      result = v43;
      if (v43)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      return result;
    }
    v20 = 16 * v18;
    v21 = (WTF::StringImpl **)(v17 + 8);
    while (1)
    {
      WTF::String::isolatedCopy();
      v23 = v44[0];
      v44[0] = 0;
      v24 = *v21;
      *v21 = v23;
      if (v24)
      {
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v22);
          v24 = v44[0];
          v44[0] = 0;
          if (!v24)
            goto LABEL_21;
          v25 = *(_DWORD *)v24 - 2;
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::destroy(v24, v26);
            goto LABEL_21;
          }
        }
        *(_DWORD *)v24 = v25;
      }
LABEL_21:
      v21 += 2;
      v20 -= 16;
      if (!v20)
        goto LABEL_26;
    }
  }
  v9 = *(_QWORD *)(a1 + 528);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(int **)(v11 + 8);
        if (v12)
        {
          v13 = (*v12)++;
          v14 = *((_QWORD *)a2 + 1);
          if (v14)
          {
            result = strlen((const char *)v14);
            if (result == 11)
            {
              if ((*(_BYTE *)v14 & 0xDF) == 0x4D
                && (*(_BYTE *)(v14 + 1) & 0xDF) == 0x45
                && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
                && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x49
                && (*(_BYTE *)(v14 + 4) & 0xDF) == 0x41
                && (*(_BYTE *)(v14 + 5) & 0xDF) == 0x53
                && (*(_BYTE *)(v14 + 6) & 0xDF) == 0x4F
                && (*(_BYTE *)(v14 + 7) & 0xDF) == 0x55
                && (*(_BYTE *)(v14 + 8) & 0xDF) == 0x52
                && (*(_BYTE *)(v14 + 9) & 0xDF) == 0x43
                && (*(_BYTE *)(v14 + 10) & 0xDF) == 0x45)
              {
                v16 = 11;
                goto LABEL_47;
              }
            }
            else if (result == 6)
            {
              if ((*(_BYTE *)v14 & 0xDF) == 0x57
                && (*(_BYTE *)(v14 + 1) & 0xDF) == 0x45
                && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x42
                && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x52
                && (*(_BYTE *)(v14 + 4) & 0xDF) == 0x54
                && (*(_BYTE *)(v14 + 5) & 0xDF) == 0x43)
              {
                v16 = 12;
                goto LABEL_47;
              }
            }
            else if (result == 5
                   && (*(_BYTE *)v14 & 0xDF) == 0x4D
                   && (*(_BYTE *)(v14 + 1) & 0xDF) == 0x45
                   && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
                   && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x49
                   && (*(_BYTE *)(v14 + 4) & 0xDF) == 0x41)
            {
              v16 = 10;
LABEL_47:
              v30 = WebCore::Document::eventLoop((WebCore::Document *)a1, v15);
              v31 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a1);
              v32 = v31;
              if (v31)
              {
                do
                  v33 = __ldaxr(v31);
                while (__stlxr(v33 + 1, v31));
              }
              v34 = a3 | (v16 << 8);
              v35 = *a4;
              v36 = a4[1];
              *a4 = 0;
              a4[1] = 0;
              v37 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v37 = off_1E33A3AE8;
              *(_QWORD *)(v37 + 8) = v32;
              *(_WORD *)(v37 + 16) = v34;
              *(_QWORD *)(v37 + 24) = v35;
              *(_QWORD *)(v37 + 32) = v36;
              v44[0] = (WTF::StringImpl *)v37;
              WebCore::EventLoopTaskGroup::queueTask(v30, 25, (uint64_t *)v44);
              result = (uint64_t)v44[0];
              v44[0] = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              v13 = *v12 - 1;
            }
          }
          if (v13)
          {
            *v12 = v13;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v12);
            return WTF::fastFree(v38, v39);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::~$_1(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(a1[2] + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = (WTF *)a1[2];
  if (v7)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v12)
      {
        v15 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v12));
        v8 = v15;
      }
      v13 = *(WTF **)(v8 + 16);
      if (v13)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v14 = v8;
        WTF::fastFree(v13, a2);
        v8 = v14;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::Document::didLogMessage(uint64_t a1, __int128 *a2, __int16 a3, uint64_t *a4)
{
  return WebCore::Document::didLogMessage(a1 - 544, a2, a3, a4);
}

_QWORD *`non-virtual thunk to'WebCore::Document::updateServiceWorkerClientData(WebCore::Document *this, WTF::StringImpl *a2)
{
  return WebCore::Document::updateServiceWorkerClientData((_QWORD *)this - 24, a2);
}

uint64_t WebCore::Document::navigateFromServiceWorker(WebCore::Document *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (*((_BYTE *)this + 467) || *((_BYTE *)this + 468))
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v8 = WebCore::Document::eventLoop(this, (WTF::StringImpl *)a2);
    v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    v10 = v9;
    if (v9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
    v12 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v12 += 2;
    v16 = *(_OWORD *)(a2 + 8);
    v17 = *(_OWORD *)(a2 + 24);
    v13 = *a3;
    *a3 = 0;
    v14 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v14 = &off_1E33A3B10;
    *(_QWORD *)(v14 + 8) = v10;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)(v14 + 16) = v12;
    *(_OWORD *)(v14 + 24) = v16;
    *(_OWORD *)(v14 + 40) = v17;
    *(_QWORD *)(v14 + 56) = v13;
    v18 = v14;
    WebCore::EventLoopTaskGroup::queueTask(v8, 0, &v18);
    result = v18;
    v18 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        return WTF::StringImpl::destroy(v12, v15);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Document::exposedComputedCSSPropertyIDs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  _BYTE v14[852];

  v1 = this;
  if (*(_BYTE *)(this + 2992))
    return v1 + 2984;
  v2 = *(_QWORD *)(this + 680);
  if (v2)
  {
    v3 = 0;
    v4 = v2 + 664;
    v5 = v14;
    do
    {
      v6 = (unsigned __int16)WebCore::computedPropertyIDs[v3];
      if (WebCore::computedPropertyIDs[v3])
      {
        if ((v6 - 304) > 0x1E || ((1 << (v6 - 48)) & 0x7C010001) == 0)
        {
          this = WebCore::isExposedNotInvalidAndNotInternal(v6, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
          if ((_DWORD)this)
          {
            *(_WORD *)v5 = v6;
            v5 += 2;
          }
        }
      }
      ++v3;
    }
    while (v3 != 426);
  }
  else
  {
    v5 = v14;
    do
    {
      v12 = *(unsigned __int16 *)((char *)WebCore::computedPropertyIDs + v2);
      if (*(__int16 *)((char *)WebCore::computedPropertyIDs + v2))
      {
        if ((v12 - 304) > 0x1E || ((1 << (v12 - 48)) & 0x7C010001) == 0)
        {
          *(_WORD *)v5 = v12;
          v5 += 2;
        }
      }
      v2 += 2;
    }
    while (v2 != 852);
  }
  if (v14 == v5)
  {
    v10 = 0;
LABEL_19:
    *(_QWORD *)(v1 + 2984) = v10;
    *(_BYTE *)(v1 + 2992) = 1;
    return v1 + 2984;
  }
  v8 = v5 - v14;
  if (!((unint64_t)(v5 - v14) >> 33))
  {
    v9 = v8 >> 1;
    v10 = (_DWORD *)WTF::fastMalloc((WTF *)((v8 & 0x1FFFFFFFELL) + 4));
    v11 = 0;
    *v10 = v9;
    do
    {
      *(_WORD *)((char *)v10 + v11 + 4) = *(_WORD *)&v14[v11];
      v11 += 2;
    }
    while (&v14[v11] != v5);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

BOOL WebCore::Document::hitTest(uint64_t a1, _BYTE *a2, WebCore::HitTestingTransformState *a3, uint64_t a4)
{
  uint64_t v5;
  WebCore::ScrollView *v9;
  const WebCore::IntPoint *v10;
  _BOOL8 v11;
  uint64_t *v12;
  int v14;
  const WebCore::IntPoint *v15;
  WebCore::Scrollbar *v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;

  *(_DWORD *)(a1 + 24) += 2;
  v5 = *(_QWORD *)(a1 + 1944);
  if (!v5)
  {
    v11 = 0;
    goto LABEL_12;
  }
  v9 = *(WebCore::ScrollView **)(v5 + 248);
  ++*((_DWORD *)v9 + 2);
  if ((a2[1] & 0x18) != 0)
    WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v9, 0);
  else
    WebCore::Document::updateLayout(a1, 0, 0);
  v11 = WebCore::RenderLayer::hitTest(*(_QWORD *)(*(_QWORD *)(a1 + 1944) + 144), a2, a3, a4);
  if (v11)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v12 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_8;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_32:
        *v18 = 1;
LABEL_8:
        if (!(*(unsigned int (**)(uint64_t *))(*v12 + 64))(v12))
          goto LABEL_26;
        goto LABEL_9;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v12 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      goto LABEL_8;
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_32;
  }
LABEL_9:
  if ((a2[1] & 4) == 0)
    goto LABEL_10;
  v14 = *(_DWORD *)a3 + 63;
  if (*(int *)a3 >= 0)
    v14 = *(_DWORD *)a3;
  v19 = (((int)(*(_DWORD *)a3 - (v14 & 0xFFFFFFC0) + 32) >> 6) + (v14 >> 6)) | ((unint64_t)(((int)(*((_DWORD *)a3 + 1) - (v14 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)a3 + 1) / 64) << 32);
  v20 = WebCore::ScrollView::contentsToWindow(v9, (const WebCore::IntPoint *)&v19, v10);
  v16 = WebCore::ScrollView::scrollbarAtPoint(v9, (const WebCore::IntPoint *)&v20, v15);
  if (!v16)
    goto LABEL_10;
  ++*((_DWORD *)v16 + 2);
  v19 = (unint64_t)v16;
  WebCore::HitTestResult::setScrollbar(a4, (uint64_t *)&v19);
  v17 = (_DWORD *)v19;
  v19 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
LABEL_26:
  v11 = 1;
LABEL_10:
  if (*((_DWORD *)v9 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 8))(v9);
  else
    --*((_DWORD *)v9 + 2);
LABEL_12:
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a1);
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
  return v11;
}

WTF *WebCore::Document::paintWorkletGlobalScopeForName(WebCore::Document *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *((_QWORD *)this + 376);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl **result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v18 = *a2;
    if (*a2)
      *(_DWORD *)v18 += 2;
    *v15 = v18;
    v19 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    result = (WTF::StringImpl **)v15[1];
    v15[1] = v19;
    if (result)
    {
      if (*((_DWORD *)result + 78) == 1)
        result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 5))(result);
      else
        --*((_DWORD *)result + 78);
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_28;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_34:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, v15);
        v15 = result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_36;
      }
LABEL_28:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_34;
    }
LABEL_36:
    v30 = v22 + 16 * v25;
    v29 = 1;
    goto LABEL_37;
  }
  result = (WTF::StringImpl **)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  v29 = 0;
  v30 = v27 + 16 * v28;
LABEL_37:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t WebCore::Document::domTimerHoldingTank(WebCore::Document *this)
{
  uint64_t v1;
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v1 = *((_QWORD *)this + 378);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    v4 = *(unsigned int **)(StatusReg + 736);
    if (!v4)
      v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    *(_QWORD *)(v1 + 56) = v4;
    *(_QWORD *)(v1 + 16) = off_1E31F7378;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E3403740;
    v6[1] = WebCore::DOMTimerHoldingTank::removeAll;
    v6[2] = 0;
    v6[3] = v1;
    *(_QWORD *)(v1 + 64) = v6;
    v7 = (_QWORD *)*((_QWORD *)this + 378);
    *((_QWORD *)this + 378) = v1;
    if (v7)
    {
      v7[2] = off_1E31F7378;
      v8 = v7[8];
      v7[8] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v7 + 2));
      v10 = *v7;
      if (*v7)
      {
        v12 = *(unsigned int *)(v10 - 4);
        if ((_DWORD)v12)
        {
          for (i = 0; i != v12; ++i)
          {
            v14 = *(unsigned int **)(v10 + 8 * i);
            if (v14 != (unsigned int *)-1)
            {
              *(_QWORD *)(v10 + 8 * i) = 0;
              if (v14)
              {
                do
                {
                  v15 = __ldaxr(v14);
                  v16 = v15 - 1;
                }
                while (__stlxr(v16, v14));
                if (!v16)
                {
                  atomic_store(1u, v14);
                  v17 = v12;
                  WTF::fastFree((WTF *)v14, v9);
                  v12 = v17;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v10 - 16), v9);
      }
      WTF::fastFree((WTF *)v7, v9);
      return *((_QWORD *)this + 378);
    }
  }
  return v1;
}

uint64_t WebCore::Document::isRunningUserScripts(WebCore::Document *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  while (1)
  {
    v1 = (unsigned __int8 *)this;
    if (!*((_BYTE *)this + 3362) && !*((_BYTE *)this + 3405))
      break;
    v7 = *((_QWORD *)this + 66);
    if (!v7)
      return v1[3432];
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return v1[3432];
    v9 = *(_QWORD *)(v8 + 120);
    if (!v9)
      return v1[3432];
    for (i = *(_QWORD *)(v9 + 8); i; i = *(_QWORD *)(v13 + 8))
    {
      this = *(WebCore::Document **)(*(_QWORD *)(i + 40) + 8);
      v11 = *((_QWORD *)this + 66);
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 8);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 120);
      if (!v13)
        break;
    }
LABEL_20:
    if (this == (WebCore::Document *)v1)
      return v1[3432];
  }
  v2 = *((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
      if (v4 && *(_BYTE *)(v4 + 144) == 0)
      {
        this = *(WebCore::Document **)(v4 + 296);
        if (this)
          goto LABEL_20;
      }
    }
  }
  return v1[3432];
}

uint64_t WebCore::Document::didRejectSyncXHRDuringPageDismissal(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_DWORD *)(this + 3276) + 1;
  *(_DWORD *)(this + 3276) = v1;
  if (v1 <= 1)
  {
    v2 = this;
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(this);
    v4 = v3;
    if (v3)
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
    }
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E33A3B60;
    v6[1] = v2;
    v6[2] = v4;
    v9 = *(_OWORD *)(v2 + 416);
    v10 = *(_OWORD *)(v2 + 432);
    v7 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v7 = &off_1E33A3A20;
    *(_OWORD *)(v7 + 16) = v9;
    *(_OWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 48) = v6;
    *(_BYTE *)(v7 + 56) = 0;
    v8 = v7;
    WTF::callOnMainThread();
    this = v8;
    if (v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return this;
}

void WebCore::Document::dispatchSystemPreviewActionEvent(uint64_t a1, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  _WORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SecurityOriginData *v14;
  _QWORD *v15;
  WebCore *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  void *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  WebCore::Document *v28;
  WTF *v29;
  uint64_t v30;
  WTF **v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  int v37;
  __int128 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  {
    WebCore::elementIdentifiersMap(void)::map = 0;
    return;
  }
  if (WebCore::elementIdentifiersMap(void)::map && *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12))
  {
    v4 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = (_QWORD *)WebCore::elementIdentifiersMap(void)::map; (unint64_t)(*i + 1) <= 1; i += 2)
      {
        v5 -= 16;
        if (!v5)
          return;
      }
    }
    else
    {
      i = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
    }
    v7 = WebCore::elementIdentifiersMap(void)::map + 16 * v4;
LABEL_11:
    if (i != (_QWORD *)v7)
    {
      if (i[1] == *((_QWORD *)a2 + 8))
      {
        v8 = *(_WORD **)(*i + 8);
        if (v8)
        {
          v9 = *((_DWORD *)v8 + 6);
          *((_DWORD *)v8 + 6) = v9 + 2;
          if ((v8[14] & 0x10) != 0
            && *(_QWORD *)(*((_QWORD *)v8 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24)
            && *(_QWORD *)(*((_QWORD *)v8 + 5) + 8) == a1)
          {
            v10 = *a3;
            if (*a3)
              *v10 += 2;
            v36 = v10;
            v37 = 2;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a1 + 192), a2);
            v12 = *(unsigned int *)(v11 + 32);
            if ((_DWORD)v12 == 1)
              goto LABEL_58;
            if ((_DWORD)v12 == -1)
            {
              v28 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
              WebCore::Document::pictureInPictureElement(v28);
              return;
            }
            v13 = v11;
            v14 = (WebCore::SecurityOriginData *)(v11 + 8);
            v31 = &v29;
            v15 = (_QWORD *)((uint64_t (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(&v31, v11 + 8);
            if (MEMORY[0x19AEA53F4](*v15, "file", 4) && *(_BYTE *)(v13 + 59))
LABEL_58:
              v16 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            else
              v16 = (WebCore *)WebCore::SecurityOriginData::toString(v14, &v35);
            v34 = 0;
            LOBYTE(v31) = 0;
            v33 = 0;
            v29 = 0;
            v30 = 0;
            v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v17 || (v18 = *(_QWORD *)(v17 + 96)) == 0)
              v18 = WebCore::threadGlobalDataSlow(v16);
            v19 = *(_QWORD *)(v18 + 40);
            if (!v19)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v18);
              v19 = *(_QWORD *)(v18 + 40);
            }
            v20 = (_QWORD *)(v19 + 1192);
            v21 = (_DWORD *)bmalloc::api::isoAllocate();
            WebCore::MessageEvent::MessageEvent((uint64_t)v21, v20, (uint64_t)&v36, (_DWORD **)&v35, (_DWORD **)&v34, (uint64_t)&v31, (uint64_t *)&v29);
            if (HIDWORD(v30))
            {
              v26 = (uint64_t *)v29;
              v27 = 8 * HIDWORD(v30);
              do
              {
                v26 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v26, v22)+ 1;
                v27 -= 8;
              }
              while (v27);
            }
            v23 = v29;
            if (v29)
            {
              v29 = 0;
              LODWORD(v30) = 0;
              WTF::fastFree(v23, v22);
            }
            if (v33 && v32 != -1)
              ((void (*)(WTF **, WTF ***))off_1E33A3480[v32])(&v29, &v31);
            v24 = v34;
            v34 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = v35;
            v35 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v22);
              else
                *(_DWORD *)v25 -= 2;
            }
            if (v37 != -1)
              ((void (*)(WTF ***, _DWORD **))off_1E33A3498[v37])(&v31, &v36);
            LOBYTE(v38) = 0;
            v39 = 0;
            WebCore::UserGestureIndicator::UserGestureIndicator((uint64_t *)&v31, 257, a1, 1, 0, &v38, 1);
            (*(void (**)(_WORD *, _DWORD *))(*(_QWORD *)v8 + 48))(v8, v21);
            WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v31);
            if (v21)
            {
              if (v21[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
              else
                --v21[4];
            }
            v9 = *((_DWORD *)v8 + 6) - 2;
          }
          if (v9)
          {
            *((_DWORD *)v8 + 6) = v9;
          }
          else if ((v8[15] & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          }
        }
      }
      else
      {
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v7)
            break;
          if ((unint64_t)(*i + 1) > 1)
            goto LABEL_11;
        }
      }
    }
  }
}

uint64_t WebCore::Document::pictureInPictureElement(WebCore::Document *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 379);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

unsigned int *WebCore::Document::setPictureInPictureElement(unsigned int *this, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t v4;
  WebCore::HTMLVideoElement *v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned __int8 *v18;
  char v19;
  _BYTE v20[8];
  uint64_t v21;
  unsigned int *v22;
  unsigned __int8 *v23;
  char v24;
  unsigned __int8 *v25[2];

  v3 = this;
  v4 = *((_QWORD *)this + 379);
  if (!v4 || (v5 = *(WebCore::HTMLVideoElement **)(v4 + 8)) == 0)
  {
    if (!a2)
      return this;
    v20[0] = 0;
    v24 = 0;
    v5 = 0;
    LOBYTE(v15) = 0;
    v19 = 0;
    v6 = 1;
    goto LABEL_8;
  }
  *((_DWORD *)v5 + 6) += 2;
  if (v5 != (WebCore::HTMLVideoElement *)a2)
  {
    v20[0] = 0;
    v24 = 0;
    LOWORD(v25[0]) = 61;
    v15 = v25;
    v16 = 1;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v20, v5, (unsigned __int8 **)&v15);
    v6 = 0;
    LOBYTE(v15) = 0;
    v19 = 0;
    if (!a2)
    {
      this = 0;
      goto LABEL_15;
    }
LABEL_8:
    v14 = 317;
    v25[0] = (unsigned __int8 *)&v14;
    v25[1] = (unsigned __int8 *)1;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)&v15, a2, v25);
    this = a2[37];
    if (this)
      goto LABEL_43;
    this = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *this = 1;
    *((_QWORD *)this + 1) = a2;
    v7 = a2[37];
    a2[37] = this;
    if (!v7)
      goto LABEL_43;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    this = a2[37];
    if (this)
    {
LABEL_43:
      do
        v10 = __ldaxr(this);
      while (__stlxr(v10 + 1, this));
    }
LABEL_15:
    v11 = (unsigned int *)*((_QWORD *)v3 + 379);
    *((_QWORD *)v3 + 379) = this;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        this = (unsigned int *)WTF::fastFree((WTF *)v11, a2);
      }
    }
    if (v19)
    {
      if ((_BYTE)v15)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v16, &v18);
      if (v18)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, a2);
      this = v17;
      if (v17)
        this = (unsigned int *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v17, a2);
    }
    if (!v24)
      goto LABEL_32;
    if (v20[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v21, &v23);
    if (v23)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, a2);
    this = v22;
    if (v22)
    {
      this = (unsigned int *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, a2);
      if ((v6 & 1) != 0)
        return this;
    }
    else
    {
LABEL_32:
      if ((v6 & 1) != 0)
        return this;
    }
    goto LABEL_35;
  }
  v5 = (WebCore::HTMLVideoElement *)a2;
LABEL_35:
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5, a2);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return this;
}

uint64_t WebCore::Document::textManipulationController(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  void *v4;
  unsigned int v5;
  WebCore::TextManipulationController *v6;
  uint64_t v7;
  void *v8;

  if (!*((_QWORD *)this + 380))
  {
    v2 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v3)
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
    }
    *(_QWORD *)(v2 + 16) = v3;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 65) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    v6 = (WebCore::TextManipulationController *)*((_QWORD *)this + 380);
    *((_QWORD *)this + 380) = v2;
    if (v6)
    {
      WebCore::TextManipulationController::~TextManipulationController(v6, v4);
      if (*(_DWORD *)(v7 + 8))
      {
        *(_QWORD *)(v7 + 144) = 0;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
  }
  return *((_QWORD *)this + 380);
}

WTF **std::unique_ptr<WebCore::LazyLoadImageObserver>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  WebCore::IntersectionObserver *v5;
  bmalloc::api *v7;
  void *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(WebCore::IntersectionObserver **)v4;
    *(_QWORD *)v4 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::IntersectionObserver::~IntersectionObserver(v5);
        bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::Document::crossOriginOpenerPolicy(WebCore::Document *this)
{
  return WebCore::Document::crossOriginOpenerPolicy((WebCore::Document *)((char *)this - 192));
}

uint64_t WebCore::Document::addCanvasNeedingPreparationForDisplayOrFlush(WebCore::Document *this, WebCore::CanvasRenderingContext *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE v19[24];

  if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 152))(a2) & 1) != 0
    || (result = (*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 176))(a2),
        (_DWORD)result))
  {
    v4 = (char *)this + 1816;
    v5 = *((_QWORD *)this + 227);
    if (v5 && *(_DWORD *)(v5 - 12))
    {
      v12 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v12)
      {
        v13 = 8 * v12;
        v14 = (uint64_t *)*((_QWORD *)this + 227);
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          ++v14;
          v13 -= 8;
          if (!v13)
            goto LABEL_3;
        }
      }
      else
      {
        v14 = (uint64_t *)*((_QWORD *)this + 227);
      }
      v17 = (uint64_t *)(v5 + 8 * v12);
      if (v14 != v17)
      {
        v18 = *v14;
LABEL_22:
        if (*(_QWORD *)(v18 + 8))
        {
          result = (uint64_t)WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CanvasRenderingContext>((uint64_t)v4, a2, (uint64_t)v19);
          *((_BYTE *)a2 + 24) = 1;
          return result;
        }
        while (++v14 != v17)
        {
          v18 = *v14;
          if ((unint64_t)(*v14 + 1) > 1)
          {
            if (v14 != v17)
              goto LABEL_22;
            break;
          }
        }
      }
    }
LABEL_3:
    result = (uint64_t)WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CanvasRenderingContext>((uint64_t)v4, a2, (uint64_t)v19);
    *((_BYTE *)a2 + 24) = 1;
    if ((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 258) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v7 = 0x40000;
    }
    else
    {
      result = WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2032));
      v7 = 262400;
    }
    v8 = *((_QWORD *)this + 66);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 24);
        if (v10)
        {
          v11 = *(_DWORD **)(v10 + 8);
          if (v11)
          {
            ++*v11;
            result = WebCore::Page::scheduleRenderingUpdate((uint64_t)v11, v7);
            if (*v11 == 1)
            {
              WebCore::Page::~Page((uint64_t)v11);
              return WTF::fastFree(v15, v16);
            }
            else
            {
              --*v11;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CanvasRenderingContext>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int v25;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  WTF *v36;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v17 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_15:
      v18 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_16:
      v19 = v18;
LABEL_17:
      *(_DWORD *)(a1 + 12) = 2 * v19;
      goto LABEL_2;
    }
    v20 = *(unsigned int *)(v17 - 4);
    if (!(_DWORD)v20)
      goto LABEL_31;
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = (unsigned int **)(v17 + 8 * v22);
      if ((unint64_t)*v23 + 1 >= 2 && !*((_QWORD *)*v23 + 1))
      {
        v35 = v21;
        v34 = v22;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v23, a2);
        v22 = v34;
        v21 = v35 + 1;
      }
    }
    while ((unint64_t)v22--);
    v17 = *(_QWORD *)a1;
    if (v21)
    {
      v31 = v21;
      *(_DWORD *)(v17 - 16) += v21;
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      *(_DWORD *)(v32 - 12) = v33 - v31;
      v17 = *(_QWORD *)a1;
    }
    if (!v17)
      goto LABEL_15;
    v25 = *(_DWORD *)(v17 - 4);
    if (v25 < 9 || 6 * *(_DWORD *)(v17 - 12) >= v25)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v17 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v17)
      {
        v18 = 0;
        goto LABEL_16;
      }
    }
    v18 = *(_DWORD *)(v17 - 12);
    v19 = 0x7FFFFFFF;
    if (v18 >= 0x7FFFFFFF)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_2:
  v8 = a2[2];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v28 = (unsigned int *)a2[2];
    a2[2] = v8;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
      v8 = a2[2];
    }
  }
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v36 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v36, a3);
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if (v8)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v11);
    }
  }
  return result;
}

uint64_t WebCore::Document::removeCanvasNeedingPreparationForDisplayOrFlush(WebCore::Document *this, WebCore::CanvasRenderingContext *a2)
{
  uint64_t result;

  result = WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CanvasRenderingContext>((uint64_t)this + 1816, a2);
  *((_BYTE *)a2 + 24) = 0;
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::CanvasRenderingContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CanvasRenderingContext>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_7:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_8:
      v8 = v7;
LABEL_9:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_28;
    v10 = 0;
    do
    {
      while (1)
      {
        v11 = *(_QWORD *)(v6 + 8 * --v9);
        if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
          break;
        if (!(_DWORD)v9)
          goto LABEL_21;
      }
      v22 = v9;
      v21 = v10;
      v23 = a2;
      v25 = a1;
      v19 = v9;
      v20 = v6;
      *(_QWORD *)(v6 + 8 * v9) = 0;
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree((WTF *)v11, a2);
      }
      v6 = v20;
      *(_QWORD *)(v20 + 8 * v19) = -1;
      v10 = v21 + 1;
      a2 = v23;
      a1 = v25;
      v9 = v22;
    }
    while (v19);
LABEL_21:
    v6 = *(_QWORD *)a1;
    if (v10)
    {
      v16 = v10;
      *(_DWORD *)(v6 - 16) += v10;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v16;
      v6 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_7;
    }
    else if (!v6)
    {
      goto LABEL_7;
    }
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v14)
    {
LABEL_28:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v24 = a2;
      v26 = a1;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v24;
      a1 = v26;
      v6 = *(_QWORD *)v26;
      *(_DWORD *)(v26 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_8;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_2:
  v4 = (WTF *)a2[2];
  if (v4 && *((_QWORD *)v4 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v4);
  else
    return 0;
}

uint64_t WebCore::Document::vm(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return v1;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = v4;
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v4 + 1096)))
  {
    goto LABEL_6;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return v1;
}

uint64_t `non-virtual thunk to'WebCore::Document::vm(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return v1;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = v4;
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v4 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return v1;
}

WTF::StringImpl *WebCore::Document::debugDescription@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20[2];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  WTF::Internal::appendHex();
  v21 = v4;
  v17 = v20;
  v18 = (WTF::StringImpl *)"Document 0x";
  v19 = 11;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v13, (int8x16_t **)&v18, (uint64_t *)&v17);
  v5 = *((_QWORD *)this + 66);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6)
        WTF::StringBuilder::append();
    }
  }
  v7 = *((unsigned int *)this + 292);
  if ((_DWORD)v7 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v20[0] = (uint64_t)&v17;
  ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Document11documentURIEvE3__0JZNKS9_11documentURIEvE3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_3URLEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v18, v20, (char *)this + 1128);
  LOBYTE(v17) = 32;
  v20[0] = (uint64_t)v18;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v13, (char *)&v17, v20);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v13;
  if (v13
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
        (v10 = v13) != 0))
  {
    *(_DWORD *)v10 += 2;
  }
  *a2 = v10;
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Document::notificationClient(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v7;
  void *v8;
  const char *v9[2];

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v9[0] = "NotificationController";
  v9[1] = (const char *)23;
  v5 = *((_QWORD *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v4 + 8), v9)[2]+ 1);
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v5;
}

uint64_t `non-virtual thunk to'WebCore::Document::notificationClient(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v7;
  void *v8;
  const char *v9[2];

  v1 = *((_QWORD *)this + 42);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v9[0] = "NotificationController";
  v9[1] = (const char *)23;
  v5 = *((_QWORD *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v4 + 8), v9)[2]+ 1);
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v5;
}

uint64_t WebCore::Document::graphicsClient(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 66);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_QWORD *)(v4 + 48);
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

uint64_t `non-virtual thunk to'WebCore::Document::graphicsClient(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 42);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = *(_QWORD *)(v4 + 48);
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

unint64_t WebCore::Document::sessionID(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v9;
  void *v10;

  v1 = *((_QWORD *)this + 66);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = (*(_DWORD *)v4)++;
    v6 = *(_QWORD *)(v4 + 1008);
    v7 = v6 >> 8;
    if (v5)
    {
      *(_DWORD *)v4 = v5;
    }
    else
    {
      WebCore::Page::~Page(v4);
      WTF::fastFree(v9, v10);
    }
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
  }
  return v6 | (v7 << 8);
}

unint64_t `non-virtual thunk to'WebCore::Document::sessionID(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v9;
  void *v10;

  v1 = *((_QWORD *)this + 42);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = (*(_DWORD *)v4)++;
    v6 = *(_QWORD *)(v4 + 1008);
    v7 = v6 >> 8;
    if (v5)
    {
      *(_DWORD *)v4 = v5;
    }
    else
    {
      WebCore::Page::~Page(v4);
      WTF::fastFree(v9, v10);
    }
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
  }
  return v6 | (v7 << 8);
}

unsigned int *WebCore::Document::addElementWithPendingUserAgentShadowTreeUpdate(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  unsigned int *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v3 = (uint64_t *)((char *)this + 3168);
  v4 = *((_DWORD *)this + 794) + 1;
  *((_DWORD *)this + 794) = v4;
  if (v4 > *((_DWORD *)this + 795))
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 396, &v47);
    v41 = 0;
    *((_DWORD *)this + 794) = 0;
    v42 = *((_QWORD *)this + 396);
    if (v42)
    {
      v41 = *(_DWORD *)(v42 - 12);
      if (v41 > 0x7FFFFFFE)
        v41 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 795) = 2 * v41;
  }
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 8) = a2;
    *(_BYTE *)(v29 + 32) = 0;
    v30 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v30 & 0xFFFF000000000000 | v29;
    v31 = v30 & 0xFFFFFFFFFFFFLL;
    if ((v30 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v32 = __ldaxr((unsigned int *)v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        atomic_store(1u, (unsigned int *)v31);
        v34 = *(unsigned int *)(v31 + 28);
        if ((_DWORD)v34)
        {
          v46 = v31;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v34));
          v31 = v46;
        }
        v35 = *(WTF **)(v31 + 16);
        if (v35)
        {
          *(_QWORD *)(v31 + 16) = 0;
          *(_DWORD *)(v31 + 24) = 0;
          v45 = v31;
          WTF::fastFree(v35, a2);
          v31 = v45;
        }
        WTF::fastFree((WTF *)v31, a2);
      }
    }
  }
  v5 = *((_QWORD *)a2 + 2);
  v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  v9 = *v3;
  if (*v3
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v3, 8u, 0), (v9 = *v3) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = ((unint64_t)v6 + ~(v5 << 32)) ^ (((unint64_t)v6 + ~(v5 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (uint64_t *)(v9 + 8 * v17);
    result = (unsigned int *)*v18;
    if (!*v18)
      break;
    if (result != (unsigned int *)-1)
    {
      v18 = v11;
      if (result == v6)
      {
        if (!v6)
          goto LABEL_57;
        do
          v37 = __ldaxr(v6);
        while (__stlxr(v37 - 1, v6));
        v26 = 1;
        if (v37 == 1)
        {
          atomic_store(1u, v6);
          v38 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C);
          if ((_DWORD)v38)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v5 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v38));
          v39 = *(WTF **)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (v39)
          {
            *(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
            *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
            WTF::fastFree(v39, a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)(v5 & 0xFFFFFFFFFFFFLL), a2);
        }
        do
        {
LABEL_23:
          v27 = __ldaxr(v6);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v6));
        if (!v28)
        {
          atomic_store(1u, v6);
          v43 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C);
          if ((_DWORD)v43)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v5 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v43));
          v44 = *(WTF **)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (v44)
          {
            *(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
            *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
            WTF::fastFree(v44, a2);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v6, a2);
        }
        if (v26)
        {
LABEL_57:
          __break(0xC471u);
          JUMPOUT(0x1959A35A0);
        }
        return result;
      }
    }
    v15 = i + v17;
    v11 = v18;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*v3 - 16);
    *v11 = (uint64_t)v6;
    v18 = v11;
  }
  else
  {
    *v18 = (uint64_t)v6;
  }
  v20 = *v3;
  if (*v3)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v3;
  if (*v3)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_21;
  }
  else
  {
    if (3 * v25 > 4 * v24)
      goto LABEL_21;
    if (!(_DWORD)v25)
    {
      v36 = 8;
      goto LABEL_43;
    }
  }
  v36 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_43:
  result = (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v3, v36, v18);
LABEL_21:
  if (v6)
  {
    v26 = 0;
    goto LABEL_23;
  }
  return result;
}

unsigned int *WebCore::Document::removeElementWithPendingUserAgentShadowTreeUpdate(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unsigned int *v30;
  unsigned int *v31;
  char v32;

  v3 = (uint64_t *)((char *)this + 3168);
  v4 = *((_DWORD *)this + 794) + 1;
  *((_DWORD *)this + 794) = v4;
  if (v4 > *((_DWORD *)this + 795))
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 396, &v32);
    v26 = 0;
    *((_DWORD *)this + 794) = 0;
    v27 = *((_QWORD *)this + 396);
    if (v27)
    {
      v26 = *(_DWORD *)(v27 - 12);
      if (v26 > 0x7FFFFFFE)
        v26 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 795) = 2 * v26;
  }
  v5 = *((_QWORD *)a2 + 2);
  result = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v7 = *v3;
      if (*v3)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = ((unint64_t)result + ~(v5 << 32)) ^ (((unint64_t)result + ~(v5 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(unsigned int **)(v7 + 8 * v12);
          if (!v14)
            break;
          v15 = v12;
          if (v14 != (unsigned int *)-1 && v14 == result)
          {
            if (v12 != *(_DWORD *)(v7 - 4))
            {
              *(_QWORD *)(v7 + 8 * v12) = 0;
              do
              {
                v17 = __ldaxr(result);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, result));
              if (!v18)
              {
                atomic_store(1u, result);
                v28 = result[7];
                if ((_DWORD)v28)
                {
                  v31 = result;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v28));
                  result = v31;
                }
                v29 = (WTF *)*((_QWORD *)result + 2);
                if (v29)
                {
                  *((_QWORD *)result + 2) = 0;
                  result[6] = 0;
                  v30 = result;
                  WTF::fastFree(v29, a2);
                  result = v30;
                }
                result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
              }
              *(_QWORD *)(v7 + 8 * v15) = -1;
              ++*(_DWORD *)(*v3 - 16);
              v19 = *v3;
              if (*v3)
                v20 = *(_DWORD *)(v19 - 12) - 1;
              else
                v20 = -1;
              *(_DWORD *)(v19 - 12) = v20;
              v21 = *v3;
              if (*v3)
              {
                v22 = 6 * *(_DWORD *)(v21 - 12);
                v23 = *(_DWORD *)(v21 - 4);
                if (v22 < v23 && v23 >= 9)
                  return (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v3, v23 >> 1, 0);
              }
            }
            return result;
          }
          v12 = (v12 + i) & v8;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Document::hasElementWithPendingUserAgentShadowTreeUpdate(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;

  ++*((_DWORD *)this + 794);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v4 = *((_QWORD *)this + 396);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
        v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        v9 = v5 & ((v8 >> 31) ^ v8);
        for (i = 1; ; ++i)
        {
          v11 = *(_QWORD *)(v4 + 8 * v9);
          if (!v11)
            break;
          if (v11 != -1 && v11 == v3)
            return 1;
          v9 = (v9 + i) & v5;
        }
      }
    }
  }
  return 0;
}

WebCore::ReportingObserver *WebCore::Document::notifyReportObservers(WebCore::Document *this, char **a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 398);
  if (!v4)
    v4 = WebCore::Document::ensureReportingScope(this);
  return WebCore::ReportingScope::notifyReportObservers(v4, a2);
}

WebCore::ReportingObserver *`non-virtual thunk to'WebCore::Document::notifyReportObservers(uint64_t a1, char **a2)
{
  uint64_t v3;
  WebCore::ScriptExecutionContext *v5;
  WTF::StringImpl *v6;
  WebCore::ReportingScope *v7;
  bmalloc::api *v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 2632);
  if (!v3)
  {
    v5 = (WebCore::ScriptExecutionContext *)(a1 - 360);
    v3 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v3 + 16) = 1;
    *(_QWORD *)v3 = &off_1E33A18C0;
    *(_QWORD *)(v3 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v3, v5);
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)v3 = &off_1E33662E0;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 93) = 0u;
    v7 = *(WebCore::ReportingScope **)(a1 + 2632);
    *(_QWORD *)(a1 + 2632) = v3;
    if (v7)
    {
      if (*((_DWORD *)v7 + 4) == 1)
      {
        WebCore::ReportingScope::~ReportingScope(v7, v6);
        bmalloc::api::isoDeallocate(v9, v10);
        v3 = *(_QWORD *)(a1 + 2632);
      }
      else
      {
        --*((_DWORD *)v7 + 4);
      }
    }
  }
  return WebCore::ReportingScope::notifyReportObservers(v3, a2);
}

WTF *WebCore::Document::endpointURIForToken@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;

  v7 = *((_QWORD *)this + 398);
  if (!v7)
    v7 = WebCore::Document::ensureReportingScope(this);
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(v7 + 88), a2, a3, a4);
}

WTF *`non-virtual thunk to'WebCore::Document::endpointURIForToken@<X0>(WebCore::Document *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  WebCore::ScriptExecutionContext *v8;
  WTF::StringImpl *v9;
  WebCore::ReportingScope *v10;
  bmalloc::api *v12;
  void *v13;

  v6 = *((_QWORD *)this + 329);
  if (!v6)
  {
    v8 = (WebCore::Document *)((char *)this - 360);
    v6 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v6 + 16) = 1;
    *(_QWORD *)v6 = &off_1E33A18C0;
    *(_QWORD *)(v6 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, v8);
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = &off_1E33662E0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 93) = 0u;
    v10 = (WebCore::ReportingScope *)*((_QWORD *)this + 329);
    *((_QWORD *)this + 329) = v6;
    if (v10)
    {
      if (*((_DWORD *)v10 + 4) == 1)
      {
        WebCore::ReportingScope::~ReportingScope(v10, v9);
        bmalloc::api::isoDeallocate(v12, v13);
        v6 = *((_QWORD *)this + 329);
      }
      else
      {
        --*((_DWORD *)v10 + 4);
      }
    }
  }
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(v6 + 88), a2, a3, a4);
}

void WebCore::Document::httpUserAgent(WebCore::Document *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::Document::userAgent(this, (WebCore::Document *)((char *)this + 736), a2);
}

void `non-virtual thunk to'WebCore::Document::httpUserAgent(WebCore::Document *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::Document::userAgent((WebCore::Document *)((char *)this - 552), (WebCore::Document *)((char *)this + 184), a2);
}

WTF::StringImpl *WebCore::Document::sendReportToEndpoints(WTF::StringImpl *result, uint64_t a2, unsigned int *a3, uint64_t a4, WTF::StringImpl **a5, unsigned int a6)
{
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF::StringImpl *v18;
  bmalloc::api *v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t i;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebCore::ReportingScope *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  WebCore::FormData *v30;
  WebCore::FormData *v31;
  WTF::StringImpl *v32;
  bmalloc::api *v33;
  void *v34;
  bmalloc::api *v35;
  void *v36;
  WebCore::FormData *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39[5];

  v10 = result;
  v11 = a3[3];
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)a3;
    v13 = 8 * v11;
    do
    {
      v14 = *((_QWORD *)v10 + 66);
      if (v14)
        v15 = *(_QWORD **)(v14 + 8);
      else
        v15 = 0;
      MEMORY[0x19AEA52F8](v39, a2, v12, 0);
      v16 = *a5;
      *(_DWORD *)v16 = *(_DWORD *)*a5 + 1;
      v38 = v16;
      WebCore::PingLoader::sendViolationReport(v15, (uint64_t)v39, &v38, a6);
      v18 = v38;
      v38 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
        {
          WebCore::FormData::~FormData(v18, v17);
          bmalloc::api::isoDeallocate(v19, v20);
        }
        else
        {
          --*(_DWORD *)v18;
        }
      }
      result = v39[0];
      v39[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)result -= 2;
      }
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  v21 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(WTF::StringImpl ***)a4;
    for (i = 8 * v21; i; i -= 8)
    {
      v24 = *((_QWORD *)v10 + 398);
      if (!v24)
      {
        v24 = bmalloc::api::isoAllocate();
        *(_DWORD *)(v24 + 16) = 1;
        *(_QWORD *)v24 = &off_1E33A18C0;
        *(_QWORD *)(v24 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v24, (WTF::StringImpl *)((char *)v10 + 192));
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)v24 = &off_1E33662E0;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        *(_OWORD *)(v24 + 80) = 0u;
        *(_OWORD *)(v24 + 93) = 0u;
        v26 = (WebCore::ReportingScope *)*((_QWORD *)v10 + 398);
        *((_QWORD *)v10 + 398) = v24;
        if (v26)
        {
          if (*((_DWORD *)v26 + 4) == 1)
          {
            WebCore::ReportingScope::~ReportingScope(v26, v25);
            bmalloc::api::isoDeallocate(v33, v34);
            v24 = *((_QWORD *)v10 + 398);
          }
          else
          {
            --*((_DWORD *)v26 + 4);
          }
        }
      }
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(v24 + 88), v22, (const WTF::StringImpl *)a3, &v38);
      result = v38;
      if (!v38)
        goto LABEL_35;
      if (*((_DWORD *)v38 + 1))
      {
        v28 = *((_QWORD *)v10 + 66);
        if (v28)
          v29 = *(_QWORD **)(v28 + 8);
        else
          v29 = 0;
        MEMORY[0x19AEA52F8](v39, a2, &v38, 0);
        v30 = *a5;
        *(_DWORD *)v30 = *(_DWORD *)*a5 + 1;
        v37 = v30;
        WebCore::PingLoader::sendViolationReport(v29, (uint64_t)v39, &v37, a6);
        v31 = v37;
        v37 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
          {
            WebCore::FormData::~FormData(v31, v27);
            bmalloc::api::isoDeallocate(v35, v36);
          }
          else
          {
            --*(_DWORD *)v31;
          }
        }
        v32 = v39[0];
        v39[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
          else
            *(_DWORD *)v32 -= 2;
        }
        result = v38;
        v38 = 0;
        if (!result)
          goto LABEL_35;
      }
      else
      {
        v38 = 0;
      }
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)result -= 2;
LABEL_35:
      ++v22;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::Document::sendReportToEndpoints(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, WTF::StringImpl **a5, unsigned int a6)
{
  return WebCore::Document::sendReportToEndpoints((WTF::StringImpl *)(a1 - 552), a2, a3, a4, a5, a6);
}

uint64_t *WebCore::Document::addElementWithLangAttrMatchingDocumentElement(WebCore::Document *this, WebCore::Element *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)this + 1728, a2, (uint64_t)v3);
}

uint64_t WebCore::Document::removeElementWithLangAttrMatchingDocumentElement(WebCore::Document *this, WebCore::Element *a2)
{
  return WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)this + 1728, a2);
}

uint64_t WebCore::CallbackForContainIntrinsicSize(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)result;
    v5 = *(_QWORD *)result + 8 * v2;
    do
    {
      v6 = *v4;
      v7 = *(_QWORD *)(*v4 + 8);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        if ((*(_BYTE *)(v7 + 22) & 8) != 0)
        {
          v8 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
          if (v8 && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          {
            ++*(_DWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
            if (!*(_DWORD *)(v6 + 52))
              goto LABEL_80;
            v14 = **(_QWORD **)(v6 + 40);
            ++*(_DWORD *)(v14 + 8);
            v15 = ((*(_DWORD *)(v8 + 124) >> 13) & 6) - 2;
            v16 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
            v17 = *(unsigned int *)(v16 + 636) | ((unint64_t)(*(unsigned __int16 *)(v16 + 640) | (*(unsigned __int8 *)(v16 + 642) << 16)) << 32);
            if (v15 >= 4)
              v18 = 0x200000000000;
            else
              v18 = 0x800000000000;
            if ((v18 & v17) != 0)
            {
              v19 = *(double *)(v14 + 16) * 64.0;
              v20 = (int)v19;
              if (v19 <= -2147483650.0)
                v20 = 0x80000000;
              if (v19 < 2147483650.0)
                v21 = v20;
              else
                v21 = 0x7FFFFFFF;
              v22 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL;
              if (!v22)
              {
                result = WebCore::Node::materializeRareData((WebCore::Node *)v7);
                v22 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL;
                v16 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 40);
              }
              *(_DWORD *)(v22 + 144) = v21;
              v17 = *(unsigned int *)(v16 + 636) | ((unint64_t)(*(unsigned __int16 *)(v16 + 640) | (*(unsigned __int8 *)(v16 + 642) << 16)) << 32);
              v15 = ((*(_DWORD *)(v8 + 124) >> 13) & 6) - 2;
            }
            if (v15 >= 4)
              v23 = 0x800000000000;
            else
              v23 = 0x200000000000;
            if ((v23 & v17) != 0)
            {
              v24 = *(double *)(v14 + 24) * 64.0;
              if (v24 >= 2147483650.0)
              {
                v25 = 0x7FFFFFFF;
              }
              else if (v24 <= -2147483650.0)
              {
                v25 = 0x80000000;
              }
              else
              {
                v25 = (int)v24;
              }
              v26 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL;
              if (!v26)
              {
                result = WebCore::Node::materializeRareData((WebCore::Node *)v7);
                v26 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL;
              }
              *(_DWORD *)(v26 + 148) = v25;
            }
            if (*(_DWORD *)(v14 + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            else
              --*(_DWORD *)(v14 + 8);
            v27 = *(_DWORD *)(v8 + 16);
            if (!v27)
            {
LABEL_80:
              __break(0xC471u);
              JUMPOUT(0x1959A4200);
            }
            *(_DWORD *)(v8 + 16) = v27 - 1;
          }
          else if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v9 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x88);
            if (v9)
            {
              v10 = *(unsigned int *)(v9 + 12);
              if ((_DWORD)v10)
              {
                v11 = 0;
                v12 = *(uint64_t **)v9;
                v13 = 1;
                while (1)
                {
                  result = *v12;
                  if (*v12)
                  {
                    if (*(void **)(result + 8) == a2)
                      break;
                  }
                  v13 = ++v11 < v10;
                  ++v12;
                  if (v10 == v11)
                    goto LABEL_45;
                }
                *v12 = 0;
                do
                {
                  v38 = __ldaxr((unsigned int *)result);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, (unsigned int *)result));
                if (!v39)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, a2);
                }
                v40 = v12 + 1;
                v41 = *(unsigned int *)(v9 + 12);
                v42 = *(_QWORD *)v9 + 8 * v41;
                while (v40 != (_QWORD *)v42)
                {
                  *(v40 - 1) = *v40;
                  *v40++ = 0;
                }
                *(_DWORD *)(v9 + 12) = v41 - 1;
                if (v13)
                  result = WebCore::ResizeObserver::removeObservation((WebCore::ResizeObserver *)a2, (const WebCore::Element *)v7);
              }
            }
          }
        }
        else
        {
          if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v28 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x88);
            if (v28)
            {
              v29 = *(unsigned int *)(v28 + 12);
              if ((_DWORD)v29)
              {
                v30 = 0;
                v31 = *(uint64_t **)v28;
                v32 = 1;
                while (1)
                {
                  result = *v31;
                  if (*v31)
                  {
                    if (*(void **)(result + 8) == a2)
                      break;
                  }
                  v32 = ++v30 < v29;
                  ++v31;
                  if (v29 == v30)
                    goto LABEL_6;
                }
                *v31 = 0;
                do
                {
                  v33 = __ldaxr((unsigned int *)result);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, (unsigned int *)result));
                if (!v34)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, a2);
                }
                v35 = v31 + 1;
                v36 = *(unsigned int *)(v28 + 12);
                v37 = *(_QWORD *)v28 + 8 * v36;
                while (v35 != (_QWORD *)v37)
                {
                  *(v35 - 1) = *v35;
                  *v35++ = 0;
                }
                *(_DWORD *)(v28 + 12) = v36 - 1;
                if (v32)
                  result = WebCore::ResizeObserver::removeObservation((WebCore::ResizeObserver *)a2, (const WebCore::Element *)v7);
              }
            }
          }
LABEL_6:
          if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x90) = 0x3F0000003FLL;
        }
LABEL_45:
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      ++v4;
    }
    while (v4 != (uint64_t *)v5);
  }
  return result;
}

unsigned int *WebCore::Document::observeForContainIntrinsicSize(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  void *v8;
  uint64_t v9;
  WebCore::ResizeObserver *v10;
  void *v11;
  uint64_t (*v13)(uint64_t, void *);
  unsigned int v14;
  char v15;

  v3 = *((_QWORD *)this + 432);
  if (v3)
    goto LABEL_10;
  v3 = bmalloc::api::isoAllocate();
  v13 = WebCore::CallbackForContainIntrinsicSize;
  v14 = 1;
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = 0;
  v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = v14;
    *(_BYTE *)(v3 + 24) = 0;
    v8 = (void *)(v3 + 24);
    *(_QWORD *)(v3 + 16) = v5;
    *(_DWORD *)(v3 + 32) = -1;
    if (v7 == -1)
    {
      *(_BYTE *)(v3 + 104) = 0;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 56) = 0u;
      *(_OWORD *)(v3 + 40) = 0u;
      goto LABEL_8;
    }
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 32) = -1;
    v7 = 1;
  }
  ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v7])(&v15);
  *(_DWORD *)(v3 + 32) = v7;
  v9 = v14;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_BYTE *)(v3 + 104) = 0;
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t (**)(uint64_t, void *)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSW_EEEDcOSX_DpOT0____fmatrix[v9])(&v15, &v13);
LABEL_8:
  v10 = (WebCore::ResizeObserver *)*((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = v3;
  if (v10)
  {
    WTF::RefCounted<WebCore::ResizeObserver>::deref(v10, v8);
    v3 = *((_QWORD *)this + 432);
    if (!v3)
      return WebCore::ResizeObserver::observeInternal(0, a2, 1);
  }
LABEL_10:
  ++*(_DWORD *)v3;
  WebCore::ResizeObserver::observeInternal((unsigned int *)v3, a2, 1);
  return (unsigned int *)WTF::RefCounted<WebCore::ResizeObserver>::deref((WebCore::ResizeObserver *)v3, v11);
}

uint64_t WebCore::Document::advancedPrivacyProtections(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    while (1)
    {
      v12 = *((_QWORD *)this + 66);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 120);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        break;
      this = *(WebCore::Document **)(*(_QWORD *)(v15 + 40) + 8);
    }
  }
  else
  {
    v1 = *((_QWORD *)this + 66);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
        if (v3 && *(_BYTE *)(v3 + 144) == 0)
        {
          v5 = *(WebCore::Document **)(v3 + 296);
          if (v5)
            this = v5;
        }
      }
    }
  }
  v6 = *((_QWORD *)this + 66);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 280) + 88);
  if (!v8 || *(WebCore::Document **)(v7 + 296) != this)
    return 0;
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  v10 = *(unsigned __int16 *)(v8 + 3514);
  if (v9)
    *(_DWORD *)(v8 + 24) = v9;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v10;
}

uint64_t `non-virtual thunk to'WebCore::Document::advancedPrivacyProtections(WebCore::Document *this)
{
  return WebCore::Document::advancedPrivacyProtections((WebCore::Document *)((char *)this - 192));
}

unint64_t WebCore::Document::noiseInjectionHashSalt(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Page *v11;
  const WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v1 = *((_QWORD *)this + 66);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && *(_QWORD *)(v3 + 8)
    && (WebCore::Document::advancedPrivacyProtections(this) & 0x40) != 0)
  {
    v8 = *((_QWORD *)this + 66);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(v9 + 24)) != 0)
    {
      v11 = *(WebCore::Page **)(v10 + 8);
      if (v11)
        ++*(_DWORD *)v11;
    }
    else
    {
      v11 = 0;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, (WebCore::Document *)((char *)this + 736));
    v13 = WebCore::Page::noiseInjectionHashSaltForDomain((uint64_t)v11, &v16, v12);
    v6 = v13;
    v5 = v13 >> 8;
    v15 = v16;
    v16 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v11)
      WTF::RefCounted<WebCore::Page>::deref(v11);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return v6 | (v5 << 8);
}

unint64_t `non-virtual thunk to'WebCore::Document::noiseInjectionHashSalt(WebCore::Document *this)
{
  return WebCore::Document::noiseInjectionHashSalt((WebCore::Document *)((char *)this - 192));
}

uint64_t WebCore::Document::updateContentRelevancyForScrollIfNeeded(WebCore::Document *this, const WebCore::Element *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 198);
  if (result)
    return WebCore::ContentVisibilityDocumentState::updateContentRelevancyForScrollIfNeeded(result, a2);
  return result;
}

uint64_t WebCore::Document::activeViewTransition(WebCore::Document *this)
{
  return *((_QWORD *)this + 264);
}

_DWORD *WebCore::Document::setActiveViewTransition(uint64_t a1, uint64_t *a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  WebCore::RenderLayerCompositor *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *result;
  WebCore::RenderLayerCompositor *v15;
  WebCore::RenderLayerCompositor *v16;
  WTF *v17;
  void *v18;
  BOOL v19;
  unsigned __int8 v20;
  _BYTE v21[8];
  uint64_t v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  char v25;

  v21[0] = 0;
  v25 = 0;
  v4 = *(void **)(a1 + 1272);
  if (v4)
  {
    v20 = 12;
    v19 = *a2 != 0;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,BOOL,void>((uint64_t)v21, (uint64_t)v4, &v20, (unsigned __int8 *)&v19);
  }
  v5 = *(unsigned __int8 *)(a1 + 3441);
  *(_WORD *)(a1 + 3441) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 1944);
    if (v6)
    {
      ++*(_DWORD *)(v6 + 16);
      v7 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
      if (!v7)
      {
        v15 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v7 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v15, (WebCore::RenderView *)v6);
        v16 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
        *(_QWORD *)(v6 + 400) = v7;
        if (v16)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v16);
          WTF::fastFree(v17, v18);
          v7 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
        }
      }
      v8 = *((_QWORD *)v7 + 32);
      if (v8 || (v8 = *((_QWORD *)v7 + 28)) != 0)
      {
        v10 = *(unsigned __int16 *)(v8 + 177);
        v9 = v8 + 177;
        v11 = *(unsigned __int8 *)(v9 + 2);
        *(_WORD *)v9 = v10;
        *(_BYTE *)(v9 + 2) = ((v10 | (v11 << 16)) & 0xFFDFFFFF) >> 16;
      }
      v12 = *(_DWORD *)(v6 + 16);
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1959A4708);
      }
      *(_DWORD *)(v6 + 16) = v12 - 1;
    }
  }
  v13 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(a1 + 2112);
  *(_QWORD *)(a1 + 2112) = v13;
  if (result)
  {
    if (result[6] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  if (v25)
  {
    if (v21[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v22, &v24);
    if (v24)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v24, v4);
    result = v23;
    if (v23)
      return (_DWORD *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, v4);
  }
  return result;
}

uint64_t std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,BOOL,void>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v21;
  BOOL v22;
  char v23;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)a1)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 24));
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v8, (void *)a2);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v9, (void *)a2);
    *(_BYTE *)(a1 + 32) = 0;
  }
  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_28;
  v10 = *(uint64_t **)(a2 + 40);
  v11 = v10[1];
  if (!*(_QWORD *)(v11 + 1944) || *(_BYTE *)(v11 + 3405))
    goto LABEL_28;
  v12 = (WTF::StringImpl *)*a3;
  v13 = *a4;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v17 = *v10;
    v18 = (*(_WORD *)(v17 + 28) & 0x80) == 0 || v17 == 0;
    v19 = v17 + 216;
    if (v18)
      v19 = v11 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v19 + 236))
      goto LABEL_28;
  }
  v14 = *(_QWORD *)(v11 + 1272);
  if (v14 && (*(_BYTE *)(v14 + 70) & 4) != 0)
  {
LABEL_28:
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    if (*(_BYTE *)(v11 + 3362)
      || (v15 = *(unsigned __int8 *)(v11 + 3390), !*(_BYTE *)(v11 + 3390))
      && (*(_BYTE *)(v11 + 70) & 8) == 0
      && !*(_QWORD *)(v11 + 1560)
      && (v16 = *(_QWORD *)(v11 + 1328), !*(_BYTE *)(v16 + 233))
      && !*(_BYTE *)(v16 + 234))
    {
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = a2;
LABEL_37:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, v12, v13, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 16));
      goto LABEL_29;
    }
    v21 = *(unsigned __int8 *)(v11 + 3391);
    if (v15)
      v22 = v21 == 0;
    else
      v22 = 0;
    v23 = !v22;
    *(_BYTE *)a1 = v23;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
    if (!v22)
      goto LABEL_37;
  }
LABEL_29:
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

WebCore::RenderLayerCompositor *WebCore::Document::clearRenderingIsSuppressedForViewTransition(WebCore::RenderLayerCompositor *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  WebCore::RenderLayerCompositor *v8;
  WebCore::RenderLayerCompositor *v9;
  WTF *v10;
  void *v11;

  v1 = *((unsigned __int8 *)this + 3441);
  *(_WORD *)((char *)this + 3441) = 0;
  if (v1)
  {
    v2 = *((_QWORD *)this + 243);
    if (v2)
    {
      ++*(_DWORD *)(v2 + 16);
      this = *(WebCore::RenderLayerCompositor **)(v2 + 400);
      if (!this)
      {
        v8 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        this = WebCore::RenderLayerCompositor::RenderLayerCompositor(v8, (WebCore::RenderView *)v2);
        v9 = *(WebCore::RenderLayerCompositor **)(v2 + 400);
        *(_QWORD *)(v2 + 400) = this;
        if (v9)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v9);
          WTF::fastFree(v10, v11);
          this = *(WebCore::RenderLayerCompositor **)(v2 + 400);
        }
      }
      v3 = *((_QWORD *)this + 32);
      if (v3 || (v3 = *((_QWORD *)this + 28)) != 0)
      {
        v5 = *(unsigned __int16 *)(v3 + 177);
        v4 = v3 + 177;
        v6 = *(unsigned __int8 *)(v4 + 2);
        *(_WORD *)v4 = v5;
        *(_BYTE *)(v4 + 2) = ((v5 | (v6 << 16)) & 0xFFDFFFFF) >> 16;
      }
      v7 = *(_DWORD *)(v2 + 16);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1959A496CLL);
      }
      *(_DWORD *)(v2 + 16) = v7 - 1;
    }
  }
  return this;
}

_QWORD *WebCore::Document::startViewTransition@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];
  int v10;
  uint64_t v11;
  char v12;

  result = (_QWORD *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a1 + 24));
  if (result)
  {
    WebCore::ViewTransition::create((WebCore::Document *)a1, a2, &v11);
    v7 = a1[264];
    if (v7)
    {
      ++*(_DWORD *)(v7 + 24);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v9[0]) = 16;
      v10 = 1;
      WebCore::ViewTransition::skipViewTransition((uint64_t *)v7, (WTF::StringImpl *)v9);
      if (v10 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v10])(&v12, v9);
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
    }
    v9[0] = v11;
    WebCore::Document::setActiveViewTransition((uint64_t)a1, v9);
    if (v9[0])
    {
      if (*(_DWORD *)(v9[0] + 24) == 1)
        (*(void (**)(void))(*(_QWORD *)v9[0] + 16))();
      else
        --*(_DWORD *)(v9[0] + 24);
    }
    result = WebCore::Document::scheduleRenderingUpdate(a1, 128);
    v8 = a1[264];
    if (v8)
      ++*(_DWORD *)(v8 + 24);
    *a3 = v8;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::Document::performPendingViewTransitions(WebCore::Document *this)
{
  uint64_t v1;
  NSObject *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::Document *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  _BOOL4 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 264);
  if (v1)
  {
    ++*(_DWORD *)(v1 + 24);
    if (*(_BYTE *)(v1 + 72) == 3)
    {
      WebCore::ViewTransition::handleTransitionFrame((unsigned int *)v1);
    }
    else if (!*(_BYTE *)(v1 + 72))
    {
      WebCore::ViewTransition::setupViewTransition((uint64_t *)v1);
    }
    if (*((_QWORD *)this + 264))
      WebCore::Document::scheduleRenderingUpdate(this, 128);
    if (*(_DWORD *)(v1 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    else
      --*(_DWORD *)(v1 + 24);
  }
  else if (*((_BYTE *)this + 3441))
  {
    WebCore::Document::clearRenderingIsSuppressedForViewTransition(this);
    v4 = qword_1ECE7CCC0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CCC0, OS_LOG_TYPE_ERROR))
    {
      WebCore::Document::pageID(this);
      if (v6)
        v7 = v5;
      else
        v7 = 0;
      if (*((_BYTE *)this + 3480))
        v8 = *((_QWORD *)this + 433);
      else
        v8 = 0;
      v9 = 134218752;
      v10 = this;
      v11 = 2048;
      v12 = v7;
      v13 = 2048;
      v14 = v8;
      v15 = 1024;
      v16 = WebCore::Document::topDocument((uint64_t)this) == (_QWORD)this;
      _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] Document::Rendering suppressed enabled without active view transition", (uint8_t *)&v9, 0x26u);
    }
  }
}

void WebCore::Document::mediaKeysStorageDirectory(WebCore::Document *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  void *v12;
  _DWORD *v13;

  v4 = *((_QWORD *)this + 66);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 24)) != 0 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    ++*(_DWORD *)v7;
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
    v9 = *(_QWORD *)(v7 + 1008);
    if ((v9 & 0x8000000000000000) == 0 || v9 == -1)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 1744) + 24))(*(_QWORD *)(v7 + 1744), v8 + 8);
    }
    else
    {
      v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v13 += 2;
      *a3 = v13;
    }
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::Page::~Page(v7);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a3 = v10;
  }
}

uint64_t WebCore::Document::securityOriginDidChange(uint64_t this, void *a2)
{
  WTF *v2;

  v2 = *(WTF **)(this + 3504);
  *(_QWORD *)(this + 3504) = 0;
  if (v2)
  {
    if (*(_QWORD *)v2)
      WTF::fastFree((WTF *)(*(_QWORD *)v2 - 16), a2);
    return WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::Document::securityOriginDidChange(uint64_t this, void *a2)
{
  WTF *v2;

  v2 = *(WTF **)(this + 3312);
  *(_QWORD *)(this + 3312) = 0;
  if (v2)
  {
    if (*(_QWORD *)v2)
      WTF::fastFree((WTF *)(*(_QWORD *)v2 - 16), a2);
    return WTF::fastFree(v2, a2);
  }
  return this;
}

void WebCore::DocumentFontLoader::~DocumentFontLoader(WebCore::DocumentFontLoader *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  WebCore::DocumentFontLoader::stopLoadingAndClearFonts((uint64_t)this, a2);
  v4 = *((unsigned int *)this + 19);
  if ((_DWORD)v4)
  {
    v5 = (unsigned int **)*((_QWORD *)this + 8);
    v6 = 8 * v4;
    do
    {
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v5, v3);
      v5 = (unsigned int **)(v7 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, v3);
  }
  *((_QWORD *)this + 1) = off_1E31F7378;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::DocumentFontLoader *)((char *)this + 8));
  v11 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v14 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v14)
      {
        v17 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
        v11 = v17;
      }
      v15 = *(WTF **)(v11 + 16);
      if (v15)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        v16 = v11;
        WTF::fastFree(v15, v10);
        v11 = v16;
      }
      WTF::fastFree((WTF *)v11, v10);
    }
  }
}

uint64_t WebCore::DocumentFragment::nodeName(WebCore::DocumentFragment *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DocumentFragment::childTypeAllowed(uint64_t a1, unsigned int a2)
{
  return (a2 < 9) & (0x19Au >> a2);
}

uint64_t WebCore::DocumentFragment::cloneNodeInternal@<X0>(WebCore::ContainerNode *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = bmalloc::api::isoAllocate();
  v9 = result;
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0xB00400000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)result = off_1E33A31A0;
  if (a3 == 2)
    result = (uint64_t)WebCore::ContainerNode::cloneChildNodes(a1, (WebCore::ContainerNode *)result);
  *a4 = v9;
  return result;
}

BOOL WebCore::DocumentFragment::parseXML(uint64_t a1, const WTF::String *a2, WebCore *a3, unsigned __int8 a4, __n128 a5)
{
  return WebCore::XMLDocumentParser::parseDocumentFragment(a2, a1, a3, (WTF::String *)a4, a5);
}

WebCore::Node *WebCore::DocumentFragment::getElementById(WebCore::DocumentFragment *this, const WTF::AtomString *a2)
{
  WebCore::Node *v2;
  const WebCore::TreeScope *v6;
  unsigned int *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *i;
  WebCore::DocumentFragment *v13;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  if ((*((_WORD *)this + 14) & 0xF000) == 0x9000 || (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v6 = (const WebCore::TreeScope *)*((_QWORD *)this + 5);
    v7 = (unsigned int *)*((_QWORD *)v6 + 3);
    if (v7)
    {
      WebCore::TreeScopeOrderedMap::getElementById(v7, a2, v6, (uint64_t *)&v11);
      v2 = v11;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11, v8);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      return v2;
    }
    return 0;
  }
  v13 = this;
  v9 = (WebCore::Node *)WebCore::ElementDescendantRange<WebCore::Element const>::begin((uint64_t *)&v13);
  v2 = v10;
  v11 = v9;
  for (i = v10; i; v2 = i)
  {
    if (*WebCore::Element::getIdAttribute(v2) == *(_QWORD *)a2)
      break;
    WebCore::ElementDescendantIterator<WebCore::Element const>::operator++(&v11);
  }
  return v2;
}

uint64_t WebCore::ElementDescendantRange<WebCore::Element const>::begin(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  __int16 i;
  uint64_t v4;
  BOOL v5;

  result = *a1;
  v2 = *(_QWORD *)(result + 80);
  if (v2)
  {
    for (i = *(_WORD *)(v2 + 28); (i & 8) == 0; v2 = v4)
    {
      if ((i & 4) == 0 || (v4 = *(_QWORD *)(v2 + 80)) == 0)
      {
        if (v2 == result)
          return result;
        while (1)
        {
          v4 = *(_QWORD *)(v2 + 56);
          if (v4)
            break;
          v2 = *(_QWORD *)(v2 + 32);
          if (v2)
            v5 = v2 == result;
          else
            v5 = 1;
          if (v5)
            return result;
        }
      }
      i = *(_WORD *)(v4 + 28);
    }
  }
  return result;
}

uint64_t *WebCore::Element::getIdAttribute(WebCore::Element *this)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1 || !*(_QWORD *)(v1 + 24))
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  v3 = *(_DWORD *)(v1 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v1 + 40);
    LODWORD(v5) = *(_DWORD *)(v1 + 52);
  }
  else
  {
    v4 = (uint64_t *)(v1 + 32);
    LODWORD(v5) = v3 >> 5;
  }
  if ((_DWORD)v5)
  {
    v5 = v5;
    while (1)
    {
      v6 = *v4;
      if (*v4 == WebCore::HTMLNames::idAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
      {
        break;
      }
      v4 += 2;
      if (!--v5)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v4 = 0;
  }
  return v4 + 1;
}

_QWORD *WebCore::ElementDescendantIterator<WebCore::Element const>::operator++(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  __int16 v4;
  _QWORD *v5;
  BOOL v6;
  BOOL v7;

  v1 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v3 = (_QWORD *)v2[10];
  if (!v3)
  {
    if (v2 == v1)
    {
LABEL_22:
      v5 = 0;
      goto LABEL_23;
    }
    while (1)
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
        break;
      v2 = (_QWORD *)v2[4];
      if (v2)
        v7 = v2 == v1;
      else
        v7 = 1;
      if (v7)
        goto LABEL_22;
    }
  }
  v4 = *((_WORD *)v3 + 14);
  if ((v4 & 8) != 0)
  {
    v5 = v3;
  }
  else
  {
    do
    {
      if ((v4 & 4) == 0 || (v5 = (_QWORD *)v3[10]) == 0)
      {
        if (v3 == v1)
          goto LABEL_22;
        while (1)
        {
          v5 = (_QWORD *)v3[7];
          if (v5)
            break;
          v3 = (_QWORD *)v3[4];
          if (v3)
            v6 = v3 == v1;
          else
            v6 = 1;
          if (v6)
            goto LABEL_22;
        }
      }
      v4 = *((_WORD *)v5 + 14);
      v3 = v5;
    }
    while ((v4 & 8) == 0);
  }
LABEL_23:
  result[1] = v5;
  return result;
}

unsigned int *WebCore::DocumentFullscreen::exitFullscreen(WebCore::Document *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  WebCore::FullscreenManager *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  void *v25;
  WebCore::FullscreenManager *v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v29;
  unsigned __int8 v30[8];
  WTF::StringImpl *v31;
  objc_class *v32;

  if (!WebCore::Document::isFullyActive(a1))
    goto LABEL_4;
  v4 = *((_QWORD *)a1 + 249);
  if (!v4)
  {
    v11 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 40) = 0;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_DWORD *)(v11 + 127) = 0;
    *(_QWORD *)(v11 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v15 = (WebCore::FullscreenManager *)*((_QWORD *)a1 + 249);
    *((_QWORD *)a1 + 249) = v11;
    if (v15)
    {
      WebCore::FullscreenManager::~FullscreenManager(v15, v14);
      if (*(_DWORD *)(v16 + 8))
      {
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v16, v17);
      }
    }
    v4 = *((_QWORD *)a1 + 249);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  v6 = *(_QWORD *)(v5 + 3096);
  if (v6)
  {
    v18 = 0;
    v19 = v5 + 3104;
    while (1)
    {
      v20 = (uint64_t *)(v18 ? v18 + 8 : v19);
      v18 = *v20;
      if ((*(_BYTE *)(*(_QWORD *)v18 + 54) & 0x40) != 0)
        break;
      if (v18 == v6)
        goto LABEL_4;
    }
    if (!v4)
    {
      v22 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
      v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a1);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = v23;
      *(_BYTE *)(v22 + 40) = 0;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_OWORD *)(v22 + 112) = 0u;
      *(_DWORD *)(v22 + 127) = 0;
      *(_QWORD *)(v22 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v26 = (WebCore::FullscreenManager *)*((_QWORD *)a1 + 249);
      *((_QWORD *)a1 + 249) = v22;
      if (v26)
      {
        WebCore::FullscreenManager::~FullscreenManager(v26, v25);
        if (*(_DWORD *)(v27 + 8))
        {
          *(_OWORD *)(v27 + 112) = 0u;
          *(_OWORD *)(v27 + 128) = 0u;
          *(_OWORD *)(v27 + 80) = 0u;
          *(_OWORD *)(v27 + 96) = 0u;
          *(_OWORD *)(v27 + 48) = 0u;
          *(_OWORD *)(v27 + 64) = 0u;
          *(_OWORD *)(v27 + 16) = 0u;
          *(_OWORD *)(v27 + 32) = 0u;
          *(_OWORD *)v27 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v27, v28);
        }
      }
      v4 = *((_QWORD *)a1 + 249);
    }
    ++*(_DWORD *)(v4 + 8);
    result = WebCore::FullscreenManager::exitFullscreen(v4, a2);
    v21 = *(_DWORD *)(v4 + 8);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1959A54DCLL);
    }
    *(_DWORD *)(v4 + 8) = v21 - 1;
  }
  else
  {
LABEL_4:
    v7 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = 0;
    v30[0] = 33;
    if (v29)
      *(_DWORD *)v29 += 2;
    v31 = v29;
    WebCore::DeferredPromise::reject(v7, v30, 0, &v32);
    v9 = v31;
    v31 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = (unsigned int *)v29;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        return (unsigned int *)WTF::StringImpl::destroy(v29, v8);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  return result;
}

void WebCore::DocumentFullscreen::webkitExitFullscreen(WebCore::DocumentFullscreen *this, WebCore::Document *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  WebCore::FullscreenManager *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  WebCore::FullscreenManager *v22;
  uint64_t v23;
  void *v24;
  _DWORD *v25;

  v3 = *((_QWORD *)this + 249);
  if (!v3)
  {
    v6 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = v7;
    *(_BYTE *)(v6 + 40) = 0;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_DWORD *)(v6 + 127) = 0;
    *(_QWORD *)(v6 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v10 = (WebCore::FullscreenManager *)*((_QWORD *)this + 249);
    *((_QWORD *)this + 249) = v6;
    if (v10)
    {
      WebCore::FullscreenManager::~FullscreenManager(v10, v9);
      if (*(_DWORD *)(v11 + 8))
      {
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v3 = *((_QWORD *)this + 249);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
  v5 = *(_QWORD *)(v4 + 3096);
  if (v5)
  {
    v13 = 0;
    v14 = v4 + 3104;
    while (1)
    {
      v15 = (uint64_t *)(v13 ? v13 + 8 : v14);
      v13 = *v15;
      if ((*(_BYTE *)(*(_QWORD *)v13 + 54) & 0x40) != 0)
        break;
      if (v13 == v5)
        return;
    }
    if (!v3)
    {
      v18 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 8) = 0;
      v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 16) = v19;
      *(_BYTE *)(v18 + 40) = 0;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_OWORD *)(v18 + 80) = 0u;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_OWORD *)(v18 + 112) = 0u;
      *(_DWORD *)(v18 + 127) = 0;
      *(_QWORD *)(v18 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v22 = (WebCore::FullscreenManager *)*((_QWORD *)this + 249);
      *((_QWORD *)this + 249) = v18;
      if (v22)
      {
        WebCore::FullscreenManager::~FullscreenManager(v22, v21);
        if (*(_DWORD *)(v23 + 8))
        {
          *(_OWORD *)(v23 + 112) = 0u;
          *(_OWORD *)(v23 + 128) = 0u;
          *(_OWORD *)(v23 + 80) = 0u;
          *(_OWORD *)(v23 + 96) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)(v23 + 64) = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)v23 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v23, v24);
        }
      }
      v3 = *((_QWORD *)this + 249);
    }
    ++*(_DWORD *)(v3 + 8);
    v25 = 0;
    WebCore::FullscreenManager::exitFullscreen(v3, (uint64_t *)&v25);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (v16[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
      else
        --v16[4];
    }
    v17 = *(_DWORD *)(v3 + 8);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1959A56F0);
    }
    *(_DWORD *)(v3 + 8) = v17 - 1;
  }
}

uint64_t WebCore::DocumentFullscreen::fullscreenEnabled(WebCore::FullscreenManager **this, WebCore::Document *a2)
{
  WebCore::FullscreenManager *v3;
  uint64_t v4;
  void *v5;
  uint64_t isFeatureEnabled;
  int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  WebCore::FullscreenManager *v13;
  uint64_t v14;
  void *v15;

  if (!WebCore::Document::isFullyActive((WebCore::Document *)this))
    return 0;
  v3 = this[249];
  if (!v3)
  {
    v9 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = v10;
    *(_BYTE *)(v9 + 40) = 0;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_DWORD *)(v9 + 127) = 0;
    *(_QWORD *)(v9 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v13 = this[249];
    this[249] = (WebCore::FullscreenManager *)v9;
    if (v13)
    {
      WebCore::FullscreenManager::~FullscreenManager(v13, v12);
      if (*(_DWORD *)(v14 + 8))
      {
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v3 = this[249];
  }
  ++*((_DWORD *)v3 + 2);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(9u, (_QWORD *)v4, 1);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v7 = *((_DWORD *)v3 + 2);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1959A584CLL);
  }
  *((_DWORD *)v3 + 2) = v7 - 1;
  return isFeatureEnabled;
}

uint64_t WebCore::DocumentMarkerController::fadeAnimationTimerFired(WebCore::DocumentMarkerController *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  char v7;

  v7 = 0;
  v6 = 1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = off_1E33A3C88;
  v2[1] = &v7;
  v2[2] = &v6;
  v5 = v2;
  WebCore::DocumentMarkerController::forEachOfTypes((uint64_t)this, 229375, &v5);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  if (v7)
  {
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E33A3CB0;
    v5 = (_QWORD *)v4;
    WebCore::DocumentMarkerController::removeMarkers((uint64_t)this, (void *)0x37FFF, &v5);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (v6)
  {
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
      return WebCore::TimerBase::stopSlowCase((WebCore::DocumentMarkerController *)((char *)this + 32));
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::writingToolsTextSuggestionAnimationTimerFired(WebCore::DocumentMarkerController *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E33A3C60;
  v4 = v2;
  WebCore::DocumentMarkerController::forEachOfTypes((uint64_t)this, 0x10000, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::DocumentMarkerController::~DocumentMarkerController(WebCore::DocumentMarkerController *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *((_QWORD *)this + 11) = off_1E31F7378;
  v2 = (WebCore::DocumentMarkerController *)((char *)this + 88);
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  *((_QWORD *)this + 4) = off_1E31F7378;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::DocumentMarkerController *)((char *)this + 32));
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v12 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
        v6 = v12;
      }
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v11 = v6;
        WTF::fastFree(v10, v5);
        v6 = v11;
      }
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::~HashTable((uint64_t **)this + 1, v5);
}

void WebCore::DocumentMarkerController::collectTextRanges(const WebCore::SimpleRange *a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  int32x2_t i;
  WebCore::Node *v6;
  uint64_t v7;
  unsigned int j;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t *v12;
  int32x2_t v13;
  int32x2_t *v14;
  int32x2_t *v15;
  int32x2_t *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int32x2_t v19;
  _BYTE v20[96];
  int32x2_t v21;
  WebCore::Node *v22;
  int32x2_t v23;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  WebCore::TextIterator::TextIterator((uint64_t)v20, a1, 0);
  for (i = v21; v21; i = v21)
  {
    v6 = v22;
    if (v22)
    {
      v7 = *((_QWORD *)v22 + 6);
      for (j = 0; ; ++j)
      {
        v9 = v7 & 0xFFFFFFFFFFFFLL;
        if (!v9)
          break;
        v7 = *(_QWORD *)(v9 + 48);
      }
      v23 = vadd_s32(v23, vdup_n_s32(j));
      v22 = 0;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v6);
          i = v21;
        }
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    *(_DWORD *)(*(_QWORD *)&i + 24) += 4;
    v18 = (WebCore::Node *)i;
    v19 = v23;
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      v11 = (int32x2_t *)WTF::Vector<WebCore::DocumentMarkerController::TextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)&v18);
      v10 = *(unsigned int *)(a2 + 12);
      v12 = (int32x2_t *)(*(_QWORD *)a2 + 16 * v10);
      v13 = *v11;
      *v11 = 0;
      v14 = v11 + 1;
      *v12 = v13;
      v15 = v12 + 1;
    }
    else
    {
      v16 = (int32x2_t *)(*(_QWORD *)a2 + 16 * v10);
      v18 = 0;
      *v16 = i;
      v15 = v16 + 1;
      v14 = &v19;
    }
    *v15 = *v14;
    *(_DWORD *)(a2 + 12) = v10 + 1;
    v17 = v18;
    v18 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)&i + 24) == 2)
    {
      if ((*(_WORD *)(*(_QWORD *)&i + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef(*(WebCore::Node **)&i);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)&i + 24) -= 2;
    }
    WebCore::TextIterator::advance((WebCore::TextIterator *)v20, v4);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v20, v4);
}

void WebCore::DocumentMarkerController::addMarker(uint64_t *a1, const WebCore::SimpleRange *a2, int a3, uint64_t a4)
{
  void *v7;
  WTF *v8;
  WTF *v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  char v21;
  _BYTE v22[64];
  int v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  _BYTE v27[64];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebCore::DocumentMarkerController::collectTextRanges(a2, (uint64_t)&v19);
  v8 = v19;
  if (v20)
  {
    v9 = (WTF *)((char *)v19 + 16 * v20);
    do
    {
      v10 = *(WebCore::Node **)v8;
      v11 = *((_QWORD *)v8 + 1);
      v22[0] = 0;
      v23 = -1;
      v12 = *(unsigned int *)(a4 + 64);
      if ((_DWORD)v12 == -1)
      {
        v24 = 0;
        v25 = a3;
        v26 = v11;
        v27[0] = 0;
      }
      else
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33A3518[v12])(&v21, v22, a4);
        v23 = v12;
        v24 = 0;
        v25 = a3;
        v26 = v11;
        v27[0] = 0;
        v28 = -1;
        ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v12])(&v21, v27, v22);
      }
      v28 = v12;
      WebCore::DocumentMarkerController::addMarker(a1, v10, &v24);
      if (v28 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v28])(&v21, v27);
      v28 = -1;
      v13 = (unsigned int *)v24;
      if (v24)
      {
        *((_QWORD *)v24 + 1) = 0;
        v24 = 0;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v7);
        }
      }
      else
      {
        v24 = 0;
      }
      if (v23 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v23])(&v21, v22);
      v8 = (WTF *)((char *)v8 + 16);
    }
    while (v8 != v9);
    v8 = v19;
    if (v20)
    {
      v16 = 0;
      v17 = 16 * v20;
      do
      {
        v18 = *(_QWORD *)((char *)v8 + v16);
        *(_QWORD *)((char *)v8 + v16) = 0;
        if (v18)
        {
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
        }
        v16 += 16;
      }
      while (v17 != v16);
    }
  }
  if (v8)
    WTF::fastFree(v8, v7);
}

uint64_t *WebCore::DocumentMarkerController::addMarker(uint64_t *result, WebCore::Node *this, _DWORD *a3)
{
  _DWORD *v3;
  WebCore::Node *v4;
  WebCore::DocumentMarkerController *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int i;
  uint64_t v16;
  WebCore::DocumentMarkerController *v17;
  WebCore::Node *v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char **v51;
  _DWORD *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _OWORD *v61;
  WTF **v62;
  _DWORD *v63;
  WTF *v64;
  int v65;
  unint64_t v66;
  unint64_t j;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD *v72;
  unsigned int v73;
  void *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  WTF *v82;
  unsigned int *v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  WTF *v96;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  WTF *v114;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  __int128 v128;
  WTF *v129;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  WTF *v134;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  __int128 *v142;
  __int128 v143;
  int v144;
  WTF *v145;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  double v151;
  WebCore::Node *v152;
  WebCore::Node *v153;
  WebCore::DocumentMarkerController *v154;
  _DWORD *v155;
  char v156;
  WTF *v157;
  uint64_t v158;
  unsigned int v159;
  _BYTE v160[64];
  unsigned int v161;
  WTF *v162;
  int v163;
  int v164;
  _OWORD v165[2];
  __int128 v166;
  unsigned int v167;
  _BYTE v168[64];
  int v169;
  WTF *v170;
  uint64_t v171;
  _BYTE v172[16];
  __int128 v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  if (a3[4] == a3[3])
    return result;
  v3 = a3;
  v4 = this;
  v5 = (WebCore::DocumentMarkerController *)result;
  v6 = a3[2];
  v155 = a3 + 2;
  *((_DWORD *)this + 6) += 2;
  v8 = result + 1;
  v7 = result[1];
  *((_DWORD *)result + 4) |= v6;
  if (v7
    || (WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(result + 1, 8u, 0), (v7 = *v8) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v9;
    v17 = (WebCore::DocumentMarkerController *)(v7 + 16 * v16);
    v18 = *(WebCore::Node **)v17;
    if (*(_QWORD *)v17 != -1)
      break;
    v10 = (uint64_t *)(v7 + 16 * v16);
LABEL_11:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*v8 - 16);
      *v10 = (uint64_t)v4;
    }
    else
    {
      *(_QWORD *)v17 = v4;
      v10 = (uint64_t *)(v7 + 16 * v16);
    }
    v20 = v10[1];
    v10[1] = 0;
    if (v20)
    {
      v21 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20, this);
      WTF::fastFree(v21, v22);
    }
    v23 = *v8;
    if (*v8)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v8;
    if (*v8)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_32;
    }
    else
    {
      if (3 * v28 > 4 * v27)
      {
LABEL_32:
        v19 = v10 + 1;
        goto LABEL_33;
      }
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_31;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_31:
    v10 = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(v8, v29, v10);
    goto LABEL_32;
  }
  if (v18 != v4)
    goto LABEL_11;
  v19 = (uint64_t *)(v7 + 16 * v16 + 8);
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
LABEL_33:
  v30 = (_QWORD *)*v19;
  v154 = v5;
  if (!*v19)
  {
    v34 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    v35 = *v19;
    *v19 = v34;
    if (v35)
    {
      v36 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35, v33);
      WTF::fastFree(v36, v37);
      v34 = *v19;
    }
    v38 = *(_QWORD *)v155;
    *(_QWORD *)&v166 = 0;
    *((_QWORD *)&v166 + 1) = v38;
    v167 = v155[2];
    v168[0] = 0;
    v169 = -1;
    v39 = v3[24];
    if ((_DWORD)v39 != -1)
    {
      ((void (*)(WTF **, _BYTE *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v39])(&v157, v168, v3 + 8);
      v169 = v39;
    }
    v170 = (WTF *)v172;
    v171 = 1;
    LOWORD(v173) = 0;
    DWORD1(v173) = 1065353216;
    *((_QWORD *)&v173 + 1) = 0x7FF8000000000000;
    v40 = *(unsigned int *)(v34 + 12);
    if ((_DWORD)v40 == *(_DWORD *)(v34 + 8))
    {
      v41 = WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v40 + 1, (unint64_t)&v166);
      v42 = v41;
      v43 = *(_DWORD *)(v34 + 12);
      v44 = *(_QWORD *)v34;
      v45 = *(_QWORD *)v34 + 160 * v43;
      *(_QWORD *)v45 = 0;
      v46 = *((_QWORD *)v41 + 1);
      *(_DWORD *)(v45 + 16) = *((_DWORD *)v41 + 4);
      *(_QWORD *)(v45 + 8) = v46;
      *(_BYTE *)(v45 + 32) = 0;
      v47 = (void *)(v45 + 32);
      *(_DWORD *)(v45 + 96) = -1;
      v48 = *((unsigned int *)v41 + 24);
      if ((_DWORD)v48 != -1)
      {
        ((void (*)(WTF **, void *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v48])(&v157, v47, v41 + 32);
        *(_DWORD *)(v45 + 96) = v48;
      }
      v49 = v44 + 160 * v43;
      v50 = (_OWORD *)(v49 + 128);
      *(_QWORD *)(v49 + 112) = v49 + 128;
      v51 = (char **)(v49 + 112);
      v51[1] = (char *)1;
      v52 = (_DWORD *)v51 + 3;
      v53 = (char *)*((_QWORD *)v42 + 14);
      if (v53 == v42 + 128)
      {
        v137 = *((unsigned int *)v42 + 31);
        if ((_DWORD)v137)
        {
          v138 = 16 * v137;
          do
          {
            v139 = *(_OWORD *)v53;
            v53 += 16;
            *v50++ = v139;
            v138 -= 16;
          }
          while (v138);
        }
      }
      else
      {
        *((_QWORD *)v42 + 14) = v42 + 128;
        *v51 = v53;
        v54 = *((_DWORD *)v42 + 30);
        *((_DWORD *)v42 + 30) = 1;
        *((_DWORD *)v51 + 2) = v54;
      }
      v140 = *((_DWORD *)v42 + 31);
      *((_DWORD *)v42 + 31) = 0;
      *v52 = v140;
      *(_OWORD *)(v44 + 160 * v43 + 144) = *((_OWORD *)v42 + 9);
    }
    else
    {
      v56 = *(_QWORD *)v34;
      v57 = *(_QWORD *)v34 + 160 * v40;
      *(_QWORD *)v57 = 0;
      v58 = *((_QWORD *)&v166 + 1);
      *(_DWORD *)(v57 + 16) = v167;
      *(_QWORD *)(v57 + 8) = v58;
      *(_BYTE *)(v57 + 32) = 0;
      v47 = (void *)(v57 + 32);
      *(_DWORD *)(v57 + 96) = -1;
      v59 = v169;
      if (v169 != -1)
      {
        ((void (*)(WTF **, void *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v169])(&v157, v47, v168);
        *(_DWORD *)(v57 + 96) = v59;
      }
      v60 = v56 + 160 * v40;
      v61 = (_OWORD *)(v60 + 128);
      *(_QWORD *)(v60 + 112) = v60 + 128;
      v62 = (WTF **)(v60 + 112);
      v62[1] = (WTF *)1;
      v63 = (_DWORD *)v62 + 3;
      v64 = v170;
      if (v170 == (WTF *)v172)
      {
        if (HIDWORD(v171))
        {
          v141 = 16 * HIDWORD(v171);
          v142 = (__int128 *)v172;
          do
          {
            v143 = *v142++;
            *v61++ = v143;
            v141 -= 16;
          }
          while (v141);
        }
      }
      else
      {
        v170 = (WTF *)v172;
        *v62 = v64;
        v65 = v171;
        LODWORD(v171) = 1;
        *((_DWORD *)v62 + 2) = v65;
      }
      v144 = HIDWORD(v171);
      HIDWORD(v171) = 0;
      *v63 = v144;
      *(_OWORD *)(v56 + 160 * v40 + 144) = v173;
    }
    ++*(_DWORD *)(v34 + 12);
    v145 = v170;
    if (v172 != (_BYTE *)v170 && v170 != 0)
    {
      v170 = 0;
      LODWORD(v171) = 0;
      WTF::fastFree(v145, v47);
    }
    v17 = v154;
    if (v169 != -1)
      ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v169])(&v157, v168);
    v169 = -1;
    v83 = (unsigned int *)v166;
    if ((_QWORD)v166)
    {
      *(_QWORD *)(v166 + 8) = 0;
      *(_QWORD *)&v166 = 0;
      do
      {
        v147 = __ldaxr(v83);
        v85 = --v147 == 0;
      }
      while (__stlxr(v147, v83));
      goto LABEL_215;
    }
    goto LABEL_217;
  }
  v31 = *v155;
  if ((int)*v155 < 0x4000)
  {
    if (v31 == 2048 || v31 == 4096)
      goto LABEL_62;
    goto LABEL_53;
  }
  if (v31 == 0x4000)
  {
    if (v3[24] != 4)
      goto LABEL_232;
    if ((*(_QWORD *)(*((_QWORD *)v3 + 4) + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(*((_QWORD *)v3 + 4) + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
    {
      goto LABEL_62;
    }
    v32 = 4;
LABEL_92:
    v86 = *(_QWORD *)v155;
    *(_QWORD *)&v166 = 0;
    *((_QWORD *)&v166 + 1) = v86;
    v167 = v155[2];
    v168[0] = 0;
    v169 = -1;
LABEL_93:
    ((void (*)(WTF **, _BYTE *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v32])(&v157, v168, v3 + 8);
    v169 = v32;
LABEL_94:
    v153 = v4;
    v170 = (WTF *)v172;
    v171 = 1;
    LOWORD(v173) = 0;
    DWORD1(v173) = 1065353216;
    *((_QWORD *)&v173 + 1) = 0x7FF8000000000000;
    v87 = *(unsigned int *)(*v19 + 12);
    if ((_DWORD)v87)
    {
      v88 = 0;
      while (1)
      {
        if (v88 >= *(unsigned int *)(*v19 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1959A6E9CLL);
        }
        v89 = *(_QWORD *)*v19 + 160 * v88;
        v157 = 0;
        v90 = *(_QWORD *)(v89 + 8);
        v159 = *(_DWORD *)(v89 + 16);
        v158 = v90;
        v160[0] = 0;
        v161 = -1;
        v91 = *(unsigned int *)(v89 + 96);
        if ((_DWORD)v91 != -1)
        {
          ((void (*)(char *, _BYTE *, uint64_t))off_1E33A3518[v91])(&v156, v160, v89 + 32);
          v161 = v91;
        }
        if (HIDWORD(v158) <= HIDWORD(v166))
        {
          v92 = 1;
          if ((_DWORD)v158 == DWORD2(v166) && v159 >= HIDWORD(v166))
          {
            HIDWORD(v166) = HIDWORD(v158);
            v93 = *v19;
            v94 = *(_QWORD *)*v19;
            v95 = v94 + 160 * v88;
            v96 = *(WTF **)(v95 + 112);
            if ((WTF *)(v95 + 128) != v96 && v96 != 0)
            {
              *(_QWORD *)(v95 + 112) = 0;
              *(_DWORD *)(v94 + 160 * v88 + 120) = 0;
              WTF::fastFree(v96, this);
            }
            v98 = *(unsigned int *)(v95 + 96);
            if ((_DWORD)v98 != -1)
              ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v98])(&v156, v95 + 32);
            *(_DWORD *)(v95 + 96) = -1;
            if (*(_QWORD *)v95)
            {
              *(_QWORD *)(*(_QWORD *)v95 + 8) = 0;
              v99 = *(unsigned int **)v95;
              *(_QWORD *)v95 = 0;
              if (v99)
              {
                do
                {
                  v100 = __ldaxr(v99);
                  v101 = v100 - 1;
                }
                while (__stlxr(v101, v99));
                if (!v101)
                {
                  atomic_store(1u, v99);
                  WTF::fastFree((WTF *)v99, this);
                }
              }
            }
            else
            {
              *(_QWORD *)v95 = 0;
            }
            WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)(v95 + 160), (WTF *)(*(_QWORD *)v93 + 160 * *(unsigned int *)(v93 + 12)), v95);
            v92 = 0;
            --*(_DWORD *)(v93 + 12);
            --v87;
            v91 = v161;
          }
        }
        else
        {
          v92 = 0;
        }
        if (v91 != 0xFFFFFFFFLL)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v91])(&v156, v160);
        v161 = -1;
        v102 = (unsigned int *)v157;
        if (!v157)
          goto LABEL_123;
        *((_QWORD *)v157 + 1) = 0;
        v157 = 0;
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
        {
          atomic_store(1u, v102);
          WTF::fastFree((WTF *)v102, this);
          if (!v92)
            goto LABEL_129;
        }
        else
        {
LABEL_123:
          if (!v92)
            goto LABEL_129;
        }
        if (++v88 >= v87)
          goto LABEL_129;
      }
    }
    v88 = 0;
    v87 = 0;
LABEL_129:
    v105 = v88;
    while (1)
    {
      v106 = (_QWORD *)*v19;
      if (v105 >= v87)
      {
LABEL_165:
        v159 = v167;
        v157 = 0;
        v158 = *((_QWORD *)&v166 + 1);
        v160[0] = 0;
        v161 = -1;
        v123 = v169;
        if (v169 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E33A3518[v169])(&v156, v160, v168);
          v161 = v123;
        }
        v124 = HIDWORD(v171);
        v162 = (WTF *)v165;
        v163 = 1;
        v164 = HIDWORD(v171);
        if (HIDWORD(v171) >= 2)
        {
          if (!(HIDWORD(v171) >> 28))
          {
            v125 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v171)));
            v163 = v124;
            v162 = v125;
            v124 = HIDWORD(v171);
            goto LABEL_171;
          }
LABEL_238:
          __break(0xC471u);
          JUMPOUT(0x1959A6E4CLL);
        }
        v125 = (WTF *)v165;
LABEL_171:
        if ((_DWORD)v124)
        {
          v126 = v170;
          v127 = 16 * v124;
          do
          {
            v128 = *(_OWORD *)v126;
            v126 = (WTF *)((char *)v126 + 16);
            *(_OWORD *)v125 = v128;
            v125 = (WTF *)((char *)v125 + 16);
            v127 -= 16;
          }
          while (v127);
        }
        v165[1] = v173;
        WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)v106, v88, (unint64_t)&v157);
        v129 = v162;
        if (v165 != (_OWORD *)v162 && v162 != 0)
        {
          v162 = 0;
          v163 = 0;
          WTF::fastFree(v129, v47);
        }
        v4 = v153;
        v17 = v154;
        if (v161 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v161])(&v156, v160);
        v161 = -1;
        v131 = (unsigned int *)v157;
        if (v157)
        {
          *((_QWORD *)v157 + 1) = 0;
          v157 = 0;
          do
          {
            v132 = __ldaxr(v131);
            v133 = v132 - 1;
          }
          while (__stlxr(v133, v131));
          if (!v133)
          {
            atomic_store(1u, v131);
            WTF::fastFree((WTF *)v131, v47);
          }
        }
        v134 = v170;
        if (v172 != (_BYTE *)v170 && v170 != 0)
        {
          v170 = 0;
          LODWORD(v171) = 0;
          WTF::fastFree(v134, v47);
        }
        if (v169 != -1)
          ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v169])(&v157, v168);
        v169 = -1;
        v83 = (unsigned int *)v166;
        if ((_QWORD)v166)
        {
          *(_QWORD *)(v166 + 8) = 0;
          *(_QWORD *)&v166 = 0;
          do
          {
            v136 = __ldaxr(v83);
            v85 = --v136 == 0;
          }
          while (__stlxr(v136, v83));
LABEL_215:
          if (v85)
          {
            atomic_store(1u, v83);
            v83 = (unsigned int *)WTF::fastFree((WTF *)v83, v47);
          }
        }
        goto LABEL_217;
      }
      if (v105 >= *((unsigned int *)v106 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1959A6E94);
      }
      v107 = *v106 + 160 * v105;
      v157 = 0;
      v108 = *(_QWORD *)(v107 + 8);
      v159 = *(_DWORD *)(v107 + 16);
      v158 = v108;
      v160[0] = 0;
      v161 = -1;
      v109 = *(unsigned int *)(v107 + 96);
      if ((_DWORD)v109 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E33A3518[v109])(&v156, v160, v107 + 32);
        v161 = v109;
      }
      if (HIDWORD(v158) <= v167)
      {
        if ((_DWORD)v158 == DWORD2(v166))
        {
          v111 = (_QWORD *)*v19;
          v112 = *(_QWORD *)*v19;
          v113 = v112 + 160 * v105;
          v114 = *(WTF **)(v113 + 112);
          if ((WTF *)(v113 + 128) != v114 && v114 != 0)
          {
            *(_QWORD *)(v113 + 112) = 0;
            *(_DWORD *)(v112 + 160 * v105 + 120) = 0;
            WTF::fastFree(v114, this);
          }
          v116 = *(unsigned int *)(v113 + 96);
          if ((_DWORD)v116 != -1)
            ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v116])(&v156, v113 + 32);
          *(_DWORD *)(v113 + 96) = -1;
          if (*(_QWORD *)v113)
          {
            *(_QWORD *)(*(_QWORD *)v113 + 8) = 0;
            v117 = *(unsigned int **)v113;
            *(_QWORD *)v113 = 0;
            if (v117)
            {
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (!v119)
              {
                atomic_store(1u, v117);
                WTF::fastFree((WTF *)v117, this);
              }
            }
          }
          else
          {
            *(_QWORD *)v113 = 0;
          }
          WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)(v113 + 160), (WTF *)(*v111 + 160 * *((unsigned int *)v111 + 3)), v113);
          --*((_DWORD *)v111 + 3);
          if (v167 <= v159)
          {
            v110 = 0;
            v167 = v159;
            goto LABEL_155;
          }
          --v87;
        }
        else
        {
          ++v105;
        }
        v110 = 1;
      }
      else
      {
        v110 = 0;
      }
LABEL_155:
      if (v161 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v161])(&v156, v160);
      v161 = -1;
      v120 = (unsigned int *)v157;
      if (!v157)
        goto LABEL_161;
      *((_QWORD *)v157 + 1) = 0;
      v157 = 0;
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((WTF *)v120, this);
        if ((v110 & 1) == 0)
        {
LABEL_164:
          v106 = (_QWORD *)*v19;
          goto LABEL_165;
        }
      }
      else
      {
LABEL_161:
        if ((v110 & 1) == 0)
          goto LABEL_164;
      }
    }
  }
  if (v31 == 0x10000)
    goto LABEL_62;
  if (v31 != 0x20000)
  {
LABEL_53:
    v32 = v3[24];
    v55 = *(_QWORD *)v155;
    *(_QWORD *)&v166 = 0;
    *((_QWORD *)&v166 + 1) = v55;
    v167 = v155[2];
    v168[0] = 0;
    v169 = -1;
    if (v32 == -1)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v3[24] == 6)
  {
    if ((*(_QWORD *)(*((_QWORD *)v3 + 4) + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*(_QWORD *)(*((_QWORD *)v3 + 4) + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    {
      v32 = 6;
      goto LABEL_92;
    }
LABEL_62:
    v66 = *((unsigned int *)v30 + 3);
    if ((_DWORD)v66)
    {
      v152 = v4;
      for (j = 0; j != v66; ++j)
      {
        if (j >= *(unsigned int *)(*v19 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1959A6E8CLL);
        }
        v68 = *(_QWORD *)*v19 + 160 * j;
        *(_QWORD *)&v166 = 0;
        v69 = *(_QWORD *)(v68 + 8);
        v167 = *(_DWORD *)(v68 + 16);
        *((_QWORD *)&v166 + 1) = v69;
        v168[0] = 0;
        v169 = -1;
        v70 = *(unsigned int *)(v68 + 96);
        if ((_DWORD)v70 == -1)
        {
          if (HIDWORD(v166) > v3[3])
            goto LABEL_79;
        }
        else
        {
          ((void (*)(WTF **, _BYTE *, uint64_t))off_1E33A3518[v70])(&v157, v168, v68 + 32);
          v169 = v70;
          v71 = HIDWORD(v166);
          v72 = v3;
          v73 = v3[3];
          ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v70])(&v157, v168);
          v75 = (unsigned int *)v166;
          v169 = -1;
          if ((_QWORD)v166)
          {
            *(_QWORD *)(v166 + 8) = 0;
            *(_QWORD *)&v166 = 0;
            do
            {
              v76 = __ldaxr(v75);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, v75));
            if (!v77)
            {
              atomic_store(1u, v75);
              WTF::fastFree((WTF *)v75, v74);
            }
            v78 = v71 > v73;
          }
          else
          {
            v78 = v71 > v73;
          }
          v3 = v72;
          if (v78)
            goto LABEL_79;
        }
      }
      j = v66;
LABEL_79:
      v30 = (_QWORD *)*v19;
      v4 = v152;
    }
    else
    {
      j = 0;
    }
    v79 = *(_QWORD *)v155;
    *(_QWORD *)&v166 = 0;
    *((_QWORD *)&v166 + 1) = v79;
    v167 = v155[2];
    v168[0] = 0;
    v169 = -1;
    v80 = v3[24];
    if ((_DWORD)v80 != -1)
    {
      ((void (*)(WTF **, _BYTE *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v80])(&v157, v168, v3 + 8);
      v169 = v80;
    }
    v170 = (WTF *)v172;
    v171 = 1;
    LOWORD(v173) = 0;
    DWORD1(v173) = 1065353216;
    *((_QWORD *)&v173 + 1) = 0x7FF8000000000000;
    v81 = WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert((uint64_t)v30, j, (unint64_t)&v166);
    v82 = v170;
    if (v172 != (_BYTE *)v170 && v170)
    {
      v170 = 0;
      LODWORD(v171) = 0;
      WTF::fastFree(v82, v47);
    }
    v17 = v5;
    if (v169 != -1)
      ((void (*)(WTF **, _BYTE *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v169])(&v157, v168, v81);
    v169 = -1;
    v83 = (unsigned int *)v166;
    if ((_QWORD)v166)
    {
      *(_QWORD *)(v166 + 8) = 0;
      *(_QWORD *)&v166 = 0;
      do
      {
        v84 = __ldaxr(v83);
        v85 = --v84 == 0;
      }
      while (__stlxr(v84, v83));
      goto LABEL_215;
    }
LABEL_217:
    v148 = *((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL;
    if (v148)
    {
      v149 = *(_DWORD *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v149;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v166) = 0;
        LOBYTE(v167) = 0;
        LOBYTE(v157) = 0;
        LOBYTE(v159) = 0;
        v83 = (unsigned int *)WebCore::RenderObject::issueRepaint(v148, &v166, 0, 0, (uint64_t)&v157);
        v149 = *(_DWORD *)(v148 + 16);
      }
      if (!v149)
        goto LABEL_238;
      *(_DWORD *)(v148 + 16) = v149 - 1;
    }
    if (*v155 == 0x10000)
    {
      v150 = *((_QWORD *)v17 + 15) & 0xFFFFFFFFFFFFLL;
      if (!v150)
        goto LABEL_224;
      goto LABEL_233;
    }
    return WebCore::DocumentMarkerController::invalidateRectsForMarkersInNode(v17, v4);
  }
LABEL_232:
  v83 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_233:
  if (*(double *)(v150 + 8) == 0.0)
  {
LABEL_224:
    *((_QWORD *)v17 + 14) = 0x3FA1111111111111;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v83);
    WebCore::TimerBase::setNextFireTime((uint64_t)v17 + 88, v151 + 0.0333333333);
  }
  return WebCore::DocumentMarkerController::invalidateRectsForMarkersInNode(v17, v4);
}

void WebCore::DocumentMarkerController::addDraggedContentMarker(WebCore::DocumentMarkerController *this, const WebCore::SimpleRange *a2)
{
  void *v3;
  WTF *v4;
  WTF *v5;
  WebCore::Node *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  char v16;
  _QWORD v17[8];
  int v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  WebCore::Node *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebCore::DocumentMarkerController::collectTextRanges(a2, (uint64_t)&v14);
  v4 = v14;
  if (v15)
  {
    v5 = (WTF *)((char *)v14 + 16 * v15);
    do
    {
      v6 = *(WebCore::Node **)v4;
      v7 = *((_QWORD *)v4 + 1);
      *((_DWORD *)v6 + 6) = *(_DWORD *)(*(_QWORD *)v4 + 24) + 2;
      v18 = 4;
      v19 = 0;
      v20 = 0x4000;
      v21 = v7;
      v17[0] = 0;
      v22 = v6;
      v23 = 4;
      WebCore::DocumentMarkerController::addMarker((uint64_t *)this, v6, &v19);
      if (v23 != -1)
        ((void (*)(char *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v23])(&v16, &v22);
      v23 = -1;
      v8 = (unsigned int *)v19;
      if (v19)
      {
        *((_QWORD *)v19 + 1) = 0;
        v19 = 0;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v3);
        }
      }
      else
      {
        v19 = 0;
      }
      if (v18 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v18])(&v16, v17);
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = v14;
    if (v15)
    {
      v11 = 0;
      v12 = 16 * v15;
      do
      {
        v13 = *(_QWORD *)((char *)v4 + v11);
        *(_QWORD *)((char *)v4 + v11) = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, v3);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v11 += 16;
      }
      while (v12 != v11);
    }
  }
  if (v4)
    WTF::fastFree(v4, v3);
}

void WebCore::DocumentMarkerController::addTransparentContentMarker(uint64_t *a1, const WebCore::SimpleRange *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  WTF *v8;
  WTF *v9;
  WebCore::Node *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  WebCore::Node *v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebCore::DocumentMarkerController::collectTextRanges(a2, (uint64_t)&v18);
  v8 = v18;
  if (v19)
  {
    v9 = (WTF *)((char *)v18 + 16 * v19);
    do
    {
      v10 = *(WebCore::Node **)v8;
      v11 = *((_QWORD *)v8 + 1);
      *((_DWORD *)v10 + 6) = *(_DWORD *)(*(_QWORD *)v8 + 24) + 2;
      *(_QWORD *)&v22 = a3;
      *((_QWORD *)&v22 + 1) = a4;
      v23 = 6;
      v24 = 0;
      v25 = 0x20000;
      v26 = v11;
      v21 = 0;
      v27 = v10;
      v28 = v22;
      v29 = 6;
      WebCore::DocumentMarkerController::addMarker(a1, v10, &v24);
      if (v29 != -1)
        ((void (*)(char *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v29])(&v20, &v27);
      v29 = -1;
      v12 = (unsigned int *)v24;
      if (v24)
      {
        *((_QWORD *)v24 + 1) = 0;
        v24 = 0;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v7);
        }
      }
      else
      {
        v24 = 0;
      }
      if (v23 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v23])(&v20, &v21);
      v8 = (WTF *)((char *)v8 + 16);
    }
    while (v8 != v9);
    v8 = v18;
    if (v19)
    {
      v15 = 0;
      v16 = 16 * v19;
      do
      {
        v17 = *(_QWORD *)((char *)v8 + v15);
        *(_QWORD *)((char *)v8 + v15) = 0;
        if (v17)
        {
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v7);
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
        v15 += 16;
      }
      while (v16 != v15);
    }
  }
  if (v8)
    WTF::fastFree(v8, v7);
}

void WebCore::DocumentMarkerController::removeMarkers(uint64_t a1, const WebCore::SimpleRange *a2, int a3, char a4)
{
  uint64_t v4;

  v4 = 0;
  WebCore::DocumentMarkerController::filterMarkers(a1, a2, &v4, a3, a4);
}

void WebCore::DocumentMarkerController::filterMarkers(uint64_t a1, const WebCore::SimpleRange *a2, _QWORD *a3, int a4, char a5)
{
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;

  WebCore::DocumentMarkerController::collectTextRanges(a2, (uint64_t)&v19);
  v10 = v19;
  v11 = v20;
  if (v20)
  {
    v12 = (uint64_t *)((char *)v19 + 16 * v20);
    v13 = (uint64_t *)v19;
    do
    {
      if ((*(_DWORD *)(a1 + 16) & a4) == 0)
        break;
      v14 = *v13;
      v15 = v13[1];
      v13 += 2;
      WebCore::DocumentMarkerController::removeMarkers(a1, v14, v15, a4, a3, a5);
    }
    while (v13 != v12);
    v16 = 16 * v11;
    v17 = v10;
    do
    {
      v18 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      v17 = (WTF *)((char *)v17 + 16);
      v16 -= 16;
    }
    while (v16);
  }
  if (v10)
    WTF::fastFree(v10, v9);
}

_QWORD *WebCore::DocumentMarkerController::invalidateRectsForAllMarkers(_QWORD *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Page *v16;
  WTF *v17;
  void *v18;

  v2 = this[1];
  if (!v2 || !*(_DWORD *)(v2 - 12))
    return this;
  v3 = this;
  v4 = *(unsigned int *)(v2 - 4);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = (_QWORD *)this[1];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v5 -= 16;
      if (!v5)
        goto LABEL_29;
    }
  }
  else
  {
    v6 = (_QWORD *)this[1];
  }
  v7 = (_QWORD *)(v2 + 16 * v4);
  if (v6 == v7)
    goto LABEL_29;
LABEL_10:
  v8 = v6[1];
  v9 = *(unsigned int *)(v8 + 12);
  if (!(_DWORD)v9)
    goto LABEL_26;
  v10 = 160 * v9;
  v11 = *(_QWORD *)v8 + 112;
  do
  {
    *(_BYTE *)(v11 + 32) = 0;
    if (!*(_DWORD *)(v11 + 8))
      goto LABEL_22;
    if (*(_DWORD *)(v11 + 12))
      *(_DWORD *)(v11 + 12) = 0;
    this = *(_QWORD **)v11;
    if (v11 + 16 == *(_QWORD *)v11 || this == 0)
    {
      if (this)
        goto LABEL_22;
LABEL_21:
      *(_QWORD *)v11 = v11 + 16;
      *(_DWORD *)(v11 + 8) = 1;
      goto LABEL_22;
    }
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = *(_QWORD **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_21;
LABEL_22:
    v11 += 160;
    v10 -= 160;
  }
  while (v10);
LABEL_26:
  while (1)
  {
    v6 += 2;
    if (v6 == v7)
      break;
    if ((unint64_t)(*v6 + 1) > 1)
    {
      if (v6 != v7)
        goto LABEL_10;
      break;
    }
  }
LABEL_29:
  v13 = *(_QWORD *)(*(_QWORD *)(v3[3] + 8) + 528);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(WebCore::Page **)(v15 + 8);
        if (v16)
        {
          ++*(_DWORD *)v16;
          this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v16 + 6) + 16) + 1592))(*(_QWORD *)(*((_QWORD *)v16 + 6) + 16));
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::Page::~Page(v16);
            return (_QWORD *)WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::DocumentMarkerController::invalidateRectsForMarkersInNode(_QWORD *this, WebCore::Node *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  WebCore::Node *v8;
  int v10;
  WebCore::Node *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Page *v21;
  WTF *v22;
  void *v23;

  v2 = this[1];
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v4 = this;
    v5 = *(_DWORD *)(v2 - 8);
    this = (_QWORD *)WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
    v7 = this & v5;
    v8 = *(WebCore::Node **)(v2 + 16 * v7);
    if (v8 == (WebCore::Node *)-1 || v8 != a2)
    {
      v10 = 1;
      do
      {
        v7 = ((_DWORD)v7 + v10) & v5;
        v11 = *(WebCore::Node **)(v2 + 16 * v7);
        ++v10;
      }
      while (v11 == (WebCore::Node *)-1 || v11 != a2);
    }
    v13 = *(_QWORD *)(v2 + 16 * v7 + 8);
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14)
    {
      v15 = 160 * v14;
      v16 = *(_QWORD *)v13 + 112;
      do
      {
        *(_BYTE *)(v16 + 32) = 0;
        if (*(_DWORD *)(v16 + 8))
        {
          if (*(_DWORD *)(v16 + 12))
            *(_DWORD *)(v16 + 12) = 0;
          this = *(_QWORD **)v16;
          if (v16 + 16 != *(_QWORD *)v16 && this != 0)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree((WTF *)this, v6);
            this = *(_QWORD **)v16;
            if (*(_QWORD *)v16)
              goto LABEL_25;
LABEL_24:
            *(_QWORD *)v16 = v16 + 16;
            *(_DWORD *)(v16 + 8) = 1;
            goto LABEL_25;
          }
          if (!this)
            goto LABEL_24;
        }
LABEL_25:
        v16 += 160;
        v15 -= 160;
      }
      while (v15);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4[3] + 8) + 528);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 24);
        if (v20)
        {
          v21 = *(WebCore::Page **)(v20 + 8);
          if (v21)
          {
            ++*(_DWORD *)v21;
            this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v21 + 6) + 16) + 1592))(*(_QWORD *)(*((_QWORD *)v21 + 6) + 16));
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::Page::~Page(v21);
              return (_QWORD *)WTF::fastFree(v22, v23);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::DocumentMarkerController::updateRectsForInvalidatedMarkersOfType(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::Node *v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  WTF *v38;
  __int128 v39;
  uint64_t v40;
  WTF *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  WTF *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  WebCore::Node *v55;
  int v56;
  WebCore::Node *v57;
  int v58;
  WTF *v59;
  int v60;
  void *__src;
  int v62;
  unsigned int v63;

  v54 = result;
  if ((*(_DWORD *)(result + 16) & a2) == 0)
    return result;
  v2 = (int)a2;
  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(result + 8);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(result + 8);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_9:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
  if (v8 != v6)
  {
    v9 = 0;
    v53 = v8;
    while (1)
    {
      v10 = (uint64_t *)v6[1];
      v11 = *((_DWORD *)v10 + 3);
      if (v11)
        break;
LABEL_98:
      v52 = v6 + 2;
      v6 = v5;
      if (v52 != v5)
      {
        v6 = v52;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v6 == v53)
        return result;
    }
    v12 = *v10;
    v13 = *v10 + 160 * v11;
    while (*(_DWORD *)(v12 + 8) != v2 || *(_BYTE *)(v12 + 144))
    {
LABEL_86:
      v12 += 160;
      if (v12 == v13)
        goto LABEL_98;
    }
    if ((v9 & 1) == 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v54 + 24) + 8);
      *(_DWORD *)(v14 + 24) += 2;
      v15 = *(_QWORD *)(v14 + 528);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + 8);
          if (v19)
            v20 = *(_BYTE *)(v19 + 144) == 0;
          else
            v20 = 0;
          if (v20)
          {
            v21 = (unsigned int *)(v19 + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
            v23 = *(_DWORD **)(v19 + 288);
            if (v23)
            {
              ++v23[2];
              WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v23, 0);
              if (v23[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
              else
                --v23[2];
            }
            do
            {
              v24 = __ldaxr(v21);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v21));
            if (!v25)
            {
              atomic_store(1u, v21);
              v50 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v50 = off_1E31FE290;
              *((_QWORD *)v50 + 1) = v21;
              v55 = v50;
              WTF::ensureOnMainThread();
              v51 = v55;
              v55 = 0;
              if (v51)
                (*(void (**)(WebCore::Node *))(*(_QWORD *)v51 + 8))(v51);
            }
          }
          do
          {
            v26 = __ldaxr(v17);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v17));
          if (!v27)
          {
            atomic_store(1u, v17);
            v48 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v48 = off_1E31FE290;
            *((_QWORD *)v48 + 1) = v17;
            v55 = v48;
            WTF::ensureOnMainThread();
            v49 = v55;
            v55 = 0;
            if (v49)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v49 + 8))(v49);
          }
        }
      }
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    v28 = (WebCore::Node *)*v6;
    v29 = *(_DWORD *)(v12 + 12);
    v30 = *(_DWORD *)(v12 + 16);
    *((_DWORD *)v28 + 6) = *(_DWORD *)(*v6 + 24) + 4;
    v55 = v28;
    v56 = v29;
    v57 = v28;
    v58 = v30;
    WebCore::RenderObject::absoluteTextQuads((uint64_t *)&v55, 16, (uint64_t)&v59);
    result = WebCore::boundingBoxes((uint64_t)&v59, (uint64_t)&__src);
    *(_BYTE *)(v12 + 144) = 1;
    v31 = v63;
    if (*(unsigned int *)(v12 + 124) > (unint64_t)v63)
    {
      *(_DWORD *)(v12 + 124) = v63;
LABEL_69:
      v40 = *(_QWORD *)(v12 + 112);
      if (v31)
      {
        memmove(*(void **)(v12 + 112), __src, 16 * v31);
        v31 = *(unsigned int *)(v12 + 124);
        v40 = *(_QWORD *)(v12 + 112);
      }
      v41 = (WTF *)__src;
      if (v31 != v63)
      {
        v42 = (_OWORD *)(v40 + 16 * v31);
        v43 = (__int128 *)((char *)__src + 16 * v31);
        v44 = 16 * v63 - 16 * v31;
        do
        {
          v45 = *v43++;
          *v42++ = v45;
          v44 -= 16;
        }
        while (v44);
        LODWORD(v31) = v63;
        v41 = (WTF *)__src;
      }
      *(_DWORD *)(v12 + 124) = v31;
      if (v41)
      {
        __src = 0;
        v62 = 0;
        WTF::fastFree(v41, a2);
      }
      v46 = v59;
      if (v59)
      {
        v59 = 0;
        v60 = 0;
        WTF::fastFree(v46, a2);
      }
      v47 = v57;
      v57 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v47, a2);
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
      result = (uint64_t)v55;
      v55 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v9 = 1;
      goto LABEL_86;
    }
    if (v63 <= (unint64_t)*(unsigned int *)(v12 + 120))
      goto LABEL_68;
    if (*(_DWORD *)(v12 + 120))
    {
      if (*(_DWORD *)(v12 + 124))
        *(_DWORD *)(v12 + 124) = 0;
      result = *(_QWORD *)(v12 + 112);
      if (v12 + 128 != result && result)
      {
        *(_QWORD *)(v12 + 112) = 0;
        *(_DWORD *)(v12 + 120) = 0;
        WTF::fastFree((WTF *)result, a2);
        result = *(_QWORD *)(v12 + 112);
        if (result)
          goto LABEL_50;
      }
      else if (result)
      {
LABEL_50:
        v32 = *(_DWORD *)(v12 + 120);
        goto LABEL_55;
      }
      *(_QWORD *)(v12 + 112) = v12 + 128;
      v32 = 1;
      *(_DWORD *)(v12 + 120) = 1;
    }
    else
    {
      v32 = 0;
    }
LABEL_55:
    v33 = v63;
    if (v32 < v63)
    {
      v34 = *(WTF **)(v12 + 112);
      v35 = *(unsigned int *)(v12 + 124);
      if (v63 < 2)
      {
        v36 = (_OWORD *)(v12 + 128);
        *(_QWORD *)(v12 + 112) = v12 + 128;
        *(_DWORD *)(v12 + 120) = 1;
        if (!(_DWORD)v35)
          goto LABEL_63;
      }
      else
      {
        if (v63 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v36 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v63));
        *(_DWORD *)(v12 + 120) = v33;
        *(_QWORD *)(v12 + 112) = v36;
        if (!(_DWORD)v35)
          goto LABEL_63;
      }
      v37 = 16 * v35;
      v38 = v34;
      do
      {
        v39 = *(_OWORD *)v38;
        v38 = (WTF *)((char *)v38 + 16);
        *v36++ = v39;
        v37 -= 16;
      }
      while (v37);
LABEL_63:
      if ((WTF *)(v12 + 128) != v34 && v34)
      {
        if (*(WTF **)(v12 + 112) == v34)
        {
          *(_QWORD *)(v12 + 112) = 0;
          *(_DWORD *)(v12 + 120) = 0;
        }
        WTF::fastFree(v34, a2);
      }
    }
LABEL_68:
    v31 = *(unsigned int *)(v12 + 124);
    goto LABEL_69;
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::renderedRectsForMarkers@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::LocalFrameView *v10;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  const WebCore::IntRect *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _DWORD *v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  _DWORD *v38;
  __n128 *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  uint64_t v61;
  int v63;
  _QWORD *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  WebCore::LocalFrameView *v68;
  unsigned int *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE v75[16];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if ((*(_DWORD *)(result + 16) & a2) == 0)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 528);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return result;
  v7 = (int)a2;
  v8 = (unsigned int *)(v6 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(WebCore::LocalFrameView **)(v6 + 288);
  if (v10)
  {
    ++*((_DWORD *)v10 + 2);
    WebCore::DocumentMarkerController::updateRectsForInvalidatedMarkersOfType(result, a2);
    v71 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
    if (v71 == v6)
    {
      v16 = 0;
      v15 = 0;
    }
    else
    {
      v73 = (_BYTE *)WebCore::LocalFrameView::windowClipRect(v10);
      v74 = v13;
      v15 = WebCore::ScrollView::windowToContents((WebCore::Widget **)v10, (const WebCore::IntRect *)&v73, v14);
    }
    v68 = v10;
    v72 = v6;
    v17 = *(_QWORD *)(v4 + 8);
    if (v17)
    {
      v18 = *(unsigned int *)(v17 - 4);
      v19 = (_QWORD *)(v17 + 16 * v18);
      if (*(_DWORD *)(v17 - 12))
      {
        v20 = *(_QWORD **)(v4 + 8);
        if ((_DWORD)v18)
        {
          v21 = 16 * v18;
          v20 = *(_QWORD **)(v4 + 8);
          while ((unint64_t)(*v20 + 1) <= 1)
          {
            v20 += 2;
            v21 -= 16;
            if (!v21)
            {
              v20 = v19;
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
      v20 = (_QWORD *)(v17 + 16 * v18);
    }
    else
    {
      v20 = 0;
      v18 = 0;
    }
    v19 = (_QWORD *)(v17 + 16 * v18);
LABEL_20:
    v69 = (unsigned int *)(v6 + 8);
    if (v17)
      v22 = (_QWORD *)(v17 + 16 * *(unsigned int *)(v17 - 4));
    else
      v22 = 0;
    if (v22 != v20)
    {
      v23 = (float)(int)v15;
      v24 = (float)SHIDWORD(v15);
      v25 = (float)(int)v16 + (float)(int)v15;
      v26 = (float)SHIDWORD(v16) + (float)SHIDWORD(v15);
      v70 = v22;
      while (1)
      {
        v27 = (_DWORD *)(*(_QWORD *)(*v20 + 64) & 0xFFFFFFFFFFFFLL);
        if (v27)
        {
          ++*(_DWORD *)((*(_QWORD *)(*v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          v28 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)v27 + 440))(v27, 0, 0xC00000000);
          v29 = (float)(int)v28 * 0.015625;
          v30 = (float)SHIDWORD(v28) * 0.015625;
          v11.n128_f32[0] = (float)(int)v16 * 0.015625;
          v12.n128_f32[0] = (float)SHIDWORD(v16) * 0.015625;
        }
        else
        {
          v11.n128_u32[0] = 0;
          v12.n128_u32[0] = 0;
          v30 = 0.0;
          v29 = 0.0;
        }
        v31 = (uint64_t *)v20[1];
        v32 = *((_DWORD *)v31 + 3);
        if (v32)
          break;
LABEL_92:
        if (v27)
        {
          v63 = v27[4];
          if (!v63)
          {
LABEL_113:
            __break(0xC471u);
            JUMPOUT(0x1959A80BCLL);
          }
          v27[4] = v63 - 1;
        }
        v64 = v20 + 2;
        v20 = v19;
        if (v64 != v19)
        {
          v20 = v64;
          while ((unint64_t)(*v20 + 1) <= 1)
          {
            v20 += 2;
            if (v20 == v19)
            {
              v20 = v19;
              break;
            }
          }
        }
        if (v20 == v70)
          goto LABEL_103;
      }
      v33 = *v31;
      v34 = *v31 + 160 * v32;
      v35 = v11.n128_f32[0] + v29;
      v36 = v12.n128_f32[0] + v30;
      while (*(_DWORD *)(v33 + 8) != v7)
      {
LABEL_91:
        v33 += 160;
        if (v33 == v34)
          goto LABEL_92;
      }
      v37 = *(unsigned int *)(v33 + 124);
      v73 = v75;
      LODWORD(v74) = 1;
      HIDWORD(v74) = v37;
      if (v37 < 2)
      {
        v38 = v75;
        if (!(_DWORD)v37)
          goto LABEL_38;
      }
      else
      {
        if (v37 >> 28)
          goto LABEL_113;
        v38 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * v37));
        LODWORD(v74) = v37;
        v73 = v38;
        v37 = *(unsigned int *)(v33 + 124);
        if (!(_DWORD)v37)
        {
LABEL_38:
          v42 = HIDWORD(v74);
          if (v27)
          {
            if (!HIDWORD(v74))
              goto LABEL_86;
            v43 = (float *)&v38[4 * HIDWORD(v74)];
            v44 = (float *)v38;
            do
            {
              v45 = v44[1];
              if (*v44 >= v29)
                v46 = *v44;
              else
                v46 = v29;
              v47 = *v44 + v44[2];
              if (v45 >= v30)
                v48 = v44[1];
              else
                v48 = v30;
              if (v35 < v47)
                v47 = v35;
              v49 = v45 + v44[3];
              if (v36 < v49)
                v49 = v36;
              if (v46 >= v47 || v48 >= v49)
              {
                v46 = 0.0;
                v48 = 0.0;
                v47 = 0.0;
                v49 = 0.0;
              }
              *v44 = v46;
              v44[1] = v48;
              v11.n128_f32[0] = v47 - v46;
              v12.n128_f32[0] = v49 - v48;
              v44[2] = v11.n128_f32[0];
              v44[3] = v12.n128_f32[0];
              v44 += 4;
            }
            while (v44 != v43);
          }
          if (v71 == v72)
          {
LABEL_76:
            if ((_DWORD)v42)
            {
              v58 = 16 * v42;
              do
              {
                v11.n128_u32[0] = v38[2];
                if (v11.n128_f32[0] > 0.0)
                {
                  v11.n128_u32[0] = v38[3];
                  if (v11.n128_f32[0] > 0.0)
                  {
                    v59 = *(unsigned int *)(a3 + 12);
                    if ((_DWORD)v59 == *(_DWORD *)(a3 + 8))
                    {
                      v60 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v59 + 1, (unint64_t)v38);
                      v59 = *(unsigned int *)(a3 + 12);
                      v61 = *(_QWORD *)a3;
                      v11 = *v60;
                    }
                    else
                    {
                      v61 = *(_QWORD *)a3;
                      v11 = *(__n128 *)v38;
                    }
                    *(__n128 *)(v61 + 16 * v59) = v11;
                    ++*(_DWORD *)(a3 + 12);
                  }
                }
                v38 += 4;
                v58 -= 16;
              }
              while (v58);
              v38 = v73;
            }
            goto LABEL_86;
          }
          if ((_DWORD)v42)
          {
            v51 = (float *)v38;
            do
            {
              v52 = v51[1];
              if (*v51 >= v23)
                v53 = *v51;
              else
                v53 = v23;
              v54 = *v51 + v51[2];
              if (v52 >= v24)
                v55 = v51[1];
              else
                v55 = v24;
              if (v25 < v54)
                v54 = v25;
              v56 = v52 + v51[3];
              if (v26 < v56)
                v56 = v26;
              if (v53 >= v54 || v55 >= v56)
              {
                v53 = 0.0;
                v55 = 0.0;
                v54 = 0.0;
                v56 = 0.0;
              }
              *v51 = v53;
              v51[1] = v55;
              v11.n128_f32[0] = v54 - v53;
              v12.n128_f32[0] = v56 - v55;
              v51[2] = v11.n128_f32[0];
              v51[3] = v12.n128_f32[0];
              v51 += 4;
            }
            while (v51 != (float *)&v38[4 * v42]);
            goto LABEL_76;
          }
LABEL_86:
          if (v75 != (_BYTE *)v38 && v38 != 0)
          {
            v73 = 0;
            LODWORD(v74) = 0;
            WTF::fastFree((WTF *)v38, v16);
          }
          goto LABEL_91;
        }
      }
      v39 = *(__n128 **)(v33 + 112);
      v40 = 16 * v37;
      do
      {
        v41 = *v39++;
        v11 = v41;
        *(__n128 *)v38 = v41;
        v38 += 4;
        v40 -= 16;
      }
      while (v40);
      v38 = v73;
      goto LABEL_38;
    }
LABEL_103:
    result = (uint64_t)v68;
    if (*((_DWORD *)v68 + 2) == 1)
      result = (*(uint64_t (**)(WebCore::LocalFrameView *, __n128, __n128))(*(_QWORD *)v68 + 8))(v68, v11, v12);
    else
      --*((_DWORD *)v68 + 2);
    v8 = v69;
    goto LABEL_106;
  }
  do
  {
LABEL_106:
    v65 = __ldaxr(v8);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v8));
  if (!v66)
  {
    atomic_store(1u, v8);
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v67 = off_1E31FE290;
    v67[1] = v8;
    v73 = v67;
    WTF::ensureOnMainThread();
    result = (uint64_t)v73;
    v73 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

__n128 WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __n128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __n128 **v13;
  __n128 *v14;
  unsigned __int32 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __n128 *v19;
  unsigned __int32 v20;
  __n128 result;
  char v22;

  v3 = (__n128 *)a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = (__n128 *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)a1 + 160 * a2;
  WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)v8, (WTF *)(*(_QWORD *)a1 + 160 * v6), v8 + 160);
  *(_QWORD *)v8 = 0;
  v9 = v3->n128_u64[1];
  *(_DWORD *)(v8 + 16) = v3[1].n128_u32[0];
  *(_QWORD *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 96) = -1;
  v10 = v3[6].n128_u32[0];
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *, uint64_t, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v10])(&v22, v8 + 32, &v3[2]);
    *(_DWORD *)(v8 + 96) = v10;
  }
  v11 = v7 + 160 * a2;
  v12 = (_OWORD *)(v11 + 128);
  *(_QWORD *)(v11 + 112) = v11 + 128;
  v13 = (__n128 **)(v11 + 112);
  v13[1] = (__n128 *)1;
  v14 = (__n128 *)v3[7].n128_u64[0];
  if (v14 == &v3[8])
  {
    v16 = v3[7].n128_u32[3];
    if ((_DWORD)v16)
    {
      v17 = 16 * v16;
      do
      {
        v18 = (__int128)*v14++;
        *v12++ = v18;
        v17 -= 16;
      }
      while (v17);
    }
  }
  else
  {
    v3[7].n128_u64[0] = (unint64_t)v3[8].n128_u64;
    *v13 = v14;
    v15 = v3[7].n128_u32[2];
    v3[7].n128_u32[2] = 1;
    *((_DWORD *)v13 + 2) = v15;
  }
  v19 = (__n128 *)(v7 + 160 * a2);
  v20 = v3[7].n128_u32[3];
  v3[7].n128_u32[3] = 0;
  v19[7].n128_u32[3] = v20;
  result = v3[9];
  v19[9] = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::DocumentMarkerController::copyMarkers(uint64_t result, uint64_t a2, unint64_t a3, WebCore::Node *a4)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  void *v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  _BYTE v33[20];
  __int128 v34;
  unsigned int v35;
  _BYTE v36[64];
  int v37;
  WTF *v38;
  int v39;
  int v40;
  _OWORD v41[2];
  uint64_t v42;

  v4 = a3;
  v42 = *MEMORY[0x1E0C80C00];
  v5 = HIDWORD(a3);
  if (a3 < HIDWORD(a3))
  {
    v6 = (uint64_t *)result;
    if ((*(_DWORD *)(result + 16) & 0x37FFF) != 0)
    {
      v7 = *(_QWORD *)(result + 8);
      if (v7)
      {
        v10 = *(_DWORD *)(v7 - 8);
        result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
        for (i = 0; ; result = (i + v12))
        {
          v12 = result & v10;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          if (v13 != -1)
          {
            if (!v13)
              return result;
            if (v13 == a2)
              break;
          }
          ++i;
        }
        v14 = *(uint64_t **)(v7 + 16 * v12 + 8);
        if (v14)
        {
          v15 = *((_DWORD *)v14 + 3);
          if (v15)
          {
            v16 = 0;
            v17 = *v14;
            v18 = *v14 + 160 * v15;
            do
            {
              if (*(_DWORD *)(v17 + 12) >= v5)
                break;
              if (*(_DWORD *)(v17 + 16) >= v4)
              {
                *(_QWORD *)&v34 = 0;
                v19 = *(_DWORD *)(v17 + 16);
                *((_QWORD *)&v34 + 1) = *(_QWORD *)(v17 + 8);
                v35 = v19;
                v36[0] = 0;
                v37 = -1;
                v20 = *(unsigned int *)(v17 + 96);
                if ((_DWORD)v20 != -1)
                {
                  ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E33A3518[v20])(v33, v36, v17 + 32);
                  v37 = v20;
                }
                v21 = *(unsigned int *)(v17 + 124);
                v38 = (WTF *)v41;
                v39 = 1;
                v40 = v21;
                v22 = (WTF *)v41;
                if (v21 >= 2)
                {
                  if (v21 >> 28)
                    goto LABEL_45;
                  v22 = (WTF *)WTF::fastMalloc((WTF *)(16 * v21));
                  v39 = v21;
                  v38 = v22;
                }
                v23 = *(unsigned int *)(v17 + 124);
                if ((_DWORD)v23)
                {
                  v24 = *(__int128 **)(v17 + 112);
                  v25 = 16 * v23;
                  do
                  {
                    v26 = *v24++;
                    *(_OWORD *)v22 = v26;
                    v22 = (WTF *)((char *)v22 + 16);
                    v25 -= 16;
                  }
                  while (v25);
                }
                v41[1] = *(_OWORD *)(v17 + 144);
                if (HIDWORD(v34) < v4)
                  HIDWORD(v34) = v4;
                if (v35 >= v5)
                  v35 = v5;
                WebCore::DocumentMarkerController::addMarker(v6, a4, &v34);
                v28 = v38;
                if (v41 != (_OWORD *)v38 && v38)
                {
                  v38 = 0;
                  v39 = 0;
                  WTF::fastFree(v28, v27);
                }
                if (v37 != -1)
                  ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v37])(v33, v36);
                v37 = -1;
                result = v34;
                if ((_QWORD)v34)
                {
                  *(_QWORD *)(v34 + 8) = 0;
                  *(_QWORD *)&v34 = 0;
                  do
                  {
                    v29 = __ldaxr((unsigned int *)result);
                    v30 = v29 - 1;
                  }
                  while (__stlxr(v30, (unsigned int *)result));
                  if (!v30)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    result = WTF::fastFree((WTF *)result, v27);
                  }
                }
                v16 = 1;
              }
              v17 += 160;
            }
            while (v17 != v18);
            if ((v16 & 1) != 0)
            {
              v31 = *((_QWORD *)a4 + 8) & 0xFFFFFFFFFFFFLL;
              if (v31)
              {
                v32 = *(_DWORD *)(v31 + 16) + 1;
                *(_DWORD *)(v31 + 16) = v32;
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8)
                                                                                           + 1944)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 3382))
                {
                  LOBYTE(v34) = 0;
                  LOBYTE(v35) = 0;
                  v33[0] = 0;
                  v33[16] = 0;
                  result = WebCore::RenderObject::issueRepaint(v31, &v34, 0, 0, (uint64_t)v33);
                  v32 = *(_DWORD *)(v31 + 16);
                }
                if (!v32)
                {
LABEL_45:
                  __break(0xC471u);
                  JUMPOUT(0x1959A85ACLL);
                }
                *(_DWORD *)(v31 + 16) = v32 - 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::markerContainingPoint@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  _QWORD *v24;
  uint64_t result;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  if ((*(_DWORD *)(a1 + 16) & a3) == 0)
  {
LABEL_33:
    result = 0;
    goto LABEL_41;
  }
  v5 = (int)a3;
  WebCore::DocumentMarkerController::updateRectsForInvalidatedMarkersOfType(a1, a3);
  v8 = *(_QWORD **)(a1 + 8);
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
LABEL_11:
    v10 = &v8[2 * v9];
    goto LABEL_12;
  }
  v9 = *((unsigned int *)v8 - 1);
  v10 = &v8[2 * v9];
  if (!*((_DWORD *)v8 - 3))
  {
    v11 = &v8[2 * v9];
    goto LABEL_11;
  }
  v11 = *(_QWORD **)(a1 + 8);
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v11 = *(_QWORD **)(a1 + 8);
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v12 -= 16;
      if (!v12)
      {
        v11 = v10;
        break;
      }
    }
  }
LABEL_12:
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  if (v8 == v11)
    goto LABEL_33;
  v13 = (float)*a2 * 0.015625;
  v14 = (float)a2[1] * 0.015625;
  while (1)
  {
    v15 = (uint64_t *)v11[1];
    v16 = *((_DWORD *)v15 + 3);
    if (v16)
      break;
LABEL_27:
    v24 = v11 + 2;
    v11 = v10;
    if (v24 != v10)
    {
      v11 = v24;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 2;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
    if (v11 == v8)
      goto LABEL_33;
  }
  v17 = *v15;
  v18 = *v15 + 160 * v16;
  while (1)
  {
    if (*(_DWORD *)(v17 + 8) == v5)
    {
      v19 = *(unsigned int *)(v17 + 124);
      if ((_DWORD)v19)
        break;
    }
LABEL_26:
    v17 += 160;
    if (v17 == v18)
      goto LABEL_27;
  }
  v20 = (float *)(*(_QWORD *)(v17 + 112) + 8);
  v21 = 16 * v19;
  while (1)
  {
    v22 = *(v20 - 2);
    if (v22 <= v13 && (float)(v22 + *v20) >= v13)
    {
      v23 = *(v20 - 1);
      if (v23 <= v14 && (float)(v23 + v20[1]) >= v14)
        break;
    }
    v20 += 4;
    v21 -= 16;
    if (!v21)
      goto LABEL_26;
  }
  result = *(_QWORD *)v17;
  if (*(_QWORD *)v17)
    goto LABEL_44;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v17;
  v27 = *(unsigned int **)v17;
  *(_QWORD *)v17 = result;
  if (!v27)
    goto LABEL_44;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v26);
  }
  result = *(_QWORD *)v17;
  if (*(_QWORD *)v17)
  {
LABEL_44:
    do
      v30 = __ldaxr((unsigned int *)result);
    while (__stlxr(v30 + 1, (unsigned int *)result));
  }
LABEL_41:
  *a4 = result;
  return result;
}

uint64_t WebCore::DocumentMarkerController::markersFor@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v6 = *(_DWORD *)(result + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if ((v6 & a3) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (v7)
    {
      v9 = *(_DWORD *)(v7 - 8);
      result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
      for (i = 0; ; result = (i + v11))
      {
        v11 = result & v9;
        v12 = *(_QWORD *)(v7 + 16 * v11);
        if (v12 != -1)
        {
          if (!v12)
            return result;
          if (v12 == a2)
            break;
        }
        ++i;
      }
      v13 = *(uint64_t **)(v7 + 16 * v11 + 8);
      if (v13)
      {
        v14 = *((_DWORD *)v13 + 3);
        if (v14)
        {
          v15 = 0;
          v16 = *v13;
          v17 = *v13 + 160 * v14;
          do
          {
            if ((*(_DWORD *)(v16 + 8) & a3) != 0)
            {
              v18 = v15;
              if (v15 == *(_DWORD *)(a4 + 8))
              {
                WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v15 + 1);
                v18 = *(unsigned int *)(a4 + 12);
                v19 = *(_QWORD *)a4;
                result = *(_QWORD *)v16;
                if (*(_QWORD *)v16)
                  goto LABEL_32;
                result = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)result = 1;
                *(_QWORD *)(result + 8) = v16;
                v21 = *(unsigned int **)v16;
                *(_QWORD *)v16 = result;
                if (!v21)
                  goto LABEL_32;
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  atomic_store(1u, v21);
                  WTF::fastFree((WTF *)v21, v20);
                }
                result = *(_QWORD *)v16;
                if (*(_QWORD *)v16)
                {
LABEL_32:
                  do
                    v24 = __ldaxr((unsigned int *)result);
                  while (__stlxr(v24 + 1, (unsigned int *)result));
                }
              }
              else
              {
                v19 = *(_QWORD *)a4;
                result = *(_QWORD *)v16;
                if (*(_QWORD *)v16)
                  goto LABEL_33;
                result = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)result = 1;
                *(_QWORD *)(result + 8) = v16;
                v26 = *(unsigned int **)v16;
                *(_QWORD *)v16 = result;
                if (!v26)
                  goto LABEL_33;
                do
                {
                  v27 = __ldaxr(v26);
                  v28 = v27 - 1;
                }
                while (__stlxr(v28, v26));
                if (!v28)
                {
                  atomic_store(1u, v26);
                  WTF::fastFree((WTF *)v26, v25);
                }
                result = *(_QWORD *)v16;
                if (*(_QWORD *)v16)
                {
LABEL_33:
                  do
                    v29 = __ldaxr((unsigned int *)result);
                  while (__stlxr(v29 + 1, (unsigned int *)result));
                }
              }
              *(_QWORD *)(v19 + 8 * v18) = result;
              v15 = *(_DWORD *)(a4 + 12) + 1;
              *(_DWORD *)(a4 + 12) = v15;
            }
            v16 += 160;
          }
          while (v16 != v17);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(uint64_t result, uint64_t *a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  if ((*(_DWORD *)(result + 16) & a3) != 0)
  {
    v7 = result;
    v8 = *a2;
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(*a2 + 24) + 2;
    v24 = v8;
    v27 = v8;
    v28 = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    *(_DWORD *)(v9 + 24) += 2;
    v29 = v9;
    v30 = *((_DWORD *)a2 + 6);
    WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v25, (const WebCore::SimpleRange *)&v27);
    while (1)
    {
      v10 = v25;
      if (!v25)
        break;
      v11 = *(_QWORD *)(v7 + 8);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        v13 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v25);
        for (i = 0; ; v13 = i + v15)
        {
          v15 = v13 & v12;
          v16 = *(_QWORD *)(v11 + 16 * v15);
          if (v16 != -1)
          {
            if (!v16)
              goto LABEL_24;
            if (v16 == v10)
              break;
          }
          ++i;
        }
        v17 = *(_QWORD *)(v11 + 16 * v15 + 8);
        if (v17)
        {
          v18 = *a2 == v10 ? *((_DWORD *)a2 + 2) : 0;
          v19 = a2[2] == v10 ? *((_DWORD *)a2 + 6) : -1;
          v20 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(_DWORD **)v17;
            v22 = 160 * v20;
            while (v21[3] < v19)
            {
              if (v21[4] > v18
                && (v21[2] & a3) != 0
                && ((*(uint64_t (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*a4 + 16))(*a4, v10, v21) & 1) != 0)
              {
                goto LABEL_25;
              }
              v21 += 40;
              v22 -= 160;
              if (!v22)
                break;
            }
          }
        }
      }
LABEL_24:
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v25);
    }
LABEL_25:
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    if (v24)
    {
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v24);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)1>(uint64_t result, uint64_t *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  int v11;
  uint64_t v12;
  char *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::Node *v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WTF *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  uint64_t v42;

  if ((*(_DWORD *)(result + 16) & a3) == 0)
    return result;
  v6 = result;
  v41 = 0;
  v42 = 0;
  v7 = *a2;
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(*a2 + 24) + 2;
  v36 = (WTF *)v7;
  v37 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  *(_DWORD *)(v8 + 24) += 2;
  v39 = v8;
  v40 = *((_DWORD *)a2 + 6);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v34, (const WebCore::SimpleRange *)&v36);
  while (1)
  {
    v10 = v34;
    if (!v34)
      break;
    v11 = *((_DWORD *)v34 + 6);
    *((_DWORD *)v34 + 6) = v11 + 2;
    v33 = v10;
    v12 = HIDWORD(v42);
    if (HIDWORD(v42) == (_DWORD)v42)
    {
      v13 = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v41, HIDWORD(v42) + 1, (unint64_t)&v33);
      v12 = HIDWORD(v42);
      v14 = v41;
      v15 = *(_QWORD *)v13;
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(*(_QWORD *)v13 + 24) + 2;
      *((_QWORD *)v14 + v12) = v15;
    }
    else
    {
      v16 = v41;
      *((_DWORD *)v10 + 6) = v11 + 4;
      *((_QWORD *)v16 + v12) = v10;
    }
    HIDWORD(v42) = v12 + 1;
    v17 = v33;
    v33 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v9);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v34);
  }
  result = (uint64_t)v35;
  v35 = 0;
  if (result)
  {
    v18 = *(_DWORD *)(result + 24) - 2;
    if (*(_DWORD *)(result + 24) != 2)
    {
LABEL_15:
      *(_DWORD *)(result + 24) = v18;
      goto LABEL_16;
    }
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
      result = (uint64_t)v34;
      v34 = 0;
      if (result)
      {
        v18 = *(_DWORD *)(result + 24) - 2;
        if (*(_DWORD *)(result + 24) != 2)
          goto LABEL_15;
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
      }
    }
  }
LABEL_16:
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v19 = v41;
  if (!HIDWORD(v42))
  {
LABEL_60:
    if (!v19)
      return result;
    goto LABEL_61;
  }
  v19 = (WTF *)((char *)v41 + 8 * HIDWORD(v42));
  do
  {
    v21 = *((_QWORD *)v19 - 1);
    v19 = (WTF *)((char *)v19 - 8);
    v20 = v21;
    *(_DWORD *)(v21 + 24) += 2;
    result = WebCore::DocumentMarkerController::markersFor(v6, v21, a3, (uint64_t)&v36);
    v22 = v36;
    if (!v38)
    {
      v26 = 7;
      goto LABEL_49;
    }
    v22 = (WTF *)((char *)v36 + 8 * v38);
    while (1)
    {
      v24 = *((_QWORD *)v22 - 1);
      v22 = (WTF *)((char *)v22 - 8);
      v23 = v24;
      if (!v24)
        goto LABEL_35;
      do
        v25 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v25 + 1, (unsigned int *)v23));
      if (*(_QWORD *)(v23 + 8))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v20);
        v26 = result;
      }
      else
      {
        v26 = 9;
      }
      do
      {
        v27 = __ldaxr((unsigned int *)v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v23));
      if (!v28)
        break;
      if (v26)
        goto LABEL_34;
LABEL_35:
      if (v22 == v36)
      {
        v26 = 7;
        goto LABEL_41;
      }
    }
    atomic_store(1u, (unsigned int *)v23);
    result = WTF::fastFree((WTF *)v23, v9);
    if (!v26)
      goto LABEL_35;
LABEL_34:
    if (v26 == 9)
      goto LABEL_35;
    v22 = v36;
LABEL_41:
    if (v38)
    {
      v29 = (WTF *)((char *)v22 + 8 * v38);
      do
      {
        result = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (result)
        {
          do
          {
            v30 = __ldaxr((unsigned int *)result);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, (unsigned int *)result));
          if (!v31)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v9);
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
      }
      while (v22 != v29);
      v22 = v36;
    }
LABEL_49:
    if (v22)
    {
      v36 = 0;
      v37 = 0;
      result = WTF::fastFree(v22, v9);
    }
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v20, v9);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    if (v26 != 7)
    {
      v19 = v41;
      break;
    }
  }
  while (v19 != v41);
  if (!HIDWORD(v42))
    goto LABEL_60;
  v32 = 8 * HIDWORD(v42);
  do
  {
    result = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    v19 = (WTF *)((char *)v19 + 8);
    v32 -= 8;
  }
  while (v32);
  v19 = v41;
  if (v41)
  {
LABEL_61:
    v41 = 0;
    LODWORD(v42) = 0;
    return WTF::fastFree(v19, v9);
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::forEachOfTypes(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((*(_DWORD *)(result + 16) & a2) == 0)
    return result;
  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (_QWORD *)(v5 + 16 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      v8 = *(_QWORD **)(result + 8);
      if ((_DWORD)v6)
      {
        v9 = 16 * v6;
        v8 = *(_QWORD **)(result + 8);
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v8 = (_QWORD *)(v5 + 16 * v6);
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = (_QWORD *)(v5 + 16 * v6);
  if (v5)
  {
LABEL_9:
    v10 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_14;
  }
  v10 = 0;
LABEL_14:
  while (v8 != v10)
  {
    v11 = (uint64_t *)v8[1];
    v12 = *((unsigned int *)v11 + 3);
    if ((_DWORD)v12)
    {
      v13 = *v11;
      v14 = 160 * v12;
      do
      {
        if ((*(_DWORD *)(v13 + 8) & a2) != 0)
        {
          v15 = *v8;
          *(_DWORD *)(v15 + 24) = *(_DWORD *)(*v8 + 24) + 2;
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v15, v13);
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        v13 += 160;
        v14 -= 160;
      }
      while (v14);
    }
    v16 = v8 + 2;
    v8 = v7;
    if (v16 != v7)
    {
      v8 = v16;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::markersInRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v10;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E33A3BE8;
  v8[1] = a4;
  v10 = v8;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(a1, a2, a3, &v10);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

uint64_t WebCore::DocumentMarkerController::rangesForMarkersInRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v10;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E33A3C10;
  v8[1] = a4;
  v10 = v8;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(a1, a2, a3, &v10);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

uint64_t WebCore::DocumentMarkerController::removeMarkersFromList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unsigned int **v20;
  WTF *v21;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  _BYTE v34[20];
  __int128 v35;
  char v36;

  v5 = a4;
  v7 = a1;
  v8 = 229375;
  if ((_DWORD)a4 == 229375 && *a5 == 0)
  {
    v27 = *(_QWORD *)(*a2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v27)
    {
      v28 = 1;
      goto LABEL_35;
    }
    goto LABEL_43;
  }
  v10 = a2[1];
  v11 = *(unsigned int *)(v10 + 12);
  if (!(_DWORD)v11)
  {
    v8 = a4;
    goto LABEL_43;
  }
  v13 = 0;
  v14 = 0;
  LODWORD(v15) = *(_DWORD *)(v10 + 12);
  v8 = a4;
LABEL_7:
  v16 = 160 * v14;
  do
  {
    if (v14 >= v11)
    {
      __break(0xC471u);
LABEL_56:
      JUMPOUT(0x1959A950CLL);
    }
    v17 = *(_QWORD *)v10;
    v18 = (_DWORD *)(*(_QWORD *)v10 + v16);
    v19 = v18[2];
    if ((v19 & v5) != 0)
    {
      if (!*a5)
        goto LABEL_16;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 16))(*a5))
      {
        v17 = *(_QWORD *)v10;
LABEL_16:
        v20 = (unsigned int **)(v17 + v16);
        v21 = *(WTF **)(v17 + v16 + 112);
        if ((WTF *)(v17 + v16 + 128) != v21 && v21 != 0)
        {
          v20[14] = 0;
          *((_DWORD *)v20 + 30) = 0;
          WTF::fastFree(v21, v18);
        }
        v23 = *((unsigned int *)v20 + 24);
        if ((_DWORD)v23 != -1)
          ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v23])(&v35, v17 + v16 + 32);
        *((_DWORD *)v20 + 24) = -1;
        if (*v20)
        {
          *((_QWORD *)*v20 + 1) = 0;
          v24 = *v20;
          *v20 = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v18);
            }
          }
        }
        else
        {
          *v20 = 0;
        }
        WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping((WTF *)(v17 + v16 + 160), (WTF *)(*(_QWORD *)v10 + 160 * *(unsigned int *)(v10 + 12)), v17 + v16);
        v15 = (*(_DWORD *)(v10 + 12) - 1);
        *(_DWORD *)(v10 + 12) = v15;
        v13 = 1;
        v11 = v15;
        if (v15 == v14)
        {
          v28 = (_DWORD)v15 == 0;
          goto LABEL_34;
        }
        goto LABEL_7;
      }
      v8 = v8 & ~v19;
      LODWORD(v15) = *(_DWORD *)(v10 + 12);
    }
    ++v14;
    v11 = v15;
    v16 += 160;
  }
  while (v14 != v15);
  v28 = (_DWORD)v15 == 0;
  if ((v13 & 1) == 0)
  {
    v7 = a1;
    if ((_DWORD)v15)
      return v8;
LABEL_43:
    v30 = *(_QWORD *)(v7 + 8);
    if (v30)
    {
      v31 = (uint64_t *)(v30 + 16 * *(unsigned int *)(v30 - 4));
      if (v31 == a2)
      {
LABEL_51:
        if (*(_DWORD *)(v30 - 12))
          return v8;
LABEL_52:
        *(_DWORD *)(v7 + 16) = 0;
        return v8;
      }
    }
    else
    {
      if (!a2)
        goto LABEL_52;
      v31 = 0;
    }
    if (v31 != a2)
    {
      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::remove((uint64_t *)(v7 + 8), a2);
      v30 = *(_QWORD *)(v7 + 8);
    }
    if (!v30)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_34:
  v7 = a1;
  v27 = *(_QWORD *)(*a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v27)
    goto LABEL_39;
LABEL_35:
  v29 = *(_DWORD *)(v27 + 16) + 1;
  *(_DWORD *)(v27 + 16) = v29;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v35) = 0;
    v36 = 0;
    v34[0] = 0;
    v34[16] = 0;
    WebCore::RenderObject::issueRepaint(v27, &v35, 0, 0, (uint64_t)v34);
    v29 = *(_DWORD *)(v27 + 16);
  }
  if (!v29)
  {
    __break(0xC471u);
    goto LABEL_56;
  }
  *(_DWORD *)(v27 + 16) = v29 - 1;
LABEL_39:
  if (v28)
    goto LABEL_43;
  return v8;
}

uint64_t WebCore::DocumentMarkerController::removeMarkers(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = 0;
  return WebCore::DocumentMarkerController::removeMarkers(a1, (void *)a2, &v3);
}

uint64_t WebCore::DocumentMarkerController::removeMarkers(uint64_t result, void *a2, _QWORD *a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v3 = a2;
  if ((*(_DWORD *)(result + 16) & a2) == 0)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (uint64_t *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(uint64_t **)(result + 8);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(uint64_t **)(result + 8);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v9 = (uint64_t *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (uint64_t *)(v6 + 16 * v7);
  if (!v6)
  {
    v11 = 0;
    goto LABEL_16;
  }
LABEL_9:
  v11 = (uint64_t *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  v12 = *(unsigned int *)(v6 - 12);
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v12));
    v13 = (WTF *)result;
    goto LABEL_17;
  }
LABEL_16:
  v13 = 0;
LABEL_17:
  if (v11 != v9)
  {
    v14 = 0;
    v15 = v3;
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = v9 + 2;
      v19 = *v9;
      *(_DWORD *)(v19 + 24) = *(_DWORD *)(*v9 + 24) + 2;
      *((_QWORD *)v13 + v14) = v19;
      v9 = v8;
      if (v18 != v8)
      {
        v9 = v18;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      ++v14;
      v16 = v17 + 1;
    }
    while (v9 != v11);
    if (v14)
    {
      v20 = (WTF *)((char *)v13 + 8 * v14);
      v21 = v13;
      do
      {
        v22 = *(_QWORD *)(v5 + 8);
        if (v22)
        {
          v23 = *(_DWORD *)(v22 - 8);
          v24 = ~(*(_QWORD *)v21 << 32) + *(_QWORD *)v21;
          v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
          v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
          v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
          for (i = 1; ; ++i)
          {
            v29 = v27;
            v30 = *(_QWORD *)(v22 + 16 * v27);
            if (v30 != -1)
            {
              if (!v30)
              {
                v31 = (uint64_t *)(v22 + 16 * *(unsigned int *)(v22 - 4));
                v32 = (uint64_t)v31;
                goto LABEL_36;
              }
              if (v30 == *(_QWORD *)v21)
                break;
            }
            v27 = (v29 + i) & v23;
          }
          v31 = (uint64_t *)(v22 + 16 * v29);
          v32 = v22 + 16 * *(unsigned int *)(v22 - 4);
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
LABEL_36:
        v3 &= WebCore::DocumentMarkerController::removeMarkersFromList(v5, v31, v32, v15, a3);
        v21 = (WTF *)((char *)v21 + 8);
      }
      while (v21 != v20);
      v33 = 8 * v17;
      v34 = (uint64_t *)v13;
      do
      {
        result = *v34;
        *v34 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        ++v34;
        v33 -= 8;
      }
      while (v33);
    }
  }
  if (v13)
    result = WTF::fastFree(v13, a2);
  if ((v3 & 0x10000) != 0 && (*(_QWORD *)(v5 + 120) & 0xFFFFFFFFFFFFLL) != 0)
    result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 88));
  *(_DWORD *)(v5 + 16) &= ~v3;
  return result;
}

uint64_t WebCore::DocumentMarkerController::repaintMarkers(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _BYTE v17[20];
  __int128 v18;
  char v19;

  if ((*(_DWORD *)(result + 16) & a2) == 0)
    return result;
  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(result + 8);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(result + 8);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_9:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
  while (v6 != v8)
  {
    v9 = (unsigned int *)v6[1];
    v10 = v9[3];
    if ((_DWORD)v10)
    {
      v11 = (int *)(*(_QWORD *)v9 + 8);
      v12 = 160 * v10;
      while (1)
      {
        v13 = *v11;
        v11 += 40;
        if ((v13 & a2) != 0)
          break;
        v12 -= 160;
        if (!v12)
          goto LABEL_25;
      }
      v14 = *(_QWORD *)(*v6 + 64) & 0xFFFFFFFFFFFFLL;
      if (v14)
      {
        ++*(_DWORD *)((*(_QWORD *)(*v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v18) = 0;
          v19 = 0;
          v17[0] = 0;
          v17[16] = 0;
          result = WebCore::RenderObject::issueRepaint(v14, &v18, 0, 0, (uint64_t)v17);
        }
        v15 = *(_DWORD *)(v14 + 16);
        if (!v15)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v14 + 16) = v15 - 1;
      }
    }
LABEL_25:
    v16 = v6 + 2;
    v6 = v5;
    if (v16 != v5)
    {
      v6 = v16;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentMarkerController::hasMarkers(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v8;
  unsigned __int8 v9;

  v9 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E33A3CD8;
  v6[1] = &v9;
  v8 = v6;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(a1, a2, a3, &v8);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return v9;
}

float WebCore::DocumentMarkerController::markerYPositionAndHeightForFont(WebCore::DocumentMarkerController *this, const WebCore::FontCascade *a2)
{
  int v3;
  float v4;
  float v5;

  v3 = *(_DWORD *)(WebCore::FontCascade::metricsOfPrimaryFont(this, a2) + 44);
  v4 = *((float *)this + 43);
  v5 = 40.0;
  if (v4 <= 40.0)
    v5 = *((float *)this + 43);
  if (v4 < 10.0)
    v5 = 10.0;
  return (double)v3 + v5 * 0.11035;
}

void WebCore::addMarker(const WebCore::SimpleRange *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  void *v8;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(uint64_t **)(v6 + 1496);
  if (!v7)
    v7 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v6);
  ++*(_DWORD *)v7;
  WebCore::DocumentMarkerController::addMarker(v7, a1, a2, a3);
  if (*(_DWORD *)v7)
  {
    --*(_DWORD *)v7;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

unsigned int *WebCore::addMarker(WebCore::Node *this, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  unsigned int *result;
  unsigned int v15;
  unsigned int v16;
  char v17;
  WTF *v18;
  int v19;
  unint64_t v20;
  _BYTE v21[64];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(uint64_t **)(v10 + 1496);
  if (!v11)
    v11 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v10);
  ++*(_DWORD *)v11;
  v18 = 0;
  v19 = a4;
  v20 = a2 | ((unint64_t)(a3 + a2) << 32);
  v21[0] = 0;
  v22 = -1;
  v12 = *(unsigned int *)(a5 + 64);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v12])(&v17, v21, a5);
    v22 = v12;
  }
  WebCore::DocumentMarkerController::addMarker(v11, this, &v18);
  if (v22 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v22])(&v17, v21);
  v22 = -1;
  result = (unsigned int *)v18;
  if (v18)
  {
    *((_QWORD *)v18 + 1) = 0;
    v18 = 0;
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  if (!*(_DWORD *)v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1959A9D2CLL);
  }
  --*(_DWORD *)v11;
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v10, v13);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return result;
}

void WebCore::removeMarkers(const WebCore::SimpleRange *a1, int a2, char a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_DWORD **)(v6 + 1496);
  if (!v7)
    v7 = (_DWORD *)WebCore::Document::ensureMarkers((WebCore::Document *)v6);
  ++*v7;
  v8 = 0;
  WebCore::DocumentMarkerController::filterMarkers((uint64_t)v7, a1, &v8, a2, a3);
  if (*v7)
  {
    --*v7;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::makeSimpleRange@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) += 4;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = v4;
  return result;
}

uint64_t WebCore::DocumentFragment::canContainRangeEndPoint(WebCore::DocumentFragment *this)
{
  return 1;
}

uint64_t WebCore::DocumentFragment::isTemplateContent(WebCore::DocumentFragment *this)
{
  return 0;
}

void WebCore::DeviceOrientationController::~DeviceOrientationController(WebCore::DeviceOrientationController *this)
{
  uint64_t v1;
  void *v2;

  WebCore::DeviceController::~DeviceController(this);
  if (*(_DWORD *)(v1 + 8))
  {
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebCore::DeviceController::hasLastData(WebCore::DeviceController *this)
{
  return 0;
}

void WebCore::DeviceController::getLastEvent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::TextManipulationController::~TextManipulationController(WebCore::TextManipulationController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::TextManipulationController::ManipulationItemData *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::TextManipulationController::ManipulationItemData *)(v3 + 8);
      do
      {
        if (*((_QWORD *)v5 - 1) != -1)
          WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData(v5, a2);
        v5 = (WebCore::TextManipulationController::ManipulationItemData *)((char *)v5 + 72);
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = *((unsigned int *)this + 31);
  v7 = (WTF *)*((_QWORD *)this + 14);
  if ((_DWORD)v6)
  {
    v8 = 32 * v6;
    v9 = (_DWORD *)((char *)v7 + 24);
    do
    {
      v10 = *v9;
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, _DWORD *))off_1E33A3378[v10])(&v35, v9 - 4);
      *v9 = -1;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
    v7 = (WTF *)*((_QWORD *)this + 14);
  }
  if (v7)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v7, a2);
  }
  v11 = *((unsigned int *)this + 27);
  v12 = (WTF *)*((_QWORD *)this + 12);
  if ((_DWORD)v11)
  {
    v13 = 48 * v11;
    v14 = (char *)v12 + 32;
    do
    {
      v15 = *((_DWORD *)v14 + 3);
      if (v15)
        WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*(WTF::StringImpl **)v14, (WTF::StringImpl *)(*(_QWORD *)v14 + 96 * v15));
      v16 = *(WTF **)v14;
      if (*(_QWORD *)v14)
      {
        *(_QWORD *)v14 = 0;
        *((_DWORD *)v14 + 2) = 0;
        WTF::fastFree(v16, a2);
      }
      v14 += 48;
      v13 -= 48;
    }
    while (v13);
    v12 = (WTF *)*((_QWORD *)this + 12);
  }
  if (v12)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v12, a2);
  }
  v17 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      v20 = (WTF::StringImpl **)*((_QWORD *)this + 9);
      do
      {
        v21 = *v20;
        if (*v20 != (WTF::StringImpl *)-1)
        {
          *v20 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 7, a2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 5, v22);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 3, v23);
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v25);
      v31 = *(unsigned int *)(v25 + 28);
      if ((_DWORD)v31)
      {
        v34 = v25;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v31));
        v25 = v34;
      }
      v32 = *(WTF **)(v25 + 16);
      if (v32)
      {
        *(_QWORD *)(v25 + 16) = 0;
        *(_DWORD *)(v25 + 24) = 0;
        v33 = v25;
        WTF::fastFree(v32, v24);
        v25 = v33;
      }
      WTF::fastFree((WTF *)v25, v24);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v28 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v24);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::TextManipulationController::ManipulationItemData::~ManipulationItemData(WebCore::TextManipulationController::ManipulationItemData *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 15);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(*((WTF::StringImpl **)this + 6), (WTF::StringImpl *)(*((_QWORD *)this + 6) + 96 * v3));
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v13 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v13)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v13));
        v6 = v16;
      }
      v14 = *(WTF **)(v6 + 16);
      if (v14)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v15 = v6;
        WTF::fastFree(v14, a2);
        v6 = v15;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::TextManipulationToken>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if (*((_BYTE *)v3 + 80))
      {
        v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
        *((_QWORD *)v3 + 4) = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, a2);
          else
            *(_DWORD *)v4 -= 2;
        }
        v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
        *((_QWORD *)v3 + 3) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
        *((_QWORD *)v3 + 2) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::TextAutoSizingKey,WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>>>,WebCore::TextAutoSizingHash,WTF::HashMap<WebCore::TextAutoSizingKey,std::unique_ptr<WebCore::TextAutoSizingValue>,WebCore::TextAutoSizingHash,WebCore::TextAutoSizingTraits,WTF::HashTraits<std::unique_ptr<WebCore::TextAutoSizingValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::TextAutoSizingTraits>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WebCore::RenderStyle **v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;
  WebCore::TextAutoSizingValue *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF *v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WebCore::RenderStyle **)(a1 + 24 * i);
      v6 = *v5;
      if (*v5 != (WebCore::RenderStyle *)-1)
      {
        v7 = a1 + 24 * i;
        v8 = *(WebCore::TextAutoSizingValue **)(v7 + 16);
        *(_QWORD *)(v7 + 16) = 0;
        if (v8)
        {
          WebCore::TextAutoSizingValue::reset(v8);
          v10 = *(uint64_t **)v8;
          if (*(_QWORD *)v8)
          {
            v11 = *((unsigned int *)v10 - 1);
            if ((_DWORD)v11)
            {
              v12 = *(uint64_t **)v8;
              do
              {
                v13 = *v12;
                if (*v12 != -1)
                {
                  *v12 = 0;
                  if (v13)
                  {
                    if (*(_DWORD *)(v13 + 24) == 2)
                    {
                      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v13);
                    }
                    else
                    {
                      *(_DWORD *)(v13 + 24) -= 2;
                    }
                  }
                }
                ++v12;
                --v11;
              }
              while (v11);
            }
            WTF::fastFree((WTF *)(v10 - 2), v9);
          }
          WTF::fastFree(v8, v9);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          WebCore::RenderStyle::~RenderStyle(v6, a2);
          if (*(_DWORD *)v14)
          {
            *((_OWORD *)v14 + 2) = 0u;
            *((_OWORD *)v14 + 3) = 0u;
            *(_OWORD *)v14 = 0u;
            *((_OWORD *)v14 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v14, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::DeviceOrientationAndMotionAccessController::~DeviceOrientationAndMotionAccessController(WebCore::DeviceOrientationAndMotionAccessController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 2);
      while (1)
      {
        v6 = *(unsigned int *)(v5 + 24);
        if ((_DWORD)v6 == -1)
          break;
        v19 = &v18;
        if ((((uint64_t (*)(char **, uint64_t))off_1E33A3390[v6])(&v19, v5) & 1) == 0)
        {
          v7 = *(unsigned int *)(v5 + 24);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v7])(&v20, v5);
          *(_DWORD *)(v5 + 24) = -1;
        }
        v5 += 40;
        if (!--v4)
          goto LABEL_10;
      }
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_26:
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      v16 = v8;
      WTF::fastFree(v15, a2);
      v8 = v16;
LABEL_24:
      WTF::fastFree((WTF *)v8, a2);
      goto LABEL_14;
    }
LABEL_10:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v14 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v14)
      {
        v17 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v14));
        v8 = v17;
      }
      v15 = *(WTF **)(v8 + 16);
      if (!v15)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
LABEL_14:
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v11 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebCore::IdleCallbackController::~IdleCallbackController(WebCore::IdleCallbackController *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD **v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v35 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v35)
      {
        v38 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v35));
        v3 = v38;
      }
      v36 = *(WTF **)(v3 + 16);
      if (v36)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v37 = v3;
        WTF::fastFree(v36, a2);
        v3 = v37;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 6);
  v7 = *((_QWORD *)this + 7);
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v6 <= v7)
  {
    if (v6 == v7)
      goto LABEL_23;
    v12 = 16 * v7 - 16 * v6;
    v13 = (_DWORD **)((char *)v8 + 16 * v6 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        if (v14[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
        else
          --v14[4];
      }
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  else
  {
    if (v7)
    {
      v9 = 16 * v7;
      v10 = (_DWORD **)((char *)v8 + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (v11[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
          else
            --v11[4];
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
      v8 = (WTF *)*((_QWORD *)this + 8);
      v6 = *((_QWORD *)this + 6);
    }
    v15 = *((unsigned int *)this + 18);
    if (v6 != v15)
    {
      v29 = 16 * v15 - 16 * v6;
      v30 = (_DWORD **)((char *)v8 + 16 * v6 + 8);
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          if (v31[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
          else
            --v31[4];
        }
        v30 += 2;
        v29 -= 16;
      }
      while (v29);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 8);
LABEL_23:
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, a2);
  }
  v16 = *((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 3);
  v18 = (WTF *)*((_QWORD *)this + 4);
  if (v16 <= v17)
  {
    if (v16 == v17)
      goto LABEL_44;
    v22 = 16 * v17 - 16 * v16;
    v23 = (_DWORD **)((char *)v18 + 16 * v16 + 8);
    do
    {
      v24 = *v23;
      *v23 = 0;
      if (v24)
      {
        if (v24[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
        else
          --v24[4];
      }
      v23 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  else
  {
    if (v17)
    {
      v19 = 16 * v17;
      v20 = (_DWORD **)((char *)v18 + 8);
      do
      {
        v21 = *v20;
        *v20 = 0;
        if (v21)
        {
          if (v21[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
          else
            --v21[4];
        }
        v20 += 2;
        v19 -= 16;
      }
      while (v19);
      v18 = (WTF *)*((_QWORD *)this + 4);
      v16 = *((_QWORD *)this + 2);
    }
    v25 = *((unsigned int *)this + 10);
    if (v16 != v25)
    {
      v32 = 16 * v25 - 16 * v16;
      v33 = (_DWORD **)((char *)v18 + 16 * v16 + 8);
      do
      {
        v34 = *v33;
        *v33 = 0;
        if (v34)
        {
          if (v34[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
          else
            --v34[4];
        }
        v33 += 2;
        v32 -= 16;
      }
      while (v32);
    }
  }
  v18 = (WTF *)*((_QWORD *)this + 4);
LABEL_44:
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, a2);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v26 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = (unsigned int *)v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
          WTF::fastFree((WTF *)v8, v9);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          do
          {
            v10 = __ldaxr((unsigned int *)v6);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, (unsigned int *)v6));
          if (!v11)
          {
            atomic_store(1u, (unsigned int *)v6);
            v12 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v12)
            {
              v16 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v12));
              v6 = v16;
            }
            v13 = *(WTF **)(v6 + 16);
            if (v13)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v15 = v6;
              WTF::fastFree(v13, a2);
              v6 = v15;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[4];
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v9 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void std::default_delete<WebCore::IntersectionObserverData>::operator()[abi:sn180100](int a1, WTF *this)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int **v17;
  unsigned int **v18;

  if (this)
  {
    v3 = *((_DWORD *)this + 7);
    if (v3)
    {
      v7 = (unsigned int **)*((_QWORD *)this + 2);
      v8 = &v7[3 * v3];
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
        {
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            v17 = v7;
            WTF::fastFree((WTF *)v9, this);
            v7 = v17;
          }
        }
        v7 += 3;
      }
      while (v7 != v8);
    }
    v4 = (WTF *)*((_QWORD *)this + 2);
    if (v4)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v4, this);
    }
    v5 = *((unsigned int *)this + 3);
    if ((_DWORD)v5)
    {
      v12 = *(unsigned int ***)this;
      v13 = *(_QWORD *)this + 8 * v5;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            v18 = v12;
            WTF::fastFree((WTF *)v14, this);
            v12 = v18;
          }
        }
        ++v12;
      }
      while (v12 != (unsigned int **)v13);
    }
    v6 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v6, this);
    }
    WTF::fastFree(this, this);
  }
}

void WebCore::ConstantPropertyMap::~ConstantPropertyMap(WebCore::ConstantPropertyMap *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v11)
      {
        v14 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v11));
        v3 = v14;
      }
      v12 = *(WTF **)(v3 + 16);
      if (v12)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v13 = v3;
        WTF::fastFree(v12, a2);
        v3 = v13;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  if (*((_BYTE *)this + 8))
  {
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)this;
        do
        {
          v9 = *(WTF::StringImpl **)v8;
          if (*(_QWORD *)v8 != -1)
          {
            v10 = *(_DWORD **)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v10)
            {
              if (*v10 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
                v9 = *(WTF::StringImpl **)v8;
              }
              else
              {
                *v10 -= 2;
              }
            }
            *(_QWORD *)v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          v8 += 16;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v6);
              v5 = *(WTF::StringImpl **)v4;
            }
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (uint64_t *)(v3 + 16 * i);
        v7 = *v6;
        if (*v6 != -1)
        {
          *v6 = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr((unsigned int *)v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, (unsigned int *)v7));
            if (!v9)
            {
              atomic_store(1u, (unsigned int *)v7);
              v10 = *(unsigned int *)(v7 + 28);
              if ((_DWORD)v10)
              {
                v14 = v7;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
                v7 = v14;
              }
              v11 = *(WTF **)(v7 + 16);
              if (v11)
              {
                *(_QWORD *)(v7 + 16) = 0;
                *(_DWORD *)(v7 + 24) = 0;
                v13 = v7;
                WTF::fastFree(v11, a2);
                v7 = v13;
              }
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void WebCore::VisitedLinkState::operator delete(WTF *this, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v8 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v8)
      {
        v11 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
        v5 = v11;
      }
      v9 = *(WTF **)(v5 + 16);
      if (v9)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v10 = v5;
        WTF::fastFree(v9, a2);
        v5 = v10;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  if (*(_DWORD *)this)
    bzero(this, (size_t)a2);
  else
    WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * v11);
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (*v12)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 16 * v11), v8);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v18 + 16 * v22));
          v23 = v18 + 16 * v22;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr((unsigned int *)v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v24);
              v36 = *(unsigned int *)(v24 + 28);
              if ((_DWORD)v36)
              {
                v45 = v24;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v36));
                v24 = v45;
              }
              v37 = *(WTF **)(v24 + 16);
              if (v37)
              {
                *(_QWORD *)(v24 + 16) = 0;
                *(_DWORD *)(v24 + 24) = 0;
                v44 = v24;
                WTF::fastFree(v37, v8);
                v24 = v44;
              }
              WTF::fastFree((WTF *)v24, v8);
            }
          }
          v27 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v8);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v28;
          v29 = v4 + 16 * v11;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v30;
          v31 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr((unsigned int *)v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, (unsigned int *)v31));
            if (!v33)
            {
              atomic_store(1u, (unsigned int *)v31);
              v38 = *(unsigned int *)(v31 + 28);
              if ((_DWORD)v38)
              {
                v43 = v31;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v38));
                v31 = v43;
              }
              v39 = *(WTF **)(v31 + 16);
              if (v39)
              {
                *(_QWORD *)(v31 + 16) = 0;
                *(_DWORD *)(v31 + 24) = 0;
                v41 = v31;
                WTF::fastFree(v39, v8);
                v31 = v41;
              }
              WTF::fastFree((WTF *)v31, v8);
            }
          }
          v17 = *v12;
          *v12 = 0;
          if (!v17)
            goto LABEL_33;
          if (*(_DWORD *)v17 == 2)
            goto LABEL_35;
          *(_DWORD *)v17 -= 2;
        }
        else
        {
          v13 = v4 + 16 * v11;
          v14 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr((unsigned int *)v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, (unsigned int *)v14));
            if (!v16)
            {
              atomic_store(1u, (unsigned int *)v14);
              v34 = *(unsigned int *)(v14 + 28);
              if ((_DWORD)v34)
              {
                v42 = v14;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v34));
                v14 = v42;
              }
              v35 = *(WTF **)(v14 + 16);
              if (v35)
              {
                *(_QWORD *)(v14 + 16) = 0;
                *(_DWORD *)(v14 + 24) = 0;
                v40 = v14;
                WTF::fastFree(v35, v8);
                v14 = v40;
              }
              WTF::fastFree((WTF *)v14, v8);
            }
          }
          v17 = *v12;
          *v12 = 0;
          if (!v17)
            goto LABEL_33;
          if (*(_DWORD *)v17 == 2)
          {
LABEL_35:
            WTF::StringImpl::destroy(v17, v8);
            goto LABEL_33;
          }
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_33:
      if (++v11 == v5)
        goto LABEL_54;
    }
  }
  if (v4)
LABEL_54:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      if (*(_QWORD *)v5 != -1)
      {
        v6 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v10 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v10)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v10));
            v11 = *(WTF **)(v6 + 16);
            if (v11)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              WTF::fastFree(v11, a2);
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
        v9 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::HTMLUnknownElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x111C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E321E008;
  *a3 = result;
  return result;
}

uint64_t WTF::StringView::CodePoints::Iterator::operator*(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t result;
  int v4;
  BOOL v5;
  unsigned int v6;

  v1 = *(unsigned __int16 **)a1;
  if (*(_BYTE *)(a1 + 16))
    return *(unsigned __int8 *)v1;
  result = *v1;
  if ((result & 0xF800) == 0xD800 && (result & 0x400) == 0 && *(_QWORD *)(a1 + 8) - (_QWORD)v1 != 2)
  {
    v4 = v1[1];
    v5 = (v4 & 0xFC00) == 56320;
    v6 = v4 + ((_DWORD)result << 10) - 56613888;
    if (v5)
      return v6;
    else
      return *v1;
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13QualifiedNameENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PaintDefinition::~PaintDefinition(WebCore::PaintDefinition *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    v16 = 8 * v3;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 11);
  if ((_DWORD)v5)
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v13 = 8 * v5;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v6 = (WTF *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v9 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator()(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  double v9;
  double v10;
  float v11;
  WTF::StringImpl *v12;
  double v13;
  double v14;
  float v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v8 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v8 != -1)
  {
    v26 = (WTF::StringImpl *)&v24;
    v25 = (WTF::StringImpl *)&v26;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, a1, a2, (uint64_t *)&v26);
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, a3, a4, (uint64_t *)&v25);
  WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator() const(WTF::StringView,WTF::StringView)::{lambda(WTF::String const&)#1}::operator()(&v24, v26, v9, v10, v11);
  v16 = v24;
  if (!v24)
  {
    v17 = 0;
    goto LABEL_14;
  }
  if (!*((_DWORD *)v24 + 1))
  {
    v17 = 0;
    v24 = 0;
LABEL_12:
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
    goto LABEL_14;
  }
  WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator() const(WTF::StringView,WTF::StringView)::{lambda(WTF::String const&)#1}::operator()(&v23, v25, v13, v14, v15);
  v17 = WTF::equal(v24, v23, v18);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v16 = v24;
  v24 = 0;
  if (v16)
    goto LABEL_12;
LABEL_14:
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v12);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v12);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v17;
}

_BYTE *WebCore::Document::urlForBindings(void)::$_0::operator() const(void)::{lambda(WTF::StringView,WTF::StringView)#1}::operator() const(WTF::StringView,WTF::StringView)::{lambda(WTF::String const&)#1}::operator()(_BYTE *result, WTF::StringImpl *this, double a3, double a4, float a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t v13;
  int16x8_t *v14;
  int8x16_t v15;
  int16x8_t *v16;
  char *v17;
  int16x8_t v18;
  __int16 *v19;
  uint64_t v20;

  v5 = result;
  if (!this)
    goto LABEL_30;
  v7 = *((_QWORD *)this + 1);
  v8 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    if ((_DWORD)v8)
    {
      v9 = 16;
      if (v8 < 0x10)
        v9 = *((unsigned int *)this + 1);
      v10 = v9;
      result = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        if (*result == 46)
          goto LABEL_11;
        ++result;
        --v10;
      }
      while (v10);
      if (v8 >= 0x11)
      {
        result = memchr((void *)(v7 + v9), 46, v8 - v9);
        if (result)
        {
LABEL_11:
          v11 = (uint64_t)&result[-v7];
          goto LABEL_12;
        }
      }
    }
    goto LABEL_30;
  }
  if (!(_DWORD)v8)
  {
LABEL_30:
    *v5 = 0;
    return result;
  }
  v12 = (int16x8_t *)(v7 + 2 * v8);
  if (v8 > 0x1F)
  {
    v13.i64[0] = 0x2E002E002E002ELL;
    v13.i64[1] = 0x2E002E002E002ELL;
    v14 = (int16x8_t *)*((_QWORD *)this + 1);
    do
    {
      v15 = (int8x16_t)vceqq_s16(*v14, v13);
      LOWORD(a5) = vmaxvq_u16((uint16x8_t)v15);
      if (a5 != 0.0)
        goto LABEL_24;
      v16 = v14 + 1;
      v17 = &v14[1].i8[14];
      ++v14;
    }
    while (v17 < (char *)v12);
    if (v16 < v12)
    {
      v18.i64[0] = 0x2E002E002E002ELL;
      v18.i64[1] = 0x2E002E002E002ELL;
      v15 = (int8x16_t)vceqq_s16(v12[-1], v18);
      v18.i16[0] = vmaxvq_u16((uint16x8_t)v15);
      if (v18.i32[0])
      {
        v14 = v12 - 1;
LABEL_24:
        v19 = &v14->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v15))];
        goto LABEL_25;
      }
    }
    goto LABEL_30;
  }
  v20 = 2 * v8;
  v19 = (__int16 *)*((_QWORD *)this + 1);
  while (*v19 != 46)
  {
    ++v19;
    v20 -= 2;
    if (!v20)
      goto LABEL_30;
  }
LABEL_25:
  if (v19 == (__int16 *)v12)
    goto LABEL_30;
  v11 = ((uint64_t)v19 - v7) >> 1;
LABEL_12:
  if (v11 == -1)
    goto LABEL_30;
  if (v8 > v11)
    return (_BYTE *)WTF::StringImpl::substring(this);
  *(_DWORD *)this += 2;
  *v5 = this;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::printNavigationErrorMessage(WebCore::Document &,WebCore::Frame &,WTF::URL const&,WTF::ASCIILiteral)::$_0,void,WTF::URL const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = &off_1E33A3410;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::printNavigationErrorMessage(WebCore::Document &,WebCore::Frame &,WTF::URL const&,WTF::ASCIILiteral)::$_0,void,WTF::URL const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33A3410;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::printNavigationErrorMessage(WebCore::Document &,WebCore::Frame &,WTF::URL const&,WTF::ASCIILiteral)::$_0,void,WTF::URL const&>::call(_QWORD *result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  size_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _WORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  size_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  _WORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  int8x16_t v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  unsigned __int128 *v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  char v82;
  char v83;
  WTF::StringImpl *v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;

  v2 = *(_QWORD *)a2;
  v3 = result[1];
  if (*(_QWORD *)a2)
    *(_DWORD *)v2 += 2;
  v4 = result[2];
  if (v4)
    *(_DWORD *)v4 += 2;
  v6 = (int8x16_t *)result[7];
  v5 = result[8];
  if (v5)
  {
    v7 = v5 - 1;
    if ((unint64_t)(v5 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_134;
    }
  }
  else
  {
    v7 = 0;
  }
  if (v2)
  {
    v8 = *(_DWORD *)(v2 + 4);
    if (v4)
    {
LABEL_9:
      v9 = *(_DWORD *)(v4 + 4);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = 0;
    if (v4)
      goto LABEL_9;
  }
  v9 = 0;
LABEL_10:
  if (__OFADD__((_DWORD)v7, 1))
    goto LABEL_131;
  v10 = v7 + 4;
  if (__OFADD__(v7 + 1, 3))
    goto LABEL_131;
  if (v9 < 0)
    goto LABEL_131;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  if (v11)
    goto LABEL_131;
  v11 = __OFADD__(v12, 23);
  v13 = v12 + 23;
  v14 = v11;
  if (v8 < 0)
    goto LABEL_131;
  if (v14)
    goto LABEL_131;
  v11 = __OFADD__(v8, v13);
  v15 = v8 + v13;
  if (v11)
    goto LABEL_131;
  v16 = (v15 + 69);
  if (__OFADD__(v15, 69))
    goto LABEL_131;
  if (v2 && (*(_BYTE *)(v2 + 16) & 4) == 0 || v4 && (*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (v15 != -69)
    {
      if (v16 <= 0x7FFFFFEF)
      {
        result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20));
        v17 = v84;
        if (v84)
        {
          v18 = (char *)v84 + 20;
          *(_DWORD *)v84 = 2;
          *((_DWORD *)v17 + 1) = v16;
          *((_QWORD *)v17 + 1) = (char *)v17 + 20;
          *((_DWORD *)v17 + 4) = 0;
          v85.val[0] = *(int8x16_t *)"Unsafe JavaScript attempt to initiate navigation for frame with URL '";
          v86.val[0] = *(int8x16_t *)"tiate navigation for frame with URL '";
          v90.val[1] = 0uLL;
          v90.val[0] = *(int8x16_t *)" for frame with URL '";
          v86.val[1] = 0u;
          v94.val[0] = *(int8x16_t *)"t attempt to initiate navigation for frame with URL '";
          v85.val[1] = 0u;
          vst2q_s8(v18, v85);
          v94.val[1] = 0u;
          v19 = (char *)v17 + 52;
          vst2q_s8(v19, v94);
          v20 = (char *)v17 + 84;
          vst2q_s8(v20, v86);
          v21 = (char *)v17 + 116;
          vst2q_s8(v21, v90);
          v22 = (_WORD *)((char *)v17 + 158);
          *(_QWORD *)((char *)v17 + 148) = 0x20004C00520055;
          *((_WORD *)v17 + 78) = 39;
          if (v2)
          {
            a2 = *(_OWORD **)(v2 + 8);
            v23 = *(unsigned int *)(v2 + 4);
            if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            {
              v24 = (char *)&v22[v23];
              if (v23 >= 0x40)
              {
                v25 = (char *)&v22[v23 & 0xFFFFFFC0];
                v36 = 0uLL;
                v37 = (char *)v17 + 158;
                do
                {
                  v87.val[0] = (int8x16_t)*a2;
                  v38 = *((int8x16_t *)a2 + 1);
                  v91.val[0] = (int8x16_t)a2[2];
                  v39 = a2[3];
                  a2 += 4;
                  v40 = v39;
                  v91.val[1] = 0uLL;
                  v95.val[0] = v38;
                  v87.val[1] = 0uLL;
                  v41 = v37;
                  vst2q_s8(v41, v87);
                  v41 += 32;
                  v95.val[1] = 0uLL;
                  vst2q_s8(v41, v95);
                  v42 = v37 + 64;
                  vst2q_s8(v42, v91);
                  v43 = v37 + 96;
                  vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
                  v37 += 128;
                }
                while (v37 != v25);
              }
              else
              {
                v25 = (char *)v17 + 158;
              }
              while (v25 != v24)
              {
                v44 = *(unsigned __int8 *)a2;
                a2 = (_OWORD *)((char *)a2 + 1);
                *(_WORD *)v25 = v44;
                v25 += 2;
              }
            }
            else if ((_DWORD)v23 == 1)
            {
              *v22 = *(_WORD *)a2;
            }
            else if ((_DWORD)v23)
            {
              result = memcpy((char *)v17 + 158, a2, 2 * v23);
            }
            v35 = *(unsigned int *)(v2 + 4);
          }
          else
          {
            v35 = 0;
          }
          v45 = &v22[v35];
          *(_OWORD *)v45 = xmmword_1969F0440;
          *((_OWORD *)v45 + 1) = xmmword_1969F0450;
          *((_QWORD *)v45 + 4) = 0x52005500200068;
          *((_DWORD *)v45 + 10) = 2097228;
          v45[22] = 39;
          v46 = (char *)(v45 + 23);
          if (v4)
          {
            a2 = *(_OWORD **)(v4 + 8);
            v47 = *(unsigned int *)(v4 + 4);
            if ((*(_BYTE *)(v4 + 16) & 4) != 0)
            {
              v48 = &v46[2 * v47];
              if (v47 >= 0x40)
              {
                v49 = &v46[2 * (v47 & 0xFFFFFFC0)];
                v51 = 0uLL;
                v52 = v46;
                do
                {
                  v88.val[0] = (int8x16_t)*a2;
                  v53 = *((int8x16_t *)a2 + 1);
                  v92.val[0] = (int8x16_t)a2[2];
                  v54 = a2[3];
                  a2 += 4;
                  v55 = v54;
                  v92.val[1] = 0uLL;
                  v96.val[0] = v53;
                  v88.val[1] = 0uLL;
                  v56 = v52;
                  vst2q_s8(v56, v88);
                  v56 += 32;
                  v96.val[1] = 0uLL;
                  vst2q_s8(v56, v96);
                  v57 = v52 + 64;
                  vst2q_s8(v57, v92);
                  v58 = v52 + 96;
                  vst2q_s8(v58, *(int8x16x2_t *)(&v51 - 1));
                  v52 += 128;
                }
                while (v52 != v49);
              }
              else
              {
                v49 = v46;
              }
              while (v49 != v48)
              {
                v59 = *(unsigned __int8 *)a2;
                a2 = (_OWORD *)((char *)a2 + 1);
                *(_WORD *)v49 = v59;
                v49 += 2;
              }
            }
            else if ((_DWORD)v47 == 1)
            {
              *(_WORD *)v46 = *(_WORD *)a2;
            }
            else if ((_DWORD)v47)
            {
              result = memcpy(v46, a2, 2 * v47);
            }
            v50 = *(unsigned int *)(v4 + 4);
          }
          else
          {
            v50 = 0;
          }
          v60 = &v46[2 * v50];
          *(_DWORD *)v60 = 3014695;
          *((_WORD *)v60 + 2) = 32;
          v61 = v60 + 6;
          v62 = &v60[2 * v7 + 6];
          if ((v7 & 0x7FFFFFC0) != 0)
          {
            v63 = &v61[2 * (v7 & 0x7FFFFFC0)];
            v64 = 0uLL;
            do
            {
              v89.val[0] = *v6;
              v65 = v6[1];
              v93.val[0] = v6[2];
              v66 = v6[3];
              v6 += 4;
              v67 = v66;
              v93.val[1] = 0uLL;
              v97.val[0] = v65;
              v89.val[1] = 0uLL;
              v68 = v61;
              vst2q_s8(v68, v89);
              v68 += 32;
              v97.val[1] = 0uLL;
              vst2q_s8(v68, v97);
              v69 = v61 + 64;
              vst2q_s8(v69, v93);
              v70 = v61 + 96;
              vst2q_s8(v70, *(int8x16x2_t *)(&v64 - 1));
              v61 += 128;
            }
            while (v61 != v63);
            v61 = v63;
          }
          while (v61 != v62)
          {
            v71 = v6->u8[0];
            v6 = (int8x16_t *)((char *)v6 + 1);
            *(_WORD *)v61 = v71;
            v61 += 2;
          }
          *(_WORD *)v62 = 10;
          goto LABEL_89;
        }
      }
LABEL_131:
      __break(0xC471u);
      JUMPOUT(0x1959AC2C0);
    }
LABEL_113:
    v17 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_89;
  }
  if (v15 == -69)
    goto LABEL_113;
  if ((v16 & 0x80000000) != 0)
    goto LABEL_131;
  result = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
  v17 = v84;
  if (!v84)
    goto LABEL_131;
  *(_OWORD *)((char *)v84 + 36) = *(_OWORD *)"t attempt to initiate navigation for frame with URL '";
  qmemcpy((char *)v17 + 52, "tiate navigation for frame with URL '", 37);
  *(_DWORD *)v17 = 2;
  *((_DWORD *)v17 + 1) = v16;
  *((_QWORD *)v17 + 1) = (char *)v17 + 20;
  *((_DWORD *)v17 + 4) = 4;
  *(_OWORD *)((char *)v17 + 20) = *(_OWORD *)"Unsafe JavaScript attempt to initiate navigation for frame with URL '";
  v26 = (char *)v17 + 89;
  if (v2)
  {
    a2 = *(_OWORD **)(v2 + 8);
    v27 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
          *v26 = *(_BYTE *)a2;
        else
          result = memcpy((char *)v17 + 89, a2, v27);
      }
    }
    else
    {
      if (v27 < 0x10)
      {
        v76 = (unsigned __int128 *)((char *)v17 + 89);
      }
      else
      {
        v76 = (unsigned __int128 *)&v26[v27 & 0xFFFFFFF0];
        v77 = (unsigned __int128 *)((char *)v17 + 89);
        do
        {
          v78 = (unsigned __int128)vld2q_s8((const char *)a2);
          a2 += 2;
          *v77++ = v78;
        }
        while (v77 != v76);
      }
      while (v76 != (unsigned __int128 *)&v26[v27])
      {
        v82 = *(_BYTE *)a2;
        a2 = (_OWORD *)((char *)a2 + 2);
        *(_BYTE *)v76 = v82;
        v76 = (unsigned __int128 *)((char *)v76 + 1);
      }
    }
    v28 = *(unsigned int *)(v2 + 4);
  }
  else
  {
    v28 = 0;
  }
  v29 = &v26[v28];
  qmemcpy(v29, "' from frame with URL '", 23);
  v30 = v29 + 23;
  if (v4)
  {
    a2 = *(_OWORD **)(v4 + 8);
    v31 = *(unsigned int *)(v4 + 4);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((_DWORD)v31)
      {
        if ((_DWORD)v31 == 1)
          *v30 = *(_BYTE *)a2;
        else
          result = memcpy(v30, a2, v31);
      }
    }
    else
    {
      if (v31 < 0x10)
      {
        v79 = (unsigned __int128 *)(v29 + 23);
      }
      else
      {
        v79 = (unsigned __int128 *)&v30[v31 & 0xFFFFFFF0];
        v80 = (unsigned __int128 *)(v29 + 23);
        do
        {
          v81 = (unsigned __int128)vld2q_s8((const char *)a2);
          a2 += 2;
          *v80++ = v81;
        }
        while (v80 != v79);
      }
      while (v79 != (unsigned __int128 *)&v30[v31])
      {
        v83 = *(_BYTE *)a2;
        a2 = (_OWORD *)((char *)a2 + 2);
        *(_BYTE *)v79 = v83;
        v79 = (unsigned __int128 *)((char *)v79 + 1);
      }
    }
    v32 = *(unsigned int *)(v4 + 4);
  }
  else
  {
    v32 = 0;
  }
  v33 = &v30[v32];
  v33[2] = 32;
  *(_WORD *)v33 = 11815;
  v34 = v33 + 3;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v34 = v6->i8[0];
    else
      result = memcpy(v33 + 3, v6, v7);
  }
  v34[v7] = 10;
LABEL_89:
  v84 = v17;
  if (*((_DWORD *)v17 + 1))
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 104))(v3, a2);
    if (result)
    {
      v72 = result[3];
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          v74 = *(_QWORD *)(v73 + 792);
          if (v74)
          {
            ++*(_DWORD *)(v74 + 16);
            result = WebCore::PageConsoleClient::addMessage((uint64_t *)v74, 1, 2, (uint64_t)&v84, 0, 0);
            v75 = *(_DWORD *)(v74 + 16);
            if (v75)
            {
              *(_DWORD *)(v74 + 16) = v75 - 1;
              v17 = v84;
              v84 = 0;
              if (!v17)
                goto LABEL_100;
              goto LABEL_98;
            }
            __break(0xC471u);
LABEL_134:
            JUMPOUT(0x1959AC228);
          }
        }
      }
    }
  }
  v84 = 0;
LABEL_98:
  if (*(_DWORD *)v17 == 2)
  {
    result = (_QWORD *)WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    if (!v4)
      goto LABEL_103;
    goto LABEL_101;
  }
  *(_DWORD *)v17 -= 2;
LABEL_100:
  if (!v4)
    goto LABEL_103;
LABEL_101:
  if (*(_DWORD *)v4 == 2)
    result = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v4 -= 2;
LABEL_103:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v2, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E33A33A0[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 40) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_3URLEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  __n128 result;
  _DWORD *v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *(__n128 *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(__n128 *)(a2 + 8) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E33A33A0[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *(_QWORD *)v4 = v10;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(v4 + 8) = result;
  *(_DWORD *)(v4 + 40) = 1;
  return result;
}

uint64_t WebCore::LocalFrame::editor(WebCore::LocalFrame *this)
{
  uint64_t result;
  WebCore::Editor *v3;
  void *v4;
  WebCore::Editor *v5;
  uint64_t v6;
  void *v7;

  result = *((_QWORD *)this + 382);
  if (!result)
  {
    v3 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v3, this);
    v5 = (WebCore::Editor *)*((_QWORD *)this + 382);
    *((_QWORD *)this + 382) = v3;
    if (v5)
    {
      WebCore::Editor::~Editor(v5, v4);
      if (*(_DWORD *)v6)
      {
        *(_QWORD *)(v6 + 496) = 0;
        *(_OWORD *)(v6 + 464) = 0u;
        *(_OWORD *)(v6 + 480) = 0u;
        *(_OWORD *)(v6 + 432) = 0u;
        *(_OWORD *)(v6 + 448) = 0u;
        *(_OWORD *)(v6 + 400) = 0u;
        *(_OWORD *)(v6 + 416) = 0u;
        *(_OWORD *)(v6 + 368) = 0u;
        *(_OWORD *)(v6 + 384) = 0u;
        *(_OWORD *)(v6 + 336) = 0u;
        *(_OWORD *)(v6 + 352) = 0u;
        *(_OWORD *)(v6 + 304) = 0u;
        *(_OWORD *)(v6 + 320) = 0u;
        *(_OWORD *)(v6 + 272) = 0u;
        *(_OWORD *)(v6 + 288) = 0u;
        *(_OWORD *)(v6 + 240) = 0u;
        *(_OWORD *)(v6 + 256) = 0u;
        *(_OWORD *)(v6 + 208) = 0u;
        *(_OWORD *)(v6 + 224) = 0u;
        *(_OWORD *)(v6 + 176) = 0u;
        *(_OWORD *)(v6 + 192) = 0u;
        *(_OWORD *)(v6 + 144) = 0u;
        *(_OWORD *)(v6 + 160) = 0u;
        *(_OWORD *)(v6 + 112) = 0u;
        *(_OWORD *)(v6 + 128) = 0u;
        *(_OWORD *)(v6 + 80) = 0u;
        *(_OWORD *)(v6 + 96) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)v6 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v6, v7);
      }
    }
    return *((_QWORD *)this + 382);
  }
  return result;
}

uint64_t std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>(uint64_t a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  char v20;
  unsigned __int8 *v21;

  v4 = (uint64_t)a2;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)a1)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v6, a2);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v7, a2);
    *(_BYTE *)(a1 + 32) = 0;
  }
  if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    goto LABEL_28;
  v8 = *(uint64_t **)(v4 + 40);
  v9 = v8[1];
  if (!*(_QWORD *)(v9 + 1944) || *(_BYTE *)(v9 + 3405))
    goto LABEL_28;
  v11 = *a3;
  v10 = a3[1];
  if ((*(_BYTE *)(v4 + 70) & 4) != 0)
  {
    v15 = *v8;
    v16 = (*(_WORD *)(v15 + 28) & 0x80) == 0 || v15 == 0;
    v17 = v15 + 216;
    if (v16)
      v17 = v9 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v17 + 236))
      goto LABEL_28;
  }
  v12 = *(_QWORD *)(v9 + 1272);
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 70) & 4) != 0)
    {
LABEL_28:
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = v4;
      goto LABEL_41;
    }
  }
  if (!*(_BYTE *)(v9 + 3362)
    && ((v13 = *(unsigned __int8 *)(v9 + 3390), *(_BYTE *)(v9 + 3390))
     || (*(_BYTE *)(v9 + 70) & 8) != 0
     || *(_QWORD *)(v9 + 1560)
     || (v14 = *(_QWORD *)(v9 + 1328), *(_BYTE *)(v14 + 233))
     || *(_BYTE *)(v14 + 234)))
  {
    v18 = *(unsigned __int8 *)(v9 + 3391);
    if (v13)
      v19 = v18 == 0;
    else
      v19 = 0;
    v20 = !v19;
    *(_BYTE *)a1 = v20;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = v4;
    if (v19)
      goto LABEL_41;
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = v4;
  }
  if (v10)
  {
    v21 = &v11[2 * (_QWORD)v10];
    do
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, (WTF::StringImpl *)*v11, v11[1] & 1, 0);
      v11 += 2;
    }
    while (v11 != v21);
    v4 = *(_QWORD *)(a1 + 8);
  }
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v4, (unsigned __int8 **)(a1 + 16));
LABEL_41:
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

void WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation(WebCore::Style::PseudoClassChangeInvalidation *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)this)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((_QWORD *)this + 1), (unsigned __int8 **)this + 3);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v4, a2);
}

uint64_t WebCore::GCReachableRefMap::remove(WebCore::GCReachableRefMap *this, WebCore::EventTarget *a2)
{
  uint64_t result;
  WebCore::GCReachableRefMap *v4;

  {
    WebCore::GCReachableRefMap::map(void)::map = 0;
  }
  v4 = this;
  result = WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v4);
  if ((_DWORD)result)
    *((_QWORD *)this + 2) &= ~0x4000000000000uLL;
  return result;
}

uint64_t WebCore::isURLPotentiallyTrustworthy(WebCore *this, const WTF::URL *a2)
{
  uint64_t result;
  WebCore::SecurityOrigin *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  WebCore::SecurityOrigin *v12;
  char v13;

  if (WTF::URL::protocolIs())
  {
    if ((WTF::URL::isAboutBlank(this) & 1) == 0)
      return WTF::URL::isAboutSrcDoc(this);
    return 1;
  }
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  WebCore::SecurityOrigin::create(this, (uint64_t *)&v12);
  v4 = v12;
  result = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v12);
  v12 = 0;
  if (v4)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v4));
    if (!v7)
    {
      v11 = result;
      atomic_store(1u, (unsigned int *)v4);
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 6);
      *((_QWORD *)v4 + 6) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v5);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v5);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *((unsigned int *)v4 + 8);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v10])(&v13, (char *)v4 + 8);
      *((_DWORD *)v4 + 8) = -1;
      WTF::fastFree(v4, v5);
      return v11;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask(std::unique_ptr<Inspector::ConsoleMessage> &&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,std::unique_ptr<Inspector::ConsoleMessage> &&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 240))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E33A3D28;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E33A3D28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScriptExecutionContext::AddConsoleMessageTask::AddConsoleMessageTask(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::{lambda(WebCore::ScriptExecutionContext&)#1},void,WebCore::ScriptExecutionContext&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 248))(a2, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), a1 + 16, 0);
}

WebCore::ScriptedAnimationController *WTF::RefCounted<WebCore::ScriptedAnimationController>::deref(WebCore::ScriptedAnimationController *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::ScriptedAnimationController::~ScriptedAnimationController(result, a2);
    return (WebCore::ScriptedAnimationController *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v3 = WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::find(a1, a2);
  v4 = v3;
  v5 = *a1;
  if (*a1)
    v5 += 16 * *(unsigned int *)(v5 - 4);
  if (v5 == v3)
    return 0;
  v6 = *(_DWORD *)(v3 + 8) - 1;
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(a1, (_QWORD *)v3);
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v4 + 8) = v6;
  }
  return result;
}

uint64_t WTF::HashCountedSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>>::find(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

uint64_t WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (*a1)
  {
    v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v2 != a2)
      goto LABEL_3;
    return 0;
  }
  if (!a2)
    return 0;
  v2 = 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v3 = *a1;
    v4 = *a1 ? *(_DWORD *)(v3 - 12) - 1 : -1;
    *(_DWORD *)(v3 - 12) = v4;
    v5 = *a1;
    if (*a1)
    {
      v6 = 6 * *(_DWORD *)(v5 - 12);
      v7 = *(_DWORD *)(v5 - 4);
      if (v6 < v7 && v7 >= 9)
        WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink(a1);
    }
  }
  return 1;
}

uint64_t WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::shrink(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = v3 >> 1;
    v5 = *(_DWORD *)(v2 - 12);
  }
  else
  {
    v4 = 0;
    v3 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (uint64_t *)(v2 + 16 * i);
      if ((unint64_t)(*v9 + 1) >= 2)
      {
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 8);
        else
          v11 = 0;
        v12 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*v9);
        v13 = 0;
        do
        {
          v14 = v12 & v11;
          v12 = ++v13 + v14;
        }
        while (*(_QWORD *)(v10 + 16 * v14));
        *(_OWORD *)(v10 + 16 * v14) = *(_OWORD *)v9;
      }
    }
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = result;
  v5 = *result;
  if (*result
    || (v27 = a2,
        result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand(result, 0), a2 = v27, (v5 = *v3) != 0))
  {
    v6 = 0;
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v8 = 0;
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v7;
    v16 = (uint64_t *)(v5 + 8 * v15);
    v17 = *v16;
    if (!*v16)
    {
      if (v8)
      {
        *v8 = 0;
        --*(_DWORD *)(*v3 - 16);
        v9 = *a2;
        v16 = v8;
      }
      *a2 = 0;
      result = (uint64_t *)*v16;
      *v16 = v9;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      v18 = *v3;
      if (*v3)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v3;
      if (*v3)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_17;
      }
      else
      {
        if (3 * v23 > 4 * v22)
        {
LABEL_17:
          v24 = v20 + 8 * v23;
          v25 = 1;
          goto LABEL_18;
        }
        if (!(_DWORD)v23)
        {
          v26 = 8;
LABEL_27:
          result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v3, v26, v16);
          v16 = result;
          v20 = *v3;
          if (*v3)
            v23 = *(unsigned int *)(v20 - 4);
          else
            v23 = 0;
          goto LABEL_17;
        }
      }
      if (6 * *(_DWORD *)(v20 - 12) >= (2 * v23))
        v26 = 2 * v23;
      else
        v26 = *(_DWORD *)(v20 - 4);
      goto LABEL_27;
    }
    if (v17 == -1)
    {
      v8 = (uint64_t *)(v5 + 8 * v15);
      goto LABEL_7;
    }
    if (v17 == v9)
      break;
LABEL_7:
    v13 = i + v15;
  }
  if ((v6 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v5 - 4);
  v25 = 0;
  v24 = v5 + 8 * v28;
LABEL_18:
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v3 - 12) >= 2 * v4)
      v4 *= 2;
  }
  else
  {
    v4 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  int v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          if (*(_QWORD *)(v15 + 8 * v20))
          {
            v25 = 1;
            do
              v20 = ((_DWORD)v20 + v25++) & v16;
            while (*(_QWORD *)(v15 + 8 * v20));
          }
          v21 = (_QWORD *)(v15 + 8 * v20);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::Style::PseudoClassChangeInvalidation *WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation(WebCore::Style::PseudoClassChangeInvalidation *this, unsigned __int8 **a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)this + 2, a2 + 2);
  WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)this + 3, a2 + 3);
  return this;
}

uint64_t WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>(uint64_t a1, unint64_t a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t *WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v5;
  unsigned int v7;
  uint64_t Table;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t matched;
  uint64_t v15;
  unsigned __int8 v16;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      Table = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::allocateTable(v7);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::begin(a2);
      v10 = v9;
      v12 = v11;
      v13 = *a2 ? (uint64_t)&(*a2)[32 * *((unsigned int *)*a2 - 1)] : 0;
      if ((unsigned __int8 *)v13 != v9)
      {
        do
        {
          matched = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::Style::MatchElement>>,WebCore::Style::MatchElement>(a1, v10);
          v15 = (uint64_t)(v10 + 8);
          v16 = *v10;
          v10 += 32;
          *(_BYTE *)matched = v16;
          WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(matched + 8), v15);
          while (v10 != v12)
          {
            if (*v10 < 0xFEu)
              goto LABEL_12;
            v10 += 32;
          }
          v10 = v12;
LABEL_12:
          ;
        }
        while (v10 != (unsigned __int8 *)v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = v3 + 40;
    do
    {
      *(_BYTE *)(v5 - 24) = -1;
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 1;
      v5 += 32;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::Style::MatchElement>>,WebCore::Style::MatchElement>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(v2 + 32 * v7) != 255);
  return v2 + 32 * v7;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  if ((unsigned int *)a2 != a1)
  {
    v4 = (void *)*(unsigned int *)(a2 + 12);
    if (a1[3] > v4)
    {
      WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    else if (v4 > a1[2])
    {
      WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
    }
    std::copy_n[abi:sn180100]<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>> const*,unsigned long,WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>*,0>(*(WebCore::Style::RuleSet ***)a2, (void *)a1[3], *(WebCore::Style::RuleSet ***)a1);
    v5 = a1[3];
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
      v8 = (_DWORD **)(*(_QWORD *)a2 + 8 * v5);
      v9 = 8 * v6 - 8 * v5;
      do
      {
        v10 = *v8;
        if (*v8)
          ++*v10;
        *v7++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    a1[3] = v6;
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*result == 1)
        {
          WebCore::Style::RuleSet::~RuleSet((WebCore::Style::RuleSet *)result, a2);
          result = (unsigned int *)WTF::fastFree(v7, v8);
        }
        else
        {
          --*result;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

WebCore::Style::RuleSet **std::copy_n[abi:sn180100]<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>> const*,unsigned long,WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>*,0>(WebCore::Style::RuleSet **a1, void *a2, WebCore::Style::RuleSet **a3)
{
  uint64_t v5;
  WebCore::Style::RuleSet *v6;
  WebCore::Style::RuleSet *v7;
  WTF *v8;
  void *v9;

  if (a2)
  {
    v5 = 8 * (_QWORD)a2;
    do
    {
      v6 = *a1;
      if (*a1)
        ++*(_DWORD *)v6;
      v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v7, a2);
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      ++a1;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return a3;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (result[2] > a2)
  {
    v3 = (uint64_t)result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    v4 = *(WTF **)v3;
    v5 = *(WTF **)v3;
    if (a2)
    {
      v7 = *(unsigned int *)(v3 + 8);
      if (v7 >= a2)
        v8 = a2;
      else
        v8 = *(unsigned int *)(v3 + 8);
      if ((_DWORD)v7 && v8 >= 2)
      {
        *(_DWORD *)(v3 + 8) = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      v9 = *(unsigned int *)(v3 + 12);
      WTF::VectorBuffer<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v3, a2);
      result = *(unsigned int **)v3;
      v5 = v4;
      if (*(WTF **)v3 != v4)
      {
        result = (unsigned int *)memcpy(result, v4, 8 * v9);
        v5 = *(WTF **)v3;
      }
    }
    if ((WTF *)(v3 + 16) != v4 && v4 != 0)
    {
      if (v5 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = (unsigned int *)WTF::fastFree(v4, (void *)a2);
      v5 = *(WTF **)v3;
    }
    if (!v5)
    {
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 1;
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
LABEL_5:
    memcpy(v6, v4, 8 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unsigned __int8 **v4;
  WebCore::Style::PseudoClassChangeInvalidation *v5;
  WebCore::Style::PseudoClassChangeInvalidation *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1959AD868);
    }
    v4 = *(unsigned __int8 ***)a1;
    v5 = (WebCore::Style::PseudoClassChangeInvalidation *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = (WebCore::Style::PseudoClassChangeInvalidation *)WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::Style::PseudoClassChangeInvalidation>::move(v4, v5, v6);
    if (v4)
    {
      if (*(unsigned __int8 ***)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::Style::PseudoClassChangeInvalidation>::move(unsigned __int8 **a1, WebCore::Style::PseudoClassChangeInvalidation *a2, WebCore::Style::PseudoClassChangeInvalidation *this)
{
  unsigned __int8 **v5;
  void *v6;

  if (a1 != (unsigned __int8 **)a2)
  {
    v5 = a1;
    do
    {
      WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation(this, v5);
      WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)v5, v6);
      this = (WebCore::Style::PseudoClassChangeInvalidation *)((char *)this + 32);
      v5 += 4;
    }
    while (v5 != (unsigned __int8 **)a2);
  }
}

uint64_t WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Style::PseudoClassChangeInvalidation *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::Style::PseudoClassChangeInvalidation **)a1;
    v7 = 32 * v3;
    do
    {
      WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation(v6, a2);
      v6 = (WebCore::Style::PseudoClassChangeInvalidation *)(v8 + 32);
      v7 -= 32;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_34;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_34:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(v11 + 16));
  memset((void *)(v12 + 16), 255, v11);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[v14];
    if (*((_DWORD *)v13 - 3))
    {
      v16 = *a2;
      if ((_DWORD)v14)
      {
        v16 = *a2;
        while (*v16 >= 0xFEu)
        {
          ++v16;
          if (!--v14)
          {
            v16 = v15;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v16 = &v13[v14];
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = &v13[v14];
LABEL_19:
  if (v13)
    v13 += *((unsigned int *)v13 - 1);
  while (v16 != v13)
  {
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 8);
    else
      v18 = 0;
    v19 = 0;
    v20 = *v16;
    v21 = 9 * ((~(v20 << 15) + v20) ^ ((~(v20 << 15) + v20) >> 10));
    v22 = ((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) >> 16);
    do
    {
      v23 = v22 & v18;
      v22 = ++v19 + v23;
    }
    while (*(unsigned __int8 *)(v17 + v23) != 255);
    *(_BYTE *)(v17 + v23) = v20;
    v24 = v16 + 1;
    v16 = v15;
    if (v24 != v15)
    {
      v16 = v24;
      while (*v16 >= 0xFEu)
      {
        if (++v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_10CachedFontEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_10CachedFontEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t **WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::~HashTable(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != -1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            v8 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
            WTF::fastFree(v8, v9);
            v6 = *v5;
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;

  *a2 = *a3;
  v3 = (_DWORD *)a3[1];
  if (v3)
    *v3 += 2;
  a2[1] = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)a3;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          if (*v8)
            *v10 += 2;
          *v6++ = v10;
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
  }
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;
  __int128 v5;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a3 + 48);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS13_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEERKS1B_EEEDcS13_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3->n128_u64[0];
  if (a3->n128_u64[0])
    *(_DWORD *)(v3 + 24) += 2;
  a2->n128_u64[0] = v3;
  result = a3[1];
  a2[1] = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  *a2 = *a3;
  v3 = a3[1];
  a3[1] = 0;
  a2[1] = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = a3->n128_u64[0];
  a3->n128_u64[0] = 0;
  a2->n128_u64[0] = v3;
  result = a3[1];
  v5 = a3[2];
  a2[3].n128_u8[0] = a3[3].n128_u8[0];
  a2[1] = result;
  a2[2] = v5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS9_SC_SG_SK_SR_SS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3->n128_u64[0];
  a3->n128_u64[0] = 0;
  a2->n128_u64[0] = v3;
  result = a3[1];
  a2[1] = result;
  return result;
}

uint64_t WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  char v14;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 160 * v3;
    do
    {
      v6 = (WTF *)*((_QWORD *)v4 + 14);
      if ((WTF *)((char *)v4 + 128) != v6 && v6 != 0)
      {
        *((_QWORD *)v4 + 14) = 0;
        *((_DWORD *)v4 + 30) = 0;
        WTF::fastFree(v6, a2);
      }
      v8 = *((unsigned int *)v4 + 24);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v8])(&v14, (char *)v4 + 32);
      *((_DWORD *)v4 + 24) = -1;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(*(_QWORD *)v4 + 8) = 0;
        v9 = *(unsigned int **)v4;
        *(_QWORD *)v4 = 0;
        if (v9)
        {
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)v4 = 0;
      }
      v4 = (WTF *)((char *)v4 + 160);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DeviceOrientationEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33A35A8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeviceOrientationEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A35A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DeviceOrientationEvent::requestPermission(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>> &&)::$_0,void,WebCore::DeviceOrientationOrMotionPermissionState>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unsigned __int8 v8[8];
  WTF::StringImpl *v9;
  objc_class *v10;

  if ((_DWORD)a2 != 2)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::DeviceOrientationOrMotionPermissionState>>(*(_QWORD *)(a1 + 8), a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)(a1 + 8);
  v10 = 0;
  v8[0] = 31;
  if (v7)
    *(_DWORD *)v7 += 2;
  v9 = v7;
  WebCore::DeferredPromise::reject(v3, v8, 0, &v10);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

unsigned int *WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WebCore::UndoManager *WTF::RefCounted<WebCore::UndoManager>::deref(WebCore::UndoManager *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::UndoManager::~UndoManager(result, a2);
    return (WebCore::UndoManager *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::TextResourceDecoder *WTF::RefCounted<WebCore::TextResourceDecoder>::deref(WebCore::TextResourceDecoder *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::TextResourceDecoder::~TextResourceDecoder(result, a2);
    return (WebCore::TextResourceDecoder *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::HighlightRange *WTF::RefCounted<WebCore::HighlightRange>::deref(WebCore::HighlightRange *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::HighlightRange::~HighlightRange(result, a2);
    return (WebCore::HighlightRange *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(uint64_t *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  if (!*a1)
    return 0;
  if (*((_DWORD *)v1 - 3))
    return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::makeIterator(a1, v1);
  return &v1[6 * *((unsigned int *)v1 - 1)];
}

_QWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::makeIterator(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 4);
  else
    v4 = 0;
  v5 = (_QWORD *)(v3 + 48 * v4);
  if (v5 != a2)
  {
    while (1)
    {
      v6 = a2[2];
      if (*a2 | a2[1] | v6 && v6 != -1)
        break;
      a2 += 6;
      if (a2 == v5)
        return v5;
    }
  }
  return a2;
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand()
{
  int v0;

  if (WebCore::Document::allDocumentsMap(void)::documents
    && (v0 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4)) != 0)
  {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v0 << (6 * *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;

  v2 = WebCore::Document::allDocumentsMap(void)::documents;
  if (WebCore::Document::allDocumentsMap(void)::documents)
  {
    v3 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
    v4 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(48 * a1 + 16));
  if (a1)
  {
    v7 = a1;
    v8 = result + 12;
    do
    {
      *(v8 - 4) = 0;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *v8 = 0;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  v9 = &dword_1ECE90000;
  WebCore::Document::allDocumentsMap(void)::documents = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    while (1)
    {
      v12 = (unint64_t *)(v2 + 48 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        v14 = *v12;
        v15 = v12[1];
        if (v13)
          v16 = 0;
        else
          v16 = *(_OWORD *)v12 == 0;
        if (!v16)
        {
          v21 = *((_QWORD *)v9 + 157);
          if (v21)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = 0;
          v24 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15 - 1640531527);
          v25 = (v15 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v15) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v15) + (v24 >> 11));
          v26 = (v14 >> 5) & 0x7FFF800 ^ ((v25 + (unsigned __int16)v14 + (v25 >> 11)) << 16) ^ (v25 + (unsigned __int16)v14 + (v25 >> 11));
          v27 = (v14 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v14) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v14) + (v26 >> 11));
          v28 = (v27 + (v27 >> 11)) ^ (8 * (v27 + (v27 >> 11)));
          v29 = (v28 + (v28 >> 5)) ^ (4 * (v28 + (v28 >> 5)));
          v30 = (v29 + (v29 >> 15)) ^ ((v29 + (v29 >> 15)) << 10);
          if (v30)
            v31 = v30;
          else
            v31 = 0x800000;
          do
          {
            v32 = v31 & v22;
            v33 = v21 + 48 * (v31 & v22);
            v31 = ++v23 + (v31 & v22);
          }
          while (*(_OWORD *)v33 != 0 || *(_QWORD *)(v33 + 16) != 0);
          v35 = v21 + 48 * v32;
          v38 = *(_QWORD *)(v35 + 32);
          v37 = (_QWORD *)(v35 + 32);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            do
            {
              v43 = __ldaxr((unsigned int *)v36);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, (unsigned int *)v36));
            if (!v44)
            {
              atomic_store(1u, (unsigned int *)v36);
              v45 = *(unsigned int *)(v36 + 28);
              if ((_DWORD)v45)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v45));
              v46 = *(WTF **)(v36 + 16);
              if (v46)
              {
                *(_QWORD *)(v36 + 16) = 0;
                *(_DWORD *)(v36 + 24) = 0;
                WTF::fastFree(v46, v6);
              }
              WTF::fastFree((WTF *)v36, v6);
              v9 = &dword_1ECE90000;
            }
          }
          v39 = *((_OWORD *)v12 + 1);
          *(_OWORD *)v33 = *(_OWORD *)v12;
          *(_OWORD *)(v33 + 16) = v39;
          v40 = v2 + 48 * v10;
          v41 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          *v37 = v41;
          v18 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          if (!v18)
            goto LABEL_15;
          do
          {
            v42 = __ldaxr((unsigned int *)v18);
            v20 = --v42 == 0;
          }
          while (__stlxr(v42, (unsigned int *)v18));
          goto LABEL_32;
        }
        v17 = v2 + 48 * v10;
        v18 = *(_QWORD *)(v17 + 32);
        *(_QWORD *)(v17 + 32) = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr((unsigned int *)v18);
            v20 = --v19 == 0;
          }
          while (__stlxr(v19, (unsigned int *)v18));
LABEL_32:
          if (v20)
          {
            atomic_store(1u, (unsigned int *)v18);
            v47 = *(unsigned int *)(v18 + 28);
            if ((_DWORD)v47)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v47));
            v48 = *(WTF **)(v18 + 16);
            if (v48)
            {
              *(_QWORD *)(v18 + 16) = 0;
              *(_DWORD *)(v18 + 24) = 0;
              WTF::fastFree(v48, v6);
            }
            WTF::fastFree((WTF *)v18, v6);
            v9 = &dword_1ECE90000;
          }
        }
      }
LABEL_15:
      if (++v10 == v11)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::Document(WebCore::LocalFrame *,WebCore::Settings const&,WTF::URL const&,WTF::OptionSet<WebCore::Document::DocumentClass>,WTF::OptionSet<WebCore::Document::ConstructionFlag>,WebCore::ProcessQualified<WTF::UUID>)::$_0,void>::call(uint64_t a1)
{
  return WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(a1 + 8));
}

uint64_t WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::destroyAll(unint64_t *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = a1[1];
  result = a1[2];
  v6 = (uint64_t *)(result + 8 * v4);
  if (v3 > v4)
  {
    v12 = a1;
    WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(result, (uint64_t *)(result + 8 * v4));
    return WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(v12[2] + 8 * *v12, (uint64_t *)(v12[2] + 8 * *((unsigned int *)v12 + 6)));
  }
  else if (v3 != v4)
  {
    v7 = (uint64_t *)(result + 8 * v3);
    do
    {
      result = *v7;
      *v7 = 0;
      if (result)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)result);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)result));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)result);
          v10 = *(unsigned int *)(result + 28);
          if ((_DWORD)v10)
          {
            v14 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
            result = v14;
          }
          v11 = *(WTF **)(result + 16);
          if (v11)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v13 = result;
            WTF::fastFree(v11, a2);
            result = v13;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr((unsigned int *)result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, (unsigned int *)result));
        if (!v5)
        {
          atomic_store(1u, (unsigned int *)result);
          v6 = *(unsigned int *)(result + 28);
          if ((_DWORD)v6)
          {
            v9 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
            result = v9;
          }
          v7 = *(WTF **)(result + 16);
          if (v7)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v8 = result;
            WTF::fastFree(v7, a2);
            result = v8;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WebCore::IntersectionObserver *WTF::RefCounted<WebCore::IntersectionObserver>::deref(WebCore::IntersectionObserver *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::IntersectionObserver::~IntersectionObserver(result);
    return (WebCore::IntersectionObserver *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::GCReachableRefMap **WebCore::GCReachableRef<WebCore::ContainerNode,void>::~GCReachableRef(WebCore::GCReachableRefMap **a1, WebCore::EventTarget *a2)
{
  WebCore::GCReachableRefMap *v3;
  void *v4;
  WebCore::GCReachableRefMap *v5;

  v3 = *a1;
  if (v3)
  {
    WebCore::GCReachableRefMap::remove(v3, a2);
    v5 = *a1;
    *a1 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v4);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebCore::ResizeObserver *WTF::RefCounted<WebCore::ResizeObserver>::deref(WebCore::ResizeObserver *result, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::ResizeObserver::~ResizeObserver(result, a2);
    return (WebCore::ResizeObserver *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

BOOL WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  _BOOL8 result;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _BOOL8 v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (v4)
    {
      v5 = 0;
      v6 = v4 - 1;
      do
      {
        v7 = (_QWORD *)(v3 + 16 * v6);
        if ((unint64_t)(*v7 + 1) >= 2 && !*(_QWORD *)(*v7 + 8))
        {
          WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>>::customDeleteBucket(v7, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v3 = *(_QWORD *)a1;
      result = v5 != 0;
      if (v5)
      {
        *(_DWORD *)(v3 - 16) += v5;
        v15 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v5;
        v3 = *(_QWORD *)a1;
      }
      if (!v3)
        goto LABEL_10;
      v12 = *(_DWORD *)(v3 - 4);
      if (v12 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v12)
      {
        v14 = v5 != 0;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v10 = 0;
          result = v14;
          goto LABEL_11;
        }
        result = v14;
LABEL_15:
        v10 = *(_DWORD *)(v3 - 12);
        v11 = 0x7FFFFFFF;
        if (v10 >= 0x7FFFFFFF)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    else
    {
      result = 0;
    }
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_15;
  }
  result = 0;
LABEL_10:
  v10 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_11:
  v11 = v10;
LABEL_12:
  *(_DWORD *)(a1 + 12) = 2 * v11;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v8, 0);
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>>::customDeleteBucket(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = a1;
  v3 = *a1;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v3);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v3));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 28);
      v13 = v2;
      if ((_DWORD)v9)
      {
        v12 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v9));
        v3 = v12;
      }
      v10 = *(WTF **)(v3 + 16);
      if (v10)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v11 = v3;
        WTF::fastFree(v10, a2);
        v3 = v11;
      }
      WTF::fastFree((WTF *)v3, a2);
      v2 = v13;
    }
  }
  result = (unsigned int *)v2[1];
  *v2 = -1;
  v2[1] = 0;
  if (result)
  {
    v5 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, (WTF::StringImpl *)a2);
    return (unsigned int *)WTF::fastFree((WTF *)v5, v6);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  WTF *v46;
  _QWORD *result;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 16 * v22);
          v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            v26 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v9);
            WTF::fastFree((WTF *)v26, v27);
            v28 = *v24;
            *v24 = 0;
            if (v28)
            {
              do
              {
                v29 = __ldaxr((unsigned int *)v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, (unsigned int *)v28));
              if (!v30)
              {
                atomic_store(1u, (unsigned int *)v28);
                v48 = *(unsigned int *)(v28 + 28);
                if ((_DWORD)v48)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v48));
                v49 = *(WTF **)(v28 + 16);
                if (v49)
                {
                  *(_QWORD *)(v28 + 16) = 0;
                  *(_DWORD *)(v28 + 24) = 0;
                  WTF::fastFree(v49, v9);
                }
                WTF::fastFree((WTF *)v28, v9);
              }
            }
          }
          else
          {
            *v24 = 0;
          }
          v36 = *v13;
          *v13 = 0;
          *v24 = v36;
          v37 = v5 + 16 * v10;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v24[1] = v38;
          v39 = *(unsigned int **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            v40 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v39, v9);
            WTF::fastFree((WTF *)v40, v41);
          }
          v42 = *v13;
          *v13 = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr((unsigned int *)v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, (unsigned int *)v42));
            if (!v44)
            {
              atomic_store(1u, (unsigned int *)v42);
              v45 = *(unsigned int *)(v42 + 28);
              if ((_DWORD)v45)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v42 + 16), (WTF::StringImpl *)(*(_QWORD *)(v42 + 16) + 32 * v45));
              v46 = *(WTF **)(v42 + 16);
              if (v46)
              {
                *(_QWORD *)(v42 + 16) = 0;
                *(_DWORD *)(v42 + 24) = 0;
                WTF::fastFree(v46, v9);
              }
              WTF::fastFree((WTF *)v42, v9);
            }
          }
          if (v13 == a3)
            v11 = v24;
        }
      }
      else
      {
        v31 = (unsigned int *)v13[1];
        v13[1] = 0;
        if (v31)
        {
          v32 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31, v9);
          WTF::fastFree((WTF *)v32, v33);
          v14 = *v13;
        }
        *v13 = 0;
        if (v14)
        {
          do
          {
            v34 = __ldaxr((unsigned int *)v14);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, (unsigned int *)v14));
          if (!v35)
          {
            atomic_store(1u, (unsigned int *)v14);
            v50 = *(unsigned int *)(v14 + 28);
            if ((_DWORD)v50)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v50));
            v51 = *(WTF **)(v14 + 16);
            if (v51)
            {
              *(_QWORD *)(v14 + 16) = 0;
              *(_DWORD *)(v14 + 24) = 0;
              WTF::fastFree(v51, v9);
            }
            WTF::fastFree((WTF *)v14, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  BOOL v9;

  v3 = result;
  if (result > (WTF::StringImpl *)a3)
    return WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::move(result, a2, a3);
  if (a2 != result)
  {
    result = (WTF::StringImpl *)((char *)a2 - 24);
    v4 = &a3[3 * ((a2 - v3) / 24) - 1];
    do
    {
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)result = 0;
      *(v4 - 2) = v5;
      v6 = (WTF::StringImpl *)*((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = 0;
      *(v4 - 1) = v6;
      v7 = (WTF::StringImpl *)*((_QWORD *)result + 2);
      *((_QWORD *)result + 2) = 0;
      *v4 = v7;
      v4 -= 3;
      WebCore::QuerySelectorAllResults::Entry::~Entry(result, a2);
      v9 = v8 == v3;
      result = (WTF::StringImpl *)((char *)v8 - 24);
    }
    while (!v9);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = (WTF::StringImpl **)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[2];
      v5[2] = 0;
      a3[2] = v8;
      v9 = v5[2];
      v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
        else
          --*((_DWORD *)v10 + 4);
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::QuerySelectorAllResults::Entry>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  v9 = result[2];
  result[2] = 0;
  v6[2] = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  WTF::StringImpl **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl **v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v9 < 9)
      {
        v11 = (WTF::StringImpl **)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_28;
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
LABEL_28:
        WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::move(v5, v6, v11);
        if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF::StringImpl **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1959AF1A8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v14 = a2;
  if (v14 > v12)
  {
    v15 = *(_DWORD *)(a1 + 12);
    if (v14 < 9)
    {
      v17 = (WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v14 >= 0xAAAAAAB)
        goto LABEL_35;
      v16 = 24 * v14;
      v17 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v17;
    }
    WTF::VectorMover<false,WebCore::QuerySelectorAllResults::Entry>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v15), v17);
    if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(void **)(v2 + 16 * v8);
    if (v11 != (void *)-1)
    {
      if (!v11)
        return 0;
      if (v11 == a2)
        break;
    }
  }
  if ((_DWORD)v10 == *(_DWORD *)(v2 - 4))
    return 0;
  WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>>::customDeleteBucket((_QWORD *)(v2 + 16 * v10), a2);
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v14 - 12);
    v17 = *(_DWORD *)(v14 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;

  if (*a1)
  {
    v3 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v3 != a2)
      goto LABEL_3;
    return 0;
  }
  if (!a2)
    return 0;
  v3 = 0;
LABEL_3:
  if ((_QWORD *)v3 != a2)
  {
    WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>>::customDeleteBucket(a2, a2);
    ++*(_DWORD *)(*a1 - 16);
    v4 = *a1;
    v5 = *a1 ? *(_DWORD *)(v4 - 12) - 1 : -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *a1;
    if (*a1)
    {
      v8 = 6 * *(_DWORD *)(v6 - 12);
      v9 = *(_DWORD *)(v6 - 4);
      if (v8 < v9 && v9 >= 9)
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v9 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  int8x16_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unsigned __int128 *v44;
  unsigned __int128 *v45;
  unsigned __int128 v46;
  char v47;
  uint64_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v48;
        if (v48)
        {
          v14 = (_BYTE *)(v48 + 20);
          *(_DWORD *)v48 = 2;
          *(_DWORD *)(v48 + 4) = v11;
          *(_QWORD *)(v48 + 8) = v48 + 20;
          *(_DWORD *)(v48 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v14 = *(_BYTE *)a3;
            else
              result = (uint64_t)memcpy((void *)(v48 + 20), a3, a4);
          }
          v15 = &v14[a4];
          if (a5)
          {
            v16 = *(_BYTE **)(a5 + 8);
            v17 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v17)
              {
                if ((_DWORD)v17 == 1)
                  *v15 = *v16;
                else
                  result = (uint64_t)memcpy(&v14[a4], v16, v17);
              }
            }
            else
            {
              if (v17 < 0x10)
              {
                v44 = (unsigned __int128 *)&v14[a4];
              }
              else
              {
                v44 = (unsigned __int128 *)&v15[v17 & 0xFFFFFFF0];
                v45 = (unsigned __int128 *)&v14[a4];
                do
                {
                  v46 = (unsigned __int128)vld2q_s8(v16);
                  v16 += 32;
                  *v45++ = v46;
                }
                while (v45 != v44);
              }
              while (v44 != (unsigned __int128 *)&v15[v17])
              {
                v47 = *v16;
                v16 += 2;
                *(_BYTE *)v44 = v47;
                v44 = (unsigned __int128 *)((char *)v44 + 1);
              }
            }
            v18 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v18 = 0;
          }
          v15[v18] = a6;
        }
        goto LABEL_43;
      }
LABEL_45:
      v13 = 0;
      goto LABEL_43;
    }
LABEL_44:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_43;
  }
  if (!(_DWORD)result)
    goto LABEL_44;
  if (result > 0x7FFFFFEF)
    goto LABEL_45;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v48;
  if (v48)
  {
    v19 = (char *)(v48 + 20);
    *(_DWORD *)v48 = 2;
    *(_DWORD *)(v48 + 4) = v11;
    *(_QWORD *)(v48 + 8) = v48 + 20;
    *(_DWORD *)(v48 + 16) = 0;
    v20 = (char *)(v48 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v21 = &v19[2 * (a4 & 0xFFFFFFC0)];
      v22 = 0uLL;
      do
      {
        v49.val[0] = (int8x16_t)*a3;
        v23 = *((int8x16_t *)a3 + 1);
        v51.val[0] = (int8x16_t)a3[2];
        v24 = a3[3];
        a3 += 4;
        v25 = v24;
        v51.val[1] = 0uLL;
        v53.val[0] = v23;
        v49.val[1] = 0uLL;
        v26 = v19;
        vst2q_s8(v26, v49);
        v26 += 32;
        v53.val[1] = 0uLL;
        vst2q_s8(v26, v53);
        v27 = v19 + 64;
        vst2q_s8(v27, v51);
        v28 = v19 + 96;
        vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
        v19 += 128;
      }
      while (v19 != v21);
      v19 = v21;
    }
    while (v19 != v20)
    {
      v29 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v19 = v29;
      v19 += 2;
    }
    if (a5)
    {
      v30 = *(int8x16_t **)(a5 + 8);
      v31 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v32 = &v20[2 * v31];
        if (v31 >= 0x40)
        {
          v33 = &v20[2 * (v31 & 0xFFFFFFC0)];
          v35 = 0uLL;
          v36 = v48 + 20 + 2 * a4;
          do
          {
            v50.val[0] = *v30;
            v37 = v30[1];
            v52.val[0] = v30[2];
            v38 = v30[3];
            v30 += 4;
            v39 = v38;
            v52.val[1] = 0uLL;
            v54.val[0] = v37;
            v50.val[1] = 0uLL;
            v40 = (char *)v36;
            vst2q_s8(v40, v50);
            v40 += 32;
            v54.val[1] = 0uLL;
            vst2q_s8(v40, v54);
            v41 = (char *)(v36 + 64);
            vst2q_s8(v41, v52);
            v42 = (char *)(v36 + 96);
            vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
            v36 += 128;
          }
          while ((char *)v36 != v33);
        }
        else
        {
          v33 = (char *)(v48 + 20 + 2 * a4);
        }
        while (v33 != v32)
        {
          v43 = v30->u8[0];
          v30 = (int8x16_t *)((char *)v30 + 1);
          *(_WORD *)v33 = v43;
          v33 += 2;
        }
      }
      else if ((_DWORD)v31 == 1)
      {
        *(_WORD *)v20 = v30->i16[0];
      }
      else if ((_DWORD)v31)
      {
        result = (uint64_t)memcpy((void *)(v48 + 20 + 2 * a4), v30, 2 * v31);
      }
      v34 = *(unsigned int *)(a5 + 4);
    }
    else
    {
      v34 = 0;
    }
    *(_WORD *)&v20[2 * v34] = a6;
  }
LABEL_43:
  *a7 = v13;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::updateTitle(WebCore::StringWithDirection const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33A3630;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::updateTitle(WebCore::StringWithDirection const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A3630;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::Document::updateTitle(WebCore::StringWithDirection const&)::$_0,void>::call(uint64_t *result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = result[2];
  *(_BYTE *)(v3 + 3422) = 0;
  v4 = *(_QWORD *)(v3 + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_DWORD **)(*(_QWORD *)(v5 + 280) + 88);
      if (v6)
      {
        if (*(_QWORD *)(v5 + 296) == v3)
        {
          ++v6[6];
          result = WebCore::DocumentLoader::setTitle((uint64_t)v6, v3 + 1448, a3);
          if (v6[6] == 1)
            return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
          else
            --v6[6];
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::TitleTraits<WebCore::HTMLTitleElement>::findTitleElement(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  __int16 v4;
  BOOL v5;

  v1 = a1[10];
  if (!v1)
    return 0;
  while (1)
  {
    result = (_QWORD *)v1;
    v4 = *(_WORD *)(v1 + 28);
    if ((v4 & 0x10) != 0 && *(_QWORD *)(result[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
      break;
    if ((v4 & 4) != 0)
    {
      v1 = result[10];
      if (v1)
        continue;
    }
    if (result == a1)
      return 0;
    while (1)
    {
      v1 = result[7];
      if (v1)
        break;
      result = (_QWORD *)result[4];
      if (result)
        v5 = result == a1;
      else
        v5 = 1;
      if (v5)
        return 0;
    }
  }
  return result;
}

uint64_t WTF::Mapper<WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::HTMLMediaElement&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *j;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (*a2)
  {
    v2 = *(unsigned int *)(*a2 - 12);
    if ((_DWORD)v2)
    {
      v13 = result;
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        result = WTF::fastMalloc((WTF *)(8 * v2));
        *(_DWORD *)(v13 + 8) = v2;
        *(_QWORD *)v13 = result;
        v3 = (_QWORD *)*a2;
        if (*a2 && *((_DWORD *)v3 - 3))
        {
          v4 = *((unsigned int *)v3 - 1);
          if ((_DWORD)v4)
          {
            v5 = 8 * v4;
            for (i = (_QWORD *)*a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v5 -= 8;
              if (!v5)
                return result;
            }
          }
          else
          {
            i = (_QWORD *)*a2;
          }
          v7 = &v3[v4];
          if (i != v7)
          {
            v8 = *i;
LABEL_15:
            v12 = i;
            result = WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::HTMLMediaElement&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(&v14, *(_QWORD *)(v8 + 8));
            v9 = *(unsigned int *)(v13 + 12);
            *(_QWORD *)(*(_QWORD *)v13 + 8 * v9) = v14;
            *(_DWORD *)(v13 + 12) = v9 + 1;
            for (j = v12 + 1; j != v7; ++j)
            {
              v8 = *j;
              if ((unint64_t)(*j + 1) > 1)
              {
                i = j;
                if (j == v7)
                  return result;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::HTMLMediaElement&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    result = *(_QWORD *)(a2 + 296);
    if (result)
      goto LABEL_14;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v6 = *(unsigned int **)(a2 + 296);
    *(_QWORD *)(a2 + 296) = result;
    if (!v6)
      goto LABEL_14;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    result = *(_QWORD *)(a2 + 296);
    if (result)
    {
LABEL_14:
      do
        v9 = __ldaxr((unsigned int *)result);
      while (__stlxr(v9 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::forEachMediaElement(WTF::Function<void ()(WebCore::HTMLMediaElement &)> const&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *result;
  void *v5;

  v3 = **(_QWORD **)(a1 + 8);
  *(_DWORD *)(a2 + 24) += 2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)a2, v5);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>&&)#1},WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  result = _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, &v25);
  *(_DWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(_DWORD *)(v5 - 12);
    if (v6 >= 0x7FFFFFFF)
      v7 = -2;
    else
      v7 = 2 * v6;
    *(_DWORD *)(a2 + 12) = v7;
    v8 = *(unsigned int *)(v5 - 12);
    if ((_DWORD)v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        result = WTF::fastMalloc((WTF *)(8 * v8));
        *((_DWORD *)a1 + 2) = v8;
        *a1 = result;
        v9 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 && *(_DWORD *)(v9 - 12))
        {
          v10 = *(unsigned int *)(v9 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            for (i = *(uint64_t **)a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v11 -= 8;
              if (!v11)
                return result;
            }
          }
          else
          {
            i = *(uint64_t **)a2;
          }
          v13 = (uint64_t *)(v9 + 8 * v10);
          if (i != v13)
          {
            v14 = *i;
LABEL_19:
            if (*(_QWORD *)(v14 + 8))
            {
              v15 = *(_DWORD *)(a2 + 8);
              v16 = *a1;
              v17 = *((unsigned int *)a1 + 3);
              v19 = *i;
              v18 = i + 1;
              v20 = *(_QWORD *)(v19 + 8);
              *(_DWORD *)(v20 + 24) += 2;
              v21 = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17) = v20;
LABEL_21:
              if (v18 != v13)
              {
                while (1)
                {
                  v22 = *v18;
                  if ((unint64_t)(*v18 + 1) <= 1)
                  {
                    ++v18;
                    goto LABEL_21;
                  }
LABEL_24:
                  if (v18 == v13)
                    goto LABEL_35;
                  v23 = *(_QWORD *)(v22 + 8);
                  if (!v23)
                    break;
                  ++v15;
                  *(_DWORD *)(v23 + 24) += 2;
                  v24 = v21 + 1;
                  *(_QWORD *)(v16 + 8 * v21) = v23;
                  ++v18;
                  ++v21;
                  if (v18 == v13)
                    goto LABEL_36;
                }
                while (++v18 != v13)
                {
                  v22 = *v18;
                  if ((unint64_t)(*v18 + 1) > 1)
                    goto LABEL_24;
                }
              }
LABEL_35:
              v24 = v21;
LABEL_36:
              *((_DWORD *)a1 + 3) = v24;
              *(_DWORD *)(a2 + 8) = v15 + 1;
            }
            else
            {
              while (++i != v13)
              {
                v14 = *i;
                if ((unint64_t)(*i + 1) > 1)
                {
                  if (i == v13)
                    return result;
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 12) = 0;
  }
  return result;
}

uint64_t WTF::containerSize<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  char v6;

  _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v6);
  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v2 - 12);
    if (v4 >= 0x7FFFFFFF)
      v5 = -2;
    else
      v5 = 2 * v4;
    *(_DWORD *)(a1 + 12) = v5;
    return *(unsigned int *)(v2 - 12);
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::write(WebCore::Document*,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &&,WTF::ASCIILiteral)::$_0,WebCore::Document::write(WebCore::Document*,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::write(WebCore::Document*,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &&,WTF::ASCIILiteral)::$_0,WebCore::Document::write(WebCore::Document*,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>> &&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String> &&>@<X0>(_BYTE ***result@<X0>, _DWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;

  v3 = *a2;
  ***result = 0;
  if (v3)
    *v3 += 2;
  *a3 = v3;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::documentURI(void)::$_0,WebCore::Document::documentURI(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::documentURI(void)::$_0,WebCore::Document::documentURI(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::fallbackBaseURL(void)::$_0,WebCore::Document::fallbackBaseURL(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[5];

  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  MEMORY[0x19AEA52F8](a2, v6, a1, 0);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::fallbackBaseURL(void)::$_0,WebCore::Document::fallbackBaseURL(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::URL> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::didRemoveAllPendingStylesheet(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E33A36B0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didRemoveAllPendingStylesheet(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A36B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didRemoveAllPendingStylesheet(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::LocalFrameView *v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(v1 + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(WebCore::LocalFrameView **)(v3 + 288);
      if (v4)
      {
        ++*((_DWORD *)v4 + 2);
        result = WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v1 + 1328));
        if (!(_DWORD)result || *(_BYTE *)(v1 + 3379))
          result = WebCore::LocalFrameView::scrollToFragment(v4, (const WTF::URL *)(v1 + 736));
        else
          *(_BYTE *)(v1 + 3396) = 1;
        if (*((_DWORD *)v4 + 2) == 1)
          return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 8))(v4);
        else
          --*((_DWORD *)v4 + 2);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::processViewport(WTF::String const&,WebCore::ViewportArguments::Type)::$_0,void,WTF::StringView,WTF::StringView>::call(uint64_t a1, int16x8_t *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E33A8AB0;
  v10[1] = v9;
  v12 = v10;
  WebCore::setViewportFeature(v9 + 2192, a2, a3, a4, a5, (uint64_t)&v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLMetaElement&>(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    v3[2] = v8;
    *(_QWORD *)v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = (WTF *)((char *)v9 + 8 * v5);
      v13 = v9;
      do
      {
        v14 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)v15);
            v18 = *(unsigned int *)(v15 + 28);
            if ((_DWORD)v18)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v18));
            v19 = *(WTF **)(v15 + 16);
            if (v19)
            {
              *(_QWORD *)(v15 + 16) = 0;
              *(_DWORD *)(v15 + 24) = 0;
              WTF::fastFree(v19, v10);
            }
            WTF::fastFree((WTF *)v15, v10);
          }
        }
        v11 = (WTF *)((char *)v11 + 8);
        v13 = (WTF *)((char *)v13 + 8);
      }
      while (v13 != v12);
      v11 = *(WTF **)v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = v11;
    }
  }
  v20 = v3[3];
  result = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a2);
  if (result)
  {
    do
      v21 = __ldaxr(result);
    while (__stlxr(v21 + 1, result));
  }
  *((_QWORD *)v9 + v20) = result;
  ++v3[3];
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::processColorScheme(WTF::String const&)::$_0,void,WTF::StringView>::call(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  _BYTE *v5;
  char v6;
  int v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;

  if (a3 == 4)
  {
    if ((a3 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a2 & 0xDF) != 0x41 || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x55 || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x54)
        goto LABEL_2;
      v7 = *(unsigned __int8 *)(a2 + 3);
    }
    else
    {
      if ((*(_WORD *)a2 & 0xFFDF) != 0x41
        || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x55
        || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x54)
      {
        goto LABEL_2;
      }
      v7 = *(unsigned __int16 *)(a2 + 6);
    }
    if ((v7 & 0xFFFFFFDF) == 0x4F)
    {
      **(_BYTE **)(result + 8) = 0;
      v8 = *(_BYTE **)(result + 24);
      **(_BYTE **)(result + 16) = 1;
      *v8 = 1;
      return result;
    }
  }
LABEL_2:
  if (**(_BYTE **)(result + 24))
    return result;
  if (a3 != 5)
  {
    if (a3 != 4)
      return result;
    if ((a3 & 0xFF00000000) != 0)
    {
      v3 = *(_BYTE *)a2 & 0xDF;
      if (v3 == 68)
      {
        if ((*(_BYTE *)(a2 + 1) & 0xDF) != 0x41 || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x52)
          return result;
        v4 = *(unsigned __int8 *)(a2 + 3);
LABEL_11:
        if ((v4 & 0xFFFFFFDF) == 0x4B)
        {
          v5 = *(_BYTE **)(result + 8);
          v6 = *v5 | 2;
LABEL_28:
          *v5 = v6;
          return result;
        }
        return result;
      }
      if (v3 != 79 || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4E || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4C)
        return result;
      v10 = *(unsigned __int8 *)(a2 + 3);
    }
    else
    {
      v11 = *(_WORD *)a2 & 0xFFDF;
      if (v11 == 68)
      {
        if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x41 || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x52)
          return result;
        v4 = *(unsigned __int16 *)(a2 + 6);
        goto LABEL_11;
      }
      if (v11 != 79 || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4E || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4C)
        return result;
      v10 = *(unsigned __int16 *)(a2 + 6);
    }
    if ((v10 & 0xFFFFFFDF) == 0x59)
      **(_BYTE **)(result + 16) = 0;
    return result;
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a2 & 0xDF) != 0x4C
      || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x49
      || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x47
      || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x48)
    {
      return result;
    }
    v9 = *(unsigned __int8 *)(a2 + 4);
  }
  else
  {
    if ((*(_WORD *)a2 & 0xFFDF) != 0x4C
      || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x49
      || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x47
      || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x48)
    {
      return result;
    }
    v9 = *(unsigned __int16 *)(a2 + 8);
  }
  if ((v9 & 0xFFFFFFDF) == 0x54)
  {
    v5 = *(_BYTE **)(result + 8);
    v6 = *v5 | 1;
    goto LABEL_28;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::processFormatDetection(WTF::String const&)::$_0,void,WTF::StringView,WTF::StringView>::call(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;

  if ((_DWORD)a3 == 9)
  {
    if ((a3 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a2 & 0xDF) != 0x54
        || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x50
        || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x48
        || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x4F
        || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x4E)
      {
        return result;
      }
      v5 = *(unsigned __int8 *)(a2 + 8);
    }
    else
    {
      if ((*(_WORD *)a2 & 0xFFDF) != 0x54
        || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x50
        || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x48
        || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x4E)
      {
        return result;
      }
      v5 = *(unsigned __int16 *)(a2 + 16);
    }
    if ((v5 & 0xFFFFFFDF) == 0x45 && (_DWORD)a5 == 2)
    {
      if ((a5 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a4 & 0xDF) != 0x4E)
          return result;
        v6 = *(unsigned __int8 *)(a4 + 1);
      }
      else
      {
        if ((*(_WORD *)a4 & 0xFFDF) != 0x4E)
          return result;
        v6 = *(unsigned __int16 *)(a4 + 2);
      }
      if ((v6 & 0xFFFFFFDF) == 0x4F)
        *(_BYTE *)(*(_QWORD *)(result + 8) + 3445) = 0;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  WebCore::GCReachableRef<WebCore::ContainerNode,void>::GCReachableRef((_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_OWORD *WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::EventTarget *,WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTarget *,unsigned int>>,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::EventTarget *>>::rehash(a1, v5, a2);
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::EventTarget *v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (WTF **)result;
        v8 = 8 * v5;
        result = (uint64_t)v4;
        v9 = v4;
        do
        {
          v10 = *(WTF **)result;
          *(_QWORD *)v9 = 0;
          v9 = (WTF *)((char *)v9 + 8);
          *v7++ = v10;
          WebCore::GCReachableRef<WebCore::ContainerNode,void>::~GCReachableRef((WebCore::GCReachableRefMap **)result, v6);
          result = (uint64_t)v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if ((unint64_t)(*v14 + 1) >= 2)
      {
        v15 = WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::reinsert(*a1, v14);
        if (*v14)
          (*(void (**)(uint64_t))(*(_QWORD *)*v14 + 24))(*v14);
        if (v14 == a3)
          v11 = v15;
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = *a2;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v2 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 8 * v7);
    v7 = (v7 + v8++) & v2;
  }
  while (v10);
  result = (_QWORD *)(a1 + 8 * v9);
  *a2 = 0;
  *result = v3;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::updateIsPlayingMedia(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t result, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a2 + 1544))
    v2 = *(_DWORD *)(a2 + 1536) == 0;
  else
    v2 = 0;
  if (v2 && (*(_DWORD *)(a2 + 1265) & 2) != 0)
    ++*(_QWORD *)(*(_QWORD *)(result + 8) + 3216);
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    result = (uint64_t *)*v17;
    *v17 = v10;
    if (result)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 144))(result);
    v19 = *v4;
    if (*v4)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v4;
    if (*v4)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
        goto LABEL_22;
    }
    else if (3 * v24 <= 4 * v23)
    {
      if (!(_DWORD)v24)
      {
        v25 = 8;
LABEL_28:
        result = WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::rehash(v4, v25, v17);
        v17 = result;
        v21 = *v4;
        if (*v4)
          v24 = *(unsigned int *)(v21 - 4);
        else
          v24 = 0;
        goto LABEL_30;
      }
LABEL_22:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
      goto LABEL_28;
    }
LABEL_30:
    v28 = v21 + 8 * v24;
    v27 = 1;
    goto LABEL_31;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v6 - 4);
  v27 = 0;
  v28 = v6 + 8 * v26;
LABEL_31:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 144))(v26);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::~__func(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33A3778;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::~__func(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[1];
  *a1 = &off_1E33A3778;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_1E33A3778;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_1E33A3778;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::destroy(uint64_t a1, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = __p[1];
  __p[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  operator delete(__p);
}

unsigned int *std::__function::__func<WebCore::Document::addCaptureSource(WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&)::$_0,std::allocator<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>> &&>,void ()(WebCore::RealtimeMediaSource&,BOOL)>::operator()(unsigned int *result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *a3;
      v6 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v6 + 2;
      if (!*(_BYTE *)(v4 + 3232))
      {
        if (*(_BYTE *)(a2 + 294))
        {
          v8 = *(_QWORD *)(v4 + 3224);
          if (v8)
          {
            v9 = (uint64_t *)(v4 + 3224);
            v10 = *(_DWORD *)(v8 - 8);
            v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
            v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
            v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
            v14 = v10 & ((v13 >> 31) ^ v13);
            for (i = 1; ; ++i)
            {
              v16 = v14;
              v17 = *(_QWORD *)(v8 + 8 * v14);
              if (v17 != -1)
              {
                if (!v17)
                  goto LABEL_18;
                if (v17 == a2)
                  break;
              }
              v14 = (v16 + i) & v10;
            }
            if ((_DWORD)v16 != *(_DWORD *)(v8 - 4))
            {
              *(_QWORD *)(v8 + 8 * v16) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
              *(_QWORD *)(v8 + 8 * v16) = -1;
              ++*(_DWORD *)(*v9 - 16);
              v19 = *v9;
              v20 = *v9 ? *(_DWORD *)(v19 - 12) - 1 : -1;
              *(_DWORD *)(v19 - 12) = v20;
              v21 = *v9;
              if (*v9)
              {
                v22 = 6 * *(_DWORD *)(v21 - 12);
                v23 = *(_DWORD *)(v21 - 4);
                if (v22 < v23 && v23 >= 9)
                  WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::rehash((uint64_t *)(v4 + 3224), v23 >> 1, 0);
              }
            }
          }
        }
        else if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
          v26 = a2;
          WTF::HashTable<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>,WTF::HashTraits<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>>>::add((uint64_t *)(v4 + 3224), &v26, (uint64_t)&v25);
          v18 = v26;
          v26 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 144))(v18);
        }
LABEL_18:
        result = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v4);
        v6 = *(_DWORD *)(v4 + 24) - 2;
      }
      if (v6)
      {
        *(_DWORD *)(v4 + 24) = v6;
      }
      else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, (void *)a2);
      }
    }
  }
  return result;
}

uint64_t *WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::remove(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (result[1] != a2)
  {
    v3 = result;
    v4 = result[2];
    v5 = (uint64_t *)(v4 + 8 * a2);
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v6);
        v9 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v9)
        {
          v12 = v6;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
          v6 = v12;
        }
        v10 = *(WTF **)(v6 + 16);
        if (v10)
        {
          *(_QWORD *)(v6 + 16) = 0;
          *(_DWORD *)(v6 + 24) = 0;
          v11 = v6;
          WTF::fastFree(v10, (void *)a2);
          v6 = v11;
        }
        WTF::fastFree((WTF *)v6, (void *)a2);
      }
    }
    if (*v3 <= a2)
    {
      result = WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping((uint64_t *)(v4 + 8 * *v3), v5, (uint64_t *)(v4 + 8 * *v3 + 8));
      *v3 = (*v3 + 1) % (unint64_t)*((unsigned int *)v3 + 6);
    }
    else
    {
      result = WTF::VectorMover<false,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::moveOverlapping(v5 + 1, (uint64_t *)(v4 + 8 * v3[1]), v5);
      v3[1] = (v3[1] + (unint64_t)*((unsigned int *)v3 + 6) - 1) % *((unsigned int *)v3 + 6);
    }
  }
  return result;
}

uint64_t WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::expandCapacityIfNeeded(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    ++v1;
  }
  else
  {
    v3 = *(unsigned int *)(a1 + 24);
    if (!v1)
    {
      if ((_DWORD)v3)
        return a1;
      return WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::expandCapacity(a1);
    }
    v2 = v3 - 1;
  }
  if (v1 == v2)
    return WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::expandCapacity(a1);
  return a1;
}

uint64_t WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  WTF *v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x1959B1288);
  }
  v4 = *(WTF **)(a1 + 16);
  v5 = v2 + 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
  *(_DWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 > v7)
  {
    WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move((uint64_t)v4, (uint64_t *)v4 + v7, v6);
    v10 = *(_QWORD *)a1 - v1 + *(unsigned int *)(a1 + 24);
    result = WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move((uint64_t)v4 + 8 * *(_QWORD *)a1, (uint64_t *)v4 + v1, (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10));
    *(_QWORD *)a1 = v10;
  }
  else
  {
    result = WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move((uint64_t)v4 + 8 * *(_QWORD *)a1, (uint64_t *)v4 + v7, &v6[*(_QWORD *)a1]);
  }
  if (v4)
  {
    if (*(WTF **)(a1 + 16) == v4)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
    return WTF::fastFree(v4, v9);
  }
  return result;
}

uint64_t WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::move(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v10)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v11 = *(WTF **)(v7 + 16);
          if (v11)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v11, a2);
          }
          result = WTF::fastFree((WTF *)v7, a2);
        }
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::scheduleDeferredAXObjectCacheUpdate(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33A37C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::scheduleDeferredAXObjectCacheUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A37C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::scheduleDeferredAXObjectCacheUpdate(void)::$_0,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  int v3;
  unsigned int *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  WebCore::Node *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    result = *(unsigned int **)(v2 + 8);
    if (result)
    {
      v3 = result[6];
      result[6] = v3 + 2;
      if (*((_BYTE *)result + 3447))
      {
        *((_BYTE *)result + 3447) = 0;
        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
        {
          v19 = result;
          if (*((_BYTE *)result + 3362) || *((_BYTE *)result + 3405))
          {
            i = result;
            v12 = *((_QWORD *)result + 66);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 8);
              i = result;
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 120);
                i = result;
                if (v14)
                {
                  v15 = *(_QWORD *)(v14 + 8);
                  for (i = result; v15; v15 = *(_QWORD *)(v18 + 8))
                  {
                    i = *(unsigned int **)(*(_QWORD *)(v15 + 40) + 8);
                    v16 = *((_QWORD *)i + 66);
                    if (!v16)
                      break;
                    v17 = *(_QWORD *)(v16 + 8);
                    if (!v17)
                      break;
                    v18 = *(_QWORD *)(v17 + 120);
                    if (!v18)
                      break;
                  }
                }
              }
            }
          }
          else
          {
            i = result;
            v5 = *((_QWORD *)result + 66);
            if (v5)
            {
              v6 = *(_QWORD *)(v5 + 8);
              i = result;
              if (v6)
              {
                v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
                v8 = v7 && *(_BYTE *)(v7 + 144) == 0;
                i = result;
                if (v8)
                {
                  v9 = *(unsigned int **)(v7 + 296);
                  i = result;
                  if (v9)
                    i = v9;
                }
              }
            }
          }
          v10 = (WebCore::Node *)*((_QWORD *)i + 186);
          if (v10)
          {
            ++*((_DWORD *)v10 + 2);
            WebCore::AXObjectCache::performDeferredCacheUpdate(v10, 0);
            v11 = *((_DWORD *)v10 + 2);
            if (!v11)
            {
              __break(0xC471u);
              JUMPOUT(0x1959B1620);
            }
            *((_DWORD *)v10 + 2) = v11 - 1;
            result = v19;
            v3 = v19[6] - 2;
          }
        }
      }
      if (v3)
      {
        result[6] = v3;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_28;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_19;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_25:
      result = WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::rehash(v4, v24, v14);
      v14 = result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_25;
  }
LABEL_27:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_28:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WebCore::LiveNodeList *,WebCore::LiveNodeList *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTraits<WebCore::LiveNodeList *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_15;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (uint64_t *)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)(*v13 + 1) >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v9 = result & v7;
  v10 = (void **)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a2;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == (void *)v12)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 8 * v24;
        goto LABEL_12;
      }
      if (v11 == (void *)-1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (void **)(v6 + 8 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = *a2;
      v10 = v21;
    }
  }
  *v10 = (void *)v12;
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_11;
LABEL_22:
    result = (uint64_t)WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::expand(a1, v10);
    v10 = (void **)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_22;
LABEL_11:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_12:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

uint64_t WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v2 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v2 = 0;
LABEL_4:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 8 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2) & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == *a2)
    {
      return v3 + 8 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 8 * v5);
        ++v7;
        if (v6 == *a2)
          return v3 + 8 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>&&)#1},WTF::Vector<WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;

  v3 = result;
  v4 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_2:
    a2[2] = 0;
LABEL_3:
    a2[3] = 0;
LABEL_4:
    v5 = 0;
    v6 = 0;
    v4 = 0;
    v7 = 0;
    v8 = 0;
    v36 = 0;
    v37 = 0;
    v35 = a2;
    v9 = 1;
    goto LABEL_5;
  }
  v16 = *((unsigned int *)v4 - 1);
  if (!(_DWORD)v16)
    goto LABEL_37;
  v17 = 0;
  do
  {
    while (1)
    {
      v18 = --v16;
      result = v4[v16];
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v4[v16] = 0;
    do
    {
      v19 = __ldaxr((unsigned int *)result);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)result));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)result);
      v33 = v16;
      v34 = v4;
      v32 = v17;
      result = WTF::fastFree((WTF *)result, a2);
      v16 = v33;
      v4 = v34;
      v17 = v32;
    }
    v4[v18] = -1;
    ++v17;
  }
  while (v18);
LABEL_27:
  v4 = *(_QWORD **)a2;
  if (v17)
  {
    *((_DWORD *)v4 - 4) += v17;
    v21 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    *(_DWORD *)(v21 - 12) = v22 - v17;
    v4 = *(_QWORD **)a2;
  }
  if (!v4)
    goto LABEL_2;
  v23 = *((_DWORD *)v4 - 1);
  if (v23 < 9 || 6 * *((_DWORD *)v4 - 3) >= v23)
  {
LABEL_37:
    a2[2] = 0;
  }
  else
  {
    result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v4 = *(_QWORD **)a2;
    a2[2] = 0;
    if (!v4)
      goto LABEL_3;
  }
  v25 = *((_DWORD *)v4 - 3);
  if (v25 >= 0x7FFFFFFF)
    v26 = -2;
  else
    v26 = 2 * v25;
  a2[3] = v26;
  v27 = *((unsigned int *)v4 - 3);
  if ((_DWORD)v27)
  {
    if (v27 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1959B1F08);
    }
    result = WTF::fastMalloc((WTF *)(8 * v27));
    *(_DWORD *)(v3 + 8) = v27;
    *(_QWORD *)v3 = result;
    v4 = *(_QWORD **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_4;
  }
  v28 = *((unsigned int *)v4 - 1);
  v6 = &v4[v28];
  if (*((_DWORD *)v4 - 3))
  {
    v5 = v4;
    if ((_DWORD)v28)
    {
      v29 = 8 * v28;
      v5 = v4;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        ++v5;
        v29 -= 8;
        if (!v29)
        {
          v5 = v6;
          break;
        }
      }
    }
    v35 = a2;
    v36 = v5;
  }
  else
  {
    v35 = a2;
    v36 = &v4[v28];
    v5 = v36;
  }
  v37 = v6;
  v9 = 0;
  v8 = *((unsigned int *)v4 - 1);
  v7 = &v4[v8];
LABEL_5:
  v38 = v7;
  v39 = &v4[v8];
  if (v5 == v7)
  {
    if ((v9 & 1) != 0)
    {
LABEL_7:
      v10 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    if (*(_QWORD *)(*v5 + 8))
    {
      v30 = v5;
    }
    else
    {
      do
      {
        v31 = v5 + 1;
        v5 = v6;
        if (v31 != v6)
        {
          v5 = v31;
          while ((unint64_t)(*v5 + 1) <= 1)
          {
            if (++v5 == v6)
            {
              v5 = v6;
              break;
            }
          }
        }
        v30 = v7;
        if (v5 == v7)
          break;
        v30 = v5;
      }
      while (!*(_QWORD *)(*v5 + 8));
    }
    v36 = v30;
    v5 = v30;
    if ((v9 & 1) != 0)
      goto LABEL_7;
  }
  v10 = &v4[*((unsigned int *)v4 - 1)];
LABEL_8:
  if (v5 != v10)
  {
    v11 = *(_QWORD *)v3;
    v12 = *(_DWORD *)(v3 + 12);
    do
    {
      v14 = *v5;
      v13 = v5 + 1;
      v15 = *(_QWORD *)(v14 + 8);
      ++*(_DWORD *)(v15 + 8);
      *(_QWORD *)(v11 + 8 * v12++) = v15;
      *(_DWORD *)(v3 + 12) = v12;
      v36 = v13;
      while (v13 != v37 && (unint64_t)(*v13 + 1) <= 1)
        v36 = ++v13;
      result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v35);
      v5 = v36;
      ++v35[2];
    }
    while (v5 != v10);
  }
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 6)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 5;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1959B20F4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 6)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 5;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A37E8;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33A37E8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEvent(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEventOnWindow(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A3810;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEventOnWindow(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33A3810;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::Document::queueTaskToDispatchEventOnWindow(WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(WTF *result)
{
  WebCore::EventTarget *v1;

  v1 = *(WebCore::EventTarget **)(*((_QWORD *)result + 1) + 696);
  if (v1)
  {
    ++*((_DWORD *)v1 + 6);
    result = WebCore::EventTarget::dispatchEvent(v1, *((WebCore::Event **)result + 3));
    if (*((_DWORD *)v1 + 6) == 1)
      return (WTF *)(*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)v1 + 72))(v1);
    else
      --*((_DWORD *)v1 + 6);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::enqueueOverflowEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WebCore::EventTarget *a2)
{
  _DWORD *v3;
  WebCore::GCReachableRefMap *v4;
  void *v5;
  uint64_t v6;

  *a1 = off_1E33A3838;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::GCReachableRefMap *)a1[1];
  if (v4)
  {
    WebCore::GCReachableRefMap::remove(v4, a2);
    v6 = a1[1];
    a1[1] = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::enqueueOverflowEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *a1, WebCore::EventTarget *a2)
{
  _DWORD *v3;
  WebCore::GCReachableRefMap *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E33A3838;
  v3 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::GCReachableRefMap *)*((_QWORD *)a1 + 1);
  if (v4)
  {
    WebCore::GCReachableRefMap::remove(v4, a2);
    v5 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::enqueueOverflowEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,unsigned int,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<unsigned int>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,unsigned int>,WTF::AtomString const&,int>(uint64_t a1, WTF::StringImpl *a2, _DWORD *a3)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 8) = *a3;
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,unsigned int>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,unsigned int>,WTF::KeyValuePair<WTF::AtomString,unsigned int>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *result;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  return result;
}

_DWORD *WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(_DWORD *result, _BYTE *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[13];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = result[2];
  if ((v2 & 0x80000000) != 0)
  {
    v13 = -v2;
    v3 = 1;
    do
    {
      ++v3;
      v7 = v13 >= 0xA;
      v13 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    v3 = 0;
    v4 = result[2];
    do
    {
      ++v3;
      v5 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v5);
  }
  v6 = *(_DWORD *)(*(_QWORD *)result + 4);
  v7 = v6 >= v3;
  v8 = v6 - v3;
  if ((_DWORD)v8 != 0 && v7)
  {
    v11 = a2;
    v12 = v8;
    do
    {
      *v11++ = **(_BYTE **)result;
      --v12;
    }
    while (v12);
    v2 = result[2];
  }
  else
  {
    v8 = 0;
  }
  v9 = &a2[v8];
  if ((v2 & 0x80000000) != 0)
    return (_DWORD *)WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-v2, v9);
  v10 = 0;
  do
  {
    v14[v10-- + 12] = (v2 % 0xA) | 0x30;
    v5 = v2 > 9;
    v2 /= 0xAu;
  }
  while (v5);
  if (v10 + 14 <= 13)
    return memcpy(v9, &v14[v10 + 13], -v10);
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unsigned int a6)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *result;
  uint64_t v24;
  _BYTE *v25;
  size_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[13];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31 = a2;
  v32 = a3;
  WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>::writeTo<unsigned char>(&v31, a1);
  v10 = v32;
  if ((v32 & 0x80000000) != 0)
  {
    v29 = -(int)v32;
    v11 = 1;
    do
    {
      ++v11;
      v19 = v29 >= 0xA;
      v29 /= 0xAu;
    }
    while (v19);
  }
  else
  {
    v11 = 0;
    do
    {
      ++v11;
      v12 = v10 > 9;
      v10 /= 0xAu;
    }
    while (v12);
  }
  LODWORD(v13) = *(_DWORD *)(v31 + 4);
  if (v13 <= v11)
    v13 = v11;
  else
    v13 = v13;
  v14 = &a1[v13];
  *v14 = a4;
  v15 = v14 + 1;
  if ((a6 & 0x80000000) != 0)
  {
    v30 = -a6;
    v16 = 1;
    do
    {
      ++v16;
      v19 = v30 >= 0xA;
      v30 /= 0xAu;
    }
    while (v19);
  }
  else
  {
    v16 = 0;
    v17 = a6;
    do
    {
      ++v16;
      v12 = v17 > 9;
      v17 /= 0xAu;
    }
    while (v12);
  }
  v18 = *(_DWORD *)(a5 + 4);
  v19 = v18 >= v16;
  v20 = v18 - v16;
  if ((_DWORD)v20 != 0 && v19)
  {
    v21 = v15;
    v22 = v20;
    do
    {
      *v21++ = *(_BYTE *)a5;
      --v22;
    }
    while (v22);
  }
  else
  {
    v20 = 0;
  }
  result = &v15[v20];
  v24 = 0;
  if ((a6 & 0x80000000) != 0)
  {
    v27 = -a6;
    do
    {
      v33[v24-- + 12] = (v27 % 0xA) | 0x30;
      v12 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v12);
    v28 = v24 + 12;
    v25 = &v33[v24 + 12];
    *v25 = 45;
    if (v24 + 14 <= 14)
    {
      if (v28 <= 12)
        v28 = 12;
      v26 = v28 - v24 - 11;
      return memcpy(result, v25, v26);
    }
  }
  else
  {
    do
    {
      v33[v24-- + 12] = (a6 % 0xA) | 0x30;
      v12 = a6 > 9;
      a6 /= 0xAu;
    }
    while (v12);
    if (v24 + 14 <= 13)
    {
      v25 = &v33[v24 + 13];
      v26 = -v24;
      return memcpy(result, v25, v26);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::updateCachedCookiesEnabled(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33A3860;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::updateCachedCookiesEnabled(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A3860;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::updateCachedCookiesEnabled(void)::$_0,void,BOOL>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    result = *(unsigned int **)(v2 + 8);
    if (result)
    {
      v3 = result[6];
      result[6] = v3 + 2;
      *((_WORD *)result + 1744) = (unsigned __int16)a2 | 0x100;
      if (v3)
      {
        result[6] = v3;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned __int8 **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = -1640531527;
  if ((v5 & 0xFF00000000) != 0)
  {
    if ((v5 & 0xFFFFFFFE) != 0)
    {
      v7 = 0;
      do
      {
        v8 = ((v6 + v4[v7]) << 16) ^ (v4[v7 + 1] << 11) ^ (v6 + v4[v7]);
        v6 = v8 + (v8 >> 11);
        v9 = v7 + 3;
        v7 += 2;
      }
      while (v9 < v5);
    }
    if ((v5 & 1) == 0)
      goto LABEL_7;
    v18 = v4[v5 - 1];
LABEL_16:
    v6 = ((v6 + v18) ^ ((v6 + v18) << 11)) + (((v6 + v18) ^ ((v6 + v18) << 11)) >> 17);
    goto LABEL_7;
  }
  if ((v5 & 0xFFFFFFFE) != 0)
  {
    v19 = 0;
    do
    {
      v20 = ((v6 + *(unsigned __int16 *)&v4[2 * v19]) << 16) ^ (*(unsigned __int16 *)&v4[2 * v19 + 2] << 11) ^ (v6 + *(unsigned __int16 *)&v4[2 * v19]);
      v6 = v20 + (v20 >> 11);
      v21 = v19 + 3;
      v19 += 2;
    }
    while (v21 < v5);
  }
  if ((v5 & 1) != 0)
  {
    v18 = *(unsigned __int16 *)&v4[2 * v5 - 2];
    goto LABEL_16;
  }
LABEL_7:
  v10 = 0;
  v11 = *(_DWORD *)(v2 - 8);
  v12 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = (v13 ^ (v13 << 10)) & 0xFFFFFF;
  if (!v14)
    v14 = 0x800000;
  while (1)
  {
    v15 = v14 & v11;
    v16 = *(_QWORD *)(v2 + 8 * v15);
    if (v16 != -1)
    {
      if (!v16)
        return 0;
      if (WTF::operator==(*(unsigned __int8 **)(v16 + 8), *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32), *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8)))
      {
        break;
      }
    }
    v14 = ++v10 + v15;
  }
  return v2 + 8 * v15;
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Document::maskedURLForBindings(void)::$_0 &&>>()
{
  WTF::StringImpl *v0;
  WTF::StringImpl *result;
  WTF::StringImpl *v2;

  WebCore::maskedURLString += 2;
  v2 = (WTF::StringImpl *)&WebCore::maskedURLString;
  MEMORY[0x19AEA52D4](&WebCore::Document::maskedURLForBindings(void)::url, &v2, 0);
  result = v2;
  v2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v0);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Document::privateBrowsingStateDidChange(PAL::SessionID)::$_0,void,WebCore::HTMLMediaElement &>::call(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 1136);
  if (!v2)
    return result;
  v3 = *((_QWORD *)result + 1);
  v4 = *(unsigned __int8 **)v2;
  if (__ldaxr(*(unsigned __int8 **)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  v7 = v3 < 0 && v3 != -1;
  *(_BYTE *)(v2 + 229) = v7;
  v8 = *(_QWORD *)(v2 + 72);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 888))(v8);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::captionPreferencesChanged(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  void *v4;

  *(_DWORD *)(a2 + 24) += 2;
  result = (unsigned int *)WebCore::HTMLMediaElement::captionPreferencesChanged((WebCore::HTMLMediaElement *)a2);
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)a2, v4);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::execCommand(WTF::String const&,BOOL,std::variant<WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&)::$_0,WebCore::Document::execCommand(WTF::String const&,BOOL,std::variant<WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&>@<X0>(_QWORD ***a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityContext *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v5 = (*a1)[1];
  result = MEMORY[0x19AEA53F4](***a1, "insertHTML", 10);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(v5[5] + 8);
    v8 = *(_QWORD *)(v7 + 704);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v10 = (WebCore::SecurityContext *)(v7 + 192);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::trustedTypeCompliantString(0, v10, a2, (uint64_t *)&v13, a3);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v12 = *a2;
    if (*a2)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Document::execCommand(WTF::String const&,BOOL,std::variant<WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&)::$_0,WebCore::Document::execCommand(WTF::String const&,BOOL,std::variant<WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  if (v2)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 0;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

void WebCore::EmptyHTMLCollection::~EmptyHTMLCollection(WebCore::EmptyHTMLCollection *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLCollection::~HTMLCollection(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::EmptyHTMLCollection::length(WebCore::EmptyHTMLCollection *this)
{
  return 0;
}

uint64_t WebCore::EmptyHTMLCollection::item(WebCore::EmptyHTMLCollection *this)
{
  return 0;
}

uint64_t WebCore::EmptyHTMLCollection::namedItem()
{
  return 0;
}

void WebCore::WindowNameCollection::~WindowNameCollection(WebCore::WindowNameCollection *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLNameCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  uint64_t v8;

  v2 = *(_BYTE *)(a1 + 80);
  if ((v2 & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  v3 = a1 + 40;
  if ((v2 & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v5 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v8 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), &v8, (uint64_t)v7);
      v3 = a1 + 40;
    }
  }
  result = WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v3, a1);
  *(_DWORD *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t a1, unsigned int a2)
{
  return WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(a1 + 40, a1, a2);
}

unint64_t WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

WTF::StringImpl *WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _BOOL4 v36;
  WTF::StringImpl *v37;
  int j;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v2 + 4))
  {
    if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v45 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v45 + 22) & 0x18) != 0))
      v7 = *(uint64_t **)(v45 + 40);
    else
      v7 = (uint64_t *)(a1 + 24);
    v8 = *v7;
    if ((*(_BYTE *)(*v7 + 22) & 0x18) == 0)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v39)
              {
                v39 = v16 & v15;
                v40 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v41 = *v40;
                if (!*v40)
                  break;
                if (v41 != -1 && v41 == v2)
                {
                  v43 = *(_DWORD *)(v13 - 4);
                  goto LABEL_54;
                }
                ++j;
              }
              v43 = *(_DWORD *)(v13 - 4);
              v40 = (uint64_t *)(v13 + 40 * v43);
LABEL_54:
              if (v40 != (uint64_t *)(v13 + 40 * v43) && *((_DWORD *)v40 + 4) > 1u)
                return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, (uint64_t *)&v46);
              v3 = v46;
              if (!v46)
                return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*((_WORD *)v46 + 14) & 0x10) == 0)
                goto LABEL_58;
              if ((*(_WORD *)(a1 + 21) & 0x1F) == 7)
              {
                v44 = *(_QWORD *)(*((_QWORD *)v46 + 12) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v44)
                {
                  goto LABEL_58;
                }
              }
              goto LABEL_37;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 != (uint64_t *)(v11 + 40 * v33) && *((_DWORD *)v30 + 4) > 1u)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v46);
    v3 = v46;
    if (!v46)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
LABEL_37:
    v34 = *(WTF::StringImpl **)(a1 + 88);
    if (v34)
      *(_DWORD *)v34 += 2;
    v46 = v34;
    v36 = WebCore::WindowNameCollection::elementMatches((uint64_t)v3, &v46);
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v35);
        if (v36)
        {
LABEL_43:
          if ((WebCore::Node::isDescendantOf((const WebCore::Node ***)v3, (const WebCore::Node ***)v8) & 1) != 0)
          {
            if (*((_DWORD *)v3 + 6) == 2)
            {
              if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v3, v35);
            }
            else
            {
              *((_DWORD *)v3 + 6) -= 2;
            }
            return v3;
          }
        }
LABEL_58:
        if (*((_DWORD *)v3 + 6) == 2)
        {
          if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v35);
        }
        else
        {
          *((_DWORD *)v3 + 6) -= 2;
        }
        return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
      }
      *(_DWORD *)v37 -= 2;
    }
    if (v36)
      goto LABEL_43;
    goto LABEL_58;
  }
  return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BOOL4 v23;
  WTF::StringImpl *v24;
  BOOL v25;
  uint64_t v27;
  WTF::StringImpl *v28;

  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v27 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v27 + 22) & 0x18) != 0))
    v4 = *(uint64_t **)(v27 + 40);
  else
    v4 = (uint64_t *)(a2 + 24);
  v5 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::WindowNameCollection>(a2, *v4);
  if (!v6)
    return 0;
  v7 = v5;
  v8 = v6;
  v9 = *(_DWORD *)(a1 + 32);
  v10 = v9;
LABEL_5:
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == v10)
  {
    v15 = v11 + (v11 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v11 + 1)
      v17 = v11 + 1;
    else
      v17 = v16;
    WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 24, v17);
    v11 = *(unsigned int *)(a1 + 36);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v13)
    {
      do
        v18 = __ldaxr(v13);
      while (__stlxr(v18 + 1, v13));
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(v12 + 8 * v11) = v13;
  ++*(_DWORD *)(a1 + 36);
  while (1)
  {
    v19 = *(_QWORD *)(v8 + 80);
    if (!v19)
    {
      if (v8 == v7)
        goto LABEL_48;
      while (1)
      {
        v19 = *(_QWORD *)(v8 + 56);
        if (v19)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          v25 = v8 == v7;
        else
          v25 = 1;
        if (v25)
          goto LABEL_48;
      }
    }
    if ((*(_WORD *)(v19 + 28) & 8) == 0)
      break;
    v8 = v19;
LABEL_31:
    v21 = *(WTF::StringImpl **)(a2 + 88);
    if (v21)
      *(_DWORD *)v21 += 2;
    v28 = v21;
    v23 = WebCore::WindowNameCollection::elementMatches(v8, &v28);
    v24 = v28;
    v28 = 0;
    if (!v24)
      goto LABEL_36;
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v22);
      if (v23)
      {
LABEL_47:
        v10 = *(_DWORD *)(a1 + 32);
        goto LABEL_5;
      }
    }
    else
    {
      *(_DWORD *)v24 -= 2;
LABEL_36:
      if (v23)
        goto LABEL_47;
    }
  }
  while (v19 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v19 + 56);
      if (v8)
        break;
      v19 = *(_QWORD *)(v19 + 32);
      if (v19)
        v20 = v19 == v7;
      else
        v20 = 1;
      if (v20)
        goto LABEL_48;
    }
    v19 = *(_QWORD *)(v19 + 56);
    if ((*(_WORD *)(v8 + 28) & 8) != 0)
      goto LABEL_31;
  }
LABEL_48:
  *(_BYTE *)(a1 + 40) |= 2u;
  if (*(_DWORD *)(a1 + 32) != v9)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                         * (*(_DWORD *)(a1 + 32) - v9)));
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::WindowNameCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    return a2;
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return a2;
  }
  do
  {
LABEL_28:
    v9 = *(WTF::StringImpl **)(a1 + 88);
    if (v9)
      *(_DWORD *)v9 += 2;
    v13 = v9;
    v11 = WebCore::WindowNameCollection::elementMatches(v3, &v13);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        if (v11)
          return a2;
        goto LABEL_6;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v11)
      return a2;
LABEL_6:
    v6 = *(_QWORD *)(v3 + 80);
    if (!v6)
    {
      if (v3 == a2)
        return a2;
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 56);
        if (v6)
          break;
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
          v8 = v3 == a2;
        else
          v8 = 1;
        if (v8)
          return a2;
      }
    }
    v3 = v6;
  }
  while ((*(_WORD *)(v6 + 28) & 8) != 0);
  while (v6 != a2)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v6 + 56);
      if (v3)
        break;
      v6 = *(_QWORD *)(v6 + 32);
      if (v6)
        v7 = v6 == a2;
      else
        v7 = 1;
      if (v7)
        return a2;
    }
    v6 = *(_QWORD *)(v6 + 56);
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
      goto LABEL_28;
  }
  return a2;
}

WTF::StringImpl *WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::WindowNameCollection>(WTF::StringImpl *result, _QWORD *a2, unsigned int a3, unsigned int *a4)
{
  WTF::StringImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BOOL4 v14;
  unsigned int v15;
  BOOL v16;
  WTF::StringImpl *v17;

  *a4 = 0;
  if (!a3)
    return result;
  v7 = result;
  while (1)
  {
    v8 = (_QWORD *)*a2;
    v9 = (_QWORD *)a2[1];
    v10 = (_QWORD *)v9[10];
    if (!v10)
    {
      if (v9 == v8)
        goto LABEL_34;
      while (1)
      {
        v10 = (_QWORD *)v9[7];
        if (v10)
          break;
        v9 = (_QWORD *)v9[4];
        if (v9)
          v16 = v9 == v8;
        else
          v16 = 1;
        if (v16)
          goto LABEL_34;
      }
    }
    if ((*((_WORD *)v10 + 14) & 8) == 0)
      break;
    result = (WTF::StringImpl *)v10;
LABEL_16:
    a2[1] = result;
    v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 11);
    if (v12)
      *(_DWORD *)v12 += 2;
    v17 = v12;
    v14 = WebCore::WindowNameCollection::elementMatches((uint64_t)result, &v17);
    result = v17;
    v17 = 0;
    if (!result)
      goto LABEL_21;
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      if (v14)
        goto LABEL_22;
    }
    else
    {
      *(_DWORD *)result -= 2;
LABEL_21:
      if (v14)
      {
LABEL_22:
        v15 = *a4 + 1;
        *a4 = v15;
        if (v15 >= a3)
          return result;
      }
    }
  }
  while (v10 != v8)
  {
    while (1)
    {
      result = (WTF::StringImpl *)v10[7];
      if (result)
        break;
      v10 = (_QWORD *)v10[4];
      if (v10)
        v11 = v10 == v8;
      else
        v11 = 1;
      if (v11)
        goto LABEL_34;
    }
    v10 = (_QWORD *)v10[7];
    if ((*((_WORD *)result + 14) & 8) != 0)
      goto LABEL_16;
  }
LABEL_34:
  a2[1] = 0;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = result;
  v6 = *(_BYTE *)(result + 40);
  if ((v6 & 1) != 0 && *(_DWORD *)(result + 20) <= a3)
    return 0;
  if ((*(_BYTE *)(result + 40) & 2) != 0)
  {
    if (*(_DWORD *)(result + 36) <= a3)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a3);
    if (v9)
      return *(_QWORD *)(v9 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 8);
  if (result)
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = v7 - a3;
    if (v7 < a3)
      return WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(v5, a2, a3);
    if (v7 > a3)
    {
      if (v8 <= a3)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::WindowNameCollection>(a2, (uint64_t *)v5, v8);
        *(_DWORD *)(v5 + 16) = a3;
      }
      else
      {
        if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v24 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v24 + 22) & 0x18) != 0))
          v12 = *(uint64_t **)(v24 + 40);
        else
          v12 = (uint64_t *)(a2 + 24);
        *(_QWORD *)v5 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::WindowNameCollection>(a2, *v12);
        *(_QWORD *)(v5 + 8) = v13;
        *(_DWORD *)(v5 + 16) = 0;
        if (a3)
          WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::WindowNameCollection>((WTF::StringImpl *)a2, (_QWORD *)v5, a3, (unsigned int *)(v5 + 16));
      }
      return *(_QWORD *)(v5 + 8);
    }
    return result;
  }
  if ((v6 & 1) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
    v11 = v10 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v11 + 1768);
    if ((*(_BYTE *)(a2 + 22) & 2) != 0)
    {
      v26 = a2;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v10 + 1760), &v26, (uint64_t)&v25);
    }
LABEL_26:
    if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v22 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v22 + 22) & 0x18) != 0))
      v18 = *(uint64_t **)(v22 + 40);
    else
      v18 = (uint64_t *)(a2 + 24);
    v20 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::WindowNameCollection>(a2, *v18);
    result = v19;
    *(_QWORD *)v5 = v20;
    *(_QWORD *)(v5 + 8) = v19;
    *(_DWORD *)(v5 + 16) = 0;
    if (a3)
    {
      if (v19)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::WindowNameCollection>((WTF::StringImpl *)a2, (_QWORD *)v5, a3, (unsigned int *)(v5 + 16));
        result = *(_QWORD *)(v5 + 8);
        if (result)
          return result;
        v21 = *(_DWORD *)(v5 + 16) + 1;
LABEL_34:
        result = 0;
        *(_DWORD *)(v5 + 20) = v21;
        *(_BYTE *)(v5 + 40) |= 1u;
        return result;
      }
    }
    else if (v19)
    {
      return result;
    }
    v21 = 0;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v5 + 20) - a3 >= a3)
    goto LABEL_26;
  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v23 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v23 + 22) & 0x18) != 0))
    v14 = *(uint64_t **)(v23 + 40);
  else
    v14 = (uint64_t *)(a2 + 24);
  v15 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::WindowNameCollection>(a2, *v14);
  result = v16;
  *(_QWORD *)v5 = v15;
  *(_QWORD *)(v5 + 8) = v16;
  v17 = *(_DWORD *)(v5 + 20);
  if (v17 - 1 > a3)
  {
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::WindowNameCollection>(a2, (uint64_t *)v5, v17 + ~a3);
    result = *(_QWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 16) = a3;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::WindowNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15[6];
  uint64_t v16;

  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 40) & 2) == 0 && !*(_QWORD *)(a1 + 8))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
      v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v7 + 1768);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
      {
        v16 = a2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), &v16, (uint64_t)v15);
      }
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 20) - a3 >= a3 - *(_DWORD *)(a1 + 16))
  {
LABEL_12:
    v15[0] = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::WindowNameCollection>((WTF::StringImpl *)a2, (_QWORD *)a1, a3 - *(_DWORD *)(a1 + 16), v15);
    v13 = v15[0] + *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v13;
    result = *(_QWORD *)(a1 + 8);
    if (!result)
    {
      *(_DWORD *)(a1 + 20) = v13 + 1;
      *(_BYTE *)(a1 + 40) |= 1u;
    }
    return result;
  }
  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v14 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v14 + 22) & 0x18) != 0))
    v8 = *(uint64_t **)(v14 + 40);
  else
    v8 = (uint64_t *)(a2 + 24);
  v9 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::WindowNameCollection>(a2, *v8);
  result = v10;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  v12 = *(_DWORD *)(a1 + 20);
  if (v12 - 1 > a3)
  {
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::WindowNameCollection>(a2, (uint64_t *)a1, v12 + ~a3);
    result = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 16) = a3;
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::WindowNameCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *(_QWORD *)(a2 + 88);
  if (!v3)
    return a2;
  if ((*(_WORD *)(v3 + 28) & 4) != 0)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 88);
      if (!v5)
        break;
      v3 = *(_QWORD *)(v3 + 88);
    }
    while ((*(_WORD *)(v5 + 28) & 4) != 0);
  }
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v6 = *(_QWORD *)(v3 + 88);
          if (!v6)
            break;
          v3 = *(_QWORD *)(v3 + 88);
        }
        while ((*(_WORD *)(v6 + 28) & 4) != 0);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 == a2)
        return a2;
    }
    if (!v3)
      return a2;
  }
  while (1)
  {
    v10 = *(WTF::StringImpl **)(a1 + 88);
    if (v10)
      *(_DWORD *)v10 += 2;
    v14 = v10;
    v12 = WebCore::WindowNameCollection::elementMatches(v3, &v14);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (v12)
          return a2;
        goto LABEL_44;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (v12)
      return a2;
LABEL_44:
    if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0)
      break;
    if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      do
      {
        v9 = *(_QWORD *)(v3 + 88);
        if (!v9)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v9 + 28) & 4) != 0);
    }
    else
    {
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
    }
LABEL_19:
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v8 = *(_QWORD *)(v3 + 88);
            if (!v8)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v8 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
  }
  v3 = *(_QWORD *)(v3 + 32);
  if (v3 != a2 && v3)
    goto LABEL_19;
  return a2;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::WindowNameCollection>(uint64_t result, uint64_t *a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;

  if (!a3)
    return result;
  v3 = a3;
  v5 = result;
  while (1)
  {
    v6 = *a2;
    v7 = a2[1];
    result = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
    if (!result)
      break;
    if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      do
      {
        v10 = *(_QWORD *)(result + 88);
        if (!v10)
          break;
        result = *(_QWORD *)(result + 88);
      }
      while ((*(_WORD *)(v10 + 28) & 4) != 0);
    }
LABEL_8:
    while ((*(_WORD *)(result + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v9 = *(_QWORD *)(result + 88);
            if (!v9)
              break;
            result = *(_QWORD *)(result + 88);
          }
          while ((*(_WORD *)(v9 + 28) & 4) != 0);
        }
        else
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        result = *(_QWORD *)(result + 32);
        if (result == v6)
          goto LABEL_33;
      }
      if (!result)
        goto LABEL_33;
    }
    a2[1] = result;
    v11 = *(WTF::StringImpl **)(v5 + 88);
    if (v11)
      *(_DWORD *)v11 += 2;
    v14 = v11;
    v13 = WebCore::WindowNameCollection::elementMatches(result, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (!result)
      goto LABEL_28;
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      if (v13)
        goto LABEL_29;
    }
    else
    {
      *(_DWORD *)result -= 2;
LABEL_28:
      if (v13)
      {
LABEL_29:
        if (!--v3)
          return result;
      }
    }
  }
  result = *(_QWORD *)(v7 + 32);
  if (result != v6 && result != 0)
    goto LABEL_8;
LABEL_33:
  a2[1] = 0;
  return result;
}

void WebCore::DocumentNameCollection::~DocumentNameCollection(WebCore::DocumentNameCollection *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLNameCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  uint64_t v8;

  v2 = *(_BYTE *)(a1 + 80);
  if ((v2 & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  v3 = a1 + 40;
  if ((v2 & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v5 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v8 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), &v8, (uint64_t)v7);
      v3 = a1 + 40;
    }
  }
  result = WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v3, a1);
  *(_DWORD *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t a1, unsigned int a2)
{
  return WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(a1 + 40, a1, a2);
}

unint64_t WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

WTF::StringImpl *WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  int v23;
  int k;
  unsigned int v25;
  uint64_t v26;
  int m;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _BOOL4 v36;
  WTF::StringImpl *v37;
  int j;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v2 + 4))
  {
    if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v45 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v45 + 22) & 0x18) != 0))
      v7 = *(uint64_t **)(v45 + 40);
    else
      v7 = (uint64_t *)(a1 + 24);
    v8 = *v7;
    if ((*(_BYTE *)(*v7 + 22) & 0x18) == 0)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    v9 = *(const WebCore::TreeScope **)(v8 + 40);
    v10 = (unsigned int *)*((_QWORD *)v9 + 3);
    if (!v10 || (v11 = *(_QWORD *)v10) == 0)
    {
LABEL_10:
      v12 = (unsigned int *)*((_QWORD *)v9 + 4);
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v14 = 0;
          v15 = *(_DWORD *)(v13 - 8);
          v16 = *(_DWORD *)(v2 + 16) >> 8;
          for (i = v16; ; i = v14 + v18)
          {
            v18 = i & v15;
            v19 = *(_QWORD *)(v13 + 40 * v18);
            if (!v19)
              break;
            if (v19 != -1 && v19 == v2)
            {
              for (j = 0; ; v16 = j + v39)
              {
                v39 = v16 & v15;
                v40 = (uint64_t *)(v13 + 40 * (v16 & v15));
                v41 = *v40;
                if (!*v40)
                  break;
                if (v41 != -1 && v41 == v2)
                {
                  v43 = *(_DWORD *)(v13 - 4);
                  goto LABEL_54;
                }
                ++j;
              }
              v43 = *(_DWORD *)(v13 - 4);
              v40 = (uint64_t *)(v13 + 40 * v43);
LABEL_54:
              if (v40 != (uint64_t *)(v13 + 40 * v43) && *((_DWORD *)v40 + 4) > 1u)
                return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              WebCore::TreeScopeOrderedMap::getElementByName(v12, a2, v9, (uint64_t *)&v46);
              v3 = v46;
              if (!v46)
                return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
              if ((*((_WORD *)v46 + 14) & 0x10) == 0)
                goto LABEL_58;
              if ((*(_WORD *)(a1 + 21) & 0x1F) == 7)
              {
                v44 = *(_QWORD *)(*((_QWORD *)v46 + 12) + 24);
                if (*(_QWORD *)(WebCore::HTMLNames::aTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::formTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) != v44
                  && *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) != v44)
                {
                  goto LABEL_58;
                }
              }
              goto LABEL_37;
            }
            ++v14;
          }
        }
      }
      return 0;
    }
    v21 = 0;
    v22 = *(_DWORD *)(v11 - 8);
    v23 = *(_DWORD *)(v2 + 16) >> 8;
    for (k = v23; ; k = v21 + v25)
    {
      v25 = k & v22;
      v26 = *(_QWORD *)(v11 + 40 * v25);
      if (!v26)
        goto LABEL_10;
      if (v26 != -1 && v26 == v2)
        break;
      ++v21;
    }
    for (m = 0; ; v23 = m + v29)
    {
      v29 = v23 & v22;
      v30 = (uint64_t *)(v11 + 40 * (v23 & v22));
      v31 = *v30;
      if (!*v30)
        break;
      if (v31 != -1 && v31 == v2)
      {
        v33 = *(_DWORD *)(v11 - 4);
        goto LABEL_34;
      }
      ++m;
    }
    v33 = *(_DWORD *)(v11 - 4);
    v30 = (uint64_t *)(v11 + 40 * v33);
LABEL_34:
    if (v30 != (uint64_t *)(v11 + 40 * v33) && *((_DWORD *)v30 + 4) > 1u)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v46);
    v3 = v46;
    if (!v46)
      return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
LABEL_37:
    v34 = *(WTF::StringImpl **)(a1 + 88);
    if (v34)
      *(_DWORD *)v34 += 2;
    v46 = v34;
    v36 = WebCore::DocumentNameCollection::elementMatches((uint64_t)v3, &v46);
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v35);
        if (v36)
        {
LABEL_43:
          if ((WebCore::Node::isDescendantOf((const WebCore::Node ***)v3, (const WebCore::Node ***)v8) & 1) != 0)
          {
            if (*((_DWORD *)v3 + 6) == 2)
            {
              if ((*((_WORD *)v3 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v3, v35);
            }
            else
            {
              *((_DWORD *)v3 + 6) -= 2;
            }
            return v3;
          }
        }
LABEL_58:
        if (*((_DWORD *)v3 + 6) == 2)
        {
          if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v35);
        }
        else
        {
          *((_DWORD *)v3 + 6) -= 2;
        }
        return (WTF::StringImpl *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
      }
      *(_DWORD *)v37 -= 2;
    }
    if (v36)
      goto LABEL_43;
    goto LABEL_58;
  }
  return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BOOL4 v23;
  WTF::StringImpl *v24;
  BOOL v25;
  uint64_t v27;
  WTF::StringImpl *v28;

  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v27 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v27 + 22) & 0x18) != 0))
    v4 = *(uint64_t **)(v27 + 40);
  else
    v4 = (uint64_t *)(a2 + 24);
  v5 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::DocumentNameCollection>(a2, *v4);
  if (!v6)
    return 0;
  v7 = v5;
  v8 = v6;
  v9 = *(_DWORD *)(a1 + 32);
  v10 = v9;
LABEL_5:
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == v10)
  {
    v15 = v11 + (v11 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v11 + 1)
      v17 = v11 + 1;
    else
      v17 = v16;
    WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 24, v17);
    v11 = *(unsigned int *)(a1 + 36);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v13)
    {
      do
        v18 = __ldaxr(v13);
      while (__stlxr(v18 + 1, v13));
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(v12 + 8 * v11) = v13;
  ++*(_DWORD *)(a1 + 36);
  while (1)
  {
    v19 = *(_QWORD *)(v8 + 80);
    if (!v19)
    {
      if (v8 == v7)
        goto LABEL_48;
      while (1)
      {
        v19 = *(_QWORD *)(v8 + 56);
        if (v19)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          v25 = v8 == v7;
        else
          v25 = 1;
        if (v25)
          goto LABEL_48;
      }
    }
    if ((*(_WORD *)(v19 + 28) & 8) == 0)
      break;
    v8 = v19;
LABEL_31:
    v21 = *(WTF::StringImpl **)(a2 + 88);
    if (v21)
      *(_DWORD *)v21 += 2;
    v28 = v21;
    v23 = WebCore::DocumentNameCollection::elementMatches(v8, &v28);
    v24 = v28;
    v28 = 0;
    if (!v24)
      goto LABEL_36;
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v22);
      if (v23)
      {
LABEL_47:
        v10 = *(_DWORD *)(a1 + 32);
        goto LABEL_5;
      }
    }
    else
    {
      *(_DWORD *)v24 -= 2;
LABEL_36:
      if (v23)
        goto LABEL_47;
    }
  }
  while (v19 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v19 + 56);
      if (v8)
        break;
      v19 = *(_QWORD *)(v19 + 32);
      if (v19)
        v20 = v19 == v7;
      else
        v20 = 1;
      if (v20)
        goto LABEL_48;
    }
    v19 = *(_QWORD *)(v19 + 56);
    if ((*(_WORD *)(v8 + 28) & 8) != 0)
      goto LABEL_31;
  }
LABEL_48:
  *(_BYTE *)(a1 + 40) |= 2u;
  if (*(_DWORD *)(a1 + 32) != v9)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                         * (*(_DWORD *)(a1 + 32) - v9)));
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::DocumentNameCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    return a2;
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return a2;
  }
  do
  {
LABEL_28:
    v9 = *(WTF::StringImpl **)(a1 + 88);
    if (v9)
      *(_DWORD *)v9 += 2;
    v13 = v9;
    v11 = WebCore::DocumentNameCollection::elementMatches(v3, &v13);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        if (v11)
          return a2;
        goto LABEL_6;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v11)
      return a2;
LABEL_6:
    v6 = *(_QWORD *)(v3 + 80);
    if (!v6)
    {
      if (v3 == a2)
        return a2;
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 56);
        if (v6)
          break;
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
          v8 = v3 == a2;
        else
          v8 = 1;
        if (v8)
          return a2;
      }
    }
    v3 = v6;
  }
  while ((*(_WORD *)(v6 + 28) & 8) != 0);
  while (v6 != a2)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v6 + 56);
      if (v3)
        break;
      v6 = *(_QWORD *)(v6 + 32);
      if (v6)
        v7 = v6 == a2;
      else
        v7 = 1;
      if (v7)
        return a2;
    }
    v6 = *(_QWORD *)(v6 + 56);
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
      goto LABEL_28;
  }
  return a2;
}

WTF::StringImpl *WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::DocumentNameCollection>(WTF::StringImpl *result, _QWORD *a2, unsigned int a3, unsigned int *a4)
{
  WTF::StringImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BOOL4 v14;
  unsigned int v15;
  BOOL v16;
  WTF::StringImpl *v17;

  *a4 = 0;
  if (!a3)
    return result;
  v7 = result;
  while (1)
  {
    v8 = (_QWORD *)*a2;
    v9 = (_QWORD *)a2[1];
    v10 = (_QWORD *)v9[10];
    if (!v10)
    {
      if (v9 == v8)
        goto LABEL_34;
      while (1)
      {
        v10 = (_QWORD *)v9[7];
        if (v10)
          break;
        v9 = (_QWORD *)v9[4];
        if (v9)
          v16 = v9 == v8;
        else
          v16 = 1;
        if (v16)
          goto LABEL_34;
      }
    }
    if ((*((_WORD *)v10 + 14) & 8) == 0)
      break;
    result = (WTF::StringImpl *)v10;
LABEL_16:
    a2[1] = result;
    v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 11);
    if (v12)
      *(_DWORD *)v12 += 2;
    v17 = v12;
    v14 = WebCore::DocumentNameCollection::elementMatches((uint64_t)result, &v17);
    result = v17;
    v17 = 0;
    if (!result)
      goto LABEL_21;
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      if (v14)
        goto LABEL_22;
    }
    else
    {
      *(_DWORD *)result -= 2;
LABEL_21:
      if (v14)
      {
LABEL_22:
        v15 = *a4 + 1;
        *a4 = v15;
        if (v15 >= a3)
          return result;
      }
    }
  }
  while (v10 != v8)
  {
    while (1)
    {
      result = (WTF::StringImpl *)v10[7];
      if (result)
        break;
      v10 = (_QWORD *)v10[4];
      if (v10)
        v11 = v10 == v8;
      else
        v11 = 1;
      if (v11)
        goto LABEL_34;
    }
    v10 = (_QWORD *)v10[7];
    if ((*((_WORD *)result + 14) & 8) != 0)
      goto LABEL_16;
  }
LABEL_34:
  a2[1] = 0;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = result;
  v6 = *(_BYTE *)(result + 40);
  if ((v6 & 1) != 0 && *(_DWORD *)(result + 20) <= a3)
    return 0;
  if ((*(_BYTE *)(result + 40) & 2) != 0)
  {
    if (*(_DWORD *)(result + 36) <= a3)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a3);
    if (v9)
      return *(_QWORD *)(v9 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 8);
  if (result)
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = v7 - a3;
    if (v7 < a3)
      return WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(v5, a2, a3);
    if (v7 > a3)
    {
      if (v8 <= a3)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::DocumentNameCollection>(a2, (uint64_t *)v5, v8);
        *(_DWORD *)(v5 + 16) = a3;
      }
      else
      {
        if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v24 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v24 + 22) & 0x18) != 0))
          v12 = *(uint64_t **)(v24 + 40);
        else
          v12 = (uint64_t *)(a2 + 24);
        *(_QWORD *)v5 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::DocumentNameCollection>(a2, *v12);
        *(_QWORD *)(v5 + 8) = v13;
        *(_DWORD *)(v5 + 16) = 0;
        if (a3)
          WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::DocumentNameCollection>((WTF::StringImpl *)a2, (_QWORD *)v5, a3, (unsigned int *)(v5 + 16));
      }
      return *(_QWORD *)(v5 + 8);
    }
    return result;
  }
  if ((v6 & 1) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
    v11 = v10 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v11 + 1768);
    if ((*(_BYTE *)(a2 + 22) & 2) != 0)
    {
      v26 = a2;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v10 + 1760), &v26, (uint64_t)&v25);
    }
LABEL_26:
    if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v22 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v22 + 22) & 0x18) != 0))
      v18 = *(uint64_t **)(v22 + 40);
    else
      v18 = (uint64_t *)(a2 + 24);
    v20 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::DocumentNameCollection>(a2, *v18);
    result = v19;
    *(_QWORD *)v5 = v20;
    *(_QWORD *)(v5 + 8) = v19;
    *(_DWORD *)(v5 + 16) = 0;
    if (a3)
    {
      if (v19)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::DocumentNameCollection>((WTF::StringImpl *)a2, (_QWORD *)v5, a3, (unsigned int *)(v5 + 16));
        result = *(_QWORD *)(v5 + 8);
        if (result)
          return result;
        v21 = *(_DWORD *)(v5 + 16) + 1;
LABEL_34:
        result = 0;
        *(_DWORD *)(v5 + 20) = v21;
        *(_BYTE *)(v5 + 40) |= 1u;
        return result;
      }
    }
    else if (v19)
    {
      return result;
    }
    v21 = 0;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v5 + 20) - a3 >= a3)
    goto LABEL_26;
  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v23 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v23 + 22) & 0x18) != 0))
    v14 = *(uint64_t **)(v23 + 40);
  else
    v14 = (uint64_t *)(a2 + 24);
  v15 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::DocumentNameCollection>(a2, *v14);
  result = v16;
  *(_QWORD *)v5 = v15;
  *(_QWORD *)(v5 + 8) = v16;
  v17 = *(_DWORD *)(v5 + 20);
  if (v17 - 1 > a3)
  {
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::DocumentNameCollection>(a2, (uint64_t *)v5, v17 + ~a3);
    result = *(_QWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 16) = a3;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::DocumentNameCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15[6];
  uint64_t v16;

  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 40) & 2) == 0 && !*(_QWORD *)(a1 + 8))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
      v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v7 + 1768);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
      {
        v16 = a2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), &v16, (uint64_t)v15);
      }
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 20) - a3 >= a3 - *(_DWORD *)(a1 + 16))
  {
LABEL_12:
    v15[0] = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::DocumentNameCollection>((WTF::StringImpl *)a2, (_QWORD *)a1, a3 - *(_DWORD *)(a1 + 16), v15);
    v13 = v15[0] + *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v13;
    result = *(_QWORD *)(a1 + 8);
    if (!result)
    {
      *(_DWORD *)(a1 + 20) = v13 + 1;
      *(_BYTE *)(a1 + 40) |= 1u;
    }
    return result;
  }
  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v14 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v14 + 22) & 0x18) != 0))
    v8 = *(uint64_t **)(v14 + 40);
  else
    v8 = (uint64_t *)(a2 + 24);
  v9 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::DocumentNameCollection>(a2, *v8);
  result = v10;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  v12 = *(_DWORD *)(a1 + 20);
  if (v12 - 1 > a3)
  {
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::DocumentNameCollection>(a2, (uint64_t *)a1, v12 + ~a3);
    result = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 16) = a3;
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::DocumentNameCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *(_QWORD *)(a2 + 88);
  if (!v3)
    return a2;
  if ((*(_WORD *)(v3 + 28) & 4) != 0)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 88);
      if (!v5)
        break;
      v3 = *(_QWORD *)(v3 + 88);
    }
    while ((*(_WORD *)(v5 + 28) & 4) != 0);
  }
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v6 = *(_QWORD *)(v3 + 88);
          if (!v6)
            break;
          v3 = *(_QWORD *)(v3 + 88);
        }
        while ((*(_WORD *)(v6 + 28) & 4) != 0);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 == a2)
        return a2;
    }
    if (!v3)
      return a2;
  }
  while (1)
  {
    v10 = *(WTF::StringImpl **)(a1 + 88);
    if (v10)
      *(_DWORD *)v10 += 2;
    v14 = v10;
    v12 = WebCore::DocumentNameCollection::elementMatches(v3, &v14);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (v12)
          return a2;
        goto LABEL_44;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (v12)
      return a2;
LABEL_44:
    if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) == 0)
      break;
    if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
      do
      {
        v9 = *(_QWORD *)(v3 + 88);
        if (!v9)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v9 + 28) & 4) != 0);
    }
    else
    {
      v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
    }
LABEL_19:
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v8 = *(_QWORD *)(v3 + 88);
            if (!v8)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v8 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
  }
  v3 = *(_QWORD *)(v3 + 32);
  if (v3 != a2 && v3)
    goto LABEL_19;
  return a2;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseBackward<WebCore::DocumentNameCollection>(uint64_t result, uint64_t *a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;

  if (!a3)
    return result;
  v3 = a3;
  v5 = result;
  while (1)
  {
    v6 = *a2;
    v7 = a2[1];
    result = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
    if (!result)
      break;
    if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      do
      {
        v10 = *(_QWORD *)(result + 88);
        if (!v10)
          break;
        result = *(_QWORD *)(result + 88);
      }
      while ((*(_WORD *)(v10 + 28) & 4) != 0);
    }
LABEL_8:
    while ((*(_WORD *)(result + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v9 = *(_QWORD *)(result + 88);
            if (!v9)
              break;
            result = *(_QWORD *)(result + 88);
          }
          while ((*(_WORD *)(v9 + 28) & 4) != 0);
        }
        else
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        result = *(_QWORD *)(result + 32);
        if (result == v6)
          goto LABEL_33;
      }
      if (!result)
        goto LABEL_33;
    }
    a2[1] = result;
    v11 = *(WTF::StringImpl **)(v5 + 88);
    if (v11)
      *(_DWORD *)v11 += 2;
    v14 = v11;
    v13 = WebCore::DocumentNameCollection::elementMatches(result, &v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (!result)
      goto LABEL_28;
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      if (v13)
        goto LABEL_29;
    }
    else
    {
      *(_DWORD *)result -= 2;
LABEL_28:
      if (v13)
      {
LABEL_29:
        if (!--v3)
          return result;
      }
    }
  }
  result = *(_QWORD *)(v7 + 32);
  if (result != v6 && result != 0)
    goto LABEL_8;
LABEL_33:
  a2[1] = 0;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::UUID>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];
  uint64_t v7;
  int v8;

  v3 = a1[1];
  if (!v3)
  {
    v7 = *a1;
LABEL_3:
    v8 = v3;
    v4 = a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((uint64_t)&v7, v6, a3);
  }
  --v3;
  v7 = *a1;
  if (!(v3 >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t result;
  BOOL v8;

  v6 = *(_DWORD *)(a1 + 8);
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
  if (((result | v6) & 0x80000000) == 0)
  {
    v8 = __OFADD__(v6, (_DWORD)result);
    result = (v6 + result);
    if (!v8)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(result, 1, *(int8x16_t **)a1, *(_QWORD *)(a1 + 8), *a2, a2[1], a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::add@<X0>(uint64_t *a1@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  WTF **v10;
  int i;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_QWORD *)*a2 + 1);
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = result & v7;
    v13 = (WTF **)(v6 + 8 * (result & v7));
    v14 = *v13;
    if (!*v13)
    {
      if (v10)
      {
        *v10 = 0;
        --*(_DWORD *)(*a1 - 16);
        v13 = v10;
      }
      result = (uint64_t)WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::operator=(v13, a2);
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v17 - 16) + v18);
      v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_14;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_14:
        v21 = v17 + 8 * v20;
        v22 = 1;
        goto LABEL_15;
      }
      result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand(a1, (uint64_t *)v13);
      v13 = (WTF **)result;
      v17 = *a1;
      if (*a1)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_14;
    }
    if (v14 == (WTF *)-1)
    {
      v10 = (WTF **)(v6 + 8 * v12);
      goto LABEL_25;
    }
    if (*((_QWORD *)v14 + 1) == v8)
      break;
LABEL_25:
    result = i + v12;
  }
  v22 = 0;
  v21 = v6 + 8 * *(unsigned int *)(v6 - 4);
LABEL_15:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v4, a2);
}

WTF **WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::operator=(WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return a1;
}

WTF *WTF::WeakPtrFactory<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(WTF *result, uint64_t a2)
{
  WTF **v3;
  void *v4;
  uint64_t v5;

  if (!*(_QWORD *)result)
  {
    v3 = (WTF **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (WTF *)v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v4);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF **a2)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
    if ((WTF **)v2 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v2 = 0;
LABEL_4:
  if ((WTF **)v2 != a2)
    WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::remove(a1, a2);
  return 1;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF **result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  result = WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef(a2, a2);
  *a2 = (WTF *)-1;
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>,WebCore::Range const*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD *)(v3 + 8 * v7);
      if (!v8)
        break;
      if (v8 != -1 && *(_QWORD *)(v8 + 8) == a2)
        return v3 + 8 * v7;
      ++i;
    }
    return 0;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (!v24)
            goto LABEL_25;
          if (*((_DWORD *)v24 + 6) != 2)
          {
            *((_DWORD *)v24 + 6) -= 2;
            goto LABEL_25;
          }
          if ((*((_WORD *)v24 + 15) & 0x400) != 0)
          {
LABEL_25:
            *v23 = 0;
          }
          else
          {
            WebCore::Node::removedLastRef(v24);
            v30 = *v23;
            *v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          v25 = *v13;
          *v13 = 0;
          *v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v23[1] = v27;
          v28 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)(v28 + 24) == 2)
            {
              if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v28);
            }
            else
            {
              *(_DWORD *)(v28 + 24) -= 2;
            }
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v16);
              v14 = *v13;
            }
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_48;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_48:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::postTask(WebCore::ScriptExecutionContext::Task &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E33A3A20;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::postTask(WebCore::ScriptExecutionContext::Task &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E33A3A20;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::postTask(WebCore::ScriptExecutionContext::Task &&)::$_0,void>::call(uint64_t a1)
{
  unsigned int *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;

  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  result = (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::Document::allDocumentsMap(void)::documents, (uint64_t *)(a1 + 16));
  if (result)
  {
    v4 = *((_QWORD *)result + 4);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        *(_DWORD *)(v5 + 24) += 2;
        v6 = *(_QWORD *)(v5 + 528);
        if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 24)) != 0)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            ++*(_DWORD *)v9;
            if (*(_BYTE *)(v9 + 339) && *(_BYTE *)(v5 + 467))
            {
              v10 = 0;
              v11 = *(_DWORD *)(v5 + 2452);
              goto LABEL_17;
            }
            v10 = 0;
LABEL_16:
            v11 = *(_DWORD *)(v5 + 2452);
            if (!v11)
            {
              result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v5 + 192);
              if ((v10 & 1) != 0)
                goto LABEL_25;
              goto LABEL_23;
            }
LABEL_17:
            if (v11 == *(_DWORD *)(v5 + 2448))
            {
              result = (unsigned int *)WTF::Vector<WebCore::ScriptExecutionContext::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 2440, v11 + 1, a1 + 48);
              v12 = *(unsigned int *)(v5 + 2452);
              v13 = v12 + 1;
              v14 = *(_QWORD *)(v5 + 2440) + 16 * v12;
              v15 = *(_QWORD *)result;
              *(_QWORD *)result = 0;
              *(_QWORD *)v14 = v15;
              *(_BYTE *)(v14 + 8) = *((_BYTE *)result + 8);
              *(_DWORD *)(v5 + 2452) = v13;
              if ((v10 & 1) != 0)
                goto LABEL_25;
            }
            else
            {
              v16 = *(_QWORD *)(v5 + 2440) + 16 * v11;
              v17 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)v16 = v17;
              *(_BYTE *)(v16 + 8) = *(_BYTE *)(a1 + 56);
              *(_DWORD *)(v5 + 2452) = v11 + 1;
              if ((v10 & 1) != 0)
              {
LABEL_25:
                if (*(_DWORD *)(v5 + 24) == 2)
                {
                  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                    return WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
                }
                else
                {
                  *(_DWORD *)(v5 + 24) -= 2;
                }
                return result;
              }
            }
LABEL_23:
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::Page::~Page(v9);
              result = (unsigned int *)WTF::fastFree(v18, v19);
            }
            else
            {
              --*(_DWORD *)v9;
            }
            goto LABEL_25;
          }
        }
        else
        {
          v9 = 0;
        }
        v10 = 1;
        goto LABEL_16;
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::ScriptExecutionContext::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (_QWORD *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v18 = *(WTF **)a1;
        return (char *)v18 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v12 = WTF::fastMalloc((WTF *)(16 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        do
        {
          v14 = v12 + v13;
          v15 = (_QWORD *)((char *)v5 + v13);
          v16 = *(_QWORD *)((char *)v5 + v13);
          *v15 = 0;
          *(_QWORD *)v14 = v16;
          *(_BYTE *)(v14 + 8) = *((_BYTE *)v5 + v13 + 8);
          v17 = *(_QWORD *)((char *)v5 + v13);
          *v15 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v13 += 16;
        }
        while (v15 + 2 != v6);
        v18 = *(WTF **)a1;
        if (v5)
        {
          if (v18 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v18 = *(WTF **)a1;
        }
        return (char *)v18 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1959B5F74);
    }
  }
  v19 = *(unsigned int *)(a1 + 8);
  v20 = v19 + (v19 >> 2);
  if (v20 >= 0x10)
    v21 = v20 + 1;
  else
    v21 = 16;
  if (v21 <= a2)
    v22 = a2;
  else
    v22 = v21;
  if (v22 > v19)
  {
    if (v22 >> 28)
      goto LABEL_39;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = WTF::fastMalloc((WTF *)(16 * v22));
    *(_DWORD *)(a1 + 8) = v22;
    *(_QWORD *)a1 = v24;
    if ((_DWORD)v23)
    {
      v26 = v24;
      v27 = (WTF *)((char *)v5 + 16 * v23);
      v28 = v5;
      do
      {
        v29 = *(_QWORD *)v28;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)v26 = v29;
        *(_BYTE *)(v26 + 8) = *((_BYTE *)v28 + 8);
        v30 = *(_QWORD *)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        v28 = (WTF *)((char *)v28 + 16);
        v26 += 16;
      }
      while (v28 != v27);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v25);
    }
  }
  return (char *)v3;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::serviceRequestVideoFrameCallbacks(void)::$_0,void,WebCore::HTMLMediaElement &>::call(unsigned int *result, WebCore::Node *this)
{
  int v3;

  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    v3 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v3 + 2;
    if (*((_DWORD *)this + 479))
    {
      **((_BYTE **)result + 2) = 1;
      result = WebCore::HTMLVideoElement::serviceRequestVideoFrameCallbacks((unsigned int *)this, *((double *)result + 1));
      v3 = *((_DWORD *)this + 6) - 2;
    }
    if (v3)
    {
      *((_DWORD *)this + 6) = v3;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef(this, this);
    }
  }
  return result;
}

uint64_t WTF::copyToVector<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Observer<void ()(unsigned int)>&)#1}::operator()<WTF::Observer<void ()(unsigned int)>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  result = *a2;
  if (*a2)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = (unsigned int *)*a2;
  *a2 = result;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  result = *a2;
  if (*a2)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)result);
    while (__stlxr(v9 + 1, (unsigned int *)result));
  }
  *a1 = result;
  return result;
}

unsigned int *WTF::VectorTypeOperations<WTF::WeakPtr<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *result = a2;
    result[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *result = a2;
    result[1] = 0;
  }
  result[2] = v3;
  result[3] = v3;
  result[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

uint64_t *WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unsigned __int32 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __n128 *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __n128 *v26;
  int v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (__n128 *)(v8 + 16 * v15);
  v17 = v16->n128_u64[0];
  if (v16->n128_u64[0])
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_12;
      }
      if (v17 == -1)
        v26 = v16;
      v15 = (v15 + v27) & v10;
      v16 = (__n128 *)(v8 + 16 * v15);
      v17 = v16->n128_u64[0];
      ++v27;
    }
    while (v16->n128_u64[0]);
    if (v26)
    {
      v26->n128_u64[0] = 0;
      v26->n128_u64[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v26;
    }
  }
  v16->n128_u64[0] = v11;
  v16->n128_u32[2] = *a3;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t *)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand(v6, v16);
    v16 = (__n128 *)result;
    v20 = *v6;
    if (*v6)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_11;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_24;
LABEL_11:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_12:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>::~KeyValuePair((uint64_t)v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::Locale>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::Locale>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::Locale>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)(*a2 + 16) >> 8;
  do
  {
    v6 = v5 & v3;
    v5 = ++v4 + v6;
  }
  while (*(_QWORD *)(a1 + 16 * v6));
  v7 = a1 + 16 * v6;
  v8 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
    v10 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    *(_QWORD *)v7 = 0;
  }
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v7 = v11;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v7 + 8) = v12;
  return v7;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntersectionObserver&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    goto LABEL_12;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v10 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v6;
  if (!v10)
    goto LABEL_12;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
LABEL_12:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int **v17;
  _QWORD *v18;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (unsigned int **)((char *)v7 + 8 * v8);
      v12 = (unsigned int **)v7;
      do
      {
        v13 = *v12;
        *v12 = 0;
        *v9 = v13;
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            v18 = v9;
            v17 = v11;
            WTF::fastFree((WTF *)v14, v10);
            v11 = v17;
            v9 = v18;
          }
        }
        ++v9;
        ++v12;
      }
      while (v12 != v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;

  if (!a2)
  {
    v3 = 0;
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    goto LABEL_5;
  v11 = a1;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  if (!v8)
  {
    a1 = v11;
    do
LABEL_5:
      v5 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v5 + 1, (unsigned int *)v3));
    goto LABEL_3;
  }
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v3 = *(_QWORD *)(a2 + 8);
  a1 = v11;
  if (v3)
    goto LABEL_5;
LABEL_3:
  *a1 = v3;
  return a1;
}

{
  uint64_t v3;
  unsigned int v4;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    goto LABEL_12;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  if (!v8)
    goto LABEL_12;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
LABEL_12:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  *a1 = v3;
  return a1;
}

uint64_t *WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *a1 = v3;
  return a1;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int **v17;
  _QWORD *v18;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (unsigned int **)((char *)v7 + 8 * v8);
      v12 = (unsigned int **)v7;
      do
      {
        v13 = *v12;
        *v12 = 0;
        *v9 = v13;
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            v18 = v9;
            v17 = v11;
            WTF::fastFree((WTF *)v14, v10);
            v11 = v17;
            v9 = v18;
          }
        }
        ++v9;
        ++v12;
      }
      while (v12 != v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WTF::RefCounted<Inspector::ScriptCallStack>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEA6024]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Document::mediaStreamCaptureStateChanged(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  int v3;
  char v4;

  WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay(a2, a2, &v3);
  if (!v4)
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a2 + 1440))(a2);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 8);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (uint64_t *)(v6 + 8 * v17);
    v19 = *v18;
    if (!*v18)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v18 = v9;
      }
      *a2 = 0;
      v20 = *v18;
      *v18 = v10;
      if (v20)
      {
        do
        {
          v29 = __ldaxr((unsigned int *)v20);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)v20));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)v20);
          v31 = *(unsigned int *)(v20 + 28);
          v35 = v18;
          if ((_DWORD)v31)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v31));
          v32 = *(WTF **)(v20 + 16);
          if (v32)
          {
            *(_QWORD *)(v20 + 16) = 0;
            *(_DWORD *)(v20 + 24) = 0;
            WTF::fastFree(v32, a2);
          }
          result = (uint64_t *)WTF::fastFree((WTF *)v20, a2);
          v18 = v35;
        }
      }
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v4;
      if (*v4)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          goto LABEL_17;
      }
      else
      {
        if (3 * v26 > 4 * v25)
        {
LABEL_17:
          v27 = v23 + 8 * v26;
          v28 = 1;
          goto LABEL_18;
        }
        if (!(_DWORD)v26)
        {
          v33 = 8;
          goto LABEL_31;
        }
      }
      v33 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_31:
      result = WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v4, v33, v18);
      v18 = result;
      v23 = *v4;
      if (*v4)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_17;
    }
    if (v19 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v17);
LABEL_7:
    v15 = i + v17;
  }
  if (*(_QWORD *)(v19 + 8) != v11)
    goto LABEL_7;
  if ((v7 & 1) != 0)
    v34 = 0;
  else
    v34 = *(unsigned int *)(v6 - 4);
  v28 = 0;
  v27 = v6 + 8 * v34;
LABEL_18:
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *result;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*(_QWORD *)(v14 + 8) << 32) + *(_QWORD *)(v14 + 8);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr((unsigned int *)v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unsigned int *)v26));
            if (!v28)
            {
              atomic_store(1u, (unsigned int *)v26);
              v30 = *(unsigned int *)(v26 + 28);
              if ((_DWORD)v30)
              {
                v33 = v26;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v26 + 16), (WTF::StringImpl *)(*(_QWORD *)(v26 + 16) + 32 * v30));
                v26 = v33;
              }
              v31 = *(WTF **)(v26 + 16);
              if (v31)
              {
                *(_QWORD *)(v26 + 16) = 0;
                *(_DWORD *)(v26 + 24) = 0;
                v32 = v26;
                WTF::fastFree(v31, v10);
                v26 = v32;
              }
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
    goto LABEL_20;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v2);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v2));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v2);
      v11 = *(unsigned int *)(v2 + 28);
      v16 = result;
      v15 = a2;
      if ((_DWORD)v11)
      {
        v14 = v2;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)(*(_QWORD *)(v2 + 16) + 32 * v11));
        v2 = v14;
      }
      v12 = *(WTF **)(v2 + 16);
      if (v12)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        v13 = v2;
        WTF::fastFree(v12, a2);
        v2 = v13;
      }
      WTF::fastFree((WTF *)v2, a2);
      result = v16;
      a2 = v15;
    }
  }
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *result;
  if (*result)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
      return WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(result, v7 >> 1, 0);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  unsigned __int128 *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  char v31;
  uint64_t v32;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v32;
        if (v32)
        {
          v18 = (_BYTE *)(v32 + 20);
          *(_DWORD *)v32 = 2;
          *(_DWORD *)(v32 + 4) = v15;
          *(_QWORD *)(v32 + 8) = v32 + 20;
          *(_DWORD *)(v32 + 16) = 4;
          if ((a4 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a4)
            {
              if ((_DWORD)a4 == 1)
                *v18 = *a3;
              else
                result = (uint64_t)memcpy((void *)(v32 + 20), a3, a4);
            }
          }
          else
          {
            if (a4 < 0x10)
            {
              v24 = (unsigned __int128 *)(v32 + 20);
            }
            else
            {
              v24 = (unsigned __int128 *)&v18[a4 & 0xFFFFFFF0];
              v25 = (unsigned __int128 *)(v32 + 20);
              do
              {
                v26 = (unsigned __int128)vld2q_s8(a3);
                a3 += 32;
                *v25++ = v26;
              }
              while (v25 != v24);
            }
            while (v24 != (unsigned __int128 *)&v18[a4])
            {
              v30 = *a3;
              a3 += 2;
              *(_BYTE *)v24 = v30;
              v24 = (unsigned __int128 *)((char *)v24 + 1);
            }
          }
          v19 = &v18[a4];
          if (a6)
          {
            if (a6 == 1)
              *v19 = a5->i8[0];
            else
              result = (uint64_t)memcpy(v19, a5, a6);
          }
          v20 = &v19[a6];
          if (a7)
          {
            v21 = *(_BYTE **)(a7 + 8);
            v22 = *(unsigned int *)(a7 + 4);
            if ((*(_BYTE *)(a7 + 16) & 4) != 0)
            {
              if ((_DWORD)v22)
              {
                if ((_DWORD)v22 == 1)
                  *v20 = *v21;
                else
                  result = (uint64_t)memcpy(v20, v21, v22);
              }
            }
            else
            {
              if (v22 < 0x10)
              {
                v27 = (unsigned __int128 *)v20;
              }
              else
              {
                v27 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
                v28 = (unsigned __int128 *)v20;
                do
                {
                  v29 = (unsigned __int128)vld2q_s8(v21);
                  v21 += 32;
                  *v28++ = v29;
                }
                while (v28 != v27);
              }
              while (v27 != (unsigned __int128 *)&v20[v22])
              {
                v31 = *v21;
                v21 += 2;
                *(_BYTE *)v27 = v31;
                v27 = (unsigned __int128 *)((char *)v27 + 1);
              }
            }
            v23 = *(unsigned int *)(a7 + 4);
          }
          else
          {
            v23 = 0;
          }
          v20[v23] = a8;
        }
        goto LABEL_19;
      }
LABEL_29:
      v17 = 0;
      goto LABEL_19;
    }
LABEL_28:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if (!(_DWORD)result)
    goto LABEL_28;
  if (result > 0x7FFFFFEF)
    goto LABEL_29;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v32;
  if (v32)
  {
    *(_DWORD *)v32 = 2;
    *(_DWORD *)(v32 + 4) = v15;
    *(_QWORD *)(v32 + 8) = v32 + 20;
    *(_DWORD *)(v32 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v32 + 20), (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_19:
  *a9 = v17;
  return result;
}

void *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, uint64_t a2, uint64_t a3, int8x16_t *a4, int a5, uint64_t a6, char a7)
{
  void *result;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  v38 = a2;
  v39 = a3;
  result = WTF::StringView::getCharacters<char16_t>(&v38, __dst);
  v13 = &__dst[2 * v39];
  v14 = &v13[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v15 = &v13[2 * (a5 & 0xFFFFFFC0)];
    v16 = 0uLL;
    do
    {
      v40.val[0] = *a4;
      v17 = a4[1];
      v42.val[0] = a4[2];
      v18 = a4[3];
      a4 += 4;
      v19 = v18;
      v42.val[1] = 0uLL;
      v44.val[0] = v17;
      v40.val[1] = 0uLL;
      v20 = v13;
      vst2q_s8(v20, v40);
      v20 += 32;
      v44.val[1] = 0uLL;
      vst2q_s8(v20, v44);
      v21 = v13 + 64;
      vst2q_s8(v21, v42);
      v22 = v13 + 96;
      vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
      v13 += 128;
    }
    while (v13 != v15);
    v13 = v15;
  }
  while (v13 != v14)
  {
    v23 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v13 = v23;
    v13 += 2;
  }
  if (a6)
  {
    v24 = *(int8x16_t **)(a6 + 8);
    v25 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v26 = &v14[2 * v25];
      if (v25 >= 0x40)
      {
        v27 = &v14[2 * (v25 & 0xFFFFFFC0)];
        v29 = 0uLL;
        v30 = v14;
        do
        {
          v41.val[0] = *v24;
          v31 = v24[1];
          v43.val[0] = v24[2];
          v32 = v24[3];
          v24 += 4;
          v33 = v32;
          v43.val[1] = 0uLL;
          v45.val[0] = v31;
          v41.val[1] = 0uLL;
          v34 = v30;
          vst2q_s8(v34, v41);
          v34 += 32;
          v45.val[1] = 0uLL;
          vst2q_s8(v34, v45);
          v35 = v30 + 64;
          vst2q_s8(v35, v43);
          v36 = v30 + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v29 - 1));
          v30 += 128;
        }
        while (v30 != v27);
      }
      else
      {
        v27 = v14;
      }
      while (v27 != v26)
      {
        v37 = v24->u8[0];
        v24 = (int8x16_t *)((char *)v24 + 1);
        *(_WORD *)v27 = v37;
        v27 += 2;
      }
    }
    else if ((_DWORD)v25 == 1)
    {
      *(_WORD *)v14 = v24->i16[0];
    }
    else if ((_DWORD)v25)
    {
      result = memcpy(v14, v24, 2 * v25);
    }
    v28 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v28 = 0;
  }
  *(_WORD *)&v14[2 * v28] = a7;
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Document::getAnimations(void)::$_0,BOOL,WebCore::Element &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 40);
  return (*(_WORD *)(v2 + 28) & 0x80) == 0 || v2 == 0;
}

const WebCore::WebAnimation *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(const WebCore::WebAnimation *result, WebCore **a2, unint64_t a3, const WebCore::WebAnimation **a4, uint64_t a5)
{
  const WebCore::WebAnimation **v6;
  WebCore *v7;
  const WebCore::WebAnimation **v10;
  unint64_t v11;
  WebCore **v12;
  const WebCore::WebAnimation *v13;
  const WebCore::WebAnimation **v14;
  uint64_t v15;
  const WebCore::WebAnimation **v16;
  WebCore *v17;
  const WebCore::WebAnimation *v18;
  _DWORD *v19;
  WebCore *v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  const WebCore::WebAnimation **v24;
  const WebCore::WebAnimation **v25;
  const WebCore::WebAnimation *v26;
  WebCore **v27;
  WebCore **v28;
  const WebCore::WebAnimation **v29;
  WebCore *v30;
  const WebCore::WebAnimation *v31;
  uint64_t v32;
  const WebCore::WebAnimation *v33;
  uint64_t v34;
  WebCore *v35;
  unint64_t v36;

  if (a3 < 2)
    return result;
  v6 = (const WebCore::WebAnimation **)result;
  if (a3 == 2)
  {
    result = (const WebCore::WebAnimation *)WebCore::compareAnimationsByCompositeOrder(*(a2 - 1), *(const WebCore::WebAnimation **)result, (const WebCore::WebAnimation *)2);
    if ((_DWORD)result)
    {
      v7 = *v6;
      *v6 = *(a2 - 1);
      *(a2 - 1) = v7;
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v10 = a4;
    v11 = a3 >> 1;
    v12 = (WebCore **)((char *)result + 8 * (a3 >> 1));
    v13 = (const WebCore::WebAnimation *)(a3 >> 1);
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>((uint64_t)result, v12, v13, a4);
      v25 = &v10[v11];
      result = (const WebCore::WebAnimation *)std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>((uint64_t)&v6[a3 >> 1], a2, (const WebCore::WebAnimation *)(a3 - (a3 >> 1)), v25);
      v27 = &v10[a3];
      v28 = v25;
      v29 = v10;
      while (v28 != v27)
      {
        if (WebCore::compareAnimationsByCompositeOrder(*v28, *v29, v26))
        {
          v30 = *v28;
          *v28 = 0;
          result = *v6;
          *v6 = v30;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 1)
              result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
            else
              --*((_DWORD *)result + 6);
          }
          ++v28;
        }
        else
        {
          v31 = *v29;
          *v29 = 0;
          result = *v6;
          *v6 = v31;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 1)
              result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
            else
              --*((_DWORD *)result + 6);
          }
          ++v29;
        }
        ++v6;
        if (v29 == v25)
        {
          if (v28 != v27)
          {
            v34 = 0;
            do
            {
              v35 = v28[v34];
              v28[v34] = 0;
              result = v6[v34];
              v6[v34] = v35;
              if (result)
              {
                if (*((_DWORD *)result + 6) == 1)
                  result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
                else
                  --*((_DWORD *)result + 6);
              }
              ++v34;
            }
            while (&v28[v34] != v27);
          }
          goto LABEL_59;
        }
      }
      if (v29 != v25)
      {
        v32 = 0;
        do
        {
          v33 = v29[v32];
          v29[v32] = 0;
          result = v6[v32];
          v6[v32] = v33;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 1)
              result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
            else
              --*((_DWORD *)result + 6);
          }
          ++v32;
        }
        while (&v29[v32] != v25);
      }
LABEL_59:
      if (v10)
      {
        v36 = a3;
        do
        {
          result = *v10;
          *v10 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 1)
              result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
            else
              --*((_DWORD *)result + 6);
          }
          ++v10;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(result, v12, v13, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v10, a5);
      return (const WebCore::WebAnimation *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>((uint64_t)v6, &v6[a3 >> 1], (const WebCore::WebAnimation *)a2, a3 >> 1, a3 - (a3 >> 1), v10, a5);
    }
    return result;
  }
  if (result == (const WebCore::WebAnimation *)a2)
    return result;
  v14 = (const WebCore::WebAnimation **)((char *)result + 8);
  if ((WebCore **)((char *)result + 8) == a2)
    return result;
  v15 = 0;
  v16 = (const WebCore::WebAnimation **)result;
  do
  {
    v18 = *v16;
    v17 = v16[1];
    v16 = v14;
    result = (const WebCore::WebAnimation *)WebCore::compareAnimationsByCompositeOrder(v17, v18, (const WebCore::WebAnimation *)a3);
    if (!(_DWORD)result)
      goto LABEL_25;
    v19 = 0;
    v20 = *v16;
    *v16 = 0;
    for (i = v15; ; i -= 8)
    {
      v22 = (const WebCore::WebAnimation **)((char *)v6 + i);
      v23 = *(uint64_t *)((char *)v6 + i);
      *v22 = 0;
      v22[1] = v23;
      if (!v19)
        goto LABEL_17;
      if (v19[6] == 1)
        break;
      --v19[6];
LABEL_17:
      if (!i)
        goto LABEL_21;
LABEL_18:
      v24 = (const WebCore::WebAnimation **)((char *)v6 + i);
      if ((WebCore::compareAnimationsByCompositeOrder(v20, *(const WebCore::WebAnimation **)((char *)v6 + i - 8), (const WebCore::WebAnimation *)a3) & 1) == 0)goto LABEL_22;
      v19 = (_DWORD *)*v22;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 72))(v19);
    if (i)
      goto LABEL_18;
LABEL_21:
    v24 = v6;
LABEL_22:
    result = *v24;
    *v24 = v20;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        result = (const WebCore::WebAnimation *)(*(uint64_t (**)(const WebCore::WebAnimation *))(*(_QWORD *)result + 72))(result);
      else
        --*((_DWORD *)result + 6);
    }
LABEL_25:
    v14 = v16 + 1;
    v15 += 8;
  }
  while (v16 + 1 != a2);
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(uint64_t result, WebCore **a2, const WebCore::WebAnimation *a3, const WebCore::WebAnimation **a4)
{
  const WebCore::WebAnimation **v4;
  const WebCore::WebAnimation **v6;
  const WebCore::WebAnimation **v8;
  const WebCore::WebAnimation **v9;
  const WebCore::WebAnimation *v10;
  const WebCore::WebAnimation *v11;
  const WebCore::WebAnimation *v12;
  WebCore **v13;
  uint64_t v14;
  const WebCore::WebAnimation **v15;
  const WebCore::WebAnimation **v16;
  const WebCore::WebAnimation *v17;
  const WebCore::WebAnimation *v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  WebCore *v23;
  WebCore *v24;
  const WebCore::WebAnimation **v25;
  const WebCore::WebAnimation *v26;
  WebCore **v27;
  WebCore *v28;
  uint64_t v29;
  WebCore *v30;
  uint64_t v31;
  const WebCore::WebAnimation *v32;

  if (a3)
  {
    v4 = a4;
    v6 = (const WebCore::WebAnimation **)result;
    if (a3 == (const WebCore::WebAnimation *)1)
    {
LABEL_9:
      v11 = *v6;
      *v6 = 0;
      *v4 = v11;
      return result;
    }
    if (a3 == (const WebCore::WebAnimation *)2)
    {
      v8 = a2 - 1;
      result = WebCore::compareAnimationsByCompositeOrder(*(a2 - 1), *(const WebCore::WebAnimation **)result, (const WebCore::WebAnimation *)2);
      if ((_DWORD)result)
        v9 = v8;
      else
        v9 = v6;
      v10 = *v9;
      *v9 = 0;
      *v4++ = v10;
      if (!(_DWORD)result)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v25 = (const WebCore::WebAnimation **)(result + 8 * ((unint64_t)a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(result, v25, (unint64_t)a3 >> 1, a4, (unint64_t)a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(&v6[(unint64_t)a3 >> 1], a2, (char *)a3 - ((unint64_t)a3 >> 1), &v4[(unint64_t)a3 >> 1], (char *)a3 - ((unint64_t)a3 >> 1));
      v27 = &v6[(unint64_t)a3 >> 1];
      while (v27 != a2)
      {
        result = WebCore::compareAnimationsByCompositeOrder(*v27, *v6, v26);
        if ((_DWORD)result)
        {
          v28 = *v27;
          *v27++ = 0;
        }
        else
        {
          v28 = *v6;
          *v6++ = 0;
        }
        *v4++ = v28;
        if (v6 == v25)
        {
          if (v27 != a2)
          {
            v29 = 0;
            do
            {
              v30 = v27[v29];
              v27[v29] = 0;
              v4[v29++] = v30;
            }
            while (&v27[v29] != a2);
          }
          return result;
        }
      }
      if (v6 != v25)
      {
        v31 = 0;
        do
        {
          v32 = v6[v31];
          v6[v31] = 0;
          v4[v31++] = v32;
        }
        while (&v6[v31] != v25);
      }
    }
    else if ((WebCore **)result != a2)
    {
      v12 = *(const WebCore::WebAnimation **)result;
      *(_QWORD *)result = 0;
      v13 = (WebCore **)(result + 8);
      *a4 = v12;
      if ((WebCore **)(result + 8) != a2)
      {
        v14 = 0;
        v15 = a4;
        do
        {
          v16 = v15;
          v17 = *v15++;
          result = WebCore::compareAnimationsByCompositeOrder(*v13, v17, a3);
          if ((_DWORD)result)
          {
            v18 = *v16;
            *v16 = 0;
            v16[1] = v18;
            v19 = (uint64_t *)v4;
            if (v16 != v4)
            {
              v20 = v14;
              while (1)
              {
                v19 = (uint64_t *)((char *)v4 + v20);
                if (!WebCore::compareAnimationsByCompositeOrder(*v13, *(const WebCore::WebAnimation **)((char *)v4 + v20 - 8), a3))break;
                v22 = (_DWORD *)*(v19 - 1);
                v21 = (_DWORD *)*v19;
                *(v19 - 1) = 0;
                *v19 = (uint64_t)v22;
                if (v21)
                {
                  if (v21[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
                  else
                    --v21[6];
                }
                v20 -= 8;
                if (!v20)
                {
                  v19 = (uint64_t *)v4;
                  break;
                }
              }
            }
            v24 = *v13;
            *v13 = 0;
            result = *v19;
            *v19 = (uint64_t)v24;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              else
                --*(_DWORD *)(result + 24);
            }
          }
          else
          {
            v23 = *v13;
            *v13 = 0;
            *v15 = v23;
          }
          ++v13;
          v14 += 8;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(uint64_t result, WebCore **a2, const WebCore::WebAnimation *a3, uint64_t a4, uint64_t a5, const WebCore::WebAnimation **a6, uint64_t a7)
{
  uint64_t v9;
  WebCore **v11;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore **v18;
  unint64_t v19;
  WebCore **v20;
  const WebCore::WebAnimation **v21;
  const WebCore::WebAnimation **v22;
  const WebCore::WebAnimation *v23;
  WebCore **v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  WebCore **v28;
  WebCore **v29;
  WebCore *v30;
  int v31;
  WebCore **v32;
  WebCore **v33;
  WebCore *v34;
  WebCore **i;
  WebCore **v36;
  WebCore **v37;
  WebCore **v38;
  WebCore *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore **v42;
  uint64_t *v43;
  uint64_t v44;
  WebCore **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  WebCore *v51;
  WebCore **v52;
  const WebCore::WebAnimation **v53;
  uint64_t *v54;
  WebCore **v55;
  uint64_t *v56;
  WebCore *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore **v61;
  const WebCore::WebAnimation **v62;
  uint64_t v63;
  const WebCore::WebAnimation **v64;
  WebCore *v65;
  const WebCore::WebAnimation *v66;
  WebCore *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const WebCore::WebAnimation *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  WebCore **v76;
  const WebCore::WebAnimation **v77;
  uint64_t v78;

  if (a5)
  {
    v9 = a5;
    v11 = (WebCore **)a3;
    v13 = (uint64_t *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        result = WebCore::compareAnimationsByCompositeOrder(*a2, (const WebCore::WebAnimation *)v13[v15], a3);
        if ((result & 1) != 0)
          break;
        ++v15;
        v14 -= 8;
        if (a4 == v15)
          return result;
      }
      result = (uint64_t)&v13[v14 / 0xFFFFFFFFFFFFFFF8];
      v78 = a7;
      if (a4 - v15 >= v9)
      {
        if (a4 - 1 == v15)
        {
          v67 = (WebCore *)v13[v15];
          v13[v15] = (uint64_t)*a2;
          *a2 = v67;
          return result;
        }
        v25 = (a4 - v15) / 2;
        v26 = &v13[v25];
        if (v11 == a2)
        {
          v18 = v11;
          v32 = v11;
        }
        else
        {
          v75 = result;
          v76 = v11;
          v27 = v11 - a2;
          v18 = a2;
          do
          {
            v28 = &v18[v27 >> 1];
            v30 = *v28;
            v29 = v28 + 1;
            v31 = WebCore::compareAnimationsByCompositeOrder(v30, (const WebCore::WebAnimation *)v26[v15], a3);
            if (v31)
              v27 += ~(v27 >> 1);
            else
              v27 >>= 1;
            if (v31)
              v18 = v29;
          }
          while (v27);
          v32 = a2;
          v11 = v76;
          result = v75;
          v25 = (a4 - v15) / 2;
        }
        v20 = (WebCore **)&v26[v14 / 0xFFFFFFFFFFFFFFF8];
        v17 = v18 - v32;
      }
      else
      {
        if (v9 >= 0)
          v16 = v9;
        else
          v16 = v9 + 1;
        v17 = v16 >> 1;
        v18 = &a2[v16 >> 1];
        if ((WebCore **)result == a2)
        {
          v20 = a2;
          v24 = a2;
        }
        else
        {
          v73 = v16 >> 1;
          v74 = &v13[v14 / 0xFFFFFFFFFFFFFFF8];
          v77 = a6;
          v19 = (uint64_t)((char *)a2 - (char *)v13 + v14) >> 3;
          v20 = (WebCore **)result;
          do
          {
            v21 = &v20[v19 >> 1];
            v23 = *v21;
            v22 = v21 + 1;
            if (WebCore::compareAnimationsByCompositeOrder(*v18, v23, a3))
            {
              v19 >>= 1;
            }
            else
            {
              v20 = v22;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          result = (uint64_t)v74;
          v24 = (WebCore **)v74;
          a6 = v77;
          v17 = v73;
        }
        v25 = v20 - v24;
      }
      v33 = v18;
      if (v20 != a2)
      {
        v33 = v20;
        if (a2 != v18)
        {
          v34 = *v20;
          *v20 = *a2;
          v33 = v20 + 1;
          for (i = a2; ; *v33++ = *i)
          {
            *i++ = v34;
            if (i == v18)
              break;
            if (v33 == a2)
              a2 = i;
            v34 = *v33;
          }
          if (v33 != a2)
          {
            v36 = v33;
            v37 = a2;
            while (1)
            {
              v38 = v36;
              while (1)
              {
                v39 = *v36;
                *v38++ = *a2;
                *a2++ = v39;
                if (a2 != v18)
                  break;
                v36 = v38;
                a2 = v37;
                if (v38 == v37)
                  goto LABEL_52;
              }
              if (v38 == v37)
                v37 = a2;
              ++v36;
            }
          }
          v33 = a2;
        }
      }
LABEL_52:
      v40 = a4 - v25 - v15;
      v41 = v9 - v17;
      if (v25 + v17 >= v9 + a4 - (v25 + v17) - v15)
      {
        v44 = result;
        v45 = v11;
        v46 = v25;
        v47 = v40;
        v48 = v17;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(v33, v18, v45, v47, v9 - v17, a6, v78);
        v43 = (uint64_t *)v44;
        v18 = v20;
        a7 = v78;
        v41 = v48;
        v40 = v46;
        v11 = v33;
      }
      else
      {
        v42 = v20;
        a7 = v78;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Document::matchingAnimations(WTF::Function<BOOL ()(WebCore::Element &)> const&)::$_1 &,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>> *>(result, v42, v33, v25, v17, a6, v78);
        v43 = (uint64_t *)v33;
      }
      a4 = v40;
      v9 = v41;
      v13 = v43;
      a2 = v18;
      if (!v41)
        return result;
    }
    if (a4 <= v9)
    {
      if (v13 == (uint64_t *)a2)
        return result;
      v59 = 0;
      v50 = 0;
      do
      {
        v60 = v13[v59];
        v13[v59] = 0;
        a6[v59] = (const WebCore::WebAnimation *)v60;
        ++v50;
        ++v59;
      }
      while (&v13[v59] != (uint64_t *)a2);
      if (v59 * 8)
      {
        v61 = v11;
        v62 = &a6[v59];
        v63 = (uint64_t)&a6[v59 - 1];
        v64 = a6;
        while (a2 != v61)
        {
          if (WebCore::compareAnimationsByCompositeOrder(*a2, *v64, a3))
          {
            v65 = *a2;
            *a2 = 0;
            result = *v13;
            *v13 = (uint64_t)v65;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              else
                --*(_DWORD *)(result + 24);
            }
            ++a2;
          }
          else
          {
            v66 = *v64;
            *v64 = 0;
            result = *v13;
            *v13 = (uint64_t)v66;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              else
                --*(_DWORD *)(result + 24);
            }
            ++v64;
          }
          ++v13;
          if (v62 == v64)
            goto LABEL_110;
        }
        v70 = 0;
        do
        {
          v71 = v64[v70];
          v64[v70] = 0;
          result = v13[v70];
          v13[v70] = (uint64_t)v71;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
            else
              --*(_DWORD *)(result + 24);
          }
          ++v70;
        }
        while ((const WebCore::WebAnimation **)v63 != &v64[v70 - 1]);
      }
    }
    else
    {
      if (a2 == v11)
        return result;
      v49 = 0;
      v50 = 0;
      do
      {
        v51 = a2[v49];
        a2[v49] = 0;
        a6[v49] = v51;
        ++v50;
        ++v49;
      }
      while (&a2[v49] != v11);
      if (v49 * 8)
      {
        v52 = v11;
        v53 = &a6[v49];
        v54 = (uint64_t *)(v52 - 1);
        while (a2 != (WebCore **)v13)
        {
          v55 = a2 - 1;
          v56 = (uint64_t *)(v53 - 1);
          if (WebCore::compareAnimationsByCompositeOrder(*(v53 - 1), *(a2 - 1), a3))
          {
            v57 = *v55;
            *v55 = 0;
            result = *v54;
            *v54 = (uint64_t)v57;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              else
                --*(_DWORD *)(result + 24);
            }
          }
          else
          {
            v58 = *v56;
            *v56 = 0;
            result = *v54;
            *v54 = v58;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              else
                --*(_DWORD *)(result + 24);
            }
            v55 = a2;
            --v53;
          }
          --v54;
          a2 = v55;
          if (v53 == a6)
            goto LABEL_110;
        }
        v68 = 0;
        do
        {
          v69 = (uint64_t)v53[v68 - 1];
          v53[v68 - 1] = 0;
          result = v54[v68];
          v54[v68] = v69;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
            else
              --*(_DWORD *)(result + 24);
          }
          --v68;
        }
        while (&v53[v68] != a6);
      }
    }
LABEL_110:
    if (a6)
    {
      v72 = 0;
      do
      {
        result = (uint64_t)a6[v72];
        a6[v72] = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
          else
            --*(_DWORD *)(result + 24);
        }
        ++v72;
      }
      while (v72 < v50);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(*v13);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_QWORD *)(v14 + 8 * v18));
        *(_QWORD *)(v14 + 8 * v18) = *v13;
        if (v13 == a3)
          v12 = v14 + 8 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::HTMLAttachmentElement,WTF::RawPtrTraits<WebCore::HTMLAttachmentElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLAttachmentElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_31;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
            v11 = *v10;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_31;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_33:
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
        goto LABEL_31;
      }
      *(_DWORD *)v11 -= 2;
LABEL_31:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = *((_DWORD *)v11 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(v11);
    else
      v17 = v16 >> 8;
    v18 = 0;
    do
    {
      v19 = v17 & v15;
      v17 = ++v18 + v19;
    }
    while (*(_QWORD *)(v14 + 16 * v19));
    v20 = v14 + 16 * v19;
    v21 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v21)
    {
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v8);
          v26 = *(WTF::StringImpl **)v20;
          *(_QWORD *)v20 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v26 -= 2;
          }
          goto LABEL_25;
        }
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
    *(_QWORD *)v20 = 0;
LABEL_25:
    v22 = *v10;
    *v10 = 0;
    *(_QWORD *)v20 = v22;
    v23 = v4 + 16 * v9;
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v20 + 8) = v24;
    v25 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v25, v8);
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_31;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_33;
    *(_DWORD *)v11 -= 2;
    goto LABEL_31;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  *(_QWORD *)a1 = &off_1E33A3AC0;
  v3 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)(a1 + 64);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  *(_QWORD *)this = &off_1E33A3AC0;
  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v7, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::Document::didLogMessage(*(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), *(unsigned __int8 *)(a1 + 56), (uint64_t *)(a1 + 64));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33A3AE8;
  WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33A3AE8;
  WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::~$_1(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::Document::didLogMessage(WTFLogChannel const&,WTFLogLevel,WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned __int8 v10;
  WebCore::WindowProxy *v11;
  WebCore::DOMWrapperWorld *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  Inspector::ScriptArguments **v17;
  WebCore::WindowProxy *v19;
  Inspector::ScriptArguments **v20;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 2;
      v5 = *(_QWORD *)(v3 + 528);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 24)) == 0 || !*(_QWORD *)(v7 + 8))
      {
LABEL_15:
        if (v4)
        {
          *(_DWORD *)(v3 + 24) = v4;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
        }
        return result;
      }
      v8 = result;
      v9 = *((unsigned __int8 *)result + 16);
      if (v9 >= 5)
        v10 = 0;
      else
        v10 = 0x304010200uLL >> (8 * v9);
      v11 = *(WebCore::WindowProxy **)(v6 + 112);
      {
        v12 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_12:
        v13 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v11, v12) + 2);
        v14 = WTF::fastMalloc((WTF *)0x60);
        v20 = (Inspector::ScriptArguments **)MEMORY[0x19AEA5F1C](v14, *((unsigned __int8 *)v8 + 17), 0, v10, v8 + 6, v13, 0, 0.0);
        WebCore::Document::addConsoleMessage(v3, &v20);
        result = (unsigned int *)v20;
        v20 = 0;
        if (result)
        {
          v15 = (WTF *)MEMORY[0x19AEA5F58]();
          result = (unsigned int *)WTF::fastFree(v15, v16);
        }
        v4 = *(_DWORD *)(v3 + 24) - 2;
        goto LABEL_15;
      }
      v19 = *(WebCore::WindowProxy **)(v6 + 112);
      v17 = (Inspector::ScriptArguments **)WebCore::g_commonVMOrNull;
      if (WebCore::g_commonVMOrNull)
      {
LABEL_28:
        v12 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v17[5182] + 2);
        WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v12;
        v11 = v19;
        goto LABEL_12;
      }
      WTF::RunLoop::webIfExists(v11);
      JSC::VM::create();
      v17 = v20;
      WebCore::g_commonVMOrNull = (uint64_t)v20;
      if (__ldaxr((unsigned int *)v20 + 274))
      {
        __clrex();
      }
      else if (!__stlxr(4u, (unsigned int *)v20 + 274))
      {
LABEL_25:
        if (webThreadStarted == 1)
          *((_BYTE *)v20[14] + 5) = 1;
        WTF::ThreadGroup::addCurrentThread(*(WTF::ThreadGroup **)v17[73]);
        WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v17, 0);
        goto LABEL_28;
      }
      JSC::Heap::acquireAccessSlow((JSC::Heap *)(v20 + 24));
      goto LABEL_25;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::navigateFromServiceWorker(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = &off_1E33A3B10;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v9)
      {
        v12 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
        v5 = v12;
      }
      v10 = *(WTF **)(v5 + 16);
      if (v10)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v11 = v5;
        WTF::fastFree(v10, a2);
        v5 = v11;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::navigateFromServiceWorker(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33A3B10;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v9)
      {
        v12 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
        v5 = v12;
      }
      v10 = *(WTF **)(v5 + 16);
      if (v10)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v11 = v5;
        WTF::fastFree(v10, a2);
        v5 = v11;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Document::navigateFromServiceWorker(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&)::$_0,void>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *result;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v3 = a1[1];
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 528)) != 0 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_QWORD **)(v6 + 152);
    v10 = a1[1];
    if (v10)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), a2);
    v13 = v12;
    WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(v6 + 280), &v32);
    v14 = v32;
    if (v32)
    {
      v15 = *(WTF::StringImpl **)(*(_QWORD *)(v32 + 280) + 160);
      if (v15)
        *(_DWORD *)v15 += 2;
      v31 = v15;
      v32 = 0;
      v16 = (unsigned int *)(v14 + 8);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v28 = off_1E31FE290;
        *((_QWORD *)v28 + 1) = v16;
        v33 = v28;
        WTF::ensureOnMainThread();
        v29 = (uint64_t)v33;
        v33 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
    }
    else
    {
      v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v27 += 2;
      v31 = v27;
    }
    v19 = a1[7];
    a1[7] = 0;
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = &off_1E33A3B38;
    *((_QWORD *)v20 + 1) = v19;
    v33 = v20;
    WebCore::NavigationScheduler::scheduleLocationChange(v9, (WebCore::Document *)v11, v13, (WTF::URL *)(a1 + 2), &v31, 1, 0, 0, (uint64_t *)&v33);
    v22 = (uint64_t)v33;
    v33 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
    do
    {
      v24 = __ldaxr(v7);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v7));
    if (!v25)
    {
      atomic_store(1u, v7);
      v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = off_1E31FE290;
      *((_QWORD *)v30 + 1) = v7;
      v33 = v30;
      WTF::ensureOnMainThread();
      result = v33;
      v33 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v26 = a1[7];
    a1[7] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 16))(v26, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore8Document25navigateFromServiceWorkerERKNS_3URLEONS_17CompletionHandlerIFvNS2_28ScheduleLocationChangeResultEEEEEN3__0clEvEUlT_E_vJS8_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33A3B38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8Document25navigateFromServiceWorkerERKNS_3URLEONS_17CompletionHandlerIFvNS2_28ScheduleLocationChangeResultEEEEEN3__0clEvEUlT_E_vJS8_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A3B38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore8Document25navigateFromServiceWorkerERKNS_3URLEONS_17CompletionHandlerIFvNS2_28ScheduleLocationChangeResultEEEEEN3__0clEvEUlT_E_vJS8_EE4callES8_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (v24[78] != 1)
            {
              --v24[78];
              goto LABEL_24;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 40))(v24);
            v30 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_24:
            *(_QWORD *)v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (v28[78] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 40))(v28);
            else
              --v28[78];
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_33;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (v16[78] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 40))(v16);
            v14 = *v13;
          }
          else
          {
            --v16[78];
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_33:
      if (++v11 == v7)
        goto LABEL_44;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Document::didRejectSyncXHRDuringPageDismissal(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E33A3B60;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didRejectSyncXHRDuringPageDismissal(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E33A3B60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Document::didRejectSyncXHRDuringPageDismissal(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      *(_DWORD *)(*(_QWORD *)(result + 8) + 3276) = 0;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = 8 * v8;
      v13 = v7;
      do
      {
        v14 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        *v11 = v14;
        v15 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v11;
        v13 = (WTF *)((char *)v13 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::CachedResourceHandle<WebCore::CachedFont>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CachedFont*>(uint64_t result, WebCore::CachedResource **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 <= v4)
  {
LABEL_25:
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WTF *)((char *)v9 + 8 * *(unsigned int *)(v3 + 12)), *a2);
    ++*(_DWORD *)(v3 + 12);
    return 1;
  }
  if (!(v8 >> 29))
  {
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = (unsigned int **)((char *)v9 + 8 * v5);
      v13 = (unsigned int **)v9;
      do
      {
        v14 = *v13;
        if (*v13)
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          *(_QWORD *)v11 = v14;
          v16 = *((_QWORD *)v14 + 1);
          if (v16)
          {
            v19 = v11;
            ++*(_DWORD *)(v16 + 548);
            v17 = *(_QWORD *)(v16 + 488);
            if (v17)
            {
              if (*(_QWORD *)(v17 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v16 + 464), (uint64_t *)&v19, (uint64_t)&v18);
            }
          }
        }
        else
        {
          *(_QWORD *)v11 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v13, v10);
        v11 = (WTF *)((char *)v11 + 8);
        ++v13;
      }
      while (v13 != v12);
      v11 = *(WTF **)v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = v11;
    }
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DocumentMarkerController::*&)(void),WebCore::DocumentMarkerController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unint64_t WTF::Vector<WebCore::DocumentMarkerController::TextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::DocumentMarkerController::TextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DocumentMarkerController::TextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::DocumentMarkerController::TextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = (uint64_t *)((char *)v4 + 16 * v5);
        v9 = (uint64_t *)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *v7 = v10;
          v7[1] = v9[1];
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v9 += 2;
          v7 += 2;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v29 = v28[1];
          v28[1] = 0;
          if (v29)
          {
            v30 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v10);
            WTF::fastFree(v30, v31);
            v32 = *v28;
            *v28 = 0;
            if (v32)
            {
              if (*(_DWORD *)(v32 + 24) == 2)
              {
                if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v32);
              }
              else
              {
                *(_DWORD *)(v32 + 24) -= 2;
              }
            }
          }
          else
          {
            *v28 = 0;
          }
          v33 = *v13;
          *v13 = 0;
          *v28 = v33;
          v34 = v6 + 16 * v11;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v28[1] = v35;
          v36 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            v37 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v10);
            WTF::fastFree(v37, v38);
          }
          v39 = *v13;
          *v13 = 0;
          if (v39)
          {
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v10);
            WTF::fastFree(v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

char *WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 160 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x199999A)
      {
        __break(0xC471u);
        JUMPOUT(0x1959B96ACLL);
      }
      v17 = (WTF *)((char *)v5 + 160 * *(unsigned int *)(a1 + 12));
      v18 = 160 * v16;
      v19 = WTF::fastMalloc((WTF *)(160 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFE0) / 0xA0;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x199999A)
      {
        __break(0xC471u);
        JUMPOUT(0x1959B96B4);
      }
      v10 = 160 * v9;
      v11 = WTF::fastMalloc((WTF *)(160 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFE0) / 0xA0;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

WTF *WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::move(WTF *result, WTF *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v9;
  WTF *v10;
  int v11;
  void *v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (result != a2)
  {
    v27 = v6;
    v28 = v5;
    v29 = v3;
    v30 = v4;
    v9 = (WTF **)result;
    do
    {
      *(_QWORD *)a3 = 0;
      v10 = v9[1];
      v11 = *((_DWORD *)v9 + 4);
      *(_BYTE *)(a3 + 32) = 0;
      v12 = (void *)(a3 + 32);
      *(_DWORD *)(a3 + 16) = v11;
      *(_QWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 96) = -1;
      v13 = *((unsigned int *)v9 + 24);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v13])(&v25);
        *(_DWORD *)(a3 + 96) = v13;
      }
      *(_QWORD *)(a3 + 112) = a3 + 128;
      *(_QWORD *)(a3 + 120) = 1;
      v14 = (WTF **)v9[14];
      v15 = (WTF *)(v9 + 16);
      if (v14 == v9 + 16)
      {
        v17 = *((unsigned int *)v9 + 31);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 16 * v17;
          do
          {
            *(_OWORD *)(a3 + v18 + 128) = *(_OWORD *)&v14[v18 / 8];
            v18 += 16;
          }
          while (v19 != v18);
        }
      }
      else
      {
        v9[14] = v15;
        *(_QWORD *)(a3 + 112) = v14;
        v16 = *((_DWORD *)v9 + 30);
        *((_DWORD *)v9 + 30) = 1;
        *(_DWORD *)(a3 + 120) = v16;
      }
      v20 = *((_DWORD *)v9 + 31);
      *((_DWORD *)v9 + 31) = 0;
      *(_DWORD *)(a3 + 124) = v20;
      *(_OWORD *)(a3 + 144) = *((_OWORD *)v9 + 9);
      result = v9[14];
      if (v15 != result && result != 0)
      {
        v9[14] = 0;
        *((_DWORD *)v9 + 30) = 0;
        result = (WTF *)WTF::fastFree(result, v12);
      }
      v22 = *((unsigned int *)v9 + 24);
      if ((_DWORD)v22 != -1)
        result = (WTF *)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v22])(&v26, v9 + 4);
      *((_DWORD *)v9 + 24) = -1;
      if (*v9)
      {
        *((_QWORD *)*v9 + 1) = 0;
        result = *v9;
        *v9 = 0;
        if (result)
        {
          do
          {
            v23 = __ldaxr((unsigned int *)result);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, (unsigned int *)result));
          if (!v24)
          {
            atomic_store(1u, (unsigned int *)result);
            result = (WTF *)WTF::fastFree(result, v12);
          }
        }
      }
      else
      {
        *v9 = 0;
      }
      a3 += 160;
      v9 += 20;
    }
    while (v9 != (WTF **)a2);
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::moveOverlapping(WTF *result, WTF *a2, unint64_t a3)
{
  WTF **v3;
  WTF **v4;
  unint64_t v5;
  unint64_t v6;
  WTF **v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;

  v3 = (WTF **)a2;
  v4 = (WTF **)result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::RenderedDocumentMarker>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = a3 + 160 * ((a2 - result) / 160);
    v6 = v5;
    do
    {
      *(_QWORD *)(v6 - 160) = 0;
      v6 -= 160;
      v7 = v3;
      v8 = (uint64_t)*(v3 - 19);
      v9 = *((_DWORD *)v3 - 36);
      *(_BYTE *)(v5 - 128) = 0;
      v10 = (void *)(v5 - 128);
      *(_DWORD *)(v5 - 144) = v9;
      *(_QWORD *)(v5 - 152) = v8;
      *(_DWORD *)(v5 - 64) = -1;
      v11 = *((unsigned int *)v3 - 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JSY_SX_EEEDcmS10_DpOT0____fdiagonal[v11])(&v24);
        *(_DWORD *)(v5 - 64) = v11;
      }
      *(_QWORD *)(v5 - 48) = v5 - 32;
      *(_QWORD *)(v5 - 40) = 1;
      v12 = (WTF **)*(v7 - 6);
      v13 = (WTF *)(v7 - 4);
      if (v12 == v7 - 4)
      {
        v15 = *((unsigned int *)v7 - 9);
        if ((_DWORD)v15)
        {
          v16 = 0;
          v17 = 16 * v15;
          do
          {
            *(_OWORD *)(v5 + v16 - 32) = *(_OWORD *)&v12[v16 / 8];
            v16 += 16;
          }
          while (v17 != v16);
        }
      }
      else
      {
        *(v7 - 6) = v13;
        *(_QWORD *)(v5 - 48) = v12;
        v14 = *((_DWORD *)v7 - 10);
        *((_DWORD *)v7 - 10) = 1;
        *(_DWORD *)(v5 - 40) = v14;
      }
      v18 = *((_DWORD *)v7 - 9);
      *((_DWORD *)v7 - 9) = 0;
      *(_DWORD *)(v5 - 36) = v18;
      *(_OWORD *)(v5 - 16) = *((_OWORD *)v7 - 1);
      result = *(v7 - 6);
      if (v13 != result && result != 0)
      {
        *(v7 - 6) = 0;
        *((_DWORD *)v7 - 10) = 0;
        result = (WTF *)WTF::fastFree(result, v10);
      }
      v20 = *((unsigned int *)v7 - 16);
      if ((_DWORD)v20 != -1)
        result = (WTF *)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v20])(&v25, v7 - 16);
      v3 = v7 - 20;
      *((_DWORD *)v7 - 16) = -1;
      v21 = (uint64_t)*(v7 - 20);
      if (v21)
      {
        *(_QWORD *)(v21 + 8) = 0;
        result = *v3;
        *v3 = 0;
        if (result)
        {
          do
          {
            v22 = __ldaxr((unsigned int *)result);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unsigned int *)result));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)result);
            result = (WTF *)WTF::fastFree(result, v10);
          }
        }
      }
      else
      {
        *v3 = 0;
      }
      v5 = v6;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = (unsigned int **)v7;
      do
      {
        v13 = *v12;
        *v12 = 0;
        *v11 = v13;
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v10);
          }
        }
        ++v11;
        ++v12;
      }
      while (v12 != (unsigned int **)((char *)v7 + 8 * v8));
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 8 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1959B9CB4);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 29)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 8 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::markersInRange(WebCore::SimpleRange const&,WTF::OptionSet<WebCore::DocumentMarker::Type>)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *((unsigned int *)v4 + 3);
  if ((_DWORD)v5 == *((_DWORD *)v4 + 2))
  {
    WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 8), v5 + 1);
    v5 = *((unsigned int *)v4 + 3);
    v6 = *v4;
    v7 = *a3;
    if (*a3)
      goto LABEL_20;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a3;
    v9 = (unsigned int *)*a3;
    *a3 = v7;
    if (!v9)
      goto LABEL_20;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
    v7 = *a3;
    if (*a3)
    {
LABEL_20:
      do
        v12 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v12 + 1, (unsigned int *)v7));
    }
  }
  else
  {
    v6 = *v4;
    v7 = *a3;
    if (*a3)
      goto LABEL_21;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a3;
    v14 = (unsigned int *)*a3;
    *a3 = v7;
    if (!v14)
      goto LABEL_21;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v7 = *a3;
    if (*a3)
    {
LABEL_21:
      do
        v17 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v17 + 1, (unsigned int *)v7));
    }
  }
  *(_QWORD *)(v6 + 8 * v5) = v7;
  ++*((_DWORD *)v4 + 3);
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::rangesForMarkersInRange(WebCore::SimpleRange const&,WTF::OptionSet<WebCore::DocumentMarker::Type>)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, WebCore::Node *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  int v20;

  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a3 + 12);
  v4 = *(_DWORD *)(a3 + 16);
  *((_DWORD *)a2 + 6) += 4;
  v17 = a2;
  v18 = v5;
  v19 = a2;
  v20 = v4;
  v6 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(v3 + 8))
  {
    v7 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v6 + 1, (unint64_t)&v17);
    v8 = *(unsigned int *)(v3 + 12);
    v9 = *(_QWORD *)v3 + 32 * v8;
    v10 = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)v9 = v10;
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(v7 + 8);
    v11 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v9 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(v7 + 24);
    v12 = v19;
    *(_DWORD *)(v9 + 24) = v11;
    *(_DWORD *)(v3 + 12) = v8 + 1;
    v19 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, a2);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
  }
  else
  {
    v13 = *(_QWORD *)v3;
    v17 = 0;
    v14 = v13 + 32 * v6;
    *(_QWORD *)v14 = a2;
    *(_DWORD *)(v14 + 8) = v5;
    *(_QWORD *)(v14 + 16) = a2;
    *(_DWORD *)(v14 + 24) = v4;
    *(_DWORD *)(v3 + 12) = v6 + 1;
    v19 = 0;
  }
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, a2);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  return 0;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  WTF *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  result = (_QWORD *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    v6 = (WTF *)WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    result = (_QWORD *)WTF::fastFree(v6, v7);
  }
  ++*(_DWORD *)(*a1 - 16);
  v8 = *a1;
  if (*a1)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *a1;
  if (*a1)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashMap<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::RenderedDocumentMarker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(a1, v12 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::dismissMarkers(WTF::OptionSet<WebCore::DocumentMarker::Type>)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(WTF::WallTime *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (!*(_BYTE *)(a3 + 145))
  {
    **((_BYTE **)a1 + 1) = 1;
    if (!*(_BYTE *)(a3 + 145))
    {
      *(_BYTE *)(a3 + 145) = 1;
      WTF::WallTime::now(a1);
      *(_QWORD *)(a3 + 152) = v4;
    }
  }
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::writingToolsTextSuggestionAnimationTimerFired(void)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  _BYTE v5[20];
  __int128 v6;
  char v7;

  v2 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = *(_DWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
  *(_DWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v6) = 0;
    v7 = 0;
    v5[0] = 0;
    v5[16] = 0;
    WebCore::RenderObject::issueRepaint(v2, &v6, 0, 0, (uint64_t)v5);
    v3 = *(_DWORD *)(v2 + 16);
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 16) = v3 - 1;
    return 0;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::fadeAnimationTimerFired(void)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(WTF::WallTime *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  float v8;
  BOOL v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _BYTE v14[20];
  __int128 v15;
  char v16;

  if (!*(_BYTE *)(a3 + 145))
    return 0;
  v6 = *(double *)(a3 + 152);
  WTF::WallTime::now(a1);
  *(float *)&v7 = (v7 - v6) / 0.2;
  v8 = 1.0 - *(float *)&v7;
  v9 = *(float *)&v7 <= 1.0;
  v10 = 0.0;
  if (v9)
    v10 = v8;
  *(float *)(a3 + 148) = v10;
  if (v10 == 0.0)
  {
    **((_BYTE **)a1 + 1) = 1;
    return 0;
  }
  **((_BYTE **)a1 + 2) = 0;
  v11 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v11)
    return 0;
  v12 = *(_DWORD *)(v11 + 16) + 1;
  *(_DWORD *)(v11 + 16) = v12;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v15) = 0;
    v16 = 0;
    v14[0] = 0;
    v14[16] = 0;
    WebCore::RenderObject::issueRepaint(v11, &v15, 0, 0, (uint64_t)v14);
    v12 = *(_DWORD *)(v11 + 16);
  }
  if (v12)
  {
    *(_DWORD *)(v11 + 16) = v12 - 1;
    return 0;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::fadeAnimationTimerFired(void)::$_1,WebCore::FilterMarkerResult,WebCore::RenderedDocumentMarker const&>::call(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 148) == 0.0 && *(_BYTE *)(a2 + 145) != 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::hasMarkers(WebCore::SimpleRange const&,WTF::OptionSet<WebCore::DocumentMarker::Type>)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1)
{
  **(_BYTE **)(a1 + 8) = 1;
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentMarkerController::clearDescriptionOnMarkersIntersectingRange(WebCore::SimpleRange const&,WTF::OptionSet<WebCore::DocumentMarker::Type>)::$_0,BOOL,WebCore::Node &,WebCore::RenderedDocumentMarker &>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v8;

  v4 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v4 == -1)
    goto LABEL_7;
  v5 = (WTF::StringImpl *)(a3 + 32);
  if ((_DWORD)v4)
  {
    ((void (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIP11objc_objectEENS6_6RefPtrINS8_4NodeENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS9_30WritingToolsTextSuggestionDataENS9_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v4])(&v8, v5);
LABEL_7:
    *(_QWORD *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 96) = 0;
    return 0;
  }
  v6 = *(WTF::StringImpl **)v5;
  *(_QWORD *)v5 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return 0;
}

WebCore::Element *WebCore::DocumentOrShadowRootFullscreen::fullscreenElement(WebCore::DocumentOrShadowRootFullscreen *this, WebCore::TreeScope *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Element *v7;
  WebCore::Element *v8;
  int v9;
  WebCore::Element *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 1992);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
    v6 = *(_QWORD *)(v5 + 3096);
    if (v6)
    {
      v12 = 0;
      v13 = (uint64_t *)(v5 + 3104);
      do
      {
        if (v12)
          v14 = (uint64_t *)(v12 + 8);
        else
          v14 = v13;
        v12 = *v14;
        v7 = *(WebCore::Element **)v12;
        if ((*(_BYTE *)(*(_QWORD *)v12 + 54) & 0x40) != 0)
          break;
        v7 = 0;
      }
      while (v12 != v6);
    }
    else
    {
      v7 = 0;
    }
    v8 = WebCore::TreeScope::ancestorElementInThisScope(this, v7);
    v9 = *(_DWORD *)(v4 + 8);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1959BA3D8);
    }
    v10 = v8;
    *(_DWORD *)(v4 + 8) = v9 - 1;
    v3 = *(_DWORD *)(v2 + 24) - 2;
    if (*(_DWORD *)(v2 + 24) != 2)
      goto LABEL_6;
  }
  else
  {
    v10 = 0;
    if (v3)
    {
LABEL_6:
      *(_DWORD *)(v2 + 24) = v3;
      return v10;
    }
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return v10;
}

uint64_t WebCore::DocumentParser::startParsing(uint64_t this)
{
  *(_BYTE *)(this + 12) = 0;
  return this;
}

uint64_t WebCore::DocumentParser::prepareToStopParsing(uint64_t this)
{
  *(_BYTE *)(this + 12) = 1;
  return this;
}

uint64_t WebCore::DocumentParser::stopParsing(uint64_t this)
{
  *(_BYTE *)(this + 12) = 2;
  return this;
}

uint64_t WebCore::DocumentParser::detach(WebCore::DocumentParser *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *((_BYTE *)this + 12) = 3;
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::DocumentStorageAccess::~DocumentStorageAccess(WebCore::DocumentStorageAccess *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::UserGestureIndicator *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v13 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v13)
      {
        v16 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v13));
        v3 = v16;
      }
      v14 = *(WTF **)(v3 + 16);
      if (v14)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v15 = v3;
        WTF::fastFree(v14, a2);
        v3 = v15;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::UserGestureIndicator *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    WebCore::UserGestureIndicator::~UserGestureIndicator(v6);
    WTF::fastFree(v7, v8);
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::DocumentStorageAccess::~DocumentStorageAccess(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::DocumentStorageAccess::from(WebCore::DocumentStorageAccess *this, WebCore::Document *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  const char *v11[3];
  const char *v12[2];

  v3 = (uint64_t *)((char *)this + 536);
  v11[0] = "DocumentStorageAccess";
  v11[1] = (const char *)22;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 67, v11);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = off_1E33A3DF8;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v5 + 24) = v6;
    *(_WORD *)(v5 + 32) = 256;
    v10 = (unsigned __int8 *)v5;
    v12[0] = "DocumentStorageAccess";
    v12[1] = (const char *)22;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v12, &v10, (uint64_t)v11);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

unsigned int *WebCore::DocumentStorageAccess::hasStorageAccess(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  const WTF::StringImpl **v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int *result;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  unsigned int v63;
  WTF *v64;
  void *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  _QWORD *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  *(_DWORD *)(v4 + 24) += 4;
  v5 = *(_QWORD *)(v4 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 528);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = (unsigned int *)(v10 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 280) + 16) + 1144))(*(_QWORD *)(*(_QWORD *)(v10 + 280) + 16));
          v14 = v13;
          do
          {
            v15 = __ldaxr(v11);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v11));
          if (v16)
          {
            if ((v13 & 1) != 0)
            {
LABEL_13:
              v17 = 1;
              v18 = 1;
              goto LABEL_35;
            }
          }
          else
          {
            atomic_store(1u, v11);
            v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v24 = off_1E31FE290;
            *((_QWORD *)v24 + 1) = v11;
            v75 = v24;
            WTF::ensureOnMainThread();
            v25 = v75;
            v75 = 0;
            if (v25)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
            if ((v14 & 1) != 0)
              goto LABEL_13;
          }
        }
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), a2);
      v20 = v26;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      if (v26[8] != 1)
      {
        if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6
          || (WebCore::Document::topOrigin((WebCore::Document *)v4, a2),
              (WebCore::SecurityOrigin::equal((const WTF::StringImpl **)v20, v28) & 1) != 0))
        {
          v17 = 1;
          v18 = 1;
          goto LABEL_33;
        }
        v29 = *(_QWORD *)(v6 + 24);
        if (v29)
        {
          v18 = 0;
          v17 = *(_QWORD *)(v29 + 8) == 0;
          goto LABEL_33;
        }
      }
      v18 = 0;
      v17 = 1;
      do
LABEL_33:
        v30 = __ldaxr(v20);
      while (__stlxr(v30 - 1, v20));
      if (v30 != 1)
      {
LABEL_35:
        v31 = (unsigned int *)(v6 + 8);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v66 = off_1E31FE290;
          *((_QWORD *)v66 + 1) = v31;
          v75 = v66;
          WTF::ensureOnMainThread();
          v67 = v75;
          v75 = 0;
          if (v67)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
        }
        goto LABEL_38;
      }
      v23 = 0;
      goto LABEL_85;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), a2);
  v20 = v19;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  if (!v19)
  {
    v18 = 0;
    v17 = 1;
    goto LABEL_38;
  }
  do
    v22 = __ldaxr(v19);
  while (__stlxr(v22 - 1, v19));
  v18 = 0;
  v17 = 1;
  if (v22 != 1)
    goto LABEL_38;
  v6 = 0;
  v23 = 1;
LABEL_85:
  atomic_store(1u, v20);
  v68 = (WTF::StringImpl *)*((_QWORD *)v20 + 6);
  *((_QWORD *)v20 + 6) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, a2);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)v20 + 5);
  *((_QWORD *)v20 + 5) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, a2);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = v20[8];
  if ((_DWORD)v70 != -1)
    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33A46A0[v70])(&v75, v20 + 2);
  v20[8] = -1;
  WTF::fastFree((WTF *)v20, a2);
  if ((v23 & 1) == 0)
    goto LABEL_35;
LABEL_38:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v17)
  {
    v34 = *(_QWORD *)a2;
    v35 = v18;
LABEL_42:
    result = (unsigned int *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(v34, v35);
    goto LABEL_71;
  }
  v38 = *(_QWORD *)(v4 + 528);
  if (!v38 || (v39 = *(_QWORD *)(v38 + 8)) == 0)
  {
    v34 = *(_QWORD *)a2;
    v35 = 0;
    goto LABEL_42;
  }
  v40 = (unsigned int *)(v39 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  v42 = *(_QWORD *)(v39 + 24);
  if (v42 && (v43 = *(_QWORD *)(v42 + 8)) != 0)
  {
    ++*(_DWORD *)v43;
    v44 = *(_QWORD *)(*(_QWORD *)(v43 + 48) + 16);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), a2);
    v46 = *(unsigned int *)(v45 + 32);
    if ((_DWORD)v46 == -1
      || (v75 = (WTF::StringImpl *)&v74,
          v47 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v46])(&v75, v45 + 8), WebCore::RegistrableDomain::uncheckedCreateFromHost(v47, &v74), WebCore::Document::topOrigin((WebCore::Document *)v4, v48), v50 = *(unsigned int *)(v49 + 32), (_DWORD)v50 == -1))
    {
      v72 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::DocumentStorageAccess::requestStorageAccess(v72);
    }
    v75 = (WTF::StringImpl *)&v73;
    v51 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v75, v49 + 8);
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v51, &v75);
    v52 = *(_QWORD *)(a1 + 8);
    if (v52)
      goto LABEL_102;
    v52 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = a1;
    v54 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v52;
    if (!v54)
      goto LABEL_102;
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::fastFree((WTF *)v54, v53);
    }
    v52 = *(_QWORD *)(a1 + 8);
    if (v52)
    {
LABEL_102:
      do
        v57 = __ldaxr((unsigned int *)v52);
      while (__stlxr(v57 + 1, (unsigned int *)v52));
    }
    v58 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v59 = &off_1E33A46C0;
    v59[1] = v52;
    v59[2] = v58;
    v73 = v59;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, _QWORD **))(*(_QWORD *)v44 + 1616))(v44, &v74, &v75, v39, &v73);
    v60 = v73;
    v73 = 0;
    if (v60)
      (*(void (**)(_QWORD *))(*v60 + 8))(v60);
    v61 = v75;
    v75 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v37);
      else
        *(_DWORD *)v61 -= 2;
    }
    result = (unsigned int *)v74;
    v74 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v37);
      else
        *result -= 2;
    }
    if (*(_DWORD *)v43 == 1)
    {
      WebCore::Page::~Page(v43);
      result = (unsigned int *)WTF::fastFree(v64, v65);
    }
    else
    {
      --*(_DWORD *)v43;
    }
  }
  else
  {
    result = (unsigned int *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)a2, 0);
  }
  do
  {
    v62 = __ldaxr(v40);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v40));
  if (!v63)
  {
    atomic_store(1u, v40);
    v71 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v71 = off_1E31FE290;
    *((_QWORD *)v71 + 1) = v40;
    v75 = v71;
    WTF::ensureOnMainThread();
    result = (unsigned int *)v75;
    v75 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
LABEL_71:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v37);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::DocumentStorageAccess::requestStorageAccess(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  unsigned int *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  int v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  WTF *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WebCore::DocumentStorageAccess *v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = (unsigned int *)WebCore::DocumentStorageAccess::requestStorageAccessQuickCheck((WebCore::DocumentStorageAccess *)a1, a2);
  if ((unsigned __int16)result >= 0x100u)
  {
    v32 = *(_QWORD *)a2;
    if (!(_BYTE)result)
    {
      v38 = *(_QWORD *)(v32 + 24);
      if (!v38 || !*(_QWORD *)v38 || (*(_BYTE *)(v38 + 8) & 3) != 0)
        goto LABEL_49;
      v39 = *(_QWORD *)(v32 + 32);
      if (!v39 || (*(_BYTE *)(v39 + 8) & 3) != 0)
        v40 = 0;
      else
        v40 = *(uint64_t **)v39;
      JSC::JSLockHolder::JSLockHolder();
      v35 = v32;
      v36 = v40;
      v37 = 0;
LABEL_41:
      WebCore::DeferredPromise::callFunction(v35, v36, v37, (objc_class *)0xA);
      result = (unsigned int *)MEMORY[0x19AEA32A0](&v53);
      goto LABEL_49;
    }
LABEL_30:
    v33 = *(_QWORD *)(v32 + 24);
    if (!v33 || !*(_QWORD *)v33 || (*(_BYTE *)(v33 + 8) & 3) != 0)
      goto LABEL_49;
    v34 = **(uint64_t ***)(v32 + 32);
    JSC::JSLockHolder::JSLockHolder();
    v35 = v32;
    v36 = v34;
    v37 = 1;
    goto LABEL_41;
  }
  v7 = *(_QWORD *)(v4 + 528);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v32 = *(_QWORD *)a2;
    goto LABEL_30;
  }
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(_QWORD *)(v8 + 24);
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    ++*(_DWORD *)v12;
    if ((*(_QWORD *)(*(_QWORD *)(v12 + 112) + 696) & 0x400000000000) == 0)
      *(_BYTE *)(a1 + 33) = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v4 + 192), v6);
    v15 = *(unsigned int *)(v14 + 32);
    if ((_DWORD)v15 == -1
      || (v53 = (WTF::StringImpl *)&v52,
          v16 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v53, v14 + 8), WebCore::RegistrableDomain::uncheckedCreateFromHost(v16, &v52), WebCore::Document::topOrigin((WebCore::Document *)v4, v17), v19 = *(unsigned int *)(v18 + 32), (_DWORD)v19 == -1))
    {
      v49 = (WebCore::DocumentStorageAccess *)std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::DocumentStorageAccess::requestStorageAccessQuickCheck(v49, v50);
    }
    v53 = (WTF::StringImpl *)&v51;
    v20 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v19])(&v53, v18 + 8);
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v20, &v53);
    v21 = *(unsigned __int8 *)(a1 + 33);
    v22 = *(_QWORD *)(a1 + 8);
    if (v22)
      goto LABEL_63;
    v22 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = a1;
    v24 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v22;
    if (!v24)
      goto LABEL_63;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v23);
    }
    v22 = *(_QWORD *)(a1 + 8);
    if (v22)
    {
LABEL_63:
      do
        v27 = __ldaxr((unsigned int *)v22);
      while (__stlxr(v27 + 1, (unsigned int *)v22));
    }
    v28 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v29 = &off_1E33A46E8;
    v29[1] = a1;
    v29[2] = v22;
    v29[3] = v28;
    v51 = v29;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, BOOL, _QWORD **))(*(_QWORD *)v13 + 1624))(v13, &v52, &v53, v8, v21 != 0, &v51);
    v30 = v51;
    v51 = 0;
    if (v30)
      (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    v31 = v53;
    v53 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v6);
      else
        *(_DWORD *)v31 -= 2;
    }
    result = (unsigned int *)v52;
    v52 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *result -= 2;
    }
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::Page::~Page(v12);
      result = (unsigned int *)WTF::fastFree(v44, v45);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  else
  {
    v41 = *(_QWORD *)a2;
    v42 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    if (v42 && *(_QWORD *)v42 && (*(_BYTE *)(v42 + 8) & 3) == 0)
    {
      v43 = **(uint64_t ***)(v41 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v41, v43, 1, (objc_class *)0xA);
      result = (unsigned int *)MEMORY[0x19AEA32A0](&v53);
    }
  }
  do
  {
    v46 = __ldaxr(v9);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v9));
  if (!v47)
  {
    atomic_store(1u, v9);
    v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v48 = off_1E31FE290;
    *((_QWORD *)v48 + 1) = v9;
    v53 = v48;
    WTF::ensureOnMainThread();
    result = (unsigned int *)v53;
    v53 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
LABEL_49:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::DocumentStorageAccess::requestStorageAccessQuickCheck(WebCore::DocumentStorageAccess *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl **v21;
  const WTF::StringImpl **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(v2 + 528);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
    v17 = 1;
    v16 = 1;
    goto LABEL_28;
  }
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 280) + 16) + 1144))(*(_QWORD *)(*(_QWORD *)(v9 + 280) + 16));
      v13 = v12;
      do
      {
        v14 = __ldaxr(v10);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v10));
      if (v15)
      {
        if ((v12 & 1) != 0)
        {
LABEL_13:
          v16 = 0;
          v17 = 1;
          goto LABEL_26;
        }
      }
      else
      {
        atomic_store(1u, v10);
        v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v18 = off_1E31FE290;
        *((_QWORD *)v18 + 1) = v10;
        v30 = v18;
        WTF::ensureOnMainThread();
        v19 = v30;
        v30 = 0;
        if (v19)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
        if ((v13 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
  if (*(_DWORD *)(v20 + 32) != 1 && *((unsigned __int8 *)this + 32) <= 1u)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
      goto LABEL_13;
    v21 = (const WTF::StringImpl **)v20;
    WebCore::Document::topOrigin((WebCore::Document *)v2, a2);
    if ((WebCore::SecurityOrigin::equal(v21, v22) & 1) != 0)
      goto LABEL_13;
    if ((*(_BYTE *)(v2 + 269) & 0x20) == 0)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v30, (const WebCore::SecurityOriginData *)(v21 + 1));
      v23 = WebCore::LocalFrame::requestSkipUserActivationCheckForStorageAccess(v4, (WTF::ASCIICaseInsensitiveHash *)&v30);
      if ((v23 & 1) != 0)
      {
LABEL_24:
        v16 = 0;
LABEL_37:
        v27 = v30;
        v30 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, a2);
          else
            *(_DWORD *)v27 -= 2;
        }
        v17 = v16;
        goto LABEL_26;
      }
      if (WTF::isMainThread((WTF *)v23))
      {
        {
          if (WebCore::currentToken(void)::token
            && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
            && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
          {
            goto LABEL_24;
          }
        }
        else
        {
          WebCore::currentToken(void)::token = 0;
        }
      }
      v16 = 1;
      goto LABEL_37;
    }
  }
  v16 = 1;
  v17 = 1;
  do
  {
LABEL_26:
    v24 = __ldaxr(v6);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v6));
  if (!v25)
  {
    atomic_store(1u, v6);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E31FE290;
    *((_QWORD *)v28 + 1) = v6;
    v30 = v28;
    WTF::ensureOnMainThread();
    v29 = v30;
    v30 = 0;
    if (v29)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
  }
LABEL_28:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v16 | (v17 << 8);
}

WTF::StringImpl *WebCore::DocumentStorageAccess::requestStorageAccessForDocumentQuirk(WebCore::DocumentStorageAccess *a1, WTF::StringImpl *a2)
{
  unsigned __int16 v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  WTF::StringImpl *v18;

  v4 = WebCore::DocumentStorageAccess::requestStorageAccessQuickCheck(a1, a2);
  if (v4 >= 0x100u)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    if ((_BYTE)v4)
    {
      v12 = v11;
      v13 = 0;
    }
    else
    {
      v12 = v11;
      v13 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v12, v13);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 192), v5);
    v7 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v7 == -1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::DocumentStorageAccess::requestStorageAccessQuirk(v14, v15, v16);
    }
    else
    {
      v18 = (WTF::StringImpl *)&v17;
      v8 = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v18, v6 + 8);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v8, &v18);
      WebCore::DocumentStorageAccess::requestStorageAccessQuirk((uint64_t)a1, (uint64_t)&v18, (uint64_t *)a2);
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::DocumentStorageAccess::requestStorageAccessQuirk(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *result;
  WTF *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  WTF::StringImpl *v36;
  _QWORD *v37;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || (v6 = *(_QWORD *)(v5 + 24)) == 0 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1959BB64CLL);
  }
  ++*(_DWORD *)v7;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v36, (const WTF::URL *)(v7 + 168));
  v10 = *(_QWORD *)(v3 + 528);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = 0;
  }
  v14 = 1;
LABEL_10:
  v15 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16);
  v16 = *(unsigned __int8 *)(a1 + 33);
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
    goto LABEL_43;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a1;
  v19 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  if (!v19)
    goto LABEL_43;
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, v18);
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
LABEL_43:
    do
      v22 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v22 + 1, (unsigned int *)v17));
  }
  v23 = *a3;
  *a3 = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v24 = &off_1E33A4760;
  v24[1] = a1;
  v24[2] = v17;
  v24[3] = v23;
  v37 = v24;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, BOOL, _QWORD **))(*(_QWORD *)v15 + 1624))(v15, a2, &v36, v11, v16 != 0, &v37);
  v26 = v37;
  v37 = 0;
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  if ((v14 & 1) == 0)
  {
    v27 = (unsigned int *)(v11 + 8);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = off_1E31FE290;
      v33[1] = v27;
      v37 = v33;
      WTF::ensureOnMainThread();
      v34 = v37;
      v37 = 0;
      if (v34)
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    }
  }
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *result -= 2;
  }
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::Page::~Page(v7);
    result = (unsigned int *)WTF::fastFree(v31, v32);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v25);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::DocumentStorageAccess::requestStorageAccessForNonDocumentQuirk(WebCore::DocumentStorageAccess *a1, WebCore::Document *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = WebCore::DocumentStorageAccess::from(a1, a2);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        if (*(_QWORD *)(v8 + 8) && *(unsigned __int8 *)(v5 + 32) < 2u)
          return WebCore::DocumentStorageAccess::requestStorageAccessQuirk(v5, (uint64_t)a2, a3);
      }
    }
  }
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

unsigned int *WebCore::DocumentStorageAccess::enableTemporaryTimeUserGesture(WebCore::DocumentStorageAccess *this)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  unsigned int *result;
  WTF *v6;
  void *v7;
  __int128 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  LOBYTE(v8) = 0;
  v9 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator(v3, 257, v2, 1, 0, &v8, 1);
  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)result);
    result = (unsigned int *)WTF::fastFree(v6, v7);
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::DocumentType::nodeName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::DocumentType::cloneNodeInternal@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0xA00000000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)result = off_1E33A3E18;
  v7 = (_DWORD *)a1[10];
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  v8 = (_DWORD *)a1[11];
  if (v8 || (v8 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v8 += 2;
  *(_QWORD *)(result + 88) = v8;
  v9 = (_DWORD *)a1[12];
  if (v9 || (v9 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v9 += 2;
  *(_QWORD *)(result + 96) = v9;
  *a3 = result;
  return result;
}

uint64_t WebCore::Element::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x100C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)result = off_1E33A40A0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::Element::Element(uint64_t result, _DWORD **a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(result + 24) = 2;
  *(_WORD *)(result + 28) = a4 | 0x100C;
  *(_WORD *)(result + 30) = 0;
  if ((a4 & 0x80) != 0)
    v4 = 0;
  else
    v4 = a3;
  if ((a4 & 0xE000 | 0x1000) == 0x9000)
    v4 = 0;
  if (v4)
    v5 = v4 + 96;
  else
    v5 = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v5;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)result = off_1E33A40A0;
  v6 = *a2;
  if (*a2)
    ++*v6;
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

void WebCore::Element::~Element(uint64_t this)
{
  uint64_t (**v2)(WebCore::Node *__hidden);
  WebCore::IntersectionObserver *Ref;
  void *v4;
  uint64_t v5;
  WebCore::TreeScope *v6;
  uint64_t v7;
  WebCore::QualifiedName::QualifiedNameImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::Element *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WebCore::ElementRareData *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl **v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  void *v71;
  WTF *v72;
  unsigned int *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  WTF::StringImpl **v82;
  WTF *v83;
  void *v84;
  WTF::StringImpl *v85;
  WTF *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD **v90;
  _DWORD *v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v103;
  uint64_t j;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  _DWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD **v123;
  _DWORD *v124;
  WTF *v125;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  int i;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  WebCore::InspectorDOMAgent *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int *v164;
  _DWORD *v165;
  unint64_t v166;
  unsigned int *v167;
  _DWORD *v168;
  WebCore::IntersectionObserver *v169;
  uint64_t v170;
  WebCore::ResizeObserver *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WebCore::ContainerNode *v178;
  uint64_t v179;
  WebCore::AXObjectCache *v180;
  WebCore::AXObjectCache *v181;
  int v182;
  int v183;
  __int16 v184;
  uint64_t v185;

  v2 = off_1E33A40A0;
  *(_QWORD *)this = off_1E33A40A0;
  if ((*(_BYTE *)(this + 54) & 1) != 0)
  {
    {
      if (WebCore::elementIdentifiersMap(void)::map)
      {
        v129 = *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 8);
        v130 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
        v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
        v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
        v133 = v129 & ((v132 >> 31) ^ v132);
        for (i = 1; ; ++i)
        {
          v135 = v133;
          v136 = *(_QWORD *)(WebCore::elementIdentifiersMap(void)::map + 16 * v133);
          if (v136 != -1)
          {
            if (!v136)
              goto LABEL_287;
            if (*(_QWORD *)(v136 + 8) == this)
              break;
          }
          v133 = (v135 + i) & v129;
        }
        if ((_DWORD)v135 != *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 4))
        {
          WTF::HashTable<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>>::remove(&WebCore::elementIdentifiersMap(void)::map, (_QWORD *)(WebCore::elementIdentifiersMap(void)::map + 16 * v135));
          v2 = *(uint64_t (***)(WebCore::Node *__hidden))this;
          goto LABEL_2;
        }
      }
    }
    else
    {
      WebCore::elementIdentifiersMap(void)::map = 0;
    }
LABEL_287:
    v2 = off_1E33A40A0;
  }
LABEL_2:
  Ref = (WebCore::IntersectionObserver *)v2[136]((WebCore::Node *)this);
  if (Ref)
    Ref = WebCore::Element::disconnectFromIntersectionObserversSlow((WebCore::IntersectionObserver *)this, Ref);
  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v39 = *(unsigned int **)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x88);
    if (v39)
    {
      v40 = v39[3];
      if ((_DWORD)v40)
      {
        v169 = *(WebCore::IntersectionObserver **)v39;
        v170 = 8 * v40;
        do
        {
          if (*(_QWORD *)v169)
            v171 = *(WebCore::ResizeObserver **)(*(_QWORD *)v169 + 8);
          else
            v171 = 0;
          Ref = (WebCore::IntersectionObserver *)WebCore::ResizeObserver::targetDestroyed(v171, (WebCore::Element *)this);
          v169 = (WebCore::IntersectionObserver *)((char *)v169 + 8);
          v170 -= 8;
        }
        while (v170);
      }
      if (v39[2])
      {
        if (v39[3])
          WTF::Vector<WTF::WeakPtr<WebCore::ResizeObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v39, 0);
        Ref = *(WebCore::IntersectionObserver **)v39;
        if (*(_QWORD *)v39)
        {
          *(_QWORD *)v39 = 0;
          v39[2] = 0;
          Ref = (WebCore::IntersectionObserver *)WTF::fastFree(Ref, v4);
        }
      }
    }
  }
  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v41 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v41)
    {
      *(_DWORD *)(v41 + 24) += 2;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v150 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
        v151 = *(_QWORD *)(v150 + 528);
        if (v151)
        {
          v152 = *(_QWORD *)(v151 + 8);
          if (v152)
          {
            v153 = *(_QWORD *)(v152 + 24);
            if (v153)
            {
              v154 = *(_QWORD *)(v153 + 8);
              if (v154)
                goto LABEL_293;
            }
          }
        }
        v158 = *(_QWORD *)(v150 + 2632);
        if (v158)
        {
          v159 = *(_QWORD *)(v158 + 8);
          if (v159)
          {
            v160 = *(_QWORD *)(v159 + 528);
            if (v160)
            {
              v161 = *(_QWORD *)(v160 + 8);
              if (v161)
              {
                v162 = *(_QWORD *)(v161 + 24);
                if (v162)
                {
                  v154 = *(_QWORD *)(v162 + 8);
                  if (v154)
                  {
LABEL_293:
                    v155 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 80) + 8) + 40);
                    if (v155)
                      WebCore::InspectorDOMAgent::willPopShadowRoot(v155, (WebCore::Element *)this, (WebCore::ShadowRoot *)v41);
                  }
                }
              }
            }
          }
        }
      }
      v43 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
      if (!*(_QWORD *)(v43 + 1248))
        goto LABEL_84;
      if (*(_BYTE *)(v43 + 3362))
        goto LABEL_84;
      v44 = WebCore::TreeScope::focusedElementInScope(*(WebCore::TreeScope **)(v41 + 40));
      if (!v44)
        goto LABEL_84;
      v45 = v44;
      v46 = *(_DWORD *)(v44 + 24);
      *(_DWORD *)(v44 + 24) = v46 + 2;
      if (v44 == v41)
      {
        v47 = *(_WORD *)(v41 + 28);
      }
      else
      {
        v47 = *(_WORD *)(v41 + 28);
        if ((v47 & 0xF000) == 0x9000)
        {
          if (**(_QWORD **)(v44 + 40) != v41
            || (*(_WORD *)(v44 + 28) & 0xF000) == 0x9000
            || (*(_BYTE *)(v44 + 22) & 8) == 0)
          {
            goto LABEL_82;
          }
        }
        else
        {
          if ((v47 & 4) == 0
            || !*(_QWORD *)(v41 + 80)
            || ((*(unsigned __int8 *)(v44 + 22) ^ *(unsigned __int8 *)(v41 + 22)) & 8) != 0)
          {
            goto LABEL_82;
          }
          v48 = v44;
          do
            v48 = *(_QWORD *)(v48 + 32);
          while (v48 != v41 && v48 != 0);
          if (!v48)
          {
LABEL_82:
            if (v46)
            {
              *(_DWORD *)(v45 + 24) = v46;
            }
            else if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v45, v4);
            }
LABEL_84:
            Ref = *(WebCore::IntersectionObserver **)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58) = 0;
            if (Ref)
            {
              if (*((_DWORD *)Ref + 6) == 2)
              {
                if ((*((_WORD *)Ref + 15) & 0x400) == 0)
                  Ref = (WebCore::IntersectionObserver *)WebCore::Node::removedLastRef(Ref, v4);
              }
              else
              {
                *((_DWORD *)Ref + 6) -= 2;
              }
            }
            v50 = *(_QWORD *)(v41 + 200);
            *(_QWORD *)(v41 + 200) = 0;
            if (v50)
            {
              do
              {
                v51 = __ldaxr((unsigned int *)v50);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, (unsigned int *)v50));
              if (!v52)
              {
                atomic_store(1u, (unsigned int *)v50);
                v156 = *(unsigned int *)(v50 + 28);
                if ((_DWORD)v156)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v50 + 16), (WTF::StringImpl *)(*(_QWORD *)(v50 + 16) + 32 * v156));
                v157 = *(WTF **)(v50 + 16);
                if (v157)
                {
                  *(_QWORD *)(v50 + 16) = 0;
                  *(_DWORD *)(v50 + 24) = 0;
                  WTF::fastFree(v157, v4);
                }
                Ref = (WebCore::IntersectionObserver *)WTF::fastFree((WTF *)v50, v4);
              }
            }
            v53 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
            *(_QWORD *)(v41 + 112) = v53 + 96;
            *(_QWORD *)(v41 + 104) = *(_QWORD *)(v53 + 104);
            if (*(_DWORD *)(v41 + 24) == 2)
            {
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                Ref = (WebCore::IntersectionObserver *)WebCore::Node::removedLastRef((WebCore::Node *)v41, v4);
            }
            else
            {
              *(_DWORD *)(v41 + 24) -= 2;
            }
            goto LABEL_6;
          }
        }
      }
      if ((v47 & 4) != 0)
        v178 = (WebCore::ContainerNode *)v41;
      else
        v178 = 0;
      WebCore::SubframeLoadingDisabler::SubframeLoadingDisabler((WebCore::SubframeLoadingDisabler *)&v185, v178);
      v183 = 0x10000;
      v184 = 0;
      WebCore::Document::setFocusedElement((WebCore::Document *)v43, 0, &v183);
      WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v43, (WebCore::Node *)v45);
      WebCore::SubframeLoadingDisabler::~SubframeLoadingDisabler((WebCore::SubframeLoadingDisabler *)&v185);
      v46 = *(_DWORD *)(v45 + 24) - 2;
      goto LABEL_82;
    }
  }
LABEL_6:
  if ((*(_BYTE *)(this + 22) & 0x80) != 0)
    Ref = (WebCore::IntersectionObserver *)WebCore::Element::detachAllAttrNodesFromElement(this, v4, v5, v6);
  v7 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 != 1)
    {
      --*(_DWORD *)v7;
      goto LABEL_11;
    }
    v54 = *(unsigned int *)(v7 + 4);
    if ((v54 & 1) != 0)
    {
      v55 = *(unsigned int *)(v7 + 52);
      if ((_DWORD)v55)
      {
        v56 = 16 * v55;
        v57 = (WTF::StringImpl **)(*(_QWORD *)(v7 + 40) + 8);
        do
        {
          v58 = *v57;
          *v57 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v58 -= 2;
          }
          v59 = (WTF::StringImpl **)*(v57 - 1);
          *(v57 - 1) = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
              WTF::fastFree(v60, v61);
            }
            else
            {
              --*(_DWORD *)v59;
            }
          }
          v57 += 2;
          v56 -= 16;
        }
        while (v56);
      }
      v72 = *(WTF **)(v7 + 40);
      if ((WTF *)(v7 + 56) != v72 && v72 != 0)
      {
        *(_QWORD *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        WTF::fastFree(v72, v4);
      }
      v74 = *(unsigned int **)(v7 + 32);
      *(_QWORD *)(v7 + 32) = 0;
      if (v74)
      {
        if (*v74 == 1)
        {
          v116 = v74[1];
          if (v116 >= 0x10)
          {
            v117 = 0;
            v118 = (unsigned int *)((char *)v74 + ((v116 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v119 = (_DWORD *)(*v118 | ((unint64_t)*((unsigned __int8 *)v118 + 4) << 32));
              if (*v119 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v119, (WTF::StringImpl *)v4);
              else
                *v119 -= 2;
              ++v117;
              v118 = (unsigned int *)((char *)v118 + 5);
            }
            while (v117 < (unint64_t)v74[1] >> 4);
          }
          WTF::fastFree((WTF *)v74, v4);
        }
        else
        {
          --*v74;
        }
      }
      v75 = *(WTF::StringImpl **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v75 -= 2;
      }
      v76 = *(WTF **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v76)
      {
        if (*((_DWORD *)v76 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v76, (WTF::StringImpl *)v4);
        else
          --*((_DWORD *)v76 + 2);
      }
      v77 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (!v77)
        goto LABEL_150;
      v78 = *(_DWORD *)v77 - 1;
      if (*(_DWORD *)v77 != 1)
        goto LABEL_149;
      v120 = *(unsigned int *)(v77 + 4);
      if ((v120 & 8) == 0)
      {
        if (v120 >= 0x10)
        {
          v163 = 0;
          v164 = (unsigned int *)(v77 + ((v120 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v165 = (_DWORD *)(*v164 | ((unint64_t)*((unsigned __int8 *)v164 + 4) << 32));
            if (*v165 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v165, (WTF::StringImpl *)v4);
            else
              *v165 -= 2;
            ++v163;
            v164 = (unsigned int *)((char *)v164 + 5);
          }
          while (v163 < (unint64_t)*(unsigned int *)(v77 + 4) >> 4);
        }
        goto LABEL_249;
      }
      v121 = *(unsigned int *)(v77 + 28);
      if ((_DWORD)v121)
      {
        v122 = 16 * v121;
        v123 = (_DWORD **)(*(_QWORD *)(v77 + 16) + 8);
        do
        {
          v124 = *v123;
          *v123 = 0;
          if (v124)
          {
            if (*v124 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v124, (WTF::StringImpl *)v4);
            else
              *v124 -= 2;
          }
          v123 += 2;
          v122 -= 16;
        }
        while (v122);
      }
    }
    else
    {
      if (v54 >= 0x20)
      {
        v79 = v54 >> 5;
        v80 = (WTF::StringImpl **)(v7 + 40);
        do
        {
          v81 = *v80;
          *v80 = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = (WTF::StringImpl **)*(v80 - 1);
          *(v80 - 1) = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v82);
              WTF::fastFree(v83, v84);
            }
            else
            {
              --*(_DWORD *)v82;
            }
          }
          v80 += 2;
          --v79;
        }
        while (v79);
      }
      v85 = *(WTF::StringImpl **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v85 -= 2;
      }
      v86 = *(WTF **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v86, (WTF::StringImpl *)v4);
        else
          --*((_DWORD *)v86 + 2);
      }
      v77 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (!v77)
        goto LABEL_150;
      v78 = *(_DWORD *)v77 - 1;
      if (*(_DWORD *)v77 != 1)
      {
LABEL_149:
        *(_DWORD *)v77 = v78;
LABEL_150:
        Ref = (WebCore::IntersectionObserver *)WTF::fastFree((WTF *)v7, v4);
        goto LABEL_11;
      }
      v87 = *(unsigned int *)(v77 + 4);
      if ((v87 & 8) == 0)
      {
        if (v87 >= 0x10)
        {
          v166 = 0;
          v167 = (unsigned int *)(v77 + ((v87 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v168 = (_DWORD *)(*v167 | ((unint64_t)*((unsigned __int8 *)v167 + 4) << 32));
            if (*v168 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v168, (WTF::StringImpl *)v4);
            else
              *v168 -= 2;
            ++v166;
            v167 = (unsigned int *)((char *)v167 + 5);
          }
          while (v166 < (unint64_t)*(unsigned int *)(v77 + 4) >> 4);
        }
        goto LABEL_249;
      }
      v88 = *(unsigned int *)(v77 + 28);
      if ((_DWORD)v88)
      {
        v89 = 16 * v88;
        v90 = (_DWORD **)(*(_QWORD *)(v77 + 16) + 8);
        do
        {
          v91 = *v90;
          *v90 = 0;
          if (v91)
          {
            if (*v91 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, (WTF::StringImpl *)v4);
            else
              *v91 -= 2;
          }
          v90 += 2;
          v89 -= 16;
        }
        while (v89);
      }
    }
    v125 = *(WTF **)(v77 + 16);
    if ((WTF *)(v77 + 32) != v125 && v125 != 0)
    {
      *(_QWORD *)(v77 + 16) = 0;
      *(_DWORD *)(v77 + 24) = 0;
      WTF::fastFree(v125, v4);
    }
    v127 = *(_QWORD *)(v77 + 8);
    *(_QWORD *)(v77 + 8) = 0;
    if (v127)
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
LABEL_249:
    WTF::fastFree((WTF *)v77, v4);
    goto LABEL_150;
  }
LABEL_11:
  v8 = *(WebCore::QualifiedName::QualifiedNameImpl **)(this + 96);
  *(_QWORD *)(this + 96) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v62 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v62 || (v63 = *(_QWORD *)(v62 + 96)) == 0)
        v63 = WebCore::threadGlobalDataSlow(Ref);
      v64 = *(uint64_t **)(v63 + 56);
      if (!v64)
      {
        WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v63);
        v64 = *(uint64_t **)(v63 + 56);
      }
      WebCore::QualifiedNameCache::remove(v64, v8);
      v66 = (WTF::StringImpl *)*((_QWORD *)v8 + 6);
      *((_QWORD *)v8 + 6) = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v65);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = (WTF::StringImpl *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v65);
        else
          *(_DWORD *)v67 -= 2;
      }
      v68 = (WTF::StringImpl *)*((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v65);
        else
          *(_DWORD *)v68 -= 2;
      }
      v69 = (WTF::StringImpl *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v65);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v65);
        else
          *(_DWORD *)v70 -= 2;
      }
      WTF::fastFree(v8, v65);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  *(_QWORD *)this = off_1E33A1428;
  if ((*(_WORD *)(this + 28) & 0xF000) != 0x9000)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    if ((*(_BYTE *)(this + 22) & 1) != 0)
    {
      WebCore::Document::didRemoveWheelEventHandler(v9, (WebCore::Node *)this, 1);
      WebCore::Document::removeTouchEventListener(v9, this, 1);
      WebCore::Document::didRemoveTouchEventHandler((WebCore::Document *)v9, this, 1);
    }
    v10 = *(_QWORD *)(v9 + 632);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::Element **)(v10 + 16 * v15);
      if (v16 != (WebCore::Element *)this)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::Element **)(v10 + 16 * v15);
          ++v17;
          if (v16 == (WebCore::Element *)this)
            goto LABEL_24;
        }
        v15 = *(unsigned int *)(v10 - 4);
      }
LABEL_24:
      if (v15 != *(_DWORD *)(v10 - 4))
      {
        *(_QWORD *)(v10 + 16 * v15) = -1;
        v96 = (uint64_t *)(v9 + 632);
        ++*(_DWORD *)(*(_QWORD *)(v9 + 632) - 16);
        v97 = *(_QWORD *)(v9 + 632);
        if (v97)
          v98 = *(_DWORD *)(v97 - 12) - 1;
        else
          v98 = -1;
        *(_DWORD *)(v97 - 12) = v98;
        v99 = *v96;
        if (*v96)
        {
          v100 = 6 * *(_DWORD *)(v99 - 12);
          v101 = *(_DWORD *)(v99 - 4);
          if (v100 < v101 && v101 >= 9)
            WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v96, v101 >> 1, 0);
        }
        v103 = *(_QWORD *)(v9 + 528);
        if (*(unsigned __int8 *)(v9 + 3362) | *(unsigned __int8 *)(v9 + 3405))
        {
          j = v9;
          if (v103)
          {
            v172 = *(_QWORD *)(v103 + 8);
            j = v9;
            if (v172)
            {
              v173 = *(_QWORD *)(v172 + 120);
              j = v9;
              if (v173)
              {
                v174 = *(_QWORD *)(v173 + 8);
                for (j = v9; v174; v174 = *(_QWORD *)(v177 + 8))
                {
                  j = *(_QWORD *)(*(_QWORD *)(v174 + 40) + 8);
                  v175 = *(_QWORD *)(j + 528);
                  if (!v175)
                    break;
                  v176 = *(_QWORD *)(v175 + 8);
                  if (!v176)
                    break;
                  v177 = *(_QWORD *)(v176 + 120);
                  if (!v177)
                    break;
                }
              }
            }
          }
        }
        else
        {
          j = v9;
          if (v103)
          {
            v105 = *(_QWORD *)(v103 + 8);
            j = v9;
            if (v105)
            {
              v106 = *(_QWORD *)(*(_QWORD *)(v105 + 128) + 8);
              v107 = v106 && *(_BYTE *)(v106 + 144) == 0;
              j = v9;
              if (v107)
              {
                v108 = *(_QWORD *)(v106 + 296);
                j = v9;
                if (v108)
                  j = v108;
              }
            }
          }
        }
        if (!*(_BYTE *)(j + 672))
        {
          *(_BYTE *)(j + 672) = 1;
          v109 = *(_QWORD *)(j + 528);
          if (v109)
          {
            v110 = *(_QWORD *)(v109 + 8);
            if (v110)
            {
              v111 = *(_QWORD *)(v110 + 24);
              if (v111)
              {
                v112 = *(_QWORD *)(v110 + 288);
                v113 = *(_QWORD *)(v111 + 8);
                if (v113 && v112 != 0)
                {
                  v115 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v111 + 8));
                  if (v115)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 88))(v115, v112);
                  else
                    WebCore::Page::scheduleRenderingUpdate(v113, 0x2000);
                }
              }
            }
          }
        }
      }
    }
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v180 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v9);
      if (v180)
      {
        v181 = v180;
        ++*((_DWORD *)v180 + 2);
        WebCore::AXObjectCache::remove(v180, (WebCore::Node *)this);
        v182 = *((_DWORD *)v181 + 2);
        if (!v182)
        {
          __break(0xC471u);
          return;
        }
        *((_DWORD *)v181 + 2) = v182 - 1;
      }
    }
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if ((*(_WORD *)(this + 78) & 0x3FF) != 0)
  {
    v179 = *(_QWORD *)(this + 80);
    if (v179)
    {
      *(_DWORD *)(v179 + 24) += 2;
      v185 = v179;
      do
      {
        WebCore::Node::updateAncestorConnectedSubframeCountForRemoval(v179);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v185, *(_QWORD *)(v185 + 56));
        v179 = v185;
      }
      while (v185);
    }
  }
  v18 = WebCore::ScriptDisallowedScope::s_count++;
  v19 = *(_QWORD *)(this + 80);
  if (v19)
  {
    *(_DWORD *)(v19 + 24) += 2;
    do
    {
      v20 = v19;
      v19 = *(_QWORD *)(v19 + 56);
      if (v19)
      {
        *(_DWORD *)(v19 + 24) += 2;
        v22 = (_DWORD *)(v20 + 24);
        v21 = *(_DWORD *)(v20 + 24);
        *(_QWORD *)(v20 + 56) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_DWORD *)(v20 + 24) = v21 & 0xFFFFFFFE;
        *(_QWORD *)(v19 + 48) = (unint64_t)*(unsigned __int16 *)(v19 + 54) << 48;
      }
      else
      {
        v22 = (_DWORD *)(v20 + 24);
        v128 = *(_DWORD *)(v20 + 24);
        *(_QWORD *)(v20 + 56) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_DWORD *)(v20 + 24) = v128 & 0xFFFFFFFE;
      }
      *(_QWORD *)(this + 80) = v19;
      v23 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
      v24 = *(_DWORD *)(v23 + 24) + 2;
      *(_DWORD *)(v23 + 24) = v24;
      v4 = *(void **)(v20 + 40);
      if (v4 != (void *)(v23 + 96))
      {
        WebCore::Node::moveTreeToNewScope(v20, (WebCore::Node *)v4, (WebCore::TreeScope *)(v23 + 96), v6);
        v24 = *(_DWORD *)(v23 + 24);
      }
      v25 = v24 - 2;
      if (v25)
      {
        *(_DWORD *)(v23 + 24) = v25;
      }
      else if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v4);
      }
      v26 = *(_QWORD *)(v20 + 16);
      if ((v26 & 0x18000000000000) != 0)
      {
        v92 = (*(_BYTE *)(this + 22) & 0x18) == 0;
        if ((v26 & 0x8000000000000) != 0)
          WebCore::notifyNodeRemovedFromDocument(this, v92, v20);
        else
          WebCore::notifyNodeRemovedFromTree(this, v92, v20);
      }
      if (*v22 == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
      }
      else
      {
        *v22 -= 2;
      }
    }
    while (v19);
    v18 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  *(_QWORD *)(this + 88) = 0;
  WebCore::ScriptDisallowedScope::s_count = v18;
  *(_QWORD *)this = off_1E33A6278;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v137 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    v138 = *(_QWORD *)(v137 + 528);
    if (v138)
    {
      v139 = *(_QWORD *)(v138 + 8);
      if (v139)
      {
        v140 = *(_QWORD *)(v139 + 24);
        if (v140)
        {
          v141 = *(_QWORD *)(v140 + 8);
          if (v141)
            goto LABEL_272;
        }
      }
    }
    v145 = *(_QWORD *)(v137 + 2632);
    if (v145)
    {
      v146 = *(_QWORD *)(v145 + 8);
      if (v146)
      {
        v147 = *(_QWORD *)(v146 + 528);
        if (v147)
        {
          v148 = *(_QWORD *)(v147 + 8);
          if (v148)
          {
            v149 = *(_QWORD *)(v148 + 24);
            if (v149)
            {
              v141 = *(_QWORD *)(v149 + 8);
              if (v141)
              {
LABEL_272:
                v142 = *(_QWORD *)(*(_QWORD *)(v141 + 80) + 8);
                v143 = *(uint64_t **)(v142 + 152);
                if (v143)
                {
                  v185 = this;
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v143 + 21, (WTF::StringImpl *)&v185);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v143 + 22, (WTF::StringImpl *)&v185);
                  WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v143 + 23, (WTF::StringImpl *)&v185);
                }
                v144 = *(WebCore::InspectorDOMAgent **)(v142 + 40);
                if (v144)
                  WebCore::InspectorDOMAgent::willDestroyDOMNode(v144, (WebCore::Node *)this);
              }
            }
          }
        }
      }
    }
  }
  v28 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  *(_QWORD *)(this + 40) = 0;
  v29 = *(_DWORD *)(v28 + 3324) - 1;
  *(_DWORD *)(v28 + 3324) = v29;
  if (!v29 && *(_DWORD *)(v28 + 24) <= 1u && (*(_WORD *)(v28 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v28 + 30) |= 0x400u;
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
  }
  v30 = *(_QWORD *)(this + 72);
  v31 = (WebCore::ElementRareData *)(v30 & 0xFFFFFFFFFFFFLL);
  if ((v30 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_BYTE *)((v30 & 0xFFFFFFFFFFFFLL) + 0x18))
      WebCore::ElementRareData::~ElementRareData(v31, v4);
    else
      std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v31, v4);
    WTF::fastFree(v31, v71);
    v30 = *(_QWORD *)(this + 72);
  }
  *(_QWORD *)(this + 72) = v30 & 0xFFFF000000000000;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v32 = *(_QWORD *)(this + 16);
  if ((v32 & 0x1000000000000) != 0)
  {
    v93 = v32 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v94 = *(unsigned int *)((v32 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v94)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v93 + 16), (WTF::StringImpl *)(*(_QWORD *)(v93 + 16) + 32 * v94));
        *(_DWORD *)(v93 + 28) = 0;
      }
      v95 = *(WTF **)(v93 + 16);
      if (v95)
      {
        *(_QWORD *)(v93 + 16) = 0;
        *(_DWORD *)(v93 + 24) = 0;
        WTF::fastFree(v95, v4);
      }
    }
  }
  v33 = *(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL;
  if (v33)
  {
    *(_QWORD *)((*(_QWORD *)(this + 16) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v35 = __ldaxr((unsigned int *)v33);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v33));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v33);
      v37 = *(unsigned int *)(v33 + 28);
      if ((_DWORD)v37)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v37));
      v38 = *(WTF **)(v33 + 16);
      if (v38)
      {
        *(_QWORD *)(v33 + 16) = 0;
        *(_DWORD *)(v33 + 24) = 0;
        WTF::fastFree(v38, v4);
      }
      WTF::fastFree((WTF *)v33, v4);
    }
  }
  v34 = *(_QWORD *)(this + 8);
  if (v34)
  {
    *(_QWORD *)(v34 + 8) = 3;
    *(_QWORD *)(this + 8) = 0;
  }
}

uint64_t WebCore::Element::detachAllAttrNodesFromElement(uint64_t this, void *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  uint64_t *v24;
  uint64_t v25;

  if ((*(_BYTE *)(this + 22) & 0x80) != 0)
  {
    {
      if (WebCore::attrNodeListMap(void)::map)
      {
        v18 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
        v19 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        for (i = 1; ; ++i)
        {
          v24 = (uint64_t *)(WebCore::attrNodeListMap(void)::map + 24 * v22);
          v25 = *v24;
          if (*v24 != -1)
          {
            if (!v25)
            {
              v24 = (uint64_t *)(WebCore::attrNodeListMap(void)::map
                              + 24 * *(unsigned int *)(WebCore::attrNodeListMap(void)::map - 4));
              goto LABEL_29;
            }
            if (*(_QWORD *)(v25 + 8) == this)
              goto LABEL_29;
          }
          v22 = (v22 + i) & v18;
        }
      }
      v24 = 0;
    }
    else
    {
      v24 = 0;
      WebCore::attrNodeListMap(void)::map = 0;
    }
LABEL_29:
    v5 = (uint64_t **)(v24 + 1);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(this + 104);
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 + 40);
    v9 = *(_DWORD *)(v6 + 52);
  }
  else
  {
    v8 = v6 + 32;
    v9 = v7 >> 5;
  }
  if (v9)
  {
    v11 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v11)
    {
      v12 = 0;
      while (1)
      {
        if (v11)
        {
          v13 = *v5;
          v14 = *(_QWORD *)(v8 + 16 * v12);
          v15 = 8 * v11;
          while (1)
          {
            v16 = *v13;
            v17 = *(_QWORD *)(*v13 + 88);
            if (v17 == v14
              || *(_QWORD *)(v17 + 24) == *(_QWORD *)(v14 + 24) && *(_QWORD *)(v17 + 32) == *(_QWORD *)(v14 + 32))
            {
              break;
            }
            ++v13;
            v15 -= 8;
            if (!v15)
              goto LABEL_12;
          }
          *(_DWORD *)(v16 + 24) += 2;
          WebCore::Attr::detachFromElementWithValue((WebCore::Attr *)v16, (const WTF::AtomString *)(v8 + 16 * v12 + 8), a3, a4);
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
LABEL_12:
        if (v9 == (_DWORD)v12 + 1)
          break;
        v12 = (v12 + 1);
        v11 = *((unsigned int *)v5 + 3);
      }
    }
  }
  {
    WebCore::attrNodeListMap(void)::map = 0;
  }
  result = WTF::HashMap<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>,WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Attr,WTF::RawPtrTraits<WebCore::Attr>,WTF::DefaultRefDerefTraits<WebCore::Attr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>(this, a2);
  *(_QWORD *)(this + 16) &= ~0x80000000000000uLL;
  return result;
}

void WebCore::Element::~Element(WebCore::Element *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

_QWORD *WebCore::Element::setTabIndexExplicitly(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = this;
  if ((a2 & 0xFF00000000) != 0)
  {
    v3 = a2;
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 == -1)
      {
        v4 = 0x800000000000000;
      }
      else
      {
        v5 = this[9] & 0xFFFFFFFFFFFFLL;
        if (!v5)
        {
          this = (_QWORD *)WebCore::Node::materializeRareData((WebCore::Node *)this);
          v5 = v2[9] & 0xFFFFFFFFFFFFLL;
        }
        *(_DWORD *)(v5 + 28) = v3;
        v4 = 0xC00000000000000;
      }
    }
    else
    {
      v4 = 0x400000000000000;
    }
    v6 = v2[9] & 0xF3FFFFFFFFFFFFFFLL | v4;
  }
  else
  {
    v6 = this[9] & 0xF3FFFFFFFFFFFFFFLL;
  }
  v2[9] = v6;
  return this;
}

uint64_t WebCore::Element::tabIndexSetExplicitly(WebCore::Element *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 9);
  v2 = (v1 >> 58) & 3;
  switch((_DWORD)v2)
  {
    case 1:
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      v4 = -256;
      v3 = 255;
      break;
    case 3:
      v3 = *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C);
      v4 = v3 & 0xFFFFFF00;
      v3 = v3;
      break;
    default:
      v5 = 0;
      v3 = 0;
      v4 = 0;
      return v5 | v4 | v3;
  }
  v5 = 0x100000000;
  return v5 | v4 | v3;
}

uint64_t WebCore::Element::defaultTabIndex(WebCore::Element *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::Element::isNonceable(WebCore::Element *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t result;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (!*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xD8) || (*((_BYTE *)this + 23) & 1) != 0)
    return 0;
  if (!WebCore::Element::hasAttributes(this, a2, a3, a4, a5))
    return 1;
  v7 = *((_WORD *)this + 14);
  if (((v7 & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
    && ((v7 & 0x20) == 0 || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::scriptTag + 24)))
  {
    return 1;
  }
  v8 = *((_QWORD *)this + 13);
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v11 = *(_DWORD *)(v8 + 52);
  }
  else
  {
    v10 = v8 + 32;
    v11 = v9 >> 5;
  }
  if (!v11)
    return 1;
  v12 = 0;
  while (1)
  {
    v13 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 16 * v12) + 40);
    if (!v13)
    {
      WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)(v10 + 16 * v12 + 8));
      goto LABEL_17;
    }
    *(_DWORD *)v13 += 2;
    WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)(v10 + 16 * v12 + 8));
    if (WTF::StringImpl::find() != -1 || WTF::StringImpl::find() != -1)
      break;
LABEL_17:
    if (v17)
    {
      if (WTF::StringImpl::find() != -1 || WTF::StringImpl::find() != -1)
        break;
      v16 = v17;
      v17 = 0;
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    v15 = v12 + 1;
    v12 = (v12 + 1);
    result = 1;
    if (v11 == v15)
      return result;
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (!v13)
    return 0;
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v14);
    return 0;
  }
  result = 0;
  *(_DWORD *)v13 -= 2;
  return result;
}

uint64_t WebCore::Element::nonce(WebCore::Element *this, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
    && WebCore::Element::isNonceable(this, a2, a3, a4, a5))
  {
    return (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 216;
  }
  else
  {
    return MEMORY[0x1E0CBF3B8];
  }
}

_QWORD *WebCore::Element::setNonce(_QWORD *this, const WTF::AtomString *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v2 = *(_DWORD **)a2;
  v3 = this[9] & 0xFFFFFFFFFFFFLL;
  if (*(_QWORD *)a2 != *MEMORY[0x1E0CBF3B8] || v3 != 0)
  {
    if (!v3)
    {
      v6 = this;
      WebCore::Node::materializeRareData((WebCore::Node *)this);
      v3 = v6[9] & 0xFFFFFFFFFFFFLL;
      v2 = *(_DWORD **)a2;
    }
    if (v2)
      *v2 += 2;
    this = *(_QWORD **)(v3 + 216);
    *(_QWORD *)(v3 + 216) = v2;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

